{"sample_id": 500, "db_id": "allergy_1", "question": "How many students does each advisor have?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students and their advisors.", "Determine the required information: We need to count the number of students for each advisor.", "Use the COUNT() function to count the number of students (StuID) for each advisor.", "Group the results by the 'Advisor' column to get the count for each advisor."], "pred_sql": "SELECT Advisor, COUNT(StuID) AS StudentCount FROM Student GROUP BY Advisor;", "gold_sql": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "source_tables": ["student"]}
{"sample_id": 501, "db_id": "allergy_1", "question": "Which advisor has most number of students?", "rationale": ["Identify the table that contains information about advisors and students, which is the 'Student' table.", "We need to count the number of students for each advisor, so we will use the COUNT() function on the 'StuID' column.", "To group the results by advisor, we will use the GROUP BY clause on the 'Advisor' column.", "To find the advisor with the most students, we will order the results in descending order based on the count of students.", "Finally, we will limit the results to only the top entry using LIMIT 1."], "pred_sql": "SELECT Advisor, COUNT(StuID) AS StudentCount\nFROM Student\nGROUP BY Advisor\nORDER BY StudentCount DESC\nLIMIT 1;", "gold_sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 502, "db_id": "allergy_1", "question": "Give the advisor with the most students.", "rationale": ["Identify the table that contains the advisor information, which is the 'Student' table.", "We need to count the number of students for each advisor, so we will use the COUNT() function on the 'StuID' column.", "Group the results by the 'Advisor' column to aggregate the student counts for each advisor.", "Order the results in descending order based on the student count to find the advisor with the most students.", "Limit the results to 1 to get only the advisor with the highest count."], "pred_sql": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;", "gold_sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 503, "db_id": "allergy_1", "question": "How many students have cat allergies?", "rationale": ["Identify the relevant table: The 'Has_Allergy' table contains information about which students have which allergies.", "Determine the specific allergy of interest: The query is asking about 'cat allergies'.", "Count the number of unique students with the specified allergy: Use COUNT(DISTINCT StuID) to ensure each student is only counted once, even if they have multiple allergies.", "Construct the SQL query: Use a SELECT statement to count the distinct student IDs from the 'Has_Allergy' table where the Allergy is 'cat'."], "pred_sql": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS StudentCount FROM Has_Allergy WHERE Allergy = 'cat';", "gold_sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  'Cat'", "source_tables": ["has_allergy"]}
{"sample_id": 504, "db_id": "allergy_1", "question": "How many students are affected by cat allergies?", "rationale": ["Identify the relevant table: We need to find information about students with allergies, so we will use the Has_Allergy table.", "Determine the specific allergy: The query asks about cat allergies, so we will filter for records where the Allergy column is 'cat'.", "Count the number of unique students: We want to know how many distinct students are affected, so we will use COUNT(DISTINCT StuID) to count unique student identifiers.", "Construct the SQL query: Combine the elements into a complete SQL statement that selects the count of distinct student IDs from the Has_Allergy table where the allergy is 'cat'."], "pred_sql": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS affected_students FROM Has_Allergy WHERE Allergy = 'cat';", "gold_sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  'Cat'", "source_tables": ["has_allergy"]}
{"sample_id": 505, "db_id": "allergy_1", "question": "Show all student IDs who have at least two allergies.", "rationale": ["Identify the table that contains the student IDs and their allergies, which is the 'Has_Allergy' table.", "To find students with at least two allergies, we need to group the results by 'StuID'.", "We will use the COUNT function to count the number of allergies for each student.", "We will use the HAVING clause to filter the groups to only include those with a count of allergies greater than or equal to 2."], "pred_sql": "SELECT StuID FROM Has_Allergy GROUP BY StuID HAVING COUNT(Allergy) >= 2;", "gold_sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "source_tables": ["has_allergy"]}
{"sample_id": 506, "db_id": "allergy_1", "question": "What are the students ids of students who have more than one allergy?", "rationale": ["Identify the table that contains the relevant data about students and their allergies, which is the 'Has_Allergy' table.", "We need to find students who have more than one allergy, so we will group the results by 'StuID' to aggregate the allergies for each student.", "Use the COUNT function to count the number of allergies for each student.", "Apply the HAVING clause to filter the groups (students) where the count of allergies is greater than one."], "pred_sql": "SELECT StuID FROM Has_Allergy GROUP BY StuID HAVING COUNT(Allergy) > 1;", "gold_sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "source_tables": ["has_allergy"]}
{"sample_id": 507, "db_id": "allergy_1", "question": "What are the student ids of students who don't have any allergies?", "rationale": ["Identify the main requirement: We need to find student IDs of students who do not have any allergies.", "To find students without allergies, we can use a subquery to get all student IDs from the Has_Allergy table.", "The subquery will return all StuID values that have allergies.", "We will then select from the Student table where the StuID is not in the list returned by the subquery."], "pred_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)", "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "source_tables": ["has_allergy", "student"]}
{"sample_id": 508, "db_id": "allergy_1", "question": "Which students are unaffected by allergies?", "rationale": ["Identify the Student table as it contains the information about students.", "To find students unaffected by allergies, we need to exclude those who have entries in the Has_Allergy table.", "The Has_Allergy table links students to their allergies via the StuID column.", "We can use a subquery to select all StuID values from the Has_Allergy table.", "The main query will select all columns from the Student table where the StuID is not in the list of StuIDs returned by the subquery."], "pred_sql": "SELECT * FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)", "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "source_tables": ["has_allergy", "student"]}
{"sample_id": 509, "db_id": "allergy_1", "question": "How many female students have milk or egg allergies?", "rationale": ["Identify the relevant tables: Student and Has_Allergy.", "We need to count the number of female students, so we will filter the Student table by the 'Sex' column where it equals 'Female'.", "We need to check for specific allergies (milk or egg), so we will filter the Has_Allergy table for the 'Allergy' column to include 'Milk' and 'Egg'.", "We will join the Student table with the Has_Allergy table on the StuID to link students with their allergies.", "Finally, we will use COUNT(DISTINCT Student.StuID) to count the unique female students who have either milk or egg allergies."], "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS FemaleStudentsWithAllergies\nFROM Student\nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID\nWHERE Student.Sex = 'Female' AND Has_Allergy.Allergy IN ('Milk', 'Egg');", "gold_sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  'F' AND T1.allergy  =  'Milk' OR T1.allergy  =  'Eggs'", "source_tables": ["has_allergy", "student"]}
{"sample_id": 510, "db_id": "allergy_1", "question": "How many students who are female are allergic to milk or eggs?", "rationale": ["Identify the relevant tables: We need to use the Student table to filter by gender and the Has_Allergy table to check for allergies.", "We need to count the number of distinct students, so we will use COUNT(DISTINCT Student.StuID).", "We need to filter the students to only include females, which is done by adding a WHERE clause with Student.Sex = 'Female'.", "We also need to filter the allergies to only include 'milk' or 'eggs', which is done using the IN clause in the WHERE condition.", "Join the Student table with the Has_Allergy table on the StuID to link students with their allergies."], "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS Female_Allergic_Students FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Student.Sex = 'Female' AND Has_Allergy.Allergy IN ('milk', 'eggs');", "gold_sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  'F' AND T1.allergy  =  'Milk' OR T1.allergy  =  'Eggs'", "source_tables": ["has_allergy", "student"]}
{"sample_id": 511, "db_id": "allergy_1", "question": "How many students have a food allergy?", "rationale": ["Identify the relevant tables: We need to look at the 'Has_Allergy' table to find students with allergies and the 'Allergy_Type' table to filter for food allergies.", "Determine the relationship: The 'Has_Allergy' table has a foreign key relationship with the 'Allergy_Type' table through the 'Allergy' column.", "Filter for food allergies: We need to filter the results to only include allergies that are categorized as 'Food' in the 'Allergy_Type' table.", "Count distinct students: We want to count the number of unique students (StuID) who have a food allergy, so we will use COUNT(DISTINCT StuID).", "Construct the SQL query: Combine all the elements into a SQL query that counts the distinct student IDs from the joined tables where the allergy type is 'Food'."], "pred_sql": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS StudentCount\nFROM Has_Allergy\nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy\nWHERE Allergy_Type.AllergyType = 'Food';", "gold_sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  'food'", "source_tables": ["has_allergy", "allergy_type"]}
{"sample_id": 512, "db_id": "allergy_1", "question": "How many students are affected by food related allergies?", "rationale": ["Identify the relevant tables: We need to look at the 'Has_Allergy' table to find students with allergies and the 'Allergy_Type' table to filter for food-related allergies.", "Determine the relationship: The 'Has_Allergy' table has a foreign key relationship with the 'Allergy_Type' table through the 'Allergy' column.", "Filter for food-related allergies: We need to filter the results to only include allergies that fall under the category of 'Food'.", "Count the distinct students: We want to count the number of unique students affected by these food-related allergies, which means using COUNT(DISTINCT StuID).", "Construct the SQL query: Combine all the elements into a complete SQL query that counts the distinct student IDs from the joined tables where the allergy type is 'Food'."], "pred_sql": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS affected_students\nFROM Has_Allergy\nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy\nWHERE Allergy_Type.AllergyType = 'Food';", "gold_sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  'food'", "source_tables": ["has_allergy", "allergy_type"]}
{"sample_id": 513, "db_id": "allergy_1", "question": "Which allergy has most number of students affected?", "rationale": ["Identify the relevant table: The 'Has_Allergy' table contains the information about which students have which allergies.", "Count the number of students affected by each allergy: Use the COUNT function to count the number of unique 'StuID' entries for each 'Allergy'.", "Group the results by allergy: Use the GROUP BY clause to group the results by the 'Allergy' column.", "Order the results by the count of students in descending order: Use the ORDER BY clause to sort the results based on the count of students affected, in descending order.", "Limit the results to the top entry: Use the LIMIT clause to return only the allergy with the highest count of affected students."], "pred_sql": "SELECT Allergy, COUNT(StuID) AS StudentCount\nFROM Has_Allergy\nGROUP BY Allergy\nORDER BY StudentCount DESC\nLIMIT 1;", "gold_sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "source_tables": ["has_allergy"]}
{"sample_id": 514, "db_id": "allergy_1", "question": "Which allergy is the most common?", "rationale": ["Identify the relevant table that contains allergy information, which is the Has_Allergy table.", "To find the most common allergy, we need to count the occurrences of each allergy in the Has_Allergy table.", "Use the COUNT function to count how many times each allergy appears.", "Group the results by the Allergy column to aggregate the counts for each unique allergy.", "Order the results in descending order based on the count of allergies to get the most common one at the top.", "Limit the results to 1 to get only the most common allergy."], "pred_sql": "SELECT Allergy, COUNT(*) as AllergyCount FROM Has_Allergy GROUP BY Allergy ORDER BY AllergyCount DESC LIMIT 1;", "gold_sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "source_tables": ["has_allergy"]}
{"sample_id": 515, "db_id": "allergy_1", "question": "Show all allergies with number of students affected.", "rationale": ["We need to show all allergies and the number of students affected by each allergy.", "To achieve this, we will use the Has_Allergy table, which contains the allergies associated with each student.", "We will select the 'Allergy' column and count the number of unique 'StuID' entries for each allergy.", "The COUNT function will help us determine how many students are affected by each allergy.", "We will group the results by the 'Allergy' column to get the count for each specific allergy."], "pred_sql": "SELECT Allergy, COUNT(StuID) AS NumberOfStudents FROM Has_Allergy GROUP BY Allergy;", "gold_sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy", "source_tables": ["has_allergy"]}
{"sample_id": 516, "db_id": "allergy_1", "question": "How many students have each different allergy?", "rationale": ["Identify the relevant table: The 'Has_Allergy' table contains the information about students and their allergies.", "We need to count the number of students for each allergy, which requires grouping the results by the 'Allergy' column.", "Use the COUNT() function to count the number of unique 'StuID' entries for each allergy.", "The final SQL query will select the 'Allergy' and the count of 'StuID', grouping the results by 'Allergy'."], "pred_sql": "SELECT Allergy, COUNT(StuID) AS StudentCount FROM Has_Allergy GROUP BY Allergy;", "gold_sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy", "source_tables": ["has_allergy"]}
{"sample_id": 517, "db_id": "allergy_1", "question": "Show all allergy type with number of students affected.", "rationale": ["Identify the tables needed: Allergy_Type for allergy types and Has_Allergy for student allergies.", "We need to count the number of students affected by each allergy type, so we will use COUNT() function on StuID from Has_Allergy table.", "To relate the allergy types to the students, we will perform a LEFT JOIN between Allergy_Type and Has_Allergy on the Allergy column.", "We will group the results by AllergyType to get the count of students for each type of allergy."], "pred_sql": "SELECT at.AllergyType, COUNT(ha.StuID) AS NumberOfStudents\nFROM Allergy_Type at\nLEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy\nGROUP BY at.AllergyType;", "gold_sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "source_tables": ["has_allergy", "allergy_type"]}
{"sample_id": 518, "db_id": "allergy_1", "question": "How many students are affected by each allergy type?", "rationale": ["Identify the relevant tables: Allergy_Type, Has_Allergy, and Student.", "We need to count the number of students affected by each allergy type, so we will use the COUNT function.", "Join the Allergy_Type table with the Has_Allergy table on the Allergy column to link allergies to students.", "Then, join the resulting table with the Student table on the StuID to get student information.", "Group the results by AllergyType to get the count of students for each allergy type."], "pred_sql": "SELECT at.AllergyType, COUNT(s.StuID) AS StudentCount\nFROM Allergy_Type at\nLEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy\nLEFT JOIN Student s ON ha.StuID = s.StuID\nGROUP BY at.AllergyType;", "gold_sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "source_tables": ["has_allergy", "allergy_type"]}
{"sample_id": 519, "db_id": "allergy_1", "question": "Find the last name and age of the student who has allergy to both milk and cat.", "rationale": ["Identify the tables needed: We need to retrieve student information (last name and age) and check for allergies, so we will use the Student and Has_Allergy tables.", "Determine the relationships: The Has_Allergy table links students to their allergies via the StuID. We need to find students who have both 'milk' and 'cat' allergies.", "Use JOINs to connect the tables: We will join the Student table with the Has_Allergy table twice (once for each allergy) to filter students who have both allergies.", "Specify the conditions: In the WHERE clause, we will specify that one instance of Has_Allergy must have 'milk' and the other must have 'cat'.", "Select the required columns: Finally, we will select the last name (LName) and age (Age) of the students who meet the criteria."], "pred_sql": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';", "gold_sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}
{"sample_id": 520, "db_id": "allergy_1", "question": "What are the last names and ages of the students who are allergic to milk and cat?", "rationale": ["Identify the required information: last names and ages of students with specific allergies.", "Determine the relevant tables: Student and Has_Allergy.", "Establish the relationship between the tables using the StuID column.", "Filter the results to include only those students who have allergies to both 'milk' and 'cat'.", "Use the IN clause to specify the allergies of interest.", "Group the results by student ID to ensure we are counting distinct allergies per student.", "Use HAVING to ensure that only students with both allergies are included in the final result."], "pred_sql": "SELECT Student.LName, Student.Age \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Has_Allergy.Allergy IN ('milk', 'cat') \nGROUP BY Student.StuID \nHAVING COUNT(DISTINCT Has_Allergy.Allergy) = 2;", "gold_sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}
{"sample_id": 521, "db_id": "allergy_1", "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "rationale": ["Identify the tables needed: Student, Has_Allergy, and Allergy_Type.", "We need to join these tables to get the allergies and their types for a specific student.", "The join condition will be on StuID for Student and Has_Allergy, and on Allergy for Has_Allergy and Allergy_Type.", "We need to filter the results to only include the student with the first name 'Lisa'.", "Finally, we need to order the results by the name of the allergies."], "pred_sql": "SELECT Allergy_Type.Allergy, Allergy_Type.AllergyType \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Student.Fname = 'Lisa' \nORDER BY Allergy_Type.Allergy;", "gold_sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  'Lisa' ORDER BY T1.Allergy", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 522, "db_id": "allergy_1", "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "rationale": ["Identify the relevant tables: Student, Has_Allergy, and Allergy_Type.", "We need to find allergies for a specific student named Lisa, so we will filter the Student table by first name (Fname) and gender (Sex).", "Join the Has_Allergy table to link students with their allergies using the StuID.", "Join the Allergy_Type table to get the type of each allergy using the Allergy name.", "Select the Allergy and AllergyType columns from the joined tables.", "Order the results by the Allergy names."], "pred_sql": "SELECT a.Allergy, at.AllergyType \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type a ON ha.Allergy = a.Allergy \nWHERE s.Fname = 'Lisa' AND s.Sex = 'Female' \nORDER BY a.Allergy;", "gold_sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  'Lisa' ORDER BY T1.Allergy", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 523, "db_id": "allergy_1", "question": "Find the first name and gender of the student who has allergy to milk but not cat.", "rationale": ["Identify the tables needed: We need data from the Student table for first name and gender, and the Has_Allergy table to check for allergies.", "We need to find students who have an allergy to 'milk'. This requires a join between the Student table and the Has_Allergy table.", "We also need to ensure that these students do not have an allergy to 'cat'. This requires another join on the Has_Allergy table.", "The query will select the first name (Fname) and gender (Sex) of the students who meet both conditions: having an allergy to 'milk' and not having an allergy to 'cat'.", "The final SQL query will include the necessary joins and conditions to filter the results accordingly."], "pred_sql": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy != 'cat';", "gold_sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}
{"sample_id": 524, "db_id": "allergy_1", "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?", "rationale": ["Identify the required fields: first name (Fname) and gender (Sex) of students.", "Determine the table that contains student information, which is the Student table.", "Determine the table that contains allergy information, which is the Has_Allergy table.", "We need to find students who have an allergy to 'milk'. This requires a JOIN between the Student and Has_Allergy tables.", "Use a WHERE clause to filter students who have an allergy to 'milk'.", "Additionally, we need to exclude students who have an allergy to 'cats'. This can be done using a subquery that selects students with an allergy to 'cats'.", "Combine the conditions using AND to ensure we only get students who have an allergy to 'milk' and do not have an allergy to 'cats'."], "pred_sql": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy = 'milk' \nAND S.StuID NOT IN (SELECT HA2.StuID \n                     FROM Has_Allergy HA2 \n                     WHERE HA2.Allergy = 'cats');", "gold_sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}
{"sample_id": 525, "db_id": "allergy_1", "question": "Find the average age of the students who have allergies with food and animal types.", "rationale": ["Identify the tables needed: We need to get student information (age) from the Student table, and we need to filter allergies by type from the Allergy_Type table, while linking them through the Has_Allergy table.", "Determine the relationship: The Student table is linked to the Has_Allergy table via StuID, and the Has_Allergy table is linked to the Allergy_Type table via Allergy.", "Select the average age: We need to calculate the average age of students, which requires using the AVG() function on the age column from the Student table.", "Filter the allergies: We need to filter the results to include only those students who have allergies categorized as 'food' or 'animal'.", "Construct the SQL query: Combine all the elements into a single SQL query that joins the necessary tables, filters by allergy type, and calculates the average age."], "pred_sql": "SELECT AVG(CAST(S.age AS INTEGER)) AS average_age\nFROM Student S\nJOIN Has_Allergy HA ON S.StuID = HA.StuID\nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy\nWHERE AT.AllergyType IN ('food', 'animal');", "gold_sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal')", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 526, "db_id": "allergy_1", "question": "How old are the students with allergies to food and animal types on average?", "rationale": ["Identify the tables needed: We need to get student information (from the Student table) and their allergies (from the Has_Allergy table), as well as the type of those allergies (from the Allergy_Type table).", "Determine the relationships: The Has_Allergy table connects students to their allergies, and the Allergy_Type table provides the type of each allergy.", "Filter the allergies: We are specifically interested in allergies that are categorized as 'food' or 'animal'.", "Calculate the average age: We need to calculate the average age of students who have these specific allergies. This involves using the AVG() function on the Age column from the Student table.", "Join the tables: We will perform JOIN operations to combine the relevant data from the three tables based on their relationships."], "pred_sql": "SELECT AVG(CAST(Age AS INTEGER)) AS Average_Age FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Allergy_Type.AllergyType IN ('food', 'animal');", "gold_sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal')", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 527, "db_id": "allergy_1", "question": "List the first and last name of the students who do not have any food type allergy.", "rationale": ["Identify the tables needed: We need to retrieve student names from the Student table and check their allergies from the Has_Allergy and Allergy_Type tables.", "We need to find students who do not have any food type allergies. This requires us to filter out students based on their allergies.", "To do this, we will use a subquery to find all student IDs (StuID) that have a food allergy by joining the Has_Allergy table with the Allergy_Type table on the Allergy column and filtering for AllergyType = 'Food'.", "The main query will select the first name (Fname) and last name (LName) of students from the Student table where their StuID is not in the list of IDs returned by the subquery."], "pred_sql": "SELECT S.Fname, S.LName \nFROM Student S \nWHERE S.StuID NOT IN (\n    SELECT HA.StuID \n    FROM Has_Allergy HA \n    JOIN Allergy_Type AT ON HA.Allergy = AT.Allergy \n    WHERE AT.AllergyType = 'Food'\n);", "gold_sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 528, "db_id": "allergy_1", "question": "What is the full name of each student who is not allergic to any type of food.", "rationale": ["Identify the columns needed: We need the full name of each student, which requires the first name (Fname) and last name (LName).", "Determine the condition: We want students who are not allergic to any type of food. This means we need to find students whose IDs are not in a list of students who have food allergies.", "Create a subquery: The subquery will select the StuID of students who have allergies categorized as 'Food'. We will join the Has_Allergy table with the Allergy_Type table to filter by AllergyType.", "Combine the main query and the subquery: The main query will select the full name of students from the Student table where their StuID is not in the list generated by the subquery."], "pred_sql": "SELECT Fname || ' ' || LName AS FullName \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \n    WHERE AllergyType = 'Food'\n);", "gold_sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 529, "db_id": "allergy_1", "question": "Find the number of male (sex is 'M') students who have some food type allery.", "rationale": ["Identify the tables needed: We need to access the Student, Has_Allergy, and Allergy_Type tables to get the required information.", "We need to count the number of male students, so we will filter the Student table where Sex is 'M'.", "We need to find students with food allergies, so we will join the Has_Allergy table with the Allergy_Type table to filter for allergies that fall under the 'Food' category.", "We will use a JOIN operation to connect the Student table with the Has_Allergy table on StuID, and then join with the Allergy_Type table on Allergy.", "Finally, we will count the distinct StuID from the Student table that meet both criteria (male and food allergy)."], "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS MaleFoodAllergyCount\nFROM Student\nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID\nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy\nWHERE Student.Sex = 'M' AND Allergy_Type.AllergyType = 'Food';", "gold_sql": "SELECT count(*) FROM Student WHERE sex  =  'M' AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 530, "db_id": "allergy_1", "question": "How many male students (sex is 'M') are allergic to any type of food?", "rationale": ["Identify the tables needed: We need data from the Student, Has_Allergy, and Allergy_Type tables.", "We need to count the number of male students, so we will filter the Student table where Sex is 'M'.", "We need to find students who have allergies related to food, so we will join the Has_Allergy table with the Allergy_Type table to filter by AllergyType = 'Food'.", "We will use COUNT(DISTINCT Student.StuID) to ensure we count each male student only once, even if they have multiple food allergies."], "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS Male_Food_Allergy_Count\nFROM Student\nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID\nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy\nWHERE Student.Sex = 'M' AND Allergy_Type.AllergyType = 'Food';", "gold_sql": "SELECT count(*) FROM Student WHERE sex  =  'M' AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 531, "db_id": "allergy_1", "question": "Find the different first names and cities of the students who have allergy to milk or cat.", "rationale": ["Identify the tables needed: We need data from the Student table for first names and city codes, and the Has_Allergy table to filter students based on their allergies.", "Determine the relationship: The Has_Allergy table links students to their allergies through the StuID column, which is a foreign key in Has_Allergy referencing the Student table.", "Select the required columns: We need to select distinct first names (Fname) and city codes (city_code) from the Student table.", "Filter the results: We need to filter the results to include only those students who have allergies to 'milk' or 'cat'.", "Construct the SQL query: Use a JOIN to combine the Student and Has_Allergy tables, and apply the WHERE clause to filter by the specified allergies."], "pred_sql": "SELECT DISTINCT Student.Fname, Student.city_code \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Has_Allergy.Allergy IN ('milk', 'cat');", "gold_sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  'Milk' OR T2.Allergy  =  'Cat'", "source_tables": ["has_allergy", "student"]}
{"sample_id": 532, "db_id": "allergy_1", "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?", "rationale": ["Identify the tables needed: We need data from the Student table for first names and city codes, and the Has_Allergy table to filter students based on their allergies.", "Determine the relationship: The Student table is linked to the Has_Allergy table through the StuID column.", "Select the distinct first names and city codes: We want unique combinations of first names and city codes, so we will use SELECT DISTINCT.", "Filter the allergies: We need to filter the results to include only those students who have allergies to either 'milk' or 'cat'. This is done using a WHERE clause with the IN operator."], "pred_sql": "SELECT DISTINCT Student.Fname, Student.city_code FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Has_Allergy.Allergy IN ('milk', 'cat');", "gold_sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  'Milk' OR T2.Allergy  =  'Cat'", "source_tables": ["has_allergy", "student"]}
{"sample_id": 533, "db_id": "allergy_1", "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.", "rationale": ["We need to count the number of students who are older than 18 and do not have allergies to food or animals.", "First, we will select from the Student table to get the students' information.", "We will join the Has_Allergy table to link students with their allergies using the StuID.", "Next, we will join the Allergy_Type table to get the type of allergy associated with each allergy.", "We will apply a condition to filter students older than 18 years.", "We will also filter out students who have allergies to food or animals. This can be done by checking if the allergy type is NULL (meaning no allergies) or if the allergy type is not in the list of 'food' or 'animal'.", "Finally, we will use COUNT(DISTINCT s.StuID) to count the unique students that meet these criteria."], "pred_sql": "SELECT COUNT(DISTINCT s.StuID) AS num_students\nFROM Student s\nLEFT JOIN Has_Allergy ha ON s.StuID = ha.StuID\nLEFT JOIN Allergy_Type at ON ha.Allergy = at.Allergy\nWHERE s.Age > 18\nAND (at.Allergy IS NULL OR at.AllergyType NOT IN ('food', 'animal'));", "gold_sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' OR T2.allergytype  =  'animal')", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 534, "db_id": "allergy_1", "question": "How many students are over 18 and do not have allergy to food type or animal type?", "rationale": ["Identify the tables needed: We need to access the Student table to get student information, the Has_Allergy table to check for allergies, and the Allergy_Type table to filter by allergy types.", "We need to count the number of students, so we will use the COUNT function in SQL.", "We need to filter students who are over 18 years old, which can be done using a WHERE clause on the Age column of the Student table.", "We also need to ensure that these students do not have allergies to food or animal types. This requires a LEFT JOIN between the Has_Allergy and Allergy_Type tables to check for the absence of these allergies.", "To handle students without any allergies, we will check for NULL values in the AllergyType column after the join, and also ensure that the AllergyType is not in the specified categories ('food', 'animal').", "Finally, we will use DISTINCT on StuID to ensure we count each student only once."], "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS StudentCount\nFROM Student\nLEFT JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID\nLEFT JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy\nWHERE Student.Age > 18 AND (Allergy_Type.AllergyType IS NULL OR Allergy_Type.AllergyType NOT IN ('food', 'animal'));", "gold_sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' OR T2.allergytype  =  'animal')", "source_tables": ["has_allergy", "allergy_type", "student"]}
{"sample_id": 535, "db_id": "allergy_1", "question": "Find the first name and major of the students who are not allegry to soy.", "rationale": ["Identify the columns needed: Fname and Major from the Student table.", "Determine the condition: students who do not have an allergy to soy.", "To find students without the soy allergy, we can use a subquery to select all StuID from the Has_Allergy table where the Allergy is 'soy'.", "Use the NOT IN clause to filter out those students from the main query on the Student table."], "pred_sql": "SELECT Fname, Major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy');", "gold_sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Soy')", "source_tables": ["has_allergy", "student"]}
{"sample_id": 536, "db_id": "allergy_1", "question": "What are the first name and major of the students who are able to consume soy?", "rationale": ["Identify the relevant tables: Student, Has_Allergy, and Allergy_Type.", "Determine the columns needed: first name (Fname) and major (Major) from the Student table.", "Establish the relationships between the tables using JOINs: Has_Allergy links students to their allergies, and Allergy_Type provides the type of allergy.", "Filter the results to exclude students who have an allergy to soy by checking the AllergyType in the Allergy_Type table."], "pred_sql": "SELECT Student.Fname, Student.Major \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType != 'Soy'", "gold_sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Soy')", "source_tables": ["has_allergy", "student"]}
{"sample_id": 537, "db_id": "store_1", "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.", "rationale": ["We need to retrieve the top 5 countries based on the number of invoices.", "The relevant table for invoices is the 'invoices' table, which contains a column for 'billing_country'.", "To count the number of invoices per country, we will use the COUNT() function and group the results by 'billing_country'.", "We will order the results in descending order based on the count of invoices to get the countries with the most invoices at the top.", "Finally, we will limit the results to the top 5 countries using the LIMIT clause."], "pred_sql": "SELECT billing_country, COUNT(*) AS number_of_invoices\nFROM invoices\nGROUP BY billing_country\nORDER BY number_of_invoices DESC\nLIMIT 5;", "gold_sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "source_tables": ["invoices"]}
{"sample_id": 538, "db_id": "store_1", "question": "What are the top 5 countries by number of invoices and how many do they have?", "rationale": ["Identify the relevant table: invoices, as it contains the billing country and invoice information.", "Use the COUNT function to count the number of invoices for each country.", "Group the results by billing_country to aggregate the invoice counts per country.", "Order the results in descending order based on the invoice count to get the top countries.", "Limit the results to the top 5 countries."], "pred_sql": "SELECT billing_country, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_country\nORDER BY invoice_count DESC\nLIMIT 5;", "gold_sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "source_tables": ["invoices"]}
{"sample_id": 539, "db_id": "store_1", "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.", "rationale": ["Identify the relevant table: The 'invoices' table contains the necessary information about invoice totals and billing countries.", "Select the required columns: We need to select 'billing_country' and the sum of 'total' to get the gross invoice size.", "Group the results: Use GROUP BY to aggregate the total invoice size for each country.", "Order the results: Use ORDER BY to sort the countries by gross invoice size in descending order.", "Limit the results: Use LIMIT to restrict the output to the top 8 countries."], "pred_sql": "SELECT billing_country AS country, SUM(total) AS gross_invoice_size \nFROM invoices \nGROUP BY billing_country \nORDER BY gross_invoice_size DESC \nLIMIT 8;", "gold_sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "source_tables": ["invoices"]}
{"sample_id": 540, "db_id": "store_1", "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?", "rationale": ["Identify the relevant table: The 'invoices' table contains the 'billing_country' and 'total' columns needed for the query.", "Group the results by 'billing_country' to aggregate the total invoice sizes for each country.", "Use the SUM function to calculate the total invoice size for each country.", "Order the results in descending order based on the total invoice size to get the top countries.", "Limit the results to the top 8 countries."], "pred_sql": "SELECT billing_country, SUM(total) AS total_invoice_size \nFROM invoices \nGROUP BY billing_country \nORDER BY total_invoice_size DESC \nLIMIT 8;", "gold_sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "source_tables": ["invoices"]}
{"sample_id": 541, "db_id": "store_1", "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.", "rationale": ["We need to find the average invoice size for each country.", "The relevant table for invoice information is the 'invoices' table, which contains 'billing_country' and 'total' columns.", "To calculate the average invoice size, we will use the AVG() function on the 'total' column.", "We will group the results by 'billing_country' to get the average for each country.", "To get the top 10 countries, we will order the results by the average invoice size in descending order and limit the results to 10."], "pred_sql": "SELECT billing_country, AVG(total) AS average_invoice_size \nFROM invoices \nGROUP BY billing_country \nORDER BY average_invoice_size DESC \nLIMIT 10;", "gold_sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "source_tables": ["invoices"]}
{"sample_id": 542, "db_id": "store_1", "question": "What are the names of the countries and average invoice size of the top countries by size?", "rationale": ["Identify the relevant table: The 'invoices' table contains the necessary information about invoice sizes and billing countries.", "Select the required columns: We need to select 'billing_country' and the average of 'total' to get the average invoice size.", "Use the AVG() function: To calculate the average invoice size, we will use the AVG() function on the 'total' column.", "Group the results: We need to group the results by 'billing_country' to get the average for each country.", "Order the results: To get the top countries by average invoice size, we will order the results in descending order."], "pred_sql": "SELECT billing_country, AVG(total) AS average_invoice_size \nFROM invoices \nGROUP BY billing_country \nORDER BY average_invoice_size DESC;", "gold_sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "source_tables": ["invoices"]}
{"sample_id": 543, "db_id": "store_1", "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.", "rationale": ["Identify the relevant tables: customers and invoices.", "We need to join these tables on the customer ID to link customers with their purchases.", "Select the first and last names of the customers from the customers table.", "Order the results by the invoice date in descending order to get the most recent purchases first.", "Limit the results to 5 to get only the top 5 customers who made recent purchases."], "pred_sql": "SELECT c.first_name, c.last_name \nFROM customers c \nJOIN invoices i ON c.id = i.customer_id \nORDER BY i.invoice_date DESC \nLIMIT 5;", "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "source_tables": ["customers", "invoices"]}
{"sample_id": 544, "db_id": "store_1", "question": "What are the first and last names of the 5 customers who purchased something most recently?", "rationale": ["Identify the relevant tables: customers and invoices.", "We need to retrieve the first and last names of customers, so we will select the 'first_name' and 'last_name' columns from the customers table.", "To find out which customers purchased something most recently, we need to join the customers table with the invoices table on the customer ID.", "We will order the results by the 'invoice_date' in descending order to get the most recent purchases first.", "Finally, we will limit the results to the top 5 customers."], "pred_sql": "SELECT c.first_name, c.last_name \nFROM customers c \nJOIN invoices i ON c.id = i.customer_id \nORDER BY i.invoice_date DESC \nLIMIT 5;", "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "source_tables": ["customers", "invoices"]}
{"sample_id": 545, "db_id": "store_1", "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.", "rationale": ["Identify the relevant tables: customers and invoices.", "We need to count the total number of orders for each customer, which can be done by counting the number of invoices associated with each customer.", "Join the customers table with the invoices table on the customer ID to link customers with their orders.", "Group the results by customer ID to aggregate the order counts for each customer.", "Select the first name and last name of the customers along with the count of their orders.", "Order the results by the total number of orders in descending order to get the top customers.", "Limit the results to the top 10 customers."], "pred_sql": "SELECT c.first_name, c.last_name, COUNT(i.id) AS total_orders\nFROM customers c\nJOIN invoices i ON c.id = i.customer_id\nGROUP BY c.id\nORDER BY total_orders DESC\nLIMIT 10;", "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "source_tables": ["customers", "invoices"]}
{"sample_id": 546, "db_id": "store_1", "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?", "rationale": ["Identify the relevant tables: customers and invoices.", "We need to join these tables on the customer ID to link customers with their orders (invoices).", "Select the first and last names of customers from the customers table.", "Count the number of invoices for each customer to determine the total number of orders.", "Group the results by customer ID to aggregate the order counts correctly.", "Order the results by the total number of orders in descending order to get the top customers.", "Limit the results to the top 10 customers."], "pred_sql": "SELECT c.first_name, c.last_name, COUNT(i.id) AS total_orders\nFROM customers c\nJOIN invoices i ON c.id = i.customer_id\nGROUP BY c.id\nORDER BY total_orders DESC\nLIMIT 10;", "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "source_tables": ["customers", "invoices"]}
{"sample_id": 547, "db_id": "store_1", "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.", "rationale": ["Identify the tables needed: customers and invoices.", "We need to join these tables on the customer ID.", "Select the first name and last name from the customers table.", "Calculate the total gross sales by summing the total from the invoices table.", "Group the results by customer ID to aggregate the sales per customer.", "Order the results by total gross sales in descending order to get the top customers.", "Limit the results to the top 10 customers."], "pred_sql": "SELECT c.first_name, c.last_name, SUM(i.total) AS total_gross_sales \nFROM customers c \nJOIN invoices i ON c.id = i.customer_id \nGROUP BY c.id \nORDER BY total_gross_sales DESC \nLIMIT 10;", "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "source_tables": ["customers", "invoices"]}
{"sample_id": 548, "db_id": "store_1", "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?", "rationale": ["Identify the relevant tables: customers and invoices.", "We need to join these tables on the customer_id to link customers with their invoices.", "We need to select the first and last names of customers, which are in the customers table.", "We also need to calculate the total sales for each customer, which can be done by summing the total column from the invoices table.", "Group the results by customer ID to aggregate the sales for each customer.", "Order the results by total sales in descending order to get the highest gross sales at the top.", "Limit the results to the top 10 customers."], "pred_sql": "SELECT c.first_name, c.last_name, SUM(i.total) AS total_sales \nFROM customers c \nJOIN invoices i ON c.id = i.customer_id \nGROUP BY c.id \nORDER BY total_sales DESC \nLIMIT 10;", "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "source_tables": ["customers", "invoices"]}
{"sample_id": 549, "db_id": "store_1", "question": "List the top 5 genres by number of tracks. List genres name and total tracks.", "rationale": ["We need to list the top 5 genres by the number of tracks.", "To do this, we will select the genre name from the genres table and count the number of tracks associated with each genre.", "We will use a LEFT JOIN to connect the genres table with the tracks table on the genre_id.", "We will group the results by the genre id to get the count of tracks for each genre.", "Next, we will order the results in descending order based on the count of tracks to get the top genres.", "Finally, we will limit the results to the top 5 genres."], "pred_sql": "SELECT genres.name, COUNT(tracks.id) AS total_tracks\nFROM genres\nLEFT JOIN tracks ON genres.id = tracks.genre_id\nGROUP BY genres.id\nORDER BY total_tracks DESC\nLIMIT 5;", "gold_sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "source_tables": ["tracks", "genres"]}
{"sample_id": 550, "db_id": "store_1", "question": "How many tracks does each genre have and what are the names of the top 5?", "rationale": ["Identify the relevant tables: genres and tracks.", "We need to count the number of tracks for each genre, so we will use a COUNT function on the track IDs from the tracks table.", "To get the genre names, we will select the genre name from the genres table.", "We will perform a LEFT JOIN between genres and tracks on the genre ID to ensure we get all genres even if they have no tracks.", "Group the results by genre ID to aggregate the count of tracks for each genre.", "Order the results by the count of tracks in descending order to get the top genres with the most tracks.", "Limit the results to the top 5 genres."], "pred_sql": "SELECT g.name AS genre_name, COUNT(t.id) AS track_count\nFROM genres g\nLEFT JOIN tracks t ON g.id = t.genre_id\nGROUP BY g.id\nORDER BY track_count DESC\nLIMIT 5;", "gold_sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "source_tables": ["tracks", "genres"]}
{"sample_id": 551, "db_id": "store_1", "question": "List every album's title.", "rationale": ["Identify the table that contains album information, which is the 'albums' table.", "Determine the specific column that holds the album titles, which is the 'title' column.", "Construct the SQL query to select the 'title' column from the 'albums' table."], "pred_sql": "SELECT title FROM albums;", "gold_sql": "SELECT title FROM albums;", "source_tables": ["albums"]}
{"sample_id": 552, "db_id": "store_1", "question": "What are the titles of all the albums?", "rationale": ["Identify the table that contains album information, which is the 'albums' table.", "Determine the specific column that holds the album titles, which is the 'title' column.", "Construct the SQL query to select the 'title' column from the 'albums' table."], "pred_sql": "SELECT title FROM albums;", "gold_sql": "SELECT title FROM albums;", "source_tables": ["albums"]}
{"sample_id": 553, "db_id": "store_1", "question": "List every album ordered by album title in ascending order.", "rationale": ["Identify the table that contains the album information, which is the 'albums' table.", "Determine the columns needed for the output. Since the request is to list every album, we will select all columns using '*'.", "Specify the ordering requirement, which is to order the results by the album title in ascending order.", "Construct the SQL query using the SELECT statement to retrieve all columns from the 'albums' table and apply the ORDER BY clause to sort by 'title' in ascending order."], "pred_sql": "SELECT * FROM albums ORDER BY title ASC;", "gold_sql": "SELECT title FROM albums ORDER BY title;", "source_tables": ["albums"]}
{"sample_id": 554, "db_id": "store_1", "question": "What are the titles of all the albums alphabetically ascending?", "rationale": ["Identify the table that contains album titles, which is the 'albums' table.", "Determine the column that holds the album titles, which is 'title'.", "Specify that we want to select the 'title' column from the 'albums' table.", "To get the results in alphabetical order, use the ORDER BY clause with 'title' and specify ASC for ascending order."], "pred_sql": "SELECT title FROM albums ORDER BY title ASC;", "gold_sql": "SELECT title FROM albums ORDER BY title;", "source_tables": ["albums"]}
{"sample_id": 555, "db_id": "store_1", "question": "List every album whose title starts with A in alphabetical order.", "rationale": ["Identify the table that contains album information, which is the 'albums' table.", "Determine the condition for the album title to start with 'A', which can be done using the SQL LIKE operator with the pattern 'A%'.", "Specify that the results should be ordered alphabetically by the album title using the ORDER BY clause.", "Combine these elements to form the complete SQL query."], "pred_sql": "SELECT * FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;", "gold_sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "source_tables": ["albums"]}
{"sample_id": 556, "db_id": "store_1", "question": "What are the titles of all albums that start with A in alphabetical order?", "rationale": ["Identify the table that contains album titles, which is the 'albums' table.", "To find albums that start with the letter 'A', use the SQL 'LIKE' operator with the pattern 'A%'.", "Select the 'title' column from the 'albums' table where the title matches the pattern.", "To ensure the results are in alphabetical order, use the 'ORDER BY' clause with 'title ASC'."], "pred_sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;", "gold_sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "source_tables": ["albums"]}
{"sample_id": 557, "db_id": "store_1", "question": "List the customers first and last name of 10 least expensive invoices.", "rationale": ["Identify the relevant tables: customers and invoices.", "We need to retrieve the first and last names of customers, so we will select the 'first_name' and 'last_name' columns from the customers table.", "To find the least expensive invoices, we will join the customers table with the invoices table on the customer_id.", "We will order the results by the 'total' column in the invoices table in ascending order to get the least expensive invoices first.", "Finally, we will limit the results to 10 to get only the 10 least expensive invoices."], "pred_sql": "SELECT c.first_name, c.last_name \nFROM customers c \nJOIN invoices i ON c.id = i.customer_id \nORDER BY i.total ASC \nLIMIT 10;", "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "source_tables": ["customers", "invoices"]}
{"sample_id": 558, "db_id": "store_1", "question": "What are the first and last names of the customers with the 10 cheapest invoices?", "rationale": ["Identify the relevant tables: customers and invoices.", "We need to retrieve the first and last names of customers, so we will select 'first_name' and 'last_name' from the customers table.", "To find the cheapest invoices, we need to join the customers table with the invoices table on the customer ID.", "We will order the results by the 'total' column in the invoices table in ascending order to get the cheapest invoices first.", "Finally, we will limit the results to the top 10 cheapest invoices."], "pred_sql": "SELECT customers.first_name, customers.last_name \nFROM customers \nJOIN invoices ON customers.id = invoices.customer_id \nORDER BY invoices.total ASC \nLIMIT 10;", "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "source_tables": ["customers", "invoices"]}
{"sample_id": 559, "db_id": "store_1", "question": "List total amount of  invoice from Chicago, IL.", "rationale": ["Identify the table that contains the total amount of invoices, which is the 'invoices' table.", "Determine the columns needed: we need to sum the 'total' column for the invoices.", "Filter the results to only include invoices from Chicago, IL, which requires using the 'billing_city' and 'billing_state' columns.", "Construct the SQL query to select the sum of the 'total' column with the specified filters."], "pred_sql": "SELECT SUM(total) AS total_amount FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';", "gold_sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  'Chicago' AND billing_state  =  'IL';", "source_tables": ["invoices"]}
{"sample_id": 560, "db_id": "store_1", "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?", "rationale": ["Identify the relevant table: invoices, as it contains billing information and total amounts.", "Determine the columns needed: total (to sum the amounts) and billing_city, billing_state (to filter the results).", "Construct the SQL query to sum the total amounts from the invoices where the billing city is 'Chicago' and the billing state is 'Illinois'."], "pred_sql": "SELECT SUM(total) AS total_amount FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';", "gold_sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  'Chicago' AND billing_state  =  'IL';", "source_tables": ["invoices"]}
{"sample_id": 561, "db_id": "store_1", "question": "List the number of invoices from Chicago, IL.", "rationale": ["Identify the table that contains invoice information, which is the 'invoices' table.", "Determine the relevant columns needed to filter the invoices, specifically 'billing_city' and 'billing_state'.", "Formulate a query to count the number of invoices where the billing city is 'Chicago' and the billing state is 'IL'.", "Use the COUNT() function to get the total number of invoices that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS number_of_invoices FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';", "gold_sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  'Chicago' AND billing_state  =  'IL';", "source_tables": ["invoices"]}
{"sample_id": 562, "db_id": "store_1", "question": "How many invoices were billed from Chicago, IL?", "rationale": ["Identify the table that contains the billing information for invoices, which is the 'invoices' table.", "Determine the columns needed to filter the invoices by city and state, which are 'billing_city' and 'billing_state'.", "Formulate a SQL query to count the number of invoices that match the specified city (Chicago) and state (IL).", "Use the COUNT() function to get the total number of invoices that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS invoice_count FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';", "gold_sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  'Chicago' AND billing_state  =  'IL';", "source_tables": ["invoices"]}
{"sample_id": 563, "db_id": "store_1", "question": "List the number of invoices from the US, grouped by state.", "rationale": ["Identify the relevant table: The 'invoices' table contains the necessary information about invoices, including the billing state and country.", "Filter the records: We need to filter the invoices to include only those from the US, which is indicated by the 'billing_country' column.", "Group the results: We want to group the results by state, which is represented by the 'billing_state' column.", "Count the invoices: For each state, we will count the number of invoices, which can be done using the COUNT() function.", "Construct the SQL query: Combine all the elements into a complete SQL query that selects the billing state and the count of invoices, applying the necessary WHERE and GROUP BY clauses."], "pred_sql": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state;", "gold_sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state;", "source_tables": ["invoices"]}
{"sample_id": 564, "db_id": "store_1", "question": "How many invoices were billed from each state?", "rationale": ["Identify the relevant table: The 'invoices' table contains the billing information including the state.", "Determine the required information: We need to count the number of invoices for each state.", "Use the COUNT() function to count the invoices and GROUP BY clause to group the results by 'billing_state'.", "Construct the SQL query to select the 'billing_state' and the count of invoices, grouping by 'billing_state'."], "pred_sql": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state;", "gold_sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state;", "source_tables": ["invoices"]}
{"sample_id": 565, "db_id": "store_1", "question": "List the state in the US with the most invoices.", "rationale": ["Identify the relevant table: invoices, which contains billing information including states.", "We need to count the number of invoices per state, so we will use the COUNT() function.", "Group the results by billing_state to get the count of invoices for each state.", "Order the results in descending order based on the count of invoices to find the state with the most invoices.", "Limit the results to 1 to get only the state with the highest count."], "pred_sql": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state\nORDER BY invoice_count DESC\nLIMIT 1;", "gold_sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["invoices"]}
{"sample_id": 566, "db_id": "store_1", "question": "What are the states with the most invoices?", "rationale": ["Identify the relevant table: invoices, as it contains the billing state and invoice information.", "Select the billing_state column to group the results by state.", "Count the number of invoices for each state using COUNT(*) function.", "Group the results by billing_state to aggregate the invoice counts for each state.", "Order the results in descending order based on the invoice count to find the states with the most invoices."], "pred_sql": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC;", "gold_sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  'USA' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["invoices"]}
{"sample_id": 567, "db_id": "store_1", "question": "List the number of invoices and the invoice total from California.", "rationale": ["Identify the relevant tables: invoices and customers.", "We need to count the number of invoices and sum the total amount of those invoices, so we will use COUNT() and SUM() functions.", "To filter invoices from California, we need to join the invoices table with the customers table on the customer_id field.", "Add a WHERE clause to filter customers based on the state being 'California'.", "Select the count of invoices and the sum of the total from the filtered results."], "pred_sql": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS invoice_total FROM invoices INNER JOIN customers ON invoices.customer_id = customers.id WHERE customers.state = 'California';", "gold_sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  'CA';", "source_tables": ["invoices"]}
{"sample_id": 568, "db_id": "store_1", "question": "What is the number of invoices and total money billed in them from CA?", "rationale": ["Identify the relevant table: invoices, which contains information about invoices including the total amount billed and the state of the billing address.", "We need to count the number of invoices and sum the total amount billed specifically for invoices where the billing state is 'CA'.", "Use the COUNT() function to count the total number of invoices and the SUM() function to calculate the total amount billed.", "Construct the SQL query to select the count of invoices and the sum of the total from the invoices table, applying a WHERE clause to filter for billing_state = 'CA'."], "pred_sql": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices WHERE billing_state = 'CA';", "gold_sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  'CA';", "source_tables": ["invoices"]}
{"sample_id": 569, "db_id": "store_1", "question": "List Aerosmith's albums.", "rationale": ["Identify the relevant tables: 'albums' for album titles and 'artists' for artist names.", "Determine the relationship between the tables: 'albums' has a foreign key 'artist_id' that references 'artists.id'.", "We need to select the album titles from the 'albums' table where the artist's name matches 'Aerosmith'.", "Construct the SQL query using a JOIN to combine 'albums' and 'artists' on the artist ID, and filter the results by the artist's name."], "pred_sql": "SELECT albums.title FROM albums JOIN artists ON albums.artist_id = artists.id WHERE artists.name = 'Aerosmith';", "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = 'Aerosmith';", "source_tables": ["albums", "artists"]}
{"sample_id": 570, "db_id": "store_1", "question": "What are the titles of all the Aerosmith albums?", "rationale": ["Identify the artist 'Aerosmith' in the artists table to get their unique identifier (id).", "Use the artist's id to filter the albums in the albums table to get the titles of all albums associated with that artist."], "pred_sql": "SELECT title FROM albums WHERE artist_id = (SELECT id FROM artists WHERE name = 'Aerosmith');", "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = 'Aerosmith';", "source_tables": ["albums", "artists"]}
{"sample_id": 571, "db_id": "store_1", "question": "How many albums does Billy Cobham has?", "rationale": ["Identify the artist 'Billy Cobham' in the 'artists' table to get his unique identifier (id).", "Use the artist's id to filter the 'albums' table to count how many albums are associated with that artist.", "Construct the SQL query to count the number of albums for the specified artist."], "pred_sql": "SELECT COUNT(*) AS album_count FROM albums WHERE artist_id = (SELECT id FROM artists WHERE name = 'Billy Cobham');", "gold_sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham';", "source_tables": ["albums", "artists"]}
{"sample_id": 572, "db_id": "store_1", "question": "How many albums has Billy Cobam released?", "rationale": ["Identify the artist 'Billy Cobham' in the artists table to get their unique identifier (id).", "Use the artist's id to filter the albums in the albums table.", "Count the number of albums associated with that artist id using COUNT(*) function."], "pred_sql": "SELECT COUNT(*) AS album_count FROM albums WHERE artist_id = (SELECT id FROM artists WHERE name = 'Billy Cobham');", "gold_sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham';", "source_tables": ["albums", "artists"]}
{"sample_id": 573, "db_id": "store_1", "question": "Eduardo Martins is a customer at which company?", "rationale": ["Identify the relevant table: The query is about customers, so we will use the 'customers' table.", "Determine the columns needed: We need the 'company' column to find out which company Eduardo Martins is associated with.", "Filter the records: We need to filter the records to find the customer with the first name 'Eduardo' and last name 'Martins'.", "Construct the SQL query: Using the SELECT statement to retrieve the 'company' from the 'customers' table where the first and last names match."], "pred_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';", "gold_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';", "source_tables": ["customers"]}
{"sample_id": 574, "db_id": "store_1", "question": "What is the company where Eduardo Martins is a customer?", "rationale": ["Identify the relevant table: The query is asking for customer information, so we will use the 'customers' table.", "Determine the columns needed: We need the 'company' column from the 'customers' table.", "Filter the results: We need to find the customer with the first name 'Eduardo' and last name 'Martins'.", "Construct the SQL query: Using a SELECT statement to retrieve the 'company' where the first name and last name match the specified values."], "pred_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';", "gold_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';", "source_tables": ["customers"]}
{"sample_id": 575, "db_id": "store_1", "question": "What is Astrid Gruber's email and phone number?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "Determine the columns needed for the query, which are 'email' and 'phone'.", "Filter the results to find the specific employee by using the 'first_name' and 'last_name' columns.", "Construct the SQL SELECT statement to retrieve the 'email' and 'phone' for the employee named Astrid Gruber."], "pred_sql": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';", "gold_sql": "SELECT email ,  phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';", "source_tables": ["customers"]}
{"sample_id": 576, "db_id": "store_1", "question": "What is the email and phone number of Astrid Gruber the customer?", "rationale": ["Identify the table that contains customer information, which is the 'customers' table.", "Determine the columns needed for the output, which are 'email' and 'phone'.", "Specify the conditions to filter the results to the customer named 'Astrid Gruber' by using the 'first_name' and 'last_name' columns."], "pred_sql": "SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';", "gold_sql": "SELECT email ,  phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';", "source_tables": ["customers"]}
{"sample_id": 577, "db_id": "store_1", "question": "How many customers live in Prague city?", "rationale": ["Identify the table that contains customer information, which is the 'customers' table.", "Determine the relevant column for the city, which is 'city'.", "Use the COUNT() function to count the number of customers that match the specified city.", "Construct the SQL query to select the count of customers from the 'customers' table where the city is 'Prague'."], "pred_sql": "SELECT COUNT(*) FROM customers WHERE city = 'Prague';", "gold_sql": "SELECT count(*) FROM customers WHERE city = 'Prague';", "source_tables": ["customers"]}
{"sample_id": 578, "db_id": "store_1", "question": "How many customers live in the city of Prague?", "rationale": ["Identify the table that contains customer information, which is the 'customers' table.", "Determine the relevant column for the city, which is 'city'.", "Formulate a query to count the number of customers where the city is 'Prague'.", "Use the COUNT() function to get the total number of customers that meet the criteria."], "pred_sql": "SELECT COUNT(*) FROM customers WHERE city = 'Prague';", "gold_sql": "SELECT count(*) FROM customers WHERE city = 'Prague';", "source_tables": ["customers"]}
{"sample_id": 579, "db_id": "store_1", "question": "How many customers in state of CA?", "rationale": ["Identify the table that contains customer information, which is the 'customers' table.", "Determine the relevant column for the state, which is 'state'.", "Use the COUNT() function to count the number of customers in the specified state.", "Construct the SQL query to select the count of customers where the state is 'CA'."], "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'CA';", "gold_sql": "SELECT count(*) FROM customers WHERE state = 'CA';", "source_tables": ["customers"]}
{"sample_id": 580, "db_id": "store_1", "question": "How many customers are from California?", "rationale": ["Identify the table that contains customer information, which is the 'customers' table.", "Determine the relevant column that indicates the state of the customer, which is 'state'.", "Formulate a query to count the number of customers where the state is 'California'.", "Use the COUNT() function to get the total number of customers from California."], "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';", "gold_sql": "SELECT count(*) FROM customers WHERE state = 'CA';", "source_tables": ["customers"]}
{"sample_id": 581, "db_id": "store_1", "question": "What country does Roberto Almeida live?", "rationale": ["Identify the relevant table: The 'customers' table contains information about customers, including their names and countries.", "Determine the columns needed: We need the 'country' column to find out where Roberto Almeida lives.", "Formulate the WHERE clause: We need to filter the results to find the specific customer named Roberto Almeida, which requires both the first name and last name.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to retrieve the desired information."], "pred_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';", "gold_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';", "source_tables": ["customers"]}
{"sample_id": 582, "db_id": "store_1", "question": "In which country does Roberto Almeida?", "rationale": ["Identify the relevant table: The 'customers' table contains information about customers, including their names and countries.", "Determine the columns needed: We need the 'country' column to answer the question about Roberto Almeida's country.", "Formulate the WHERE clause: We need to filter the results to find the specific customer named Roberto Almeida, which requires both the first name and last name.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to retrieve the desired information."], "pred_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';", "gold_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';", "source_tables": ["customers"]}
{"sample_id": 583, "db_id": "store_1", "question": "List the name of albums that are released by aritist whose name has 'Led'", "rationale": ["Identify the tables involved: 'albums' for album titles and 'artists' for artist names.", "Determine the relationship between the tables: 'albums' has a foreign key 'artist_id' that references 'artists.id'.", "Use a JOIN clause to combine 'albums' and 'artists' based on the artist's ID.", "Filter the results to include only those artists whose name contains 'Led' using the LIKE operator with wildcards."], "pred_sql": "SELECT albums.title FROM albums JOIN artists ON albums.artist_id = artists.id WHERE artists.name LIKE '%Led%';", "gold_sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "source_tables": ["albums", "artists"]}
{"sample_id": 584, "db_id": "store_1", "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?", "rationale": ["Identify the tables needed: We need to retrieve album titles from the 'albums' table and artist names from the 'artists' table.", "Determine the relationship: The 'albums' table has a foreign key 'artist_id' that references the 'id' in the 'artists' table, allowing us to join these two tables.", "Formulate the SQL query: We will use a SELECT statement to get the 'title' from 'albums' and join it with 'artists' on the 'artist_id'.", "Add the condition: We need to filter the results where the artist's name contains the phrase 'Led', which can be done using the LIKE operator with wildcards."], "pred_sql": "SELECT albums.title FROM albums JOIN artists ON albums.artist_id = artists.id WHERE artists.name LIKE '%Led%';", "gold_sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "source_tables": ["albums", "artists"]}
{"sample_id": 585, "db_id": "store_1", "question": "How many customers does Steve Johnson support?", "rationale": ["Identify the employee 'Steve Johnson' by querying the 'employees' table to get his unique identifier (id).", "Use the retrieved employee id to count how many customers have this id as their support_rep_id in the 'customers' table.", "Construct the SQL query to count the number of customers supported by Steve Johnson."], "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE support_rep_id = (SELECT id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson');", "gold_sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = 'Steve' AND T1.last_name = 'Johnson';", "source_tables": ["employees", "customers"]}
{"sample_id": 586, "db_id": "store_1", "question": "What is the count of customers that Steve Johnson supports?", "rationale": ["Identify the relevant table: The 'customers' table contains information about customers and their support representatives.", "Determine the relationship: Each customer has a 'support_rep_id' that links to an employee in the 'employees' table.", "Find the employee ID: We need to find the ID of the employee named 'Steve Johnson' from the 'employees' table.", "Count the customers: Use the COUNT function to count how many customers have the 'support_rep_id' that matches the ID of 'Steve Johnson'."], "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE support_rep_id = (SELECT id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson');", "gold_sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = 'Steve' AND T1.last_name = 'Johnson';", "source_tables": ["employees", "customers"]}
{"sample_id": 587, "db_id": "store_1", "question": "What is the title, phone and hire date of Nancy Edwards?", "rationale": ["Identify the relevant table: The 'employees' table contains the information about employees including their names, phone numbers, and hire dates.", "Determine the columns needed: The query requires the title, phone, and hire date of Nancy Edwards. The relevant columns in the 'employees' table are 'first_name', 'last_name', 'hire_date', and 'phone'.", "Construct the SELECT statement: We will select the 'first_name', 'last_name', 'hire_date', and 'phone' columns from the 'employees' table.", "Add the WHERE clause: To filter the results for Nancy Edwards, we will add a WHERE clause that specifies 'first_name' = 'Nancy' and 'last_name' = 'Edwards'.", "Combine all parts to form the final SQL query."], "pred_sql": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone FROM employees WHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';", "gold_sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "source_tables": ["employees"]}
{"sample_id": 588, "db_id": "store_1", "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "Determine the columns needed: 'title', 'phone', and 'hire_date'.", "Formulate a WHERE clause to filter the results for the employee named 'Nancy Edwards'.", "Combine the SELECT statement with the identified columns and the WHERE clause to create the full SQL query."], "pred_sql": "SELECT title, phone, hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "gold_sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "source_tables": ["employees"]}
{"sample_id": 589, "db_id": "store_1", "question": "find the full name of employees who report to Nancy Edwards?", "rationale": ["Identify the employee 'Nancy Edwards' to find her unique identifier (id).", "Use a subquery to select the id of 'Nancy Edwards' from the employees table.", "Select the first name and last name of employees who report to the id obtained from the subquery.", "Concatenate the first name and last name to get the full name of the employees."], "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM employees WHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');", "gold_sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards';", "source_tables": ["employees"]}
{"sample_id": 590, "db_id": "store_1", "question": "What is the first and last name of the employee who reports to Nancy Edwards?", "rationale": ["Identify the employee's first and last name who reports to Nancy Edwards.", "To find the employee who reports to Nancy Edwards, we first need to find her employee ID using a subquery.", "The subquery selects the ID from the employees table where the first name is 'Nancy' and the last name is 'Edwards'.", "Then, we use this ID in the main query to select the first and last name of the employees who report to that ID."], "pred_sql": "SELECT first_name, last_name FROM employees WHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards')", "gold_sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards';", "source_tables": ["employees"]}
{"sample_id": 591, "db_id": "store_1", "question": "What is the address of employee Nancy Edwards?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "Determine the columns needed for the query. We need the 'address' of the employee.", "Filter the results to find the specific employee by their first name 'Nancy' and last name 'Edwards'.", "Construct the SQL SELECT statement to retrieve the 'address' from the 'employees' table where the first and last names match."], "pred_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "gold_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "source_tables": ["employees"]}
{"sample_id": 592, "db_id": "store_1", "question": "What is Nancy Edwards's address?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "Determine the columns needed to answer the question, which are 'address', 'city', 'state', 'country', and 'postal_code'.", "Filter the results to find the specific employee by using the first name 'Nancy' and last name 'Edwards'.", "Construct the SQL SELECT statement to retrieve the required columns from the 'employees' table with the specified conditions."], "pred_sql": "SELECT address, city, state, country, postal_code FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "gold_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "source_tables": ["employees"]}
{"sample_id": 593, "db_id": "store_1", "question": "Find the full name of employee who supported the most number of customers.", "rationale": ["Identify the relevant tables: We need to find information from the 'employees' and 'customers' tables.", "Determine the relationship: The 'customers' table has a foreign key 'support_rep_id' that references the 'id' in the 'employees' table, indicating which employee supports which customer.", "We need to count the number of customers each employee supports. This can be done by joining the 'employees' table with the 'customers' table on the 'support_rep_id'.", "Group the results by employee ID to aggregate the customer counts for each employee.", "Order the results by the count of customers in descending order to find the employee with the most customers.", "Limit the results to 1 to get only the top employee."], "pred_sql": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employees", "customers"]}
{"sample_id": 594, "db_id": "store_1", "question": "What is the full name of the employee who has the most customers?", "rationale": ["Identify the relevant tables: employees and customers.", "We need to find the employee who has the most customers, so we will join the employees table with the customers table on the support_rep_id.", "We will group the results by employee ID to count the number of customers each employee has.", "We will order the results by the count of customers in descending order to get the employee with the most customers at the top.", "Finally, we will limit the results to 1 to get only the top employee.", "Select the full name of the employee by concatenating first_name and last_name."], "pred_sql": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employees", "customers"]}
{"sample_id": 595, "db_id": "store_1", "question": "How many employees are living in Canada?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "Determine the relevant column that indicates the country of residence, which is 'country'.", "Formulate a query to count the number of employees where the 'country' column is equal to 'Canada'.", "Use the COUNT() function to get the total number of employees living in Canada."], "pred_sql": "SELECT COUNT(*) AS employee_count FROM employees WHERE country = 'Canada';", "gold_sql": "SELECT count(*) FROM employees WHERE country = 'Canada';", "source_tables": ["employees"]}
{"sample_id": 596, "db_id": "store_1", "question": "How many employees live in Canada?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "Determine the relevant column that indicates the country of residence, which is 'country'.", "Formulate a query to count the number of employees where the 'country' is 'Canada'.", "Use the COUNT() function to get the total number of employees that meet this condition."], "pred_sql": "SELECT COUNT(*) FROM employees WHERE country = 'Canada';", "gold_sql": "SELECT count(*) FROM employees WHERE country = 'Canada';", "source_tables": ["employees"]}
{"sample_id": 597, "db_id": "store_1", "question": "What is employee Nancy Edwards's phone number?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "Determine the columns needed for the query: we need the 'phone' column to get the phone number.", "Filter the results based on the employee's first name and last name, which are 'Nancy' and 'Edwards' respectively.", "Construct the SQL query using a SELECT statement to retrieve the phone number from the 'employees' table where the first and last names match."], "pred_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "gold_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "source_tables": ["employees"]}
{"sample_id": 598, "db_id": "store_1", "question": "What is the the phone number of Nancy Edwards?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "Determine the columns needed to answer the query, specifically the 'phone' column.", "Filter the results to find the specific employee by their first name 'Nancy' and last name 'Edwards'.", "Construct the SQL query using a SELECT statement to retrieve the phone number from the 'employees' table with the specified conditions."], "pred_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "gold_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';", "source_tables": ["employees"]}
{"sample_id": 599, "db_id": "store_1", "question": "Who is the youngest employee in the company? List employee's first and last name.", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "To find the youngest employee, we need to sort the employees by their birth date in descending order (the most recent birth date is the youngest).", "We only need the first name and last name of the employee, so we will select those two columns.", "To get only the youngest employee, we will limit the results to 1 using 'LIMIT 1'."], "pred_sql": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "gold_sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "source_tables": ["employees"]}
{"sample_id": 600, "db_id": "store_1", "question": "What si the youngest employee's first and last name?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "To find the youngest employee, we need to sort the employees by their birth date in descending order, as the most recent birth date corresponds to the youngest employee.", "We will select the 'first_name' and 'last_name' columns from the 'employees' table.", "To limit the results to only the youngest employee, we will use 'LIMIT 1' in the query."], "pred_sql": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "gold_sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "source_tables": ["employees"]}
{"sample_id": 601, "db_id": "store_1", "question": "List top 10 employee work longest in the company. List employee's first and last name.", "rationale": ["Identify the relevant table: The 'employees' table contains the information about employees.", "Determine the required columns: We need the 'first_name' and 'last_name' of the employees.", "Sort the employees by their hire date: To find the employees who have worked the longest, we will order the results by 'hire_date' in ascending order.", "Limit the results to the top 10: We will use 'LIMIT 10' to get only the first 10 employees who have been hired."], "pred_sql": "SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "gold_sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "source_tables": ["employees"]}
{"sample_id": 602, "db_id": "store_1", "question": "What are the first and last names of the top 10 longest-serving employees?", "rationale": ["Identify the relevant table: The 'employees' table contains the information about employees including their first and last names and hire dates.", "Determine the criteria for 'longest-serving': This can be determined by the 'hire_date' column, where earlier dates indicate longer service.", "Sort the employees by 'hire_date' in ascending order to get the longest-serving employees first.", "Limit the results to the top 10 employees to meet the request for the top 10 longest-serving employees."], "pred_sql": "SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "gold_sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "source_tables": ["employees"]}
{"sample_id": 603, "db_id": "store_1", "question": "Find the number of employees whose title is IT Staff from each city?", "rationale": ["Identify the table that contains employee information, which is the 'employees' table.", "Determine the relevant columns needed for the query: 'city' for grouping and 'id' for counting employees.", "Use the COUNT() function to count the number of employees with the title 'IT Staff'.", "Filter the results to include only those employees whose title is 'IT Staff' using a WHERE clause.", "Group the results by 'city' to get the count of IT Staff employees in each city."], "pred_sql": "SELECT city, COUNT(*) AS number_of_employees FROM employees WHERE title = 'IT Staff' GROUP BY city;", "gold_sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "source_tables": ["employees"]}
{"sample_id": 604, "db_id": "store_1", "question": "How many employees who are IT staff are from each city?", "rationale": ["Identify the relevant table: The 'employees' table contains information about employees including their job titles and cities.", "Filter the employees: We need to filter employees who are in the IT staff category. This can be done using a WHERE clause that checks if the title contains 'IT'.", "Group the results: To get the count of employees from each city, we will use the GROUP BY clause on the 'city' column.", "Count the employees: We will use the COUNT() function to count the number of employees in each city that match the criteria."], "pred_sql": "SELECT city, COUNT(*) AS employee_count FROM employees WHERE title LIKE '%IT%' GROUP BY city;", "gold_sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "source_tables": ["employees"]}
{"sample_id": 605, "db_id": "store_1", "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.", "rationale": ["Identify the relevant table: The 'employees' table contains information about employees and their reporting structure.", "To find out which employee manages the most number of people, we need to count how many employees report to each manager.", "We will use a LEFT JOIN on the 'employees' table to join it with itself, where the 'reports_to' field of the second instance matches the 'id' of the first instance.", "We will group the results by the manager's id to count the number of reports for each manager.", "Finally, we will order the results in descending order based on the count of reports and limit the output to the top result."], "pred_sql": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS number_of_reports\nFROM employees e\nLEFT JOIN employees e2 ON e.id = e2.reports_to\nGROUP BY e.id\nORDER BY number_of_reports DESC\nLIMIT 1;", "gold_sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "source_tables": ["employees"]}
{"sample_id": 606, "db_id": "store_1", "question": "What are the first and last names of all the employees and how many people report to them?", "rationale": ["We need to select the first and last names of all employees, which are in the 'employees' table under the columns 'first_name' and 'last_name'.", "To find out how many people report to each employee, we will perform a self-join on the 'employees' table. This means we will join the 'employees' table with itself, where the 'reports_to' column of the second instance of the table matches the 'id' column of the first instance.", "We will use a LEFT JOIN to ensure that employees with no reports are still included in the results.", "We will count the number of employees (e2) that report to each employee (e) using COUNT(e2.id).", "Finally, we will group the results by the employee's id to get the count of reports for each employee."], "pred_sql": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS reports_count\nFROM employees e\nLEFT JOIN employees e2 ON e.id = e2.reports_to\nGROUP BY e.id;", "gold_sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "source_tables": ["employees"]}
{"sample_id": 607, "db_id": "store_1", "question": "How many orders does Lucas Mancini has?", "rationale": ["Identify the relevant table for orders, which is 'invoices'.", "Determine how to count the number of orders, which can be done using the COUNT() function.", "Find the customer ID for 'Lucas Mancini' by querying the 'customers' table with the appropriate first and last name.", "Use a subquery to get the customer ID and filter the invoices based on that ID to count the orders."], "pred_sql": "SELECT COUNT(*) AS order_count FROM invoices WHERE customer_id = (SELECT id FROM customers WHERE first_name = 'Lucas' AND last_name = 'Mancini');", "gold_sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini';", "source_tables": ["customers", "invoices"]}
{"sample_id": 608, "db_id": "store_1", "question": "How many orders does Luca Mancini have in his invoices?", "rationale": ["Identify the customer by name: 'Luca Mancini'.", "Find the customer ID associated with 'Luca Mancini' in the customers table.", "Count the number of invoices associated with that customer ID in the invoices table."], "pred_sql": "SELECT COUNT(*) AS order_count FROM invoices WHERE customer_id IN (SELECT id FROM customers WHERE first_name = 'Luca' AND last_name = 'Mancini');", "gold_sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini';", "source_tables": ["customers", "invoices"]}
{"sample_id": 609, "db_id": "store_1", "question": "What is the total amount of money spent by Lucas Mancini?", "rationale": ["Identify the customer by name: Lucas Mancini.", "Join the invoices table with the customers table to link invoices to the specific customer.", "Use the SUM function to calculate the total amount spent by the identified customer.", "Filter the results to only include invoices associated with Lucas Mancini."], "pred_sql": "SELECT SUM(i.total) AS total_spent\nFROM invoices i\nJOIN customers c ON i.customer_id = c.id\nWHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini';", "gold_sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini';", "source_tables": ["customers", "invoices"]}
{"sample_id": 610, "db_id": "store_1", "question": "How much money did Lucas Mancini spend?", "rationale": ["Identify the customer named Lucas Mancini in the customers table.", "Join the invoices table with the customers table using the customer_id foreign key.", "Filter the results to only include invoices associated with Lucas Mancini.", "Sum the total amounts from the invoices to find out how much money Lucas Mancini spent."], "pred_sql": "SELECT SUM(i.total) AS total_spent\nFROM invoices i\nJOIN customers c ON i.customer_id = c.id\nWHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini';", "gold_sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini';", "source_tables": ["customers", "invoices"]}
{"sample_id": 611, "db_id": "store_1", "question": "List all media types.", "rationale": ["Identify the table that contains media types, which is 'media_types'.", "Determine the columns needed; since the request is to list all media types, we will select all columns using '*'.", "Construct the SQL query using the SELECT statement to retrieve all records from the 'media_types' table."], "pred_sql": "SELECT * FROM media_types;", "gold_sql": "SELECT name FROM media_types;", "source_tables": ["media_types"]}
{"sample_id": 612, "db_id": "store_1", "question": "What are the names of all the media types?", "rationale": ["Identify the table that contains media types, which is 'media_types'.", "Determine the column that holds the names of the media types, which is 'name'.", "Construct a SQL query to select the 'name' column from the 'media_types' table."], "pred_sql": "SELECT name FROM media_types;", "gold_sql": "SELECT name FROM media_types;", "source_tables": ["media_types"]}
{"sample_id": 613, "db_id": "store_1", "question": "List all different genre types.", "rationale": ["Identify the table that contains genre information, which is the 'genres' table.", "Determine the column that holds the genre names, which is 'name'.", "To list all different genre types, use the SELECT statement with DISTINCT to avoid duplicates.", "Construct the SQL query: SELECT DISTINCT name FROM genres."], "pred_sql": "SELECT DISTINCT name FROM genres;", "gold_sql": "SELECT DISTINCT name FROM genres;", "source_tables": ["genres"]}
{"sample_id": 614, "db_id": "store_1", "question": "What are the different names of the genres?", "rationale": ["Identify the table that contains genre information, which is the 'genres' table.", "Determine the column that holds the names of the genres, which is the 'name' column.", "Since we want different names, we will use the DISTINCT keyword to ensure that duplicate names are not included in the results.", "Construct the SQL query to select the distinct names from the genres table."], "pred_sql": "SELECT DISTINCT name FROM genres;", "gold_sql": "SELECT DISTINCT name FROM genres;", "source_tables": ["genres"]}
{"sample_id": 615, "db_id": "store_1", "question": "List the name of all playlist.", "rationale": ["Identify the table that contains the information needed: playlists.", "Determine the specific column that holds the names of the playlists: name.", "Construct the SQL query to select the name column from the playlists table."], "pred_sql": "SELECT name FROM playlists;", "gold_sql": "SELECT name FROM playlists;", "source_tables": ["playlists"]}
{"sample_id": 616, "db_id": "store_1", "question": "What are the names of all the playlists?", "rationale": ["Identify the table that contains the information about playlists, which is the 'playlists' table.", "Determine the specific column that holds the names of the playlists, which is the 'name' column.", "Construct a SQL query to select the 'name' column from the 'playlists' table."], "pred_sql": "SELECT name FROM playlists;", "gold_sql": "SELECT name FROM playlists;", "source_tables": ["playlists"]}
{"sample_id": 617, "db_id": "store_1", "question": "Who is the composer of track Fast As a Shark?", "rationale": ["Identify the relevant table: The track information is stored in the 'tracks' table.", "Determine the required column: We need the 'composer' of the track.", "Specify the condition: We need to filter the track by its name, which is 'Fast As a Shark'.", "Construct the SQL query: Use a SELECT statement to retrieve the 'composer' from the 'tracks' table where the 'name' matches 'Fast As a Shark'."], "pred_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark';", "gold_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark';", "source_tables": ["tracks"]}
{"sample_id": 618, "db_id": "store_1", "question": "What is the composer who created the track \"Fast As a Shark\"?", "rationale": ["Identify the table that contains the track information, which is the 'tracks' table.", "Determine the column that holds the track name, which is 'name'.", "Identify the column that contains the composer's name, which is 'composer'.", "Construct a SQL query to select the 'composer' from the 'tracks' table where the 'name' matches 'Fast As a Shark'."], "pred_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark';", "gold_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark';", "source_tables": ["tracks"]}
{"sample_id": 619, "db_id": "store_1", "question": "How long does track Fast As a Shark has?", "rationale": ["Identify the table that contains track information, which is the 'tracks' table.", "Determine the relevant column that stores the duration of the track, which is 'milliseconds'.", "Formulate a query to select the 'milliseconds' column from the 'tracks' table.", "Add a condition to filter the results to only include the track with the name 'Fast As a Shark'."], "pred_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark';", "gold_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark';", "source_tables": ["tracks"]}
{"sample_id": 620, "db_id": "store_1", "question": "How many milliseconds long is Fast As a Shark?", "rationale": ["Identify the table that contains track information, which is the 'tracks' table.", "Determine the column that stores the duration of the track in milliseconds, which is 'milliseconds'.", "Formulate a query to select the 'milliseconds' column from the 'tracks' table where the 'name' of the track is 'Fast As a Shark'."], "pred_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark';", "gold_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark';", "source_tables": ["tracks"]}
{"sample_id": 621, "db_id": "store_1", "question": "What is the name of tracks whose genre is Rock?", "rationale": ["Identify the relevant tables: 'tracks' and 'genres'.", "Determine the relationship between the tables: 'tracks' has a foreign key 'genre_id' that references 'genres.id'.", "We need to select the 'name' column from the 'tracks' table.", "To filter the tracks by genre, we need to join the 'tracks' table with the 'genres' table on the genre ID.", "Add a WHERE clause to filter the results to only include tracks where the genre name is 'Rock'."], "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id WHERE genres.name = 'Rock';", "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock';", "source_tables": ["tracks", "genres"]}
{"sample_id": 622, "db_id": "store_1", "question": "What is the name of all tracks in the Rock genre?", "rationale": ["Identify the relevant tables: 'tracks' for track names and 'genres' for genre names.", "Determine the relationship between the tables: 'tracks' has a foreign key 'genre_id' that references 'genres.id'.", "Formulate the SQL query to select track names from 'tracks' where the genre matches 'Rock'.", "Use a JOIN clause to combine 'tracks' and 'genres' based on the genre ID.", "Add a WHERE clause to filter results to only include tracks in the 'Rock' genre."], "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id WHERE genres.name = 'Rock';", "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock';", "source_tables": ["tracks", "genres"]}
{"sample_id": 623, "db_id": "store_1", "question": "What is title of album which track Balls to the Wall belongs to?", "rationale": ["Identify the relevant tables: We need to find the album title, which is in the 'albums' table, and we need to find the track, which is in the 'tracks' table.", "Determine the relationship: The 'tracks' table has a foreign key 'album_id' that references the 'id' in the 'albums' table. This means we can join these two tables on this key.", "Formulate the SQL query: We will select the 'title' from the 'albums' table where the 'name' in the 'tracks' table matches 'Balls to the Wall'.", "Construct the JOIN clause: Use an INNER JOIN to connect 'albums' and 'tracks' on the condition that 'albums.id' equals 'tracks.album_id'.", "Add the WHERE clause: Filter the results to only include tracks where the name is 'Balls to the Wall'."], "pred_sql": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Balls to the Wall';", "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = 'Balls to the Wall';", "source_tables": ["albums", "tracks"]}
{"sample_id": 624, "db_id": "store_1", "question": "What is the name of the album that has the track Ball to the Wall?", "rationale": ["Identify the relevant tables: We need to retrieve album titles, so we will use the 'albums' table and the 'tracks' table.", "Determine the relationship: The 'tracks' table has a foreign key 'album_id' that links to the 'id' in the 'albums' table.", "Formulate the query: We will join the 'albums' table with the 'tracks' table on the album ID and filter the results where the track name is 'Ball to the Wall'.", "Select the album title: We will select the 'title' column from the 'albums' table."], "pred_sql": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Ball to the Wall';", "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = 'Balls to the Wall';", "source_tables": ["albums", "tracks"]}
{"sample_id": 625, "db_id": "store_1", "question": "List name of all tracks in Balls to the Wall.", "rationale": ["Identify the relevant tables: tracks and albums.", "Determine the relationship between tracks and albums: tracks have an album_id that references albums.id.", "We need to filter tracks based on the album title 'Balls to the Wall'.", "Construct the SQL query to select the track names from the tracks table, joining with the albums table to apply the title filter."], "pred_sql": "SELECT tracks.name FROM tracks JOIN albums ON tracks.album_id = albums.id WHERE albums.title = 'Balls to the Wall';", "gold_sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = 'Balls to the Wall';", "source_tables": ["albums", "tracks"]}
{"sample_id": 626, "db_id": "store_1", "question": "What is the name of all tracks in the album named Balls to the Wall?", "rationale": ["Identify the relevant tables: 'tracks' and 'albums' are needed to get track names and album titles.", "Determine the relationship: 'tracks' has a foreign key 'album_id' that references 'albums.id'.", "Formulate the SELECT statement: We want to select the 'name' column from the 'tracks' table.", "Add a JOIN clause: We need to join 'tracks' with 'albums' on the condition that 'tracks.album_id' matches 'albums.id'.", "Add a WHERE clause: We need to filter the results to only include tracks from the album titled 'Balls to the Wall'."], "pred_sql": "SELECT tracks.name FROM tracks JOIN albums ON tracks.album_id = albums.id WHERE albums.title = 'Balls to the Wall';", "gold_sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = 'Balls to the Wall';", "source_tables": ["albums", "tracks"]}
{"sample_id": 627, "db_id": "store_1", "question": "List title of albums have the number of tracks greater than 10.", "rationale": ["We need to select the titles of albums that have more than 10 tracks.", "To do this, we will join the 'albums' table with the 'tracks' table on the album ID.", "We will group the results by the album ID to count the number of tracks for each album.", "Finally, we will use the HAVING clause to filter the groups where the count of tracks is greater than 10."], "pred_sql": "SELECT albums.title\nFROM albums\nJOIN tracks ON albums.id = tracks.album_id\nGROUP BY albums.id\nHAVING COUNT(tracks.id) > 10;", "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "source_tables": ["albums", "tracks"]}
{"sample_id": 628, "db_id": "store_1", "question": "What are the names of the albums that have more than 10 tracks?", "rationale": ["Identify the relevant tables: We need to retrieve album names, so we will use the 'albums' table. We also need to count the number of tracks, which requires the 'tracks' table.", "Join the tables: We will join the 'albums' table with the 'tracks' table on the album ID to associate each track with its corresponding album.", "Group the results: We will group the results by album ID to count the number of tracks for each album.", "Filter the results: We will use the HAVING clause to filter the groups to only include albums that have more than 10 tracks."], "pred_sql": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id GROUP BY albums.id HAVING COUNT(tracks.id) > 10;", "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "source_tables": ["albums", "tracks"]}
{"sample_id": 629, "db_id": "store_1", "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "rationale": ["Identify the tables involved: tracks, media_types, and genres.", "Determine the columns needed: the name of the tracks from the tracks table.", "Establish the relationships: tracks are linked to media_types through media_type_id and to genres through genre_id.", "Set the conditions: filter tracks where the genre is 'Rock' and the media type is 'MPEG audio file'.", "Construct the SQL query using SELECT to retrieve the track names, JOIN to connect the tables, and WHERE to apply the filters."], "pred_sql": "SELECT tracks.name \nFROM tracks \nJOIN media_types ON tracks.media_type_id = media_types.id \nJOIN genres ON tracks.genre_id = genres.id \nWHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio file';", "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file';", "source_tables": ["tracks", "genres", "media_types"]}
{"sample_id": 630, "db_id": "store_1", "question": "What are the names of all Rock tracks that are stored on MPEG audio files?", "rationale": ["Identify the relevant tables: tracks, media_types, and genres are needed to get track names, media type, and genre respectively.", "Join the tracks table with media_types on media_type_id to filter tracks based on their media type.", "Join the tracks table with genres on genre_id to filter tracks based on their genre.", "Use a WHERE clause to specify that we want tracks where the genre is 'Rock' and the media type is 'MPEG audio'.", "Select the name of the tracks that meet these criteria."], "pred_sql": "SELECT tracks.name \nFROM tracks \nJOIN media_types ON tracks.media_type_id = media_types.id \nJOIN genres ON tracks.genre_id = genres.id \nWHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio';", "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file';", "source_tables": ["tracks", "genres", "media_types"]}
{"sample_id": 631, "db_id": "store_1", "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "rationale": ["Identify the tables involved: tracks, genres, and media_types.", "Determine the relationships: tracks have a genre (genre_id) and a media type (media_type_id).", "Select the track names from the tracks table.", "Use JOIN to connect tracks with genres and media_types based on their foreign keys.", "Apply the WHERE clause to filter tracks that belong to the genre 'Rock' or have the media type 'MPEG audio file'."], "pred_sql": "SELECT tracks.name \nFROM tracks \nJOIN genres ON tracks.genre_id = genres.id \nJOIN media_types ON tracks.media_type_id = media_types.id \nWHERE genres.name = 'Rock' OR media_types.name = 'MPEG audio file';", "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file';", "source_tables": ["tracks", "genres", "media_types"]}
{"sample_id": 632, "db_id": "store_1", "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "rationale": ["Identify the relevant tables: tracks, genres, and media_types.", "Determine the relationships: tracks are linked to genres via genre_id and to media_types via media_type_id.", "Select the track names from the tracks table.", "Filter the results to include only those tracks that belong to the Rock genre by joining with the genres table and checking for 'Rock'.", "Also filter the results to include only those tracks that have a media type of MPEG by joining with the media_types table and checking for 'MPEG'.", "Construct the SQL query using SELECT, JOIN, and WHERE clauses to meet the criteria."], "pred_sql": "SELECT tracks.name \nFROM tracks \nJOIN genres ON tracks.genre_id = genres.id \nJOIN media_types ON tracks.media_type_id = media_types.id \nWHERE genres.name = 'Rock' AND media_types.name = 'MPEG';", "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file';", "source_tables": ["tracks", "genres", "media_types"]}
{"sample_id": 633, "db_id": "store_1", "question": "List the name of tracks belongs to genre Rock or genre Jazz.", "rationale": ["Identify the tables involved: We need to retrieve track names, which are stored in the 'tracks' table, and we need to filter by genre, which is stored in the 'genres' table.", "Determine the relationship between the tables: The 'tracks' table has a foreign key 'genre_id' that references the 'id' in the 'genres' table. This allows us to join these two tables.", "Construct the SQL query: We will use a SELECT statement to get the 'name' from the 'tracks' table. We will join the 'tracks' table with the 'genres' table on the genre ID.", "Add the WHERE clause: We need to filter the results to include only those tracks that belong to the genres 'Rock' or 'Jazz'. We can use the IN clause for this purpose."], "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id WHERE genres.name IN ('Rock', 'Jazz');", "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'", "source_tables": ["tracks", "genres"]}
{"sample_id": 634, "db_id": "store_1", "question": "What are the names of the tracks that are Rock or Jazz songs?", "rationale": ["Identify the relevant tables: We need to retrieve track names, which are stored in the 'tracks' table, and we need to filter by genre, which is stored in the 'genres' table.", "Determine the relationship between tables: The 'tracks' table has a foreign key 'genre_id' that references the 'id' in the 'genres' table. This allows us to join these two tables to filter tracks by genre.", "Construct the SQL query: We will select the 'name' column from the 'tracks' table and join it with the 'genres' table on the condition that the genre name is either 'Rock' or 'Jazz'.", "Use the SQL 'IN' clause to specify the genres we are interested in."], "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id WHERE genres.name IN ('Rock', 'Jazz');", "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'", "source_tables": ["tracks", "genres"]}
{"sample_id": 635, "db_id": "store_1", "question": "List the name of all tracks in the playlists of Movies.", "rationale": ["Identify the relevant tables: tracks, playlist_tracks, and playlists.", "We need to select the track names from the tracks table.", "To get the tracks in the playlists, we will join the tracks table with the playlist_tracks table on the track_id.", "Next, we will join the playlist_tracks table with the playlists table on the playlist_id to filter by playlist name.", "Finally, we will add a WHERE clause to filter the playlists to only those named 'Movies'."], "pred_sql": "SELECT tracks.name \nFROM tracks \nJOIN playlist_tracks ON tracks.id = playlist_tracks.track_id \nJOIN playlists ON playlist_tracks.playlist_id = playlists.id \nWHERE playlists.name = 'Movies';", "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies';", "source_tables": ["tracks", "playlists", "playlist_tracks"]}
{"sample_id": 636, "db_id": "store_1", "question": "What are the names of all tracks that are on playlists titled Movies?", "rationale": ["Identify the relevant tables: tracks, playlist_tracks, and playlists.", "We need to find tracks that are associated with playlists titled 'Movies'.", "Join the tracks table with the playlist_tracks table on the track_id to get the relationship between tracks and playlists.", "Then, join the resulting table with the playlists table on the playlist_id to filter by the playlist name.", "Use a WHERE clause to specify that we only want playlists with the title 'Movies'.", "Select the name of the tracks from the final result."], "pred_sql": "SELECT tracks.name FROM tracks \nJOIN playlist_tracks ON tracks.id = playlist_tracks.track_id \nJOIN playlists ON playlist_tracks.playlist_id = playlists.id \nWHERE playlists.name = 'Movies';", "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies';", "source_tables": ["tracks", "playlists", "playlist_tracks"]}
{"sample_id": 637, "db_id": "store_1", "question": "List the name of playlist which has number of tracks greater than 100.", "rationale": ["We need to list the names of playlists that have more than 100 tracks.", "To do this, we will join the 'playlists' table with the 'playlist_tracks' table on the playlist ID.", "We will group the results by the playlist ID to count the number of tracks in each playlist.", "Finally, we will use the HAVING clause to filter the groups where the count of tracks is greater than 100."], "pred_sql": "SELECT playlists.name FROM playlists JOIN playlist_tracks ON playlists.id = playlist_tracks.playlist_id GROUP BY playlists.id HAVING COUNT(playlist_tracks.track_id) > 100;", "gold_sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "source_tables": ["playlists", "playlist_tracks"]}
{"sample_id": 638, "db_id": "store_1", "question": "What are the names of all playlists that have more than 100 tracks?", "rationale": ["We need to find the names of playlists that have more than 100 tracks.", "To do this, we will join the 'playlists' table with the 'playlist_tracks' table on the playlist ID.", "We will group the results by the playlist ID to count the number of tracks in each playlist.", "Finally, we will use the HAVING clause to filter the groups to only include those with a count greater than 100."], "pred_sql": "SELECT playlists.name\nFROM playlists\nJOIN playlist_tracks ON playlists.id = playlist_tracks.playlist_id\nGROUP BY playlists.id\nHAVING COUNT(playlist_tracks.track_id) > 100;", "gold_sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "source_tables": ["playlists", "playlist_tracks"]}
{"sample_id": 639, "db_id": "store_1", "question": "List all tracks bought by customer Daan Peeters.", "rationale": ["Identify the tables involved: We need to find tracks bought by a specific customer, which involves the 'tracks', 'invoice_lines', 'invoices', and 'customers' tables.", "Determine the relationships: 'tracks' is linked to 'invoice_lines' through 'track_id', 'invoice_lines' is linked to 'invoices' through 'invoice_id', and 'invoices' is linked to 'customers' through 'customer_id'.", "Select the relevant columns: We want to list the names of the tracks, so we will select 'tracks.name'.", "Filter the results: We need to filter the results to only include tracks bought by the customer with the first name 'Daan' and last name 'Peeters'.", "Construct the SQL query: Using the identified tables, relationships, selected columns, and filters, we can construct the SQL query."], "pred_sql": "SELECT tracks.name \nFROM tracks \nJOIN invoice_lines ON tracks.id = invoice_lines.track_id \nJOIN invoices ON invoice_lines.invoice_id = invoices.id \nJOIN customers ON invoices.customer_id = customers.id \nWHERE customers.first_name = 'Daan' AND customers.last_name = 'Peeters';", "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Daan' AND T4.last_name = 'Peeters';", "source_tables": ["tracks", "invoice_lines", "customers", "invoices"]}
{"sample_id": 640, "db_id": "store_1", "question": "What are the tracks that Dean Peeters bought?", "rationale": ["Identify the relevant tables: We need to find tracks that a specific customer (Dean Peeters) bought, which involves the 'tracks', 'invoice_lines', 'invoices', and 'customers' tables.", "Determine the relationships: The 'tracks' table is linked to the 'invoice_lines' table through 'track_id'. The 'invoice_lines' table is linked to the 'invoices' table through 'invoice_id'. The 'invoices' table is linked to the 'customers' table through 'customer_id'.", "Select the track names: We want to retrieve the names of the tracks, so we will select 'tracks.name'.", "Filter by customer name: We need to filter the results to only include tracks bought by the customer with the first name 'Dean' and last name 'Peeters'.", "Construct the SQL query: Combine the selected fields, joins, and where clause to form the complete SQL query."], "pred_sql": "SELECT tracks.name \nFROM tracks \nJOIN invoice_lines ON tracks.id = invoice_lines.track_id \nJOIN invoices ON invoice_lines.invoice_id = invoices.id \nJOIN customers ON invoices.customer_id = customers.id \nWHERE customers.first_name = 'Dean' AND customers.last_name = 'Peeters';", "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Daan' AND T4.last_name = 'Peeters';", "source_tables": ["tracks", "invoice_lines", "customers", "invoices"]}
{"sample_id": 641, "db_id": "store_1", "question": "How much is the track Fast As a Shark?", "rationale": ["Identify the relevant table: The track information is stored in the 'tracks' table.", "Determine the required column: We need the 'unit_price' of the track.", "Specify the condition: We need to filter the track by its name, which is 'Fast As a Shark'.", "Construct the SQL query: Use a SELECT statement to retrieve the 'unit_price' from the 'tracks' table where the 'name' matches 'Fast As a Shark'."], "pred_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';", "gold_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';", "source_tables": ["tracks"]}
{"sample_id": 642, "db_id": "store_1", "question": "What is the unit price of the tune \"Fast As a Shark\"?", "rationale": ["Identify the table that contains the information about tracks, which is the 'tracks' table.", "Determine the relevant column that holds the unit price of the track, which is 'unit_price'.", "Identify the condition needed to find the specific track, which is the name of the track being 'Fast As a Shark'.", "Construct the SQL query to select the 'unit_price' from the 'tracks' table where the 'name' matches 'Fast As a Shark'."], "pred_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';", "gold_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';", "source_tables": ["tracks"]}
{"sample_id": 643, "db_id": "store_1", "question": "Find the name of tracks which are in Movies playlist but not in music playlist.", "rationale": ["Identify the tracks that are in the 'Movies' playlist.", "Use a JOIN to connect the 'tracks' table with the 'playlist_tracks' table to filter tracks by the 'Movies' playlist.", "Use a subquery to find tracks that are in the 'Music' playlist.", "Filter the results to only include tracks that are in the 'Movies' playlist but not in the 'Music' playlist."], "pred_sql": "SELECT t.name \nFROM tracks t \nJOIN playlist_tracks pt1 ON t.id = pt1.track_id \nJOIN playlists p1 ON pt1.playlist_id = p1.id \nWHERE p1.name = 'Movies' \nAND t.id NOT IN (\n    SELECT t2.id \n    FROM tracks t2 \n    JOIN playlist_tracks pt2 ON t2.id = pt2.track_id \n    JOIN playlists p2 ON pt2.playlist_id = p2.id \n    WHERE p2.name = 'Music'\n);", "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["tracks", "playlists", "playlist_tracks"]}
{"sample_id": 644, "db_id": "store_1", "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?", "rationale": ["Identify the tables involved: tracks, playlist_tracks, and playlists.", "We need to find tracks that are in the 'Movies' playlist. This requires joining the tracks table with the playlist_tracks table and then with the playlists table.", "Next, we need to ensure that these tracks are not in the 'Music' playlist. This can be done using a LEFT JOIN on the playlist_tracks table again to check for the absence of tracks in the 'Music' playlist.", "The WHERE clause will filter tracks that are in the 'Movies' playlist and not in the 'Music' playlist. We will check for tracks where the playlist name is 'Movies' and either the playlist name is not 'Music' or it is NULL (indicating the track is not in the 'Music' playlist)."], "pred_sql": "SELECT t.name \nFROM tracks t \nJOIN playlist_tracks pt1 ON t.id = pt1.track_id \nJOIN playlists p1 ON pt1.playlist_id = p1.id \nLEFT JOIN playlist_tracks pt2 ON t.id = pt2.track_id \nJOIN playlists p2 ON pt2.playlist_id = p2.id \nWHERE p1.name = 'Movies' AND p2.name != 'Music' OR p2.name IS NULL;", "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["tracks", "playlists", "playlist_tracks"]}
{"sample_id": 645, "db_id": "store_1", "question": "Find the name of tracks which are in both Movies and music playlists.", "rationale": ["Identify the relevant tables: tracks, playlist_tracks, and playlists.", "We need to find tracks that are present in both 'Movies' and 'Music' playlists.", "Join the tracks table with playlist_tracks on track_id to link tracks to playlists.", "Join the resulting table with playlists on playlist_id to filter by playlist names.", "Use a WHERE clause to filter playlists to only 'Movies' and 'Music'.", "Group the results by track ID to count how many of the specified playlists each track appears in.", "Use HAVING to ensure that only tracks appearing in both playlists (count = 2) are selected."], "pred_sql": "SELECT DISTINCT t.name\nFROM tracks t\nJOIN playlist_tracks pt ON t.id = pt.track_id\nJOIN playlists p ON pt.playlist_id = p.id\nWHERE p.name IN ('Movies', 'Music')\nGROUP BY t.id\nHAVING COUNT(DISTINCT p.name) = 2;", "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["tracks", "playlists", "playlist_tracks"]}
{"sample_id": 646, "db_id": "store_1", "question": "What are the names of all the tracks that are in both the Movies and music playlists?", "rationale": ["We need to find the names of tracks that are present in both the 'Movies' and 'music' playlists.", "To do this, we will join the 'tracks' table with the 'playlist_tracks' table to get the tracks associated with playlists.", "We will then join the 'playlists' table to filter for the specific playlists: 'Movies' and 'music'.", "Since a track can be in multiple playlists, we will perform two joins on the 'playlist_tracks' and 'playlists' tables to check for both playlists.", "Finally, we will select the track names that meet the criteria of being in both playlists."], "pred_sql": "SELECT t.name \nFROM tracks t \nJOIN playlist_tracks pt1 ON t.id = pt1.track_id \nJOIN playlists p1 ON pt1.playlist_id = p1.id \nJOIN playlist_tracks pt2 ON t.id = pt2.track_id \nJOIN playlists p2 ON pt2.playlist_id = p2.id \nWHERE p1.name = 'Movies' AND p2.name = 'music';", "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["tracks", "playlists", "playlist_tracks"]}
{"sample_id": 647, "db_id": "store_1", "question": "Find number of tracks in each genre?", "rationale": ["Identify the tables involved: We need to get data from the 'genres' table and the 'tracks' table.", "Determine the relationship: The 'tracks' table has a foreign key 'genre_id' that references the 'id' in the 'genres' table.", "Select the required fields: We want the genre name from the 'genres' table and the count of tracks from the 'tracks' table.", "Use COUNT() function: To count the number of tracks for each genre, we will use the COUNT() function on the track IDs.", "Group the results: We need to group the results by genre to get the count for each genre.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT genres.name AS genre_name, COUNT(tracks.id) AS track_count\nFROM genres\nLEFT JOIN tracks ON genres.id = tracks.genre_id\nGROUP BY genres.id;", "gold_sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "source_tables": ["tracks", "genres"]}
{"sample_id": 648, "db_id": "store_1", "question": "How many tracks are in each genre?", "rationale": ["Identify the tables involved: genres and tracks.", "We need to count the number of tracks for each genre, so we will use the COUNT() function.", "To associate tracks with their genres, we will perform a LEFT JOIN between the genres table and the tracks table on the genre_id.", "We will group the results by genre to get the count of tracks for each genre using GROUP BY.", "Select the genre name and the count of tracks in the final output."], "pred_sql": "SELECT genres.name AS genre_name, COUNT(tracks.id) AS track_count\nFROM genres\nLEFT JOIN tracks ON genres.id = tracks.genre_id\nGROUP BY genres.id;", "gold_sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "source_tables": ["tracks", "genres"]}
{"sample_id": 649, "db_id": "journal_committee", "question": "How many editors are there?", "rationale": ["Identify the table that contains information about editors, which is the 'editor' table.", "To find out how many editors there are, we need to count the number of entries in the 'editor' table.", "Use the COUNT() function to count all rows in the 'editor' table.", "Select the count with an alias 'EditorCount' for clarity."], "pred_sql": "SELECT COUNT(*) AS EditorCount FROM editor;", "gold_sql": "SELECT count(*) FROM editor", "source_tables": ["editor"]}
{"sample_id": 650, "db_id": "journal_committee", "question": "List the names of editors in ascending order of age.", "rationale": ["Identify the table that contains the information about editors, which is the 'editor' table.", "Determine the column that contains the names of the editors, which is 'Name'.", "Specify that we want to order the results by the age of the editors, which is in the 'Age' column.", "Use the SQL SELECT statement to retrieve the 'Name' column from the 'editor' table and apply the ORDER BY clause to sort the results in ascending order of 'Age'."], "pred_sql": "SELECT Name FROM editor ORDER BY Age ASC;", "gold_sql": "SELECT Name FROM editor ORDER BY Age ASC", "source_tables": ["editor"]}
{"sample_id": 651, "db_id": "journal_committee", "question": "What are the names and ages of editors?", "rationale": ["Identify the required information: names and ages of editors.", "Determine the relevant table: the 'editor' table contains the necessary information.", "Construct the SQL SELECT statement to retrieve 'Name' and 'Age' from the 'editor' table."], "pred_sql": "SELECT Name, Age FROM editor;", "gold_sql": "SELECT Name ,  Age FROM editor", "source_tables": ["editor"]}
{"sample_id": 652, "db_id": "journal_committee", "question": "List the names of editors who are older than 25.", "rationale": ["Identify the table that contains the information about editors, which is the 'editor' table.", "Determine the column that contains the names of the editors, which is 'Name'.", "Identify the column that contains the age of the editors, which is 'Age'.", "Formulate a SQL query to select the 'Name' from the 'editor' table where the 'Age' is greater than 25."], "pred_sql": "SELECT Name FROM editor WHERE Age > 25;", "gold_sql": "SELECT Name FROM editor WHERE Age  >  25", "source_tables": ["editor"]}
{"sample_id": 653, "db_id": "journal_committee", "question": "Show the names of editors of age either 24 or 25.", "rationale": ["Identify the table that contains the editor information, which is the 'editor' table.", "Determine the relevant column for the editor's name, which is 'Name'.", "Identify the column that contains the age of the editors, which is 'Age'.", "Formulate a condition to filter editors based on their age being either 24 or 25 using the IN clause.", "Construct the SQL SELECT statement to retrieve the names of the editors that meet the age criteria."], "pred_sql": "SELECT Name FROM editor WHERE Age IN (24, 25);", "gold_sql": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25", "source_tables": ["editor"]}
{"sample_id": 654, "db_id": "journal_committee", "question": "What is the name of the youngest editor?", "rationale": ["Identify the table that contains the information about editors, which is the 'editor' table.", "We need to find the youngest editor, which means we need to sort the editors by their age in ascending order.", "To get the youngest editor, we will limit the results to just one entry after sorting.", "The final SQL query selects the 'Name' of the editor from the 'editor' table, orders the results by 'Age' in ascending order, and limits the output to 1."], "pred_sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1;", "gold_sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1", "source_tables": ["editor"]}
{"sample_id": 655, "db_id": "journal_committee", "question": "What are the different ages of editors? Show each age along with the number of editors of that age.", "rationale": ["Identify the table that contains the information about editors, which is the 'editor' table.", "We need to select the 'Age' column to show the different ages of editors.", "To count the number of editors for each age, we will use the COUNT() function.", "We need to group the results by 'Age' to get the count for each distinct age.", "The final SQL query will select the 'Age' and the count of editors, grouping by 'Age'."], "pred_sql": "SELECT Age, COUNT(*) AS Number_of_Editors FROM editor GROUP BY Age;", "gold_sql": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age", "source_tables": ["editor"]}
{"sample_id": 656, "db_id": "journal_committee", "question": "Please show the most common age of editors.", "rationale": ["Identify the table that contains the age of editors, which is the 'editor' table.", "To find the most common age, we need to count how many editors fall into each age category.", "We will use the COUNT function to count the number of occurrences of each age.", "We will group the results by age using the GROUP BY clause.", "To find the most common age, we will order the results by the count in descending order using ORDER BY.", "Finally, we will limit the results to only the top entry using LIMIT 1."], "pred_sql": "SELECT Age, COUNT(*) as AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;", "gold_sql": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["editor"]}
{"sample_id": 657, "db_id": "journal_committee", "question": "Show the distinct themes of journals.", "rationale": ["Identify the table that contains the themes of the journals, which is the 'journal' table.", "Determine that we need to select distinct values to avoid duplicates in the results.", "Construct the SQL query to select the distinct 'Theme' column from the 'journal' table."], "pred_sql": "SELECT DISTINCT Theme FROM journal;", "gold_sql": "SELECT DISTINCT Theme FROM journal", "source_tables": ["journal"]}
{"sample_id": 658, "db_id": "journal_committee", "question": "Show the names of editors and the theme of journals for which they serve on committees.", "rationale": ["Identify the tables involved: editor, journal_committee, and journal.", "Determine the columns needed: editor.Name and journal.Theme.", "Establish the relationships between the tables using JOINs: editor to journal_committee on Editor_ID, and journal_committee to journal on Journal_ID.", "Construct the SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT editor.Name, journal.Theme FROM editor JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID JOIN journal ON journal_committee.Journal_ID = journal.Journal_ID;", "gold_sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "source_tables": ["journal_committee", "editor", "journal"]}
{"sample_id": 659, "db_id": "journal_committee", "question": "For each journal_committee, find the editor name and the journal theme.", "rationale": ["Identify the tables involved: journal_committee, editor, and journal.", "Determine the columns needed: editor's name from the editor table and journal's theme from the journal table.", "Establish the relationships between the tables using JOINs: journal_committee links to editor via Editor_ID and to journal via Journal_ID.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT editor.Name, journal.Theme FROM journal_committee JOIN editor ON journal_committee.Editor_ID = editor.Editor_ID JOIN journal ON journal_committee.Journal_ID = journal.Journal_ID;", "gold_sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "source_tables": ["journal_committee", "editor", "journal"]}
{"sample_id": 660, "db_id": "journal_committee", "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.", "rationale": ["Identify the tables involved: editor, journal_committee, and journal.", "Determine the columns needed: editor.Name, editor.Age, and journal.Theme.", "Establish the relationships between the tables using JOINs: editor to journal_committee on Editor_ID, and journal_committee to journal on Journal_ID.", "Construct the SELECT statement to retrieve the required columns from the joined tables.", "Add an ORDER BY clause to sort the results in ascending order based on the journal theme."], "pred_sql": "SELECT editor.Name, editor.Age, journal.Theme \nFROM editor \nJOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID \nJOIN journal ON journal_committee.Journal_ID = journal.Journal_ID \nORDER BY journal.Theme ASC;", "gold_sql": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC", "source_tables": ["journal_committee", "editor", "journal"]}
{"sample_id": 661, "db_id": "journal_committee", "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.", "rationale": ["Identify the tables involved: editor, journal_committee, and journal.", "We need to retrieve the names of editors, so we will select the 'Name' column from the editor table.", "To find the relevant editors, we need to join the editor table with the journal_committee table on 'Editor_ID'.", "Next, we need to join the journal_committee table with the journal table on 'Journal_ID' to access the sales data.", "We need to filter the results to only include journals with sales greater than 3000, so we will add a WHERE clause for 'Sales > 3000'.", "Finally, we construct the SQL query using the selected columns and the necessary joins and conditions."], "pred_sql": "SELECT editor.Name FROM editor JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID JOIN journal ON journal_committee.Journal_ID = journal.Journal_ID WHERE journal.Sales > '3000';", "gold_sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000", "source_tables": ["journal_committee", "editor", "journal"]}
{"sample_id": 662, "db_id": "journal_committee", "question": "Show the id, name of each editor and the number of journal committees they are on.", "rationale": ["Identify the columns needed: Editor_ID and Name from the editor table, and a count of journal committees from the journal_committee table.", "To get the count of journal committees for each editor, a JOIN operation is necessary between the editor and journal_committee tables based on the Editor_ID.", "Use a LEFT JOIN to ensure that editors with no committee involvement are still included in the results with a count of zero.", "Group the results by Editor_ID and Name to aggregate the count of journal committees for each editor."], "pred_sql": "SELECT editor.Editor_ID, editor.Name, COUNT(journal_committee.Journal_ID) AS Committee_Count\nFROM editor\nLEFT JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID\nGROUP BY editor.Editor_ID, editor.Name;", "gold_sql": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id", "source_tables": ["editor", "journal_committee"]}
{"sample_id": 663, "db_id": "journal_committee", "question": "Show the names of editors that are on at least two journal committees.", "rationale": ["Identify the relevant tables: We need to look at the 'editor' and 'journal_committee' tables to find the names of editors and their committee memberships.", "Join the tables: We will join the 'editor' table with the 'journal_committee' table on the 'Editor_ID' to link editors with their respective committees.", "Group by editor: We will group the results by 'Editor_ID' to aggregate the number of committees each editor is part of.", "Count the committees: We will use the COUNT function to count the number of journal committees each editor is associated with.", "Filter the results: We will use the HAVING clause to filter the groups to only include those editors who are part of at least two committees."], "pred_sql": "SELECT e.Name\nFROM editor e\nJOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID\nGROUP BY e.Editor_ID\nHAVING COUNT(jc.Journal_ID) >= 2;", "gold_sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2", "source_tables": ["editor", "journal_committee"]}
{"sample_id": 664, "db_id": "journal_committee", "question": "List the names of editors that are not on any journal committee.", "rationale": ["Identify the table that contains the names of the editors, which is the 'editor' table.", "Determine the condition for selecting editors who are not on any journal committee. This requires checking the 'journal_committee' table.", "Use a subquery to find all Editor_IDs that are present in the 'journal_committee' table.", "Select the names of editors from the 'editor' table where their Editor_ID is not in the list obtained from the subquery."], "pred_sql": "SELECT Name FROM editor WHERE Editor_ID NOT IN (SELECT Editor_ID FROM journal_committee);", "gold_sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)", "source_tables": ["editor", "journal_committee"]}
{"sample_id": 665, "db_id": "journal_committee", "question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.", "rationale": ["Identify the columns needed from the journal table: Date, Theme, and Sales.", "Determine the condition: we want journals that do not have any of the listed editors serving on the committee.", "To find journals with editors, we need to look at the journal_committee table, which links editors to journals.", "We will use a subquery to select Journal_IDs from journal_committee where the Editor_ID matches any of the specified editors.", "The main query will select from the journal table where the Journal_ID is not in the list of Journal_IDs returned by the subquery."], "pred_sql": "SELECT j.Date, j.Theme, j.Sales \nFROM journal j \nWHERE j.Journal_ID NOT IN (\n    SELECT jc.Journal_ID \n    FROM journal_committee jc \n    WHERE jc.Editor_ID IN (\n        SELECT e.Editor_ID \n        FROM editor e \n        WHERE e.Name IN ('Editor1', 'Editor2', 'Editor3')\n    )\n);", "gold_sql": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID", "source_tables": ["journal_committee", "journal"]}
{"sample_id": 666, "db_id": "journal_committee", "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?", "rationale": ["Identify the tables involved: journal, journal_committee, and editor.", "Determine the relationship between the tables: journal_committee links journal and editor.", "We need to calculate the average sales, so we will use the AVG() function on the Sales column.", "Filter the results to include only those entries where the work type is 'Photo'.", "Join the tables on their respective keys: journal.Journal_ID with journal_committee.Journal_ID and journal_committee.Editor_ID with editor.Editor_ID.", "Convert the Sales column to a numeric type (REAL) for accurate averaging."], "pred_sql": "SELECT AVG(CAST(Sales AS REAL)) AS Average_Sales\nFROM journal\nJOIN journal_committee ON journal.Journal_ID = journal_committee.Journal_ID\nJOIN editor ON journal_committee.Editor_ID = editor.Editor_ID\nWHERE journal_committee.Work_Type = 'Photo';", "gold_sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'", "source_tables": ["journal_committee", "journal"]}
{"sample_id": 667, "db_id": "customers_card_transactions", "question": "How many accounts do we have?", "rationale": ["Identify the requirement: We need to count the number of accounts.", "Determine the relevant table: The 'Accounts' table contains the account information.", "Use the COUNT() function to count the total number of records in the 'Accounts' table.", "Construct the SQL query to select the count from the 'Accounts' table."], "pred_sql": "SELECT COUNT(*) AS total_accounts FROM Accounts;", "gold_sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 668, "db_id": "customers_card_transactions", "question": "Count the number of accounts.", "rationale": ["Identify the goal of the query: to count the number of accounts.", "Determine the relevant table: the 'Accounts' table contains the account information.", "Use the COUNT() function to count the total number of records in the 'Accounts' table.", "Construct the SQL query to select the count from the 'Accounts' table."], "pred_sql": "SELECT COUNT(*) AS account_count FROM Accounts;", "gold_sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 669, "db_id": "customers_card_transactions", "question": "Show ids, customer ids, names for all accounts.", "rationale": ["Identify the required columns: account_id, customer_id, and account_name.", "Determine the table that contains these columns, which is the Accounts table.", "Construct the SQL SELECT statement to retrieve the specified columns from the Accounts table."], "pred_sql": "SELECT account_id, customer_id, account_name FROM Accounts;", "gold_sql": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 670, "db_id": "customers_card_transactions", "question": "What are the account ids, customer ids, and account names for all the accounts?", "rationale": ["Identify the required columns: account_id, customer_id, and account_name.", "Determine the table that contains these columns, which is the Accounts table.", "Construct the SQL SELECT statement to retrieve the specified columns from the Accounts table."], "pred_sql": "SELECT account_id, customer_id, account_name FROM Accounts;", "gold_sql": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 671, "db_id": "customers_card_transactions", "question": "Show other account details for account with name 338.", "rationale": ["Identify the table that contains the required information: The 'Accounts' table has the 'other_account_details' column.", "Determine the condition for filtering the records: We need to find the account with the name '338'.", "Construct the SQL SELECT statement to retrieve 'other_account_details' from the 'Accounts' table where the 'account_name' matches '338'."], "pred_sql": "SELECT other_account_details FROM Accounts WHERE account_name = '338';", "gold_sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  '338'", "source_tables": ["accounts"]}
{"sample_id": 672, "db_id": "customers_card_transactions", "question": "What are the other account details for the account with the name 338?", "rationale": ["Identify the table that contains the account details, which is the Accounts table.", "Determine the specific column needed, which is 'other_account_details'.", "Filter the results to find the account with the name '338' using a WHERE clause."], "pred_sql": "SELECT other_account_details FROM Accounts WHERE account_name = '338';", "gold_sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  '338'", "source_tables": ["accounts"]}
{"sample_id": 673, "db_id": "customers_card_transactions", "question": "What is the first name, last name, and phone of the customer with account name 162?", "rationale": ["Identify the columns needed: customer_first_name, customer_last_name, and customer_phone from the Customers table.", "Determine the relationship between the Accounts and Customers tables using the customer_id.", "Join the Accounts table with the Customers table on customer_id to access customer details related to the account.", "Filter the results to find the customer associated with the specific account name '162'."], "pred_sql": "SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone \nFROM Customers \nJOIN Accounts ON Customers.customer_id = Accounts.customer_id \nWHERE Accounts.account_name = '162';", "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  '162'", "source_tables": ["accounts", "customers"]}
{"sample_id": 674, "db_id": "customers_card_transactions", "question": "Give the full name and phone of the customer who has the account name 162.", "rationale": ["Identify the required information: full name (first and last) and phone number of the customer.", "Determine the tables involved: Customers for customer details and Accounts for account details.", "Establish the relationship between the tables: Customers and Accounts are linked by customer_id.", "Formulate the SQL SELECT statement to retrieve the customer's first name, last name, and phone number.", "Use a JOIN clause to combine data from the Customers and Accounts tables based on the customer_id.", "Add a WHERE clause to filter results for the specific account name '162'."], "pred_sql": "SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone \nFROM Customers \nJOIN Accounts ON Customers.customer_id = Accounts.customer_id \nWHERE Accounts.account_name = '162';", "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  '162'", "source_tables": ["accounts", "customers"]}
{"sample_id": 675, "db_id": "customers_card_transactions", "question": "How many accounts does the customer with first name Art and last name Turcotte have?", "rationale": ["Identify the customer by their first name 'Art' and last name 'Turcotte'.", "To find the customer_id associated with this customer, a subquery is needed on the Customers table.", "Use the customer_id obtained from the subquery to count the number of accounts in the Accounts table that belong to this customer."], "pred_sql": "SELECT COUNT(*) AS account_count \nFROM Accounts \nWHERE customer_id = (SELECT customer_id \n                     FROM Customers \n                     WHERE customer_first_name = 'Art' \n                     AND customer_last_name = 'Turcotte');", "gold_sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Art' AND T2.customer_last_name  =  'Turcotte'", "source_tables": ["accounts", "customers"]}
{"sample_id": 676, "db_id": "customers_card_transactions", "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.", "rationale": ["Identify the customer by their first name 'Art' and last name 'Turcotte'.", "To find the customer_id associated with this customer, a subquery is needed on the Customers table.", "Once the customer_id is obtained, use it to filter the Accounts table to count the number of accounts associated with that customer_id.", "The final SQL query will count the number of accounts for the specified customer."], "pred_sql": "SELECT COUNT(*) AS account_count \nFROM Accounts \nWHERE customer_id = (SELECT customer_id \n                     FROM Customers \n                     WHERE customer_first_name = 'Art' \n                     AND customer_last_name = 'Turcotte');", "gold_sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Art' AND T2.customer_last_name  =  'Turcotte'", "source_tables": ["accounts", "customers"]}
{"sample_id": 677, "db_id": "customers_card_transactions", "question": "Show all customer ids and the number of accounts for each customer.", "rationale": ["Identify the tables involved: We need data from the Customers and Accounts tables.", "Determine the columns needed: We need customer_id from the Customers table and a count of account_id from the Accounts table.", "Establish the relationship: The Accounts table has a foreign key customer_id that links to the Customers table.", "Use a LEFT JOIN to include all customers even if they have no accounts.", "Group the results by customer_id to count the number of accounts for each customer."], "pred_sql": "SELECT c.customer_id, COUNT(a.account_id) AS account_count\nFROM Customers c\nLEFT JOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id;", "gold_sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "source_tables": ["accounts"]}
{"sample_id": 678, "db_id": "customers_card_transactions", "question": "How many accounts are there for each customer id?", "rationale": ["Identify the relevant table: The Accounts table contains the account information linked to customer IDs.", "Determine the required information: We need to count the number of accounts for each customer ID.", "Use the COUNT() function to count the number of account_id entries for each customer_id.", "Group the results by customer_id to get the count for each customer.", "Construct the SQL query using SELECT, COUNT, and GROUP BY clauses."], "pred_sql": "SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id;", "gold_sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "source_tables": ["accounts"]}
{"sample_id": 679, "db_id": "customers_card_transactions", "question": "Show the customer id and number of accounts with most accounts.", "rationale": ["Identify the relevant table: The Accounts table contains the account information, including the customer_id.", "Count the number of accounts for each customer: Use COUNT(account_id) to count the accounts associated with each customer_id.", "Group the results by customer_id: Use GROUP BY customer_id to aggregate the counts for each customer.", "Order the results to find the customer with the most accounts: Use ORDER BY number_of_accounts DESC to sort the results in descending order based on the count of accounts.", "Limit the results to the top customer: Use LIMIT 1 to return only the customer with the highest number of accounts."], "pred_sql": "SELECT customer_id, COUNT(account_id) AS number_of_accounts\nFROM Accounts\nGROUP BY customer_id\nORDER BY number_of_accounts DESC\nLIMIT 1;", "gold_sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts"]}
{"sample_id": 680, "db_id": "customers_card_transactions", "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?", "rationale": ["Identify the relevant table: The Accounts table contains the account information linked to customers.", "Determine the required information: We need the customer_id and the count of accounts for each customer.", "Use COUNT() function: To count the number of accounts per customer, we will use the COUNT() function on account_id.", "Group by customer_id: To aggregate the account counts for each customer, we will group the results by customer_id.", "Order the results: To find the customer with the most accounts, we will order the results in descending order based on the account count.", "Limit the results: Since we only need the customer with the most accounts, we will limit the results to 1."], "pred_sql": "SELECT customer_id, COUNT(account_id) AS account_count\nFROM Accounts\nGROUP BY customer_id\nORDER BY account_count DESC\nLIMIT 1;", "gold_sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts"]}
{"sample_id": 681, "db_id": "customers_card_transactions", "question": "What is the customer first, last name and id with least number of accounts.", "rationale": ["Identify the relevant tables: Customers and Accounts are needed to get customer details and their associated accounts.", "Join the Customers table with the Accounts table on the customer_id to link customers with their accounts.", "Group the results by customer_id to count the number of accounts each customer has.", "Order the results by the count of accounts in ascending order to find the customer with the least number of accounts.", "Limit the results to 1 to get only the customer with the least number of accounts."], "pred_sql": "SELECT c.customer_first_name, c.customer_last_name, c.customer_id \nFROM Customers c \nJOIN Accounts a ON c.customer_id = a.customer_id \nGROUP BY c.customer_id \nORDER BY COUNT(a.account_id) ASC \nLIMIT 1;", "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["accounts", "customers"]}
{"sample_id": 682, "db_id": "customers_card_transactions", "question": "Give the full name and customer id of the customer with the fewest accounts.", "rationale": ["Identify the relevant tables: Customers and Accounts.", "We need to join these tables on the customer_id to link customers with their accounts.", "Group the results by customer_id to count the number of accounts each customer has.", "Order the results by the count of accounts in ascending order to find the customer with the fewest accounts.", "Limit the results to 1 to get only the customer with the fewest accounts.", "Select the customer_id and concatenate the first and last name to get the full name."], "pred_sql": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(a.account_id) ASC\nLIMIT 1;", "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["accounts", "customers"]}
{"sample_id": 683, "db_id": "customers_card_transactions", "question": "Show the number of all customers without an account.", "rationale": ["Identify the goal: We need to count the number of customers who do not have an associated account.", "Understand the relationship: Customers are linked to Accounts through the customer_id.", "To find customers without accounts, we can use a subquery to select customer_ids from the Accounts table.", "We will count the customers in the Customers table whose customer_id is not present in the list obtained from the Accounts table."], "pred_sql": "SELECT COUNT(*) AS number_of_customers_without_account\nFROM Customers\nWHERE customer_id NOT IN (SELECT customer_id FROM Accounts);", "gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"]}
{"sample_id": 684, "db_id": "customers_card_transactions", "question": "How many customers do not have an account?", "rationale": ["Identify the Customers table as it contains customer information.", "We need to count customers who do not have an account, which means we need to find customers whose customer_id is not present in the Accounts table.", "Use a subquery to select all customer_ids from the Accounts table.", "Use the NOT IN clause to filter out those customer_ids from the Customers table.", "Finally, use COUNT(*) to get the total number of customers who do not have an account."], "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"]}
{"sample_id": 685, "db_id": "customers_card_transactions", "question": "Show the first names and last names of customers without any account.", "rationale": ["Identify the columns needed: customer_first_name and customer_last_name from the Customers table.", "Determine the condition: we need customers who do not have any accounts.", "To find customers without accounts, we can use a subquery that selects customer_ids from the Accounts table.", "The main query will select the first and last names of customers whose customer_id is not in the list of customer_ids from the Accounts table."], "pred_sql": "SELECT customer_first_name, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "gold_sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["accounts", "customers"]}
{"sample_id": 686, "db_id": "customers_card_transactions", "question": "What are the full names of customers who do not have any accounts?", "rationale": ["Identify the information needed: We need the full names of customers without accounts.", "Determine the relevant tables: The 'Customers' table contains customer names, and the 'Accounts' table contains account information linked to customers.", "Formulate the condition: We need to find customers whose 'customer_id' is not present in the 'Accounts' table.", "Construct the SQL query: Use a SELECT statement to retrieve the full names by concatenating 'customer_first_name' and 'customer_last_name', and use a subquery to filter out customers with accounts."], "pred_sql": "SELECT customer_first_name || ' ' || customer_last_name AS full_name \nFROM Customers \nWHERE customer_id NOT IN (SELECT customer_id FROM Accounts);", "gold_sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["accounts", "customers"]}
{"sample_id": 687, "db_id": "customers_card_transactions", "question": "Show distinct first and last names for all customers with an account.", "rationale": ["Identify the tables involved: Customers and Accounts.", "Determine the relationship between the tables: Customers have a customer_id that links to Accounts.", "Select the distinct first and last names from the Customers table.", "Use a JOIN clause to combine the Customers and Accounts tables based on the customer_id.", "Construct the SQL query to retrieve the required fields."], "pred_sql": "SELECT DISTINCT c.customer_first_name, c.customer_last_name \nFROM Customers c \nJOIN Accounts a ON c.customer_id = a.customer_id;", "gold_sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["accounts", "customers"]}
{"sample_id": 688, "db_id": "customers_card_transactions", "question": "What are the full names of customers who have accounts?", "rationale": ["Identify the information needed: full names of customers who have accounts.", "Determine the relevant tables: Customers and Accounts.", "Establish the relationship between the tables: Customers are linked to Accounts via customer_id.", "Select the required fields: customer_first_name and customer_last_name from Customers.", "Use SQL JOIN to combine the Customers and Accounts tables based on customer_id.", "Format the output to show full names by concatenating first and last names."], "pred_sql": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name \nFROM Customers \nJOIN Accounts ON Customers.customer_id = Accounts.customer_id;", "gold_sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["accounts", "customers"]}
{"sample_id": 689, "db_id": "customers_card_transactions", "question": "How many customers have an account?", "rationale": ["Identify the relevant table: Accounts, which contains account information linked to customers.", "To find out how many customers have an account, we need to count distinct customer_ids in the Accounts table.", "Use the COUNT function to count the unique customer_ids, ensuring that we only count each customer once, even if they have multiple accounts."], "pred_sql": "SELECT COUNT(DISTINCT customer_id) AS customer_count FROM Accounts;", "gold_sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 690, "db_id": "customers_card_transactions", "question": "Count the number of customers who hold an account.", "rationale": ["Identify the tables involved: We need to count customers who hold accounts, so we will use the Customers and Accounts tables.", "Determine the relationship: The Customers table has a customer_id that links to the Accounts table's customer_id.", "Use a JOIN operation: We will join the Customers table with the Accounts table on the customer_id to find customers with accounts.", "Count distinct customers: We will use COUNT(DISTINCT c.customer_id) to ensure we count each customer only once, even if they have multiple accounts."], "pred_sql": "SELECT COUNT(DISTINCT c.customer_id) AS customer_count\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id;", "gold_sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 691, "db_id": "customers_card_transactions", "question": "How many customers do we have?", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "To find out how many customers there are, we need to count the number of entries in the 'Customers' table.", "Use the COUNT() function to count the total number of customers and select it as 'total_customers'.", "Construct the SQL query to select the count from the 'Customers' table."], "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers;", "gold_sql": "SELECT count(*) FROM Customers", "source_tables": ["customers"]}
{"sample_id": 692, "db_id": "customers_card_transactions", "question": "Count the number of customers.", "rationale": ["Identify the goal: Count the number of customers.", "Determine the relevant table: The 'Customers' table contains customer information.", "Use the COUNT() function to count the total number of entries in the 'Customers' table.", "Construct the SQL query to select the count from the 'Customers' table."], "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers;", "gold_sql": "SELECT count(*) FROM Customers", "source_tables": ["customers"]}
{"sample_id": 693, "db_id": "customers_card_transactions", "question": "Show ids, first names, last names, and phones for all customers.", "rationale": ["Identify the required information: ids, first names, last names, and phones for all customers.", "Map the required fields to the corresponding columns in the Customers table: 'customer_id', 'customer_first_name', 'customer_last_name', and 'customer_phone'.", "Construct the SQL SELECT statement to retrieve these columns from the Customers table."], "pred_sql": "SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers;", "gold_sql": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "source_tables": ["customers"]}
{"sample_id": 694, "db_id": "customers_card_transactions", "question": "What are the ids, full names, and phones of each customer?", "rationale": ["Identify the required information: customer ids, full names, and phone numbers.", "To get the full name, concatenate the first name and last name using '||' operator.", "Select the customer_id, the concatenated full name, and customer_phone from the Customers table."], "pred_sql": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers;", "gold_sql": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "source_tables": ["customers"]}
{"sample_id": 695, "db_id": "customers_card_transactions", "question": "What is the phone and email for customer with first name Aniyah and last name Feest?", "rationale": ["Identify the relevant table: The query requires information about customers, so we will use the 'Customers' table.", "Determine the columns needed: The query asks for the phone and email of the customer, which correspond to 'customer_phone' and 'customer_email' columns in the 'Customers' table.", "Specify the conditions: We need to filter the results to find the customer with the first name 'Aniyah' and the last name 'Feest'.", "Construct the SQL SELECT statement: We will select 'customer_phone' and 'customer_email' from the 'Customers' table where the first name and last name match the specified values."], "pred_sql": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest';", "gold_sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  'Aniyah' AND customer_last_name  =  'Feest'", "source_tables": ["customers"]}
{"sample_id": 696, "db_id": "customers_card_transactions", "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.", "rationale": ["Identify the table that contains the required information: Customers table has the phone and email of customers.", "Determine the columns needed: customer_phone and customer_email are required.", "Specify the condition to filter the results: We need to find the customer with first name 'Aniyah' and last name 'Feest'.", "Construct the SQL SELECT statement to retrieve the specified columns from the Customers table with the appropriate WHERE clause."], "pred_sql": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest';", "gold_sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  'Aniyah' AND customer_last_name  =  'Feest'", "source_tables": ["customers"]}
{"sample_id": 697, "db_id": "customers_card_transactions", "question": "Show the number of customer cards.", "rationale": ["Identify the table that contains customer card information, which is 'Customers_Cards'.", "To find the number of customer cards, we need to count the entries in the 'Customers_Cards' table.", "Use the COUNT() function to count all rows in the 'Customers_Cards' table.", "Select the count with an alias 'number_of_customer_cards' for clarity."], "pred_sql": "SELECT COUNT(*) AS number_of_customer_cards FROM Customers_Cards;", "gold_sql": "SELECT count(*) FROM Customers_cards", "source_tables": ["customers_cards"]}
{"sample_id": 698, "db_id": "customers_card_transactions", "question": "How many customer cards are there?", "rationale": ["Identify the table that contains information about customer cards, which is the 'Customers_Cards' table.", "To find out how many customer cards there are, we need to count the number of entries in the 'Customers_Cards' table.", "Use the COUNT() function to count all records in the 'Customers_Cards' table.", "Construct the SQL query to select the count of customer cards from the 'Customers_Cards' table."], "pred_sql": "SELECT COUNT(*) AS total_customer_cards FROM Customers_Cards;", "gold_sql": "SELECT count(*) FROM Customers_cards", "source_tables": ["customers_cards"]}
{"sample_id": 699, "db_id": "customers_card_transactions", "question": "Show ids, customer ids, card type codes, card numbers for all cards.", "rationale": ["Identify the required columns: card_id, customer_id, card_type_code, and card_number.", "Determine the table that contains these columns, which is the Customers_Cards table.", "Construct the SQL SELECT statement to retrieve the specified columns from the Customers_Cards table."], "pred_sql": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_Cards;", "gold_sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "source_tables": ["customers_cards"]}
{"sample_id": 700, "db_id": "customers_card_transactions", "question": "What are card ids, customer ids, card types, and card numbers for each customer card?", "rationale": ["Identify the required fields: card_id, customer_id, card_type_code, and card_number.", "Determine the appropriate table to query: Customers_Cards contains all the necessary information about customer cards.", "Construct the SQL SELECT statement to retrieve the specified fields from the Customers_Cards table."], "pred_sql": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_Cards;", "gold_sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "source_tables": ["customers_cards"]}
{"sample_id": 701, "db_id": "customers_card_transactions", "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.", "rationale": ["Identify the relevant table: The query is asking for information about a card, which is stored in the Customers_Cards table.", "Determine the required columns: The user wants to see the 'date_valid_from' and 'date_valid_to' for a specific card.", "Specify the condition: The card number is provided ('4560596484842'), so we need to filter the results based on this card number.", "Construct the SQL SELECT statement: We will select the specified columns from the Customers_Cards table where the card number matches the given value."], "pred_sql": "SELECT date_valid_from, date_valid_to FROM Customers_Cards WHERE card_number = '4560596484842';", "gold_sql": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  '4560596484842'", "source_tables": ["customers_cards"]}
{"sample_id": 702, "db_id": "customers_card_transactions", "question": "What are the valid from and valid to dates for the card with the number 4560596484842?", "rationale": ["Identify the table that contains card information, which is 'Customers_Cards'.", "Determine the columns needed for the output, which are 'date_valid_from' and 'date_valid_to'.", "Formulate the SQL query to select these columns from the 'Customers_Cards' table.", "Add a WHERE clause to filter the results for the specific card number '4560596484842'."], "pred_sql": "SELECT date_valid_from, date_valid_to FROM Customers_Cards WHERE card_number = '4560596484842';", "gold_sql": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  '4560596484842'", "source_tables": ["customers_cards"]}
{"sample_id": 703, "db_id": "customers_card_transactions", "question": "What is the first name, last name, and phone of the customer with card 4560596484842.", "rationale": ["Identify the required fields: first name, last name, and phone of the customer.", "Determine the relevant tables: Customers and Customers_Cards.", "Establish the relationship between the tables: Customers_Cards links to Customers via customer_id.", "Formulate the SQL SELECT statement to retrieve the specified fields from the Customers table.", "Use a JOIN clause to connect Customers and Customers_Cards on customer_id.", "Add a WHERE clause to filter the results for the specific card number '4560596484842'."], "pred_sql": "SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone \nFROM Customers \nJOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id \nWHERE Customers_Cards.card_number = '4560596484842';", "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  '4560596484842'", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 704, "db_id": "customers_card_transactions", "question": "Return the full name and phone of the customer who has card number 4560596484842.", "rationale": ["Identify the tables needed: Customers and Customers_Cards.", "Determine the columns to select: customer_first_name, customer_last_name, and customer_phone from Customers.", "Join the Customers table with the Customers_Cards table on customer_id to link customers with their cards.", "Filter the results to only include the card with the number '4560596484842'.", "Construct the SQL query using the SELECT statement with the appropriate JOIN and WHERE clauses."], "pred_sql": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name, Customers.customer_phone FROM Customers JOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id WHERE Customers_Cards.card_number = '4560596484842';", "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  '4560596484842'", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 705, "db_id": "customers_card_transactions", "question": "How many cards does customer Art Turcotte have?", "rationale": ["Identify the customer by their first and last name, 'Art' and 'Turcotte'.", "Use a subquery to find the customer_id associated with 'Art Turcotte' from the Customers table.", "Count the number of cards in the Customers_Cards table that are linked to the identified customer_id."], "pred_sql": "SELECT COUNT(*) AS card_count FROM Customers_Cards WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte');", "gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Art' AND T2.customer_last_name  =  'Turcotte'", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 706, "db_id": "customers_card_transactions", "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.", "rationale": ["Identify the tables involved: We need to count cards, so we will use the Customers_Cards table.", "We need to link the Customers_Cards table to the Customers table to filter by customer name.", "Use a JOIN clause to connect Customers_Cards with Customers on the customer_id field.", "Filter the results using a WHERE clause to specify the first name as 'Art' and the last name as 'Turcotte'.", "Use the COUNT() function to count the number of cards associated with the specified customer."], "pred_sql": "SELECT COUNT(*) AS card_count \nFROM Customers_Cards cc \nJOIN Customers c ON cc.customer_id = c.customer_id \nWHERE c.customer_first_name = 'Art' AND c.customer_last_name = 'Turcotte';", "gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Art' AND T2.customer_last_name  =  'Turcotte'", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 707, "db_id": "customers_card_transactions", "question": "How many debit cards do we have?", "rationale": ["Identify the relevant table: Customers_Cards contains information about the cards.", "Determine the criteria for counting debit cards: We need to filter by card_type_code, which should be 'debit'.", "Use the COUNT() function to count the number of debit cards that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS debit_card_count FROM Customers_Cards WHERE card_type_code = 'debit';", "gold_sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  'Debit'", "source_tables": ["customers_cards"]}
{"sample_id": 708, "db_id": "customers_card_transactions", "question": "Count the number of customer cards of the type Debit.", "rationale": ["Identify the relevant table: Customers_Cards contains information about customer cards.", "Determine the specific requirement: We need to count the number of cards of type 'Debit'.", "Identify the column that indicates the type of card: card_type_code is the relevant column.", "Construct the SQL query to count the number of entries in the Customers_Cards table where card_type_code is 'Debit'."], "pred_sql": "SELECT COUNT(*) AS debit_card_count FROM Customers_Cards WHERE card_type_code = 'Debit';", "gold_sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  'Debit'", "source_tables": ["customers_cards"]}
{"sample_id": 709, "db_id": "customers_card_transactions", "question": "How many credit cards does customer Blanche Huels have?", "rationale": ["Identify the customer by their first and last name, 'Blanche Huels'.", "Use a subquery to find the 'customer_id' associated with 'Blanche Huels' from the 'Customers' table.", "Count the number of credit cards associated with that 'customer_id' in the 'Customers_Cards' table."], "pred_sql": "SELECT COUNT(*) AS credit_card_count FROM Customers_Cards WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Blanche' AND customer_last_name = 'Huels');", "gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Blanche' AND T2.customer_last_name  =  'Huels' AND T1.card_type_code  =  'Credit'", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 710, "db_id": "customers_card_transactions", "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.", "rationale": ["Identify the tables involved: We need to count credit cards, so we will use the Customers_Cards table and join it with the Customers table to filter by customer name.", "Determine the join condition: The Customers_Cards table has a foreign key 'customer_id' that links to the 'customer_id' in the Customers table.", "Specify the filtering criteria: We need to filter the customers by first name 'Blanche' and last name 'Huels'.", "Count the number of credit cards: We will use the COUNT() function to count the number of records in the Customers_Cards table that match the specified customer."], "pred_sql": "SELECT COUNT(*) AS credit_card_count\nFROM Customers_Cards cc\nJOIN Customers c ON cc.customer_id = c.customer_id\nWHERE c.customer_first_name = 'Blanche' AND c.customer_last_name = 'Huels';", "gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Blanche' AND T2.customer_last_name  =  'Huels' AND T1.card_type_code  =  'Credit'", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 711, "db_id": "customers_card_transactions", "question": "Show all customer ids and the number of cards owned by each customer.", "rationale": ["Identify the relevant table: Customers_Cards contains the card information linked to customers.", "Select the customer_id and count the number of card_id for each customer.", "Use the COUNT() function to count the number of cards for each customer.", "Group the results by customer_id to get the count for each individual customer."], "pred_sql": "SELECT customer_id, COUNT(card_id) AS number_of_cards\nFROM Customers_Cards\nGROUP BY customer_id;", "gold_sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "source_tables": ["customers_cards"]}
{"sample_id": 712, "db_id": "customers_card_transactions", "question": "What are the different customer ids, and how many cards does each one hold?", "rationale": ["Identify the relevant table: We need to find information about customers and their cards, so we will use the Customers_Cards table.", "Select the customer_id: We want to retrieve the unique customer identifiers.", "Count the number of cards: We need to count how many cards each customer holds, which can be done using the COUNT() function.", "Group the results by customer_id: To get the count of cards for each customer, we will group the results by customer_id."], "pred_sql": "SELECT customer_id, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY customer_id;", "gold_sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "source_tables": ["customers_cards"]}
{"sample_id": 713, "db_id": "customers_card_transactions", "question": "What is the customer id with most number of cards, and how many does he have?", "rationale": ["Identify the table that contains the card information, which is the Customers_Cards table.", "We need to count the number of cards for each customer, so we will use the COUNT() function on the card_id column.", "To group the results by customer, we will use the GROUP BY clause on the customer_id column.", "To find the customer with the most cards, we will order the results in descending order based on the count of cards using ORDER BY card_count DESC.", "Finally, we will limit the results to only the top entry using LIMIT 1."], "pred_sql": "SELECT customer_id, COUNT(card_id) AS card_count\nFROM Customers_Cards\nGROUP BY customer_id\nORDER BY card_count DESC\nLIMIT 1;", "gold_sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers_cards"]}
{"sample_id": 714, "db_id": "customers_card_transactions", "question": "Return the id of the customer who has the most cards, as well as the number of cards.", "rationale": ["Identify the relevant table: Customers_Cards contains the card information linked to customers.", "We need to count the number of cards for each customer, so we will use the COUNT() function.", "Group the results by customer_id to get the count of cards per customer using GROUP BY.", "To find the customer with the most cards, we will order the results in descending order based on the count of cards using ORDER BY.", "Finally, we will limit the results to only the top entry using LIMIT 1 to get the customer with the most cards."], "pred_sql": "SELECT customer_id, COUNT(card_id) AS number_of_cards\nFROM Customers_Cards\nGROUP BY customer_id\nORDER BY number_of_cards DESC\nLIMIT 1;", "gold_sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers_cards"]}
{"sample_id": 715, "db_id": "customers_card_transactions", "question": "Show id, first and last names for all customers with at least two cards.", "rationale": ["Identify the tables needed: Customers and Customers_Cards.", "We need to retrieve customer IDs, first names, and last names, so we will select these columns from the Customers table.", "To find customers with at least two cards, we will join the Customers table with the Customers_Cards table on the customer_id column.", "We will group the results by customer_id to aggregate the number of cards each customer has.", "Using the HAVING clause, we will filter the groups to include only those with a count of card_id greater than or equal to 2."], "pred_sql": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name \nFROM Customers c \nJOIN Customers_Cards cc ON c.customer_id = cc.customer_id \nGROUP BY c.customer_id \nHAVING COUNT(cc.card_id) >= 2;", "gold_sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 716, "db_id": "customers_card_transactions", "question": "What are the ids and full names of customers who hold two or more cards?", "rationale": ["Identify the relevant tables: Customers and Customers_Cards.", "We need to retrieve customer IDs and their full names, which requires joining the Customers table with the Customers_Cards table on the customer_id.", "To get the full name, we will concatenate the customer_first_name and customer_last_name from the Customers table.", "We need to group the results by customer_id to count the number of cards each customer holds.", "Use the HAVING clause to filter customers who hold two or more cards by counting the card_id from the Customers_Cards table."], "pred_sql": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Customers_Cards cc ON c.customer_id = cc.customer_id\nGROUP BY c.customer_id\nHAVING COUNT(cc.card_id) >= 2;", "gold_sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 717, "db_id": "customers_card_transactions", "question": "What is the customer id, first and last name with least number of accounts.", "rationale": ["Identify the relevant tables: Customers and Accounts are needed to get customer details and their associated accounts.", "Join the Customers table with the Accounts table on the customer_id to link customers with their accounts.", "Group the results by customer_id to count the number of accounts each customer has.", "Order the results by the count of accounts in ascending order to find the customer with the least number of accounts.", "Limit the results to 1 to get only the customer with the least number of accounts."], "pred_sql": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name \nFROM Customers c \nLEFT JOIN Accounts a ON c.customer_id = a.customer_id \nGROUP BY c.customer_id \nORDER BY COUNT(a.account_id) ASC \nLIMIT 1;", "gold_sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 718, "db_id": "customers_card_transactions", "question": "Return the id and full name of the customer who has the fewest accounts.", "rationale": ["Identify the relevant tables: Customers and Accounts.", "We need to join these tables on the customer_id to link customers with their accounts.", "Group the results by customer_id to count the number of accounts each customer has.", "Order the results by the count of accounts in ascending order to find the customer with the fewest accounts.", "Limit the results to 1 to get only the customer with the fewest accounts."], "pred_sql": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(a.account_id) ASC\nLIMIT 1;", "gold_sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 719, "db_id": "customers_card_transactions", "question": "Show all card type codes and the number of cards in each type.", "rationale": ["Identify the relevant table: The query requires information about card types and their counts, which is found in the Customers_Cards table.", "Select the necessary columns: We need to select 'card_type_code' and count the number of 'card_id' for each type.", "Use the COUNT() function: To get the number of cards for each type, we will use the COUNT() function on 'card_id'.", "Group the results: To aggregate the counts by card type, we will use the GROUP BY clause on 'card_type_code'.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT card_type_code, COUNT(card_id) AS number_of_cards\nFROM Customers_Cards\nGROUP BY card_type_code;", "gold_sql": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "source_tables": ["customers_cards"]}
{"sample_id": 720, "db_id": "customers_card_transactions", "question": "What are the different card types, and how many cards are there of each?", "rationale": ["Identify the relevant table: The query requires information about card types and their counts, which can be found in the Customers_Cards table.", "Select the necessary columns: We need to select the card_type_code to identify different card types and count the number of cards for each type.", "Use the COUNT function: To get the number of cards for each card type, we will use the COUNT function on the card_id column.", "Group the results: To get the count of cards for each card type, we will group the results by card_type_code."], "pred_sql": "SELECT card_type_code, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY card_type_code;", "gold_sql": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "source_tables": ["customers_cards"]}
{"sample_id": 721, "db_id": "customers_card_transactions", "question": "What is the card type code with most number of cards?", "rationale": ["Identify the relevant table: The query is asking about card type codes, which are found in the Customers_Cards table.", "Count the number of cards for each card type code: We need to group the results by card_type_code and count the number of card_id entries for each type.", "Sort the results: To find the card type code with the most cards, we will order the results by the count of cards in descending order.", "Limit the results: Since we only want the card type code with the most cards, we will limit the results to 1."], "pred_sql": "SELECT card_type_code, COUNT(card_id) AS card_count \nFROM Customers_Cards \nGROUP BY card_type_code \nORDER BY card_count DESC \nLIMIT 1;", "gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers_cards"]}
{"sample_id": 722, "db_id": "customers_card_transactions", "question": "Return the code of the card type that is most common.", "rationale": ["Identify the table that contains the card type information, which is the Customers_Cards table.", "We need to count the occurrences of each card type, so we will use the COUNT() function on the card_type_code column.", "To group the results by card type, we will use the GROUP BY clause on the card_type_code column.", "To find the most common card type, we will order the results in descending order based on the count of card types using ORDER BY type_count DESC.", "Finally, we will limit the results to only the top entry using LIMIT 1 to get the most common card type."], "pred_sql": "SELECT card_type_code, COUNT(card_type_code) AS type_count\nFROM Customers_Cards\nGROUP BY card_type_code\nORDER BY type_count DESC\nLIMIT 1;", "gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers_cards"]}
{"sample_id": 723, "db_id": "customers_card_transactions", "question": "Show card type codes with at least 5 cards.", "rationale": ["Identify the relevant table: Customers_Cards contains the card type codes and card IDs.", "We need to group the results by card_type_code to count the number of cards for each type.", "Use the COUNT function to count the number of card_id entries for each card_type_code.", "Apply the HAVING clause to filter the groups, ensuring we only include those with a count of at least 5."], "pred_sql": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING COUNT(card_id) >= 5;", "gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "source_tables": ["customers_cards"]}
{"sample_id": 724, "db_id": "customers_card_transactions", "question": "What are the codes of card types that have 5 or more cards?", "rationale": ["Identify the relevant table: Customers_Cards contains the card type codes and card IDs.", "We need to count the number of cards for each card type code.", "Use GROUP BY to group the results by card_type_code.", "Use HAVING to filter the groups to only include those with 5 or more cards."], "pred_sql": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING COUNT(card_id) >= 5;", "gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "source_tables": ["customers_cards"]}
{"sample_id": 725, "db_id": "customers_card_transactions", "question": "Show all card type codes and the number of customers holding cards in each type.", "rationale": ["Identify the relevant table: The query requires information about card types and the number of customers holding those cards, which can be found in the Customers_Cards table.", "Select the necessary columns: We need to select 'card_type_code' and count the distinct 'customer_id' to get the number of customers for each card type.", "Use COUNT and GROUP BY: To count the number of unique customers for each card type, we will use the COUNT function along with GROUP BY on 'card_type_code'."], "pred_sql": "SELECT card_type_code, COUNT(DISTINCT customer_id) AS number_of_customers\nFROM Customers_Cards\nGROUP BY card_type_code;", "gold_sql": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "source_tables": ["customers_cards"]}
{"sample_id": 726, "db_id": "customers_card_transactions", "question": "What are the different card type codes, and how many different customers hold each type?", "rationale": ["Identify the relevant table: The query is asking about card type codes and customers, which relates to the Customers_Cards table.", "Select the necessary columns: We need to select 'card_type_code' and count the distinct 'customer_id' to find out how many different customers hold each type.", "Use COUNT(DISTINCT customer_id): This function will count the unique customers for each card type code.", "Group the results: To get the count of customers for each card type, we need to group the results by 'card_type_code'.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT card_type_code, COUNT(DISTINCT customer_id) AS customer_count \nFROM Customers_Cards \nGROUP BY card_type_code;", "gold_sql": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "source_tables": ["customers_cards"]}
{"sample_id": 727, "db_id": "customers_card_transactions", "question": "Show the customer ids and firstname without a credit card.", "rationale": ["Identify the relevant tables: Customers and Customers_Cards.", "We need to select customer IDs and first names from the Customers table.", "To find customers without a credit card, we will perform a LEFT JOIN between Customers and Customers_Cards on customer_id.", "We will filter the results to include only those customers where the card_id in Customers_Cards is NULL, indicating they do not have a credit card.", "We will also ensure to select distinct results to avoid duplicates."], "pred_sql": "SELECT DISTINCT c.customer_id, c.customer_first_name \nFROM Customers c \nLEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' \nWHERE cc.card_id IS NULL;", "gold_sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  'Credit'", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 728, "db_id": "customers_card_transactions", "question": "What are the ids and first names of customers who do not hold a credit card?", "rationale": ["Identify the relevant tables: Customers and Customers_Cards.", "We need to find customers who do not hold a credit card, so we will focus on the Customers table and filter based on the Customers_Cards table.", "The Customers_Cards table contains a 'card_type_code' that indicates the type of card. We will filter for 'credit' cards.", "We will use a subquery to select customer_ids from Customers_Cards where the card_type_code is 'credit'.", "The main query will select customer_id and customer_first_name from the Customers table where the customer_id is not in the list of customer_ids returned by the subquery."], "pred_sql": "SELECT Customers.customer_id, Customers.customer_first_name \nFROM Customers \nWHERE Customers.customer_id NOT IN (\n    SELECT Customers_Cards.customer_id \n    FROM Customers_Cards \n    WHERE Customers_Cards.card_type_code = 'credit'\n);", "gold_sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  'Credit'", "source_tables": ["customers", "customers_cards"]}
{"sample_id": 729, "db_id": "customers_card_transactions", "question": "Show all card type codes.", "rationale": ["Identify the table that contains card type codes, which is the Customers_Cards table.", "Formulate a SELECT statement to retrieve the card_type_code column from the Customers_Cards table."], "pred_sql": "SELECT card_type_code FROM Customers_Cards;", "gold_sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "source_tables": ["customers_cards"]}
{"sample_id": 730, "db_id": "customers_card_transactions", "question": "What are the different card type codes?", "rationale": ["Identify the table that contains card type codes, which is 'Customers_Cards'.", "Determine the column that holds the card type codes, which is 'card_type_code'.", "To get the different card type codes, use the DISTINCT keyword to ensure unique values are returned.", "Construct the SQL query to select distinct card type codes from the Customers_Cards table."], "pred_sql": "SELECT DISTINCT card_type_code FROM Customers_Cards;", "gold_sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "source_tables": ["customers_cards"]}
{"sample_id": 731, "db_id": "customers_card_transactions", "question": "Show the number of card types.", "rationale": ["Identify the requirement: We need to count the number of distinct card types.", "Determine the relevant table: The 'Customers_Cards' table contains the 'card_type_code' which represents the type of card.", "Use the COUNT function to count distinct values: We will use COUNT(DISTINCT card_type_code) to get the number of unique card types.", "Construct the SQL query: The final SQL query will select the count of distinct card types from the Customers_Cards table."], "pred_sql": "SELECT COUNT(DISTINCT card_type_code) AS number_of_card_types FROM Customers_Cards;", "gold_sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "source_tables": ["customers_cards"]}
{"sample_id": 732, "db_id": "customers_card_transactions", "question": "How many different card types are there?", "rationale": ["Identify the table that contains card type information, which is the Customers_Cards table.", "To find the number of different card types, we need to count distinct values in the card_type_code column.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique card types."], "pred_sql": "SELECT COUNT(DISTINCT card_type_code) AS different_card_types FROM Customers_Cards;", "gold_sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "source_tables": ["customers_cards"]}
{"sample_id": 733, "db_id": "customers_card_transactions", "question": "Show all transaction types.", "rationale": ["Identify the table that contains transaction types, which is the Financial_Transactions table.", "To show all transaction types, we need to select the transaction_type column from the Financial_Transactions table.", "Since we want to avoid duplicates in the results, we will use the DISTINCT keyword to ensure each transaction type is listed only once."], "pred_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions;", "gold_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"]}
{"sample_id": 734, "db_id": "customers_card_transactions", "question": "What are the different types of transactions?", "rationale": ["Identify the table that contains transaction types, which is the Financial_Transactions table.", "To find the different types of transactions, we need to select the 'transaction_type' column from the Financial_Transactions table.", "Since we want to know the different types, we will use the DISTINCT keyword to ensure that each type is listed only once."], "pred_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions;", "gold_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"]}
{"sample_id": 735, "db_id": "customers_card_transactions", "question": "Show the number of transaction types.", "rationale": ["Identify the relevant table: The query requires information about transaction types, which are stored in the Financial_Transactions table.", "Determine the required columns: We need to select the transaction_type and count the occurrences of each type.", "Use the COUNT() function: This function will help us count the number of transactions for each type.", "Group the results: To get the count for each transaction type, we will use the GROUP BY clause on the transaction_type column."], "pred_sql": "SELECT transaction_type, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY transaction_type;", "gold_sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "source_tables": ["financial_transactions"]}
{"sample_id": 736, "db_id": "customers_card_transactions", "question": "How many different types of transactions are there?", "rationale": ["Identify the table that contains transaction types, which is the Financial_Transactions table.", "To find the number of different types of transactions, we need to count distinct values in the transaction_type column.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique transaction types."], "pred_sql": "SELECT COUNT(DISTINCT transaction_type) AS different_transaction_types FROM Financial_Transactions;", "gold_sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "source_tables": ["financial_transactions"]}
{"sample_id": 737, "db_id": "customers_card_transactions", "question": "What is the average and total transaction amount?", "rationale": ["Identify the required calculations: average and total of transaction amounts.", "Determine the relevant table: Financial_Transactions contains the transaction amounts.", "Use the AVG() function to calculate the average transaction amount.", "Use the SUM() function to calculate the total transaction amount.", "Construct the SQL query to select both the average and total transaction amounts from the Financial_Transactions table."], "pred_sql": "SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions;", "gold_sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}
{"sample_id": 738, "db_id": "customers_card_transactions", "question": "Return the average transaction amount, as well as the total amount of all transactions.", "rationale": ["Identify the required calculations: average and total of transaction amounts.", "Determine the relevant table: Financial_Transactions contains the transaction amounts.", "Use the AVG() function to calculate the average transaction amount.", "Use the SUM() function to calculate the total transaction amount.", "Construct the SQL query to select both the average and total transaction amounts from the Financial_Transactions table."], "pred_sql": "SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions;", "gold_sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}
{"sample_id": 739, "db_id": "customers_card_transactions", "question": "Show the card type codes and the number of transactions.", "rationale": ["Identify the relevant tables: Customers_Cards for card type codes and Financial_Transactions for transaction details.", "We need to count the number of transactions for each card type code, so we will use a COUNT function on the transaction_id from Financial_Transactions.", "To link the two tables, we will use a LEFT JOIN on the card_id, which is the common field between Customers_Cards and Financial_Transactions.", "We will group the results by card_type_code to get the count of transactions for each type of card.", "The final SQL query will select the card_type_code and the count of transactions, using appropriate SQL syntax."], "pred_sql": "SELECT cc.card_type_code, COUNT(ft.transaction_id) AS transaction_count\nFROM Customers_Cards cc\nLEFT JOIN Financial_Transactions ft ON cc.card_id = ft.card_id\nGROUP BY cc.card_type_code;", "gold_sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "source_tables": ["customers_cards", "financial_transactions"]}
{"sample_id": 740, "db_id": "customers_card_transactions", "question": "What are the different card types, and how many transactions have been made with each?", "rationale": ["Identify the relevant tables: Customers_Cards for card types and Financial_Transactions for transactions.", "We need to count the number of transactions for each card type, so we will use a COUNT function on the transaction_id from Financial_Transactions.", "To link the card types to their transactions, we will perform a LEFT JOIN between Customers_Cards and Financial_Transactions on the card_id.", "We will group the results by card_type_code to get the count of transactions for each card type."], "pred_sql": "SELECT cc.card_type_code, COUNT(ft.transaction_id) AS transaction_count\nFROM Customers_Cards cc\nLEFT JOIN Financial_Transactions ft ON cc.card_id = ft.card_id\nGROUP BY cc.card_type_code;", "gold_sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "source_tables": ["customers_cards", "financial_transactions"]}
{"sample_id": 741, "db_id": "customers_card_transactions", "question": "Show the transaction type and the number of transactions.", "rationale": ["Identify the required columns: transaction_type and the count of transactions.", "Use the COUNT() function to count the number of transactions for each type.", "Group the results by transaction_type to get the count for each type of transaction."], "pred_sql": "SELECT transaction_type, COUNT(*) AS number_of_transactions FROM Financial_Transactions GROUP BY transaction_type;", "gold_sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"]}
{"sample_id": 742, "db_id": "customers_card_transactions", "question": "What are the different transaction types, and how many transactions of each have taken place?", "rationale": ["Identify the relevant table: The query is asking about transaction types and their counts, which relates to the Financial_Transactions table.", "Select the necessary columns: We need to select the 'transaction_type' and count the number of transactions for each type.", "Use the COUNT() function: To count the number of transactions for each type, we will use the COUNT() function.", "Group the results: To get the count for each transaction type, we will use the GROUP BY clause on 'transaction_type'."], "pred_sql": "SELECT transaction_type, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY transaction_type;", "gold_sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"]}
{"sample_id": 743, "db_id": "customers_card_transactions", "question": "What is the transaction type that has processed the greatest total amount in transactions?", "rationale": ["Identify the relevant table: Financial_Transactions contains the transaction details including transaction type and amount.", "We need to calculate the total amount for each transaction type, so we will use the SUM function on the transaction_amount column.", "To group the results by transaction type, we will use the GROUP BY clause on the transaction_type column.", "To find the transaction type with the greatest total amount, we will order the results in descending order using ORDER BY total_amount DESC.", "Finally, we will limit the results to only the top entry using LIMIT 1."], "pred_sql": "SELECT transaction_type, SUM(transaction_amount) AS total_amount\nFROM Financial_Transactions\nGROUP BY transaction_type\nORDER BY total_amount DESC\nLIMIT 1;", "gold_sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "source_tables": ["financial_transactions"]}
{"sample_id": 744, "db_id": "customers_card_transactions", "question": "Return the type of transaction with the highest total amount.", "rationale": ["Identify the relevant table: Financial_Transactions, as it contains the transaction_type and transaction_amount columns.", "Group the results by transaction_type to aggregate the total amounts for each type of transaction.", "Use the SUM function to calculate the total amount for each transaction type.", "Order the results in descending order based on the total amount to find the highest.", "Limit the results to 1 to get only the transaction type with the highest total amount."], "pred_sql": "SELECT transaction_type FROM Financial_Transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1;", "gold_sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "source_tables": ["financial_transactions"]}
{"sample_id": 745, "db_id": "customers_card_transactions", "question": "Show the account id and the number of transactions for each account", "rationale": ["Identify the columns needed: account_id from Accounts and the count of transactions from Financial_Transactions.", "To count the number of transactions per account, a JOIN between Accounts and Financial_Transactions is necessary based on the account_id.", "Use LEFT JOIN to ensure all accounts are included, even those with zero transactions.", "Use COUNT() function to count the number of transaction_id entries for each account.", "Group the results by account_id to get the count for each individual account."], "pred_sql": "SELECT Accounts.account_id, COUNT(Financial_Transactions.transaction_id) AS transaction_count\nFROM Accounts\nLEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id\nGROUP BY Accounts.account_id;", "gold_sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "source_tables": ["financial_transactions"]}
{"sample_id": 746, "db_id": "customers_card_transactions", "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?", "rationale": ["Identify the relevant table: Financial_Transactions contains the account_id and transaction_id.", "We need to count the number of transactions for each account_id, so we will use the COUNT() function.", "To get distinct account_ids that have made transactions, we will group the results by account_id using GROUP BY.", "The final SQL query will select the account_id and the count of transactions for each account_id."], "pred_sql": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id;", "gold_sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "source_tables": ["financial_transactions"]}
{"sample_id": 747, "db_id": "race_track", "question": "How many tracks do we have?", "rationale": ["The user wants to know the total number of tracks available in the database.", "To get the count of records in the 'track' table, we will use the COUNT() function.", "The SQL query will select the count of all entries in the 'track' table and label it as 'total_tracks'."], "pred_sql": "SELECT COUNT(*) AS total_tracks FROM track;", "gold_sql": "SELECT count(*) FROM track", "source_tables": ["track"]}
{"sample_id": 748, "db_id": "race_track", "question": "Count the number of tracks.", "rationale": ["Identify the requirement to count the number of tracks.", "Determine the relevant table, which is 'track'.", "Use the COUNT() function to count the total number of entries in the 'track' table.", "Construct the SQL query to select the count from the 'track' table."], "pred_sql": "SELECT COUNT(*) AS track_count FROM track;", "gold_sql": "SELECT count(*) FROM track", "source_tables": ["track"]}
{"sample_id": 749, "db_id": "race_track", "question": "Show the name and location for all tracks.", "rationale": ["Identify the required information: the name and location of tracks.", "Determine the relevant table: the 'track' table contains the necessary columns.", "Construct the SQL SELECT statement to retrieve the 'Name' and 'Location' columns from the 'track' table."], "pred_sql": "SELECT Name, Location FROM track;", "gold_sql": "SELECT name ,  LOCATION FROM track", "source_tables": ["track"]}
{"sample_id": 750, "db_id": "race_track", "question": "What are the names and locations of all tracks?", "rationale": ["Identify the required information: names and locations of tracks.", "Determine the relevant table: 'track' contains the necessary information.", "Construct the SQL SELECT statement to retrieve 'Name' and 'Location' from the 'track' table."], "pred_sql": "SELECT Name, Location FROM track;", "gold_sql": "SELECT name ,  LOCATION FROM track", "source_tables": ["track"]}
{"sample_id": 751, "db_id": "race_track", "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.", "rationale": ["Identify the relevant table: The query requires information about tracks, so we will use the 'track' table.", "Determine the columns to select: The user wants to see the 'Name' and 'Seating' of the tracks.", "Apply the condition: We need to filter tracks that were opened after the year 2000, which involves using the 'Year_Opened' column.", "Order the results: The user requested the results to be ordered by 'Seating', so we will include an ORDER BY clause for the 'Seating' column."], "pred_sql": "SELECT Name, Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating;", "gold_sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "source_tables": ["track"]}
{"sample_id": 752, "db_id": "race_track", "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "rationale": ["Identify the table needed: We need data from the 'track' table since we are interested in track names and seating.", "Select the required columns: We need 'Name' and 'Seating' from the 'track' table.", "Apply the condition: We want tracks that were opened after the year 2000, so we use the condition 'Year_Opened > 2000'.", "Order the results: The results should be ordered by the 'Seating' column, so we use 'ORDER BY Seating'.", "Combine all parts into a complete SQL query."], "pred_sql": "SELECT Name, Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating;", "gold_sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "source_tables": ["track"]}
{"sample_id": 753, "db_id": "race_track", "question": "What is the name, location and seating for the most recently opened track?", "rationale": ["Identify the columns needed: Name, Location, and Seating from the track table.", "Determine the criteria for 'most recently opened track', which is based on the Year_Opened column.", "To find the most recently opened track, we need to sort the records in descending order by Year_Opened.", "Limit the results to 1 to get only the most recent track."], "pred_sql": "SELECT Name, Location, Seating FROM track ORDER BY Year_Opened DESC LIMIT 1;", "gold_sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "source_tables": ["track"]}
{"sample_id": 754, "db_id": "race_track", "question": "Return the name, location, and seating of the track that was opened in the most recent year.", "rationale": ["Identify the columns needed: Name, Location, and Seating from the track table.", "Determine the condition: we need tracks that were opened in the most recent year.", "To find the most recent year, we can use a subquery to select the maximum Year_Opened from the track table.", "Combine the selection of columns and the condition to form the SQL query."], "pred_sql": "SELECT Name, Location, Seating FROM track WHERE Year_Opened = (SELECT MAX(Year_Opened) FROM track);", "gold_sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "source_tables": ["track"]}
{"sample_id": 755, "db_id": "race_track", "question": "What is the minimum, maximum, and average seating for all tracks.", "rationale": ["Identify the required information: minimum, maximum, and average seating for all tracks.", "Determine the relevant table: the 'track' table contains the 'Seating' column.", "Use aggregate functions: MIN(), MAX(), and AVG() to calculate the required values.", "Construct the SQL query to select the minimum, maximum, and average seating from the 'track' table."], "pred_sql": "SELECT MIN(Seating) AS Min_Seating, MAX(Seating) AS Max_Seating, AVG(Seating) AS Avg_Seating FROM track;", "gold_sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "source_tables": ["track"]}
{"sample_id": 756, "db_id": "race_track", "question": "Return the minimum, maximum, and average seating across all tracks.", "rationale": ["Identify the required information: minimum, maximum, and average seating across all tracks.", "Determine the relevant table: the 'track' table contains the 'Seating' column.", "Use aggregate functions: MIN(), MAX(), and AVG() to calculate the required values.", "Construct the SQL query to select the minimum, maximum, and average seating from the 'track' table."], "pred_sql": "SELECT MIN(Seating) AS Min_Seating, MAX(Seating) AS Max_Seating, AVG(Seating) AS Avg_Seating FROM track;", "gold_sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "source_tables": ["track"]}
{"sample_id": 757, "db_id": "race_track", "question": "Show the name, location, open year for all tracks with a seating higher than the average.", "rationale": ["Identify the columns needed: Name, Location, and Year_Opened from the track table.", "Determine the condition: we need tracks with seating capacity higher than the average seating capacity.", "To find the average seating, a subquery is required: SELECT AVG(Seating) FROM track.", "Combine the selection of columns and the condition using a WHERE clause."], "pred_sql": "SELECT Name, Location, Year_Opened FROM track WHERE Seating > (SELECT AVG(Seating) FROM track);", "gold_sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "source_tables": ["track"]}
{"sample_id": 758, "db_id": "race_track", "question": "What are the names, locations, and years of opening for tracks with seating higher than average?", "rationale": ["Identify the columns needed: Name, Location, and Year_Opened from the track table.", "Determine the condition: we need tracks with seating higher than the average seating.", "To find the average seating, a subquery is required: SELECT AVG(Seating) FROM track.", "Combine the selection of columns and the condition using a WHERE clause."], "pred_sql": "SELECT track.Name, track.Location, track.Year_Opened \nFROM track \nWHERE track.Seating > (SELECT AVG(Seating) FROM track);", "gold_sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "source_tables": ["track"]}
{"sample_id": 759, "db_id": "race_track", "question": "What are distinct locations where tracks are located?", "rationale": ["Identify the table that contains the location information, which is the 'track' table.", "Determine the specific column that holds the location data, which is 'Location'.", "Since the user wants distinct locations, use the DISTINCT keyword to ensure that duplicate locations are not included in the results.", "Construct the SQL query to select distinct locations from the 'track' table."], "pred_sql": "SELECT DISTINCT Location FROM track;", "gold_sql": "SELECT DISTINCT LOCATION FROM track", "source_tables": ["track"]}
{"sample_id": 760, "db_id": "race_track", "question": "Give the different locations of tracks.", "rationale": ["The user wants to know the different locations of tracks.", "To get unique locations, we will use the SELECT statement with DISTINCT.", "We will select the 'Location' column from the 'track' table."], "pred_sql": "SELECT DISTINCT Location FROM track;", "gold_sql": "SELECT DISTINCT LOCATION FROM track", "source_tables": ["track"]}
{"sample_id": 761, "db_id": "race_track", "question": "How many races are there?", "rationale": ["The user wants to know the total number of races.", "To get the count of races, we need to use the COUNT() function in SQL.", "We will select from the 'race' table since it contains the race information.", "The SQL query will be 'SELECT COUNT(*) AS total_races FROM race;' to count all entries in the race table."], "pred_sql": "SELECT COUNT(*) AS total_races FROM race;", "gold_sql": "SELECT count(*) FROM race", "source_tables": ["race"]}
{"sample_id": 762, "db_id": "race_track", "question": "Count the number of races.", "rationale": ["Identify the requirement to count the number of races.", "Determine the relevant table, which is 'race'.", "Use the COUNT() function to count all entries in the 'race' table.", "Construct the SQL query to select the count from the 'race' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfRaces FROM race;", "gold_sql": "SELECT count(*) FROM race", "source_tables": ["race"]}
{"sample_id": 763, "db_id": "race_track", "question": "What are the distinct classes that races can have?", "rationale": ["Identify the table that contains the information about race classifications, which is the 'race' table.", "To find the distinct classes of races, we need to use the SELECT statement to retrieve data from the 'Class' column.", "Using the DISTINCT keyword will ensure that we only get unique values from the 'Class' column.", "Construct the SQL query as 'SELECT DISTINCT Class FROM race;' to get the desired result."], "pred_sql": "SELECT DISTINCT Class FROM race;", "gold_sql": "SELECT DISTINCT CLASS FROM race", "source_tables": ["race"]}
{"sample_id": 764, "db_id": "race_track", "question": "Return the different classes of races.", "rationale": ["Identify the table that contains the information about race classes, which is the 'race' table.", "To get the different classes of races, we need to select the 'Class' column from the 'race' table.", "Since we want only unique classes, we will use the DISTINCT keyword to eliminate duplicates.", "Construct the SQL query: SELECT DISTINCT Class FROM race."], "pred_sql": "SELECT DISTINCT Class FROM race;", "gold_sql": "SELECT DISTINCT CLASS FROM race", "source_tables": ["race"]}
{"sample_id": 765, "db_id": "race_track", "question": "Show name, class, and date for all races.", "rationale": ["Identify the columns needed: Name, Class, and Date from the race table.", "Determine the table to query: the race table contains the required information.", "Construct the SQL SELECT statement to retrieve the specified columns from the race table."], "pred_sql": "SELECT Name, Class, Date FROM race;", "gold_sql": "SELECT name ,  CLASS ,  date FROM race", "source_tables": ["race"]}
{"sample_id": 766, "db_id": "race_track", "question": "What are the names, classes, and dates for all races?", "rationale": ["Identify the required columns: Name, Class, and Date from the race table.", "Use the SELECT statement to specify the columns to retrieve.", "Use the FROM clause to indicate the table from which to retrieve the data, which is the race table."], "pred_sql": "SELECT Name, Class, Date FROM race;", "gold_sql": "SELECT name ,  CLASS ,  date FROM race", "source_tables": ["race"]}
{"sample_id": 767, "db_id": "race_track", "question": "Show the race class and number of races in each class.", "rationale": ["Identify the columns needed: We need the 'Class' from the 'race' table and a count of races in each class.", "Use the COUNT() function to count the number of races for each class.", "Group the results by 'Class' to get the count for each distinct class.", "Construct the SQL query using SELECT, COUNT(), and GROUP BY clauses."], "pred_sql": "SELECT Class, COUNT(*) AS Number_of_Races FROM race GROUP BY Class;", "gold_sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "source_tables": ["race"]}
{"sample_id": 768, "db_id": "race_track", "question": "What are the different classes of races, and how many races correspond to each?", "rationale": ["Identify the relevant table: The 'race' table contains the 'Class' column and the races.", "Determine the required information: We need to find distinct classes of races and count how many races belong to each class.", "Use the COUNT() function to count the number of races for each class.", "Group the results by the 'Class' column to get the count for each distinct class.", "Construct the SQL query using SELECT, COUNT(), and GROUP BY clauses."], "pred_sql": "SELECT Class, COUNT(*) AS Race_Count FROM race GROUP BY Class;", "gold_sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "source_tables": ["race"]}
{"sample_id": 769, "db_id": "race_track", "question": "What is the race class with most number of races.", "rationale": ["Identify the relevant table: The 'race' table contains the 'Class' column and is where the races are recorded.", "Count the number of races for each class: Use the COUNT() function to count the number of entries for each class.", "Group the results by class: Use GROUP BY to aggregate the counts for each unique class.", "Order the results: Use ORDER BY to sort the classes by the count of races in descending order.", "Limit the results to the top class: Use LIMIT 1 to get only the class with the most races."], "pred_sql": "SELECT Class, COUNT(*) as Race_Count FROM race GROUP BY Class ORDER BY Race_Count DESC LIMIT 1;", "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "source_tables": ["race"]}
{"sample_id": 770, "db_id": "race_track", "question": "Give the class of races that is most common.", "rationale": ["Identify the column of interest: 'Class' from the 'race' table.", "To find the most common class, we need to count the occurrences of each class.", "Use the COUNT() function to count the number of races for each class.", "Group the results by 'Class' to aggregate the counts for each class.", "Order the results in descending order based on the count to get the most common class at the top.", "Limit the results to 1 to get only the most common class."], "pred_sql": "SELECT Class, COUNT(*) as Count FROM race GROUP BY Class ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "source_tables": ["race"]}
{"sample_id": 771, "db_id": "race_track", "question": "List the race class with at least two races.", "rationale": ["Identify the relevant table: The 'race' table contains the information about race classes and the number of races.", "Determine the required output: We need to list the race classes that have at least two races.", "Use the GROUP BY clause: This will allow us to group the results by the 'Class' column.", "Use the COUNT function: This will help us count the number of races in each class.", "Use the HAVING clause: This will filter the grouped results to only include classes with a count of two or more races."], "pred_sql": "SELECT Class FROM race GROUP BY Class HAVING COUNT(Race_ID) >= 2;", "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "source_tables": ["race"]}
{"sample_id": 772, "db_id": "race_track", "question": "What are the classes of races that have two or more corresponding races?", "rationale": ["Identify the relevant table: The 'race' table contains the information about race classes.", "Determine the required information: We need to find the classes of races that have two or more corresponding races.", "Use the GROUP BY clause: This will allow us to group the results by the 'Class' column.", "Count the number of races in each class: We will use the COUNT function to count the number of Race_IDs for each class.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with a count of 2 or more."], "pred_sql": "SELECT Class FROM race GROUP BY Class HAVING COUNT(Race_ID) >= 2;", "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "source_tables": ["race"]}
{"sample_id": 773, "db_id": "race_track", "question": "What are the names for tracks without a race in class 'GT'.", "rationale": ["Identify the tables involved: We need data from the 'track' table and the 'race' table.", "Determine the relationship: The 'race' table has a foreign key 'Track_ID' that links to the 'track' table.", "We want tracks that do not have any races in the 'GT' class, which means we need to find tracks that do not have a corresponding entry in the 'race' table for that class.", "Use a LEFT JOIN to include all tracks and match them with races of class 'GT'.", "Filter the results to only include tracks where there is no matching race (i.e., where 'race.Race_ID' is NULL).", "Select the 'Name' of the tracks that meet the criteria."], "pred_sql": "SELECT track.Name FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID AND race.Class = 'GT' WHERE race.Race_ID IS NULL;", "gold_sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "source_tables": ["track", "race"]}
{"sample_id": 774, "db_id": "race_track", "question": "Give the names of tracks that do not have a race in the class 'GT'.", "rationale": ["We need to find tracks that do not have any races in the class 'GT'.", "To do this, we will use a LEFT JOIN between the 'track' table and the 'race' table on the 'Track_ID'.", "We will add a condition to the JOIN to only consider races that belong to the 'GT' class.", "After the JOIN, we will filter the results to find tracks where there are no corresponding races in the 'GT' class. This can be done by checking for NULL values in the 'Race_ID' column from the 'race' table.", "Finally, we will select the 'Name' of the tracks that meet this condition."], "pred_sql": "SELECT track.Name FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID AND race.Class = 'GT' WHERE race.Race_ID IS NULL;", "gold_sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "source_tables": ["track", "race"]}
{"sample_id": 775, "db_id": "race_track", "question": "Show all track names that have had no races.", "rationale": ["We need to find track names that have had no races.", "To do this, we will use a LEFT JOIN between the 'track' table and the 'race' table on the 'Track_ID' column.", "The LEFT JOIN will include all records from the 'track' table and the matching records from the 'race' table.", "If there are no matching records in the 'race' table, the result will contain NULL values for the 'race' columns.", "We can filter these results by checking where 'race.Race_ID' is NULL, which indicates that there were no races for that track."], "pred_sql": "SELECT track.Name FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID WHERE race.Race_ID IS NULL;", "gold_sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "source_tables": ["track", "race"]}
{"sample_id": 776, "db_id": "race_track", "question": "Return the names of tracks that have no had any races.", "rationale": ["We need to find tracks that have not hosted any races.", "To do this, we will use a LEFT JOIN between the 'track' table and the 'race' table on the 'Track_ID' column.", "The LEFT JOIN will include all records from the 'track' table and the matching records from the 'race' table. If there is no match, the result is NULL on the side of the 'race' table.", "We will filter the results to include only those tracks where 'Race_ID' from the 'race' table is NULL, indicating that no races have been held at those tracks.", "Finally, we will select the 'Name' column from the 'track' table to get the names of the tracks without any races."], "pred_sql": "SELECT track.Name FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID WHERE race.Race_ID IS NULL;", "gold_sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "source_tables": ["track", "race"]}
{"sample_id": 777, "db_id": "race_track", "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.", "rationale": ["Identify the relevant table: The query involves the 'track' table since it contains information about track seating and the year opened.", "Determine the conditions: We need to find tracks with seating capacity of at least 5000 and those with seating capacity of no more than 4000.", "Use the 'Year_Opened' column: We want to show the years when these tracks opened, so we will select the 'Year_Opened' column.", "Combine conditions using OR: Since we want tracks that meet either of the two seating conditions, we will use an OR clause in the WHERE statement.", "Select distinct years: To avoid duplicate years in the result, we will use DISTINCT in the SELECT statement."], "pred_sql": "SELECT DISTINCT Year_Opened FROM track WHERE Seating >= 5000 OR Seating <= 4000;", "gold_sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "source_tables": ["track"]}
{"sample_id": 778, "db_id": "race_track", "question": "What are the years of opening for tracks with seating between 4000 and 5000?", "rationale": ["Identify the relevant table: The query is asking about tracks, so we will focus on the 'track' table.", "Determine the columns needed: We need the 'Year_Opened' column to answer the question about the years of opening.", "Apply the condition: The query specifies a condition on the 'Seating' column, which must be between 4000 and 5000.", "Construct the SQL query: We will select 'Year_Opened' from the 'track' table where 'Seating' is between 4000 and 5000."], "pred_sql": "SELECT Year_Opened FROM track WHERE Seating BETWEEN 4000 AND 5000;", "gold_sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "source_tables": ["track"]}
{"sample_id": 779, "db_id": "race_track", "question": "Show the name of track and the number of races in each track.", "rationale": ["Identify the tables involved: We need data from both the 'track' and 'race' tables.", "Determine the columns to select: We want the 'Name' of the track from the 'track' table and a count of races from the 'race' table.", "Use COUNT() function: To get the number of races for each track, we will use the COUNT() function on 'Race_ID' from the 'race' table.", "Join the tables: Since 'race' has a foreign key 'Track_ID' that references 'track', we will perform a LEFT JOIN to include all tracks even if they have no races.", "Group the results: We will group the results by 'Track_ID' to ensure we get a count of races for each track."], "pred_sql": "SELECT track.Name, COUNT(race.Race_ID) AS Number_of_Races\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Track_ID;", "gold_sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "source_tables": ["track", "race"]}
{"sample_id": 780, "db_id": "race_track", "question": "What are the names of different tracks, and how many races has each had?", "rationale": ["Identify the tables involved: We need data from both the 'track' and 'race' tables.", "Determine the required columns: We need the 'Name' of the track from the 'track' table and a count of races from the 'race' table.", "Establish the relationship: The 'race' table has a foreign key 'Track_ID' that relates to the 'Track_ID' in the 'track' table.", "Use a LEFT JOIN to include all tracks even if they have no races: This ensures we get all track names regardless of whether they have races or not.", "Count the number of races for each track: Use COUNT() function to count 'Race_ID' from the 'race' table, grouping by track name to get the number of races per track."], "pred_sql": "SELECT track.Name, COUNT(race.Race_ID) AS Race_Count\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Name;", "gold_sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "source_tables": ["track", "race"]}
{"sample_id": 781, "db_id": "race_track", "question": "Show the name of track with most number of races.", "rationale": ["We need to find the track that has hosted the most races.", "To do this, we will join the 'track' table with the 'race' table on the 'Track_ID' column.", "We will group the results by 'Track_ID' to count the number of races for each track.", "We will use the COUNT function to count the number of races associated with each track.", "To find the track with the most races, we will order the results in descending order based on the count of races.", "Finally, we will limit the results to 1 to get only the track with the highest count."], "pred_sql": "SELECT track.Name FROM track JOIN race ON track.Track_ID = race.Track_ID GROUP BY track.Track_ID ORDER BY COUNT(race.Race_ID) DESC LIMIT 1;", "gold_sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["track", "race"]}
{"sample_id": 782, "db_id": "race_track", "question": "What is the name of the track that has had the greatest number of races?", "rationale": ["Identify the relevant tables: We need to use both the 'track' and 'race' tables to find the track with the most races.", "Join the tables: We will join the 'track' table with the 'race' table on the 'Track_ID' column since it is the foreign key linking the two tables.", "Group by track: We will group the results by 'Track_ID' to count the number of races associated with each track.", "Count the races: Use COUNT(race.Race_ID) to count the number of races for each track.", "Order the results: We will order the results in descending order based on the count of races to find the track with the greatest number of races.", "Limit the results: Since we only want the track with the greatest number of races, we will limit the results to 1."], "pred_sql": "SELECT track.Name\nFROM track\nJOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Track_ID\nORDER BY COUNT(race.Race_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["track", "race"]}
{"sample_id": 783, "db_id": "race_track", "question": "Show the name and date for each race and its track name.", "rationale": ["Identify the tables involved: 'race' and 'track'.", "Determine the columns needed: 'race.Name', 'race.Date', and 'track.Name'.", "Establish the relationship between the tables using the foreign key 'race.Track_ID' and 'track.Track_ID'.", "Construct the SQL SELECT statement to retrieve the required columns from both tables using a JOIN operation."], "pred_sql": "SELECT race.Name AS Race_Name, race.Date AS Race_Date, track.Name AS Track_Name FROM race JOIN track ON race.Track_ID = track.Track_ID;", "gold_sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "source_tables": ["track", "race"]}
{"sample_id": 784, "db_id": "race_track", "question": "What are the names and dates of races, and the names of the tracks where they are held?", "rationale": ["Identify the required information: names and dates of races, and names of the tracks.", "Determine the tables involved: 'race' for race details and 'track' for track details.", "Establish the relationship between the tables using the foreign key: race.Track_ID = track.Track_ID.", "Select the relevant columns: race.Name, race.Date, and track.Name.", "Use a JOIN clause to combine data from both tables based on the relationship established."], "pred_sql": "SELECT race.Name AS Race_Name, race.Date AS Race_Date, track.Name AS Track_Name FROM race JOIN track ON race.Track_ID = track.Track_ID;", "gold_sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "source_tables": ["track", "race"]}
{"sample_id": 785, "db_id": "race_track", "question": "Show the name and location of track with 1 race.", "rationale": ["Identify the columns needed: 'Name' and 'Location' from the 'track' table.", "We need to find tracks that have exactly 1 race associated with them.", "To do this, we will join the 'track' table with the 'race' table on the 'Track_ID' column.", "We will group the results by 'Track_ID' to aggregate the races for each track.", "Using the HAVING clause, we will filter the groups to include only those with a count of races equal to 1."], "pred_sql": "SELECT track.Name, track.Location FROM track JOIN race ON track.Track_ID = race.Track_ID GROUP BY track.Track_ID HAVING COUNT(race.Race_ID) = 1;", "gold_sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "source_tables": ["track", "race"]}
{"sample_id": 786, "db_id": "race_track", "question": "What are the names and locations of tracks that have had exactly 1 race?", "rationale": ["Identify the tables involved: We need data from both the 'track' and 'race' tables.", "Determine the required columns: We need the 'Name' and 'Location' from the 'track' table.", "Establish the relationship: We will join the 'track' table with the 'race' table using the 'Track_ID' foreign key.", "Group the results: We will group the results by 'Track_ID' to count the number of races per track.", "Filter the results: We will use the HAVING clause to filter tracks that have exactly 1 race."], "pred_sql": "SELECT track.Name, track.Location \nFROM track \nJOIN race ON track.Track_ID = race.Track_ID \nGROUP BY track.Track_ID \nHAVING COUNT(race.Race_ID) = 1;", "gold_sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "source_tables": ["track", "race"]}
{"sample_id": 787, "db_id": "race_track", "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "rationale": ["We need to find locations that have tracks with more than 90000 seats and also tracks with less than 70000 seats.", "To achieve this, we can use a self-join on the track table, allowing us to compare different tracks within the same location.", "We will select distinct locations from the first instance of the track table (t1) where the seating capacity is greater than 90000.", "We will also join this with a second instance of the track table (t2) where the seating capacity is less than 70000, ensuring both conditions are met for the same location."], "pred_sql": "SELECT DISTINCT t1.Location\nFROM track t1\nJOIN track t2 ON t1.Location = t2.Location\nWHERE t1.Seating > 90000 AND t2.Seating < 70000;", "gold_sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "source_tables": ["track"]}
{"sample_id": 788, "db_id": "race_track", "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?", "rationale": ["Identify the requirement to find locations with tracks that have both more than 90000 seats and fewer than 70000 seats.", "To achieve this, we need to join the 'track' table with itself to compare the seating capacities of tracks in the same location.", "Use a self-join on the 'track' table, where one instance (t1) represents tracks with more than 90000 seats and the other instance (t2) represents tracks with fewer than 70000 seats.", "Select distinct locations from the joined result to avoid duplicates, ensuring we only get unique locations that meet both criteria."], "pred_sql": "SELECT DISTINCT t1.Location\nFROM track t1\nJOIN track t2 ON t1.Location = t2.Location\nWHERE t1.Seating > 90000 AND t2.Seating < 70000;", "gold_sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "source_tables": ["track"]}
{"sample_id": 789, "db_id": "coffee_shop", "question": "How many members have the black membership card?", "rationale": ["Identify the table that contains membership information, which is the 'member' table.", "Determine the column that indicates the membership card type, which is 'Membership_card'.", "Formulate a query to count the number of members with the specific membership card type 'black'.", "Use the COUNT() function to get the total number of members with the black membership card."], "pred_sql": "SELECT COUNT(*) AS num_members FROM member WHERE Membership_card = 'black';", "gold_sql": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'", "source_tables": ["member"]}
{"sample_id": 790, "db_id": "coffee_shop", "question": "Find the number of members living in each address.", "rationale": ["Identify the relevant table: The 'member' table contains the addresses of the members.", "Determine the required output: We need to count the number of members for each address.", "Use the COUNT() function to count the Member_IDs for each address.", "Group the results by Address to get the count for each unique address."], "pred_sql": "SELECT Address, COUNT(Member_ID) AS Number_of_Members FROM member GROUP BY Address;", "gold_sql": "SELECT count(*) ,  address FROM member GROUP BY address", "source_tables": ["member"]}
{"sample_id": 791, "db_id": "coffee_shop", "question": "Give me the names of members whose address is in Harford or Waterbury.", "rationale": ["Identify the table that contains member information, which is the 'member' table.", "Determine the relevant column for member names, which is 'Name'.", "Identify the column that contains the address information, which is 'Address'.", "Formulate a condition to filter members based on their address being either 'Harford' or 'Waterbury'.", "Use the SQL SELECT statement to retrieve the names of members that meet the address condition."], "pred_sql": "SELECT Name FROM member WHERE Address IN ('Harford', 'Waterbury');", "gold_sql": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'", "source_tables": ["member"]}
{"sample_id": 792, "db_id": "coffee_shop", "question": "Find the ids and names of members who are under age 30 or with black membership card.", "rationale": ["Identify the table that contains member information, which is the 'member' table.", "Determine the columns needed for the output: 'Member_ID' and 'Name'.", "Specify the conditions for filtering members: those under age 30 or with a black membership card.", "Construct the SQL query using a SELECT statement to retrieve the specified columns from the 'member' table, applying the WHERE clause to filter based on the conditions."], "pred_sql": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Level_of_membership = 'black';", "gold_sql": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30", "source_tables": ["member"]}
{"sample_id": 793, "db_id": "coffee_shop", "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.", "rationale": ["Identify the required columns: Time_of_purchase, Age, and Address from the member table.", "Use the SELECT statement to specify the columns to retrieve.", "Use the FROM clause to indicate the member table as the source of the data.", "Use the ORDER BY clause to sort the results by Time_of_purchase in ascending order."], "pred_sql": "SELECT Time_of_purchase, Age, Address FROM member ORDER BY Time_of_purchase;", "gold_sql": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase", "source_tables": ["member"]}
{"sample_id": 794, "db_id": "coffee_shop", "question": "Which membership card has more than 5 members?", "rationale": ["Identify the relevant table: The query pertains to the 'member' table since it contains information about membership cards and members.", "Select the columns needed: We need to select the 'Membership_card' and count the number of members associated with each card.", "Group the results: Use GROUP BY to aggregate the results based on 'Membership_card'.", "Filter the results: Use HAVING to filter out groups that have 5 or fewer members, ensuring we only get membership cards with more than 5 members."], "pred_sql": "SELECT Membership_card, COUNT(Member_ID) AS Member_Count \nFROM member \nGROUP BY Membership_card \nHAVING COUNT(Member_ID) > 5;", "gold_sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5", "source_tables": ["member"]}
{"sample_id": 795, "db_id": "coffee_shop", "question": "Which address has both members younger than 30 and members older than 40?", "rationale": ["Identify the requirement to find addresses with members younger than 30 and older than 40.", "Use a subquery to find addresses of members older than 40.", "Select distinct addresses from the member table where the age is less than 30 and the address is also in the results of the subquery."], "pred_sql": "SELECT DISTINCT m1.Address \nFROM member m1 \nWHERE m1.Age < 30 \nAND m1.Address IN (SELECT m2.Address \n                   FROM member m2 \n                   WHERE m2.Age > 40);", "gold_sql": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40", "source_tables": ["member"]}
{"sample_id": 796, "db_id": "coffee_shop", "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?", "rationale": ["Identify the relevant table: The query involves members, so we will use the 'member' table.", "We need to find membership cards held by members from two different addresses: Hartford and Waterbury.", "To find common membership cards, we can perform a self-join on the 'member' table, where we compare two instances of the table (m1 and m2).", "In the WHERE clause, we specify that m1's address should be 'Hartford' and m2's address should be 'Waterbury'.", "We use DISTINCT to ensure that we only get unique membership cards that are held by members from both addresses."], "pred_sql": "SELECT DISTINCT m1.Membership_card \nFROM member m1 \nJOIN member m2 ON m1.Membership_card = m2.Membership_card \nWHERE m1.Address = 'Hartford' AND m2.Address = 'Waterbury';", "gold_sql": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'", "source_tables": ["member"]}
{"sample_id": 797, "db_id": "coffee_shop", "question": "How many members are not living in Hartford?", "rationale": ["Identify the table that contains member information, which is the 'member' table.", "Determine the relevant column for the address of the members, which is 'Address'.", "Formulate a condition to filter out members who do not live in Hartford, using the condition 'Address != 'Hartford'.'", "Use the COUNT() function to count the number of members that meet this condition.", "Construct the SQL query to select the count from the 'member' table with the specified condition."], "pred_sql": "SELECT COUNT(*) AS num_members_not_in_hartford FROM member WHERE Address != 'Hartford';", "gold_sql": "SELECT count(*) FROM member WHERE address != 'Hartford'", "source_tables": ["member"]}
{"sample_id": 798, "db_id": "coffee_shop", "question": "Which address do not have any member with the black membership card?", "rationale": ["Identify the relevant tables: We need to look at the 'shop' and 'member' tables to find addresses without members with a black membership card.", "Use a LEFT JOIN: We will perform a LEFT JOIN between the 'shop' and 'member' tables on the address to include all shops and their corresponding members, if any.", "Filter for black membership card: We need to filter out members with a black membership card. This can be done in the WHERE clause.", "Count members: We will use the HAVING clause to ensure that we only select shops that have zero members with a black membership card.", "Select the address: Finally, we will select the address of the shops that meet the criteria."], "pred_sql": "SELECT shop.Address FROM shop LEFT JOIN member ON member.Address = shop.Address WHERE member.Membership_card != 'black' OR member.Membership_card IS NULL GROUP BY shop.Address HAVING COUNT(member.Member_ID) = 0;", "gold_sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'", "source_tables": ["member"]}
{"sample_id": 799, "db_id": "coffee_shop", "question": "Show the shop addresses ordered by their opening year.", "rationale": ["Identify the table that contains the shop addresses, which is the 'shop' table.", "Determine the column that contains the shop addresses, which is 'Address'.", "Identify the column that contains the opening year of the shops, which is 'Open_Year'.", "Construct the SQL query to select the 'Address' from the 'shop' table and order the results by 'Open_Year' in ascending order."], "pred_sql": "SELECT Address FROM shop ORDER BY Open_Year;", "gold_sql": "SELECT address FROM shop ORDER BY open_year", "source_tables": ["shop"]}
{"sample_id": 800, "db_id": "coffee_shop", "question": "What are the average score and average staff number of all shops?", "rationale": ["Identify the required data: average score and average number of staff from the shop table.", "Use the AVG() function to calculate the average of the 'Score' and 'Num_of_staff' columns.", "Construct the SQL SELECT statement to retrieve these averages from the 'shop' table."], "pred_sql": "SELECT AVG(Score) AS Average_Score, AVG(Num_of_staff) AS Average_Staff_Number FROM shop;", "gold_sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop", "source_tables": ["shop"]}
{"sample_id": 801, "db_id": "coffee_shop", "question": "Find the id and address of the shops whose score is below the average score.", "rationale": ["Identify the columns needed: Shop_ID and Address from the shop table.", "Determine the condition: shops with a score below the average score.", "Calculate the average score using a subquery: SELECT AVG(Score) FROM shop.", "Combine the selection of Shop_ID and Address with the condition using a WHERE clause."], "pred_sql": "SELECT Shop_ID, Address FROM shop WHERE Score < (SELECT AVG(Score) FROM shop);", "gold_sql": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)", "source_tables": ["shop"]}
{"sample_id": 802, "db_id": "coffee_shop", "question": "Find the address and staff number of the shops that do not have any happy hour.", "rationale": ["Identify the columns needed: Address and Num_of_staff from the shop table.", "Determine the condition: We need shops that do not have any happy hour events.", "To find shops without happy hours, we can use a subquery to select Shop_IDs from the happy_hour table.", "Use the NOT IN clause to filter out those Shop_IDs from the shop table in the main query."], "pred_sql": "SELECT Address, Num_of_staff FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM happy_hour)", "gold_sql": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)", "source_tables": ["shop", "happy_hour"]}
{"sample_id": 803, "db_id": "coffee_shop", "question": "What are the id and address of the shops which have a happy hour in May?", "rationale": ["Identify the relevant tables: 'shop' and 'happy_hour' are needed to get shop details and happy hour events.", "Determine the columns to select: We need 'Shop_ID' and 'Address' from the 'shop' table.", "Establish the relationship between the tables: Use a JOIN clause to connect 'shop' and 'happy_hour' on 'Shop_ID'.", "Filter the results: Add a WHERE clause to filter happy hour events that occur in May."], "pred_sql": "SELECT shop.Shop_ID, shop.Address FROM shop JOIN happy_hour ON shop.Shop_ID = happy_hour.Shop_ID WHERE happy_hour.Month = 'May';", "gold_sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'", "source_tables": ["shop", "happy_hour"]}
{"sample_id": 804, "db_id": "coffee_shop", "question": "which shop has happy hour most frequently? List its id and number of happy hours.", "rationale": ["Identify the table that contains information about happy hours, which is the 'happy_hour' table.", "We need to count the number of happy hours for each shop, so we will use the COUNT() function on the 'HH_ID' column.", "To get the shop's ID along with the count of happy hours, we will select 'Shop_ID' and the count of 'HH_ID'.", "We will group the results by 'Shop_ID' to aggregate the counts for each shop.", "To find the shop with the most happy hours, we will order the results in descending order based on the count of happy hours.", "Finally, we will limit the results to only one entry to get the shop with the highest count."], "pred_sql": "SELECT Shop_ID, COUNT(HH_ID) AS Num_of_Happy_Hours\nFROM happy_hour\nGROUP BY Shop_ID\nORDER BY Num_of_Happy_Hours DESC\nLIMIT 1;", "gold_sql": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["happy_hour"]}
{"sample_id": 805, "db_id": "coffee_shop", "question": "Which month has the most happy hours?", "rationale": ["Identify the relevant table: The 'happy_hour' table contains information about happy hour events, including the month they occur.", "Determine the required information: We need to count the number of happy hour events for each month.", "Use the COUNT function to count the number of happy hour events (HH_ID) grouped by month.", "Group the results by the 'Month' column to aggregate the counts for each month.", "Order the results in descending order based on the count of happy hours to find the month with the most events.", "Limit the results to 1 to get only the month with the highest count."], "pred_sql": "SELECT Month, COUNT(HH_ID) AS Happy_Hour_Count FROM happy_hour GROUP BY Month ORDER BY Happy_Hour_Count DESC LIMIT 1;", "gold_sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1", "source_tables": ["happy_hour"]}
{"sample_id": 806, "db_id": "coffee_shop", "question": "Which months have more than 2 happy hours?", "rationale": ["Identify the relevant table: The query requires information about happy hours, so we will use the 'happy_hour' table.", "Determine the required columns: We need the 'Month' column to find out which months have more than 2 happy hours.", "Group the results: We will group the results by 'Month' to aggregate the happy hour events for each month.", "Count the happy hours: We will use the COUNT function to count the number of happy hour events (HH_ID) for each month.", "Filter the results: We will use the HAVING clause to filter the grouped results to only include months where the count of happy hours is greater than 2."], "pred_sql": "SELECT Month FROM happy_hour GROUP BY Month HAVING COUNT(HH_ID) > 2;", "gold_sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2", "source_tables": ["happy_hour"]}
{"sample_id": 807, "db_id": "chinook_1", "question": "How many albums are there?", "rationale": ["Identify the table that contains the information about albums, which is the 'Album' table.", "To find out how many albums there are, we need to count the number of entries in the 'Album' table.", "Use the COUNT() function to count the total number of rows in the 'Album' table.", "Select the count with an alias 'AlbumCount' for clarity."], "pred_sql": "SELECT COUNT(*) AS AlbumCount FROM Album;", "gold_sql": "SELECT count(*) FROM ALBUM", "source_tables": ["album"]}
{"sample_id": 808, "db_id": "chinook_1", "question": "Find the number of albums.", "rationale": ["Identify the requirement: We need to find the number of albums.", "Determine the relevant table: The 'Album' table contains the information about albums.", "Use the COUNT() function to count the total number of entries in the 'Album' table.", "Construct the SQL query to select the count from the 'Album' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfAlbums FROM Album;", "gold_sql": "SELECT count(*) FROM ALBUM", "source_tables": ["album"]}
{"sample_id": 809, "db_id": "chinook_1", "question": "List the names of all music genres.", "rationale": ["Identify the table that contains the information about music genres, which is the 'Genre' table.", "Determine the specific column that holds the names of the genres, which is the 'Name' column.", "Construct the SQL query to select the 'Name' column from the 'Genre' table."], "pred_sql": "SELECT Name FROM Genre;", "gold_sql": "SELECT Name FROM GENRE", "source_tables": ["genre"]}
{"sample_id": 810, "db_id": "chinook_1", "question": "What are the names of different music genres?", "rationale": ["Identify the table that contains the information about music genres, which is the 'Genre' table.", "Determine the column that holds the names of the genres, which is the 'Name' column.", "Since the user is interested in different music genres, use the DISTINCT keyword to ensure that each genre name is unique in the result set.", "Construct the SQL query to select the distinct names from the Genre table."], "pred_sql": "SELECT DISTINCT Name FROM Genre;", "gold_sql": "SELECT Name FROM GENRE", "source_tables": ["genre"]}
{"sample_id": 811, "db_id": "chinook_1", "question": "Find all the customer information in state NY.", "rationale": ["Identify the table that contains customer information, which is the 'Customer' table.", "Determine the specific information needed, which is all customer information.", "Identify the condition to filter the results, which is customers located in the state of NY.", "Construct the SQL query using SELECT to retrieve all columns from the 'Customer' table where the 'State' column matches 'NY'."], "pred_sql": "SELECT * FROM Customer WHERE State = 'NY';", "gold_sql": "SELECT * FROM CUSTOMER WHERE State  =  'NY'", "source_tables": ["customer"]}
{"sample_id": 812, "db_id": "chinook_1", "question": "What is all the customer information for customers in NY state?", "rationale": ["Identify the table that contains customer information, which is the 'Customer' table.", "Determine the specific columns needed, which in this case is all columns, so we will use '*' to select all.", "Apply a filter to the query to only include customers from New York state, which is represented by 'NY' in the 'State' column."], "pred_sql": "SELECT * FROM Customer WHERE State = 'NY';", "gold_sql": "SELECT * FROM CUSTOMER WHERE State  =  'NY'", "source_tables": ["customer"]}
{"sample_id": 813, "db_id": "chinook_1", "question": "What are the first names and last names of the employees who live in Calgary city.", "rationale": ["Identify the table that contains employee information, which is the 'Employee' table.", "Determine the columns needed for the output, which are 'FirstName' and 'LastName'.", "Specify the condition to filter the employees based on their city, which is 'Calgary'.", "Construct the SQL query using the SELECT statement to retrieve the specified columns from the 'Employee' table where the city matches 'Calgary'."], "pred_sql": "SELECT FirstName, LastName FROM Employee WHERE City = 'Calgary';", "gold_sql": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  'Calgary'", "source_tables": ["employee"]}
{"sample_id": 814, "db_id": "chinook_1", "question": "Find the full names of employees living in the city of Calgary.", "rationale": ["Identify the table that contains employee information, which is the 'Employee' table.", "Determine the columns needed to get the full names of employees, which are 'FirstName' and 'LastName'.", "Use the SQL concatenation operator '||' to combine 'FirstName' and 'LastName' into a single column called 'FullName'.", "Add a WHERE clause to filter the results to only include employees who live in the city of 'Calgary'."], "pred_sql": "SELECT FirstName || ' ' || LastName AS FullName FROM Employee WHERE City = 'Calgary';", "gold_sql": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  'Calgary'", "source_tables": ["employee"]}
{"sample_id": 815, "db_id": "chinook_1", "question": "What are the distinct billing countries of the invoices?", "rationale": ["Identify the table that contains billing information, which is the Invoice table.", "Determine the specific column that holds the country information, which is BillingCountry.", "Use the DISTINCT keyword to ensure that only unique billing countries are returned.", "Construct the SQL query to select distinct BillingCountry from the Invoice table."], "pred_sql": "SELECT DISTINCT BillingCountry FROM Invoice;", "gold_sql": "SELECT distinct(BillingCountry) FROM INVOICE", "source_tables": ["invoice"]}
{"sample_id": 816, "db_id": "chinook_1", "question": "Find the different billing countries for all invoices.", "rationale": ["Identify the table that contains billing information, which is the Invoice table.", "Determine the specific column that holds the billing country information, which is BillingCountry.", "To find different billing countries, we need to select distinct values from the BillingCountry column.", "Construct the SQL query using SELECT DISTINCT to retrieve unique billing countries from the Invoice table."], "pred_sql": "SELECT DISTINCT BillingCountry FROM Invoice;", "gold_sql": "SELECT distinct(BillingCountry) FROM INVOICE", "source_tables": ["invoice"]}
{"sample_id": 817, "db_id": "chinook_1", "question": "Find the names of all artists that have \"a\" in their names.", "rationale": ["Identify the table that contains artist names, which is the Artist table.", "Determine the column that holds the artist names, which is the Name column.", "Formulate a SQL SELECT statement to retrieve the Name column from the Artist table.", "Add a WHERE clause to filter the results to only include names that contain the letter 'a'.", "Use the LIKE operator with wildcards to match any artist name that has 'a' in it."], "pred_sql": "SELECT Name FROM Artist WHERE Name LIKE '%a%';", "gold_sql": "SELECT Name FROM ARTIST WHERE Name LIKE '%a%'", "source_tables": ["artist"]}
{"sample_id": 818, "db_id": "chinook_1", "question": "What are the names of artist who have the letter 'a' in their names?", "rationale": ["Identify the table that contains artist names, which is the 'Artist' table.", "Determine the column that holds the names of the artists, which is 'Name'.", "Formulate a condition to filter artist names that contain the letter 'a'.", "Use the SQL 'LIKE' operator with wildcards to find names that include 'a'.", "Construct the final SQL query to select the names of artists that meet the criteria."], "pred_sql": "SELECT Name FROM Artist WHERE Name LIKE '%a%';", "gold_sql": "SELECT Name FROM ARTIST WHERE Name LIKE '%a%'", "source_tables": ["artist"]}
{"sample_id": 819, "db_id": "chinook_1", "question": "Find the title of all the albums of the artist \"AC/DC\".", "rationale": ["Identify the tables involved: Album and Artist.", "Determine the relationship between the tables: Album has a foreign key ArtistId that references Artist.", "We need to select the Title from the Album table.", "We need to filter the results based on the artist's name, which is in the Artist table.", "Construct the SQL query using a JOIN to combine Album and Artist tables, and apply the WHERE clause to filter by the artist's name 'AC/DC'."], "pred_sql": "SELECT Album.Title FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = 'AC/DC';", "gold_sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  'AC/DC'", "source_tables": ["artist", "album"]}
{"sample_id": 820, "db_id": "chinook_1", "question": "What are the titles of albums by the artist \"AC/DC\"?", "rationale": ["Identify the tables needed: We need the Album table to get album titles and the Artist table to filter by artist name.", "Determine the relationship: The Album table has a foreign key ArtistId that links to the Artist table's ArtistId.", "Formulate the SELECT statement: We want to select the Title column from the Album table.", "Join the tables: We need to join the Album and Artist tables on the ArtistId to access the artist's name.", "Add the WHERE clause: We filter the results to only include albums by the artist 'AC/DC'."], "pred_sql": "SELECT Album.Title FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = 'AC/DC';", "gold_sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  'AC/DC'", "source_tables": ["artist", "album"]}
{"sample_id": 821, "db_id": "chinook_1", "question": "Hom many albums does the artist \"Metallica\" have?", "rationale": ["Identify the relevant tables: We need to use the Album and Artist tables to find the number of albums by Metallica.", "Determine the relationship: The Album table has a foreign key ArtistId that references the Artist table.", "Find the ArtistId for Metallica: We need to select the ArtistId from the Artist table where the Name is 'Metallica'.", "Count the albums: We will count the number of entries in the Album table where the ArtistId matches the one we found for Metallica."], "pred_sql": "SELECT COUNT(*) AS AlbumCount FROM Album WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'Metallica');", "gold_sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  'Metallica'", "source_tables": ["artist", "album"]}
{"sample_id": 822, "db_id": "chinook_1", "question": "Find the number of albums by the artist \"Metallica\".", "rationale": ["Identify the main goal: Count the number of albums by the artist 'Metallica'.", "Determine the relevant tables: The 'Album' table contains album information, and the 'Artist' table contains artist information.", "Find the ArtistId for 'Metallica' from the 'Artist' table using a subquery.", "Use the COUNT() function to count the number of albums in the 'Album' table where the ArtistId matches the one found in the subquery."], "pred_sql": "SELECT COUNT(*) AS AlbumCount FROM Album WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'Metallica');", "gold_sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  'Metallica'", "source_tables": ["artist", "album"]}
{"sample_id": 823, "db_id": "chinook_1", "question": "Which artist does the album \"Balls to the Wall\" belong to?", "rationale": ["Identify the tables involved: We need to find the artist of a specific album, so we will use the Album and Artist tables.", "Determine the relationship: The Album table has a foreign key ArtistId that links to the Artist table's ArtistId.", "Formulate the SELECT statement: We want to select the Name of the artist from the Artist table.", "Join the tables: We will join the Album table with the Artist table on the ArtistId.", "Add the WHERE clause: We need to filter the results to only include the album with the title 'Balls to the Wall'."], "pred_sql": "SELECT Artist.Name FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Album.Title = 'Balls to the Wall';", "gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  'Balls to the Wall'", "source_tables": ["artist", "album"]}
{"sample_id": 824, "db_id": "chinook_1", "question": "Find the name of the artist who made the album \"Balls to the Wall\".", "rationale": ["Identify the tables involved: We need information from the Artist and Album tables.", "Determine the relationship: The Album table has a foreign key ArtistId that links to the Artist table.", "Specify the required fields: We need the Name of the artist from the Artist table.", "Set the condition: We want the album with the title 'Balls to the Wall'.", "Construct the SQL query using a JOIN to combine the Artist and Album tables based on the ArtistId, and filter by the album title."], "pred_sql": "SELECT Artist.Name FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId WHERE Album.Title = 'Balls to the Wall';", "gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  'Balls to the Wall'", "source_tables": ["artist", "album"]}
{"sample_id": 825, "db_id": "chinook_1", "question": "Which artist has the most albums?", "rationale": ["Identify the tables involved: We need data from the Artist and Album tables.", "Determine the relationship: The Artist table has a one-to-many relationship with the Album table (one artist can have multiple albums).", "Count the number of albums for each artist: Use COUNT(Album.AlbumId) to count albums grouped by artist.", "Group the results by artist: Use GROUP BY Artist.ArtistId to aggregate the album counts per artist.", "Order the results to find the artist with the most albums: Use ORDER BY AlbumCount DESC to sort the counts in descending order.", "Limit the results to the top artist: Use LIMIT 1 to get only the artist with the highest album count."], "pred_sql": "SELECT Artist.Name, COUNT(Album.AlbumId) AS AlbumCount\nFROM Artist\nJOIN Album ON Artist.ArtistId = Album.ArtistId\nGROUP BY Artist.ArtistId\nORDER BY AlbumCount DESC\nLIMIT 1;", "gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["artist", "album"]}
{"sample_id": 826, "db_id": "chinook_1", "question": "What is the name of the artist with the greatest number of albums?", "rationale": ["Identify the relevant tables: Artist and Album.", "We need to find the artist with the greatest number of albums, so we will join the Artist table with the Album table on the ArtistId.", "We will group the results by ArtistId to count the number of albums for each artist.", "To find the artist with the greatest number of albums, we will order the results by the count of albums in descending order.", "Finally, we will limit the results to 1 to get only the artist with the most albums."], "pred_sql": "SELECT Artist.Name\nFROM Artist\nJOIN Album ON Artist.ArtistId = Album.ArtistId\nGROUP BY Artist.ArtistId\nORDER BY COUNT(Album.AlbumId) DESC\nLIMIT 1;", "gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["artist", "album"]}
{"sample_id": 827, "db_id": "chinook_1", "question": "Find the names of all the tracks that contain the word \"you\".", "rationale": ["Identify the table that contains track names, which is the 'Track' table.", "Determine the column that holds the track names, which is 'Name'.", "Formulate a query to select the 'Name' column from the 'Track' table.", "Apply a condition to filter track names that contain the word 'you', using the SQL LIKE operator with wildcards."], "pred_sql": "SELECT Name FROM Track WHERE Name LIKE '%you%';", "gold_sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "source_tables": ["track"]}
{"sample_id": 828, "db_id": "chinook_1", "question": "What are the names of tracks that contain the the word you in them?", "rationale": ["Identify the table that contains track names, which is the 'Track' table.", "Determine the column that holds the track names, which is 'Name'.", "Formulate a query to select the 'Name' column from the 'Track' table.", "Use the SQL 'LIKE' operator to filter track names that contain the word 'you', using wildcards '%' to match any characters before and after 'you'."], "pred_sql": "SELECT Name FROM Track WHERE Name LIKE '%you%';", "gold_sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "source_tables": ["track"]}
{"sample_id": 829, "db_id": "chinook_1", "question": "What is the average unit price of all the tracks?", "rationale": ["Identify the table that contains the relevant data: The 'Track' table contains the 'UnitPrice' column which we need to calculate the average from.", "Use the AVG() function to calculate the average of the 'UnitPrice' column.", "Select the average unit price and give it an alias 'AverageUnitPrice' for clarity.", "Construct the SQL query to select the average unit price from the 'Track' table."], "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track;", "gold_sql": "SELECT AVG(UnitPrice) FROM TRACK", "source_tables": ["track"]}
{"sample_id": 830, "db_id": "chinook_1", "question": "Find the average unit price for a track.", "rationale": ["Identify the table that contains the relevant data, which is the 'Track' table.", "Determine the specific column that holds the unit price information, which is 'UnitPrice'.", "Use the AVG() function to calculate the average of the 'UnitPrice' column.", "Construct the SQL query to select the average unit price from the 'Track' table."], "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track;", "gold_sql": "SELECT AVG(UnitPrice) FROM TRACK", "source_tables": ["track"]}
{"sample_id": 831, "db_id": "chinook_1", "question": "What are the durations of the longest and the shortest tracks in milliseconds?", "rationale": ["Identify the relevant table: The 'Track' table contains the 'Milliseconds' column which holds the duration of each track.", "Determine the required information: We need to find both the longest and shortest track durations.", "Use aggregate functions: To find the longest track, we will use the MAX() function, and for the shortest track, we will use the MIN() function.", "Construct the SQL query: We will select the maximum and minimum values of the 'Milliseconds' column from the 'Track' table."], "pred_sql": "SELECT MAX(Milliseconds) AS LongestTrackDuration, MIN(Milliseconds) AS ShortestTrackDuration FROM Track;", "gold_sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "source_tables": ["track"]}
{"sample_id": 832, "db_id": "chinook_1", "question": "Find the maximum and minimum durations of tracks in milliseconds.", "rationale": ["Identify the table that contains the duration of tracks, which is the 'Track' table.", "Determine the column that holds the duration information, which is 'Milliseconds'.", "Use aggregate functions to find the maximum and minimum values of the 'Milliseconds' column.", "Construct the SQL query to select the maximum and minimum durations from the 'Track' table."], "pred_sql": "SELECT MAX(Milliseconds) AS MaxDuration, MIN(Milliseconds) AS MinDuration FROM Track;", "gold_sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "source_tables": ["track"]}
{"sample_id": 833, "db_id": "chinook_1", "question": "Show the album names, ids and the number of tracks for each album.", "rationale": ["Identify the tables needed: We need the Album table to get album names and ids, and the Track table to count the number of tracks for each album.", "Select the required columns: We need AlbumId and Title from the Album table, and we will count the TrackId from the Track table to get the number of tracks.", "Join the Album and Track tables: We will use a LEFT JOIN to include albums that may not have any tracks.", "Group the results: We need to group by AlbumId and Title to get the count of tracks for each album."], "pred_sql": "SELECT Album.AlbumId, Album.Title, COUNT(Track.TrackId) AS NumberOfTracks\nFROM Album\nLEFT JOIN Track ON Album.AlbumId = Track.AlbumId\nGROUP BY Album.AlbumId, Album.Title;", "gold_sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "source_tables": ["track", "album"]}
{"sample_id": 834, "db_id": "chinook_1", "question": "What are the names and ids of the different albums, and how many tracks are on each?", "rationale": ["Identify the required columns: AlbumId and Title from the Album table, and the count of tracks from the Track table.", "To get the count of tracks for each album, a JOIN operation is needed between the Album and Track tables based on the AlbumId.", "Use a LEFT JOIN to ensure that albums with no tracks are still included in the results.", "Use the COUNT() function to count the number of tracks associated with each album.", "Group the results by AlbumId and Title to get the count of tracks for each album."], "pred_sql": "SELECT Album.AlbumId, Album.Title, COUNT(Track.TrackId) AS TrackCount\nFROM Album\nLEFT JOIN Track ON Album.AlbumId = Track.AlbumId\nGROUP BY Album.AlbumId, Album.Title;", "gold_sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "source_tables": ["track", "album"]}
{"sample_id": 835, "db_id": "chinook_1", "question": "What is the name of the most common genre in all tracks?", "rationale": ["Identify the relevant tables: We need to find the genre of tracks, so we will use the Genre and Track tables.", "Join the Genre and Track tables: We will join these tables on the GenreId to associate each track with its genre.", "Group by genre name: We will group the results by the genre name to count how many tracks belong to each genre.", "Count the number of tracks per genre: We will use COUNT(t.TrackId) to count the number of tracks for each genre.", "Order the results: We will order the results in descending order based on the count of tracks to find the most common genre.", "Limit the results: We will limit the results to 1 to get only the most common genre."], "pred_sql": "SELECT g.Name\nFROM Genre g\nJOIN Track t ON g.GenreId = t.GenreId\nGROUP BY g.Name\nORDER BY COUNT(t.TrackId) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["genre", "track"]}
{"sample_id": 836, "db_id": "chinook_1", "question": "Find the name of the genre that is most frequent across all tracks.", "rationale": ["We need to find the genre that is most frequent across all tracks.", "To do this, we will join the Genre table with the Track table on the GenreId.", "Next, we will group the results by GenreId to count how many tracks belong to each genre.", "We will then order the results in descending order based on the count of tracks for each genre.", "Finally, we will limit the results to just one entry to get the most frequent genre."], "pred_sql": "SELECT g.Name\nFROM Genre g\nJOIN Track t ON g.GenreId = t.GenreId\nGROUP BY g.GenreId\nORDER BY COUNT(t.TrackId) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["genre", "track"]}
{"sample_id": 837, "db_id": "chinook_1", "question": "What is the least common media type in all tracks?", "rationale": ["Identify the relevant tables: We need to look at the 'Track' table for the media types of tracks and the 'MediaType' table for the names of those media types.", "Join the 'Track' table with the 'MediaType' table on the MediaTypeId to get the names of the media types associated with each track.", "Group the results by the media type name to count how many tracks belong to each media type.", "Order the results by the count of tracks in ascending order to find the least common media type.", "Limit the results to 1 to get only the least common media type."], "pred_sql": "SELECT MediaType.Name, COUNT(Track.TrackId) AS TrackCount\nFROM Track\nJOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId\nGROUP BY MediaType.Name\nORDER BY TrackCount ASC\nLIMIT 1;", "gold_sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["mediatype", "track"]}
{"sample_id": 838, "db_id": "chinook_1", "question": "What is the name of the media type that is least common across all tracks?", "rationale": ["Identify the relevant tables: MediaType and Track are the two tables involved in this query.", "We need to find the media type that is least common across all tracks, which means we need to count how many tracks are associated with each media type.", "Join the MediaType table with the Track table on the MediaTypeId to get the relationship between media types and tracks.", "Group the results by MediaTypeId to count the number of tracks for each media type.", "Order the results by the count of tracks in ascending order to find the least common media type.", "Limit the results to 1 to get only the least common media type."], "pred_sql": "SELECT MediaType.Name\nFROM MediaType\nJOIN Track ON MediaType.MediaTypeId = Track.MediaTypeId\nGROUP BY MediaType.MediaTypeId\nORDER BY COUNT(Track.TrackId) ASC\nLIMIT 1;", "gold_sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["mediatype", "track"]}
{"sample_id": 839, "db_id": "chinook_1", "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.", "rationale": ["We need to retrieve album names and ids, which are in the Album table.", "The Album table has columns AlbumId and Title that we need to select.", "We need to filter albums based on the condition that they contain tracks with a unit price greater than 1.", "The Track table contains the UnitPrice column, which we will use for filtering.", "To find albums that contain tracks with a unit price greater than 1, we need to join the Album table with the Track table on the AlbumId.", "The SQL query will select AlbumId and Title from the Album table where the UnitPrice from the Track table is greater than 1."], "pred_sql": "SELECT Album.AlbumId, Album.Title FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId WHERE Track.UnitPrice > 1;", "gold_sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "source_tables": ["track", "album"]}
{"sample_id": 840, "db_id": "chinook_1", "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?", "rationale": ["Identify the required columns: AlbumId and Title from the Album table.", "Determine the condition: we need to find albums that contain tracks with a unit price greater than 1.", "To find this relationship, we need to join the Album table with the Track table on the AlbumId.", "Use a WHERE clause to filter tracks with a unit price greater than 1.", "Select distinct AlbumId and Title to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT Album.AlbumId, Album.Title \nFROM Album \nJOIN Track ON Album.AlbumId = Track.AlbumId \nWHERE Track.UnitPrice > 1;", "gold_sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "source_tables": ["track", "album"]}
{"sample_id": 841, "db_id": "chinook_1", "question": "How many tracks belong to rock genre?", "rationale": ["Identify the relevant table: The 'Track' table contains information about tracks, including their genre.", "Determine the condition: We need to count tracks that belong to the 'Rock' genre.", "Find the GenreId for 'Rock': We will use a subquery to select the GenreId from the 'Genre' table where the Name is 'Rock'.", "Count the tracks: Use the COUNT() function to count the number of tracks in the 'Track' table that match the GenreId obtained from the subquery."], "pred_sql": "SELECT COUNT(*) AS TrackCount FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock')", "gold_sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock'", "source_tables": ["genre", "track"]}
{"sample_id": 842, "db_id": "chinook_1", "question": "Count the number of tracks that are part of the rock genre.", "rationale": ["Identify the requirement: Count the number of tracks in the rock genre.", "Determine the relevant tables: The Track table contains the tracks and the Genre table contains the genre information.", "Find the GenreId for the rock genre: Use a subquery to select the GenreId from the Genre table where the Name is 'Rock'.", "Count the tracks: Use the COUNT() function on the Track table where the GenreId matches the one found in the previous step."], "pred_sql": "SELECT COUNT(*) AS TrackCount FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock')", "gold_sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock'", "source_tables": ["genre", "track"]}
{"sample_id": 843, "db_id": "chinook_1", "question": "What is the average unit price of tracks that belong to Jazz genre?", "rationale": ["Identify the relevant table: The 'Track' table contains the 'UnitPrice' and 'GenreId' columns.", "Determine the condition: We need to filter tracks that belong to the 'Jazz' genre.", "Find the GenreId for Jazz: We will use a subquery to select the 'GenreId' from the 'Genre' table where the 'Name' is 'Jazz'.", "Calculate the average unit price: Use the AVG() function to calculate the average of 'UnitPrice' for the filtered tracks."], "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Jazz');", "gold_sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Jazz'", "source_tables": ["genre", "track"]}
{"sample_id": 844, "db_id": "chinook_1", "question": "Find the average unit price of jazz tracks.", "rationale": ["Identify the table that contains the unit price of tracks, which is the 'Track' table.", "Determine the condition to filter tracks by genre, specifically 'Jazz'.", "Find the GenreId corresponding to 'Jazz' from the 'Genre' table.", "Use the AVG() function to calculate the average unit price of the filtered tracks."], "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Jazz');", "gold_sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Jazz'", "source_tables": ["genre", "track"]}
{"sample_id": 845, "db_id": "chinook_1", "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?", "rationale": ["Identify the table that contains customer information, which is the 'Customer' table.", "Determine the columns needed for the output, which are 'FirstName' and 'LastName'.", "Specify the condition to filter the results, which is the email address 'luisg@embraer.com.br'.", "Construct the SQL query using the SELECT statement to retrieve the specified columns from the 'Customer' table with the given condition."], "pred_sql": "SELECT FirstName, LastName FROM Customer WHERE Email = 'luisg@embraer.com.br';", "gold_sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  'luisg@embraer.com.br'", "source_tables": ["customer"]}
{"sample_id": 846, "db_id": "chinook_1", "question": "Find the full name of the customer with the email \"luisg@embraer.com.br\".", "rationale": ["Identify the table that contains customer information, which is the 'Customer' table.", "Determine the columns needed to get the full name of the customer, which are 'FirstName' and 'LastName'.", "Use the concatenation operator '||' to combine 'FirstName' and 'LastName' into a single column called 'FullName'.", "Add a WHERE clause to filter the results to only include the customer with the specified email address 'luisg@embraer.com.br'."], "pred_sql": "SELECT FirstName || ' ' || LastName AS FullName FROM Customer WHERE Email = 'luisg@embraer.com.br';", "gold_sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  'luisg@embraer.com.br'", "source_tables": ["customer"]}
{"sample_id": 847, "db_id": "chinook_1", "question": "How many customers have email that contains \"gmail.com\"?", "rationale": ["Identify the table that contains customer information, which is the 'Customer' table.", "Determine the specific column that holds the email addresses, which is the 'Email' column.", "Formulate a condition to filter customers whose email contains 'gmail.com'. This can be done using the SQL LIKE operator with wildcards.", "Count the number of records that meet the condition using the COUNT() function."], "pred_sql": "SELECT COUNT(*) AS CustomerCount FROM Customer WHERE Email LIKE '%gmail.com%';", "gold_sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE '%gmail.com%'", "source_tables": ["customer"]}
{"sample_id": 848, "db_id": "chinook_1", "question": "Count the number of customers that have an email containing \"gmail.com\".", "rationale": ["Identify the table that contains customer information, which is the 'Customer' table.", "Determine the column that contains email addresses, which is the 'Email' column in the 'Customer' table.", "To count the number of customers with a specific email domain, use the COUNT() function.", "Use the WHERE clause to filter customers whose email contains 'gmail.com'.", "The SQL query will select the count of customers from the 'Customer' table where the 'Email' column matches the specified pattern."], "pred_sql": "SELECT COUNT(*) AS CustomerCount FROM Customer WHERE Email LIKE '%gmail.com';", "gold_sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE '%gmail.com%'", "source_tables": ["customer"]}
{"sample_id": 849, "db_id": "chinook_1", "question": "What is the first name and last name employee helps the customer with first name Leonie?", "rationale": ["Identify the relevant tables: Customer and Employee.", "Determine the columns needed: Employee's FirstName and LastName.", "Establish the relationship between Customer and Employee through the SupportRepId foreign key.", "Filter the results to find the customer with the first name 'Leonie'.", "Construct the SQL query using SELECT, JOIN, and WHERE clauses."], "pred_sql": "SELECT Employee.FirstName, Employee.LastName \nFROM Customer \nJOIN Employee ON Customer.SupportRepId = Employee.EmployeeId \nWHERE Customer.FirstName = 'Leonie';", "gold_sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  'Leonie'", "source_tables": ["customer", "employee"]}
{"sample_id": 850, "db_id": "chinook_1", "question": "Find the full names of employees who help customers with the first name Leonie.", "rationale": ["Identify the tables involved: Employee and Customer.", "We need to find employees who help customers, so we will join the Employee table with the Customer table on the SupportRepId.", "We need to filter the customers by their first name, which is 'Leonie'.", "Select the full names of the employees, which can be constructed by concatenating the FirstName and LastName from the Employee table."], "pred_sql": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName\nFROM Employee\nJOIN Customer ON Employee.EmployeeId = Customer.SupportRepId\nWHERE Customer.FirstName = 'Leonie';", "gold_sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  'Leonie'", "source_tables": ["customer", "employee"]}
{"sample_id": 851, "db_id": "chinook_1", "question": "What city does the employee who helps the customer with postal code 70174 live in?", "rationale": ["Identify the relevant tables: Employee and Customer.", "Determine the relationship between the tables: Customer has a foreign key (SupportRepId) that references Employee (EmployeeId).", "We need to find the city of the employee who supports the customer with a specific postal code (70174).", "Construct the SQL query to select the city from the Employee table, joining it with the Customer table on the SupportRepId and EmployeeId, and filtering by the specified postal code."], "pred_sql": "SELECT e.City FROM Employee e JOIN Customer c ON e.EmployeeId = c.SupportRepId WHERE c.PostalCode = '70174';", "gold_sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  '70174'", "source_tables": ["customer", "employee"]}
{"sample_id": 852, "db_id": "chinook_1", "question": "Find the cities corresponding to employees who help customers with the postal code 70174.", "rationale": ["Identify the relevant tables: Employee and Customer.", "Determine the relationship between the tables: Employee is linked to Customer through the SupportRepId.", "We need to find the cities of employees who support customers with a specific postal code (70174).", "Construct the SQL query to select distinct cities from the Employee table where the corresponding Customer's postal code matches 70174."], "pred_sql": "SELECT DISTINCT Employee.City FROM Employee JOIN Customer ON Employee.EmployeeId = Customer.SupportRepId WHERE Customer.PostalCode = '70174';", "gold_sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  '70174'", "source_tables": ["customer", "employee"]}
{"sample_id": 853, "db_id": "chinook_1", "question": "How many distinct cities does the employees live in?", "rationale": ["Identify the table that contains the information about employees, which is the 'Employee' table.", "Determine the column that contains the city information, which is the 'City' column in the 'Employee' table.", "To find the number of distinct cities, use the COUNT function along with DISTINCT on the 'City' column.", "Construct the SQL query to select the count of distinct cities from the 'Employee' table."], "pred_sql": "SELECT COUNT(DISTINCT City) AS DistinctCityCount FROM Employee;", "gold_sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "source_tables": ["employee"]}
{"sample_id": 854, "db_id": "chinook_1", "question": "Find the number of different cities that employees live in.", "rationale": ["Identify the table that contains the information about employees, which is the 'Employee' table.", "Determine the relevant column that contains the city information, which is the 'City' column in the 'Employee' table.", "To find the number of different cities, use the COUNT function along with DISTINCT to count unique city entries.", "Construct the SQL query to select the count of distinct cities from the Employee table."], "pred_sql": "SELECT COUNT(DISTINCT City) AS NumberOfCities FROM Employee;", "gold_sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "source_tables": ["employee"]}
{"sample_id": 855, "db_id": "chinook_1", "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.", "rationale": ["Identify the tables involved: Invoice and Customer.", "Determine the relationship between the tables: Invoice is linked to Customer via CustomerId.", "Select the relevant columns: We need the InvoiceDate from the Invoice table.", "Filter the results based on the customer's first name and last name: FirstName = 'Astrid' and LastName = 'Gruber'.", "Construct the SQL query using a JOIN to combine the Invoice and Customer tables, applying the necessary filters."], "pred_sql": "SELECT Invoice.InvoiceDate \nFROM Invoice \nJOIN Customer ON Invoice.CustomerId = Customer.CustomerId \nWHERE Customer.FirstName = 'Astrid' AND Customer.LastName = 'Gruber';", "gold_sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  'Astrid' AND LastName  =  'Gruber'", "source_tables": ["customer", "invoice"]}
{"sample_id": 856, "db_id": "chinook_1", "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?", "rationale": ["Identify the relevant tables: Invoice and Customer are needed to get the invoice dates and customer details.", "Determine the relationship between the tables: The Invoice table has a foreign key CustomerId that links to the Customer table.", "Select the required fields: We need the InvoiceDate from the Invoice table.", "Filter the results: We need to filter customers by their first name 'Astrid' and last name 'Gruber'.", "Construct the SQL query using JOIN to combine the Invoice and Customer tables based on the CustomerId."], "pred_sql": "SELECT Invoice.InvoiceDate \nFROM Invoice \nJOIN Customer ON Invoice.CustomerId = Customer.CustomerId \nWHERE Customer.FirstName = 'Astrid' AND Customer.LastName = 'Gruber';", "gold_sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  'Astrid' AND LastName  =  'Gruber'", "source_tables": ["customer", "invoice"]}
{"sample_id": 857, "db_id": "chinook_1", "question": "Find all the customer last names that do not have invoice totals larger than 20.", "rationale": ["We need to find customer last names, so we will select the 'LastName' column from the 'Customer' table.", "To determine which customers do not have invoice totals larger than 20, we need to join the 'Customer' table with the 'Invoice' table on 'CustomerId'.", "Since we want to include customers who may not have any invoices, we will use a LEFT JOIN.", "We will group the results by 'Customer.CustomerId' to aggregate the invoice totals for each customer.", "We will use the HAVING clause to filter out customers whose total invoice amounts exceed 20. We will sum the 'Total' column from the 'Invoice' table and check if it is less than or equal to 20."], "pred_sql": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;", "gold_sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20", "source_tables": ["customer", "invoice"]}
{"sample_id": 858, "db_id": "chinook_1", "question": "What are the last names of customers without invoice totals exceeding 20?", "rationale": ["Identify the relevant tables: Customer and Invoice.", "We need to find customers, so we will select from the Customer table.", "We need to check the invoice totals, so we will join the Invoice table on CustomerId.", "Use a LEFT JOIN to include customers who may not have any invoices.", "Group the results by CustomerId to aggregate the invoice totals for each customer.", "Use the HAVING clause to filter customers whose total invoice amounts do not exceed 20."], "pred_sql": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;", "gold_sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20", "source_tables": ["customer", "invoice"]}
{"sample_id": 859, "db_id": "chinook_1", "question": "Find the first names of all customers that live in Brazil and have an invoice.", "rationale": ["Identify the relevant tables: Customer and Invoice.", "We need to find customers who have invoices, so we will join the Customer table with the Invoice table on the CustomerId.", "We need to filter the customers based on their country, specifically those living in Brazil.", "Select the distinct first names of the customers that meet the criteria."], "pred_sql": "SELECT DISTINCT Customer.FirstName \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Brazil';", "gold_sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  'Brazil'", "source_tables": ["customer", "invoice"]}
{"sample_id": 860, "db_id": "chinook_1", "question": "What are the different first names for customers from Brazil who have also had an invoice?", "rationale": ["Identify the relevant tables: Customer and Invoice.", "We need to find customers from Brazil, so we will filter the Customer table by the Country column.", "We also need to ensure that these customers have had an invoice, which means we need to join the Customer table with the Invoice table on the CustomerId.", "Select the distinct first names of customers who meet both criteria."], "pred_sql": "SELECT DISTINCT Customer.FirstName FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId WHERE Customer.Country = 'Brazil';", "gold_sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  'Brazil'", "source_tables": ["customer", "invoice"]}
{"sample_id": 861, "db_id": "chinook_1", "question": "Find the address of all customers that live in Germany and have invoice.", "rationale": ["Identify the relevant tables: Customer and Invoice.", "Determine the relationship between the tables: Customer has a foreign key relationship with Invoice through CustomerId.", "Select the address fields from the Customer table: Address, City, State, Country, and PostalCode.", "Filter the results to include only customers who live in Germany by adding a WHERE clause for Country.", "Ensure that only customers with invoices are included by using a JOIN between Customer and Invoice tables."], "pred_sql": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';", "gold_sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  'Germany'", "source_tables": ["customer", "invoice"]}
{"sample_id": 862, "db_id": "chinook_1", "question": "What are the addresses of customers living in Germany who have had an invoice?", "rationale": ["Identify the relevant tables: Customer and Invoice.", "Determine the relationship between the tables: Customer has a one-to-many relationship with Invoice (one customer can have multiple invoices).", "Select the columns needed: Address, City, State, Country, and PostalCode from the Customer table.", "Filter the results to include only customers from Germany by adding a WHERE clause for the Country column.", "Use JOIN to combine the Customer and Invoice tables based on the CustomerId to ensure we only get customers who have invoices."], "pred_sql": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';", "gold_sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  'Germany'", "source_tables": ["customer", "invoice"]}
{"sample_id": 863, "db_id": "chinook_1", "question": "List the phone numbers of all employees.", "rationale": ["Identify the table that contains employee information, which is the 'Employee' table.", "Determine the specific column needed for the output, which is 'Phone' for the phone numbers of employees.", "Construct the SQL query to select the 'Phone' column from the 'Employee' table."], "pred_sql": "SELECT Phone FROM Employee;", "gold_sql": "SELECT Phone FROM EMPLOYEE", "source_tables": ["employee"]}
{"sample_id": 864, "db_id": "chinook_1", "question": "What are the phone numbers for each employee?", "rationale": ["Identify the table that contains employee information, which is the 'Employee' table.", "Determine the specific column needed for the query, which is 'Phone' for the phone numbers of employees.", "Construct the SQL query to select the 'Phone' column from the 'Employee' table."], "pred_sql": "SELECT Phone FROM Employee;", "gold_sql": "SELECT Phone FROM EMPLOYEE", "source_tables": ["employee"]}
{"sample_id": 865, "db_id": "chinook_1", "question": "How many tracks are in the AAC audio file media type?", "rationale": ["Identify the relevant table: The 'Track' table contains information about tracks, including their media type.", "Determine the condition: We need to filter tracks based on the media type, which is stored in the 'MediaTypeId' column of the 'Track' table.", "Find the specific media type: We need to find the 'MediaTypeId' for 'AAC audio file' from the 'MediaType' table.", "Construct the SQL query: Use a subquery to get the 'MediaTypeId' for 'AAC audio file' and count the number of tracks in the 'Track' table that match this media type."], "pred_sql": "SELECT COUNT(*) AS TrackCount FROM Track WHERE MediaTypeId = (SELECT MediaTypeId FROM MediaType WHERE Name = 'AAC audio file')", "gold_sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  'AAC audio file'", "source_tables": ["mediatype", "track"]}
{"sample_id": 866, "db_id": "chinook_1", "question": "Count the number of tracks that are of the media type \"AAC audio file\".", "rationale": ["Identify the relevant tables: Track and MediaType.", "Determine the relationship between the tables: Track has a foreign key MediaTypeId that references MediaType.", "We need to count the number of tracks, so we will use the COUNT() function.", "We need to filter the tracks based on the media type, specifically 'AAC audio file'.", "Join the Track table with the MediaType table on MediaTypeId to access the media type names.", "Construct the SQL query to select the count of tracks where the media type name matches 'AAC audio file'."], "pred_sql": "SELECT COUNT(*) AS TrackCount FROM Track INNER JOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId WHERE MediaType.Name = 'AAC audio file';", "gold_sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  'AAC audio file'", "source_tables": ["mediatype", "track"]}
{"sample_id": 867, "db_id": "chinook_1", "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?", "rationale": ["Identify the relevant tables: Track and Genre are needed to get track durations and their genres.", "Determine the relationship between the tables: Track has a foreign key GenreId that links to Genre.", "Select the average duration: Use the AVG() function to calculate the average of the Milliseconds column from the Track table.", "Filter the results: Use a WHERE clause to include only tracks that belong to the Latin or Pop genres by checking the Genre.Name column."], "pred_sql": "SELECT AVG(Track.Milliseconds) AS AverageDuration\nFROM Track\nJOIN Genre ON Track.GenreId = Genre.GenreId\nWHERE Genre.Name IN ('Latin', 'Pop');", "gold_sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Latin' OR T1.Name  =  'Pop'", "source_tables": ["genre", "track"]}
{"sample_id": 868, "db_id": "chinook_1", "question": "Find the average millisecond length of Latin and Pop tracks.", "rationale": ["Identify the relevant tables: Track and Genre.", "Determine the columns needed: Track.Milliseconds for the average length and Genre.Name to filter by genre.", "Join the Track table with the Genre table on the GenreId to access genre names.", "Use the WHERE clause to filter for Latin and Pop genres.", "Calculate the average of the Milliseconds column using the AVG() function."], "pred_sql": "SELECT AVG(Track.Milliseconds) AS AverageLength FROM Track JOIN Genre ON Track.GenreId = Genre.GenreId WHERE Genre.Name IN ('Latin', 'Pop');", "gold_sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Latin' OR T1.Name  =  'Pop'", "source_tables": ["genre", "track"]}
{"sample_id": 869, "db_id": "chinook_1", "question": "Please show the employee first names and ids of employees who serve at least 10 customers.", "rationale": ["We need to select the first names and IDs of employees.", "The relevant table for employee information is the Employee table, which contains EmployeeId and FirstName.", "We also need to consider the Customer table to find out how many customers each employee serves.", "To link employees to customers, we can use the SupportRepId in the Customer table, which references EmployeeId in the Employee table.", "We will perform a JOIN between the Employee and Customer tables on the EmployeeId and SupportRepId fields.", "Next, we will group the results by EmployeeId to aggregate the number of customers served by each employee.", "Finally, we will use the HAVING clause to filter the groups to only include those employees who serve at least 10 customers."], "pred_sql": "SELECT e.FirstName, e.EmployeeId \nFROM Employee e \nJOIN Customer c ON e.EmployeeId = c.SupportRepId \nGROUP BY e.EmployeeId \nHAVING COUNT(c.CustomerId) >= 10;", "gold_sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "source_tables": ["customer", "employee"]}
{"sample_id": 870, "db_id": "chinook_1", "question": "What are the first names and support rep ids for employees serving 10 or more customers?", "rationale": ["Identify the relevant tables: Employee and Customer.", "We need to find the first names of employees and their support representative IDs.", "Join the Employee table with the Customer table on the SupportRepId field.", "Group the results by EmployeeId to count the number of customers each employee serves.", "Use the HAVING clause to filter for employees serving 10 or more customers."], "pred_sql": "SELECT e.FirstName, e.EmployeeId AS SupportRepId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;", "gold_sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "source_tables": ["customer", "employee"]}
{"sample_id": 871, "db_id": "chinook_1", "question": "Please show the employee last names that serves no more than 20 customers.", "rationale": ["We need to select the last names of employees.", "The relevant table for employee information is the Employee table, which contains the LastName column.", "To find out how many customers each employee serves, we need to join the Employee table with the Customer table on the SupportRepId column.", "We will group the results by EmployeeId to aggregate the number of customers served by each employee.", "Finally, we will use the HAVING clause to filter the groups to only include those employees who serve 20 or fewer customers."], "pred_sql": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;", "gold_sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "source_tables": ["customer", "employee"]}
{"sample_id": 872, "db_id": "chinook_1", "question": "What are the last names of employees who serve at most 20 customers?", "rationale": ["Identify the relevant tables: Employee and Customer.", "We need to find employees who serve customers, so we will join the Employee table with the Customer table on the SupportRepId.", "We will group the results by EmployeeId to count the number of customers each employee serves.", "We will use the HAVING clause to filter those employees who serve at most 20 customers."], "pred_sql": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;", "gold_sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "source_tables": ["customer", "employee"]}
{"sample_id": 873, "db_id": "chinook_1", "question": "Please list all album titles in alphabetical order.", "rationale": ["Identify the table that contains album titles, which is the Album table.", "Select the 'Title' column from the Album table to get the album titles.", "To list the titles in alphabetical order, use the ORDER BY clause with 'Title' and specify ASC for ascending order."], "pred_sql": "SELECT Title FROM Album ORDER BY Title ASC;", "gold_sql": "SELECT Title FROM ALBUM ORDER BY Title", "source_tables": ["album"]}
{"sample_id": 874, "db_id": "chinook_1", "question": "What are all the album titles, in alphabetical order?", "rationale": ["Identify the table that contains album titles, which is the Album table.", "Select the 'Title' column from the Album table to get the album titles.", "To get the results in alphabetical order, use the ORDER BY clause on the 'Title' column in ascending order."], "pred_sql": "SELECT Title FROM Album ORDER BY Title ASC;", "gold_sql": "SELECT Title FROM ALBUM ORDER BY Title", "source_tables": ["album"]}
{"sample_id": 875, "db_id": "chinook_1", "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "rationale": ["We need to select the artist's ID and name, so we start with SELECT a.ArtistId, a.Name.", "The data we need is in the Artist and Album tables, so we will join these two tables on the ArtistId.", "We will group the results by artist ID and name to count the number of albums each artist has.", "We need to filter the results to only include artists with at least 3 albums, so we use HAVING COUNT(al.AlbumId) >= 3.", "Finally, we want the results in alphabetical order by artist name, so we add ORDER BY a.Name ASC."], "pred_sql": "SELECT a.ArtistId, a.Name \nFROM Artist a \nJOIN Album al ON a.ArtistId = al.ArtistId \nGROUP BY a.ArtistId, a.Name \nHAVING COUNT(al.AlbumId) >= 3 \nORDER BY a.Name ASC;", "gold_sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "source_tables": ["artist", "album"]}
{"sample_id": 876, "db_id": "chinook_1", "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "rationale": ["We need to find artists who have 3 or more albums.", "To do this, we will join the Artist table with the Album table on the ArtistId.", "We will group the results by ArtistId and Name to count the number of albums each artist has.", "We will use the HAVING clause to filter out artists with fewer than 3 albums.", "Finally, we will order the results alphabetically by the artist's name."], "pred_sql": "SELECT Artist.Name, Artist.ArtistId \nFROM Artist \nJOIN Album ON Artist.ArtistId = Album.ArtistId \nGROUP BY Artist.ArtistId, Artist.Name \nHAVING COUNT(Album.AlbumId) >= 3 \nORDER BY Artist.Name ASC;", "gold_sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "source_tables": ["artist", "album"]}
{"sample_id": 877, "db_id": "chinook_1", "question": "Find the names of artists that do not have any albums.", "rationale": ["Identify the table that contains artist information, which is the Artist table.", "Determine the relevant column for artist names, which is the Name column in the Artist table.", "Identify the table that contains album information, which is the Album table.", "To find artists without albums, we need to check which ArtistIds in the Artist table do not exist in the Album table.", "Construct a subquery that selects ArtistIds from the Album table.", "Use the NOT IN clause to filter out artists whose ArtistIds are present in the Album table."], "pred_sql": "SELECT Name FROM Artist WHERE ArtistId NOT IN (SELECT ArtistId FROM Album)", "gold_sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "source_tables": ["artist", "album"]}
{"sample_id": 878, "db_id": "chinook_1", "question": "What are the names of artists who have not released any albums?", "rationale": ["Identify the relevant table: We need to find information from the Artist table.", "Determine the condition: We want artists who have not released any albums, which means we need to find artists whose ArtistId is not present in the Album table.", "Construct a subquery: Create a subquery that selects distinct ArtistIds from the Album table to identify artists who have released albums.", "Combine the main query with the subquery: Use the NOT IN clause to filter out artists from the Artist table whose ArtistId is in the list of ArtistIds from the Album table."], "pred_sql": "SELECT Name FROM Artist WHERE ArtistId NOT IN (SELECT DISTINCT ArtistId FROM Album)", "gold_sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "source_tables": ["artist", "album"]}
{"sample_id": 879, "db_id": "chinook_1", "question": "What is the average unit price of rock tracks?", "rationale": ["Identify the relevant table: The 'Track' table contains the 'UnitPrice' and 'GenreId' columns.", "Determine the genre of interest: The user is interested in 'rock' tracks.", "Find the GenreId for 'rock': This requires a subquery to the 'Genre' table to get the GenreId where the Name is 'Rock'.", "Calculate the average unit price: Use the AVG() function on the 'UnitPrice' column in the 'Track' table, filtering by the GenreId obtained from the subquery."], "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');", "gold_sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock'", "source_tables": ["genre", "track"]}
{"sample_id": 880, "db_id": "chinook_1", "question": "Find the average unit price of tracks from the Rock genre.", "rationale": ["Identify the relevant tables: Track and Genre.", "Determine the relationship between the tables: Track has a foreign key GenreId that references Genre.", "We need to calculate the average unit price of tracks, so we will use the AVG() function on the UnitPrice column from the Track table.", "To filter the tracks by genre, we will join the Track table with the Genre table on the GenreId column.", "We will add a WHERE clause to filter for the Rock genre by checking the Name column in the Genre table."], "pred_sql": "SELECT AVG(t.UnitPrice) AS AverageUnitPrice\nFROM Track t\nJOIN Genre g ON t.GenreId = g.GenreId\nWHERE g.Name = 'Rock';", "gold_sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock'", "source_tables": ["genre", "track"]}
{"sample_id": 881, "db_id": "chinook_1", "question": "What are the duration of the longest and shortest pop tracks in milliseconds?", "rationale": ["Identify the relevant table: The 'Track' table contains the duration of tracks and their associated genres.", "Determine the genre of interest: The user is interested in 'Pop' tracks, so we need to filter by this genre.", "Find the genre ID for 'Pop': We will use a subquery to get the GenreId from the 'Genre' table where the Name is 'Pop'.", "Calculate the longest and shortest durations: We will use the MAX() and MIN() functions on the Milliseconds column in the 'Track' table, filtering by the GenreId obtained from the subquery."], "pred_sql": "SELECT MAX(Milliseconds) AS LongestDuration, MIN(Milliseconds) AS ShortestDuration FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Pop');", "gold_sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Pop'", "source_tables": ["genre", "track"]}
{"sample_id": 882, "db_id": "chinook_1", "question": "Find the maximum and minimum millisecond lengths of pop tracks.", "rationale": ["Identify the relevant table: The 'Track' table contains the 'Milliseconds' column which indicates the length of the tracks.", "Determine the condition: We need to filter the tracks by genre, specifically for 'Pop'.", "Find the GenreId for 'Pop': This requires a subquery to select the GenreId from the 'Genre' table where the Name is 'Pop'.", "Construct the main query: Use the MAX() and MIN() functions to find the maximum and minimum values of the 'Milliseconds' column for the filtered tracks.", "Combine the subquery with the main query to get the desired results."], "pred_sql": "SELECT MAX(Milliseconds) AS MaxLength, MIN(Milliseconds) AS MinLength FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Pop');", "gold_sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Pop'", "source_tables": ["genre", "track"]}
{"sample_id": 883, "db_id": "chinook_1", "question": "What are the birth dates of employees living in Edmonton?", "rationale": ["Identify the table that contains employee information, which is the Employee table.", "Determine the relevant column for the birth date, which is BirthDate.", "Filter the employees based on their city of residence, which is specified as 'Edmonton'.", "Construct the SQL query to select the BirthDate from the Employee table where the City is 'Edmonton'."], "pred_sql": "SELECT BirthDate FROM Employee WHERE City = 'Edmonton';", "gold_sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  'Edmonton'", "source_tables": ["employee"]}
{"sample_id": 884, "db_id": "chinook_1", "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.", "rationale": ["Identify the table that contains employee information, which is the Employee table.", "Determine the specific column needed, which is BirthDate, to retrieve the birth dates of employees.", "Apply a filter to select only those employees who live in the city of Edmonton by using a WHERE clause."], "pred_sql": "SELECT BirthDate FROM Employee WHERE City = 'Edmonton';", "gold_sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  'Edmonton'", "source_tables": ["employee"]}
{"sample_id": 885, "db_id": "chinook_1", "question": "What are the distinct unit prices of all tracks?", "rationale": ["Identify the table that contains the relevant data: The 'Track' table contains the 'UnitPrice' column.", "Determine the requirement: We need distinct unit prices, which means we should use the DISTINCT keyword to avoid duplicate values.", "Construct the SQL query: The query will select the distinct unit prices from the 'Track' table."], "pred_sql": "SELECT DISTINCT UnitPrice FROM Track;", "gold_sql": "SELECT distinct(UnitPrice) FROM TRACK", "source_tables": ["track"]}
{"sample_id": 886, "db_id": "chinook_1", "question": "Find the distinct unit prices for tracks.", "rationale": ["Identify the table that contains the unit prices, which is the 'Track' table.", "Use the SELECT statement to specify that we want to retrieve the 'UnitPrice' column.", "To ensure that we only get unique values, use the DISTINCT keyword before the column name."], "pred_sql": "SELECT DISTINCT UnitPrice FROM Track;", "gold_sql": "SELECT distinct(UnitPrice) FROM TRACK", "source_tables": ["track"]}
{"sample_id": 887, "db_id": "chinook_1", "question": "How many artists do not have any album?", "rationale": ["Identify the main goal: Count the number of artists without any albums.", "To find artists without albums, we need to check which ArtistIds in the Artist table do not exist in the Album table.", "Use a subquery to select distinct ArtistIds from the Album table.", "Use the NOT IN clause to filter out those ArtistIds from the Artist table.", "Finally, count the remaining artists using COUNT(*) and alias the result as ArtistCount."], "pred_sql": "SELECT COUNT(*) AS ArtistCount FROM Artist WHERE ArtistId NOT IN (SELECT DISTINCT ArtistId FROM Album);", "gold_sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "source_tables": ["artist", "album"]}
{"sample_id": 888, "db_id": "chinook_1", "question": "Cound the number of artists who have not released an album.", "rationale": ["Identify the main goal: Count the number of artists who have not released an album.", "To find artists without albums, we need to check which ArtistIds in the Artist table do not exist in the Album table.", "Use a subquery to select distinct ArtistIds from the Album table.", "Use the NOT IN clause to filter out those ArtistIds from the Artist table.", "Finally, count the remaining artists using COUNT(*) and alias the result as NumberOfArtistsWithoutAlbums."], "pred_sql": "SELECT COUNT(*) AS NumberOfArtistsWithoutAlbums\nFROM Artist\nWHERE ArtistId NOT IN (SELECT DISTINCT ArtistId FROM Album);", "gold_sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "source_tables": ["artist", "album"]}
{"sample_id": 889, "db_id": "chinook_1", "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?", "rationale": ["We need to find album titles that contain tracks from both 'Reggae' and 'Rock' genres.", "To do this, we will join the Album table with the Track table on AlbumId, and then join the Track table with the Genre table on GenreId.", "We will filter the results to only include genres that are either 'Reggae' or 'Rock' using a WHERE clause.", "Since we want albums that contain both genres, we will group the results by AlbumId and use the HAVING clause to ensure that the count of distinct genres is 2."], "pred_sql": "SELECT DISTINCT a.Title \nFROM Album a \nJOIN Track t ON a.AlbumId = t.AlbumId \nJOIN Genre g ON t.GenreId = g.GenreId \nWHERE g.Name IN ('Reggae', 'Rock') \nGROUP BY a.AlbumId \nHAVING COUNT(DISTINCT g.Name) = 2;", "gold_sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "source_tables": ["genre", "track", "album"]}
{"sample_id": 890, "db_id": "chinook_1", "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.", "rationale": ["We need to find album titles that contain tracks from both the Reggae and Rock genres.", "To do this, we will join the Album table with the Track table on AlbumId, since each track belongs to an album.", "Next, we will join the Track table with the Genre table on GenreId to access the genre names associated with each track.", "We will filter the results to include only those tracks that belong to either the Reggae or Rock genres using a WHERE clause with the IN operator.", "To ensure that we only get albums that contain tracks from both genres, we will group the results by AlbumId and use the HAVING clause to count distinct genre names, ensuring that the count equals 2 (indicating both genres are present).", "Finally, we will select the distinct titles of the albums that meet these criteria."], "pred_sql": "SELECT DISTINCT a.Title\nFROM Album a\nJOIN Track t ON a.AlbumId = t.AlbumId\nJOIN Genre g ON t.GenreId = g.GenreId\nWHERE g.Name IN ('Reggae', 'Rock')\nGROUP BY a.AlbumId\nHAVING COUNT(DISTINCT g.Name) = 2;", "gold_sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "source_tables": ["genre", "track", "album"]}
{"sample_id": 891, "db_id": "insurance_fnol", "question": "Find all the phone numbers.", "rationale": ["Identify the table that contains phone numbers, which is 'Available_Policies'.", "Determine the specific column that holds the phone numbers, which is 'Customer_Phone'.", "Construct the SQL query to select the 'Customer_Phone' from the 'Available_Policies' table."], "pred_sql": "SELECT Customer_Phone FROM Available_Policies;", "gold_sql": "SELECT customer_phone FROM available_policies", "source_tables": ["available_policies"]}
{"sample_id": 892, "db_id": "insurance_fnol", "question": "What are all the phone numbers?", "rationale": ["Identify the table that contains phone numbers, which is 'Available_Policies'.", "Select the column 'Customer_Phone' from the 'Available_Policies' table to retrieve all phone numbers."], "pred_sql": "SELECT Customer_Phone FROM Available_Policies;", "gold_sql": "SELECT customer_phone FROM available_policies", "source_tables": ["available_policies"]}
{"sample_id": 893, "db_id": "insurance_fnol", "question": "What are the customer phone numbers under the policy \"Life Insurance\"?", "rationale": ["Identify the relevant tables: Available_Policies, Customers_Policies, and Services are needed to find customer phone numbers related to a specific policy.", "We need to join the Available_Policies table with the Customers_Policies table on Policy_ID to link policies to customers.", "Next, we join the Services table to filter the policies by the service name 'Life Insurance'.", "We select the Customer_Phone from the Available_Policies table, ensuring to use DISTINCT to avoid duplicate phone numbers in the result."], "pred_sql": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Services s ON ap.policy_type_code = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';", "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  'Life Insurance'", "source_tables": ["available_policies"]}
{"sample_id": 894, "db_id": "insurance_fnol", "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?", "rationale": ["Identify the relevant tables: Available_Policies, Customers_Policies, and Services are needed to find the phone numbers of customers using a specific policy.", "We need to join the Available_Policies table with the Customers_Policies table on Policy_ID to link policies to customers.", "Next, we join the Services table to filter the policies by the service name 'Life Insurance'.", "We select the Customer_Phone from the Available_Policies table, ensuring to use DISTINCT to avoid duplicate phone numbers in the result."], "pred_sql": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Services s ON ap.policy_type_code = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';", "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  'Life Insurance'", "source_tables": ["available_policies"]}
{"sample_id": 895, "db_id": "insurance_fnol", "question": "Which policy type has the most records in the database?", "rationale": ["Identify the table that contains the policy types, which is the Available_Policies table.", "We need to count the number of records for each policy type, so we will use the COUNT() function.", "To group the records by policy type, we will use the GROUP BY clause on the policy_type_code column.", "To find out which policy type has the most records, we will order the results in descending order based on the count of records.", "Finally, we will limit the results to only the top record using LIMIT 1."], "pred_sql": "SELECT policy_type_code, COUNT(*) as record_count \nFROM Available_Policies \nGROUP BY policy_type_code \nORDER BY record_count DESC \nLIMIT 1;", "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["available_policies"]}
{"sample_id": 896, "db_id": "insurance_fnol", "question": "Which policy type appears most frequently in the available policies?", "rationale": ["Identify the relevant table: Available_Policies contains the policy types.", "We need to count the occurrences of each policy type, so we will use the COUNT() function.", "Group the results by policy type using GROUP BY clause to aggregate the counts for each type.", "Order the results in descending order of frequency to get the most common policy type first using ORDER BY clause.", "Limit the results to only the top entry using LIMIT 1 to get the most frequently appearing policy type."], "pred_sql": "SELECT policy_type_code, COUNT(*) as frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;", "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["available_policies"]}
{"sample_id": 897, "db_id": "insurance_fnol", "question": "What are all the customer phone numbers under the most popular policy type?", "rationale": ["Identify the relevant tables: Available_Policies for policy details and Customers_Policies for customer associations.", "We need to find the most popular policy type, which requires counting the occurrences of each policy type in the Customers_Policies table.", "Group the results by policy type code and count the number of occurrences for each type.", "Order the results by the count in descending order to find the most popular policy type.", "Limit the results to 1 to get only the most popular policy type.", "Join the Available_Policies table with Customers_Policies to get the customer phone numbers associated with the most popular policy type.", "Select distinct customer phone numbers to avoid duplicates."], "pred_sql": "SELECT DISTINCT ap.Customer_Phone\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nJOIN (SELECT policy_type_code, COUNT(*) as policy_count\n      FROM Available_Policies\n      JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID\n      GROUP BY policy_type_code\n      ORDER BY policy_count DESC\n      LIMIT 1) as popular_policy ON ap.policy_type_code = popular_policy.policy_type_code;", "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["available_policies"]}
{"sample_id": 898, "db_id": "insurance_fnol", "question": "Find the phone numbers of customers using the most common policy type among the available policies.", "rationale": ["Identify the relevant tables: Customers, Customers_Policies, and Available_Policies are needed to find customer phone numbers and their associated policies.", "Join the Customers table with Customers_Policies to link customers to their policies using Customer_ID.", "Join the resulting table with Available_Policies to access the policy type codes associated with each customer.", "To find the most common policy type, use a subquery that groups the Available_Policies by policy_type_code and counts the occurrences, ordering by count in descending order and limiting the result to 1.", "Filter the main query to only include customers whose policies match the most common policy type identified in the subquery."], "pred_sql": "SELECT DISTINCT c.Customer_Phone\nFROM Customers c\nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID\nJOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID\nWHERE ap.policy_type_code = (\n    SELECT policy_type_code\n    FROM Available_Policies\n    GROUP BY policy_type_code\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["available_policies"]}
{"sample_id": 899, "db_id": "insurance_fnol", "question": "Find the policy type used by more than 4 customers.", "rationale": ["Identify the relevant tables: Available_Policies and Customers_Policies are needed to find the policy types and their associated customers.", "Join the Available_Policies table with the Customers_Policies table on the Policy_ID to link policies to customers.", "Group the results by policy_type_code to aggregate the number of unique customers for each policy type.", "Use the HAVING clause to filter the groups, selecting only those policy types that are associated with more than 4 distinct customers."], "pred_sql": "SELECT ap.policy_type_code\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nGROUP BY ap.policy_type_code\nHAVING COUNT(DISTINCT cp.Customer_ID) > 4;", "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "source_tables": ["available_policies"]}
{"sample_id": 900, "db_id": "insurance_fnol", "question": "Find the policy types more than 4 customers use. Show their type code.", "rationale": ["Identify the relevant tables: Customers_Policies and Available_Policies are needed to find the policy types and their usage by customers.", "Join the Customers_Policies table with the Available_Policies table on the Policy_ID to access the policy type codes.", "Group the results by policy_type_code to aggregate the number of distinct customers using each policy type.", "Use the HAVING clause to filter the groups to only include those with more than 4 distinct customers."], "pred_sql": "SELECT ap.policy_type_code\nFROM Customers_Policies cp\nJOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID\nGROUP BY ap.policy_type_code\nHAVING COUNT(DISTINCT cp.Customer_ID) > 4;", "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "source_tables": ["available_policies"]}
{"sample_id": 901, "db_id": "insurance_fnol", "question": "Find the total and average amount of settlements.", "rationale": ["Identify the table that contains the settlement amounts, which is the 'Settlements' table.", "To find the total amount of settlements, use the SUM() function on the 'Settlement_Amount' column.", "To find the average amount of settlements, use the AVG() function on the 'Settlement_Amount' column.", "Combine both calculations in a single SELECT statement to retrieve both the total and average amounts."], "pred_sql": "SELECT SUM(Settlement_Amount) AS Total_Settlement_Amount, AVG(Settlement_Amount) AS Average_Settlement_Amount FROM Settlements;", "gold_sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "source_tables": ["settlements"]}
{"sample_id": 902, "db_id": "insurance_fnol", "question": "Return the sum and average of all settlement amounts.", "rationale": ["Identify the table that contains the settlement amounts, which is the 'Settlements' table.", "To calculate the sum and average of the settlement amounts, we will use the SQL aggregate functions SUM() and AVG().", "We will select the sum of 'Settlement_Amount' and the average of 'Settlement_Amount' from the 'Settlements' table.", "The final SQL query will include both calculations in the SELECT statement."], "pred_sql": "SELECT SUM(Settlement_Amount) AS Total_Settlement_Amount, AVG(Settlement_Amount) AS Average_Settlement_Amount FROM Settlements;", "gold_sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "source_tables": ["settlements"]}
{"sample_id": 903, "db_id": "insurance_fnol", "question": "Find the name of services that have been used for more than 2 times in first notification of loss.", "rationale": ["Identify the relevant tables: First_Notification_of_Loss and Services.", "We need to find services that have been used more than 2 times, so we will count the occurrences of each service in the First_Notification_of_Loss table.", "Join the First_Notification_of_Loss table with the Services table on the Service_ID to get the service names.", "Group the results by the service name to aggregate the counts.", "Use the HAVING clause to filter the groups where the count of FNOL_ID is greater than 2."], "pred_sql": "SELECT Services.Service_name\nFROM First_Notification_of_Loss\nJOIN Services ON First_Notification_of_Loss.Service_ID = Services.Service_ID\nGROUP BY Services.Service_name\nHAVING COUNT(First_Notification_of_Loss.FNOL_ID) > 2;", "gold_sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "source_tables": ["services", "first_notification_of_loss"]}
{"sample_id": 904, "db_id": "insurance_fnol", "question": "Which services have been used more than twice in first notification of loss? Return the service name.", "rationale": ["Identify the relevant tables: First_Notification_of_Loss and Services.", "We need to find services that have been used more than twice, so we will count the occurrences of each service in the First_Notification_of_Loss table.", "Join the First_Notification_of_Loss table with the Services table on the Service_ID to get the service names.", "Group the results by the service name to aggregate the counts.", "Use the HAVING clause to filter the groups where the count of FNOL_ID is greater than 2."], "pred_sql": "SELECT Services.Service_name\nFROM First_Notification_of_Loss\nJOIN Services ON First_Notification_of_Loss.Service_ID = Services.Service_ID\nGROUP BY Services.Service_name\nHAVING COUNT(First_Notification_of_Loss.FNOL_ID) > 2;", "gold_sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "source_tables": ["services", "first_notification_of_loss"]}
{"sample_id": 905, "db_id": "insurance_fnol", "question": "What is the effective date of the claim that has the largest amount of total settlement?", "rationale": ["We need to find the effective date of the claim with the largest total settlement amount.", "To do this, we will join the Claims table with the Settlements table on the Claim_ID.", "Next, we will group the results by Claim_ID to calculate the total settlement amount for each claim using SUM(Settlements.Settlement_Amount).", "We will then order the results in descending order to get the claim with the largest total settlement amount at the top.", "Finally, we will limit the results to 1 to get only the effective date of that claim."], "pred_sql": "SELECT Claims.Effective_Date\nFROM Claims\nJOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID\nGROUP BY Claims.Claim_ID\nORDER BY SUM(Settlements.Settlement_Amount) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "source_tables": ["claims", "settlements"]}
{"sample_id": 906, "db_id": "insurance_fnol", "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.", "rationale": ["We need to find the claim with the largest total settlement amount.", "To do this, we will join the Claims table with the Settlements table on the Claim_ID.", "We will group the results by Claim_ID to calculate the total settlement amount for each claim.", "We will use the SUM function to calculate the total settlement amount for each claim.", "Next, we will order the results in descending order based on the total settlement amount.", "Finally, we will limit the results to only the top entry to get the claim with the largest total settlement amount, and select the Effective_Date of that claim."], "pred_sql": "SELECT Claims.Effective_Date\nFROM Claims\nJOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID\nGROUP BY Claims.Claim_ID\nORDER BY SUM(Settlements.Settlement_Amount) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "source_tables": ["claims", "settlements"]}
{"sample_id": 907, "db_id": "insurance_fnol", "question": "How many policies are listed for the customer named \"Dayana Robel\"?", "rationale": ["Identify the relevant tables: Customers and Customers_Policies.", "We need to count the number of policies associated with a specific customer, so we will use a JOIN between Customers and Customers_Policies on Customer_ID.", "Filter the results to only include the customer named 'Dayana Robel'.", "Use the COUNT() function to count the number of policies for the specified customer."], "pred_sql": "SELECT COUNT(*) AS Policy_Count FROM Customers_Policies CP JOIN Customers C ON CP.Customer_ID = C.Customer_ID WHERE C.Customer_name = 'Dayana Robel';", "gold_sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Dayana Robel'", "source_tables": ["customers", "customers_policies"]}
{"sample_id": 908, "db_id": "insurance_fnol", "question": "Count the total number of policies used by the customer named \"Dayana Robel\".", "rationale": ["Identify the relevant tables: Customers and Customers_Policies.", "We need to count the total number of policies, so we will use the COUNT() function.", "Join the Customers table with the Customers_Policies table on Customer_ID to link customers with their policies.", "Filter the results to only include the customer named 'Dayana Robel' using a WHERE clause."], "pred_sql": "SELECT COUNT(*) AS total_policies\nFROM Customers c\nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID\nWHERE c.Customer_name = 'Dayana Robel';", "gold_sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Dayana Robel'", "source_tables": ["customers", "customers_policies"]}
{"sample_id": 909, "db_id": "insurance_fnol", "question": "What is the name of the customer who has the most policies listed?", "rationale": ["Identify the relevant tables: Customers and Customers_Policies.", "We need to find the customer with the most policies, so we will join Customers with Customers_Policies on Customer_ID.", "Group the results by Customer_ID to count the number of policies each customer has.", "Order the results by the count of policies in descending order to get the customer with the most policies at the top.", "Limit the results to 1 to get only the top customer."], "pred_sql": "SELECT C.Customer_name\nFROM Customers C\nJOIN Customers_Policies CP ON C.Customer_ID = CP.Customer_ID\nGROUP BY C.Customer_ID\nORDER BY COUNT(CP.Policy_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "customers_policies"]}
{"sample_id": 910, "db_id": "insurance_fnol", "question": "Which customer uses the most policies? Give me the customer name.", "rationale": ["Identify the relevant tables: Customers and Customers_Policies are needed to find the customer names and their associated policies.", "Join the Customers table with the Customers_Policies table on Customer_ID to link customers with their policies.", "Group the results by Customer_ID to count the number of policies each customer has.", "Order the results in descending order based on the count of policies to find the customer with the most policies.", "Limit the results to 1 to get only the top customer."], "pred_sql": "SELECT Customers.Customer_name\nFROM Customers\nJOIN Customers_Policies ON Customers.Customer_ID = Customers_Policies.Customer_ID\nGROUP BY Customers.Customer_ID\nORDER BY COUNT(Customers_Policies.Policy_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "customers_policies"]}
{"sample_id": 911, "db_id": "insurance_fnol", "question": "What are all the policy types of the customer named \"Dayana Robel\"?", "rationale": ["Identify the relevant tables: Customers, Customers_Policies, and Available_Policies.", "We need to find the policy types associated with a specific customer, so we will join these tables based on their relationships.", "Start with the Customers table to filter by the customer name 'Dayana Robel'.", "Join the Customers_Policies table to link the customer to their policies using Customer_ID.", "Join the Available_Policies table to get the policy types using Policy_ID.", "Select the distinct policy_type_code to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT ap.policy_type_code \nFROM Customers c \nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID \nJOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID \nWHERE c.Customer_name = 'Dayana Robel';", "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  'Dayana Robel'", "source_tables": ["customers", "available_policies", "customers_policies"]}
{"sample_id": 912, "db_id": "insurance_fnol", "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".", "rationale": ["Identify the relevant tables: Customers, Customers_Policies, and Available_Policies.", "We need to find the policy types associated with a specific customer, so we will join these tables based on their relationships.", "Start with the Customers table to filter by the customer name 'Dayana Robel'.", "Join the Customers_Policies table to link the customer to their policies using Customer_ID.", "Join the Available_Policies table to get the policy types using Policy_ID.", "Select the distinct policy types to avoid duplicates."], "pred_sql": "SELECT DISTINCT ap.policy_type_code \nFROM Customers c \nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID \nJOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID \nWHERE c.Customer_name = 'Dayana Robel';", "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  'Dayana Robel'", "source_tables": ["customers", "available_policies", "customers_policies"]}
{"sample_id": 913, "db_id": "insurance_fnol", "question": "What are all the policy types of the customer that has the most policies listed?", "rationale": ["Identify the table that contains policy types, which is 'Available_Policies'.", "Identify the table that links customers to their policies, which is 'Customers_Policies'.", "To find the customer with the most policies, I will group the 'Customers_Policies' table by 'Customer_ID' and count the number of policies for each customer.", "Order the results by the count of policies in descending order and limit the result to 1 to get the customer with the most policies.", "Use the 'Customer_ID' from the previous step to filter the 'Available_Policies' table to get the policy types for that customer."], "pred_sql": "SELECT DISTINCT ap.policy_type_code \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nWHERE cp.Customer_ID = (\n    SELECT Customer_ID \n    FROM Customers_Policies \n    GROUP BY Customer_ID \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)", "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["customers", "available_policies", "customers_policies"]}
{"sample_id": 914, "db_id": "insurance_fnol", "question": "List all the policy types used by the customer enrolled in the most policies.", "rationale": ["Identify the table that contains policy types, which is the Available_Policies table.", "Identify the table that links customers to their policies, which is the Customers_Policies table.", "To find the customer enrolled in the most policies, we need to group the Customers_Policies by Customer_ID and count the number of policies for each customer.", "Order the results by the count of policies in descending order and limit the results to 1 to get the customer with the most policies.", "Join the Available_Policies table with the Customers_Policies table on Policy_ID to get the policy types for the identified customer.", "Select distinct policy types to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT ap.policy_type_code\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nWHERE cp.Customer_ID = (\n    SELECT Customer_ID\n    FROM Customers_Policies\n    GROUP BY Customer_ID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["customers", "available_policies", "customers_policies"]}
{"sample_id": 915, "db_id": "insurance_fnol", "question": "List all the services in the alphabetical order.", "rationale": ["Identify the table that contains the services, which is the 'Services' table.", "Determine the column that holds the service names, which is 'Service_name'.", "Construct a SQL query to select the 'Service_name' from the 'Services' table.", "Add an ORDER BY clause to sort the results in alphabetical order by 'Service_name'."], "pred_sql": "SELECT Service_name FROM Services ORDER BY Service_name ASC;", "gold_sql": "SELECT service_name FROM services ORDER BY service_name", "source_tables": ["services"]}
{"sample_id": 916, "db_id": "insurance_fnol", "question": "Give me a list of all the service names sorted alphabetically.", "rationale": ["Identify the table that contains the service names, which is the 'Services' table.", "Determine the column that holds the service names, which is 'Service_name'.", "Specify that we want to select the 'Service_name' column from the 'Services' table.", "Add an ORDER BY clause to sort the results alphabetically by 'Service_name'.", "Construct the final SQL query to retrieve the desired data."], "pred_sql": "SELECT Service_name FROM Services ORDER BY Service_name ASC;", "gold_sql": "SELECT service_name FROM services ORDER BY service_name", "source_tables": ["services"]}
{"sample_id": 917, "db_id": "insurance_fnol", "question": "How many services are there?", "rationale": ["Identify the table that contains the information about services, which is the 'Services' table.", "To find out how many services there are, we need to count the number of entries in the 'Services' table.", "Use the COUNT() function to count the total number of rows in the 'Services' table.", "Construct the SQL query to select the count from the 'Services' table."], "pred_sql": "SELECT COUNT(*) AS total_services FROM Services;", "gold_sql": "SELECT count(*) FROM services", "source_tables": ["services"]}
{"sample_id": 918, "db_id": "insurance_fnol", "question": "Count the total number of available services.", "rationale": ["Identify the table that contains the services, which is the 'Services' table.", "To count the total number of available services, we need to use the COUNT() function in SQL.", "The SQL query will select the count of all records from the 'Services' table.", "The final SQL query will be 'SELECT COUNT(*) AS total_services FROM Services;' to get the total number of services."], "pred_sql": "SELECT COUNT(*) AS total_services FROM Services;", "gold_sql": "SELECT count(*) FROM services", "source_tables": ["services"]}
{"sample_id": 919, "db_id": "insurance_fnol", "question": "Find the names of users who do not have a first notification of loss record.", "rationale": ["Identify the main table to query from, which is the Customers table, as we need customer names.", "We need to find customers who do not have a record in the First_Notification_of_Loss table.", "To achieve this, we can use a subquery that selects distinct Customer_IDs from the First_Notification_of_Loss table.", "The main query will select Customer_name from the Customers table where the Customer_ID is not in the list of Customer_IDs returned by the subquery."], "pred_sql": "SELECT Customer_name FROM Customers WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM First_Notification_of_Loss)", "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "first_notification_of_loss"]}
{"sample_id": 920, "db_id": "insurance_fnol", "question": "Which customers do not have a first notification of loss record? Give me the customer names.", "rationale": ["Identify the relevant tables: Customers and First_Notification_of_Loss.", "We need to find customers who do not have a record in the First_Notification_of_Loss table.", "To achieve this, we can use a LEFT JOIN between Customers and First_Notification_of_Loss on the Customer_ID.", "After the join, we will filter the results to find records where the Customer_ID in First_Notification_of_Loss is NULL, indicating no associated record exists.", "Finally, we will select the Customer_name from the Customers table for those customers."], "pred_sql": "SELECT Customers.Customer_name FROM Customers LEFT JOIN First_Notification_of_Loss ON Customers.Customer_ID = First_Notification_of_Loss.Customer_ID WHERE First_Notification_of_Loss.Customer_ID IS NULL;", "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "first_notification_of_loss"]}
{"sample_id": 921, "db_id": "insurance_fnol", "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".", "rationale": ["Identify the tables involved: Customers, First_Notification_of_Loss, and Services.", "We need to find customer names, so we will select 'Customer_name' from the Customers table.", "To find the relevant services, we will join the First_Notification_of_Loss table with the Services table using the Service_ID.", "We will also join the Customers table with the First_Notification_of_Loss table using the Customer_ID to link customers to their notifications of loss.", "The condition specifies that we are interested in services named 'Close a policy' or 'Upgrade a policy', so we will use a WHERE clause with the IN operator to filter these services.", "Finally, we will use DISTINCT to ensure that we only get unique customer names in the result."], "pred_sql": "SELECT DISTINCT Customers.Customer_name \nFROM Customers \nJOIN First_Notification_of_Loss ON Customers.Customer_ID = First_Notification_of_Loss.Customer_ID \nJOIN Services ON First_Notification_of_Loss.Service_ID = Services.Service_ID \nWHERE Services.Service_name IN ('Close a policy', 'Upgrade a policy');", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'Close a policy' OR t3.service_name  =  'Upgrade a policy'", "source_tables": ["services", "customers", "first_notification_of_loss"]}
{"sample_id": 922, "db_id": "insurance_fnol", "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.", "rationale": ["Identify the relevant tables: Customers, Customers_Policies, First_Notification_of_Loss, and Services.", "We need to join these tables to connect customers with the services they have used.", "The Customers table contains customer names, which we want to retrieve.", "The Services table contains the service names, and we need to filter for 'Close a policy' and 'Upgrade a policy'.", "Use JOIN clauses to connect Customers to Customers_Policies, then to First_Notification_of_Loss, and finally to Services.", "Use a WHERE clause to filter the services to only those specified in the input query.", "Select DISTINCT to ensure we only get unique customer names."], "pred_sql": "SELECT DISTINCT Customers.Customer_name \nFROM Customers \nJOIN Customers_Policies ON Customers.Customer_ID = Customers_Policies.Customer_ID \nJOIN First_Notification_of_Loss ON Customers_Policies.Customer_ID = First_Notification_of_Loss.Customer_ID \nJOIN Services ON First_Notification_of_Loss.Service_ID = Services.Service_ID \nWHERE Services.Service_name IN ('Close a policy', 'Upgrade a policy');", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'Close a policy' OR t3.service_name  =  'Upgrade a policy'", "source_tables": ["services", "customers", "first_notification_of_loss"]}
{"sample_id": 923, "db_id": "insurance_fnol", "question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".", "rationale": ["Identify the tables needed: Customers, First_Notification_of_Loss, and Services.", "Join the Customers table with First_Notification_of_Loss to link customers to their notifications of loss.", "Join the First_Notification_of_Loss table with Services to get the service names associated with each notification.", "To find customers who have used both services, we need to join the First_Notification_of_Loss table twice (fnol1 and fnol2) to check for both services.", "Filter the results to include only those customers who have used the service 'Close a policy' and the service 'New policy application'.", "Select distinct customer names to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT c.Customer_name \nFROM Customers c \nJOIN First_Notification_of_Loss fnol1 ON c.Customer_ID = fnol1.Customer_ID \nJOIN Services s1 ON fnol1.Service_ID = s1.Service_ID \nJOIN First_Notification_of_Loss fnol2 ON c.Customer_ID = fnol2.Customer_ID \nJOIN Services s2 ON fnol2.Service_ID = s2.Service_ID \nWHERE s1.Service_name = 'Close a policy' \nAND s2.Service_name = 'New policy application';", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'Close a policy' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'New policy application'", "source_tables": ["services", "customers", "first_notification_of_loss"]}
{"sample_id": 924, "db_id": "insurance_fnol", "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.", "rationale": ["Identify the relevant tables: Customers, First_Notification_of_Loss, and Services are needed to find customers and the services they used.", "Join the Customers table with the First_Notification_of_Loss table to link customers to their service notifications.", "Join the Services table to get the names of the services associated with the notifications.", "To find customers who have used both services, we need to join the First_Notification_of_Loss table twice (once for each service).", "Filter the results to include only those customers who have used the service 'Close a policy' and the service 'Upgrade a policy'.", "Select the distinct customer names from the results to avoid duplicates."], "pred_sql": "SELECT DISTINCT c.Customer_name \nFROM Customers c \nJOIN First_Notification_of_Loss fnol1 ON c.Customer_ID = fnol1.Customer_ID \nJOIN Services s1 ON fnol1.Service_ID = s1.Service_ID \nJOIN First_Notification_of_Loss fnol2 ON c.Customer_ID = fnol2.Customer_ID \nJOIN Services s2 ON fnol2.Service_ID = s2.Service_ID \nWHERE s1.Service_name = 'Close a policy' \nAND s2.Service_name = 'Upgrade a policy';", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'Close a policy' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'New policy application'", "source_tables": ["services", "customers", "first_notification_of_loss"]}
{"sample_id": 925, "db_id": "insurance_fnol", "question": "Find the IDs of customers whose name contains \"Diana\".", "rationale": ["Identify the table that contains customer names, which is the 'Customers' table.", "Determine the column that holds the customer names, which is 'Customer_name'.", "Use the SQL SELECT statement to retrieve the 'Customer_ID' from the 'Customers' table.", "Apply a WHERE clause to filter the results where 'Customer_name' contains the substring 'Diana'.", "Use the LIKE operator with wildcards '%' to match any characters before and after 'Diana'."], "pred_sql": "SELECT Customer_ID FROM Customers WHERE Customer_name LIKE '%Diana%';", "gold_sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'", "source_tables": ["customers"]}
{"sample_id": 926, "db_id": "insurance_fnol", "question": "What are the IDs of customers who have \"Diana\" in part of their names?", "rationale": ["Identify the table that contains customer names, which is the 'Customers' table.", "Determine the column that holds the customer names, which is 'Customer_name'.", "To find customers with 'Diana' in their names, use the SQL LIKE operator with wildcards to match any part of the name.", "Construct the SQL SELECT statement to retrieve 'Customer_ID' from the 'Customers' table where 'Customer_name' matches the specified pattern."], "pred_sql": "SELECT Customer_ID FROM Customers WHERE Customer_name LIKE '%Diana%';", "gold_sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'", "source_tables": ["customers"]}
{"sample_id": 927, "db_id": "insurance_fnol", "question": "What are the maximum and minimum settlement amount on record?", "rationale": ["Identify the table that contains the settlement amounts, which is the 'Settlements' table.", "To find the maximum and minimum settlement amounts, we will use the aggregate functions MAX() and MIN().", "We will select the maximum settlement amount and the minimum settlement amount from the 'Settlement_Amount' column in the 'Settlements' table.", "The final SQL query will select both the maximum and minimum settlement amounts in a single query."], "pred_sql": "SELECT MAX(Settlement_Amount) AS Max_Settlement, MIN(Settlement_Amount) AS Min_Settlement FROM Settlements;", "gold_sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "source_tables": ["settlements"]}
{"sample_id": 928, "db_id": "insurance_fnol", "question": "Find the maximum and minimum settlement amount.", "rationale": ["Identify the table that contains the settlement amounts, which is the 'Settlements' table.", "To find the maximum and minimum values, we will use the SQL aggregate functions MAX() and MIN().", "We need to select the maximum and minimum settlement amounts from the 'Settlement_Amount' column in the 'Settlements' table.", "The final SQL query will select both the maximum and minimum settlement amounts in a single query."], "pred_sql": "SELECT MAX(Settlement_Amount) AS Max_Settlement, MIN(Settlement_Amount) AS Min_Settlement FROM Settlements;", "gold_sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "source_tables": ["settlements"]}
{"sample_id": 929, "db_id": "insurance_fnol", "question": "List all the customers in increasing order of IDs.", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "Determine the requirement to list all customers, which means selecting all columns from the 'Customers' table.", "Specify the order in which to list the customers, which is in increasing order of their IDs (Customer_ID).", "Construct the SQL query using SELECT to get all columns, FROM to specify the 'Customers' table, and ORDER BY to sort by 'Customer_ID' in ascending order."], "pred_sql": "SELECT * FROM Customers ORDER BY Customer_ID ASC;", "gold_sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "source_tables": ["customers"]}
{"sample_id": 930, "db_id": "insurance_fnol", "question": "What is the ordered list of customer ids?", "rationale": ["Identify the table that contains customer IDs, which is the 'Customers' table.", "Select the 'Customer_ID' column from the 'Customers' table.", "Order the results by 'Customer_ID' in ascending order."], "pred_sql": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID;", "gold_sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "source_tables": ["customers"]}
{"sample_id": 931, "db_id": "insurance_fnol", "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"", "rationale": ["Identify the relevant tables: Customers and Customers_Policies.", "We need to retrieve the open and close dates of policies, which are in the Customers_Policies table.", "To link the policies to the customer, we will join the Customers table with the Customers_Policies table on Customer_ID.", "We need to filter the customers whose name contains 'Diana', which can be done using the LIKE operator with wildcards.", "Select the Date_Opened and Date_Closed columns from the Customers_Policies table after applying the necessary joins and filters."], "pred_sql": "SELECT cp.Date_Opened, cp.Date_Closed \nFROM Customers c \nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID \nWHERE c.Customer_name LIKE '%Diana%';", "gold_sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE '%Diana%'", "source_tables": ["customers", "customers_policies"]}
{"sample_id": 932, "db_id": "insurance_fnol", "question": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?", "rationale": ["Identify the relevant tables: Customers and Customers_Policies are needed to get customer names and their policy dates.", "We need to select the open and close dates of policies, which are in the Customers_Policies table.", "To find the customer with 'Diana' in their name, we will use a WHERE clause with a LIKE operator on the Customer_name column in the Customers table.", "We will join the Customers table with the Customers_Policies table on Customer_ID to link customers with their policies.", "Finally, we will select the Date_Opened and Date_Closed columns from the Customers_Policies table."], "pred_sql": "SELECT cp.Date_Opened, cp.Date_Closed \nFROM Customers c \nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID \nWHERE c.Customer_name LIKE '%Diana%';", "gold_sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE '%Diana%'", "source_tables": ["customers", "customers_policies"]}
{"sample_id": 933, "db_id": "medicine_enzyme_interaction", "question": "How many kinds of enzymes are there?", "rationale": ["The user wants to know how many kinds of enzymes exist in the database.", "To find the number of distinct enzymes, we need to count the unique entries in the 'id' column of the 'enzyme' table.", "Using COUNT(DISTINCT id) will give us the total number of unique enzymes.", "The final SQL query selects this count and labels it as 'enzyme_count'."], "pred_sql": "SELECT COUNT(DISTINCT id) AS enzyme_count FROM enzyme;", "gold_sql": "SELECT count(*) FROM enzyme", "source_tables": ["enzyme"]}
{"sample_id": 934, "db_id": "medicine_enzyme_interaction", "question": "What is the total count of enzymes?", "rationale": ["Identify the table that contains the data we need, which is the 'enzyme' table.", "To get the total count of enzymes, we will use the COUNT() function in SQL.", "The SQL query will select the count of all records from the 'enzyme' table.", "The final SQL query will be 'SELECT COUNT(*) AS total_count FROM enzyme;' to return the total number of enzymes."], "pred_sql": "SELECT COUNT(*) AS total_count FROM enzyme;", "gold_sql": "SELECT count(*) FROM enzyme", "source_tables": ["enzyme"]}
{"sample_id": 935, "db_id": "medicine_enzyme_interaction", "question": "List the name of enzymes in descending lexicographical order.", "rationale": ["Identify the table that contains the enzyme names, which is the 'enzyme' table.", "Determine the column that holds the enzyme names, which is the 'name' column.", "Specify that we want to select the 'name' column from the 'enzyme' table.", "Add an ORDER BY clause to sort the results in descending lexicographical order."], "pred_sql": "SELECT name FROM enzyme ORDER BY name DESC;", "gold_sql": "SELECT name FROM enzyme ORDER BY name DESC", "source_tables": ["enzyme"]}
{"sample_id": 936, "db_id": "medicine_enzyme_interaction", "question": "What are the names of enzymes in descending order?", "rationale": ["Identify the table that contains the information needed: the 'enzyme' table.", "Determine the specific column to retrieve: the 'name' column from the 'enzyme' table.", "Specify the order of the results: descending order based on the 'name' column.", "Construct the SQL query using SELECT to get the 'name' from 'enzyme' and ORDER BY to sort the results in descending order."], "pred_sql": "SELECT name FROM enzyme ORDER BY name DESC;", "gold_sql": "SELECT name FROM enzyme ORDER BY name DESC", "source_tables": ["enzyme"]}
{"sample_id": 937, "db_id": "medicine_enzyme_interaction", "question": "List the names and the locations that the enzymes can make an effect.", "rationale": ["The user wants to list the names and locations of enzymes.", "We need to select the 'name' and 'Location' columns from the 'enzyme' table.", "The SQL query will use the SELECT statement to retrieve the specified columns from the enzyme table."], "pred_sql": "SELECT name, Location FROM enzyme;", "gold_sql": "SELECT name ,  LOCATION FROM enzyme", "source_tables": ["enzyme"]}
{"sample_id": 938, "db_id": "medicine_enzyme_interaction", "question": "What are the names and locations of all enzymes listed?", "rationale": ["Identify the table that contains the required information: the 'enzyme' table.", "Determine the specific columns needed: 'name' and 'Location'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'enzyme' table."], "pred_sql": "SELECT name, Location FROM enzyme;", "gold_sql": "SELECT name ,  LOCATION FROM enzyme", "source_tables": ["enzyme"]}
{"sample_id": 939, "db_id": "medicine_enzyme_interaction", "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?", "rationale": ["Identify the table that contains the OMIM values, which is the 'enzyme' table.", "Determine the specific column that holds the OMIM values, which is 'OMIM'.", "Use the SQL aggregate function MAX() to find the maximum value of the OMIM column.", "Construct the SQL query to select the maximum OMIM value from the enzyme table."], "pred_sql": "SELECT MAX(OMIM) AS max_omim_value FROM enzyme;", "gold_sql": "SELECT max(OMIM) FROM enzyme", "source_tables": ["enzyme"]}
{"sample_id": 940, "db_id": "medicine_enzyme_interaction", "question": "What is the maximum OMIM value in the database?", "rationale": ["Identify the table that contains the OMIM values, which is the 'enzyme' table.", "Determine the specific column that holds the OMIM values, which is 'OMIM'.", "Use the SQL function MAX() to find the maximum value in the 'OMIM' column.", "Construct the SQL query to select the maximum OMIM value from the 'enzyme' table."], "pred_sql": "SELECT MAX(OMIM) AS max_omim FROM enzyme;", "gold_sql": "SELECT max(OMIM) FROM enzyme", "source_tables": ["enzyme"]}
{"sample_id": 941, "db_id": "medicine_enzyme_interaction", "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?", "rationale": ["Identify the relevant table: The query is asking for information related to enzymes, so we will focus on the 'enzyme' table.", "Determine the columns needed: The user wants the 'Product', 'Chromosome', and 'Porphyria' associated with the enzymes.", "Specify the condition: The query specifies that we are only interested in enzymes that take effect at the location 'Cytosol'.", "Construct the SQL SELECT statement: We will select the specified columns from the 'enzyme' table where the 'Location' matches 'Cytosol'."], "pred_sql": "SELECT Product, Chromosome, Porphyria FROM enzyme WHERE Location = 'Cytosol';", "gold_sql": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "source_tables": ["enzyme"]}
{"sample_id": 942, "db_id": "medicine_enzyme_interaction", "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?", "rationale": ["Identify the relevant table: The query is asking for information about enzymes, so we will be using the 'enzyme' table.", "Determine the columns needed: The query requests the 'Product', 'Chromosome', and 'Porphyria' columns from the enzyme table.", "Specify the condition: The query specifies that we only want enzymes located at 'Cytosol', so we will add a WHERE clause to filter by the 'Location' column.", "Construct the SQL query: Combine the SELECT statement with the specified columns and the WHERE condition to form the complete SQL query."], "pred_sql": "SELECT Product, Chromosome, Porphyria FROM enzyme WHERE Location = 'Cytosol';", "gold_sql": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "source_tables": ["enzyme"]}
{"sample_id": 943, "db_id": "medicine_enzyme_interaction", "question": "What are the names of enzymes who does not produce 'Heme'?", "rationale": ["Identify the table that contains enzyme information, which is the 'enzyme' table.", "Determine the column that contains the product produced by the enzyme, which is 'Product'.", "Formulate a query to select the 'name' of enzymes where the 'Product' is not equal to 'Heme'."], "pred_sql": "SELECT name FROM enzyme WHERE Product != 'Heme';", "gold_sql": "SELECT name FROM enzyme WHERE product != 'Heme'", "source_tables": ["enzyme"]}
{"sample_id": 944, "db_id": "medicine_enzyme_interaction", "question": "What are the names of enzymes whose product is not 'Heme'?", "rationale": ["Identify the table that contains the information about enzymes, which is the 'enzyme' table.", "Determine the relevant column that contains the product information, which is the 'Product' column.", "Formulate a query to select the 'name' of enzymes where the 'Product' is not equal to 'Heme'."], "pred_sql": "SELECT name FROM enzyme WHERE Product != 'Heme';", "gold_sql": "SELECT name FROM enzyme WHERE product != 'Heme'", "source_tables": ["enzyme"]}
{"sample_id": 945, "db_id": "medicine_enzyme_interaction", "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?", "rationale": ["Identify the table that contains the required information: the 'medicine' table.", "Determine the columns needed: 'name' and 'Trade_Name' from the 'medicine' table.", "Specify the condition to filter the records: FDA_approved should be 'Yes'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'medicine' table with the given condition."], "pred_sql": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'Yes';", "gold_sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "source_tables": ["medicine"]}
{"sample_id": 946, "db_id": "medicine_enzyme_interaction", "question": "What are the names and trade names of the medcines that are FDA approved?", "rationale": ["Identify the table that contains the information about medicines, which is the 'medicine' table.", "Determine the columns needed for the output, which are 'name' and 'Trade_Name'.", "Filter the results to include only those medicines that are FDA approved, indicated by the 'FDA_approved' column.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'medicine' table with the appropriate WHERE clause."], "pred_sql": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';", "gold_sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "source_tables": ["medicine"]}
{"sample_id": 947, "db_id": "medicine_enzyme_interaction", "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?", "rationale": ["Identify the relevant tables: 'enzyme', 'medicine', and 'medicine_enzyme_interaction'.", "We need to find enzymes related to a specific medicine, so we will join the 'enzyme' table with the 'medicine_enzyme_interaction' table on the enzyme ID.", "Next, we will join the 'medicine' table with the 'medicine_enzyme_interaction' table on the medicine ID to filter by the medicine name 'Amisulpride'.", "We need to filter the results to only include interactions of type 'inhibitor'.", "Finally, we will select the names of the enzymes that meet these criteria."], "pred_sql": "SELECT enzyme.name FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id JOIN medicine ON medicine.id = medicine_enzyme_interaction.medicine_id WHERE medicine.name = 'Amisulpride' AND medicine_enzyme_interaction.interaction_type = 'inhibitor';", "gold_sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"]}
{"sample_id": 948, "db_id": "medicine_enzyme_interaction", "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?", "rationale": ["Identify the relevant tables: 'enzyme', 'medicine', and 'medicine_enzyme_interaction'.", "We need to find the names of enzymes, so we will select 'enzyme.name'.", "We need to join the 'enzyme' table with the 'medicine_enzyme_interaction' table on 'enzyme.id' and 'medicine_enzyme_interaction.enzyme_id'.", "Next, we join the 'medicine' table with the 'medicine_enzyme_interaction' table on 'medicine.id' and 'medicine_enzyme_interaction.medicine_id'.", "We filter the results to only include the medicine named 'Amisulpride'.", "We also filter the interactions to only include those where the interaction type is 'inhibitor'."], "pred_sql": "SELECT enzyme.name FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id JOIN medicine ON medicine.id = medicine_enzyme_interaction.medicine_id WHERE medicine.name = 'Amisulpride' AND medicine_enzyme_interaction.interaction_type = 'inhibitor';", "gold_sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"]}
{"sample_id": 949, "db_id": "medicine_enzyme_interaction", "question": "What are the ids and names of the medicine that can interact with two or more enzymes?", "rationale": ["Identify the relevant tables: medicine and medicine_enzyme_interaction.", "We need to find medicines that can interact with enzymes, so we will join the medicine table with the medicine_enzyme_interaction table on the medicine_id.", "We want to count the number of distinct enzymes each medicine interacts with, so we will use the COUNT function.", "To find medicines that interact with two or more enzymes, we will use the HAVING clause to filter groups having a count of enzyme_id greater than or equal to 2.", "Finally, we will select the id and name of the medicines that meet this criterion."], "pred_sql": "SELECT m.id, m.name \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nGROUP BY m.id, m.name \nHAVING COUNT(mei.enzyme_id) >= 2;", "gold_sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "source_tables": ["medicine", "medicine_enzyme_interaction"]}
{"sample_id": 950, "db_id": "medicine_enzyme_interaction", "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?", "rationale": ["Identify the relevant tables: medicine and medicine_enzyme_interaction.", "We need to find medicines that interact with more than one enzyme, so we will join the medicine table with the medicine_enzyme_interaction table on the medicine_id.", "Group the results by medicine id and name to aggregate the interactions for each medicine.", "Use the HAVING clause to filter the grouped results to only include those medicines that have interactions with more than one distinct enzyme."], "pred_sql": "SELECT m.id, m.name \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nGROUP BY m.id, m.name \nHAVING COUNT(DISTINCT mei.enzyme_id) > 1;", "gold_sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "source_tables": ["medicine", "medicine_enzyme_interaction"]}
{"sample_id": 951, "db_id": "medicine_enzyme_interaction", "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.", "rationale": ["Identify the columns needed: ids, names, and FDA approval status of medicines.", "The relevant table for medicines is 'medicine', which contains the required columns: 'id', 'name', and 'FDA_approved'.", "To find the number of enzymes each medicine can interact with, we need to join the 'medicine' table with the 'medicine_enzyme_interaction' table on the medicine's id.", "Use a JOIN operation to combine 'medicine' and 'medicine_enzyme_interaction' based on the medicine's id.", "Group the results by the medicine's id, name, and FDA approval status to aggregate the count of enzyme interactions.", "Use COUNT() to count the number of enzyme interactions for each medicine.", "Order the results in descending order based on the count of enzyme interactions."], "pred_sql": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine m\nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;", "gold_sql": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "source_tables": ["medicine", "medicine_enzyme_interaction"]}
{"sample_id": 952, "db_id": "medicine_enzyme_interaction", "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?", "rationale": ["Identify the required columns: 'id', 'name', and 'FDA_approved' from the 'medicine' table.", "To find the number of possible enzyme interactions for each medicine, we need to join the 'medicine' table with the 'medicine_enzyme_interaction' table on the medicine's id.", "Use a GROUP BY clause to group the results by medicine id, name, and FDA approval status, which allows us to count the number of interactions for each medicine.", "Use the COUNT function to count the number of enzyme interactions for each medicine.", "Finally, order the results in descending order based on the count of enzyme interactions."], "pred_sql": "SELECT m.id, m.name, m.FDA_approved \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nGROUP BY m.id, m.name, m.FDA_approved \nORDER BY COUNT(mei.enzyme_id) DESC;", "gold_sql": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "source_tables": ["medicine", "medicine_enzyme_interaction"]}
{"sample_id": 953, "db_id": "medicine_enzyme_interaction", "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?", "rationale": ["Identify the relevant tables: 'enzyme' and 'medicine_enzyme_interaction'.", "We need to find the enzyme that has the most interactions as an 'activator'.", "Join the 'enzyme' table with the 'medicine_enzyme_interaction' table on the enzyme ID.", "Filter the results to only include interactions where the type is 'activator'.", "Group the results by enzyme ID and name to count the number of medicines for each enzyme.", "Order the results by the count of medicines in descending order to get the enzyme with the most interactions at the top.", "Limit the results to 1 to get only the enzyme with the highest count."], "pred_sql": "SELECT e.id, e.name \nFROM enzyme e \nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id \nWHERE mei.interaction_type = 'activator' \nGROUP BY e.id, e.name \nORDER BY COUNT(mei.medicine_id) DESC \nLIMIT 1;", "gold_sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}
{"sample_id": 954, "db_id": "medicine_enzyme_interaction", "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?", "rationale": ["Identify the relevant tables: We need to look at the 'enzyme' and 'medicine_enzyme_interaction' tables to find the enzymes and their interactions with medicines.", "Determine the interaction type: We are specifically interested in interactions where the enzyme acts as an 'activator'.", "Join the tables: We will join the 'enzyme' table with the 'medicine_enzyme_interaction' table on the enzyme ID to get the relevant data.", "Group the results: We need to group the results by enzyme ID and name to count how many medicines each enzyme interacts with as an activator.", "Count the interactions: Use COUNT to determine how many medicines each enzyme can activate.", "Order the results: We will order the results in descending order based on the count of medicines to find the enzyme that interacts with the most medicines.", "Limit the results: Finally, we will limit the results to 1 to get only the enzyme with the highest count."], "pred_sql": "SELECT e.id, e.name\nFROM enzyme e\nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id\nWHERE mei.interaction_type = 'activator'\nGROUP BY e.id, e.name\nORDER BY COUNT(mei.medicine_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}
{"sample_id": 955, "db_id": "medicine_enzyme_interaction", "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "rationale": ["Identify the tables involved: We need to find information from the 'enzyme', 'medicine', and 'medicine_enzyme_interaction' tables.", "Determine the columns needed: We need the 'interaction_type' from the 'medicine_enzyme_interaction' table.", "Establish relationships: The 'medicine_enzyme_interaction' table links 'enzyme' and 'medicine' through their respective IDs.", "Filter conditions: We need to filter by the specific enzyme name 'ALA synthase' and the medicine name 'Aripiprazole'.", "Construct the SQL query: Use JOINs to connect the tables and apply the WHERE clause to filter the results."], "pred_sql": "SELECT mei.interaction_type \nFROM medicine_enzyme_interaction mei \nJOIN enzyme e ON mei.enzyme_id = e.id \nJOIN medicine m ON mei.medicine_id = m.id \nWHERE e.name = 'ALA synthase' AND m.name = 'Aripiprazole';", "gold_sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"]}
{"sample_id": 956, "db_id": "medicine_enzyme_interaction", "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "rationale": ["Identify the tables involved: We need to retrieve information about the interaction type between a specific enzyme and a specific medicine, which involves the 'medicine', 'enzyme', and 'medicine_enzyme_interaction' tables.", "Determine the necessary columns: We need the 'interaction_type' from the 'medicine_enzyme_interaction' table.", "Establish relationships: The 'medicine_enzyme_interaction' table links the 'enzyme' and 'medicine' tables through their respective IDs.", "Formulate the JOINs: We will join the 'medicine_enzyme_interaction' table with the 'enzyme' table on 'enzyme_id' and with the 'medicine' table on 'medicine_id'.", "Add the WHERE clause: We need to filter the results to only include the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'.", "Construct the final SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT mei.interaction_type \nFROM medicine_enzyme_interaction mei \nJOIN enzyme e ON mei.enzyme_id = e.id \nJOIN medicine m ON mei.medicine_id = m.id \nWHERE e.name = 'ALA synthase' AND m.name = 'Aripiprazole';", "gold_sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"]}
{"sample_id": 957, "db_id": "medicine_enzyme_interaction", "question": "What is the most common interaction type between enzymes and medicine? And how many are there?", "rationale": ["Identify the table that contains the interaction types, which is 'medicine_enzyme_interaction'.", "We need to count the occurrences of each interaction type, so we will use the COUNT() function.", "To find the most common interaction type, we will group the results by 'interaction_type'.", "We will order the results in descending order based on the count of interactions to get the most common one at the top.", "Finally, we will limit the results to 1 to get only the most common interaction type."], "pred_sql": "SELECT interaction_type, COUNT(*) as interaction_count \nFROM medicine_enzyme_interaction \nGROUP BY interaction_type \nORDER BY interaction_count DESC \nLIMIT 1;", "gold_sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "source_tables": ["medicine_enzyme_interaction"]}
{"sample_id": 958, "db_id": "medicine_enzyme_interaction", "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?", "rationale": ["Identify the relevant table: The query involves interactions between enzymes and medicine, which is stored in the 'medicine_enzyme_interaction' table.", "Select the columns needed: We need to retrieve the 'interaction_type' and count how many times each type occurs.", "Use the COUNT() function: This function will help us count the occurrences of each interaction type.", "Group the results: We will use GROUP BY on 'interaction_type' to aggregate the counts for each type of interaction.", "Order the results: To find the most common types, we will order the results in descending order based on the count of interactions."], "pred_sql": "SELECT interaction_type, COUNT(*) as interaction_count \nFROM medicine_enzyme_interaction \nGROUP BY interaction_type \nORDER BY interaction_count DESC;", "gold_sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "source_tables": ["medicine_enzyme_interaction"]}
{"sample_id": 959, "db_id": "medicine_enzyme_interaction", "question": "How many medicines have the FDA approval status 'No' ?", "rationale": ["Identify the table that contains the FDA approval status, which is the 'medicine' table.", "Determine the column that indicates FDA approval status, which is 'FDA_approved'.", "Formulate a query to count the number of records where 'FDA_approved' is 'No'.", "Use the COUNT() function to get the total number of medicines with FDA approval status 'No'."], "pred_sql": "SELECT COUNT(*) AS count FROM medicine WHERE FDA_approved = 'No';", "gold_sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "source_tables": ["medicine"]}
{"sample_id": 960, "db_id": "medicine_enzyme_interaction", "question": "How many medicines were not approved by the FDA?", "rationale": ["Identify the table that contains information about medicines, which is the 'medicine' table.", "Determine the relevant column that indicates FDA approval status, which is 'FDA_approved'.", "To find medicines that were not approved by the FDA, filter the results where 'FDA_approved' is equal to 'No'.", "Use the COUNT() function to count the number of records that meet this condition.", "Construct the SQL query to select the count from the 'medicine' table with the specified condition."], "pred_sql": "SELECT COUNT(*) AS not_approved_count FROM medicine WHERE FDA_approved = 'No';", "gold_sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "source_tables": ["medicine"]}
{"sample_id": 961, "db_id": "medicine_enzyme_interaction", "question": "How many enzymes do not have any interactions?", "rationale": ["Identify the 'enzyme' table as it contains the enzymes we are interested in.", "We need to count the enzymes that do not have any interactions, which means we need to find enzymes whose IDs are not present in the 'medicine_enzyme_interaction' table.", "Use a subquery to select all 'enzyme_id's from the 'medicine_enzyme_interaction' table.", "Use the NOT IN clause to filter out those enzymes from the 'enzyme' table.", "Finally, use COUNT(*) to get the total number of enzymes that do not have any interactions."], "pred_sql": "SELECT COUNT(*) FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM medicine_enzyme_interaction);", "gold_sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}
{"sample_id": 962, "db_id": "medicine_enzyme_interaction", "question": "What is the count of enzymes without any interactions?", "rationale": ["Identify the table that contains enzyme information, which is the 'enzyme' table.", "To find enzymes without any interactions, we need to check which enzyme IDs are not present in the 'medicine_enzyme_interaction' table.", "We can achieve this by using a subquery that selects all enzyme IDs from the 'medicine_enzyme_interaction' table.", "The main query will count all entries in the 'enzyme' table where the enzyme ID is not in the list of IDs returned by the subquery."], "pred_sql": "SELECT COUNT(*) FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM medicine_enzyme_interaction)", "gold_sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}
{"sample_id": 963, "db_id": "medicine_enzyme_interaction", "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?", "rationale": ["Identify the relevant tables: medicine and medicine_enzyme_interaction.", "We need to select the 'id' and 'Trade_Name' from the medicine table.", "To find medicines that interact with enzymes, we will join the medicine table with the medicine_enzyme_interaction table on the medicine's id.", "We need to group the results by medicine id and Trade_Name to count the number of unique enzyme interactions for each medicine.", "Finally, we will use the HAVING clause to filter the results to only include medicines that interact with at least 3 enzymes."], "pred_sql": "SELECT m.id, m.Trade_Name \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nGROUP BY m.id, m.Trade_Name \nHAVING COUNT(mei.enzyme_id) >= 3;", "gold_sql": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "source_tables": ["medicine", "medicine_enzyme_interaction"]}
{"sample_id": 964, "db_id": "medicine_enzyme_interaction", "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?", "rationale": ["Identify the relevant tables: medicine and medicine_enzyme_interaction.", "We need to retrieve the 'id' and 'Trade_Name' from the medicine table.", "To find medicines that interact with enzymes, we will join the medicine table with the medicine_enzyme_interaction table on the medicine's id.", "We need to group the results by medicine id and Trade_Name to count the number of enzyme interactions for each medicine.", "We will use the HAVING clause to filter the grouped results to only include those medicines that interact with at least 3 enzymes."], "pred_sql": "SELECT m.id, m.Trade_Name \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nGROUP BY m.id, m.Trade_Name \nHAVING COUNT(mei.enzyme_id) >= 3;", "gold_sql": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "source_tables": ["medicine", "medicine_enzyme_interaction"]}
{"sample_id": 965, "db_id": "medicine_enzyme_interaction", "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "rationale": ["Identify the columns needed: distinct name, location, and products of enzymes.", "The relevant table for enzymes is 'enzyme', which contains the columns 'name', 'Location', and 'Product'.", "We need to filter the enzymes based on their interaction type, which is found in the 'medicine_enzyme_interaction' table.", "To find the enzymes with an 'inhibitor' interaction, we will join the 'enzyme' table with the 'medicine_enzyme_interaction' table on the enzyme ID.", "Use a WHERE clause to filter for interaction_type = 'inhibitor'.", "Select distinct values to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT e.name, e.Location, e.Product \nFROM enzyme e \nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id \nWHERE mei.interaction_type = 'inhibitor';", "gold_sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}
{"sample_id": 966, "db_id": "medicine_enzyme_interaction", "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?", "rationale": ["Identify the relevant tables: We need information from the 'enzyme' table and the 'medicine_enzyme_interaction' table.", "Determine the columns needed: We need the 'name', 'Location', and 'Product' from the 'enzyme' table.", "Establish the relationship: The 'enzyme' table is linked to the 'medicine_enzyme_interaction' table through the 'enzyme_id'.", "Filter the results: We only want the interactions where the 'interaction_type' is 'inhibitor'.", "Construct the SQL query: Use a SELECT statement to retrieve the required columns, join the tables, and apply the filter."], "pred_sql": "SELECT enzyme.name, enzyme.Location, enzyme.Product \nFROM enzyme \nJOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id \nWHERE medicine_enzyme_interaction.interaction_type = 'inhibitor';", "gold_sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "source_tables": ["enzyme", "medicine_enzyme_interaction"]}
{"sample_id": 967, "db_id": "medicine_enzyme_interaction", "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.", "rationale": ["Identify the relevant tables: We need to retrieve data from the 'medicine' and 'medicine_enzyme_interaction' tables.", "Select the required columns: We need the 'name' and 'Trade_Name' from the 'medicine' table.", "Join the tables: We will join 'medicine' with 'medicine_enzyme_interaction' on the medicine ID to link medicines with their interactions.", "Filter the interactions: We want to filter the interactions to only include those that are either 'inhibitor' or 'activator'.", "Group the results: We will group the results by medicine ID to aggregate the interaction types for each medicine.", "Count distinct interaction types: We will use HAVING to ensure that we only select medicines that have both interaction types ('inhibitor' and 'activator')."], "pred_sql": "SELECT m.name, m.Trade_Name \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nWHERE mei.interaction_type IN ('inhibitor', 'activator') \nGROUP BY m.id \nHAVING COUNT(DISTINCT mei.interaction_type) = 2;", "gold_sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", "source_tables": ["medicine", "medicine_enzyme_interaction"]}
{"sample_id": 968, "db_id": "medicine_enzyme_interaction", "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?", "rationale": ["Identify the relevant tables: We need to retrieve data from the 'medicine' table and the 'medicine_enzyme_interaction' table.", "Determine the columns needed: We need the 'name' and 'Trade_Name' from the 'medicine' table.", "Establish the relationship: The 'medicine' table is linked to the 'medicine_enzyme_interaction' table through the 'id' and 'medicine_id' columns.", "Filter the results: We want to find interactions where the 'interaction_type' is either 'inhibitor' or 'activator'.", "Construct the SQL query: Use a JOIN to combine the tables and a WHERE clause to filter the interaction types."], "pred_sql": "SELECT m.name, m.Trade_Name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id WHERE mei.interaction_type IN ('inhibitor', 'activator');", "gold_sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", "source_tables": ["medicine", "medicine_enzyme_interaction"]}
{"sample_id": 969, "db_id": "medicine_enzyme_interaction", "question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.", "rationale": ["Identify the columns needed: We need the 'name' and 'Trade_Name' from the 'medicine' table.", "Determine the condition: We want medicines that cannot interact with enzymes that produce 'Heme'.", "Find the relevant enzymes: We need to find the enzyme IDs that have 'Heme' as their product.", "Use a subquery to find all medicine IDs that interact with these enzymes.", "Select the medicines whose IDs are not in the list of IDs from the subquery."], "pred_sql": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);", "gold_sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"]}
{"sample_id": 970, "db_id": "medicine_enzyme_interaction", "question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "rationale": ["Identify the columns needed: We need the 'name' and 'Trade_Name' from the 'medicine' table.", "Determine the condition: We want medicines that cannot interact with a specific enzyme product, which is 'Heme'.", "To find this, we need to first identify which medicines interact with the enzyme that has 'Heme' as its product.", "This requires a subquery that selects 'medicine_id' from the 'medicine_enzyme_interaction' table where the corresponding enzyme's product is 'Heme'.", "The main query will select from the 'medicine' table where the 'id' is not in the list of 'medicine_id' returned by the subquery."], "pred_sql": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);", "gold_sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"]}
{"sample_id": 971, "db_id": "medicine_enzyme_interaction", "question": "How many distinct FDA approval statuses are there for the medicines?", "rationale": ["Identify the relevant table: The 'medicine' table contains the 'FDA_approved' column which indicates the approval status of each medicine.", "Determine the requirement: We need to count the distinct values in the 'FDA_approved' column.", "Use the COUNT function: To count the distinct values, we will use COUNT(DISTINCT FDA_approved).", "Construct the SQL query: The final SQL query will select the count of distinct FDA approval statuses from the medicine table."], "pred_sql": "SELECT COUNT(DISTINCT FDA_approved) AS distinct_fda_approval_statuses FROM medicine;", "gold_sql": "SELECT count(DISTINCT FDA_approved) FROM medicine", "source_tables": ["medicine"]}
{"sample_id": 972, "db_id": "medicine_enzyme_interaction", "question": "How many different FDA approval statuses exist for medicines?", "rationale": ["Identify the relevant table: The 'medicine' table contains the 'FDA_approved' column which indicates the approval status of medicines.", "Determine the requirement: We need to count the distinct values in the 'FDA_approved' column to find out how many different approval statuses exist.", "Construct the SQL query: Use the COUNT function along with DISTINCT to count the unique values in the 'FDA_approved' column."], "pred_sql": "SELECT COUNT(DISTINCT FDA_approved) AS different_approval_statuses FROM medicine;", "gold_sql": "SELECT count(DISTINCT FDA_approved) FROM medicine", "source_tables": ["medicine"]}
{"sample_id": 973, "db_id": "medicine_enzyme_interaction", "question": "Which enzyme names have the substring \"ALA\"?", "rationale": ["Identify the table that contains enzyme names, which is the 'enzyme' table.", "Determine the column that holds the enzyme names, which is the 'name' column.", "Formulate a query to select the 'name' column from the 'enzyme' table.", "Use the LIKE operator to filter the names that contain the substring 'ALA'.", "Construct the final SQL query to retrieve the desired enzyme names."], "pred_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%';", "gold_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'", "source_tables": ["enzyme"]}
{"sample_id": 974, "db_id": "medicine_enzyme_interaction", "question": "What are the names of enzymes that include the string 'ALA'?", "rationale": ["Identify the table that contains the enzyme names, which is the 'enzyme' table.", "Determine the column that holds the enzyme names, which is the 'name' column.", "Formulate a query to select the 'name' column from the 'enzyme' table.", "Use the LIKE operator to filter the names that contain the string 'ALA', using wildcards '%' to match any characters before and after 'ALA'."], "pred_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%';", "gold_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'", "source_tables": ["enzyme"]}
{"sample_id": 975, "db_id": "medicine_enzyme_interaction", "question": "find the number of medicines offered by each trade.", "rationale": ["Identify the relevant table: The 'medicine' table contains information about medicines and their trade names.", "Determine the required output: We need to count the number of medicines for each trade name.", "Use the COUNT() function to count the number of medicines for each trade name.", "Group the results by 'Trade_Name' to get the count for each unique trade name."], "pred_sql": "SELECT Trade_Name, COUNT(*) AS number_of_medicines FROM medicine GROUP BY Trade_Name;", "gold_sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "source_tables": ["medicine"]}
{"sample_id": 976, "db_id": "medicine_enzyme_interaction", "question": "How many medicines are offered by each trade name?", "rationale": ["Identify the relevant table: The 'medicine' table contains the information about medicines and their trade names.", "Determine the required output: We need to count the number of medicines for each trade name.", "Use the COUNT() function to count the number of medicines.", "Group the results by 'Trade_Name' to get the count for each trade name."], "pred_sql": "SELECT Trade_Name, COUNT(*) AS medicine_count FROM medicine GROUP BY Trade_Name;", "gold_sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "source_tables": ["medicine"]}
{"sample_id": 977, "db_id": "university_basketball", "question": "List all schools and their nicknames in the order of founded year.", "rationale": ["Identify the relevant table: The 'university' table contains the information about schools and their nicknames.", "Select the required columns: We need to select 'School' and 'Nickname' from the 'university' table.", "Order the results: The results should be ordered by the 'Founded' year, which is also a column in the 'university' table."], "pred_sql": "SELECT university.School, university.Nickname FROM university ORDER BY university.Founded;", "gold_sql": "SELECT school ,  nickname FROM university ORDER BY founded", "source_tables": ["university"]}
{"sample_id": 978, "db_id": "university_basketball", "question": "What are the different schools and their nicknames, ordered by their founding years?", "rationale": ["Identify the relevant table: The 'university' table contains the information about schools and their nicknames.", "Select the required columns: We need to select 'School' and 'Nickname' from the 'university' table.", "Order the results: The results should be ordered by the 'Founded' year, which is also a column in the 'university' table."], "pred_sql": "SELECT School, Nickname FROM university ORDER BY Founded;", "gold_sql": "SELECT school ,  nickname FROM university ORDER BY founded", "source_tables": ["university"]}
{"sample_id": 979, "db_id": "university_basketball", "question": "List all public schools and their locations.", "rationale": ["Identify the table that contains the information about schools, which is the 'university' table.", "Determine the columns needed for the output: 'School' for the name of the school and 'Location' for the geographical location.", "Filter the results to include only public schools by using the 'Affiliation' column and specifying 'Public'.", "Construct the SQL SELECT statement to retrieve the desired columns from the 'university' table with the specified condition."], "pred_sql": "SELECT School, Location FROM university WHERE Affiliation = 'Public';", "gold_sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "source_tables": ["university"]}
{"sample_id": 980, "db_id": "university_basketball", "question": "What are the public schools and what are their locations?", "rationale": ["Identify the relevant table: The query is asking for information about schools, which corresponds to the 'university' table.", "Determine the columns needed: The user wants to know the names of the schools and their locations, so we need the 'School' and 'Location' columns from the 'university' table.", "Filter for public schools: The query specifies 'public schools', which implies we need to filter the results based on the 'Affiliation' column to include only public institutions.", "Construct the SQL query: Combine the SELECT statement with the appropriate columns and the WHERE clause to filter for public schools."], "pred_sql": "SELECT School, Location FROM university WHERE Affiliation = 'Public';", "gold_sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "source_tables": ["university"]}
{"sample_id": 981, "db_id": "university_basketball", "question": "When was the school with the largest enrollment founded?", "rationale": ["Identify the table that contains the information about schools and their enrollment, which is the 'university' table.", "To find the school with the largest enrollment, we need to order the records in the 'university' table by the 'Enrollment' column in descending order.", "We will limit the result to 1 to get the school with the largest enrollment.", "Once we have the School_ID of the school with the largest enrollment, we can use it to select the 'Founded' year from the same 'university' table."], "pred_sql": "SELECT Founded FROM university WHERE School_ID = (SELECT School_ID FROM university ORDER BY Enrollment DESC LIMIT 1);", "gold_sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "source_tables": ["university"]}
{"sample_id": 982, "db_id": "university_basketball", "question": "Return the founded year for the school with the largest enrollment.", "rationale": ["Identify the table that contains the founded year and enrollment information, which is the 'university' table.", "To find the school with the largest enrollment, we need to use an aggregate function to get the maximum enrollment value.", "We will use a subquery to select the maximum enrollment from the 'university' table.", "Finally, we will select the 'Founded' year from the 'university' table where the enrollment matches the maximum enrollment found in the subquery."], "pred_sql": "SELECT Founded FROM university WHERE Enrollment = (SELECT MAX(Enrollment) FROM university);", "gold_sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "source_tables": ["university"]}
{"sample_id": 983, "db_id": "university_basketball", "question": "Find the founded year of the newest non public school.", "rationale": ["Identify the relevant table: The 'university' table contains the 'Founded' year and 'Affiliation' type.", "Filter for non-public schools: Use a WHERE clause to exclude public schools by checking the 'Affiliation' column.", "Sort the results: To find the newest school, sort the results by the 'Founded' year in descending order.", "Limit the results: Use LIMIT 1 to get only the most recent entry."], "pred_sql": "SELECT Founded FROM university WHERE Affiliation != 'Public' ORDER BY Founded DESC LIMIT 1;", "gold_sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "source_tables": ["university"]}
{"sample_id": 984, "db_id": "university_basketball", "question": "What is the founded year of the non public school that was founded most recently?", "rationale": ["Identify the relevant table: The query requires information about universities, so we will use the 'university' table.", "Determine the condition: We need to filter for non-public schools, which means we will check the 'Affiliation' column for values that are not 'Public'.", "Sort the results: To find the most recently founded non-public school, we will sort the results by the 'Founded' year in descending order.", "Limit the results: Since we only need the most recent one, we will limit the results to 1."], "pred_sql": "SELECT Founded FROM university WHERE Affiliation != 'Public' ORDER BY Founded DESC LIMIT 1;", "gold_sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "source_tables": ["university"]}
{"sample_id": 985, "db_id": "university_basketball", "question": "How many schools are in the basketball match?", "rationale": ["Identify the goal of the query: to count the number of unique schools in the basketball match.", "Determine the relevant table: the 'basketball_match' table contains the 'School_ID' which identifies each school.", "Use the COUNT function to count the distinct 'School_ID' values to ensure each school is only counted once.", "Construct the SQL query to select the count of distinct 'School_ID' from the 'basketball_match' table."], "pred_sql": "SELECT COUNT(DISTINCT School_ID) AS number_of_schools FROM basketball_match;", "gold_sql": "SELECT count(DISTINCT school_id) FROM basketball_match", "source_tables": ["basketball_match"]}
{"sample_id": 986, "db_id": "university_basketball", "question": "Count the number of schools that have had basketball matches.", "rationale": ["Identify the goal: Count the number of unique schools that have participated in basketball matches.", "Determine the relevant table: The 'basketball_match' table contains the 'School_ID' which links to the schools.", "Use the COUNT function to count distinct 'School_ID' values to ensure each school is only counted once.", "Construct the SQL query to select the count of distinct 'School_ID' from the 'basketball_match' table."], "pred_sql": "SELECT COUNT(DISTINCT School_ID) AS number_of_schools FROM basketball_match;", "gold_sql": "SELECT count(DISTINCT school_id) FROM basketball_match", "source_tables": ["basketball_match"]}
{"sample_id": 987, "db_id": "university_basketball", "question": "What is the highest acc percent score in the competition?", "rationale": ["Identify the relevant table: The 'basketball_match' table contains the 'ACC_Percent' column which holds the winning percentages of the teams in the ACC.", "Determine the required operation: We need to find the highest value in the 'ACC_Percent' column.", "Use the MAX() function: This function will help us retrieve the maximum value from the 'ACC_Percent' column.", "Construct the SQL query: The query will select the maximum ACC percentage from the basketball_match table."], "pred_sql": "SELECT MAX(ACC_Percent) AS Highest_ACC_Percent FROM basketball_match;", "gold_sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "source_tables": ["basketball_match"]}
{"sample_id": 988, "db_id": "university_basketball", "question": "Return the highest acc percent across all basketball matches.", "rationale": ["Identify the relevant table: basketball_match, which contains the ACC_Percent column.", "Determine the goal: to find the highest ACC percentage across all basketball matches.", "Use the MAX() function to retrieve the maximum value from the ACC_Percent column.", "Construct the SQL query to select the maximum ACC_Percent from the basketball_match table."], "pred_sql": "SELECT MAX(ACC_Percent) AS Highest_ACC_Percent FROM basketball_match;", "gold_sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "source_tables": ["basketball_match"]}
{"sample_id": 989, "db_id": "university_basketball", "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?", "rationale": ["Identify the relevant tables: 'university' and 'basketball_match'.", "Determine the columns needed: 'Primary_conference' from 'university' and 'ACC_Percent' from 'basketball_match'.", "Join the two tables on the common key 'School_ID'.", "Sort the results by 'ACC_Percent' in ascending order to find the lowest score.", "Limit the results to 1 to get only the primary conference of the school with the lowest ACC percent."], "pred_sql": "SELECT u.Primary_conference FROM university u JOIN basketball_match b ON u.School_ID = b.School_ID ORDER BY b.ACC_Percent ASC LIMIT 1;", "gold_sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "source_tables": ["basketball_match", "university"]}
{"sample_id": 990, "db_id": "university_basketball", "question": "Return the primary conference of the school with the lowest acc percentage score.", "rationale": ["Identify the relevant tables: 'university' and 'basketball_match'.", "We need to find the primary conference of the school with the lowest ACC percentage score, which is stored in the 'ACC_Percent' column of the 'basketball_match' table.", "To get the primary conference, we need to join the 'university' table with the 'basketball_match' table on the 'School_ID' column.", "We will order the results by 'ACC_Percent' in ascending order to get the school with the lowest percentage first.", "Finally, we will limit the results to 1 to get only the top result, which corresponds to the school with the lowest ACC percentage score."], "pred_sql": "SELECT u.Primary_conference FROM university u JOIN basketball_match b ON u.School_ID = b.School_ID ORDER BY b.ACC_Percent ASC LIMIT 1;", "gold_sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "source_tables": ["basketball_match", "university"]}
{"sample_id": 991, "db_id": "university_basketball", "question": "What is the team name and acc regular season score of the school that was founded for the longest time?", "rationale": ["Identify the relevant tables: basketball_match and university.", "Determine the columns needed: Team_Name and ACC_Regular_Season from basketball_match, and Founded from university.", "Join the basketball_match table with the university table on the School_ID column to access the founding year of the university.", "Sort the results by the Founded year in ascending order to find the oldest university.", "Limit the results to 1 to get the school that was founded the longest time ago."], "pred_sql": "SELECT bm.Team_Name, bm.ACC_Regular_Season \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nORDER BY u.Founded ASC \nLIMIT 1;", "gold_sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "source_tables": ["basketball_match", "university"]}
{"sample_id": 992, "db_id": "university_basketball", "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "rationale": ["Identify the relevant tables: basketball_match and university.", "Determine the columns needed: Team_Name and ACC_Regular_Season from basketball_match, and Founded from university.", "To find the school founded the earliest, use the MIN function on the Founded column in the university table.", "Join the basketball_match table with the university table on the School_ID column to link teams with their respective schools.", "Filter the results to only include the team(s) from the school(s) founded in the earliest year using a subquery that selects the minimum Founded year."], "pred_sql": "SELECT bm.Team_Name, bm.ACC_Regular_Season \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nWHERE u.Founded = (SELECT MIN(Founded) FROM university)", "gold_sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "source_tables": ["basketball_match", "university"]}
{"sample_id": 993, "db_id": "university_basketball", "question": "Find the location and all games score of the school that has Clemson as its team name.", "rationale": ["Identify the tables involved: 'basketball_match' for team details and 'university' for school details.", "Determine the columns needed: 'Location' from the 'university' table and 'All_Games' from the 'basketball_match' table.", "Establish the relationship between the tables using the foreign key: 'basketball_match.School_ID' relates to 'university.School_ID'.", "Filter the results to find the specific team by name: 'Clemson'.", "Construct the SQL query using a JOIN to combine the two tables and select the required columns."], "pred_sql": "SELECT university.Location, basketball_match.All_Games FROM basketball_match JOIN university ON basketball_match.School_ID = university.School_ID WHERE basketball_match.Team_Name = 'Clemson';", "gold_sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "source_tables": ["basketball_match", "university"]}
{"sample_id": 994, "db_id": "university_basketball", "question": "What are the all games score and location of the school called Clemson?", "rationale": ["Identify the relevant tables: basketball_match and university.", "Determine the columns needed: All_Games from basketball_match and Location from university.", "Establish the relationship between the tables using the foreign key: basketball_match.School_ID = university.School_ID.", "Filter the results to only include the school named 'Clemson'.", "Construct the SQL SELECT statement to retrieve the specified columns with the appropriate JOIN and WHERE clause."], "pred_sql": "SELECT bm.All_Games, u.Location FROM basketball_match bm JOIN university u ON bm.School_ID = u.School_ID WHERE u.School = 'Clemson';", "gold_sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "source_tables": ["basketball_match", "university"]}
{"sample_id": 995, "db_id": "university_basketball", "question": "What are the average enrollment size of the universities that are founded before 1850?", "rationale": ["Identify the relevant table: The query pertains to universities, so we will use the 'university' table.", "Determine the required column: We need the 'Enrollment' column to calculate the average enrollment size.", "Apply the condition: We need to filter universities founded before 1850, which involves using the 'Founded' column.", "Construct the SQL query: We will use the AVG() function to calculate the average enrollment and include a WHERE clause to filter based on the founding year."], "pred_sql": "SELECT AVG(Enrollment) AS average_enrollment FROM university WHERE Founded < 1850;", "gold_sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "source_tables": ["university"]}
{"sample_id": 996, "db_id": "university_basketball", "question": "Return the average enrollment of universities founded before 1850.", "rationale": ["Identify the table that contains the enrollment data, which is the 'university' table.", "Determine the column that holds the enrollment numbers, which is 'Enrollment'.", "Identify the condition for filtering the universities, which is those founded before 1850.", "Construct the SQL query to select the average of the 'Enrollment' column where the 'Founded' year is less than 1850."], "pred_sql": "SELECT AVG(Enrollment) AS average_enrollment FROM university WHERE Founded < 1850;", "gold_sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "source_tables": ["university"]}
{"sample_id": 997, "db_id": "university_basketball", "question": "Show the enrollment and primary_conference of the oldest college.", "rationale": ["Identify the relevant columns needed for the output: Enrollment and Primary_conference from the university table.", "Determine the condition to find the oldest college, which is based on the Founded year.", "Use a subquery to find the minimum Founded year from the university table.", "Construct the main query to select Enrollment and Primary_conference where the Founded year matches the minimum Founded year."], "pred_sql": "SELECT Enrollment, Primary_conference FROM university WHERE Founded = (SELECT MIN(Founded) FROM university);", "gold_sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "source_tables": ["university"]}
{"sample_id": 998, "db_id": "university_basketball", "question": "What are the enrollment and primary conference for the university which was founded the earliest?", "rationale": ["Identify the relevant columns needed from the university table: Enrollment and Primary_conference.", "Determine the condition to find the university founded the earliest, which involves sorting by the Founded year.", "Use the ORDER BY clause to sort the universities by the Founded year in ascending order.", "Limit the results to only the first entry using LIMIT 1 to get the earliest founded university."], "pred_sql": "SELECT Enrollment, Primary_conference FROM university ORDER BY Founded ASC LIMIT 1;", "gold_sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "source_tables": ["university"]}
{"sample_id": 999, "db_id": "university_basketball", "question": "What is the total and minimum enrollment of all schools?", "rationale": ["Identify the relevant table: The 'university' table contains the 'Enrollment' column which is needed for the query.", "Determine the required calculations: We need to calculate the total and minimum enrollment of all schools.", "Use the SUM() function to calculate the total enrollment and the MIN() function to find the minimum enrollment.", "Construct the SQL query to select the total and minimum enrollment from the 'university' table."], "pred_sql": "SELECT SUM(Enrollment) AS Total_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university;", "gold_sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "source_tables": ["university"]}
