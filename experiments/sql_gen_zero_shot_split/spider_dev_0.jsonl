{"sample_id": 0, "db_id": "concert_singer", "question": "How many singers do we have?", "rationale": ["Identify the table that contains the information about singers, which is the 'singer' table.", "To find out how many singers there are, we need to count the number of entries in the 'singer' table.", "Use the COUNT() function to count the total number of rows in the 'singer' table.", "Construct the SQL query to select the count from the 'singer' table."], "pred_sql": "SELECT COUNT(*) AS total_singers FROM singer;", "gold_sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}
{"sample_id": 1, "db_id": "concert_singer", "question": "What is the total number of singers?", "rationale": ["Identify the table that contains the information about singers, which is the 'singer' table.", "To find the total number of singers, we need to count the number of entries in the 'singer' table.", "Use the COUNT() function to count all rows in the 'singer' table.", "Construct the SQL query to select the count of singers from the 'singer' table."], "pred_sql": "SELECT COUNT(*) AS total_singers FROM singer;", "gold_sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}
{"sample_id": 2, "db_id": "concert_singer", "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "rationale": ["Identify the columns needed: Name, Country, and Age from the singer table.", "Determine the table to query: the singer table.", "Specify the order of results: we want to order by Age from oldest to youngest, which means we will use DESC (descending) order.", "Construct the SQL SELECT statement to retrieve the specified columns and apply the ordering."], "pred_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;", "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "source_tables": ["singer"]}
{"sample_id": 3, "db_id": "concert_singer", "question": "What are the names, countries, and ages for every singer in descending order of age?", "rationale": ["Identify the required columns: Name, Country, and Age from the singer table.", "Specify the table to select from, which is the singer table.", "Use the ORDER BY clause to sort the results by Age in descending order."], "pred_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;", "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "source_tables": ["singer"]}
{"sample_id": 4, "db_id": "concert_singer", "question": "What is the average, minimum, and maximum age of all singers from France?", "rationale": ["Identify the table that contains the relevant data: the 'singer' table holds information about singers, including their age and country.", "Determine the specific columns needed for the query: we need to calculate the average, minimum, and maximum age of singers, which corresponds to the 'Age' column.", "Apply a filter to focus on singers from France: this requires a WHERE clause to specify that the 'Country' column must equal 'France'.", "Construct the SQL query using the SELECT statement to retrieve the average, minimum, and maximum age, applying the appropriate aggregate functions (AVG, MIN, MAX) on the 'Age' column."], "pred_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';", "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "source_tables": ["singer"]}
{"sample_id": 5, "db_id": "concert_singer", "question": "What is the average, minimum, and maximum age for all French singers?", "rationale": ["Identify the relevant table: The 'singer' table contains the information about singers, including their age and country.", "Determine the required calculations: We need to calculate the average, minimum, and maximum age of singers.", "Filter the data: We only want the singers from France, so we will add a WHERE clause to filter by the 'Country' column.", "Construct the SQL query: Use the AVG(), MIN(), and MAX() functions to get the required age statistics, and select them from the 'singer' table with the appropriate filter."], "pred_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';", "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "source_tables": ["singer"]}
{"sample_id": 6, "db_id": "concert_singer", "question": "Show the name and the release year of the song by the youngest singer.", "rationale": ["Identify the relevant table: The 'singer' table contains information about singers, including their age and the songs they perform.", "Determine the required fields: We need to select the 'Song_Name' and 'Song_release_year' from the 'singer' table.", "Find the youngest singer: To find the youngest singer, we need to determine the minimum age from the 'singer' table using a subquery.", "Construct the SQL query: The main query selects the 'Song_Name' and 'Song_release_year' where the 'Age' matches the minimum age found in the subquery."], "pred_sql": "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);", "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "source_tables": ["singer"]}
{"sample_id": 7, "db_id": "concert_singer", "question": "What are the names and release years for all the songs of the youngest singer?", "rationale": ["Identify the youngest singer by finding the minimum age from the singer table.", "Use the result of the youngest singer's age to filter the singer table for that specific age.", "Select the Song_Name and Song_release_year for the filtered youngest singer."], "pred_sql": "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);", "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "source_tables": ["singer"]}
{"sample_id": 8, "db_id": "concert_singer", "question": "What are all distinct countries where singers above age 20 are from?", "rationale": ["Identify the table that contains the information about singers, which is the 'singer' table.", "Determine the column that contains the country information, which is 'Country'.", "Identify the column that contains the age of the singers, which is 'Age'.", "Formulate a query to select distinct countries from the 'singer' table where the age is greater than 20."], "pred_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;", "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "source_tables": ["singer"]}
{"sample_id": 9, "db_id": "concert_singer", "question": "What are  the different countries with singers above age 20?", "rationale": ["Identify the relevant table: The 'singer' table contains information about singers, including their age and country.", "Determine the condition: We need to filter singers who are above the age of 20.", "Select the distinct countries: We want to retrieve unique country names from the filtered results to avoid duplicates.", "Construct the SQL query: Use SELECT DISTINCT to get unique countries from the 'Country' column where the 'Age' is greater than 20."], "pred_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;", "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "source_tables": ["singer"]}
{"sample_id": 10, "db_id": "concert_singer", "question": "Show all countries and the number of singers in each country.", "rationale": ["Identify the table that contains the required information: the 'singer' table has the 'Country' and 'Singer_ID' columns.", "To get the number of singers in each country, we need to count the 'Singer_ID' for each unique 'Country'.", "Use the COUNT() function to count the number of singers and GROUP BY 'Country' to aggregate the results by country."], "pred_sql": "SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country;", "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "source_tables": ["singer"]}
{"sample_id": 11, "db_id": "concert_singer", "question": "How many singers are from each country?", "rationale": ["Identify the relevant table: The 'singer' table contains information about singers, including their country of origin.", "Determine the required information: We need to count the number of singers from each country.", "Use the COUNT() function to count the number of singers for each country.", "Group the results by country using the GROUP BY clause to aggregate the counts for each unique country.", "Construct the SQL query to select the country and the count of singers, grouping by country."], "pred_sql": "SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;", "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "source_tables": ["singer"]}
{"sample_id": 12, "db_id": "concert_singer", "question": "List all song names by singers above the average age.", "rationale": ["Identify the requirement to list song names by singers above the average age.", "Determine that we need to calculate the average age of singers using an aggregate function (AVG).", "Use a subquery to find the average age of all singers.", "Select the Song_Name from the singer table where the Age is greater than the calculated average age."], "pred_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);", "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "source_tables": ["singer"]}
{"sample_id": 13, "db_id": "concert_singer", "question": "What are all the song names by singers who are older than average?", "rationale": ["Identify the relevant table: The 'singer' table contains the information about singers and their songs.", "Determine the condition: We need to find singers who are older than the average age of all singers.", "Calculate the average age: Use a subquery to calculate the average age of singers using AVG(Age).", "Formulate the main query: Select the 'Song_Name' from the 'singer' table where the 'Age' is greater than the average age calculated in the subquery."], "pred_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);", "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "source_tables": ["singer"]}
{"sample_id": 14, "db_id": "concert_singer", "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "rationale": ["Identify the relevant table: The query requires information about stadiums, so we will use the 'stadium' table.", "Determine the columns needed: The user wants to see the 'Location' and 'Name' of the stadiums.", "Specify the condition: We need to filter the stadiums based on their 'Capacity'.", "Use the BETWEEN operator to specify the range of capacity from 5000 to 10000.", "Construct the SQL SELECT statement to retrieve the desired columns from the stadium table with the specified condition."], "pred_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN '5000' AND '10000';", "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "source_tables": ["stadium"]}
{"sample_id": 15, "db_id": "concert_singer", "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "rationale": ["Identify the table that contains the required information: the 'stadium' table.", "Determine the columns needed: 'Location' and 'Name' of the stadium.", "Specify the condition for filtering: the 'Capacity' should be between 5000 and 10000.", "Construct the SQL SELECT statement to retrieve the desired columns from the 'stadium' table with the specified condition."], "pred_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN '5000' AND '10000';", "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "source_tables": ["stadium"]}
{"sample_id": 16, "db_id": "concert_singer", "question": "What is the maximum capacity and the average of all stadiums ?", "rationale": ["Identify the required information: maximum capacity and average capacity of all stadiums.", "Determine the appropriate SQL functions to use: MAX() for maximum value and AVG() for average value.", "Select the 'Capacity' column from the 'stadium' table to perform the calculations.", "Construct the SQL query to select the maximum and average capacity from the stadium table."], "pred_sql": "SELECT MAX(Capacity) AS Max_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium;", "gold_sql": "select max(capacity), average from stadium", "source_tables": ["stadium"]}
{"sample_id": 17, "db_id": "concert_singer", "question": "What is the average and maximum capacities for all stadiums ?", "rationale": ["Identify the required data: average and maximum capacities of all stadiums.", "Determine the appropriate SQL functions: AVG() for average and MAX() for maximum.", "Select the 'Capacity' column from the 'stadium' table to perform the calculations.", "Construct the SQL query to select the average and maximum capacities from the stadium table."], "pred_sql": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;", "gold_sql": "select avg(capacity) ,  max(capacity) from stadium", "source_tables": ["stadium"]}
{"sample_id": 18, "db_id": "concert_singer", "question": "What is the name and capacity for the stadium with highest average attendance?", "rationale": ["Identify the relevant table: The query requires information about stadiums, so we will use the 'stadium' table.", "Determine the columns needed: We need the 'Name' and 'Capacity' of the stadium.", "Find the stadium with the highest average attendance: We will use a subquery to find the maximum value of the 'Average' column in the 'stadium' table.", "Construct the SQL query: We will select the 'Name' and 'Capacity' from the 'stadium' table where the 'Average' matches the maximum average attendance found in the subquery."], "pred_sql": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);", "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "source_tables": ["stadium"]}
{"sample_id": 19, "db_id": "concert_singer", "question": "What is the name and capacity for the stadium with the highest average attendance?", "rationale": ["Identify the relevant table: The query requires information about stadiums, so we will use the 'stadium' table.", "Determine the columns needed: We need the 'Name' and 'Capacity' of the stadium.", "Find the stadium with the highest average attendance: We will order the results by the 'Average' column in descending order to get the stadium with the highest average attendance at the top.", "Limit the results to one: Since we only want the stadium with the highest average attendance, we will use 'LIMIT 1' to return only the top result."], "pred_sql": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;", "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "source_tables": ["stadium"]}
{"sample_id": 20, "db_id": "concert_singer", "question": "How many concerts are there in year 2014 or 2015?", "rationale": ["Identify the table that contains concert information, which is the 'concert' table.", "Determine the relevant column for the year of the concert, which is 'Year'.", "Use the COUNT() function to count the number of concerts that occurred in the specified years.", "Specify the years of interest (2014 and 2015) using the IN clause in the WHERE condition."], "pred_sql": "SELECT COUNT(*) AS concert_count FROM concert WHERE Year IN ('2014', '2015');", "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "source_tables": ["concert"]}
{"sample_id": 21, "db_id": "concert_singer", "question": "How many concerts occurred in 2014 or 2015?", "rationale": ["Identify the table that contains the concert information, which is the 'concert' table.", "Determine the relevant column for the year of the concert, which is 'Year'.", "Specify the years of interest, which are 2014 and 2015.", "Use the COUNT() function to count the number of concerts that occurred in those years.", "Construct the SQL query to select the count from the 'concert' table where the 'Year' is either 2014 or 2015."], "pred_sql": "SELECT COUNT(*) AS concert_count FROM concert WHERE Year IN ('2014', '2015');", "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "source_tables": ["concert"]}
{"sample_id": 22, "db_id": "concert_singer", "question": "Show the stadium name and the number of concerts in each stadium.", "rationale": ["Identify the required columns: Stadium name and the number of concerts.", "The stadium name is in the 'stadium' table under the 'Name' column.", "The number of concerts can be counted from the 'concert' table using the 'concert_ID' column.", "To relate the two tables, we will use the 'Stadium_ID' which is a foreign key in the 'concert' table.", "We will perform a LEFT JOIN between the 'stadium' table and the 'concert' table on 'Stadium_ID' to ensure we get all stadiums even if they have no concerts.", "We will group the results by 'Stadium_ID' and 'Name' to count the number of concerts for each stadium."], "pred_sql": "SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID, s.Name;", "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "source_tables": ["concert", "stadium"]}
{"sample_id": 23, "db_id": "concert_singer", "question": "For each stadium, how many concerts play there?", "rationale": ["Identify the relevant tables: 'stadium' and 'concert'.", "We need to count the number of concerts for each stadium, which requires a join between the 'stadium' and 'concert' tables based on the 'Stadium_ID'.", "Use a LEFT JOIN to ensure we include all stadiums, even those with no concerts.", "Select the stadium name and count the concerts, grouping by the stadium ID to get the count for each stadium."], "pred_sql": "SELECT stadium.Name, COUNT(concert.concert_ID) AS concert_count \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nGROUP BY stadium.Stadium_ID;", "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "source_tables": ["concert", "stadium"]}
{"sample_id": 24, "db_id": "concert_singer", "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "rationale": ["Identify the relevant tables: stadium and concert.", "We need to join the stadium and concert tables on the Stadium_ID to get the stadium details for each concert.", "Filter the concerts to include only those that occurred in the year 2014 or later using a WHERE clause.", "Group the results by stadium to count the number of concerts held at each stadium.", "Order the results by the count of concerts in descending order to find the stadium with the most concerts.", "Select the stadium name and capacity from the results.", "Limit the results to only the top entry to get the stadium with the most concerts."], "pred_sql": "SELECT s.Name, s.Capacity \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year >= '2014' \nGROUP BY s.Stadium_ID \nORDER BY COUNT(c.concert_ID) DESC \nLIMIT 1;", "gold_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["concert", "stadium"]}
{"sample_id": 25, "db_id": "concert_singer", "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "rationale": ["Identify the relevant tables: stadium and concert.", "We need to find the stadium with the most concerts after 2013, so we will join the stadium and concert tables on the Stadium_ID.", "Filter the concerts to only include those that occurred after 2013 using a WHERE clause.", "Group the results by stadium to count the number of concerts held at each stadium.", "Order the results by the count of concerts in descending order to get the stadium with the most concerts at the top.", "Limit the results to 1 to get only the stadium with the most concerts.", "Select the Name and Capacity of the stadium from the results."], "pred_sql": "SELECT s.Name, s.Capacity \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year > 2013 \nGROUP BY s.Stadium_ID \nORDER BY COUNT(c.concert_ID) DESC \nLIMIT 1;", "gold_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "source_tables": ["concert", "stadium"]}
{"sample_id": 26, "db_id": "concert_singer", "question": "Which year has most number of concerts?", "rationale": ["Identify the relevant table: The 'concert' table contains the information about concerts and their years.", "Determine the required information: We need to count the number of concerts for each year.", "Use the COUNT() function to count the concerts grouped by year: This will give us the total number of concerts for each year.", "Group the results by the 'Year' column to aggregate the concert counts.", "Order the results in descending order based on the concert count to find the year with the most concerts.", "Limit the results to 1 to get only the year with the highest count."], "pred_sql": "SELECT Year, COUNT(*) as concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;", "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["concert"]}
{"sample_id": 27, "db_id": "concert_singer", "question": "What is the year that had the most concerts?", "rationale": ["Identify the relevant table: The 'concert' table contains the 'Year' column which is needed to determine the year with the most concerts.", "Count the number of concerts for each year: Use the COUNT() function to count the number of concerts grouped by the 'Year' column.", "Order the results: Use ORDER BY to sort the results in descending order based on the count of concerts.", "Limit the results: Use LIMIT 1 to get only the year with the highest count of concerts."], "pred_sql": "SELECT Year, COUNT(*) as concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;", "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["concert"]}
{"sample_id": 28, "db_id": "concert_singer", "question": "Show the stadium names without any concert.", "rationale": ["Identify the table that contains stadium information, which is the 'stadium' table.", "We need to find stadiums that do not have any concerts associated with them.", "To do this, we can use a subquery to select all Stadium_IDs from the 'concert' table.", "We will then use the NOT IN clause to filter out those stadiums from the 'stadium' table.", "Finally, we will select the 'Name' column from the filtered results to get the names of the stadiums without any concerts."], "pred_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)", "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "source_tables": ["concert", "stadium"]}
{"sample_id": 29, "db_id": "concert_singer", "question": "What are the names of the stadiums without any concerts?", "rationale": ["Identify the table that contains stadium information, which is the 'stadium' table.", "We need to find stadiums that do not have any concerts associated with them.", "To do this, we can use a subquery to select all Stadium_IDs from the 'concert' table.", "We will then use the NOT IN clause to filter out those stadiums from the 'stadium' table.", "Finally, we will select the 'Name' column from the 'stadium' table for the stadiums that are not in the list of stadiums that have concerts."], "pred_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);", "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "source_tables": ["concert", "stadium"]}
{"sample_id": 30, "db_id": "concert_singer", "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "rationale": ["Identify the requirement to find countries of singers based on their age criteria: one singer above 40 and another below 30.", "To achieve this, we need to join the singer table with itself to compare two different singers.", "Use a self-join on the singer table, ensuring that the two singers are different by using the condition s1.Singer_ID != s2.Singer_ID.", "Filter the results to include only those singers where one is above 40 years old (s1.Age > 40) and the other is below 30 years old (s2.Age < 30).", "Select the distinct countries from the results to avoid duplicates, as multiple singers from the same country may meet the age criteria."], "pred_sql": "SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Singer_ID != s2.Singer_ID WHERE s1.Age > 40 AND s2.Age < 30;", "gold_sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "source_tables": ["singer"]}
{"sample_id": 31, "db_id": "concert_singer", "question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "rationale": ["Identify the main table to query from, which is the 'stadium' table to get the names of the stadiums.", "Determine the condition to exclude stadiums that had concerts in the year 2014.", "To find stadiums with concerts in 2014, we need to query the 'concert' table and select the 'Stadium_ID' where the 'Year' is '2014'.", "Use a subquery to filter out the stadiums from the main query by using the NOT IN clause with the results of the subquery."], "pred_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');", "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "source_tables": ["concert", "stadium"]}
{"sample_id": 32, "db_id": "concert_singer", "question": "What are the names of all stadiums that did not have a concert in 2014?", "rationale": ["Identify the main requirement: to find stadium names without concerts in 2014.", "Determine the relevant tables: 'stadium' for stadium names and 'concert' for concert years.", "Use a subquery to find all Stadium_IDs that had concerts in 2014.", "Select the names from the 'stadium' table where the Stadium_ID is not in the list of IDs from the subquery."], "pred_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');", "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "source_tables": ["concert", "stadium"]}
{"sample_id": 33, "db_id": "concert_singer", "question": "Show the name and theme for all concerts and the number of singers in each concert.", "rationale": ["Identify the tables needed: concert and singer_in_concert.", "Select the columns required: concert_Name and Theme from the concert table, and count the number of singers from the singer_in_concert table.", "Use a LEFT JOIN to combine the concert table with the singer_in_concert table on the concert_ID.", "Group the results by concert_ID to get the count of singers for each concert."], "pred_sql": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers\nFROM concert\nLEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert.concert_ID;", "gold_sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "source_tables": ["singer_in_concert", "concert"]}
{"sample_id": 34, "db_id": "concert_singer", "question": "What are the names , themes , and number of singers for every concert ?", "rationale": ["Identify the relevant tables: We need data from the 'concert' table for concert names and themes, and from the 'singer_in_concert' table to count the number of singers.", "Select the required columns: We need 'concert_Name' and 'Theme' from the 'concert' table, and we will count the 'Singer_ID' from the 'singer_in_concert' table to get the number of singers.", "Join the tables: We will perform a LEFT JOIN between 'concert' and 'singer_in_concert' on the 'concert_ID' to associate each concert with its singers.", "Group the results: We will group the results by 'concert_ID' to ensure we get a count of singers for each concert without duplicating concert entries."], "pred_sql": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers\nFROM concert\nLEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert.concert_ID;", "gold_sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "source_tables": ["singer_in_concert", "concert"]}
{"sample_id": 35, "db_id": "concert_singer", "question": "List singer names and number of concerts for each singer.", "rationale": ["Identify the relevant tables: We need to retrieve singer names and the number of concerts they have performed in, which involves the 'singer' and 'singer_in_concert' tables.", "Select the singer's name: We will select the 'Name' column from the 'singer' table.", "Count the number of concerts: We will count the 'concert_ID' from the 'singer_in_concert' table to get the number of concerts for each singer.", "Join the tables: We will perform a LEFT JOIN between the 'singer' table and the 'singer_in_concert' table on the 'Singer_ID' to link singers with their concerts.", "Group the results: We will group the results by 'Singer_ID' to ensure we get a count of concerts for each individual singer."], "pred_sql": "SELECT s.Name, COUNT(sic.concert_ID) AS Number_of_Concerts\nFROM singer s\nLEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nGROUP BY s.Singer_ID;", "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "source_tables": ["singer_in_concert", "singer"]}
{"sample_id": 36, "db_id": "concert_singer", "question": "What are the names of the singers and number of concerts for each person?", "rationale": ["Identify the relevant tables: 'singer' for singer names and 'singer_in_concert' for concert participation.", "We need to count the number of concerts for each singer, which requires joining the 'singer' table with the 'singer_in_concert' table.", "Next, we join the 'singer_in_concert' table with the 'concert' table to ensure we have all necessary data, although the concert details are not needed for the final output.", "Use COUNT() function to count the number of concerts for each singer.", "Group the results by singer name to get the count for each individual."], "pred_sql": "SELECT singer.Name, COUNT(concert.concert_ID) AS Number_of_Concerts\nFROM singer\nLEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nLEFT JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\nGROUP BY singer.Name;", "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "source_tables": ["singer_in_concert", "singer"]}
{"sample_id": 37, "db_id": "concert_singer", "question": "List all singer names in concerts in year 2014.", "rationale": ["Identify the tables involved: We need to retrieve singer names, which are in the 'singer' table, and we need to filter by concerts that occurred in 2014, which are in the 'concert' table.", "Determine the relationship between the tables: The 'singer' table is related to the 'singer_in_concert' table through 'Singer_ID', and the 'singer_in_concert' table is related to the 'concert' table through 'concert_ID'.", "Construct the SQL query: We will use INNER JOIN to combine the 'singer', 'singer_in_concert', and 'concert' tables based on their relationships. We will select the 'Name' from the 'singer' table and filter the results where the 'Year' in the 'concert' table is '2014'."], "pred_sql": "SELECT singer.Name FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014';", "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["singer_in_concert", "singer", "concert"]}
{"sample_id": 38, "db_id": "concert_singer", "question": "What are the names of the singers who performed in a concert in 2014?", "rationale": ["Identify the relevant tables: We need information from the 'singer' and 'concert' tables, and we will use the 'singer_in_concert' table to link them.", "Determine the columns needed: We need the 'Name' column from the 'singer' table and the 'Year' column from the 'concert' table.", "Establish the relationships: Use JOINs to connect 'singer', 'singer_in_concert', and 'concert' based on their foreign key relationships.", "Filter the results: We need to filter the concerts to only include those that occurred in the year 2014.", "Select distinct names: Since a singer may perform in multiple concerts, we use DISTINCT to ensure each name appears only once."], "pred_sql": "SELECT DISTINCT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014';", "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["singer_in_concert", "singer", "concert"]}
{"sample_id": 39, "db_id": "concert_singer", "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "rationale": ["Identify the table that contains the information about singers, which is the 'singer' table.", "Determine the columns needed: 'Name' and 'Country' of the singer.", "The condition specifies that the song name should contain 'Hey', so we will use the LIKE operator with wildcards.", "Construct the SQL SELECT statement to retrieve the required columns from the 'singer' table with the specified condition."], "pred_sql": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';", "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "source_tables": ["singer"]}
{"sample_id": 40, "db_id": "concert_singer", "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "rationale": ["Identify the table that contains the information about singers, which is the 'singer' table.", "Determine the columns needed: 'Name' and 'Country' from the 'singer' table.", "The condition specifies that we need to filter singers based on their song titles containing the word 'Hey'.", "The 'Song_Name' column in the 'singer' table will be used for this condition.", "Use the SQL LIKE operator with wildcards to find song titles that include 'Hey'.", "Construct the SQL SELECT statement to retrieve the desired columns with the specified condition."], "pred_sql": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';", "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "source_tables": ["singer"]}
{"sample_id": 41, "db_id": "concert_singer", "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "rationale": ["Identify the tables involved: 'stadium' for stadium details and 'concert' for concert years.", "We need to find stadiums that hosted concerts in both 2014 and 2015, so we will join the 'stadium' and 'concert' tables on 'Stadium_ID'.", "We will filter the concerts to only include those that occurred in the years 2014 and 2015 using a WHERE clause.", "To ensure we only get stadiums that hosted concerts in both years, we will group the results by 'Stadium_ID' and count the distinct years.", "Finally, we will use a HAVING clause to ensure that the count of distinct years is 2, meaning the stadium hosted concerts in both years."], "pred_sql": "SELECT DISTINCT s.Name, s.Location \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year IN ('2014', '2015') \nGROUP BY s.Stadium_ID \nHAVING COUNT(DISTINCT c.Year) = 2;", "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "source_tables": ["concert", "stadium"]}
{"sample_id": 42, "db_id": "concert_singer", "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "rationale": ["Identify the relevant tables: We need information from the 'stadium' and 'concert' tables.", "We need to find stadiums that hosted concerts in both 2014 and 2015. This requires joining the 'stadium' table with the 'concert' table on the 'Stadium_ID'.", "We will filter the concerts to only include those that occurred in the years 2014 and 2015 using a WHERE clause.", "To ensure we only get stadiums that had concerts in both years, we will group the results by 'Stadium_ID' and use the HAVING clause to count distinct years, ensuring it equals 2 (for both years).", "Finally, we select the distinct names and locations of the stadiums that meet these criteria."], "pred_sql": "SELECT DISTINCT s.Name, s.Location \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year IN ('2014', '2015') \nGROUP BY s.Stadium_ID \nHAVING COUNT(DISTINCT c.Year) = 2;", "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "source_tables": ["concert", "stadium"]}
{"sample_id": 43, "db_id": "concert_singer", "question": "Find the number of concerts happened in the stadium with the highest capacity .", "rationale": ["Identify the stadium with the highest capacity by ordering the stadium table by the 'Capacity' column in descending order and selecting the top entry.", "Use a subquery to find the 'Stadium_ID' of the stadium with the highest capacity.", "Count the number of concerts in the 'concert' table that are held in the stadium identified in the previous step by using a WHERE clause to filter by 'Stadium_ID'."], "pred_sql": "SELECT COUNT(*) AS NumberOfConcerts\nFROM concert\nWHERE Stadium_ID = (\n    SELECT Stadium_ID\n    FROM stadium\n    ORDER BY Capacity DESC\n    LIMIT 1\n)", "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "source_tables": ["concert", "stadium"]}
{"sample_id": 44, "db_id": "concert_singer", "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "rationale": ["Identify the table that contains the concert information, which is the 'concert' table.", "We need to count the number of concerts, so we will use the COUNT() function on the concert_ID column.", "To find the stadium with the largest capacity, we need to join the 'concert' table with the 'stadium' table using the Stadium_ID foreign key.", "We will filter the results to only include concerts held in the stadium with the maximum capacity. This requires a subquery to find the maximum capacity from the 'stadium' table."], "pred_sql": "SELECT COUNT(concert.concert_ID) AS Number_of_Concerts\nFROM concert\nJOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID\nWHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);", "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "source_tables": ["concert", "stadium"]}
{"sample_id": 45, "db_id": "pets_1", "question": "Find the number of pets whose weight is heavier than 10.", "rationale": ["Identify the table that contains the relevant data: the 'Pets' table holds information about pets, including their weight.", "Determine the condition for filtering the pets: we need to find pets whose weight is greater than 10.", "Construct the SQL query to count the number of pets that meet the weight condition using the COUNT() function.", "Use the WHERE clause to specify the condition for weight being greater than 10."], "pred_sql": "SELECT COUNT(*) AS NumberOfPets FROM Pets WHERE weight > '10';", "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10", "source_tables": ["pets"]}
{"sample_id": 46, "db_id": "pets_1", "question": "How many pets have a greater weight than 10?", "rationale": ["Identify the table that contains the pet weight information, which is the 'Pets' table.", "Determine the condition for filtering the pets, which is that their weight must be greater than 10.", "Use the COUNT() function to count the number of pets that meet the weight condition.", "Construct the SQL query to select the count of pets from the 'Pets' table where the weight is greater than 10."], "pred_sql": "SELECT COUNT(*) AS PetCount FROM Pets WHERE weight > 10;", "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10", "source_tables": ["pets"]}
{"sample_id": 47, "db_id": "pets_1", "question": "Find the weight of the youngest dog.", "rationale": ["Identify the relevant table that contains the weight of pets, which is the 'Pets' table.", "Filter the pets to only include those that are dogs by using the condition 'PetType = 'dog''.", "To find the youngest dog, we need to determine the minimum age of dogs. This requires a subquery to select the PetID of the youngest dog.", "The subquery will first filter the 'Pets' table for dogs, then order them by 'pet_age' in ascending order and limit the results to the first entry to get the youngest dog.", "We will then use this PetID in the main query to select the weight of the youngest dog."], "pred_sql": "SELECT weight FROM Pets WHERE PetType = 'dog' AND PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student ORDER BY Age ASC LIMIT 1))", "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}
{"sample_id": 48, "db_id": "pets_1", "question": "How much does the youngest dog weigh?", "rationale": ["Identify the type of pet we are interested in, which is 'dog'.", "We need to find the youngest dog, so we will first need to find the age of the dogs.", "To find the youngest dog, we will order the pets by their age and limit the results to 1.", "We will join the Pets table with the Has_Pet table to link pets to their owners (students).", "Finally, we will select the weight of the youngest dog from the Pets table."], "pred_sql": "SELECT weight FROM Pets WHERE PetType = 'dog' AND PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student ORDER BY Age ASC LIMIT 1))", "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}
{"sample_id": 49, "db_id": "pets_1", "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "rationale": ["Identify the table that contains the pet information, which is the 'Pets' table.", "Determine the columns needed for the query: 'PetType' for the type of pet and 'weight' for the weight of the pet.", "Use the MAX() function to find the maximum weight for each type of pet.", "Group the results by 'PetType' to ensure that the maximum weight is calculated for each distinct type of pet."], "pred_sql": "SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;", "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "source_tables": ["pets"]}
{"sample_id": 50, "db_id": "pets_1", "question": "List the maximum weight and type for each type of pet.", "rationale": ["Identify the relevant table: The query requires information about pets, so we will use the Pets table.", "Determine the required columns: We need the type of pet (PetType) and the maximum weight (weight) for each type of pet.", "Use the MAX() function: To find the maximum weight for each type of pet, we will use the MAX() aggregate function.", "Group the results: Since we want the maximum weight for each type of pet, we will group the results by PetType using the GROUP BY clause."], "pred_sql": "SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;", "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "source_tables": ["pets"]}
{"sample_id": 51, "db_id": "pets_1", "question": "Find number of pets owned by students who are older than 20.", "rationale": ["Identify the tables involved: We need to get information from the Student and Has_Pet tables.", "Determine the condition: We want to find students who are older than 20 years.", "Count the number of pets: We will use the COUNT function to count the number of pets owned by these students.", "Join the tables: We need to join the Student table with the Has_Pet table on the StuID column to link students with their pets.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT COUNT(Has_Pet.PetID) AS NumberOfPets\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nWHERE Student.Age > '20';", "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "source_tables": ["student", "has_pet"]}
{"sample_id": 52, "db_id": "pets_1", "question": "How many pets are owned by students that have an age greater than 20?", "rationale": ["Identify the main requirement: count the number of pets owned by students older than 20.", "To find the number of pets, we need to count entries in the Has_Pet table.", "We need to filter the students based on their age, which requires a subquery to select the StuID of students older than 20 from the Student table.", "The subquery will return a list of StuID values that we can use to filter the Has_Pet table.", "Finally, we will count the number of entries in the Has_Pet table that match the filtered StuID values."], "pred_sql": "SELECT COUNT(*) AS NumberOfPets FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > '20');", "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "source_tables": ["student", "has_pet"]}
{"sample_id": 53, "db_id": "pets_1", "question": "Find the number of dog pets that are raised by female students (with sex F).", "rationale": ["Identify the tables involved: We need to gather information from the Student, Has_Pet, and Pets tables.", "Determine the relationship between the tables: The Has_Pet table links students to their pets, and the Pets table contains details about the pets.", "Filter for female students: We need to include a condition to only consider students where Sex = 'F'.", "Filter for dog pets: We also need to include a condition to only count pets where PetType = 'dog'.", "Count the number of records that meet these criteria: We will use COUNT(*) to get the total number of dog pets owned by female students."], "pred_sql": "SELECT COUNT(*) AS NumberOfDogs\nFROM Has_Pet HP\nJOIN Pets P ON HP.PetID = P.PetID\nJOIN Student S ON HP.StuID = S.StuID\nWHERE P.PetType = 'dog' AND S.Sex = 'F';", "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 54, "db_id": "pets_1", "question": "How many dog pets are raised by female students?", "rationale": ["Identify the tables involved: We need data from the Has_Pet, Pets, and Student tables.", "Determine the relationship: We need to join these tables based on the foreign keys. Has_Pet links students to their pets, and Pets provides details about the pets.", "Filter for dog pets: We need to count only those pets where PetType is 'dog'.", "Filter for female students: We also need to ensure that the students are female by checking the Sex column in the Student table.", "Count the results: Finally, we will count the number of records that meet both criteria."], "pred_sql": "SELECT COUNT(*) AS DogCount FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID JOIN Student S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'female';", "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 55, "db_id": "pets_1", "question": "Find the number of distinct type of pets.", "rationale": ["Identify the requirement: We need to find the number of distinct types of pets.", "Determine the relevant table: The 'Pets' table contains the 'PetType' column which holds the types of pets.", "Use the COUNT function to count the distinct values in the 'PetType' column.", "Construct the SQL query to select the count of distinct pet types from the Pets table."], "pred_sql": "SELECT COUNT(DISTINCT PetType) AS distinct_pet_types FROM Pets;", "gold_sql": "SELECT count(DISTINCT pettype) FROM pets", "source_tables": ["pets"]}
{"sample_id": 56, "db_id": "pets_1", "question": "How many different types of pet are there?", "rationale": ["Identify the table that contains the information about pet types, which is the 'Pets' table.", "To find the number of different types of pets, we need to count distinct values in the 'PetType' column.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique pet types."], "pred_sql": "SELECT COUNT(DISTINCT PetType) AS DifferentPetTypes FROM Pets;", "gold_sql": "SELECT count(DISTINCT pettype) FROM pets", "source_tables": ["pets"]}
{"sample_id": 57, "db_id": "pets_1", "question": "Find the first name of students who have cat or dog pet.", "rationale": ["Identify the tables involved: Student, Has_Pet, and Pets.", "Determine the relationship between the tables: Student is linked to Has_Pet through StuID, and Has_Pet is linked to Pets through PetID.", "Select the desired column: We need the first names of students, which is in the Student table (Fname).", "Filter the results to include only those students who have pets of type 'cat' or 'dog'. This requires a WHERE clause that checks the PetType in the Pets table.", "Use JOIN statements to combine the tables based on their relationships, ensuring we can access the necessary columns from each table."], "pred_sql": "SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');", "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 58, "db_id": "pets_1", "question": "What are the first names of every student who has a cat or dog as a pet?", "rationale": ["Identify the relevant tables: Student, Has_Pet, and Pets.", "We need to find students who have pets, so we will join the Student table with the Has_Pet table on StuID.", "Next, we will join the Has_Pet table with the Pets table on PetID to access pet details.", "We are specifically interested in the pet types 'cat' and 'dog', so we will filter the results using a WHERE clause that checks if Pets.PetType is in ('cat', 'dog').", "Finally, we will select the first names of the students from the Student table."], "pred_sql": "SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');", "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 59, "db_id": "pets_1", "question": "Find the first name of students who have both cat and dog pets .", "rationale": ["Identify the tables involved: We need to get student names from the Student table and filter based on pet types from the Pets table, using the Has_Pet table to link students to their pets.", "We need to find students who have both a cat and a dog. This requires joining the Student table with the Has_Pet table twice (once for each pet type).", "Join the Student table (S) with the Has_Pet table (HP1) to get the pets owned by students, and then join with the Pets table (P1) to filter for cats.", "Repeat the join with Has_Pet (HP2) and Pets (P2) to filter for dogs.", "Use a WHERE clause to specify that one pet type must be 'cat' and the other must be 'dog'.", "Select the distinct first names (Fname) of the students who meet these criteria."], "pred_sql": "SELECT DISTINCT S.Fname \nFROM Student S \nJOIN Has_Pet HP1 ON S.StuID = HP1.StuID \nJOIN Pets P1 ON HP1.PetID = P1.PetID \nJOIN Has_Pet HP2 ON S.StuID = HP2.StuID \nJOIN Pets P2 ON HP2.PetID = P2.PetID \nWHERE P1.PetType = 'cat' AND P2.PetType = 'dog';", "gold_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 60, "db_id": "pets_1", "question": "What are the students' first names who have both cats and dogs as pets?", "rationale": ["We need to find students who own both cats and dogs.", "First, we will join the Student table with the Has_Pet table to link students with their pets.", "Next, we will join the resulting table with the Pets table to get the type of pets owned by each student.", "We will filter the results to include only those pets that are either 'cat' or 'dog'.", "To ensure that we only get students who have both types of pets, we will group the results by student ID.", "Finally, we will use the HAVING clause to count the distinct pet types for each student and ensure that it equals 2, indicating they have both a cat and a dog."], "pred_sql": "SELECT DISTINCT s.Fname \nFROM Student s \nJOIN Has_Pet hp ON s.StuID = hp.StuID \nJOIN Pets p ON hp.PetID = p.PetID \nWHERE p.PetType IN ('cat', 'dog') \nGROUP BY s.StuID \nHAVING COUNT(DISTINCT p.PetType) = 2;", "gold_sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 61, "db_id": "pets_1", "question": "Find the major and age of students who do not have a cat pet.", "rationale": ["We need to find the major and age of students who do not have a cat pet.", "To do this, we will select the 'Major' and 'Age' columns from the 'Student' table.", "We need to check the relationship between students and their pets, so we will use a LEFT JOIN between the 'Student' table and the 'Has_Pet' table on 'StuID'.", "Next, we will join the 'Pets' table to get the pet types by using another LEFT JOIN on 'PetID'.", "To filter out students who do not have a cat, we will use a WHERE clause that checks if the 'PetType' is NULL (indicating no pets) or if the 'PetType' is not equal to 'cat'."], "pred_sql": "SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IS NULL OR Pets.PetType != 'cat';", "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 62, "db_id": "pets_1", "question": "What major is every student who does not own a cat as a pet, and also how old are they?", "rationale": ["Identify the columns needed: Major and Age from the Student table.", "Determine the relationship between students and their pets: use the Has_Pet table to link Student and Pets tables.", "Use a LEFT JOIN to include all students, even those without pets.", "Filter the results to exclude students who own a cat: use a WHERE clause to check that PetType is not 'cat' or is NULL (for students without pets)."], "pred_sql": "SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;", "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 63, "db_id": "pets_1", "question": "Find the id of students who do not have a cat pet.", "rationale": ["Identify the relevant tables: Student, Has_Pet, and Pets.", "We need to find students who do not have a cat as a pet.", "Use a LEFT JOIN to connect the Student table with Has_Pet to include all students, even those without pets.", "Then, join the Pets table to get the pet types associated with each student.", "Filter the results to include only those students where the PetType is not 'cat' or where there is no associated pet (i.e., Pets.PetType IS NULL).", "Select the StuID of the students who meet the criteria."], "pred_sql": "SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;", "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 64, "db_id": "pets_1", "question": "What are the ids of the students who do not own cats as pets?", "rationale": ["Identify the main requirement: We need the IDs of students who do not own cats.", "To find students who do not own cats, we can use a subquery to first find all students who own cats.", "The subquery will select the StuID from the Has_Pet table where the PetID corresponds to a cat in the Pets table.", "We will then use the NOT IN clause to filter out these students from the main query that selects all student IDs from the Student table."], "pred_sql": "SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');", "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 65, "db_id": "pets_1", "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "rationale": ["Identify the required fields: first name and age of students.", "Determine the tables involved: Student, Has_Pet, and Pets.", "Join the Student table with Has_Pet to link students with their pets.", "Join the Has_Pet table with Pets to filter by pet type.", "Use a WHERE clause to filter for students who have a dog.", "Use a subquery to exclude students who have a cat by checking the PetType in the Pets table."], "pred_sql": "SELECT S.Fname, S.Age \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nWHERE P.PetType = 'dog' \nAND S.StuID NOT IN (\n    SELECT HP2.StuID \n    FROM Has_Pet HP2 \n    JOIN Pets P2 ON HP2.PetID = P2.PetID \n    WHERE P2.PetType = 'cat'\n);", "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 66, "db_id": "pets_1", "question": "What is the first name of every student who has a dog but does not have a cat?", "rationale": ["Identify the tables involved: We need information from the Student, Has_Pet, and Pets tables.", "We need to find students who have a dog. This requires joining the Student table with the Has_Pet and Pets tables on the appropriate keys.", "We filter the results to include only those pets that are dogs by using a WHERE clause with Pets.PetType = 'dog'.", "Next, we need to ensure that these students do not have a cat. To do this, we can use a subquery that selects the StuID of students who have a cat.", "The subquery joins Has_Pet and Pets to find students with cats, filtering with Pets.PetType = 'cat'.", "We use the NOT IN clause to exclude any students from the main query who are found in the subquery results.", "Finally, we select the distinct first names of the students who meet these criteria."], "pred_sql": "SELECT DISTINCT Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog' \nAND Student.StuID NOT IN (\n    SELECT Has_Pet.StuID \n    FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE Pets.PetType = 'cat'\n);", "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 67, "db_id": "pets_1", "question": "Find the type and weight of the youngest pet.", "rationale": ["Identify the relevant tables: We need to look at the Pets table to find the type and weight of pets.", "Determine the youngest pet: To find the youngest pet, we need to order the pets by their age. We will use a subquery to get the PetID of the youngest pet.", "Link the pet to the student: We need to ensure that we are looking at pets that are owned by students, so we will join the Has_Pet table to link students to their pets.", "Select the required fields: Finally, we will select the PetType and weight of the youngest pet."], "pred_sql": "SELECT PetType, weight FROM Pets WHERE PetID = (SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) ORDER BY (SELECT pet_age FROM Pets WHERE Pets.PetID = Has_Pet.PetID) ASC LIMIT 1) LIMIT 1) LIMIT 1;", "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}
{"sample_id": 68, "db_id": "pets_1", "question": "What type of pet is the youngest animal, and how much does it weigh?", "rationale": ["Identify the relevant table that contains pet information, which is the 'Pets' table.", "To find the youngest pet, we need to sort the pets by their age in ascending order.", "We will select the 'PetType' and 'weight' columns from the 'Pets' table.", "To get only the youngest pet, we will limit the results to 1 after sorting."], "pred_sql": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1;", "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}
{"sample_id": 69, "db_id": "pets_1", "question": "Find the id and weight of all pets whose age is older than 1.", "rationale": ["Identify the relevant table: The query is about pets, so we will use the 'Pets' table.", "Determine the columns needed: We need the 'PetID' and 'weight' of the pets.", "Apply the condition: We need to filter pets based on their age, specifically those older than 1.", "Construct the SQL query: Using SELECT to get the required columns and WHERE to apply the age condition."], "pred_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > '1';", "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "source_tables": ["pets"]}
{"sample_id": 70, "db_id": "pets_1", "question": "What is the id and weight of every pet who is older than 1?", "rationale": ["Identify the relevant table: The query is asking for information about pets, so we will be using the 'Pets' table.", "Determine the columns needed: The query requests the 'PetID' and 'weight' of the pets, so we will select these two columns.", "Apply the condition: The query specifies that we only want pets that are older than 1, which will be implemented in the WHERE clause as 'pet_age > '1''.", "Construct the SQL query: Combine the SELECT statement with the FROM clause and the WHERE condition to form the complete SQL query."], "pred_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > '1';", "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "source_tables": ["pets"]}
{"sample_id": 71, "db_id": "pets_1", "question": "Find the average and maximum age for each type of pet.", "rationale": ["Identify the tables involved: We need to gather information from the Pets table to get the pet types and their ages.", "Determine the required calculations: We need to calculate the average and maximum age of pets, which requires using the AVG() and MAX() functions.", "Join the necessary tables: Since the Pets table is linked to the Has_Pet table through PetID, we need to join these tables to ensure we can access all relevant data.", "Group the results: To get the average and maximum age for each type of pet, we need to group the results by PetType.", "Construct the SQL query: Combine all the elements into a complete SQL query that selects the pet type, average age, and maximum age, while ensuring proper data type conversion for age."], "pred_sql": "SELECT Pets.PetType, AVG(CAST(Pets.pet_age AS INTEGER)) AS AverageAge, MAX(CAST(Pets.pet_age AS INTEGER)) AS MaxAge\nFROM Pets\nJOIN Has_Pet ON Pets.PetID = Has_Pet.PetID\nGROUP BY Pets.PetType;", "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}
{"sample_id": 72, "db_id": "pets_1", "question": "What is the average and maximum age for each pet type?", "rationale": ["Identify the relevant table: The query requires information about pets, so we will use the 'Pets' table.", "Determine the required calculations: We need to calculate the average and maximum age of pets, which will involve using the AVG() and MAX() functions.", "Group the results by pet type: Since we want the average and maximum age for each pet type, we will use the GROUP BY clause on the 'PetType' column.", "Convert pet age to a numeric type: The 'pet_age' column is stored as text, so we need to cast it to an integer for accurate calculations.", "Construct the SQL query: Combine all the elements into a complete SQL query that selects the pet type, average age, and maximum age, grouped by pet type."], "pred_sql": "SELECT Pets.PetType, AVG(CAST(Pets.pet_age AS INTEGER)) AS AverageAge, MAX(CAST(Pets.pet_age AS INTEGER)) AS MaxAge\nFROM Pets\nGROUP BY Pets.PetType;", "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}
{"sample_id": 73, "db_id": "pets_1", "question": "Find the average weight for each pet type.", "rationale": ["Identify the relevant table: The Pets table contains the information about pet types and their weights.", "Determine the required calculation: We need to calculate the average weight for each pet type.", "Use the AVG() function: This function will help us compute the average weight.", "Group the results: To get the average weight for each pet type, we will use the GROUP BY clause on the PetType column."], "pred_sql": "SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;", "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}
{"sample_id": 74, "db_id": "pets_1", "question": "What is the average weight for each type of pet?", "rationale": ["Identify the relevant table: The query requires information about pets, so we will use the Pets table.", "Determine the required columns: We need the PetType to group the results and the weight to calculate the average.", "Use the AVG() function: This function will help us calculate the average weight of pets.", "Group the results: We will group the results by PetType to get the average weight for each type of pet."], "pred_sql": "SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;", "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}
{"sample_id": 75, "db_id": "pets_1", "question": "Find the first name and age of students who have a pet.", "rationale": ["Identify the required fields: first name (Fname) and age (Age) of students.", "Determine the relevant tables: Student and Has_Pet, since we need information about students who own pets.", "Establish the relationship between the tables: use an INNER JOIN on the StuID field, which is common to both tables.", "Construct the SQL SELECT statement to retrieve the Fname and Age from the Student table, ensuring to join with the Has_Pet table to filter for students who have pets."], "pred_sql": "SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;", "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "source_tables": ["student", "has_pet"]}
{"sample_id": 76, "db_id": "pets_1", "question": "What are the different first names and ages of the students who do have pets?", "rationale": ["Identify the relevant tables: We need information from the Student table and the Has_Pet table to find students who have pets.", "Determine the required fields: We need the first names (Fname) and ages (Age) of the students.", "Establish the relationship: The Has_Pet table links students to their pets through the StuID column, which is a foreign key in Has_Pet referencing the primary key in Student.", "Construct the SQL query: Use a JOIN to combine the Student and Has_Pet tables on the StuID column, and select the distinct first names and ages of students who have pets."], "pred_sql": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;", "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "source_tables": ["student", "has_pet"]}
{"sample_id": 77, "db_id": "pets_1", "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "rationale": ["Identify the tables involved: We need to access the Student, Has_Pet, and Pets tables to find the pet owned by a student.", "Determine the relationship between the tables: The Student table is linked to the Has_Pet table through StuID, and Has_Pet is linked to the Pets table through PetID.", "Filter the results: We need to filter the results to only include students with the last name 'Smith'.", "Select the required data: We need to select the PetID from the Pets table for the student identified."], "pred_sql": "SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';", "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "source_tables": ["student", "has_pet"]}
{"sample_id": 78, "db_id": "pets_1", "question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "rationale": ["Identify the relevant tables: We need to retrieve information from the Student and Has_Pet tables.", "Determine the relationship: The Student table contains student information, and the Has_Pet table links students to their pets via StuID.", "Filter the results: We need to find the pet owned by the student with the last name 'Smith'.", "Construct the SQL query: Use a JOIN to combine the Student and Has_Pet tables on StuID, and select the PetID where the last name matches 'Smith'."], "pred_sql": "SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'Smith';", "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "source_tables": ["student", "has_pet"]}
{"sample_id": 79, "db_id": "pets_1", "question": "Find the number of pets for each student who has any pet and student id.", "rationale": ["Identify the tables involved: We need data from the Student and Has_Pet tables.", "Determine the relationship: We will join the Student table with the Has_Pet table using the StuID column.", "Select the required fields: We need the StuID from the Student table and a count of PetID from the Has_Pet table to get the number of pets.", "Use COUNT function: To count the number of pets for each student, we will use the COUNT() function on PetID.", "Group the results: We will group the results by StuID to get the count of pets for each student."], "pred_sql": "SELECT Student.StuID, COUNT(Has_Pet.PetID) AS NumberOfPets\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nGROUP BY Student.StuID;", "gold_sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "source_tables": ["student", "has_pet"]}
{"sample_id": 80, "db_id": "pets_1", "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "rationale": ["Identify the relevant tables: We need to look at the 'Has_Pet' table to find the relationship between students and their pets.", "We need to count the number of pets each student has, which requires using the COUNT() function.", "To get the student IDs, we will select 'StuID' from the 'Has_Pet' table.", "We will group the results by 'StuID' to ensure we get a count of pets for each student."], "pred_sql": "SELECT Has_Pet.StuID, COUNT(Has_Pet.PetID) AS PetCount\nFROM Has_Pet\nGROUP BY Has_Pet.StuID;", "gold_sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "source_tables": ["student", "has_pet"]}
{"sample_id": 81, "db_id": "pets_1", "question": "Find the first name and gender of student who have more than one pet.", "rationale": ["Identify the required fields: first name (Fname) and gender (Sex) of students.", "Determine the relevant tables: Student and Has_Pet, since we need student information and pet ownership.", "Join the Student table with the Has_Pet table on the StuID to link students with their pets.", "Group the results by Student's unique identifier (StuID) to aggregate pet counts for each student.", "Use the HAVING clause to filter groups (students) that have more than one pet, which is indicated by counting the PetID in the Has_Pet table."], "pred_sql": "SELECT Student.Fname, Student.Sex \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1;", "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "source_tables": ["student", "has_pet"]}
{"sample_id": 82, "db_id": "pets_1", "question": "What is the first name and gender of the all the students who have more than one pet?", "rationale": ["Identify the required fields: first name (Fname) and gender (Sex) of students.", "Determine the relevant tables: Student and Has_Pet, since we need student information and pet ownership.", "Join the Student table with the Has_Pet table on the StuID field to link students with their pets.", "Group the results by Student.StuID to aggregate pet counts for each student.", "Use the HAVING clause to filter groups where the count of pets (PetID) is greater than one."], "pred_sql": "SELECT Student.Fname, Student.Sex \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1;", "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "source_tables": ["student", "has_pet"]}
{"sample_id": 83, "db_id": "pets_1", "question": "Find the last name of the student who has a cat that is age 3.", "rationale": ["Identify the relevant tables: Student, Has_Pet, and Pets.", "Determine the columns needed: Last name of the student (LName) and the conditions related to the pet (PetType and pet_age).", "Establish the relationships between the tables using JOINs: Student to Has_Pet on StuID, and Has_Pet to Pets on PetID.", "Set the conditions in the WHERE clause to filter for pets that are cats and are 3 years old."], "pred_sql": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = '3';", "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 84, "db_id": "pets_1", "question": "What is the last name of the student who has a cat that is 3 years old?", "rationale": ["Identify the relevant tables: Student, Has_Pet, and Pets.", "Determine the relationship between the tables: Student is linked to Has_Pet through StuID, and Has_Pet is linked to Pets through PetID.", "We need to find students who have a cat, so we will filter the Pets table for PetType = 'cat'.", "Additionally, we need to filter for pets that are 3 years old, so we will add a condition for pet_age = '3'.", "Finally, we want to retrieve the last name of the student, which is in the Student table, so we will select Student.LName."], "pred_sql": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = '3';", "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "source_tables": ["pets", "student", "has_pet"]}
{"sample_id": 85, "db_id": "pets_1", "question": "Find the average age of students who do not have any pet .", "rationale": ["Identify the main requirement: Calculate the average age of students without pets.", "To find students without pets, we need to exclude those who are listed in the Has_Pet table.", "Use a subquery to select all StuID from the Has_Pet table.", "The main query will select the average age from the Student table where the StuID is not in the list obtained from the subquery."], "pred_sql": "SELECT AVG(Age) AS Average_Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "source_tables": ["student", "has_pet"]}
{"sample_id": 86, "db_id": "pets_1", "question": "What is the average age for all students who do not own any pets ?", "rationale": ["Identify the main requirement: Calculate the average age of students who do not own any pets.", "To find students without pets, we need to exclude those whose IDs are present in the Has_Pet table.", "Use a subquery to select all StuID from the Has_Pet table.", "Use the AVG() function to calculate the average age from the Student table where the StuID is not in the list of pet owners."], "pred_sql": "SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "source_tables": ["student", "has_pet"]}
{"sample_id": 87, "db_id": "car_1", "question": "How many continents are there?", "rationale": ["Identify the table that contains information about continents, which is the 'continents' table.", "To find out how many continents there are, we need to count the number of entries in the 'continents' table.", "Use the COUNT() function to get the total number of rows in the 'continents' table.", "Construct the SQL query to select the count from the 'continents' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfContinents FROM continents;", "gold_sql": "SELECT count(*) FROM CONTINENTS;", "source_tables": ["continents"]}
{"sample_id": 88, "db_id": "car_1", "question": "What is the number of continents?", "rationale": ["Identify the table that contains the information about continents, which is the 'continents' table.", "To find the number of continents, we need to count the rows in the 'continents' table.", "Use the SQL COUNT function to count the total number of entries in the 'continents' table.", "Construct the SQL query to select the count from the 'continents' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfContinents FROM continents;", "gold_sql": "SELECT count(*) FROM CONTINENTS;", "source_tables": ["continents"]}
{"sample_id": 89, "db_id": "car_1", "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "rationale": ["Identify the tables needed: 'continents' for continent information and 'countries' for country information.", "We need to count the number of countries for each continent, which suggests using a COUNT function.", "To relate countries to continents, we will use a LEFT JOIN on the 'Continent' column in the 'countries' table and the 'ContId' column in the 'continents' table.", "We will select the continent ID and name from the 'continents' table and the count of countries from the 'countries' table.", "Finally, we will group the results by continent ID and name to get the count of countries for each continent."], "pred_sql": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS CountryCount\nFROM continents c\nLEFT JOIN countries co ON c.ContId = co.Continent\nGROUP BY c.ContId, c.Continent;", "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "source_tables": ["countries", "continents"]}
{"sample_id": 90, "db_id": "car_1", "question": "For each continent, list its id, name, and how many countries it has?", "rationale": ["Identify the relevant tables: 'continents' for continent details and 'countries' for country counts.", "We need to count the number of countries for each continent, which suggests a JOIN operation between 'continents' and 'countries'.", "Use a LEFT JOIN to ensure that continents with no countries are still included in the results.", "Select the continent ID and name from the 'continents' table and count the country IDs from the 'countries' table.", "Group the results by continent ID and name to get the count of countries per continent."], "pred_sql": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS CountryCount\nFROM continents c\nLEFT JOIN countries co ON c.ContId = co.Continent\nGROUP BY c.ContId, c.Continent;", "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "source_tables": ["countries", "continents"]}
{"sample_id": 91, "db_id": "car_1", "question": "How many countries are listed?", "rationale": ["Identify the table that contains country information, which is the 'countries' table.", "To find out how many countries are listed, we need to count the number of entries in the 'countries' table.", "Use the COUNT() function to get the total number of countries.", "Construct the SQL query to select the count from the 'countries' table."], "pred_sql": "SELECT COUNT(*) AS CountryCount FROM countries;", "gold_sql": "SELECT count(*) FROM COUNTRIES;", "source_tables": ["countries"]}
{"sample_id": 92, "db_id": "car_1", "question": "How many countries exist?", "rationale": ["Identify the table that contains country information, which is the 'countries' table.", "To find out how many countries exist, we need to count the number of entries in the 'countries' table.", "Use the COUNT() function to count the total number of rows in the 'countries' table.", "Construct the SQL query to select the count from the 'countries' table."], "pred_sql": "SELECT COUNT(*) AS CountryCount FROM countries;", "gold_sql": "SELECT count(*) FROM COUNTRIES;", "source_tables": ["countries"]}
{"sample_id": 93, "db_id": "car_1", "question": "How many models does each car maker produce? List maker full name, id and the number.", "rationale": ["Identify the relevant tables: car_makers and model_list.", "We need to count the number of models produced by each car maker, which suggests using a COUNT function.", "To get the full name and ID of each car maker, we will select the FullName and Id columns from the car_makers table.", "We will join the car_makers table with the model_list table on the Maker column to associate car makers with their models.", "We will group the results by the car maker's FullName and Id to get the count of models for each maker."], "pred_sql": "SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS ModelCount\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.FullName, cm.Id;", "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "source_tables": ["car_makers", "model_list"]}
{"sample_id": 94, "db_id": "car_1", "question": "What is the full name of each car maker, along with its id and how many models it produces?", "rationale": ["Identify the required columns: Full name of the car maker (cm.FullName), its id (cm.Id), and the count of models it produces (COUNT(ml.ModelId)).", "Determine the tables needed: car_makers for car maker details and model_list for the models produced by each maker.", "Join the car_makers table with the model_list table on the car maker's id (cm.Id = ml.Maker) to associate each maker with its models.", "Use a LEFT JOIN to ensure that car makers with no models are still included in the results.", "Group the results by car maker id and full name to aggregate the model counts correctly using GROUP BY.", "Count the number of models for each car maker using COUNT(ml.ModelId) and alias it as ModelCount."], "pred_sql": "SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS ModelCount\nFROM car_makers cm\nLEFT JOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.FullName;", "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "source_tables": ["car_makers", "model_list"]}
{"sample_id": 95, "db_id": "car_1", "question": "Which model of the car has the minimum horsepower?", "rationale": ["Identify the relevant table that contains horsepower data, which is 'cars_data'.", "Select the 'Model' and 'Horsepower' columns from the 'cars_data' table.", "To find the model with the minimum horsepower, order the results by 'Horsepower' in ascending order.", "Limit the results to 1 to get only the model with the minimum horsepower."], "pred_sql": "SELECT Model, Horsepower FROM cars_data ORDER BY Horsepower ASC LIMIT 1;", "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 96, "db_id": "car_1", "question": "What is the model of the car with the smallest amount of horsepower?", "rationale": ["Identify the relevant tables: cars_data for horsepower and model_list for car models.", "Join the cars_data table with the car_names table to link car entries with their respective makes.", "Join the car_names table with the model_list table to get the model names associated with each car entry.", "Order the results by horsepower in ascending order to find the car with the smallest horsepower.", "Limit the results to 1 to get only the model of the car with the smallest horsepower."], "pred_sql": "SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId ORDER BY cars_data.Horsepower ASC LIMIT 1;", "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 97, "db_id": "car_1", "question": "Find the model of the car whose weight is below the average weight.", "rationale": ["Identify the relevant tables: cars_data for car specifications, car_names for car make and model, and model_list for the model details.", "We need to find the model of cars that have a weight below the average weight.", "To calculate the average weight, we will use a subquery that selects the average weight from the cars_data table.", "We will join the cars_data table with the car_names table on the Id and MakeId columns to get the model names.", "Next, we will join the result with the model_list table to ensure we can retrieve the model names associated with the car data.", "Finally, we will filter the results to only include those cars whose weight is less than the average weight calculated in the subquery."], "pred_sql": "SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);", "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 98, "db_id": "car_1", "question": "What is the model for the car with a weight smaller than the average?", "rationale": ["Identify the relevant table for car data, which is 'cars_data'.", "Determine the column that contains the weight of the cars, which is 'Weight'.", "Calculate the average weight of the cars using the AVG() function in a subquery.", "Join the 'cars_data' table with the 'car_names' table to get the model names associated with the car entries.", "Filter the results to include only those cars where the weight is less than the average weight calculated in the subquery."], "pred_sql": "SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);", "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 99, "db_id": "car_1", "question": "Find the name of the makers that produced some cars in the year of 1970?", "rationale": ["Identify the relevant tables: car_makers, model_list, car_names, and cars_data are needed to find car makers and their production years.", "We need to join these tables based on their relationships: car_makers to model_list via Maker, model_list to car_names via Model, and car_names to cars_data via MakeId.", "We are interested in the year 1970, so we will filter the results based on the Year column in the cars_data table.", "We want the distinct names of the makers, so we will use SELECT DISTINCT to avoid duplicate entries."], "pred_sql": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;", "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "source_tables": ["car_makers", "car_names", "cars_data", "model_list"]}
{"sample_id": 100, "db_id": "car_1", "question": "What is the name of the different car makers who produced a car in 1970?", "rationale": ["Identify the relevant tables: car_makers, model_list, car_names, and cars_data.", "We need to find car makers who produced cars in the year 1970, so we will filter the cars_data table by the Year column.", "To get the names of the car makers, we will select the Maker column from the car_makers table.", "We will join the tables on their respective foreign keys to connect car makers to their car models and the year of production.", "Use DISTINCT to ensure that we only get unique car maker names."], "pred_sql": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;", "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "source_tables": ["car_makers", "car_names", "cars_data", "model_list"]}
{"sample_id": 101, "db_id": "car_1", "question": "Find the make and production time of the cars that were produced in the earliest year?", "rationale": ["Identify the relevant tables: cars_data and car_names.", "We need to select the 'Make' and 'Year' of the cars.", "Join the cars_data table with the car_names table on the Id and MakeId columns to get the make of the cars.", "To find the earliest year, we need to use a subquery that selects the minimum year from the cars_data table.", "The final query selects the Make and Year where the Year is equal to the minimum year found in the subquery."], "pred_sql": "SELECT Make, Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Year = (SELECT MIN(Year) FROM cars_data)", "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "source_tables": ["cars_data", "car_names"]}
{"sample_id": 102, "db_id": "car_1", "question": "What is the maker of the carr produced in the earliest year and what year was it?", "rationale": ["Identify the relevant tables: cars_data (for car details including year), car_names (to link car models to makers), model_list (to link models to makers), and car_makers (to get the maker's name).", "We need to find the earliest year of production, so we will order the results by the Year column in ascending order.", "To get the maker of the car produced in the earliest year, we will select the Maker from the car_makers table and the Year from the cars_data table.", "We will join the tables on their respective foreign keys to ensure we can access the necessary data across the tables.", "Finally, we will limit the results to 1 to get only the earliest car's maker and year."], "pred_sql": "SELECT cm.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id ORDER BY cd.Year ASC LIMIT 1;", "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "source_tables": ["cars_data", "car_names"]}
{"sample_id": 103, "db_id": "car_1", "question": "Which distinct car models are the produced after 1980?", "rationale": ["Identify the relevant tables: model_list, car_names, and cars_data are needed to get the car models and their production years.", "We need to select distinct car models, so we will use the DISTINCT keyword in our SELECT statement.", "The car models are linked through the car_names table, which connects model_list and cars_data.", "We will join model_list with car_names on the Model column, and then join car_names with cars_data on the MakeId column.", "We need to filter the results to include only those cars produced after 1980, so we will add a WHERE clause with the condition 'cars_data.Year > 1980'."], "pred_sql": "SELECT DISTINCT Model FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;", "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "source_tables": ["model_list", "car_names", "cars_data"]}
{"sample_id": 104, "db_id": "car_1", "question": "What are the different models for the cards produced after 1980?", "rationale": ["Identify the relevant tables: model_list, car_names, and cars_data are needed to get car models and their manufacturing years.", "We need to select distinct models to avoid duplicates, so we will use SELECT DISTINCT.", "Join the model_list table with the car_names table on the Model column to link models with their makes.", "Then, join the resulting table with cars_data on the MakeId to access the manufacturing year of the models.", "Apply a WHERE clause to filter the results for models produced after 1980."], "pred_sql": "SELECT DISTINCT Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;", "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "source_tables": ["model_list", "car_names", "cars_data"]}
{"sample_id": 105, "db_id": "car_1", "question": "How many car makers are there in each continents? List the continent name and the count.", "rationale": ["Identify the tables needed: continents, countries, and car_makers.", "We need to count the number of car makers per continent, so we will use the COUNT function.", "To get the continent name, we will select the 'Continent' column from the continents table.", "We need to join the continents table with the countries table on the ContId and Continent columns.", "Next, we join the countries table with the car_makers table on the CountryId and Country columns.", "Finally, we group the results by continent to get the count of car makers for each continent."], "pred_sql": "SELECT c.Continent, COUNT(cm.Id) AS MakerCount\nFROM continents c\nJOIN countries co ON c.ContId = co.Continent\nJOIN car_makers cm ON co.CountryId = cm.Country\nGROUP BY c.Continent;", "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "source_tables": ["countries", "car_makers", "continents"]}
{"sample_id": 106, "db_id": "car_1", "question": "What is the name of each continent and how many car makers are there in each one?", "rationale": ["Identify the relevant tables: continents, countries, and car_makers.", "We need to count the number of car makers for each continent, so we will use a COUNT function.", "To relate continents to car makers, we need to join the continents table with the countries table using the ContId and Continent columns.", "Next, we join the countries table with the car_makers table using the CountryId and Country columns.", "We will use a LEFT JOIN to ensure that continents with no car makers are still included in the results.", "Finally, we will group the results by continent to get the count of car makers for each one."], "pred_sql": "SELECT c.Continent, COUNT(cm.Id) AS CarMakerCount\nFROM continents c\nLEFT JOIN countries co ON c.ContId = co.Continent\nLEFT JOIN car_makers cm ON co.CountryId = cm.Country\nGROUP BY c.Continent;", "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "source_tables": ["countries", "car_makers", "continents"]}
{"sample_id": 107, "db_id": "car_1", "question": "Which of the countries has the most car makers? List the country name.", "rationale": ["Identify the relevant tables: countries and car_makers.", "We need to find the country with the most car makers, so we will join the countries table with the car_makers table on the country identifier.", "We will group the results by country name to count the number of car makers in each country.", "To find the country with the most car makers, we will order the results by the count of car makers in descending order.", "Finally, we will limit the results to only the top country."], "pred_sql": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;", "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "source_tables": ["car_makers", "countries"]}
{"sample_id": 108, "db_id": "car_1", "question": "What is the name of the country with the most car makers?", "rationale": ["Identify the relevant tables: countries and car_makers.", "We need to find the country with the most car makers, so we will join the countries table with the car_makers table on the country identifier.", "We will group the results by country to count the number of car makers in each country.", "To find the country with the most car makers, we will order the results by the count of car makers in descending order.", "Finally, we will limit the results to only the top entry to get the country with the most car makers."], "pred_sql": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId ORDER BY COUNT(cm.Id) DESC LIMIT 1;", "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "source_tables": ["car_makers", "countries"]}
{"sample_id": 109, "db_id": "car_1", "question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "rationale": ["We need to count the number of car models produced by each maker.", "The relevant tables for this query are 'model_list' (which contains the car models and their makers) and 'car_makers' (which contains the details of the car makers).", "To get the count of models per maker, we will use the COUNT() function on the 'ModelId' from the 'model_list' table.", "We will join the 'model_list' table with the 'car_makers' table on the 'Maker' column from 'model_list' and the 'Id' column from 'car_makers'.", "We need to group the results by the maker's full name to get the count for each maker.", "Finally, we will select the count of models and the full name of the maker in the output."], "pred_sql": "SELECT COUNT(model_list.ModelId) AS ModelCount, car_makers.FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.FullName;", "gold_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "source_tables": ["car_makers", "model_list"]}
{"sample_id": 110, "db_id": "car_1", "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "rationale": ["We need to retrieve the number of car models produced by each maker along with the maker's ID and full name.", "To do this, we will select the 'Id' and 'FullName' from the 'car_makers' table.", "We also need to count the number of models associated with each maker, which requires joining the 'car_makers' table with the 'model_list' table on the 'Id' and 'Maker' columns respectively.", "Using the COUNT function will allow us to count the number of models for each maker.", "Finally, we will group the results by the maker's ID and full name to get the count for each maker."], "pred_sql": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumberOfModels\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nGROUP BY car_makers.Id, car_makers.FullName;", "gold_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "source_tables": ["car_makers", "model_list"]}
{"sample_id": 111, "db_id": "car_1", "question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "rationale": ["Identify the relevant tables: We need to find the accelerate value for a specific car make and model, which involves the 'cars_data' and 'car_names' tables.", "Determine the relationship: The 'cars_data' table contains the accelerate information, while the 'car_names' table contains the make and model names. We will join these tables on the 'MakeId' and 'Id' fields.", "Specify the conditions: We need to filter the results to find the specific car make 'amc' and model 'hornet sportabout'.", "Construct the SQL query: Using a SELECT statement to retrieve the 'Accelerate' column from the 'cars_data' table, we will join it with the 'car_names' table and apply the necessary filters."], "pred_sql": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'amc' AND car_names.Model = 'hornet sportabout';", "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "source_tables": ["cars_data", "car_names"]}
{"sample_id": 112, "db_id": "car_1", "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "rationale": ["Identify the relevant tables: cars_data, car_names, model_list, and car_makers are needed to find the acceleration of the specific car model.", "The 'cars_data' table contains the 'Accelerate' column which we need to retrieve.", "The 'car_names' table links car makes to their models, so we will use it to filter by the model 'hornet sportabout'.", "The 'model_list' table connects car models to their makers, allowing us to filter by the maker 'amc'.", "The 'car_makers' table provides the maker's identifier, which is necessary to join with the model_list.", "Construct the SQL query to join these tables and filter for the specific model and maker, selecting the 'Accelerate' value."], "pred_sql": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_names.Model = 'hornet sportabout' AND car_makers.Maker = 'amc';", "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "source_tables": ["cars_data", "car_names"]}
{"sample_id": 113, "db_id": "car_1", "question": "How many car makers are there in france?", "rationale": ["Identify the table that contains car makers, which is 'car_makers'.", "Determine the relevant column in 'car_makers' that indicates the country, which is 'Country'.", "Identify the table that contains country information, which is 'countries'.", "Find the column in 'countries' that contains the name of the country, which is 'CountryName'.", "To find car makers in France, I need to filter the 'car_makers' table where the 'Country' matches the 'CountryId' of France from the 'countries' table.", "Use a subquery to get the 'CountryId' for France from the 'countries' table.", "Count the number of entries in the 'car_makers' table that match the criteria."], "pred_sql": "SELECT COUNT(*) AS NumberOfCarMakers FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');", "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "source_tables": ["car_makers", "countries"]}
{"sample_id": 114, "db_id": "car_1", "question": "What is the number of makers of care in France?", "rationale": ["Identify the relevant tables: We need to find car makers based in France, so we will use the 'car_makers' and 'countries' tables.", "Determine the relationship: The 'car_makers' table has a 'Country' column that references the 'CountryId' in the 'countries' table.", "Filter for France: We need to filter the results to only include car makers from France, which means we will use a WHERE clause to specify 'countries.CountryName = 'France'.", "Count distinct makers: We want to count the number of unique car makers, so we will use the COUNT function with DISTINCT on the 'Id' column from the 'car_makers' table.", "Construct the SQL query: Combine all the elements into a complete SQL query that counts the distinct car makers in France."], "pred_sql": "SELECT COUNT(DISTINCT car_makers.Id) AS NumberOfMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';", "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "source_tables": ["car_makers", "countries"]}
{"sample_id": 115, "db_id": "car_1", "question": "How many car models are produced in the usa?", "rationale": ["Identify the relevant tables: model_list (for car models), car_makers (for car makers), and countries (to filter by country).", "We need to count the distinct car models produced in the USA, so we will use COUNT(DISTINCT model_list.Model).", "Join the model_list table with the car_makers table on the Maker column to link car models to their respective makers.", "Join the car_makers table with the countries table on the Country column to filter the results for the USA.", "Use a WHERE clause to specify that we are only interested in records where the country name is 'USA'."], "pred_sql": "SELECT COUNT(DISTINCT model_list.Model) AS NumberOfCarModels FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA';", "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "source_tables": ["car_makers", "model_list", "countries"]}
{"sample_id": 116, "db_id": "car_1", "question": "What is the count of the car models produced in the United States?", "rationale": ["Identify the relevant tables: We need to find car models produced in the United States, so we will use the 'model_list' table for car models, 'car_makers' for car maker information, and 'countries' to filter by country.", "Determine the relationships: The 'model_list' table is linked to the 'car_makers' table through the 'Maker' column, and the 'car_makers' table is linked to the 'countries' table through the 'Country' column.", "Filter for the United States: We need to filter the results to only include car makers based in the United States, which is done by checking the 'CountryName' in the 'countries' table.", "Count distinct car models: We want the count of unique car models, so we will use COUNT(DISTINCT ml.Model) to ensure we only count each model once."], "pred_sql": "SELECT COUNT(DISTINCT ml.Model) AS ModelCount\nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nJOIN countries c ON cm.Country = c.CountryId\nWHERE c.CountryName = 'United States';", "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "source_tables": ["car_makers", "model_list", "countries"]}
{"sample_id": 117, "db_id": "car_1", "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "rationale": ["Identify the relevant table: The query is about cars and their MPG, so we will use the 'cars_data' table.", "Determine the required calculation: We need to calculate the average MPG, which can be done using the AVG() function.", "Specify the condition: We only want the average MPG for cars with 4 cylinders, so we will add a WHERE clause to filter the results based on the 'Cylinders' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT AVG(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4;", "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "source_tables": ["cars_data"]}
{"sample_id": 118, "db_id": "car_1", "question": "What is the average miles per gallon of all the cards with 4 cylinders?", "rationale": ["Identify the table that contains the relevant data: 'cars_data' has the 'MPG' and 'Cylinders' columns.", "Determine the requirement: We need to calculate the average miles per gallon (MPG) for cars with 4 cylinders.", "Use the AVG() function to calculate the average of the 'MPG' column.", "Add a WHERE clause to filter the results to only include cars where the 'Cylinders' column equals 4."], "pred_sql": "SELECT AVG(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4;", "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "source_tables": ["cars_data"]}
{"sample_id": 119, "db_id": "car_1", "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "rationale": ["Identify the relevant table: The 'cars_data' table contains the information about car specifications including weight, cylinders, and year.", "Determine the conditions: We need to filter the records for cars that have 8 cylinders and were manufactured in the year 1974.", "Use the MIN function: To find the smallest weight, we will use the MIN() aggregate function on the 'Weight' column.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to filter the results accordingly."], "pred_sql": "SELECT MIN(Weight) AS SmallestWeight FROM cars_data WHERE Cylinders = 8 AND Year = 1974;", "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "source_tables": ["cars_data"]}
{"sample_id": 120, "db_id": "car_1", "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "rationale": ["Identify the relevant table: The query is about car data, so we will use the 'cars_data' table.", "Determine the columns needed: We need the 'Weight' column to find the minimum weight and the 'Cylinders' and 'Year' columns to filter the results.", "Construct the WHERE clause: We need to filter for cars with 8 cylinders and produced in the year 1974.", "Use the MIN() function: To find the minimum weight, we will use the MIN() aggregate function on the 'Weight' column.", "Combine all parts into a SQL query: We will select the minimum weight from the 'cars_data' table with the specified conditions."], "pred_sql": "SELECT MIN(Weight) AS MinWeight FROM cars_data WHERE Cylinders = 8 AND Year = 1974;", "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "source_tables": ["cars_data"]}
{"sample_id": 121, "db_id": "car_1", "question": "What are all the makers and models?", "rationale": ["Identify the tables needed: We need data from the 'car_makers' table for the makers and the 'model_list' table for the models.", "Determine the relationship between the tables: The 'model_list' table has a foreign key 'Maker' that references the 'Id' in the 'car_makers' table.", "Construct the SQL query: We will use a JOIN to combine the 'car_makers' and 'model_list' tables on the matching 'Id' and 'Maker' fields.", "Select the required columns: We need to select 'Maker' from 'car_makers' and 'Model' from 'model_list'."], "pred_sql": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;", "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "source_tables": ["model_list"]}
{"sample_id": 122, "db_id": "car_1", "question": "What are the makers and models?", "rationale": ["Identify the tables needed: We need data from the 'car_makers' table for the makers and the 'model_list' table for the models.", "Determine the relationship between the tables: The 'model_list' table has a foreign key 'Maker' that references the 'Id' in the 'car_makers' table.", "Construct the SQL query: We will use a JOIN to combine the 'car_makers' and 'model_list' tables on the matching 'Id' and 'Maker' fields, and select the 'Maker' and 'Model' columns."], "pred_sql": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;", "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "source_tables": ["model_list"]}
{"sample_id": 123, "db_id": "car_1", "question": "What are the countries having at least one car maker? List name and id.", "rationale": ["Identify the relevant tables: 'countries' and 'car_makers'.", "We need to find countries that have at least one car maker, which implies a relationship between the two tables.", "Use a JOIN operation to connect 'countries' with 'car_makers' on the country identifier.", "Select the distinct country IDs and names from the result to avoid duplicates."], "pred_sql": "SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;", "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "source_tables": ["car_makers", "countries"]}
{"sample_id": 124, "db_id": "car_1", "question": "What are the names and ids of all countries with at least one car maker?", "rationale": ["Identify the relevant tables: 'countries' and 'car_makers'.", "We need to find countries that have at least one car maker, which implies a join between 'countries' and 'car_makers'.", "The join condition is that the 'CountryId' in 'countries' matches the 'Country' in 'car_makers'.", "We want to select the distinct names and ids of these countries, so we will use SELECT DISTINCT to avoid duplicates."], "pred_sql": "SELECT DISTINCT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;", "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "source_tables": ["car_makers", "countries"]}
{"sample_id": 125, "db_id": "car_1", "question": "What is the number of the cars with horsepower more than 150?", "rationale": ["Identify the table that contains the relevant data: 'cars_data' is the table that includes horsepower information.", "Determine the specific column to filter on: 'Horsepower' is the column that indicates the power output of the cars.", "Formulate the condition for filtering: we want cars with horsepower greater than 150, which translates to 'Horsepower > 150'.", "Use the COUNT function to count the number of records that meet the condition.", "Construct the SQL query to select the count of cars from 'cars_data' where the horsepower condition is satisfied."], "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Horsepower > 150;", "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "source_tables": ["cars_data"]}
{"sample_id": 126, "db_id": "car_1", "question": "What is the number of cars with a horsepower greater than 150?", "rationale": ["Identify the table that contains the relevant data: 'cars_data' has the horsepower information.", "Determine the condition for filtering: we need cars with horsepower greater than 150.", "Use the COUNT() function to count the number of records that meet the condition.", "Construct the SQL query to select the count from 'cars_data' where the horsepower is greater than 150."], "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Horsepower > 150;", "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "source_tables": ["cars_data"]}
{"sample_id": 127, "db_id": "car_1", "question": "What is the average weight of cars each year?", "rationale": ["Identify the relevant table: The 'cars_data' table contains the 'Weight' and 'Year' columns needed for the query.", "Determine the aggregation needed: We need to calculate the average weight, which requires the AVG() function.", "Group the results by year: To get the average weight for each year, we will use the GROUP BY clause on the 'Year' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;", "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "source_tables": ["cars_data"]}
{"sample_id": 128, "db_id": "car_1", "question": "What is the average weight and year for each year?", "rationale": ["Identify the relevant table: The 'cars_data' table contains the 'Weight' and 'Year' columns needed for the query.", "Determine the required calculations: We need to calculate the average weight for each year, which involves using the AVG() function.", "Group the results by year: To get the average weight for each year, we will use the GROUP BY clause on the 'Year' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;", "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "source_tables": ["cars_data"]}
{"sample_id": 129, "db_id": "car_1", "question": "Which countries in europe have at least 3 car manufacturers?", "rationale": ["Identify the relevant tables: countries and car_makers.", "We need to find countries in Europe, so we will filter the countries table by the continent.", "Join the countries table with the car_makers table on the country identifier.", "Group the results by country name to count the number of car manufacturers per country.", "Use the HAVING clause to filter countries that have at least 3 car manufacturers."], "pred_sql": "SELECT c.CountryName FROM countries c \nJOIN car_makers cm ON c.CountryId = cm.Country \nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') \nGROUP BY c.CountryName \nHAVING COUNT(cm.Id) >= 3;", "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "source_tables": ["continents", "car_makers", "countries"]}
{"sample_id": 130, "db_id": "car_1", "question": "What are the names of all European countries with at least 3 manufacturers?", "rationale": ["Identify the relevant tables: countries and car_makers.", "We need to find countries in Europe, so we will filter the countries table based on the continent.", "Join the countries table with the car_makers table on the country identifier.", "Group the results by country name to count the number of manufacturers per country.", "Use the HAVING clause to filter countries that have at least 3 manufacturers."], "pred_sql": "SELECT c.CountryName FROM countries c \nJOIN car_makers cm ON c.CountryId = cm.Country \nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') \nGROUP BY c.CountryName \nHAVING COUNT(cm.Id) >= 3;", "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "source_tables": ["continents", "car_makers", "countries"]}
{"sample_id": 131, "db_id": "car_1", "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "rationale": ["Identify the relevant tables: 'cars_data' for horsepower and cylinders, and 'car_names' for the make of the car.", "We need to find the maximum horsepower, so we will use the MAX() function on the 'Horsepower' column from the 'cars_data' table.", "We need to filter the results to only include car models with 3 cylinders, so we will add a WHERE clause for 'Cylinders = 3'.", "To get the make of the car, we will join the 'cars_data' table with the 'car_names' table on the 'Id' and 'MakeId' columns.", "Since we want the maximum horsepower for each make, we will group the results by the 'Make' column from the 'car_names' table."], "pred_sql": "SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_names.Make \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE cars_data.Cylinders = 3 \nGROUP BY car_names.Make;", "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 132, "db_id": "car_1", "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "rationale": ["Identify the relevant tables: We need data from 'cars_data' for horsepower and cylinder count, and 'car_names' for the make of the car.", "We need to filter the results to only include models with 3 cylinders, which is done using a WHERE clause.", "To find the largest amount of horsepower, we will use the MAX() function on the 'Horsepower' column.", "We will join 'cars_data' with 'car_names' on the appropriate foreign key to get the make of the car.", "We will group the results by 'Make' to ensure we get the maximum horsepower for each make.", "Finally, we will order the results by the maximum horsepower in descending order and limit the results to 1 to get the top result."], "pred_sql": "SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaxHorsepower \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE cars_data.Cylinders = 3 \nGROUP BY car_names.Make \nORDER BY MaxHorsepower DESC \nLIMIT 1;", "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 133, "db_id": "car_1", "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "rationale": ["Identify the relevant table: The query is about car models and their fuel efficiency, so we will use the 'cars_data' table.", "Select the columns needed: We need the 'Model' and 'MPG' columns to find out which model saves the most gasoline.", "Order the results: To find the model with the maximum MPG, we will order the results by the 'MPG' column in descending order.", "Limit the results: Since we only want the top result (the model with the maximum MPG), we will limit the results to 1."], "pred_sql": "SELECT Model, MPG FROM cars_data ORDER BY MPG DESC LIMIT 1;", "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 134, "db_id": "car_1", "question": "What is the car model with the highest mpg ?", "rationale": ["Identify the relevant table: The 'cars_data' table contains the 'MPG' column which is needed to find the car model with the highest fuel efficiency.", "Select the 'Model' column from the 'cars_data' table since we want to know the car model.", "Order the results by 'MPG' in descending order to get the highest value at the top.", "Limit the results to 1 to get only the top entry, which will be the car model with the highest mpg."], "pred_sql": "SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1;", "gold_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 135, "db_id": "car_1", "question": "What is the average horsepower of the cars before 1980?", "rationale": ["Identify the relevant table: The 'cars_data' table contains the 'Horsepower' and 'Year' columns needed for the query.", "Determine the condition: We need to find cars manufactured before 1980, which means we will filter the 'Year' column to be less than 1980.", "Calculate the average: We will use the AVG() function to calculate the average horsepower of the filtered results.", "Construct the SQL query: Combine the SELECT statement with the AVG() function, the FROM clause to specify the 'cars_data' table, and the WHERE clause to filter by year."], "pred_sql": "SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < 1980;", "gold_sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "source_tables": ["cars_data"]}
{"sample_id": 136, "db_id": "car_1", "question": "What is the average horsepower for all cars produced before 1980 ?", "rationale": ["Identify the relevant table: The 'cars_data' table contains the 'Horsepower' and 'Year' columns needed for the query.", "Determine the condition: We need to filter the cars produced before 1980, which means we will use a WHERE clause with 'Year < 1980'.", "Calculate the average: To find the average horsepower, we will use the AVG() function on the 'Horsepower' column.", "Construct the SQL query: Combine the SELECT statement with the AVG function, the FROM clause to specify the 'cars_data' table, and the WHERE clause for the year condition."], "pred_sql": "SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < 1980;", "gold_sql": "select avg(horsepower) from cars_data where year  <  1980;", "source_tables": ["cars_data"]}
{"sample_id": 137, "db_id": "car_1", "question": "What is the average edispl of the cars of model volvo?", "rationale": ["Identify the relevant tables: cars_data, car_names, model_list, and car_makers are needed to find the average engine displacement (edispl) for the specified car model.", "The 'cars_data' table contains the 'Edispl' column which we need to average.", "The 'car_names' table links car makes to their models, and we need to filter by the model 'volvo'.", "The 'model_list' table connects car models to their makers, allowing us to find the correct maker ID for 'volvo'.", "The 'car_makers' table is used to find the ID of the maker 'volvo'.", "We will use a subquery to get the ID of the maker 'volvo' and then join all the tables to calculate the average engine displacement for that model."], "pred_sql": "SELECT AVG(Edispl) AS AverageEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo');", "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 138, "db_id": "car_1", "question": "What is the average edispl for all volvos?", "rationale": ["Identify the relevant tables: cars_data, car_names, model_list, and car_makers are needed to find the average engine displacement (edispl) for Volvo cars.", "Determine the relationship between the tables: cars_data is linked to car_names through MakeId, car_names is linked to model_list through Model, and model_list is linked to car_makers through Maker.", "Filter the results to only include cars made by Volvo: Use a WHERE clause to filter car_makers.FullName for 'Volvo'.", "Calculate the average edispl: Use the AVG() function on the Edispl column from the cars_data table to get the average engine displacement for the filtered results."], "pred_sql": "SELECT AVG(Edispl) AS AverageEdispl FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName LIKE 'Volvo';", "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 139, "db_id": "car_1", "question": "What is the maximum accelerate for different number of cylinders?", "rationale": ["Identify the relevant table: The 'cars_data' table contains the 'Cylinders' and 'Accelerate' columns needed for the query.", "Determine the required aggregation: We need to find the maximum 'Accelerate' for each unique value of 'Cylinders'.", "Use the GROUP BY clause: This will allow us to group the results by the 'Cylinders' column.", "Select the necessary columns: We will select 'Cylinders' and the maximum 'Accelerate' using the MAX() function.", "Construct the SQL query: Combine all the elements into a complete SQL statement."], "pred_sql": "SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;", "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "source_tables": ["cars_data"]}
{"sample_id": 140, "db_id": "car_1", "question": "What is the maximum accelerate for all the different cylinders?", "rationale": ["Identify the relevant table: The 'cars_data' table contains the 'Cylinders' and 'Accelerate' columns needed for the query.", "Determine the required operation: We need to find the maximum 'Accelerate' time for each distinct value of 'Cylinders'.", "Use the SQL aggregate function MAX() to find the maximum accelerate time.", "Group the results by 'Cylinders' to get the maximum accelerate for each cylinder count.", "Construct the SQL query using SELECT, MAX(), and GROUP BY clauses."], "pred_sql": "SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;", "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "source_tables": ["cars_data"]}
{"sample_id": 141, "db_id": "car_1", "question": "Which model has the most version(make) of cars?", "rationale": ["Identify the table that contains the car models and their makes, which is the 'car_names' table.", "We need to count the number of different makes for each model, so we will use the COUNT() function.", "Group the results by the 'Model' column to aggregate the counts for each model.", "Order the results in descending order based on the count of makes to find the model with the most versions.", "Limit the results to 1 to get only the top model with the most versions."], "pred_sql": "SELECT Model, COUNT(Make) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;", "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["car_names"]}
{"sample_id": 142, "db_id": "car_1", "question": "What model has the most different versions?", "rationale": ["Identify the table that contains the car models, which is 'model_list'.", "We need to count the number of different versions for each model, so we will use the COUNT() function.", "Group the results by the 'Model' column to get the count of versions for each model.", "Order the results in descending order based on the count of versions to find the model with the most versions.", "Limit the results to 1 to get only the top model with the most versions."], "pred_sql": "SELECT Model, COUNT(*) AS VersionCount FROM model_list GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;", "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["car_names"]}
{"sample_id": 143, "db_id": "car_1", "question": "How many cars have more than 4 cylinders?", "rationale": ["Identify the table that contains the relevant data: 'cars_data' has the 'Cylinders' column.", "Determine the condition: we need to count cars with more than 4 cylinders, which translates to 'Cylinders > 4'.", "Use the COUNT() function to count the number of records that meet this condition.", "Construct the SQL query to select the count from 'cars_data' where the condition is satisfied."], "pred_sql": "SELECT COUNT(*) AS CarCount FROM cars_data WHERE Cylinders > 4;", "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "source_tables": ["cars_data"]}
{"sample_id": 144, "db_id": "car_1", "question": "What is the number of cars with more than 4 cylinders?", "rationale": ["Identify the table that contains information about cars, which is 'cars_data'.", "Determine the relevant column for the number of cylinders, which is 'Cylinders'.", "Formulate a condition to filter cars with more than 4 cylinders, i.e., 'Cylinders > 4'.", "Use the COUNT() function to count the number of records that meet the condition.", "Construct the SQL query to select the count of cars from 'cars_data' where the number of cylinders is greater than 4."], "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 4;", "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "source_tables": ["cars_data"]}
{"sample_id": 145, "db_id": "car_1", "question": "how many cars were produced in 1980?", "rationale": ["Identify the relevant table: The 'cars_data' table contains information about car entries, including the year of production.", "Determine the specific requirement: The user wants to know how many cars were produced in the year 1980.", "Construct the SQL query: Use the COUNT() function to count the number of entries in the 'cars_data' table where the 'Year' column equals 1980."], "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Year = 1980;", "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "source_tables": ["cars_data"]}
{"sample_id": 146, "db_id": "car_1", "question": "In 1980, how many cars were made?", "rationale": ["Identify the relevant table: The 'cars_data' table contains information about car entries, including the year they were manufactured.", "Determine the specific requirement: We need to count the number of cars made in the year 1980.", "Construct the SQL query: Use the COUNT() function to count the number of entries in the 'cars_data' table where the 'Year' column equals 1980."], "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Year = 1980;", "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "source_tables": ["cars_data"]}
{"sample_id": 147, "db_id": "car_1", "question": "How many car models were produced by the maker with full name American Motor Company?", "rationale": ["Identify the relevant tables: We need to look at the 'car_makers' table to find the maker with the full name 'American Motor Company' and the 'model_list' table to count the car models produced by that maker.", "We need to join the 'car_makers' table with the 'model_list' table on the maker's ID to link car makers with their respective models.", "We will filter the results to only include the car maker with the full name 'American Motor Company'.", "Finally, we will count the distinct models produced by this maker to get the total number of car models."], "pred_sql": "SELECT COUNT(DISTINCT ml.Model) AS ModelCount\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nWHERE cm.FullName = 'American Motor Company';", "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "source_tables": ["car_makers", "model_list"]}
{"sample_id": 148, "db_id": "car_1", "question": "What is the number of car models created by the car maker American Motor Company?", "rationale": ["Identify the relevant tables: We need to find the number of car models created by a specific car maker, which involves the 'model_list' and 'car_makers' tables.", "Determine the relationship: The 'model_list' table has a foreign key 'Maker' that references the 'Id' in the 'car_makers' table.", "Filter the car maker: We need to filter the results to only include models from 'American Motor Company'.", "Count the models: We will use the COUNT function to count the number of models associated with 'American Motor Company'.", "Construct the SQL query: Combine the SELECT statement with the JOIN and WHERE clauses to form the complete SQL query."], "pred_sql": "SELECT COUNT(model_list.ModelId) AS NumberOfModels\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.FullName = 'American Motor Company';", "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "source_tables": ["car_makers", "model_list"]}
{"sample_id": 149, "db_id": "car_1", "question": "Which makers designed more than 3 car models? List full name and the id.", "rationale": ["Identify the relevant tables: car_makers and model_list.", "We need to join these tables on the car_makers.Id and model_list.Maker columns to associate car makers with their models.", "We want to count the number of models for each maker, so we will use GROUP BY on car_makers.Id.", "To filter for makers that designed more than 3 models, we will use the HAVING clause with COUNT(model_list.ModelId) > 3.", "Finally, we will select the FullName and Id of the car makers that meet this criterion."], "pred_sql": "SELECT car_makers.FullName, car_makers.Id \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Maker \nGROUP BY car_makers.Id \nHAVING COUNT(model_list.ModelId) > 3;", "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["car_makers", "model_list"]}
{"sample_id": 150, "db_id": "car_1", "question": "What are the names and ids of all makers with more than 3 models?", "rationale": ["Identify the relevant tables: We need to get data from the 'car_makers' and 'model_list' tables.", "Determine the relationship: 'model_list' has a foreign key 'Maker' that references 'car_makers.Id'.", "We want to count the number of models for each maker, so we will use a GROUP BY clause on 'car_makers.Id'.", "To filter makers with more than 3 models, we will use the HAVING clause with COUNT(model_list.ModelId) > 3.", "Select the required fields: We need to select 'car_makers.Id' and 'car_makers.Maker' for the final output."], "pred_sql": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(model_list.ModelId) > 3;", "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["car_makers", "model_list"]}
{"sample_id": 151, "db_id": "car_1", "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "rationale": ["Identify the tables involved: model_list, car_makers, car_names, and cars_data.", "We need to select distinct models, so we will use SELECT DISTINCT on the Model column from the model_list table.", "To filter the models by the maker's full name, we will join the model_list table with the car_makers table on the Maker column.", "We will also join the car_names table to link the model to its make, and the cars_data table to access the weight of the cars.", "The WHERE clause will include two conditions: one for the full name of the maker (General Motors) and another for the weight of the cars (greater than 3500).", "Combine all these elements to form the final SQL query."], "pred_sql": "SELECT DISTINCT ml.Model \nFROM model_list ml \nJOIN car_makers cm ON ml.Maker = cm.Id \nJOIN car_names cn ON ml.Model = cn.Model \nJOIN cars_data cd ON cn.MakeId = cd.Id \nWHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;", "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"]}
{"sample_id": 152, "db_id": "car_1", "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "rationale": ["Identify the tables needed: model_list for car models, car_makers for car maker information, car_names for linking models to makes, and cars_data for car specifications including weight.", "We need to select distinct models, so we will use SELECT DISTINCT.", "Join the model_list table with the car_makers table on the Maker ID to filter by the car maker 'General Motors'.", "Join the car_names table to link the models to their respective makes.", "Join the cars_data table to access the weight of the cars.", "Use a WHERE clause to filter for models made by 'General Motors' or cars that weigh more than 3500 pounds."], "pred_sql": "SELECT DISTINCT ml.Model \nFROM model_list ml \nJOIN car_makers cm ON ml.Maker = cm.Id \nJOIN car_names cn ON cn.Model = ml.Model \nJOIN cars_data cd ON cd.Id = cn.MakeId \nWHERE cm.Maker = 'General Motors' OR cd.Weight > 3500;", "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"]}
{"sample_id": 153, "db_id": "car_1", "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "rationale": ["Identify the relevant table: The query is about car production years and weights, so we will use the 'cars_data' table.", "Determine the columns needed: We need the 'Year' column to find out in which years the cars were produced, and the 'Weight' column to filter the cars based on their weight.", "Set the conditions for the weight: We need to filter the cars to include only those with a weight of no less than 3000 and no more than 4000.", "Use the DISTINCT keyword: Since we only want unique years, we will use DISTINCT to avoid duplicate years in the result.", "Construct the SQL query: Combine all the elements into a complete SQL query that selects the distinct years from 'cars_data' where the weight is within the specified range."], "pred_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;", "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;", "source_tables": ["cars_data"]}
{"sample_id": 154, "db_id": "car_1", "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "rationale": ["Identify the relevant table: cars_data contains the information about car weights and production years.", "Determine the condition for filtering: we need cars that weigh less than 4000 or more than 3000.", "Use the DISTINCT keyword to ensure we only get unique years from the results.", "Construct the SQL query to select the Year column from cars_data where the weight conditions are met."], "pred_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000;", "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;", "source_tables": ["cars_data"]}
{"sample_id": 155, "db_id": "car_1", "question": "What is the horsepower of the car with the largest accelerate?", "rationale": ["Identify the relevant table: The query is asking for information about cars, specifically horsepower and acceleration, so we will use the 'cars_data' table.", "Determine the specific data needed: We need to find the horsepower of the car that has the largest accelerate value.", "Use a subquery to find the maximum accelerate value: We will create a subquery that selects the maximum value of the 'Accelerate' column from the 'cars_data' table.", "Select the horsepower: We will select the 'Horsepower' from the 'cars_data' table where the 'Accelerate' matches the maximum value found in the subquery."], "pred_sql": "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)", "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "source_tables": ["cars_data"]}
{"sample_id": 156, "db_id": "car_1", "question": "What is the horsepower of the car with the greatest accelerate?", "rationale": ["Identify the relevant table: The query is asking for information about cars, specifically horsepower and acceleration, so we will be working with the 'cars_data' table.", "Determine the specific data needed: We need to find the horsepower of the car that has the greatest acceleration.", "Use a subquery to find the maximum acceleration: We will create a subquery that selects the maximum value of the 'Accelerate' column from the 'cars_data' table.", "Filter the main query based on the result of the subquery: We will select the 'Horsepower' from the 'cars_data' table where the 'Accelerate' value matches the maximum value found in the subquery."], "pred_sql": "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)", "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "source_tables": ["cars_data"]}
{"sample_id": 157, "db_id": "car_1", "question": "For model volvo, how many cylinders does the car with the least accelerate have?", "rationale": ["Identify the relevant tables: We need to find information about the car model 'volvo', which involves the 'car_names' and 'cars_data' tables.", "Find the Id of the car model 'volvo': We will query the 'car_names' table to get the Id associated with the model 'volvo'.", "Determine the car with the least accelerate time: We will use the Id obtained from the previous step to filter the 'cars_data' table and order the results by the 'Accelerate' column in ascending order.", "Select the number of cylinders: Finally, we will select the 'Cylinders' column from the 'cars_data' table for the car with the least accelerate time."], "pred_sql": "SELECT Cylinders FROM cars_data WHERE Id = (SELECT Id FROM car_names WHERE Model = 'volvo') ORDER BY Accelerate ASC LIMIT 1;", "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "source_tables": ["cars_data", "car_names"]}
{"sample_id": 158, "db_id": "car_1", "question": "For a volvo model, how many cylinders does the version with least accelerate have?", "rationale": ["Identify the car maker for 'Volvo' to get its unique identifier from the car_makers table.", "Use the unique identifier of 'Volvo' to find the corresponding model in the model_list table.", "From the model_list, get the model name associated with 'Volvo'.", "Next, find the car entry in the cars_data table that corresponds to the model with the least accelerate time.", "Finally, select the number of cylinders for that specific car entry."], "pred_sql": "SELECT Cylinders FROM cars_data WHERE Id = (SELECT Id FROM car_names WHERE Model = (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')) ORDER BY Accelerate ASC LIMIT 1)", "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "source_tables": ["cars_data", "car_names"]}
{"sample_id": 159, "db_id": "car_1", "question": "How many cars have a larger accelerate than the car with the largest horsepower?", "rationale": ["Identify the maximum horsepower from the cars_data table using the MAX function.", "Retrieve the accelerate value of the car that has the maximum horsepower.", "Count the number of cars in the cars_data table that have an accelerate value greater than the retrieved accelerate value."], "pred_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))", "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "source_tables": ["cars_data"]}
{"sample_id": 160, "db_id": "car_1", "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "rationale": ["Identify the relevant table: cars_data, which contains information about cars including horsepower and acceleration.", "Determine the condition: we need to find cars with an acceleration greater than the maximum horsepower.", "Use a subquery to find the maximum horsepower from the cars_data table.", "Count the number of cars that meet the condition of having an acceleration greater than the maximum horsepower."], "pred_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)", "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "source_tables": ["cars_data"]}
{"sample_id": 161, "db_id": "car_1", "question": "How many countries has more than 2 car makers ?", "rationale": ["Identify the relevant tables: We need to look at the 'countries' table to get the list of countries and the 'car_makers' table to find out how many car makers are in each country.", "Join the 'countries' table with the 'car_makers' table on the country identifier to associate car makers with their respective countries.", "Group the results by country to count the number of car makers in each country.", "Use the HAVING clause to filter the groups to only include those countries that have more than 2 car makers.", "Count the number of distinct countries that meet the criteria of having more than 2 car makers."], "pred_sql": "SELECT COUNT(DISTINCT c.CountryId) AS CountryCount\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nGROUP BY c.CountryId\nHAVING COUNT(cm.Id) > 2;", "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["car_makers", "countries"]}
{"sample_id": 162, "db_id": "car_1", "question": "What is the number of countries with more than 2 car makers ?", "rationale": ["Identify the relevant tables: We need to look at the 'car_makers' table to count the number of car makers and the 'countries' table to associate them with their respective countries.", "Join the 'car_makers' table with the 'countries' table on the country identifier to get the country information for each car maker.", "Group the results by country to count the number of car makers per country.", "Use the HAVING clause to filter the groups to only include those countries that have more than 2 car makers.", "Select the count of distinct countries that meet the criteria."], "pred_sql": "SELECT COUNT(DISTINCT c.CountryId) AS NumberOfCountries\nFROM car_makers cm\nJOIN countries c ON cm.Country = c.CountryId\nGROUP BY c.CountryId\nHAVING COUNT(cm.Id) > 2;", "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["car_makers", "countries"]}
{"sample_id": 163, "db_id": "car_1", "question": "How many cars has over 6 cylinders?", "rationale": ["Identify the table that contains information about cars, which is 'cars_data'.", "Determine the relevant column for the number of cylinders, which is 'Cylinders'.", "Formulate a condition to filter cars with more than 6 cylinders, using 'Cylinders > 6'.", "Use the COUNT() function to count the number of records that meet this condition.", "Construct the final SQL query to select the count of cars with more than 6 cylinders."], "pred_sql": "SELECT COUNT(*) AS CarCount FROM cars_data WHERE Cylinders > 6;", "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}
{"sample_id": 164, "db_id": "car_1", "question": "What is the number of carsw ith over 6 cylinders?", "rationale": ["Identify the table that contains the relevant data: 'cars_data' has the 'Cylinders' column.", "Determine the condition for counting cars: we need to count cars with more than 6 cylinders.", "Use the COUNT() function to count the number of entries that meet the condition.", "Construct the SQL query to select the count from 'cars_data' where 'Cylinders' is greater than 6."], "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 6;", "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}
{"sample_id": 165, "db_id": "car_1", "question": "For the cars with 4 cylinders, which model has the largest horsepower?", "rationale": ["Identify the relevant tables: cars_data for car specifications, car_names for car models, and model_list for linking car models to their makers.", "We need to filter the cars based on the number of cylinders, specifically those with 4 cylinders.", "To find the model with the largest horsepower, we will use the MAX function on the Horsepower column from the cars_data table.", "We will join the tables on their respective keys to access the model names associated with the horsepower values.", "We will group the results by model to ensure we get the maximum horsepower for each model.", "Finally, we will order the results by horsepower in descending order and limit the output to the top result to get the model with the largest horsepower."], "pred_sql": "SELECT model_list.Model, MAX(cars_data.Horsepower) AS MaxHorsepower\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nWHERE cars_data.Cylinders = 4\nGROUP BY model_list.Model\nORDER BY MaxHorsepower DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 166, "db_id": "car_1", "question": "For all of the 4 cylinder cars, which model has the most horsepower?", "rationale": ["Identify the relevant table: The 'cars_data' table contains information about cars, including the number of cylinders and horsepower.", "Filter the data: We need to filter the records to include only those cars that have 4 cylinders. This is done using a WHERE clause: 'WHERE Cylinders = 4'.", "Select the necessary columns: We want to retrieve the model name and the maximum horsepower. We will use 'SELECT Model, MAX(Horsepower) AS MaxHorsepower'.", "Group the results: Since we want to find the model with the most horsepower among 4-cylinder cars, we need to group the results by model using 'GROUP BY Model'.", "Order the results: To find the model with the highest horsepower, we will order the results in descending order using 'ORDER BY MaxHorsepower DESC'.", "Limit the results: Since we only want the top result, we will limit the output to 1 using 'LIMIT 1'."], "pred_sql": "SELECT Model, MAX(Horsepower) AS MaxHorsepower FROM cars_data WHERE Cylinders = 4 GROUP BY Model ORDER BY MaxHorsepower DESC LIMIT 1;", "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}
{"sample_id": 167, "db_id": "car_1", "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "rationale": ["Identify the requirement to find cars with horsepower greater than the lowest horsepower.", "Determine that we need to filter out cars with more than 3 cylinders.", "Join the 'cars_data' table with the 'car_names' table to access the car make information.", "Use a subquery to find the minimum horsepower from the 'cars_data' table.", "Construct the SQL query to select the 'MakeId' and 'Make' from the 'car_names' table where the horsepower condition and cylinder condition are met."], "pred_sql": "SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;", "gold_sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "source_tables": ["cars_data", "car_names"]}
{"sample_id": 168, "db_id": "car_1", "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "rationale": ["Identify the relevant tables: We need data from 'cars_data' for horsepower and cylinders, and 'car_names' for make ids and names.", "Determine the condition for horsepower: We need to find cars with horsepower less than the minimum horsepower in the 'cars_data' table.", "Determine the condition for cylinders: We need to filter for cars with less than 4 cylinders.", "Join the 'cars_data' and 'car_names' tables on the appropriate foreign key (cars_data.Id = car_names.MakeId) to get the make ids and names.", "Construct the SQL query to select the make ids and names from the joined tables, applying the conditions for horsepower and cylinders."], "pred_sql": "SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower < (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;", "gold_sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "source_tables": ["cars_data", "car_names"]}
{"sample_id": 169, "db_id": "car_1", "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "rationale": ["Identify the relevant table: 'cars_data' contains the 'MPG' and 'Cylinders' columns, as well as the 'Year' column.", "Determine the conditions: We need to find cars with either 8 cylinders or produced before 1980.", "Use the MAX function to find the maximum value of 'MPG' that meets the conditions.", "Construct the SQL query using the SELECT statement to retrieve the maximum 'MPG' from 'cars_data' where the conditions are satisfied."], "pred_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;", "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "source_tables": ["cars_data"]}
{"sample_id": 170, "db_id": "car_1", "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "rationale": ["Identify the relevant table: The query is about cars and their MPG, so we will use the 'cars_data' table.", "Determine the conditions: We need to find cars with either 8 cylinders or produced before 1980.", "Construct the WHERE clause: The conditions can be combined using an OR operator: 'Cylinders = 8 OR Year < 1980'.", "Select the maximum MPG: We will use the MAX() function to get the maximum MPG from the filtered results.", "Formulate the final SQL query: Combine the SELECT statement with the WHERE clause to create the complete SQL query."], "pred_sql": "SELECT MAX(MPG) AS MaxMPG FROM cars_data WHERE Cylinders = 8 OR Year < 1980;", "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "source_tables": ["cars_data"]}
{"sample_id": 171, "db_id": "car_1", "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "rationale": ["Identify the relevant tables: model_list, car_makers, car_names, and cars_data are needed to get the car models and their weights.", "Join the model_list table with the car_makers table to filter out models based on the maker's name.", "Join the car_names table to connect the model names with their corresponding IDs.", "Join the cars_data table to access the weight of each car model.", "Use a WHERE clause to filter models that are lighter than 3500 pounds and exclude those made by 'Ford Motor Company'."], "pred_sql": "SELECT model_list.Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Id \nJOIN car_names ON model_list.Model = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Weight < 3500 \nAND car_makers.FullName != 'Ford Motor Company';", "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"]}
{"sample_id": 172, "db_id": "car_1", "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "rationale": ["Identify the relevant tables: model_list, car_names, cars_data, and car_makers are needed to get the car models and their details.", "We need to filter the models based on their weight, so we will use the cars_data table which contains the Weight column.", "We also need to exclude models made by the Ford Motor Company, which requires us to check the FullName column in the car_makers table.", "We will join the tables: model_list with car_names to get the make of the model, then join with cars_data to filter by weight, and finally join with car_makers to filter out Ford Motor Company.", "The final query will select distinct models that meet the weight condition and are not made by Ford."], "pred_sql": "SELECT DISTINCT model_list.Model \nFROM model_list \nJOIN car_names ON model_list.Model = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nJOIN car_makers ON model_list.Maker = car_makers.Id \nWHERE cars_data.Weight < 3500 \nAND car_makers.FullName != 'Ford Motor Company';", "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"]}
{"sample_id": 173, "db_id": "car_1", "question": "What are the name of the countries where there is not a single car maker?", "rationale": ["Identify the relevant table: countries, which contains the names of countries.", "We need to find countries that do not have any associated car makers.", "To do this, we can use a subquery to find all countries that have at least one car maker by selecting distinct countries from the car_makers table.", "We will then use the NOT IN clause to filter out these countries from the countries table, leaving us with those that do not have any car makers."], "pred_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)", "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "source_tables": ["car_makers", "countries"]}
{"sample_id": 174, "db_id": "car_1", "question": "What are the names of the countries with no car makers?", "rationale": ["Identify the table that contains country information, which is the 'countries' table.", "Determine the relevant column in the 'countries' table that holds the country names, which is 'CountryName'.", "Identify the 'car_makers' table to find out which countries have car makers.", "Use a subquery to select distinct countries from the 'car_makers' table based on the 'Country' column.", "Use the NOT IN clause to filter out countries that are present in the subquery result, thus identifying countries with no car makers."], "pred_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)", "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "source_tables": ["car_makers", "countries"]}
{"sample_id": 175, "db_id": "car_1", "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "rationale": ["Identify the relevant tables: car_makers and model_list.", "We need to find car makers that produce at least 2 models, so we will join car_makers with model_list on the Maker ID.", "Group the results by car maker ID and name to aggregate the models produced by each maker.", "Use the HAVING clause to filter groups that have at least 2 models.", "Additionally, we need to ensure that there are more than 3 distinct car makers in the result set."], "pred_sql": "SELECT cm.Id, cm.Maker \nFROM car_makers cm \nJOIN model_list ml ON cm.Id = ml.Maker \nGROUP BY cm.Id, cm.Maker \nHAVING COUNT(ml.ModelId) >= 2 \nAND COUNT(DISTINCT cm.Id) > 3;", "gold_sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "source_tables": ["car_makers", "car_names", "model_list"]}
{"sample_id": 176, "db_id": "car_1", "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "rationale": ["Identify the relevant tables: car_makers, model_list, car_names, and cars_data.", "We need to find car makers that produce at least 2 models, so we will join car_makers with model_list on the Maker ID.", "Next, we need to count the distinct models for each maker, which requires grouping by the maker's ID and name.", "We also need to ensure that the car maker has produced more than 3 cars, which means we will count the entries in cars_data for each maker.", "The final query will select the Id and Maker from car_makers, applying the necessary conditions in the HAVING clause."], "pred_sql": "SELECT cm.Id, cm.Maker \nFROM car_makers cm \nJOIN model_list ml ON cm.Id = ml.Maker \nJOIN car_names cn ON ml.Model = cn.Model \nJOIN cars_data cd ON cn.MakeId = cd.Id \nGROUP BY cm.Id, cm.Maker \nHAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(cd.Id) > 3;", "gold_sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["car_makers", "car_names", "model_list"]}
{"sample_id": 177, "db_id": "car_1", "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "rationale": ["Identify the relevant tables: countries, car_makers, model_list, and car_names.", "We need to select the CountryId and CountryName from the countries table.", "To find countries with more than 3 car makers, we can use a subquery that counts the number of car makers for each country.", "We also need to check if the country produces the 'fiat' model, which requires joining the car_makers, model_list, and car_names tables.", "Use LEFT JOINs to connect the countries table with car_makers, model_list, and car_names based on their relationships.", "In the WHERE clause, include the condition for countries with more than 3 car makers or producing the 'fiat' model.", "Group the results by CountryId and CountryName to avoid duplicates."], "pred_sql": "SELECT c.CountryId, c.CountryName \nFROM countries c \nLEFT JOIN car_makers cm ON c.CountryId = cm.Country \nLEFT JOIN model_list ml ON cm.Id = ml.Maker \nLEFT JOIN car_names cn ON ml.Model = cn.Model \nWHERE (SELECT COUNT(*) FROM car_makers WHERE Country = c.CountryId) > 3 \n   OR cn.Model = 'fiat' \nGROUP BY c.CountryId, c.CountryName;", "gold_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "source_tables": ["car_makers", "countries", "model_list"]}
{"sample_id": 178, "db_id": "car_1", "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "rationale": ["Identify the relevant tables: countries, car_makers, model_list, and car_names.", "We need to select the CountryId and CountryName from the countries table.", "To find countries with more than 3 car makers, we can use a subquery that counts the number of car makers for each country.", "To find countries that produce the fiat model, we need to join the car_makers, model_list, and car_names tables to check if 'fiat' is present in the model names.", "Use LEFT JOINs to connect the tables based on their foreign key relationships.", "Combine the two conditions using an OR clause in the WHERE statement.", "Group the results by CountryId and CountryName to avoid duplicates."], "pred_sql": "SELECT c.CountryId, c.CountryName \nFROM countries c \nLEFT JOIN car_makers cm ON c.CountryId = cm.Country \nLEFT JOIN model_list ml ON cm.Id = ml.Maker \nLEFT JOIN car_names cn ON ml.Model = cn.Model \nWHERE (SELECT COUNT(*) FROM car_makers WHERE Country = c.CountryId) > 3 \n   OR cn.Model = 'fiat' \nGROUP BY c.CountryId, c.CountryName;", "gold_sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "source_tables": ["car_makers", "countries", "model_list"]}
{"sample_id": 179, "db_id": "flight_2", "question": "Which country does Airline \"JetBlue Airways\" belong to?", "rationale": ["Identify the table that contains information about airlines, which is the 'airlines' table.", "Determine the relevant column that contains the country information, which is the 'Country' column.", "Formulate a SQL query to select the 'Country' from the 'airlines' table where the 'Airline' is 'JetBlue Airways'."], "pred_sql": "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';", "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "source_tables": ["airlines"]}
{"sample_id": 180, "db_id": "flight_2", "question": "What country is Jetblue Airways affiliated with?", "rationale": ["Identify the relevant table: The 'airlines' table contains information about airlines and their associated countries.", "Determine the specific airline of interest: The query asks about 'Jetblue Airways'.", "Construct the SQL query to select the 'Country' column from the 'airlines' table where the 'Airline' column matches 'Jetblue Airways'."], "pred_sql": "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';", "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "source_tables": ["airlines"]}
{"sample_id": 181, "db_id": "flight_2", "question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "rationale": ["Identify the table that contains the information about airlines, which is the 'airlines' table.", "Determine the column that holds the abbreviation of the airline, which is 'Abbreviation'.", "Formulate a query to select the 'Abbreviation' from the 'airlines' table where the 'Airline' column matches 'JetBlue Airways'."], "pred_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';", "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "source_tables": ["airlines"]}
{"sample_id": 182, "db_id": "flight_2", "question": "Which abbreviation corresponds to Jetblue Airways?", "rationale": ["Identify the table that contains the abbreviation for airlines, which is the 'airlines' table.", "Determine the column that holds the abbreviation, which is 'Abbreviation'.", "Identify the column that holds the airline name, which is 'Airline'.", "Formulate a query to select the 'Abbreviation' from the 'airlines' table where the 'Airline' is 'Jetblue Airways'."], "pred_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';", "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "source_tables": ["airlines"]}
{"sample_id": 183, "db_id": "flight_2", "question": "List all airline names and their abbreviations in \"USA\".", "rationale": ["Identify the relevant table: 'airlines' contains the airline names and abbreviations.", "Determine the columns needed: 'Airline' and 'Abbreviation' are required.", "Filter the results based on the country: we need airlines based in 'USA'.", "Construct the SQL query using SELECT to retrieve the specified columns from the airlines table where the country is 'USA'."], "pred_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';", "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'USA'", "source_tables": ["airlines"]}
{"sample_id": 184, "db_id": "flight_2", "question": "What are the airline names and abbreviations for airlines in the USA?", "rationale": ["Identify the relevant table: The 'airlines' table contains the information about airlines, including their names and abbreviations.", "Determine the columns needed: We need the 'Airline' and 'Abbreviation' columns from the 'airlines' table.", "Filter the results: We need to filter the airlines based on the country, which is 'USA'.", "Construct the SQL query: Use the SELECT statement to retrieve the required columns and apply the WHERE clause to filter by country."], "pred_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';", "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'USA'", "source_tables": ["airlines"]}
{"sample_id": 185, "db_id": "flight_2", "question": "List the airport code and name in the city of Anthony.", "rationale": ["Identify the relevant table: The query requires information about airports, so we will use the 'airports' table.", "Determine the columns needed: We need to select 'AirportCode' and 'AirportName' from the 'airports' table.", "Filter the results: We need to filter the airports based on the city name 'Anthony'.", "Construct the SQL query: We will use a SELECT statement to get the required columns and a WHERE clause to filter by the city name."], "pred_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = (SELECT City FROM airports WHERE AirportName = 'Anthony')", "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  'Anthony'", "source_tables": ["airports"]}
{"sample_id": 186, "db_id": "flight_2", "question": "Give the airport code and airport name corresonding to the city Anthony.", "rationale": ["Identify the relevant table: The query requires information about airports, so we will use the 'airports' table.", "Determine the columns needed: We need the 'AirportCode' and 'AirportName' columns from the 'airports' table.", "Filter the results: We need to filter the airports based on the city name 'Anthony'.", "Construct the SQL query: We will select 'AirportCode' and 'AirportName' from the 'airports' table where the 'City' matches 'Anthony'."], "pred_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = (SELECT City FROM airports WHERE AirportName = 'Anthony')", "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  'Anthony'", "source_tables": ["airports"]}
{"sample_id": 187, "db_id": "flight_2", "question": "How many airlines do we have?", "rationale": ["Identify the table that contains information about airlines, which is the 'airlines' table.", "To find out how many airlines there are, we need to count the number of entries in the 'airlines' table.", "Use the COUNT() function to count the total number of rows in the 'airlines' table.", "Construct the SQL query to select the count from the 'airlines' table."], "pred_sql": "SELECT COUNT(*) AS total_airlines FROM airlines;", "gold_sql": "SELECT count(*) FROM AIRLINES", "source_tables": ["airlines"]}
{"sample_id": 188, "db_id": "flight_2", "question": "What is the total number of airlines?", "rationale": ["Identify the table that contains information about airlines, which is the 'airlines' table.", "To find the total number of airlines, we need to count the number of entries in the 'airlines' table.", "Use the COUNT() function to count all rows in the 'airlines' table.", "Select the count with an alias 'total_airlines' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_airlines FROM airlines;", "gold_sql": "SELECT count(*) FROM AIRLINES", "source_tables": ["airlines"]}
{"sample_id": 189, "db_id": "flight_2", "question": "How many airports do we have?", "rationale": ["The user wants to know the total number of airports.", "To get this information, we need to count the number of entries in the 'airports' table.", "We will use the COUNT() function to count all rows in the 'airports' table.", "The SQL query will be: SELECT COUNT(*) AS TotalAirports FROM airports;"], "pred_sql": "SELECT COUNT(*) AS TotalAirports FROM airports;", "gold_sql": "SELECT count(*) FROM AIRPORTS", "source_tables": ["airports"]}
{"sample_id": 190, "db_id": "flight_2", "question": "Return the number of  airports.", "rationale": ["Identify the requirement: We need to count the number of airports.", "Determine the relevant table: The 'airports' table contains the information about airports.", "Use the COUNT() function to count the total number of records in the 'airports' table.", "Construct the SQL query to select the count from the 'airports' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfAirports FROM airports;", "gold_sql": "SELECT count(*) FROM AIRPORTS", "source_tables": ["airports"]}
{"sample_id": 191, "db_id": "flight_2", "question": "How many flights do we have?", "rationale": ["The user wants to know the total number of flights.", "To get the total number of flights, we need to count the entries in the 'flights' table.", "We will use the COUNT() function to count all rows in the 'flights' table.", "The SQL query will be 'SELECT COUNT(*) AS TotalFlights FROM flights;' to return the total count of flights."], "pred_sql": "SELECT COUNT(*) AS TotalFlights FROM flights;", "gold_sql": "SELECT count(*) FROM FLIGHTS", "source_tables": ["flights"]}
{"sample_id": 192, "db_id": "flight_2", "question": "Return the number of flights.", "rationale": ["Identify the requirement: We need to return the number of flights.", "Determine the relevant table: The 'flights' table contains the information about flights.", "Use the COUNT() function to count the total number of entries in the 'flights' table.", "Construct the SQL query to select the count of flights from the 'flights' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights;", "gold_sql": "SELECT count(*) FROM FLIGHTS", "source_tables": ["flights"]}
{"sample_id": 193, "db_id": "flight_2", "question": "Which airline has abbreviation 'UAL'?", "rationale": ["Identify the table that contains the abbreviation of airlines, which is the 'airlines' table.", "Determine the column that holds the abbreviation, which is 'Abbreviation'.", "Formulate a query to select the 'Airline' column from the 'airlines' table where the 'Abbreviation' matches 'UAL'."], "pred_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';", "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  'UAL'", "source_tables": ["airlines"]}
{"sample_id": 194, "db_id": "flight_2", "question": "Give the airline with abbreviation 'UAL'.", "rationale": ["Identify the table that contains the airline information, which is the 'airlines' table.", "Determine the column that holds the abbreviation of the airline, which is 'Abbreviation'.", "Formulate a SQL query to select all columns from the 'airlines' table where the 'Abbreviation' matches 'UAL'."], "pred_sql": "SELECT * FROM airlines WHERE Abbreviation = 'UAL';", "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  'UAL'", "source_tables": ["airlines"]}
{"sample_id": 195, "db_id": "flight_2", "question": "How many airlines are from USA?", "rationale": ["Identify the table that contains information about airlines, which is the 'airlines' table.", "Determine the relevant column that indicates the country of the airline, which is the 'Country' column.", "To find the number of airlines from the USA, we need to filter the results where the 'Country' column equals 'USA'.", "Use the COUNT() function to count the number of records that meet this condition.", "Construct the SQL query to select the count of airlines from the 'airlines' table where the country is 'USA'."], "pred_sql": "SELECT COUNT(*) AS NumberOfAirlines FROM airlines WHERE Country = 'USA';", "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  'USA'", "source_tables": ["airlines"]}
{"sample_id": 196, "db_id": "flight_2", "question": "Return the number of airlines in the USA.", "rationale": ["Identify the table that contains information about airlines, which is the 'airlines' table.", "Determine the relevant column that indicates the country of the airline, which is the 'Country' column.", "To find the number of airlines in the USA, we need to filter the records where the 'Country' is 'USA'.", "Use the COUNT() function to count the total number of records that meet this condition.", "Construct the SQL query to select the count of airlines from the 'airlines' table where the 'Country' is 'USA'."], "pred_sql": "SELECT COUNT(*) AS NumberOfAirlines FROM airlines WHERE Country = 'USA';", "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  'USA'", "source_tables": ["airlines"]}
{"sample_id": 197, "db_id": "flight_2", "question": "Which city and country is the Alton airport at?", "rationale": ["Identify the relevant table: The query is asking about an airport, so we will use the 'airports' table.", "Determine the columns needed: We need the city (AirportName) and country (CountryAbbrev) for the Alton airport.", "Formulate the WHERE clause: We need to filter the results to only include the Alton airport, so we will use a WHERE clause to specify that the AirportName should be 'Alton'.", "Combine the SELECT statement with the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT AirportName, CountryAbbrev FROM airports WHERE AirportName = 'Alton'", "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  'Alton'", "source_tables": ["airports"]}
{"sample_id": 198, "db_id": "flight_2", "question": "Give the city and country for the Alton airport.", "rationale": ["Identify the relevant table: The query requires information about the Alton airport, which is found in the 'airports' table.", "Determine the columns needed: The user wants the city and country for the Alton airport, so we need to select 'City' and 'Country' from the 'airports' table.", "Formulate the WHERE clause: We need to filter the results to only include the airport with the name 'Alton'.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton'", "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  'Alton'", "source_tables": ["airports"]}
{"sample_id": 199, "db_id": "flight_2", "question": "What is the airport name for airport 'AKO'?", "rationale": ["Identify the relevant table: The airport name is stored in the 'airports' table.", "Determine the column needed: We need the 'AirportName' column.", "Specify the condition: We are looking for the airport with the code 'AKO', which corresponds to the 'AirportCode' column.", "Construct the SQL query: Use a SELECT statement to retrieve the 'AirportName' from the 'airports' table where 'AirportCode' equals 'AKO'."], "pred_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';", "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO'", "source_tables": ["airports"]}
{"sample_id": 200, "db_id": "flight_2", "question": "Return the name of the airport with code 'AKO'.", "rationale": ["Identify the table that contains airport information, which is the 'airports' table.", "Determine the column that holds the airport code, which is 'AirportCode'.", "Determine the column that holds the airport name, which is 'AirportName'.", "Construct a SQL query to select the 'AirportName' from the 'airports' table where 'AirportCode' matches 'AKO'."], "pred_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';", "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO'", "source_tables": ["airports"]}
{"sample_id": 201, "db_id": "flight_2", "question": "What are airport names at City 'Aberdeen'?", "rationale": ["Identify the relevant table: The query is asking for airport names, which are stored in the 'airports' table.", "Determine the condition: The query specifies 'City Aberdeen', so we need to filter the airports based on this city.", "Construct the SQL query: We will select the 'AirportName' from the 'airports' table where the 'City' matches 'Aberdeen'."], "pred_sql": "SELECT AirportName FROM airports WHERE City = (SELECT City FROM airports WHERE AirportName = 'Aberdeen')", "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'", "source_tables": ["airports"]}
{"sample_id": 202, "db_id": "flight_2", "question": "What are the names of airports in Aberdeen?", "rationale": ["Identify the relevant table: The query is about airports, so we will use the 'airports' table.", "Determine the column needed: We need the names of the airports, which corresponds to the 'AirportName' column.", "Filter the results: We need to find airports specifically in Aberdeen, so we will use a WHERE clause to filter by the city name.", "Use a subquery if necessary: Since the city is not directly provided in the schema, we can use a subquery to find the City identifier for Aberdeen and then use it to filter the main query."], "pred_sql": "SELECT AirportName FROM airports WHERE City = (SELECT City FROM airports WHERE AirportName LIKE '%Aberdeen%')", "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'", "source_tables": ["airports"]}
{"sample_id": 203, "db_id": "flight_2", "question": "How many flights depart from 'APG'?", "rationale": ["Identify the relevant table: The 'flights' table contains information about flight departures.", "Determine the specific column to count: We want to count the number of flights, so we will use COUNT(*) to get the total number of rows that match our criteria.", "Specify the condition for the count: We need to filter the flights where the SourceAirport is 'APG'.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and the WHERE clause to filter by SourceAirport."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE SourceAirport = 'APG';", "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}
{"sample_id": 204, "db_id": "flight_2", "question": "Count the number of flights departing from 'APG'.", "rationale": ["Identify the table that contains flight information, which is the 'flights' table.", "Determine the relevant column for the source airport, which is 'SourceAirport'.", "Use the COUNT() function to count the number of records that match the specified source airport code 'APG'.", "Construct the SQL query to select the count of flights from the 'flights' table where the SourceAirport is 'APG'."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE SourceAirport = 'APG';", "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}
{"sample_id": 205, "db_id": "flight_2", "question": "How many flights have destination ATO?", "rationale": ["Identify the relevant table: The query is about flights, so we will use the 'flights' table.", "Determine the required information: We need to count the number of flights with a specific destination.", "Specify the condition: The destination airport code is 'ATO'.", "Construct the SQL query: Use the COUNT function to count the number of records in the 'flights' table where the DestAirport matches 'ATO'."], "pred_sql": "SELECT COUNT(*) AS flight_count FROM flights WHERE DestAirport = 'ATO';", "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO'", "source_tables": ["flights"]}
{"sample_id": 206, "db_id": "flight_2", "question": "Count the number of flights into ATO.", "rationale": ["Identify the goal: Count the number of flights arriving at the airport with code 'ATO'.", "Determine the relevant table: The 'flights' table contains information about flight destinations.", "Formulate the SQL query: Use the COUNT() function to count the number of records in the 'flights' table where the 'DestAirport' matches 'ATO'.", "Construct the final SQL query: SELECT COUNT(*) AS FlightCount FROM flights WHERE DestAirport = 'ATO';"], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE DestAirport = 'ATO';", "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO'", "source_tables": ["flights"]}
{"sample_id": 207, "db_id": "flight_2", "question": "How many flights depart from City Aberdeen?", "rationale": ["Identify the relevant tables: 'flights' for flight information and 'airports' for airport information.", "Determine the relationship between the tables: 'SourceAirport' in 'flights' corresponds to 'AirportCode' in 'airports'.", "To find flights departing from Aberdeen, first, we need to find the AirportCode(s) for Aberdeen from the 'airports' table.", "Use a subquery to select the AirportCode(s) for the city 'Aberdeen'.", "Count the number of flights in the 'flights' table where the SourceAirport matches the AirportCode(s) obtained from the subquery."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 208, "db_id": "flight_2", "question": "Return the number of flights departing from Aberdeen.", "rationale": ["Identify the relevant table: The 'flights' table contains information about flight departures.", "Determine the condition: We need to count flights where the source airport is Aberdeen.", "Find the airport code for Aberdeen: Use a subquery to select the AirportCode from the 'airports' table where the AirportName is 'Aberdeen'.", "Count the number of flights: Use the COUNT() function to count the number of records in the 'flights' table that match the source airport code from the subquery."], "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 209, "db_id": "flight_2", "question": "How many flights arriving in Aberdeen city?", "rationale": ["Identify the relevant tables: 'flights' for flight information and 'airports' for airport details.", "We need to count the number of flights arriving in Aberdeen, so we will use the COUNT() function.", "To find flights arriving in Aberdeen, we need to join the 'flights' table with the 'airports' table on the destination airport code.", "We will filter the results to only include flights where the destination airport is in Aberdeen.", "To get the correct city identifier for Aberdeen, we will use a subquery to find the City identifier from the 'airports' table where the AirportName is 'Aberdeen'.", "The final SQL query will count the total number of flights that match these criteria."], "pred_sql": "SELECT COUNT(*) AS TotalFlights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = (SELECT City FROM airports WHERE AirportName = 'Aberdeen')", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 210, "db_id": "flight_2", "question": "Return the number of flights arriving in Aberdeen.", "rationale": ["Identify the requirement: We need to count the number of flights arriving in Aberdeen.", "Determine the relevant tables: The 'flights' table contains flight information, and the 'airports' table contains airport information.", "Find the airport code for Aberdeen: We need to look up the airport code for Aberdeen in the 'airports' table.", "Construct a subquery to get the airport code for Aberdeen: This will be used in the main query to filter flights.", "Count the number of flights: Use the COUNT function to count the number of records in the 'flights' table where the destination airport matches the airport code for Aberdeen."], "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 211, "db_id": "flight_2", "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "rationale": ["Identify the tables involved: We need to count flights, so we will use the 'flights' table. We also need to reference the 'airports' table to get the city names for both the source and destination airports.", "Determine the relationships: The 'flights' table has foreign keys that link to the 'airports' table via the 'SourceAirport' and 'DestAirport' columns. We will need to join the 'flights' table with the 'airports' table twice: once for the source airport and once for the destination airport.", "Construct the JOIN statements: We will join the 'flights' table with the 'airports' table twice, using aliases (a1 for source and a2 for destination) to differentiate between the two joins.", "Add the WHERE clause: We need to filter the results to only include flights where the source airport is in 'Aberdeen' and the destination airport is in 'Ashley'.", "Count the results: Finally, we will use the COUNT() function to count the number of flights that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS FlightCount \nFROM flights f \nJOIN airports a1 ON f.SourceAirport = a1.AirportCode \nJOIN airports a2 ON f.DestAirport = a2.AirportCode \nWHERE a1.City = 'Aberdeen' AND a2.City = 'Ashley';", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 212, "db_id": "flight_2", "question": "How many flights fly from Aberdeen to Ashley?", "rationale": ["Identify the source airport (Aberdeen) and destination airport (Ashley) from the airports table.", "Use subqueries to find the AirportCode for both Aberdeen and Ashley.", "Count the number of flights in the flights table that match the source and destination airport codes."], "pred_sql": "SELECT COUNT(*) AS flight_count FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Ashley');", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 213, "db_id": "flight_2", "question": "How many flights does airline 'JetBlue Airways' have?", "rationale": ["Identify the relevant table: The 'flights' table contains information about the flights operated by airlines.", "Determine the specific airline: The query asks for flights operated by 'JetBlue Airways'.", "Count the number of flights: Use the COUNT() function to count the number of records in the 'flights' table where the Airline is 'JetBlue Airways'.", "Construct the SQL query: Combine the elements into a complete SQL query that selects the count of flights for the specified airline."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'JetBlue Airways';", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = 'JetBlue Airways'", "source_tables": ["flights", "airlines"]}
{"sample_id": 214, "db_id": "flight_2", "question": "Give the number of Jetblue Airways flights.", "rationale": ["Identify the table that contains flight information, which is the 'flights' table.", "Determine the specific airline we are interested in, which is 'Jetblue Airways'.", "To count the number of flights for this airline, we will use the COUNT() function in SQL.", "Construct the SQL query to select the count of flights from the 'flights' table where the Airline column matches 'Jetblue Airways'."], "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE Airline = 'Jetblue Airways';", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = 'JetBlue Airways'", "source_tables": ["flights", "airlines"]}
{"sample_id": 215, "db_id": "flight_2", "question": "How many 'United Airlines' flights go to Airport 'ASY'?", "rationale": ["Identify the relevant table: The 'flights' table contains information about flights, including the airline and destination airport.", "Determine the conditions: We need to filter the flights by the airline 'United Airlines' and the destination airport code 'ASY'.", "Construct the SQL query: Use the COUNT() function to count the number of flights that meet the specified conditions."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';", "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.DestAirport  =  'ASY'", "source_tables": ["flights", "airlines"]}
{"sample_id": 216, "db_id": "flight_2", "question": "Count the number of United Airlines flights arriving in ASY Airport.", "rationale": ["Identify the relevant table: The 'flights' table contains information about flights, including the airline and destination airport.", "Determine the conditions: We need to count flights for 'United Airlines' and those that arrive at 'ASY' airport.", "Construct the SQL query: Use the COUNT() function to count the number of flights that meet the specified conditions."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';", "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.DestAirport  =  'ASY'", "source_tables": ["flights", "airlines"]}
{"sample_id": 217, "db_id": "flight_2", "question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "rationale": ["Identify the relevant table: The 'flights' table contains information about flights, including the airline and source airport.", "Determine the conditions: We need to filter the flights by the airline 'United Airlines' and the source airport 'AHD'.", "Construct the SQL query: Use the COUNT() function to count the number of flights that meet the specified conditions."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';", "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.SourceAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}
{"sample_id": 218, "db_id": "flight_2", "question": "Return the number of United Airlines flights leaving from AHD Airport.", "rationale": ["Identify the relevant table: The 'flights' table contains information about flights, including the airline and source airport.", "Determine the criteria for the query: We need to count flights operated by 'United Airlines' that are departing from 'AHD' airport.", "Use the COUNT() function to count the number of flights that meet the criteria.", "Construct the SQL query using a SELECT statement with a WHERE clause to filter by airline and source airport."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';", "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.SourceAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}
{"sample_id": 219, "db_id": "flight_2", "question": "How many United Airlines flights go to City 'Aberdeen'?", "rationale": ["Identify the relevant tables: 'flights' for flight information and 'airports' for airport information.", "We need to count the number of flights, so we will use the COUNT() function.", "We need to filter the flights to only include those operated by 'United Airlines'.", "We also need to filter the flights to only include those that arrive at the airport located in the city 'Aberdeen'.", "To do this, we will join the 'flights' table with the 'airports' table on the airport code, which is the common field between them.", "Finally, we will construct the SQL query to count the number of flights that meet both conditions."], "pred_sql": "SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE f.Airline = 'United Airlines' AND a.City = 'Aberdeen';", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen' AND T3.Airline  =  'United Airlines'", "source_tables": ["airports", "flights", "airlines"]}
{"sample_id": 220, "db_id": "flight_2", "question": "Count the number of United Airlines flights that arrive in Aberdeen.", "rationale": ["Identify the airline of interest: United Airlines.", "Determine the destination airport: Aberdeen.", "Find the airport code for Aberdeen using a subquery on the airports table.", "Count the number of flights in the flights table where the airline is United Airlines and the destination airport matches the airport code for Aberdeen."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND DestAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');", "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen' AND T3.Airline  =  'United Airlines'", "source_tables": ["airports", "flights", "airlines"]}
{"sample_id": 221, "db_id": "flight_2", "question": "Which city has most number of arriving flights?", "rationale": ["Identify the relevant tables: We need to look at the 'flights' table for flight information and the 'airports' table for city information.", "We want to count the number of arriving flights, which means we need to count the occurrences of 'DestAirport' in the 'flights' table.", "To get the city associated with each airport, we will join the 'flights' table with the 'airports' table on the 'DestAirport' and 'AirportCode' columns.", "We will group the results by city to get the count of flights for each city.", "Finally, we will order the results in descending order based on the count of flights and limit the output to the top result to find the city with the most arriving flights."], "pred_sql": "SELECT airports.City, COUNT(flights.DestAirport) AS NumberOfArrivals\nFROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nGROUP BY airports.City\nORDER BY NumberOfArrivals DESC\nLIMIT 1;", "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}
{"sample_id": 222, "db_id": "flight_2", "question": "Which city has the most frequent destination airport?", "rationale": ["Identify the relevant tables: We need to look at the 'flights' table for destination airports and the 'airports' table for city information.", "Join the 'flights' table with the 'airports' table on the destination airport code to get the city associated with each destination airport.", "Count the number of flights for each city by grouping the results by city.", "Order the results by the count of flights in descending order to find the city with the most frequent destination airport.", "Limit the results to 1 to get only the city with the highest frequency."], "pred_sql": "SELECT a.City, COUNT(f.DestAirport) AS Frequency\nFROM flights f\nJOIN airports a ON f.DestAirport = a.AirportCode\nGROUP BY a.City\nORDER BY Frequency DESC\nLIMIT 1;", "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}
{"sample_id": 223, "db_id": "flight_2", "question": "Which city has most number of departing flights?", "rationale": ["Identify the relevant tables: 'flights' for flight information and 'airports' for city information.", "We need to count the number of departing flights, which means we will count the 'FlightNo' from the 'flights' table.", "To associate flights with cities, we will join the 'flights' table with the 'airports' table on the 'SourceAirport' and 'AirportCode'.", "We will group the results by 'City' to get the count of flights per city.", "To find the city with the most departing flights, we will order the results by the count of flights in descending order.", "Finally, we will limit the results to 1 to get only the city with the highest number of departing flights."], "pred_sql": "SELECT airports.City, COUNT(flights.FlightNo) AS NumberOfDepartures\nFROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nGROUP BY airports.City\nORDER BY NumberOfDepartures DESC\nLIMIT 1;", "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}
{"sample_id": 224, "db_id": "flight_2", "question": "Which city is the most frequent source airport?", "rationale": ["Identify the relevant tables: We need to look at the 'flights' table to find source airports and the 'airports' table to get the corresponding city names.", "Join the 'flights' table with the 'airports' table on the SourceAirport and AirportCode to link flights to their respective cities.", "Count the number of flights for each source airport by grouping the results by city.", "Order the results in descending order based on the count of flights to find the most frequent source airport.", "Limit the results to 1 to get only the city with the highest frequency."], "pred_sql": "SELECT airports.City, COUNT(flights.SourceAirport) AS Frequency\nFROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nGROUP BY airports.City\nORDER BY Frequency DESC\nLIMIT 1;", "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}
{"sample_id": 225, "db_id": "flight_2", "question": "What is the code of airport that has the highest number of flights?", "rationale": ["Identify the relevant table: The 'flights' table contains information about flights and their source and destination airports.", "Determine the goal: We need to find the airport code with the highest number of flights.", "Group the data: Use GROUP BY on the 'SourceAirport' to aggregate the number of flights for each airport.", "Count the flights: Use COUNT(*) to count the number of flights for each grouped airport.", "Order the results: Use ORDER BY COUNT(*) DESC to sort the airports by the number of flights in descending order.", "Limit the results: Use LIMIT 1 to get only the airport with the highest number of flights."], "pred_sql": "SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}
{"sample_id": 226, "db_id": "flight_2", "question": "What is the airport code of the airport with the most flights?", "rationale": ["Identify the relevant table: The 'flights' table contains information about flights and their source airports.", "Count the number of flights for each source airport: Use the COUNT() function to count flights grouped by the SourceAirport.", "Group the results by SourceAirport: This will allow us to count the number of flights for each airport.", "Order the results by the count of flights in descending order: This will help us find the airport with the most flights.", "Limit the results to 1: We only need the airport with the most flights, so we will limit the output to 1 record."], "pred_sql": "SELECT SourceAirport AS AirportCode, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport ORDER BY FlightCount DESC LIMIT 1;", "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}
{"sample_id": 227, "db_id": "flight_2", "question": "What is the code of airport that has fewest number of flights?", "rationale": ["Identify the airports from the 'airports' table.", "Count the number of flights for each airport from the 'flights' table, considering both source and destination.", "Use a subquery to get the count of flights for each airport.", "Order the results by the count of flights in ascending order to find the airport with the fewest flights.", "Limit the results to 1 to get only the airport with the fewest flights.", "Select the AirportCode of that airport."], "pred_sql": "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights) ORDER BY (SELECT COUNT(*) FROM flights WHERE SourceAirport = airports.AirportCode OR DestAirport = airports.AirportCode) ASC LIMIT 1;", "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "source_tables": ["airports", "flights"]}
{"sample_id": 228, "db_id": "flight_2", "question": "Give the code of the airport with the least flights.", "rationale": ["Identify the relevant table: The 'flights' table contains information about flights, including the source and destination airports.", "Determine the requirement: We need to find the airport code with the least number of flights.", "Group the data: Use GROUP BY on the 'SourceAirport' to aggregate the number of flights for each airport.", "Count the flights: Use COUNT(*) to count the number of flights for each airport.", "Order the results: Use ORDER BY COUNT(*) ASC to sort the airports by the number of flights in ascending order.", "Limit the results: Use LIMIT 1 to get only the airport with the least flights."], "pred_sql": "SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;", "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "source_tables": ["airports", "flights"]}
{"sample_id": 229, "db_id": "flight_2", "question": "Which airline has most number of flights?", "rationale": ["Identify the relevant table: The 'flights' table contains information about the airlines and their flights.", "Count the number of flights for each airline: Use the COUNT() function to count the number of entries (flights) for each airline.", "Group the results by airline: Use GROUP BY to aggregate the flight counts for each airline.", "Order the results to find the airline with the most flights: Use ORDER BY with DESC to sort the airlines by their flight counts in descending order.", "Limit the results to the top airline: Use LIMIT 1 to get only the airline with the highest number of flights."], "pred_sql": "SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flights", "airlines"]}
{"sample_id": 230, "db_id": "flight_2", "question": "What airline serves the most flights?", "rationale": ["Identify the relevant table: The 'flights' table contains information about the airlines and their flights.", "Count the number of flights for each airline: Use the COUNT() function to count the number of entries (flights) for each airline.", "Group the results by airline: Use GROUP BY to aggregate the flight counts for each airline.", "Order the results by flight count in descending order: Use ORDER BY FlightCount DESC to sort the airlines by the number of flights they operate.", "Limit the results to the top airline: Use LIMIT 1 to get only the airline with the most flights."], "pred_sql": "SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flights", "airlines"]}
{"sample_id": 231, "db_id": "flight_2", "question": "Find the abbreviation and country of the airline that has fewest number of flights?", "rationale": ["Identify the airline with the fewest number of flights.", "To do this, we need to count the number of flights for each airline in the flights table.", "We will group the results by the Airline name and count the number of flights for each.", "Next, we will order the results by the count of flights in ascending order to find the airline with the fewest flights.", "We will limit the results to 1 to get only the airline with the fewest flights.", "Now, we need to retrieve the abbreviation and country of this airline from the airlines table.", "We will join the airlines table with the subquery that gives us the airline with the fewest flights on the Airline name."], "pred_sql": "SELECT a.Abbreviation, a.Country FROM airlines a JOIN (SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount ASC LIMIT 1) f ON a.Airline = f.Airline;", "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "source_tables": ["flights", "airlines"]}
{"sample_id": 232, "db_id": "flight_2", "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "rationale": ["Identify the airline with the fewest flights by counting the number of flights for each airline in the 'flights' table.", "Use a subquery to group the flights by 'Airline' and count them, ordering the results in ascending order to find the airline with the least number of flights.", "Limit the results of the subquery to 1 to get only the airline with the fewest flights.", "Join the result of the subquery with the 'airlines' table to get the abbreviation and country of that airline.", "Select the 'Abbreviation' and 'Country' from the joined tables."], "pred_sql": "SELECT a.Abbreviation, a.Country FROM airlines a JOIN (SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount ASC LIMIT 1) f ON a.Airline = f.Airline;", "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "source_tables": ["flights", "airlines"]}
{"sample_id": 233, "db_id": "flight_2", "question": "What are airlines that have some flight departing from airport 'AHD'?", "rationale": ["Identify the relevant table: The query is about airlines and their flights, so we will use the 'flights' table.", "Determine the condition: We need to find flights that are departing from a specific airport, which is 'AHD'.", "Select the relevant columns: We want the names of the airlines, so we will select the 'Airline' column.", "Use DISTINCT to avoid duplicate airline names in the result.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to filter by the SourceAirport."], "pred_sql": "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD';", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}
{"sample_id": 234, "db_id": "flight_2", "question": "Which airlines have a flight with source airport AHD?", "rationale": ["Identify the relevant table: The query is about airlines and their flights, so we will use the 'flights' table.", "Determine the required columns: We need the 'Airline' column to find out which airlines have flights from a specific source airport.", "Specify the condition: The source airport is given as 'AHD', so we will filter the results based on this condition.", "Use DISTINCT to avoid duplicate airline names in the result, as multiple flights from the same airline could exist."], "pred_sql": "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD';", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}
{"sample_id": 235, "db_id": "flight_2", "question": "What are airlines that have flights arriving at airport 'AHD'?", "rationale": ["Identify the relevant tables: We need information from the 'airlines' and 'flights' tables.", "Determine the relationship: The 'flights' table contains the airline names and the destination airport codes, while the 'airlines' table contains the airline names and their unique identifiers.", "We need to find airlines that have flights arriving at a specific airport, which is 'AHD' in this case.", "To do this, we will join the 'airlines' table with the 'flights' table on the airline name.", "We will filter the results to only include flights where the destination airport code is 'AHD'.", "Finally, we will select distinct airline names to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.DestAirport = 'AHD';", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}
{"sample_id": 236, "db_id": "flight_2", "question": "Which airlines have a flight with destination airport AHD?", "rationale": ["Identify the relevant table: The query is about airlines and their flights, so we will use the 'flights' table.", "Determine the required columns: We need the 'Airline' column to find out which airlines have flights to a specific destination.", "Specify the condition: The destination airport is specified as 'AHD', so we will filter the results based on this condition.", "Use DISTINCT to avoid duplicate airline names in the result, as multiple flights from the same airline could exist."], "pred_sql": "SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD';", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}
{"sample_id": 237, "db_id": "flight_2", "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "rationale": ["Identify the requirement to find airlines with flights from two specific airports: 'APG' and 'CVO'.", "To find airlines that operate flights from both airports, we can use a self-join on the flights table.", "The self-join will allow us to compare two different records in the same table, ensuring that the airline is the same for both records.", "We will select distinct airlines to avoid duplicates in the result.", "The WHERE clause will filter the records to ensure one record is from 'APG' and the other from 'CVO'."], "pred_sql": "SELECT DISTINCT f1.Airline \nFROM flights f1 \nJOIN flights f2 ON f1.Airline = f2.Airline \nWHERE f1.SourceAirport = 'APG' \nAND f2.SourceAirport = 'CVO';", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO'", "source_tables": ["flights", "airlines"]}
{"sample_id": 238, "db_id": "flight_2", "question": "Which airlines have departing flights from both APG and CVO airports?", "rationale": ["Identify the requirement: We need to find airlines that have departing flights from both APG and CVO airports.", "Understand the schema: The 'flights' table contains information about flights, including the airline and source airport.", "To find airlines with flights from both airports, we can use a self-join on the 'flights' table. This allows us to compare two different records for the same airline.", "In the self-join, we will alias the 'flights' table as f1 and f2. We will filter f1 for flights departing from APG and f2 for flights departing from CVO.", "We will select distinct airlines that meet both conditions."], "pred_sql": "SELECT DISTINCT f1.Airline \nFROM flights f1 \nJOIN flights f2 ON f1.Airline = f2.Airline \nWHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO';", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO'", "source_tables": ["flights", "airlines"]}
{"sample_id": 239, "db_id": "flight_2", "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "rationale": ["Identify the main requirement: Find airlines with flights from 'CVO' but not from 'APG'.", "To achieve this, we need to select distinct airlines from the 'flights' table where the source airport is 'CVO'.", "We also need to ensure that these airlines do not have any flights from 'APG'.", "To do this, we can use a subquery that selects distinct airlines from the 'flights' table where the source airport is 'APG'.", "We will join the 'flights' table with the 'airlines' table to get the airline names corresponding to the flight records.", "The final SQL query will select the distinct airline names that meet the criteria."], "pred_sql": "SELECT DISTINCT a.Airline \nFROM flights f \nJOIN airlines a ON f.Airline = a.Airline \nWHERE f.SourceAirport = 'CVO' \nAND f.Airline NOT IN (\n    SELECT DISTINCT f2.Airline \n    FROM flights f2 \n    WHERE f2.SourceAirport = 'APG'\n);", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG'", "source_tables": ["flights", "airlines"]}
{"sample_id": 240, "db_id": "flight_2", "question": "Which airlines have departures from CVO but not from APG airports?", "rationale": ["Identify the main requirement: find airlines that have departures from CVO but not from APG.", "To achieve this, we need to select distinct airlines from the flights table where the SourceAirport is 'CVO'.", "We also need to ensure that these airlines do not appear in another selection of airlines that have departures from 'APG'.", "This requires a subquery that selects distinct airlines from the flights table where the SourceAirport is 'APG'.", "The final SQL query combines these two parts: the main query for CVO and the subquery for APG, using the NOT IN clause to filter out the airlines that operate from APG."], "pred_sql": "SELECT DISTINCT f1.Airline \nFROM flights f1 \nWHERE f1.SourceAirport = 'CVO' \nAND f1.Airline NOT IN ( \n    SELECT DISTINCT f2.Airline \n    FROM flights f2 \n    WHERE f2.SourceAirport = 'APG' \n);", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG'", "source_tables": ["flights", "airlines"]}
{"sample_id": 241, "db_id": "flight_2", "question": "Find all airlines that have at least 10 flights.", "rationale": ["Identify the relevant table: The 'flights' table contains information about airlines and their flights.", "Determine the requirement: We need to find airlines with at least 10 flights.", "Use the GROUP BY clause: This will allow us to group the results by each airline.", "Count the flights: Use the COUNT() function to count the number of flights for each airline.", "Filter the results: Use the HAVING clause to filter out airlines that have fewer than 10 flights."], "pred_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10;", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "source_tables": ["flights", "airlines"]}
{"sample_id": 242, "db_id": "flight_2", "question": "Which airlines have at least 10 flights?", "rationale": ["Identify the relevant table: The 'flights' table contains information about airlines and their flights.", "Determine the required information: We need to find airlines that have at least 10 flights.", "Use the GROUP BY clause: We will group the results by the 'Airline' column to aggregate the flight counts for each airline.", "Count the flights: We will use the COUNT() function to count the number of flights (FlightNo) for each airline.", "Filter the results: We will use the HAVING clause to filter the grouped results to only include airlines with a count of 10 or more flights."], "pred_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10;", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "source_tables": ["flights", "airlines"]}
{"sample_id": 243, "db_id": "flight_2", "question": "Find all airlines that have fewer than 200 flights.", "rationale": ["Identify the relevant table: The 'flights' table contains information about airlines and their flights.", "Determine the requirement: We need to find airlines with fewer than 200 flights.", "Use the COUNT function: To count the number of flights for each airline, we will use COUNT(FlightNo).", "Group the results: We will group the results by the 'Airline' column to aggregate the flight counts for each airline.", "Apply the HAVING clause: To filter the grouped results, we will use HAVING COUNT(FlightNo) < 200 to get only those airlines with fewer than 200 flights."], "pred_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200;", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["flights", "airlines"]}
{"sample_id": 244, "db_id": "flight_2", "question": "Which airlines have less than 200 flights?", "rationale": ["Identify the relevant table: The 'flights' table contains information about airlines and their flights.", "Determine the required information: We need to find airlines with less than 200 flights.", "Use the COUNT function: To count the number of flights for each airline, we will use COUNT(FlightNo).", "Group the results: We will group the results by the 'Airline' column to aggregate the flight counts for each airline.", "Apply the HAVING clause: To filter the grouped results, we will use HAVING COUNT(FlightNo) < 200 to get only those airlines with fewer than 200 flights."], "pred_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200;", "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["flights", "airlines"]}
{"sample_id": 245, "db_id": "flight_2", "question": "What are flight numbers of Airline \"United Airlines\"?", "rationale": ["Identify the relevant table: The 'flights' table contains information about flight numbers and the airlines operating them.", "Determine the specific information needed: The user wants the flight numbers for 'United Airlines'.", "Construct the SQL query: Use a SELECT statement to retrieve the 'FlightNo' from the 'flights' table where the 'Airline' matches 'United Airlines'."], "pred_sql": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';", "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "source_tables": ["flights", "airlines"]}
{"sample_id": 246, "db_id": "flight_2", "question": "Which flight numbers correspond to United Airlines flights?", "rationale": ["Identify the relevant table: The 'flights' table contains information about flight numbers and the airlines operating them.", "Determine the condition: We need to filter the results to only include flights operated by 'United Airlines'.", "Construct the SQL query: Use a SELECT statement to retrieve the 'FlightNo' from the 'flights' table where the 'Airline' matches 'United Airlines'."], "pred_sql": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';", "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "source_tables": ["flights", "airlines"]}
{"sample_id": 247, "db_id": "flight_2", "question": "What are flight numbers of flights departing from Airport \"APG\"?", "rationale": ["Identify the relevant table: The 'flights' table contains information about flight numbers and their source airports.", "Determine the specific information needed: The user wants the flight numbers of flights departing from a specific airport, 'APG'.", "Formulate the SQL query: Use a SELECT statement to retrieve the 'FlightNo' from the 'flights' table where the 'SourceAirport' matches 'APG'."], "pred_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';", "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}
{"sample_id": 248, "db_id": "flight_2", "question": "Give the flight numbers of flights leaving from APG.", "rationale": ["Identify the relevant table: The 'flights' table contains information about flights, including their source and destination airports.", "Determine the required information: The user wants the flight numbers of flights leaving from a specific airport, which is identified by its code 'APG'.", "Construct the SQL query: Use a SELECT statement to retrieve the 'FlightNo' from the 'flights' table where the 'SourceAirport' matches 'APG'."], "pred_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';", "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}
{"sample_id": 249, "db_id": "flight_2", "question": "What are flight numbers of flights arriving at Airport \"APG\"?", "rationale": ["Identify the relevant table: The 'flights' table contains information about flight numbers and their destination airports.", "Determine the condition: We need to find flights arriving at a specific airport, which is identified by its code 'APG'.", "Construct the SQL query: We will select the 'FlightNo' from the 'flights' table where the 'DestAirport' matches 'APG'."], "pred_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG';", "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "source_tables": ["flights"]}
{"sample_id": 250, "db_id": "flight_2", "question": "Give the flight numbers of flights landing at APG.", "rationale": ["Identify the relevant table: The 'flights' table contains information about flight numbers and their destination airports.", "Determine the condition: We need to find flights that land at a specific airport, which is identified by its code 'APG'.", "Construct the SQL query: We will select the 'FlightNo' from the 'flights' table where the 'DestAirport' matches 'APG'."], "pred_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG';", "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "source_tables": ["flights"]}
{"sample_id": 251, "db_id": "flight_2", "question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "rationale": ["Identify the relevant tables: 'flights' for flight numbers and 'airports' for airport codes.", "Determine the relationship between the tables: 'SourceAirport' in 'flights' corresponds to 'AirportCode' in 'airports'.", "To find flights departing from a specific city, first, we need to find the airport code(s) for that city.", "Construct a subquery to select 'AirportCode' from 'airports' where 'City' is 'Aberdeen'.", "Use the result of the subquery to filter the 'flights' table for 'SourceAirport' that matches the airport codes from the subquery.", "Select the 'FlightNo' from the 'flights' table where the 'SourceAirport' matches the airport codes for 'Aberdeen'."], "pred_sql": "SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');", "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 252, "db_id": "flight_2", "question": "Give the flight numbers of flights leaving from Aberdeen.", "rationale": ["Identify the relevant table for flight information, which is the 'flights' table.", "Determine the necessary column to retrieve, which is 'FlightNo' for the flight numbers.", "To find flights leaving from Aberdeen, we need to identify the airport code for Aberdeen.", "Use a subquery to select the 'AirportCode' from the 'airports' table where the 'AirportName' is 'Aberdeen'.", "Combine the results to select 'FlightNo' from the 'flights' table where the 'SourceAirport' matches the airport code obtained from the subquery."], "pred_sql": "SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');", "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 253, "db_id": "flight_2", "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "rationale": ["Identify the relevant tables: 'flights' for flight numbers and 'airports' for city information.", "Determine the relationship between the tables: 'flights' references 'airports' through the DestAirport and AirportCode columns.", "First, find the AirportCode(s) for the city 'Aberdeen' from the 'airports' table.", "Use the retrieved AirportCode(s) to filter the 'flights' table for the corresponding FlightNo(s).", "Construct the SQL query to select FlightNo from flights where DestAirport matches the AirportCode(s) for Aberdeen."], "pred_sql": "SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');", "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 254, "db_id": "flight_2", "question": "Give the flight numbers of flights arriving in Aberdeen.", "rationale": ["Identify the relevant table: The 'flights' table contains the flight numbers and destination airports.", "Determine the condition: We need to find flights arriving in Aberdeen, so we need to filter based on the destination airport.", "Find the airport code for Aberdeen: This requires a subquery to the 'airports' table to get the AirportCode where the AirportName is 'Aberdeen'.", "Combine the information: Use the result of the subquery to filter the 'flights' table for the corresponding FlightNo."], "pred_sql": "SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen')", "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}
{"sample_id": 255, "db_id": "flight_2", "question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "rationale": ["Identify the tables involved: We need to count flights, so we will use the 'flights' table. We also need to filter by city, which requires the 'airports' table.", "Determine the relationship between the tables: The 'flights' table has a foreign key relationship with the 'airports' table through the 'DestAirport' and 'AirportCode' columns.", "Formulate the query to count flights: We will use the COUNT() function to count the number of flights that meet our criteria.", "Specify the criteria for filtering: We need to filter the results to include only flights landing in the cities of Aberdeen or Abilene. This will be done using a WHERE clause with the IN operator.", "Join the tables: We will perform an INNER JOIN between the 'flights' and 'airports' tables on the condition that the destination airport code matches the airport code in the airports table."], "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');", "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'", "source_tables": ["airports", "flights"]}
{"sample_id": 256, "db_id": "flight_2", "question": "How many flights land in Aberdeen or Abilene?", "rationale": ["Identify the relevant tables: We need to use the 'flights' table to count the flights and the 'airports' table to find the airport codes for Aberdeen and Abilene.", "Determine the criteria for counting flights: We want to count flights that land in either Aberdeen or Abilene.", "Find the airport codes for Aberdeen and Abilene: This requires a subquery to select the AirportCode from the airports table where the AirportName matches either 'Aberdeen' or 'Abilene'.", "Construct the main query: Use the COUNT function to count the number of flights in the flights table where the DestAirport matches the airport codes obtained from the subquery."], "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE AirportName IN ('Aberdeen', 'Abilene'));", "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'", "source_tables": ["airports", "flights"]}
{"sample_id": 257, "db_id": "flight_2", "question": "Find the name of airports which do not have any flight in and out.", "rationale": ["Identify the airports from the 'airports' table.", "Determine which airports have flights in and out by checking the 'flights' table for both SourceAirport and DestAirport.", "Use a subquery to find all airports that are either a source or a destination for flights.", "Use the UNION operator to combine the results of the two subqueries (one for SourceAirport and one for DestAirport).", "Select the AirportName from the 'airports' table where the AirportCode is not in the list of airports that have flights."], "pred_sql": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);", "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "source_tables": ["airports", "flights"]}
{"sample_id": 258, "db_id": "flight_2", "question": "Which airports do not have departing or arriving flights?", "rationale": ["Identify the airports from the 'airports' table.", "Use LEFT JOIN to connect the 'airports' table with the 'flights' table twice: once for departing flights (SourceAirport) and once for arriving flights (DestAirport).", "Filter the results to find airports where there are no matching flights for both departing and arriving (i.e., where FlightNo is NULL for both joins).", "Select the relevant columns: AirportCode and AirportName from the airports table."], "pred_sql": "SELECT a.AirportCode, a.AirportName FROM airports a LEFT JOIN flights f1 ON a.AirportCode = f1.SourceAirport LEFT JOIN flights f2 ON a.AirportCode = f2.DestAirport WHERE f1.FlightNo IS NULL AND f2.FlightNo IS NULL;", "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "source_tables": ["airports", "flights"]}
{"sample_id": 259, "db_id": "employee_hire_evaluation", "question": "How many employees are there?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "To find out how many employees there are, we need to count the number of records in the 'employee' table.", "Use the COUNT() function to count the total number of employees.", "Construct the SQL query to select the count from the employee table."], "pred_sql": "SELECT COUNT(*) AS total_employees FROM employee;", "gold_sql": "SELECT count(*) FROM employee", "source_tables": ["employee"]}
{"sample_id": 260, "db_id": "employee_hire_evaluation", "question": "Count the number of employees", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "To count the number of employees, we will use the COUNT() function in SQL.", "The SQL query will select the count of all records from the 'employee' table.", "The final SQL query will be 'SELECT COUNT(*) AS number_of_employees FROM employee;' to get the total number of employees."], "pred_sql": "SELECT COUNT(*) AS number_of_employees FROM employee;", "gold_sql": "SELECT count(*) FROM employee", "source_tables": ["employee"]}
{"sample_id": 261, "db_id": "employee_hire_evaluation", "question": "Sort employee names by their age in ascending order.", "rationale": ["Identify the table that contains employee names and ages, which is the 'employee' table.", "Select the 'Name' column to retrieve employee names.", "Use the 'ORDER BY' clause to sort the results by the 'Age' column in ascending order."], "pred_sql": "SELECT Name FROM employee ORDER BY Age ASC;", "gold_sql": "SELECT name FROM employee ORDER BY age", "source_tables": ["employee"]}
{"sample_id": 262, "db_id": "employee_hire_evaluation", "question": "List the names of employees and sort in ascending order of age.", "rationale": ["Identify the table that contains employee names, which is the 'employee' table.", "Select the 'Name' column from the 'employee' table to get the names of the employees.", "To sort the results by age, we need to use the 'Age' column from the same table.", "Use the ORDER BY clause to sort the results in ascending order based on the 'Age' column."], "pred_sql": "SELECT Name FROM employee ORDER BY Age ASC;", "gold_sql": "SELECT name FROM employee ORDER BY age", "source_tables": ["employee"]}
{"sample_id": 263, "db_id": "employee_hire_evaluation", "question": "What is the number of employees from each city?", "rationale": ["Identify the table that contains the relevant data: the 'employee' table holds information about employees, including their city.", "Determine the required output: we need the number of employees from each city, which suggests using a COUNT function to aggregate employee counts by city.", "Use the GROUP BY clause to group the results by the 'City' column, allowing us to count the number of employees in each city.", "Construct the SQL query to select the 'City' and the count of 'Employee_ID' as 'Number_of_Employees', and group the results by 'City'."], "pred_sql": "SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City;", "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "source_tables": ["employee"]}
{"sample_id": 264, "db_id": "employee_hire_evaluation", "question": "Count the number of employees for each city.", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the relevant columns needed for the query: 'City' to group the results and 'Employee_ID' to count the number of employees.", "Use the COUNT() function to count the number of employees for each city.", "Group the results by 'City' to get the count for each distinct city."], "pred_sql": "SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City;", "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "source_tables": ["employee"]}
{"sample_id": 265, "db_id": "employee_hire_evaluation", "question": "Which cities do more than one employee under age 30 come from?", "rationale": ["Identify the relevant table: The 'employee' table contains the necessary information about employees, including their age and city.", "Filter employees under age 30: Use a WHERE clause to select employees whose age is less than 30.", "Group by city: Use GROUP BY to aggregate the results based on the city.", "Count employees in each city: Use COUNT(Employee_ID) to count the number of employees in each city.", "Filter cities with more than one employee: Use HAVING COUNT(Employee_ID) > 1 to only include cities that have more than one employee."], "pred_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;", "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "source_tables": ["employee"]}
{"sample_id": 266, "db_id": "employee_hire_evaluation", "question": "Find the cities that have more than one employee under age 30.", "rationale": ["Identify the relevant table: The 'employee' table contains the necessary information about employees, including their age and city.", "Filter employees under age 30: We need to select employees whose age is less than 30.", "Group by city: To find cities with multiple employees, we will group the results by the 'City' column.", "Count employees in each city: We will use the COUNT function to count the number of employees in each city.", "Filter cities with more than one employee: We will use the HAVING clause to filter groups (cities) that have a count greater than 1."], "pred_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;", "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "source_tables": ["employee"]}
{"sample_id": 267, "db_id": "employee_hire_evaluation", "question": "Find the number of shops in each location.", "rationale": ["Identify the table that contains the relevant data: the 'shop' table.", "Determine the columns needed: 'Location' for grouping and counting shops.", "Use the COUNT() function to count the number of shops in each location.", "Group the results by 'Location' to get the count for each distinct location."], "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;", "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "source_tables": ["shop"]}
{"sample_id": 268, "db_id": "employee_hire_evaluation", "question": "How many shops are there in each location?", "rationale": ["Identify the table that contains the relevant data: the 'shop' table.", "Determine the columns needed: 'Location' for grouping and counting shops.", "Use the COUNT() function to count the number of shops in each location.", "Group the results by 'Location' to get the count for each distinct location."], "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;", "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "source_tables": ["shop"]}
{"sample_id": 269, "db_id": "employee_hire_evaluation", "question": "Find the manager name and district of the shop whose number of products is the largest.", "rationale": ["Identify the relevant table: The query requires information about shops, specifically the manager name and district, which are found in the 'shop' table.", "Determine the condition for the shop: We need to find the shop with the largest number of products. This requires using an aggregate function to find the maximum value of 'Number_products' in the 'shop' table.", "Construct a subquery: Create a subquery that selects the maximum number of products from the 'shop' table.", "Combine the subquery with the main query: Use the result of the subquery to filter the main query, selecting the 'Manager_name' and 'District' from the 'shop' table where 'Number_products' equals the maximum value found in the subquery."], "pred_sql": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);", "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "source_tables": ["shop"]}
{"sample_id": 270, "db_id": "employee_hire_evaluation", "question": "What are the manager name and district of the shop that sells the largest number of products?", "rationale": ["Identify the relevant table: The query requires information about the shop, specifically the manager's name and the district.", "Determine the columns needed: We need 'Manager_name' and 'District' from the 'shop' table.", "Find the shop with the largest number of products: This requires a subquery to find the maximum value of 'Number_products' in the 'shop' table.", "Use the result of the subquery to filter the main query: We will select the 'Manager_name' and 'District' from the 'shop' table where 'Number_products' matches the maximum value found."], "pred_sql": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);", "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "source_tables": ["shop"]}
{"sample_id": 271, "db_id": "employee_hire_evaluation", "question": "find the minimum and maximum number of products of all stores.", "rationale": ["Identify the table that contains the relevant data: the 'shop' table has the 'Number_products' column.", "To find the minimum and maximum number of products, we will use the aggregate functions MIN() and MAX().", "We will select both the minimum and maximum values from the 'Number_products' column in the 'shop' table.", "The final SQL query will select the minimum and maximum number of products from the shop table."], "pred_sql": "SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;", "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "source_tables": ["shop"]}
{"sample_id": 272, "db_id": "employee_hire_evaluation", "question": "What are the minimum and maximum number of products across all the shops?", "rationale": ["Identify the table that contains the relevant data, which is the 'shop' table.", "Determine the columns needed to find the minimum and maximum number of products, which is 'Number_products'.", "Use the aggregate functions MIN() and MAX() to calculate the minimum and maximum values of 'Number_products'.", "Construct the SQL query to select the minimum and maximum number of products from the 'shop' table."], "pred_sql": "SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;", "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "source_tables": ["shop"]}
{"sample_id": 273, "db_id": "employee_hire_evaluation", "question": "Return the name, location and district of all shops in descending order of number of products.", "rationale": ["Identify the required columns: Name, Location, and District from the shop table.", "Determine the table to query: shop.", "Specify the order of results: descending order based on the Number_products column.", "Construct the SQL SELECT statement to retrieve the specified columns and apply the ORDER BY clause."], "pred_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;", "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "source_tables": ["shop"]}
{"sample_id": 274, "db_id": "employee_hire_evaluation", "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "rationale": ["Identify the table to query: The request is about shops, so we will use the 'shop' table.", "Determine the columns to select: The user wants the 'Name', 'Location', and 'District' of each shop.", "Specify the sorting requirement: The shops should be sorted by 'Number_products' in descending order.", "Construct the SQL query: Use SELECT to get the specified columns, FROM to indicate the 'shop' table, and ORDER BY to sort by 'Number_products' in descending order."], "pred_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;", "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "source_tables": ["shop"]}
{"sample_id": 275, "db_id": "employee_hire_evaluation", "question": "Find the names of stores whose number products is more than the average number of products.", "rationale": ["Identify the table that contains the relevant data: the 'shop' table contains information about stores and their number of products.", "Determine the condition: we need to find stores where the number of products is greater than the average number of products across all stores.", "To find the average number of products, we can use the AVG() function on the 'Number_products' column in the 'shop' table.", "We will use a subquery to calculate the average number of products and compare it with the 'Number_products' of each store in the main query.", "Finally, we select the 'Name' of the stores that meet the condition."], "pred_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "source_tables": ["shop"]}
{"sample_id": 276, "db_id": "employee_hire_evaluation", "question": "Which shops' number products is above the average? Give me the shop names.", "rationale": ["Identify the table that contains the relevant data: the 'shop' table has the 'Number_products' and 'Name' columns.", "Calculate the average number of products across all shops using the AVG() function in a subquery.", "Select the names of the shops where the number of products is greater than the average calculated in the subquery."], "pred_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "source_tables": ["shop"]}
{"sample_id": 277, "db_id": "employee_hire_evaluation", "question": "find the name of employee who was awarded the most times in the evaluation.", "rationale": ["Identify the relevant tables: We need to look at the 'employee' table for employee names and the 'evaluation' table to find out how many times each employee was awarded.", "Join the 'employee' table with the 'evaluation' table on the Employee_ID to link employees with their evaluations.", "Group the results by Employee_ID to count the number of awards each employee has received.", "Order the results in descending order based on the count of awards to find the employee with the most awards.", "Limit the results to 1 to get only the employee who was awarded the most times."], "pred_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID\nORDER BY COUNT(ev.Year_awarded) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "evaluation"]}
{"sample_id": 278, "db_id": "employee_hire_evaluation", "question": "Which employee received the most awards in evaluations? Give me the employee name.", "rationale": ["Identify the relevant tables: employee and evaluation.", "We need to find the employee who received the most awards, which corresponds to counting the number of evaluations for each employee.", "Join the employee table with the evaluation table on Employee_ID to link employees with their evaluations.", "Group the results by Employee_ID to aggregate the count of evaluations for each employee.", "Order the results by the count of evaluations in descending order to get the employee with the most awards at the top.", "Limit the results to 1 to get only the top employee."], "pred_sql": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1;", "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "evaluation"]}
{"sample_id": 279, "db_id": "employee_hire_evaluation", "question": "Find the name of the employee who got the highest one time bonus.", "rationale": ["Identify the relevant tables: 'evaluation' for bonus information and 'employee' for employee names.", "We need to find the employee with the highest one-time bonus, so we will join the 'evaluation' table with the 'employee' table on 'Employee_ID'.", "We will select the 'Name' from the 'employee' table.", "To find the highest bonus, we will order the results by 'Bonus' in descending order.", "Finally, we will limit the results to 1 to get only the employee with the highest bonus."], "pred_sql": "SELECT e.Name FROM evaluation ev JOIN employee e ON ev.Employee_ID = e.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;", "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "source_tables": ["employee", "evaluation"]}
{"sample_id": 280, "db_id": "employee_hire_evaluation", "question": "Which employee received the biggest bonus? Give me the employee name.", "rationale": ["Identify the relevant tables: 'evaluation' for bonuses and 'employee' for employee names.", "We need to find the employee with the biggest bonus, so we will sort the evaluation records by the 'Bonus' column in descending order.", "To get the employee's name, we will join the 'evaluation' table with the 'employee' table on 'Employee_ID'.", "Finally, we will limit the results to 1 to get only the employee with the highest bonus."], "pred_sql": "SELECT e.Name FROM evaluation ev JOIN employee e ON ev.Employee_ID = e.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;", "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "source_tables": ["employee", "evaluation"]}
{"sample_id": 281, "db_id": "employee_hire_evaluation", "question": "Find the names of employees who never won any award in the evaluation.", "rationale": ["Identify the main requirement: We need to find the names of employees who have never won any awards in the evaluation.", "To determine this, we need to look at the 'employee' table for employee names and the 'evaluation' table to find employees who have received awards.", "We can use a subquery to select all Employee_IDs from the 'evaluation' table, which represents employees who have won awards.", "Then, we can use the NOT IN clause to filter out those Employee_IDs from the 'employee' table, thus getting the employees who have never won any awards.", "Finally, we select the 'Name' column from the 'employee' table for the filtered results."], "pred_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "source_tables": ["employee", "evaluation"]}
{"sample_id": 282, "db_id": "employee_hire_evaluation", "question": "What are the names of the employees who never received any evaluation?", "rationale": ["Identify the table that contains employee names, which is the 'employee' table.", "Determine the criteria for selecting employees: those who have never received an evaluation.", "To find employees who have never received an evaluation, we need to check which Employee_IDs are not present in the 'evaluation' table.", "Use a subquery to select all Employee_IDs from the 'evaluation' table.", "Use the NOT IN clause to filter out those Employee_IDs from the 'employee' table, thus retrieving the names of employees who have not been evaluated."], "pred_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "source_tables": ["employee", "evaluation"]}
{"sample_id": 283, "db_id": "employee_hire_evaluation", "question": "What is the name of the shop that is hiring the largest number of employees?", "rationale": ["Identify the relevant tables: We need to find information from the 'shop' and 'hiring' tables.", "Determine the relationship: The 'hiring' table contains the 'Shop_ID' which links to the 'shop' table.", "Count the number of employees hired per shop: We can use COUNT(hiring.Employee_ID) to count the number of employees for each shop.", "Group the results by shop: We will use GROUP BY shop.Shop_ID to aggregate the counts for each shop.", "Order the results: To find the shop with the largest number of employees, we will order the results in descending order using ORDER BY COUNT(hiring.Employee_ID) DESC.", "Limit the results to one: We only need the shop with the largest number of employees, so we will use LIMIT 1."], "pred_sql": "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;", "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["hiring", "shop"]}
{"sample_id": 284, "db_id": "employee_hire_evaluation", "question": "Which shop has the most employees? Give me the shop name.", "rationale": ["Identify the relevant tables: We need to find the shop with the most employees, so we will use the 'shop' and 'hiring' tables.", "Join the tables: We will join the 'shop' table with the 'hiring' table on the 'Shop_ID' to associate each shop with its employees.", "Group by shop: We will group the results by 'shop.Shop_ID' to count the number of employees per shop.", "Count employees: Use COUNT(hiring.Employee_ID) to count the number of employees for each shop.", "Order the results: We will order the results in descending order based on the count of employees to get the shop with the most employees at the top.", "Limit the results: Finally, we will limit the results to 1 to get only the shop with the most employees."], "pred_sql": "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;", "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["hiring", "shop"]}
{"sample_id": 285, "db_id": "employee_hire_evaluation", "question": "Find the name of the shops that do not hire any employee.", "rationale": ["We need to find shops that do not hire any employees.", "To achieve this, we can use a LEFT JOIN between the 'shop' table and the 'hiring' table on the 'Shop_ID' column.", "The LEFT JOIN will include all records from the 'shop' table and the matching records from the 'hiring' table. If there is no match, the result is NULL on the 'hiring' side.", "We can filter the results by checking where 'hiring.Employee_ID' is NULL, which indicates that there are no employees hired for that shop.", "Finally, we select the 'Name' of the shops from the 'shop' table."], "pred_sql": "SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;", "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "source_tables": ["hiring", "shop"]}
{"sample_id": 286, "db_id": "employee_hire_evaluation", "question": "Which shops run with no employees? Find the shop names", "rationale": ["Identify the tables involved: We need to find information from the 'shop' table and check for employees in the 'hiring' table.", "We want to find shops that have no employees, which means we need to look for shops that do not have any corresponding entries in the 'hiring' table.", "To achieve this, we can use a LEFT JOIN between the 'shop' table and the 'hiring' table on the Shop_ID column.", "After performing the LEFT JOIN, we can filter the results where the Employee_ID from the 'hiring' table is NULL, indicating that there are no employees hired for that shop.", "Finally, we select the 'Name' column from the 'shop' table to get the names of the shops that have no employees."], "pred_sql": "SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;", "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "source_tables": ["hiring", "shop"]}
{"sample_id": 287, "db_id": "employee_hire_evaluation", "question": "Find the number of employees hired in each shop; show the shop name as well.", "rationale": ["Identify the tables involved: 'hiring' for employee hiring data and 'shop' for shop details.", "We need to count the number of employees hired in each shop, which requires a count of 'Employee_ID' from the 'hiring' table.", "To get the shop name, we need to join the 'hiring' table with the 'shop' table on 'Shop_ID'.", "Use the COUNT() function to count the number of employees for each shop.", "Group the results by shop name to get the count for each individual shop."], "pred_sql": "SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees\nFROM hiring\nJOIN shop ON hiring.Shop_ID = shop.Shop_ID\nGROUP BY shop.Name;", "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "source_tables": ["hiring", "shop"]}
{"sample_id": 288, "db_id": "employee_hire_evaluation", "question": "For each shop, return the number of employees working there and the name of the shop.", "rationale": ["Identify the tables involved: We need data from the 'shop' table for shop names and the 'hiring' table to count employees.", "We need to count the number of employees for each shop, which requires a join between the 'shop' and 'hiring' tables based on the Shop_ID.", "Use a LEFT JOIN to ensure we include shops even if they have no employees.", "Use COUNT(hiring.Employee_ID) to count the number of employees associated with each shop.", "Group the results by shop.Shop_ID to get the count of employees for each shop."], "pred_sql": "SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees\nFROM shop\nLEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nGROUP BY shop.Shop_ID;", "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "source_tables": ["hiring", "shop"]}
{"sample_id": 289, "db_id": "employee_hire_evaluation", "question": "What is total bonus given in all evaluations?", "rationale": ["Identify the relevant table: The 'evaluation' table contains the 'Bonus' column which we need to sum up.", "Determine the operation: We need to calculate the total bonus given in all evaluations, which requires the SUM function.", "Construct the SQL query: Use SELECT to retrieve the sum of the 'Bonus' column from the 'evaluation' table."], "pred_sql": "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;", "gold_sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}
{"sample_id": 290, "db_id": "employee_hire_evaluation", "question": "Find the total amount of bonus given in all the evaluations.", "rationale": ["Identify the relevant table: The 'evaluation' table contains the 'Bonus' column which holds the bonus amounts awarded to employees.", "Determine the required operation: We need to calculate the total amount of bonuses given, which involves summing up the values in the 'Bonus' column.", "Construct the SQL query: Use the SUM() function to aggregate the total bonuses from the 'evaluation' table."], "pred_sql": "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;", "gold_sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}
{"sample_id": 291, "db_id": "employee_hire_evaluation", "question": "Give me all the information about hiring.", "rationale": ["The user wants to retrieve all information about hiring.", "To get all information from a table, we use the SELECT statement with an asterisk (*) to select all columns.", "The table we need to query is 'hiring'.", "Thus, the SQL query will be 'SELECT * FROM hiring;'"], "pred_sql": "SELECT * FROM hiring;", "gold_sql": "SELECT * FROM hiring", "source_tables": ["hiring"]}
{"sample_id": 292, "db_id": "employee_hire_evaluation", "question": "What is all the information about hiring?", "rationale": ["The user wants to retrieve all information about hiring.", "The relevant table for hiring information is the 'hiring' table.", "To get all information from a table, we use the SELECT statement with an asterisk (*) to denote all columns.", "Thus, the SQL query will be 'SELECT * FROM hiring;'"], "pred_sql": "SELECT * FROM hiring;", "gold_sql": "SELECT * FROM hiring", "source_tables": ["hiring"]}
{"sample_id": 293, "db_id": "employee_hire_evaluation", "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "rationale": ["Identify the requirement: We need to find districts that have both types of shops - those with less than 3000 products and those with more than 10000 products.", "To achieve this, we will need to join the 'shop' table with itself. This allows us to compare the number of products in different shops within the same district.", "We will use an alias for the first instance of the 'shop' table (s1) and a different alias for the second instance (s2).", "In the WHERE clause, we will specify the conditions: s1.Number_products < 3000 for the first type of shop and s2.Number_products > 10000 for the second type of shop.", "We will also ensure that both shops belong to the same district by checking that s1.District = s2.District.", "Finally, we will select distinct districts to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT s1.District\nFROM shop s1\nJOIN shop s2 ON s1.District = s2.District\nWHERE s1.Number_products < 3000 AND s2.Number_products > 10000;", "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "source_tables": ["shop"]}
{"sample_id": 294, "db_id": "employee_hire_evaluation", "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "rationale": ["Identify the requirement to find districts with shops selling less than 3000 products and more than 10000 products.", "To achieve this, we need to compare two instances of the shop table, hence a self-join is necessary.", "The self-join will allow us to match shops in the same district while applying different conditions on the number of products.", "We will select distinct districts from the result to avoid duplicates.", "The final SQL query will include a SELECT statement to get the distinct districts, a JOIN clause to join the shop table with itself, and a WHERE clause to filter the shops based on the number of products."], "pred_sql": "SELECT DISTINCT s1.District\nFROM shop s1\nJOIN shop s2 ON s1.District = s2.District\nWHERE s1.Number_products < 3000 AND s2.Number_products > 10000;", "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "source_tables": ["shop"]}
{"sample_id": 295, "db_id": "employee_hire_evaluation", "question": "How many different store locations are there?", "rationale": ["Identify the table that contains location information, which is the 'shop' table.", "To find the number of different store locations, we need to count distinct entries in the 'Location' column.", "Use the COUNT function along with DISTINCT to ensure we only count unique locations.", "Construct the SQL query to select the count of distinct locations from the 'shop' table."], "pred_sql": "SELECT COUNT(DISTINCT Location) AS Different_Locations FROM shop;", "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop", "source_tables": ["shop"]}
{"sample_id": 296, "db_id": "employee_hire_evaluation", "question": "Count the number of distinct store locations.", "rationale": ["Identify the table that contains the location information, which is the 'shop' table.", "To count distinct locations, we need to use the COUNT function along with DISTINCT.", "The SQL query will select the distinct 'Location' from the 'shop' table and count them.", "The final SQL query will be: SELECT COUNT(DISTINCT Location) AS distinct_store_locations FROM shop;"], "pred_sql": "SELECT COUNT(DISTINCT Location) AS distinct_store_locations FROM shop;", "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop", "source_tables": ["shop"]}
{"sample_id": 297, "db_id": "cre_Doc_Template_Mgt", "question": "How many documents do we have?", "rationale": ["Identify the table that contains the information about documents, which is the 'Documents' table.", "To find out how many documents there are, we need to count the number of entries in the 'Documents' table.", "Use the COUNT() function to count the total number of rows in the 'Documents' table.", "Select the count with an alias 'Document_Count' for clarity."], "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents;", "gold_sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}
{"sample_id": 298, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of documents.", "rationale": ["Identify the goal of the query, which is to count the number of documents.", "Determine the relevant table for the count operation, which is the 'Documents' table.", "Use the COUNT() function to count all entries in the 'Documents' table.", "Construct the SQL query to select the count from the 'Documents' table."], "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents;", "gold_sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}
{"sample_id": 299, "db_id": "cre_Doc_Template_Mgt", "question": "List document IDs, document names, and document descriptions for all documents.", "rationale": ["Identify the required information: document IDs, document names, and document descriptions.", "Determine the table that contains this information, which is the 'Documents' table.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Documents' table."], "pred_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;", "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "source_tables": ["documents"]}
{"sample_id": 300, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids, names, and descriptions for all documents?", "rationale": ["Identify the table that contains the required information: The 'Documents' table contains the 'Document_ID', 'Document_Name', and 'Document_Description'.", "Formulate the SQL SELECT statement to retrieve the specified columns from the 'Documents' table.", "Ensure to select all records by not applying any WHERE clause."], "pred_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;", "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "source_tables": ["documents"]}
{"sample_id": 301, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document name and template id for document with description with the letter 'w' in it?", "rationale": ["Identify the relevant table: The query is asking for information about documents, so we will focus on the 'Documents' table.", "Determine the required columns: The user wants the 'Document_Name' and 'Template_ID' from the 'Documents' table.", "Filter the results: The user specifies that the 'Document_Description' must contain the letter 'w'. This requires a WHERE clause with a LIKE condition to search for 'w' in the 'Document_Description'.", "Construct the SQL query: Combine the selected columns, the table name, and the filtering condition into a complete SQL query."], "pred_sql": "SELECT Documents.Document_Name, Documents.Template_ID \nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%';", "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE '%w%'", "source_tables": ["documents"]}
{"sample_id": 302, "db_id": "cre_Doc_Template_Mgt", "question": "Return the names and template ids for documents that contain the letter w in their description.", "rationale": ["Identify the table that contains the required information: The 'Documents' table contains 'Document_Name' and 'Template_ID'.", "Determine the condition for filtering: We need to find documents where the 'Document_Description' contains the letter 'w'.", "Use the SQL 'LIKE' operator with wildcards to search for the letter 'w' in the 'Document_Description'.", "Construct the SELECT statement to retrieve 'Document_Name' and 'Template_ID' from the 'Documents' table with the specified condition."], "pred_sql": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';", "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE '%w%'", "source_tables": ["documents"]}
{"sample_id": 303, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document id, template id and description for document named \"Robbin CV\"?", "rationale": ["Identify the relevant table: The query is asking for information related to documents, so we will use the 'Documents' table.", "Determine the required columns: The user wants the 'Document_ID', 'Template_ID', and 'Document_Description'.", "Formulate the SQL SELECT statement: We will select the identified columns from the 'Documents' table.", "Add the WHERE clause: We need to filter the results to only include the document with the name 'Robbin CV'.", "Combine all parts to form the complete SQL query."], "pred_sql": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';", "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Robbin CV'", "source_tables": ["documents"]}
{"sample_id": 304, "db_id": "cre_Doc_Template_Mgt", "question": "Return the document id, template id, and description for the document with the name Robbin CV.", "rationale": ["Identify the table that contains the required information: The 'Documents' table contains the 'Document_ID', 'Template_ID', and 'Document_Description'.", "Determine the specific document to retrieve: The user wants the document with the name 'Robbin CV'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Documents' table where the 'Document_Name' matches 'Robbin CV'."], "pred_sql": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';", "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Robbin CV'", "source_tables": ["documents"]}
{"sample_id": 305, "db_id": "cre_Doc_Template_Mgt", "question": "How many different templates do all document use?", "rationale": ["Identify the goal: We need to find out how many different templates are used by all documents.", "Understand the schema: The relevant table for this query is the 'Documents' table, which has a 'Template_ID' column that links to the 'Templates' table.", "To find the number of different templates, we can use the COUNT function along with DISTINCT to ensure we only count unique Template_IDs.", "Construct the SQL query: We will select the count of distinct Template_IDs from the Documents table."], "pred_sql": "SELECT COUNT(DISTINCT Template_ID) AS Different_Template_Count FROM Documents;", "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents", "source_tables": ["documents"]}
{"sample_id": 306, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of different templates used for documents.", "rationale": ["Identify the goal: We need to count the number of different templates used for documents.", "Understand the relationships: The Templates table contains the templates, and the Documents table links to these templates via Template_ID.", "To find the count of different templates used in documents, we need to select distinct Template_IDs from the Documents table.", "We can then count these distinct Template_IDs to get the total number of different templates used.", "The SQL query will involve a subquery to first get the distinct Template_IDs from the Documents table, and then count them in the outer query."], "pred_sql": "SELECT COUNT(DISTINCT Template_ID) AS Different_Template_Count FROM Templates WHERE Template_ID IN (SELECT DISTINCT Template_ID FROM Documents);", "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents", "source_tables": ["documents"]}
{"sample_id": 307, "db_id": "cre_Doc_Template_Mgt", "question": "How many documents are using the template with type code 'PPT'?", "rationale": ["Identify the relevant tables: We need to count documents, so we will use the 'Documents' table and join it with the 'Templates' table to filter by template type.", "Determine the relationship: The 'Documents' table has a foreign key 'Template_ID' that links to the 'Templates' table, which contains the 'Template_Type_Code'.", "Formulate the count query: We will use the COUNT function to count distinct Document_IDs from the 'Documents' table.", "Add the join condition: We will join 'Documents' with 'Templates' on 'Documents.Template_ID = Templates.Template_ID'.", "Add the filter condition: We will filter the results to only include templates with the type code 'PPT' using the WHERE clause."], "pred_sql": "SELECT COUNT(DISTINCT Documents.Document_ID) AS Document_Count\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'PPT';", "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "source_tables": ["templates", "documents"]}
{"sample_id": 308, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of documents that use the PPT template type.", "rationale": ["Identify the tables involved: We need to count documents, so we will use the Documents table. We also need to join with the Templates table to filter by template type, and with the Ref_Template_Types table to get the description of the template type.", "Determine the relationships: The Documents table has a foreign key relationship with the Templates table through Template_ID. The Templates table has a foreign key relationship with the Ref_Template_Types table through Template_Type_Code.", "Formulate the JOINs: We will perform INNER JOINs between Documents and Templates, and between Templates and Ref_Template_Types to access the necessary fields for filtering.", "Specify the filtering condition: We need to filter the results to only include documents that use the 'PPT' template type. This will be done by checking the Template_Type_Description in the Ref_Template_Types table.", "Count the documents: We will use the COUNT function to count the distinct Document_IDs from the Documents table that meet the criteria."], "pred_sql": "SELECT COUNT(DISTINCT Documents.Document_ID) AS Document_Count\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'PPT';", "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "source_tables": ["templates", "documents"]}
{"sample_id": 309, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template ids and number of documents using each template.", "rationale": ["Identify the tables involved: Templates and Documents.", "We need to retrieve the Template_ID from the Templates table.", "We also need to count the number of documents associated with each template, which requires joining the Documents table.", "Use a LEFT JOIN to include all templates even if they have no associated documents.", "Group the results by Template_ID to get the count of documents for each template."], "pred_sql": "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID;", "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "source_tables": ["documents"]}
{"sample_id": 310, "db_id": "cre_Doc_Template_Mgt", "question": "What are all different template ids used for documents, and how many times were each of them used?", "rationale": ["Identify the relevant tables: Templates and Documents are needed to find template IDs and their usage.", "Determine the relationship: Documents are linked to Templates through the Template_ID.", "Select the required fields: We need the Template_ID from the Templates table and a count of how many times each Template_ID appears in the Documents table.", "Use COUNT() function to count the occurrences of each Template_ID in the Documents table.", "Group the results by Template_ID to get the count for each unique Template_ID."], "pred_sql": "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID;", "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "source_tables": ["documents"]}
{"sample_id": 311, "db_id": "cre_Doc_Template_Mgt", "question": "What is the id and type code for the template used by the most documents?", "rationale": ["Identify the relevant tables: Templates and Documents are needed to find the template used by the most documents.", "Join the Templates table with the Documents table on the Template_ID to associate templates with their documents.", "Group the results by Template_ID and Template_Type_Code to aggregate the count of documents for each template.", "Count the number of documents associated with each template using COUNT(Documents.Document_ID).", "Order the results in descending order based on the count of documents to find the template with the most documents.", "Limit the results to 1 to get only the top template used by the most documents."], "pred_sql": "SELECT Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID, Templates.Template_Type_Code\nORDER BY COUNT(Documents.Document_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}
{"sample_id": 312, "db_id": "cre_Doc_Template_Mgt", "question": "Return the id and type code of the template that is used for the greatest number of documents.", "rationale": ["We need to find the template that is used for the greatest number of documents.", "To do this, we will join the Templates table with the Documents table on the Template_ID column.", "Next, we will group the results by Template_ID and Template_Type_Code to count the number of documents associated with each template.", "We will use the COUNT function to count the number of Document_IDs for each template.", "Finally, we will order the results in descending order based on the count of documents and limit the result to 1 to get the template with the greatest number of documents."], "pred_sql": "SELECT Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID, Templates.Template_Type_Code\nORDER BY COUNT(Documents.Document_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}
{"sample_id": 313, "db_id": "cre_Doc_Template_Mgt", "question": "Show ids for all templates that are used by more than one document.", "rationale": ["Identify the relevant tables: Templates and Documents.", "Determine the relationship between Templates and Documents using the Template_ID.", "Use a JOIN to combine the Templates and Documents tables based on the Template_ID.", "Group the results by Template_ID to aggregate the number of documents associated with each template.", "Use the HAVING clause to filter the groups to only include those with more than one document."], "pred_sql": "SELECT Templates.Template_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID\nHAVING COUNT(Documents.Document_ID) > 1;", "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "source_tables": ["documents"]}
{"sample_id": 314, "db_id": "cre_Doc_Template_Mgt", "question": "What are the template ids of any templates used in more than a single document?", "rationale": ["Identify the relevant tables: Templates and Documents.", "Determine the relationship between Templates and Documents using the Template_ID.", "Use a JOIN to combine the Templates and Documents tables based on the Template_ID.", "Group the results by Template_ID to aggregate the data for each template.", "Use the HAVING clause to filter the groups, selecting only those with a count of Document_ID greater than 1, indicating that the template is used in more than one document."], "pred_sql": "SELECT Templates.Template_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID\nHAVING COUNT(Documents.Document_ID) > 1;", "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "source_tables": ["documents"]}
{"sample_id": 315, "db_id": "cre_Doc_Template_Mgt", "question": "Show ids for all templates not used by any document.", "rationale": ["Identify the main requirement: to find all template IDs that are not used by any document.", "Understand the relationship between the tables: Templates and Documents, where Documents reference Templates through Template_ID.", "To find templates not used by any document, we can use a subquery that selects all Template_IDs from the Documents table.", "The main query will select Template_IDs from the Templates table where the Template_ID is not in the list of Template_IDs returned by the subquery.", "Construct the SQL query using the SELECT statement with a NOT IN clause to filter out the used templates."], "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);", "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "source_tables": ["templates", "documents"]}
{"sample_id": 316, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids for templates that are not used in any documents?", "rationale": ["Identify the main requirement: We need to find Template_IDs from the Templates table that are not associated with any entries in the Documents table.", "To achieve this, we will use a subquery to select all distinct Template_IDs from the Documents table.", "We will then use the NOT IN clause to filter out those Template_IDs from the Templates table, ensuring we only get those that are not used in any documents."], "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);", "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "source_tables": ["templates", "documents"]}
{"sample_id": 317, "db_id": "cre_Doc_Template_Mgt", "question": "How many templates do we have?", "rationale": ["Identify the requirement: We need to count the number of templates.", "Determine the relevant table: The 'Templates' table contains the information about templates.", "Use the COUNT() function to count the number of entries in the 'Templates' table.", "Construct the SQL query to select the count from the 'Templates' table."], "pred_sql": "SELECT COUNT(*) AS Template_Count FROM Templates;", "gold_sql": "SELECT count(*) FROM Templates", "source_tables": ["templates"]}
{"sample_id": 318, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of templates.", "rationale": ["Identify the goal: Count the number of templates.", "Determine the relevant table: The 'Templates' table contains the template information.", "Use the COUNT() function to count the number of entries in the 'Templates' table.", "Construct the SQL query to select the count from the 'Templates' table."], "pred_sql": "SELECT COUNT(*) AS Template_Count FROM Templates;", "gold_sql": "SELECT count(*) FROM Templates", "source_tables": ["templates"]}
{"sample_id": 319, "db_id": "cre_Doc_Template_Mgt", "question": "Show template ids, version numbers, and template type codes for all templates.", "rationale": ["Identify the required columns: Template_ID, Version_Number, and Template_Type_Code.", "Determine the table that contains these columns, which is the Templates table.", "Construct the SQL SELECT statement to retrieve the specified columns from the Templates table."], "pred_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;", "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "source_tables": ["templates"]}
{"sample_id": 320, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids, version numbers, and type codes for each template?", "rationale": ["Identify the required columns: Template_ID, Version_Number, and Template_Type_Code.", "Determine the table that contains these columns, which is the Templates table.", "Construct the SQL SELECT statement to retrieve the specified columns from the Templates table."], "pred_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;", "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "source_tables": ["templates"]}
{"sample_id": 321, "db_id": "cre_Doc_Template_Mgt", "question": "Show all distinct template type codes for all templates.", "rationale": ["Identify the requirement: We need to show all distinct template type codes for all templates.", "Determine the relevant table: The 'Templates' table contains the 'Template_Type_Code' column that we need.", "Use the SELECT statement to retrieve data from the 'Template_Type_Code' column.", "To ensure we only get unique values, we will use the DISTINCT keyword in our query."], "pred_sql": "SELECT DISTINCT Template_Type_Code FROM Templates;", "gold_sql": "SELECT DISTINCT template_type_code FROM Templates", "source_tables": ["templates"]}
{"sample_id": 322, "db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes?", "rationale": ["Identify the table that contains the template type codes, which is 'Ref_Template_Types'.", "Determine the specific column that holds the template type codes, which is 'Template_Type_Code'.", "Since we want to know the different template type codes, we will use the DISTINCT keyword to ensure that we get unique values.", "Construct the SQL query to select distinct template type codes from the 'Ref_Template_Types' table."], "pred_sql": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;", "gold_sql": "SELECT DISTINCT template_type_code FROM Templates", "source_tables": ["templates"]}
{"sample_id": 323, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of templates with template type code PP or PPT?", "rationale": ["Identify the relevant table: The query is asking for template IDs, which are found in the Templates table.", "Determine the columns needed: We need the 'Template_ID' column from the Templates table.", "Identify the condition: The query specifies that we are interested in templates with a 'Template_Type_Code' of either 'PP' or 'PPT'.", "Construct the SQL query: Use a SELECT statement to retrieve 'Template_ID' from the Templates table where 'Template_Type_Code' matches either 'PP' or 'PPT' using the IN clause."], "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');", "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'", "source_tables": ["templates"]}
{"sample_id": 324, "db_id": "cre_Doc_Template_Mgt", "question": "Return the ids of templates that have the code PP or PPT.", "rationale": ["Identify the table that contains the Template_ID and Template_Type_Code, which is the Templates table.", "Determine the condition for filtering the Template_Type_Code, which is to include 'PP' or 'PPT'.", "Use the SQL SELECT statement to retrieve the Template_ID from the Templates table where the Template_Type_Code matches the specified codes.", "Utilize the IN clause to specify multiple values ('PP', 'PPT') for the Template_Type_Code condition."], "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');", "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'", "source_tables": ["templates"]}
{"sample_id": 325, "db_id": "cre_Doc_Template_Mgt", "question": "How many templates have template type code CV?", "rationale": ["Identify the table that contains the relevant data: The 'Templates' table holds information about templates, including their type codes.", "Determine the specific column to filter on: We need to filter by 'Template_Type_Code' to find templates of type 'CV'.", "Use the COUNT function to count the number of templates that match the specified type code.", "Construct the SQL query to select the count of templates from the 'Templates' table where 'Template_Type_Code' equals 'CV'."], "pred_sql": "SELECT COUNT(*) AS Template_Count FROM Templates WHERE Template_Type_Code = 'CV';", "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  'CV'", "source_tables": ["templates"]}
{"sample_id": 326, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of templates of the type CV.", "rationale": ["Identify the table that contains the templates, which is the 'Templates' table.", "Determine the column that indicates the type of template, which is 'Template_Type_Code'.", "Specify the template type we are interested in, which is 'CV'.", "Use the COUNT() function to count the number of records that match the specified template type.", "Construct the SQL query to select the count from the 'Templates' table where the 'Template_Type_Code' is 'CV'."], "pred_sql": "SELECT COUNT(*) AS Template_Count FROM Templates WHERE Template_Type_Code = 'CV';", "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  'CV'", "source_tables": ["templates"]}
{"sample_id": 327, "db_id": "cre_Doc_Template_Mgt", "question": "What is the version number and template type code for the template with version number later than 5?", "rationale": ["Identify the relevant table: The query is asking for information related to templates, so we will use the 'Templates' table.", "Determine the columns needed: The user wants the 'Version_Number' and 'Template_Type_Code', which are both columns in the 'Templates' table.", "Specify the condition: The query specifies that we need templates with a version number later than 5, so we will add a WHERE clause to filter the results accordingly."], "pred_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > '5';", "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "source_tables": ["templates"]}
{"sample_id": 328, "db_id": "cre_Doc_Template_Mgt", "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "rationale": ["Identify the relevant table: The query requires information from the 'Templates' table.", "Determine the required columns: The user wants 'Version_Number' and 'Template_Type_Code'.", "Specify the condition: The version number must be greater than 5.", "Construct the SQL SELECT statement: Use SELECT to retrieve the specified columns from the 'Templates' table with the given condition."], "pred_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > '5';", "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "source_tables": ["templates"]}
{"sample_id": 329, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and number of templates for each.", "rationale": ["Identify the tables involved: Ref_Template_Types and Templates.", "We need to retrieve the Template_Type_Code from Ref_Template_Types and count the number of templates associated with each type.", "Use a LEFT JOIN to connect Ref_Template_Types with Templates on the Template_Type_Code to ensure we get all template types even if they have no templates.", "Use COUNT(Templates.Template_ID) to count the number of templates for each template type.", "Group the results by Template_Type_Code to get the count for each type."], "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Templates\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY Ref_Template_Types.Template_Type_Code;", "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "source_tables": ["templates"]}
{"sample_id": 330, "db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes, and how many templates correspond to each?", "rationale": ["Identify the relevant tables: Ref_Template_Types and Templates are needed to get template type codes and their corresponding templates.", "Use a LEFT JOIN to connect Ref_Template_Types with Templates on the Template_Type_Code to ensure all template types are included, even those without templates.", "Count the number of templates for each template type using COUNT(Templates.Template_ID) and alias it as Template_Count.", "Group the results by Template_Type_Code to get the count of templates for each type."], "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY Ref_Template_Types.Template_Type_Code;", "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "source_tables": ["templates"]}
{"sample_id": 331, "db_id": "cre_Doc_Template_Mgt", "question": "Which template type code has most number of templates?", "rationale": ["Identify the relevant table: The query requires information about template types and their associated templates, so we will use the 'Templates' table.", "Group the data: We need to group the templates by 'Template_Type_Code' to count how many templates belong to each type.", "Count the templates: Use the COUNT function to count the number of templates for each 'Template_Type_Code'.", "Order the results: We will order the results in descending order based on the count of templates to find the type with the most templates.", "Limit the results: Since we only need the template type code with the most templates, we will limit the results to 1."], "pred_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates"]}
{"sample_id": 332, "db_id": "cre_Doc_Template_Mgt", "question": "Return the type code of the template type that the most templates belong to.", "rationale": ["Identify the relevant table: The query requires information about templates and their types, so we will use the 'Templates' table.", "Group the templates by 'Template_Type_Code': We need to count how many templates belong to each type, which requires grouping by the 'Template_Type_Code'.", "Count the number of templates for each type: We will use the COUNT function to count the number of templates in each group.", "Order the results by the count in descending order: To find the type code with the most templates, we will order the results by the count of templates in descending order.", "Limit the results to 1: Since we only want the type code with the most templates, we will limit the results to 1."], "pred_sql": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;", "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates"]}
{"sample_id": 333, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes with less than three templates.", "rationale": ["Identify the relevant tables: Ref_Template_Types and Templates.", "We need to find template type codes, so we will select 'Template_Type_Code' from Ref_Template_Types.", "To count the number of templates associated with each template type code, we will perform a LEFT JOIN between Ref_Template_Types and Templates on 'Template_Type_Code'.", "We will group the results by 'Template_Type_Code' to aggregate the count of templates for each type.", "Finally, we will use the HAVING clause to filter the groups where the count of templates is less than 3."], "pred_sql": "SELECT r.Template_Type_Code \nFROM Ref_Template_Types r \nLEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code \nGROUP BY r.Template_Type_Code \nHAVING COUNT(t.Template_ID) < 3;", "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "source_tables": ["templates"]}
{"sample_id": 334, "db_id": "cre_Doc_Template_Mgt", "question": "What are the codes of template types that have fewer than 3 templates?", "rationale": ["Identify the relevant tables: Ref_Template_Types and Templates.", "We need to find the Template_Type_Code from Ref_Template_Types.", "Join the Ref_Template_Types table with the Templates table on Template_Type_Code to associate template types with their templates.", "Group the results by Template_Type_Code to count the number of templates for each type.", "Use the HAVING clause to filter the groups where the count of templates is less than 3."], "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY Ref_Template_Types.Template_Type_Code\nHAVING COUNT(Templates.Template_ID) < 3;", "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "source_tables": ["templates"]}
{"sample_id": 335, "db_id": "cre_Doc_Template_Mgt", "question": "What the smallest version number and its template type code?", "rationale": ["Identify the relevant table: The query requires information about version numbers and template types, which are found in the Templates table.", "Determine the required fields: We need the smallest version number and the template type code. This means we will select 'Version_Number' and 'Template_Type_Code'.", "Use the MIN() function: To find the smallest version number, we will use the MIN() function on the 'Version_Number' column.", "Group by template type code: Since we want the smallest version number for each template type, we will group the results by 'Template_Type_Code'.", "Construct the SQL query: Combine all the elements into a complete SQL query that selects the minimum version number and groups by template type code."], "pred_sql": "SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code;", "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "source_tables": ["templates"]}
{"sample_id": 336, "db_id": "cre_Doc_Template_Mgt", "question": "Return the lowest version number, along with its corresponding template type code.", "rationale": ["Identify the requirement to return the lowest version number and its corresponding template type code.", "The lowest version number can be obtained using the MIN() function on the Version_Number column in the Templates table.", "To associate the lowest version number with its template type code, we need to include the Template_Type_Code in the SELECT statement.", "Since we want the lowest version number for each template type code, we will use GROUP BY on the Template_Type_Code column."], "pred_sql": "SELECT MIN(Version_Number) AS Lowest_Version, Template_Type_Code FROM Templates GROUP BY Template_Type_Code;", "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "source_tables": ["templates"]}
{"sample_id": 337, "db_id": "cre_Doc_Template_Mgt", "question": "What is the template type code of the template used by document with the name \"Data base\"?", "rationale": ["Identify the relevant tables: We need to find the template type code associated with a specific document name, so we will use the Documents and Templates tables.", "Determine the relationship: The Documents table has a foreign key (Template_ID) that links to the Templates table, allowing us to join these two tables.", "Specify the selection: We want to select the Template_Type_Code from the Templates table.", "Add the condition: We need to filter the results to only include the document with the name 'Data base'.", "Construct the SQL query: Combine the SELECT statement, JOIN clause, and WHERE condition to form the complete SQL query."], "pred_sql": "SELECT Templates.Template_Type_Code \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Data base';", "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base'", "source_tables": ["templates", "documents"]}
{"sample_id": 338, "db_id": "cre_Doc_Template_Mgt", "question": "Return the template type code of the template that is used by a document named Data base.", "rationale": ["Identify the relevant tables: We need to look at the Documents table to find the document by name and the Templates table to get the template type code.", "Determine the relationship: The Documents table has a foreign key relationship with the Templates table through Template_ID.", "Formulate the query: We will select the Template_Type_Code from the Templates table where the Document_Name in the Documents table matches 'Data base'.", "Use JOIN to connect the Documents and Templates tables based on the Template_ID."], "pred_sql": "SELECT Templates.Template_Type_Code \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Data base';", "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base'", "source_tables": ["templates", "documents"]}
{"sample_id": 339, "db_id": "cre_Doc_Template_Mgt", "question": "Show all document names using templates with template type code BK.", "rationale": ["Identify the tables involved: We need to retrieve document names, which are stored in the 'Documents' table, and we need to filter these documents based on the template type code from the 'Templates' table.", "Determine the relationship between tables: The 'Documents' table has a foreign key 'Template_ID' that references the 'Templates' table. This means we can join these two tables on 'Template_ID'.", "Specify the filtering condition: We need to filter the results to only include documents that are associated with templates of type code 'BK'. This is done by adding a WHERE clause that checks the 'Template_Type_Code' in the 'Templates' table.", "Construct the SQL query: Using the SELECT statement to get 'Document_Name' from the 'Documents' table, we join it with the 'Templates' table and apply the necessary filtering condition."], "pred_sql": "SELECT Documents.Document_Name \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Templates.Template_Type_Code = 'BK';", "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  'BK'", "source_tables": ["templates", "documents"]}
{"sample_id": 340, "db_id": "cre_Doc_Template_Mgt", "question": "What are the names of documents that use templates with the code BK?", "rationale": ["Identify the relevant tables: We need to retrieve document names, so we will use the 'Documents' table.", "Determine the relationship: The 'Documents' table is related to the 'Templates' table through the 'Template_ID' column.", "Filter criteria: We need to filter the templates by the specific code 'BK', which is found in the 'Template_Type_Code' column of the 'Templates' table.", "Construct the SQL query: We will use a JOIN to connect 'Documents' and 'Templates' and select the 'Document_Name' where the 'Template_Type_Code' is 'BK'."], "pred_sql": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';", "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  'BK'", "source_tables": ["templates", "documents"]}
{"sample_id": 341, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and the number of documents using each type.", "rationale": ["Identify the tables involved: Ref_Template_Types, Templates, and Documents.", "We need to count the number of documents associated with each template type code.", "Join the Ref_Template_Types table with the Templates table on Template_Type_Code to get the template types.", "Then, join the resulting table with the Documents table on Template_ID to link documents to their respective templates.", "Use COUNT() to count the number of Document_IDs for each Template_Type_Code.", "Group the results by Template_Type_Code to get the count for each type."], "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Document_Count\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Ref_Template_Types.Template_Type_Code;", "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "source_tables": ["templates", "documents"]}
{"sample_id": 342, "db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes, and how many documents use each type?", "rationale": ["Identify the tables involved: Ref_Template_Types, Templates, and Documents.", "We need to retrieve the Template_Type_Code from Ref_Template_Types and count the number of documents associated with each template type.", "Join the Ref_Template_Types table with the Templates table on Template_Type_Code to get the templates for each type.", "Then, join the Templates table with the Documents table on Template_ID to count the documents for each template.", "Use COUNT() to count the number of Document_IDs for each Template_Type_Code.", "Group the results by Template_Type_Code to get the count for each type."], "pred_sql": "SELECT RTT.Template_Type_Code, COUNT(D.Document_ID) AS Document_Count\nFROM Ref_Template_Types RTT\nLEFT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY RTT.Template_Type_Code;", "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "source_tables": ["templates", "documents"]}
{"sample_id": 343, "db_id": "cre_Doc_Template_Mgt", "question": "Which template type code is used by most number of documents?", "rationale": ["Identify the relevant tables: We need to find the template type code associated with documents, so we will use the 'Documents' and 'Templates' tables.", "Join the tables: We will join the 'Documents' table with the 'Templates' table on the 'Template_ID' column to access the 'Template_Type_Code'.", "Group by template type code: We will group the results by 'Template_Type_Code' to count the number of documents associated with each template type.", "Count the documents: We will use the COUNT function to count the number of documents for each template type code.", "Order the results: We will order the results in descending order based on the count of documents to find the template type code used by the most documents.", "Limit the results: We will limit the results to 1 to get only the template type code with the highest count."], "pred_sql": "SELECT Templates.Template_Type_Code\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nGROUP BY Templates.Template_Type_Code\nORDER BY COUNT(Documents.Document_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}
{"sample_id": 344, "db_id": "cre_Doc_Template_Mgt", "question": "Return the code of the template type that is most commonly used in documents.", "rationale": ["Identify the relevant tables: We need to look at the Documents and Templates tables to find the template type used in documents.", "Join the Documents and Templates tables on the Template_ID to access the Template_Type_Code.", "Group the results by Template_Type_Code to count how many times each template type is used in documents.", "Order the results in descending order based on the count to find the most commonly used template type.", "Limit the results to 1 to get only the most common template type code."], "pred_sql": "SELECT Template_Type_Code\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}
{"sample_id": 345, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes that are not used by any document.", "rationale": ["We need to find all template type codes that are not used by any document.", "First, we will select the Template_Type_Code from the Ref_Template_Types table.", "Next, we will perform a LEFT JOIN with the Templates table on the Template_Type_Code to include all template types, even those that do not have corresponding templates.", "Then, we will perform another LEFT JOIN with the Documents table on the Template_ID to include all templates, even those that do not have corresponding documents.", "Finally, we will filter the results where Document_ID is NULL, which indicates that there are no documents associated with those templates."], "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL;", "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "source_tables": ["templates", "documents"]}
{"sample_id": 346, "db_id": "cre_Doc_Template_Mgt", "question": "What are the codes of template types that are not used for any document?", "rationale": ["We need to find template types that are not used for any document.", "To do this, we will start by selecting the 'Template_Type_Code' from the 'Ref_Template_Types' table.", "Next, we will perform a LEFT JOIN with the 'Templates' table on 'Template_Type_Code' to include all template types, even those that do not have corresponding templates.", "Then, we will perform another LEFT JOIN with the 'Documents' table on 'Template_ID' to include all templates, even those that do not have corresponding documents.", "Finally, we will filter the results where 'Document_ID' is NULL, which indicates that there are no documents associated with those template types."], "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL;", "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "source_tables": ["templates", "documents"]}
{"sample_id": 347, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and descriptions.", "rationale": ["Identify the table that contains the required information: Ref_Template_Types.", "Determine the columns needed: Template_Type_Code and Template_Type_Description.", "Construct the SQL SELECT statement to retrieve these columns from the Ref_Template_Types table."], "pred_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;", "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "source_tables": ["ref_template_types"]}
{"sample_id": 348, "db_id": "cre_Doc_Template_Mgt", "question": "What are the type codes and descriptions for all template types?", "rationale": ["Identify the table that contains the required information: Ref_Template_Types.", "Determine the columns needed: Template_Type_Code and Template_Type_Description.", "Construct the SQL SELECT statement to retrieve these columns from the Ref_Template_Types table."], "pred_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;", "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "source_tables": ["ref_template_types"]}
{"sample_id": 349, "db_id": "cre_Doc_Template_Mgt", "question": "What is the template type descriptions for template type code \"AD\".", "rationale": ["Identify the table that contains the template type descriptions, which is 'Ref_Template_Types'.", "Determine the column that holds the template type descriptions, which is 'Template_Type_Description'.", "Identify the column that contains the template type codes, which is 'Template_Type_Code'.", "Formulate the SQL query to select 'Template_Type_Description' from 'Ref_Template_Types' where 'Template_Type_Code' equals 'AD'."], "pred_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';", "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD'", "source_tables": ["ref_template_types"]}
{"sample_id": 350, "db_id": "cre_Doc_Template_Mgt", "question": "Return the template type description of the template type with the code AD.", "rationale": ["Identify the table that contains the template type descriptions, which is 'Ref_Template_Types'.", "Determine the column that holds the template type description, which is 'Template_Type_Description'.", "Identify the column that contains the unique code for the template type, which is 'Template_Type_Code'.", "Specify the condition to filter the results to only include the template type with the code 'AD'.", "Construct the SQL query to select the 'Template_Type_Description' from 'Ref_Template_Types' where 'Template_Type_Code' equals 'AD'."], "pred_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';", "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD'", "source_tables": ["ref_template_types"]}
{"sample_id": 351, "db_id": "cre_Doc_Template_Mgt", "question": "What is the template type code for template type description \"Book\".", "rationale": ["Identify the table that contains the template type description, which is 'Ref_Template_Types'.", "Determine the column that holds the template type description, which is 'Template_Type_Description'.", "Identify the column that contains the template type code, which is 'Template_Type_Code'.", "Construct a SQL SELECT statement to retrieve 'Template_Type_Code' from 'Ref_Template_Types' where 'Template_Type_Description' matches 'Book'."], "pred_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';", "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  'Book'", "source_tables": ["ref_template_types"]}
{"sample_id": 352, "db_id": "cre_Doc_Template_Mgt", "question": "Return the type code of the template type with the description \"Book\".", "rationale": ["Identify the table that contains the template type descriptions, which is 'Ref_Template_Types'.", "Determine the column that holds the description of the template type, which is 'Template_Type_Description'.", "Identify the column that contains the unique code for the template type, which is 'Template_Type_Code'.", "Formulate a SQL query to select 'Template_Type_Code' from 'Ref_Template_Types' where 'Template_Type_Description' equals 'Book'."], "pred_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';", "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  'Book'", "source_tables": ["ref_template_types"]}
{"sample_id": 353, "db_id": "cre_Doc_Template_Mgt", "question": "What are the distinct template type descriptions for the templates ever used by any document?", "rationale": ["We need to find distinct template type descriptions.", "The relevant tables are Ref_Template_Types, Templates, and Documents.", "We will join Ref_Template_Types with Templates on Template_Type_Code to get the descriptions of the template types.", "Next, we will join Templates with Documents on Template_ID to ensure we are only considering templates that have been used by any document.", "Finally, we will select the distinct Template_Type_Description from the result of these joins."], "pred_sql": "SELECT DISTINCT r.Template_Type_Description\nFROM Ref_Template_Types r\nJOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID;", "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "source_tables": ["ref_template_types", "templates", "documents"]}
{"sample_id": 354, "db_id": "cre_Doc_Template_Mgt", "question": "Return the different descriptions for templates that have been used in a document.", "rationale": ["Identify the tables involved: We need to get descriptions from the Ref_Template_Types table and relate it to the Templates and Documents tables.", "Determine the relationships: The Ref_Template_Types table is linked to the Templates table via Template_Type_Code, and the Templates table is linked to the Documents table via Template_ID.", "Select the required field: We need the Template_Type_Description from the Ref_Template_Types table.", "Use DISTINCT to ensure we get unique descriptions for templates that have been used in a document.", "Construct the SQL query using JOINs to connect the tables based on their relationships."], "pred_sql": "SELECT DISTINCT rt.Template_Type_Description\nFROM Ref_Template_Types rt\nJOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID;", "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "source_tables": ["ref_template_types", "templates", "documents"]}
{"sample_id": 355, "db_id": "cre_Doc_Template_Mgt", "question": "What are the template ids with template type description \"Presentation\".", "rationale": ["Identify the relevant tables: We need to retrieve data from the Templates table and the Ref_Template_Types table.", "Determine the relationship: The Templates table has a foreign key (Template_Type_Code) that references the Ref_Template_Types table.", "Specify the required fields: We need the Template_ID from the Templates table.", "Filter the results: We need to filter the results based on the Template_Type_Description being 'Presentation'.", "Construct the SQL query: Use a JOIN to combine the two tables on the Template_Type_Code and apply the WHERE clause to filter by description."], "pred_sql": "SELECT Templates.Template_ID \nFROM Templates \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation';", "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  'Presentation'", "source_tables": ["ref_template_types", "templates"]}
{"sample_id": 356, "db_id": "cre_Doc_Template_Mgt", "question": "Return the ids corresponding to templates with the description 'Presentation'.", "rationale": ["Identify the relevant table: Templates, which contains Template_ID and Template_Type_Code.", "Identify the table that contains the description: Ref_Template_Types, which contains Template_Type_Code and Template_Type_Description.", "We need to find the Template_Type_Code that corresponds to the description 'Presentation'.", "Use a subquery to select Template_Type_Code from Ref_Template_Types where Template_Type_Description is 'Presentation'.", "Join the results of the subquery with the Templates table to get the Template_IDs that match the Template_Type_Code from the subquery."], "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')", "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  'Presentation'", "source_tables": ["ref_template_types", "templates"]}
{"sample_id": 357, "db_id": "cre_Doc_Template_Mgt", "question": "How many paragraphs in total?", "rationale": ["Identify the table that contains the data we need, which is the 'Paragraphs' table.", "To find the total number of paragraphs, we need to count the entries in the 'Paragraphs' table.", "Use the COUNT() function to count all rows in the 'Paragraphs' table.", "Select the count with an alias 'Total_Paragraphs' for clarity."], "pred_sql": "SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs;", "gold_sql": "SELECT count(*) FROM Paragraphs", "source_tables": ["paragraphs"]}
{"sample_id": 358, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of paragraphs.", "rationale": ["Identify the goal of the query: to count the number of paragraphs.", "Determine the relevant table: the 'Paragraphs' table contains the paragraphs.", "Use the COUNT() function to count the total number of entries in the 'Paragraphs' table.", "Construct the SQL query to select the count from the 'Paragraphs' table."], "pred_sql": "SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs;", "gold_sql": "SELECT count(*) FROM Paragraphs", "source_tables": ["paragraphs"]}
{"sample_id": 359, "db_id": "cre_Doc_Template_Mgt", "question": "How many paragraphs for the document with name 'Summer Show'?", "rationale": ["Identify the relevant tables: We need to count paragraphs, so we will use the 'Paragraphs' table. We also need to filter by document name, which is in the 'Documents' table.", "Determine the relationship: The 'Paragraphs' table has a foreign key 'Document_ID' that links to the 'Documents' table. We will need to join these two tables on this key.", "Formulate the count query: We will use the COUNT() function to count the number of paragraphs associated with the document named 'Summer Show'.", "Construct the SQL query: The final SQL query will select the count of paragraphs from the 'Paragraphs' table, joining it with the 'Documents' table, and filtering by the document name."], "pred_sql": "SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';", "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 360, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of paragraphs in the document named 'Summer Show'.", "rationale": ["Identify the tables involved: We need to count paragraphs, so we will use the 'Paragraphs' table. We also need to filter by the document name, which is in the 'Documents' table.", "Determine the relationship: The 'Paragraphs' table has a foreign key 'Document_ID' that links to the 'Documents' table. We will need to join these two tables on this key.", "Formulate the count query: We will use the COUNT() function to count the number of paragraphs. We will select from the 'Paragraphs' table and join it with the 'Documents' table to filter by the document name.", "Add the WHERE clause: We need to filter the results to only include paragraphs from the document named 'Summer Show'.", "Construct the final SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT COUNT(*) AS Paragraph_Count\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';", "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 361, "db_id": "cre_Doc_Template_Mgt", "question": "Show paragraph details for paragraph with text 'Korea ' .", "rationale": ["Identify the relevant table: The query is asking for paragraph details, so we will focus on the 'Paragraphs' table.", "Determine the columns needed: We need to select the 'Paragraph_ID', 'Paragraph_Text', and 'Other_Details' from the 'Paragraphs' table.", "Specify the condition: The query specifies that we want details for the paragraph with the text 'Korea ', so we will add a WHERE clause to filter the results based on 'Paragraph_Text'.", "Construct the SQL query: Combine the selected columns, the table name, and the WHERE condition to form the complete SQL query."], "pred_sql": "SELECT p.Paragraph_ID, p.Paragraph_Text, p.Other_Details \nFROM Paragraphs p \nWHERE p.Paragraph_Text = 'Korea ';", "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'", "source_tables": ["paragraphs"]}
{"sample_id": 362, "db_id": "cre_Doc_Template_Mgt", "question": "What are the details for the paragraph that includes the text 'Korea ' ?", "rationale": ["Identify the table that contains the paragraph details, which is the 'Paragraphs' table.", "Determine the column that contains the text of the paragraph, which is 'Paragraph_Text'.", "Formulate a query to select all columns from the 'Paragraphs' table where 'Paragraph_Text' contains the substring 'Korea'.", "Use the SQL LIKE operator with wildcards to find paragraphs that include the specified text."], "pred_sql": "SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';", "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'", "source_tables": ["paragraphs"]}
{"sample_id": 363, "db_id": "cre_Doc_Template_Mgt", "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "rationale": ["Identify the tables involved: We need to retrieve paragraph IDs and texts, which are in the 'Paragraphs' table, and we need to filter based on the document name, which is in the 'Documents' table.", "Determine the relationship: The 'Paragraphs' table is related to the 'Documents' table through the 'Document_ID' foreign key.", "Construct the SELECT statement: We need to select 'Paragraph_ID' and 'Paragraph_Text' from the 'Paragraphs' table.", "Join the tables: We will join the 'Paragraphs' table with the 'Documents' table on the 'Document_ID' to access the document name.", "Add the WHERE clause: We need to filter the results to only include paragraphs from the document with the name 'Welcome to NY'."], "pred_sql": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Welcome to NY';", "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 364, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "rationale": ["Identify the relevant tables: We need to retrieve data from the 'Paragraphs' table, and we also need to filter based on the 'Documents' table.", "Determine the columns to select: The user wants the 'Paragraph_ID' and 'Paragraph_Text' from the 'Paragraphs' table.", "Establish the relationship between tables: The 'Paragraphs' table is linked to the 'Documents' table through the 'Document_ID' column.", "Construct the JOIN clause: We will join 'Paragraphs' with 'Documents' on the 'Document_ID' column.", "Add the WHERE clause: We need to filter the results to only include paragraphs from the document titled 'Welcome to NY'."], "pred_sql": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Welcome to NY';", "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 365, "db_id": "cre_Doc_Template_Mgt", "question": "Show all paragraph texts for the document \"Customer reviews\".", "rationale": ["Identify the tables involved: We need to retrieve paragraph texts, which are stored in the 'Paragraphs' table, and we need to filter based on the document name, which is in the 'Documents' table.", "Determine the relationship: The 'Paragraphs' table has a foreign key 'Document_ID' that links to the 'Documents' table's 'Document_ID'. This means we will need to join these two tables to access the paragraph texts associated with a specific document.", "Construct the SQL query: We will select the 'Paragraph_Text' from the 'Paragraphs' table and join it with the 'Documents' table on the 'Document_ID'. We will then filter the results to only include rows where the 'Document_Name' is 'Customer reviews'."], "pred_sql": "SELECT Paragraphs.Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Customer reviews';", "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 366, "db_id": "cre_Doc_Template_Mgt", "question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "rationale": ["Identify the relevant tables: We need to retrieve paragraph texts, which are stored in the 'Paragraphs' table, and we need to filter based on the document name, which is in the 'Documents' table.", "Determine the relationship: The 'Paragraphs' table has a foreign key 'Document_ID' that links to the 'Documents' table. We will need to join these two tables to access the paragraph texts associated with a specific document.", "Formulate the SQL query: We will select 'Paragraph_Text' from the 'Paragraphs' table and join it with the 'Documents' table on 'Document_ID'. We will add a WHERE clause to filter for the document with the name 'Customer reviews'."], "pred_sql": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';", "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 367, "db_id": "cre_Doc_Template_Mgt", "question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "rationale": ["We need to retrieve all document IDs and the count of paragraphs associated with each document.", "To achieve this, we will select the 'Document_ID' from the 'Documents' table.", "We will also count the 'Paragraph_ID' from the 'Paragraphs' table to get the number of paragraphs for each document.", "Since a document may not have any paragraphs, we will use a LEFT JOIN to include all documents even if they have zero paragraphs.", "We will group the results by 'Document_ID' to ensure we get a count for each document.", "Finally, we will order the results by 'Document_ID' to meet the requirement of ordering the output."], "pred_sql": "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID;", "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}
{"sample_id": 368, "db_id": "cre_Doc_Template_Mgt", "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "rationale": ["We need to retrieve document IDs and the count of paragraphs for each document.", "To get the count of paragraphs, we will use the COUNT() function on the Paragraphs table.", "We will perform a LEFT JOIN between the Documents table and the Paragraphs table on the Document_ID to ensure we get all documents even if they have no paragraphs.", "We will group the results by Document_ID to get the count of paragraphs for each document.", "Finally, we will order the results by Document_ID to meet the requirement of ordering by id."], "pred_sql": "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID;", "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}
{"sample_id": 369, "db_id": "cre_Doc_Template_Mgt", "question": "Show all document ids, names and the number of paragraphs in each document.", "rationale": ["Identify the required fields: Document_ID, Document_Name, and the count of paragraphs.", "The data is stored in the Documents table and the Paragraphs table, so a join is necessary to combine these tables.", "Use a LEFT JOIN to ensure that all documents are included, even those without paragraphs.", "Count the number of Paragraph_IDs for each document to get the number of paragraphs.", "Group the results by Document_ID and Document_Name to aggregate the paragraph counts correctly."], "pred_sql": "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name;", "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 370, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "rationale": ["Identify the required fields: Document_ID and Document_Name from the Documents table, and the count of paragraphs from the Paragraphs table.", "To get the number of paragraphs for each document, a JOIN operation is needed between the Documents and Paragraphs tables based on the Document_ID.", "Use a LEFT JOIN to ensure that documents without paragraphs are still included in the results.", "Use the COUNT function to count the number of Paragraph_IDs associated with each Document_ID.", "Group the results by Document_ID and Document_Name to get the count of paragraphs for each document."], "pred_sql": "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name;", "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 371, "db_id": "cre_Doc_Template_Mgt", "question": "List all document ids with at least two paragraphs.", "rationale": ["We need to list all document IDs that have at least two paragraphs.", "To achieve this, we will join the Documents table with the Paragraphs table on the Document_ID column.", "Next, we will group the results by Document_ID to aggregate the paragraphs associated with each document.", "Finally, we will use the HAVING clause to filter the groups, ensuring that we only include those documents that have a count of paragraphs greater than or equal to 2."], "pred_sql": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) >= 2;", "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "source_tables": ["paragraphs"]}
{"sample_id": 372, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of documents that have 2 or more paragraphs?", "rationale": ["Identify the relevant tables: We need to work with the Documents and Paragraphs tables since we are interested in documents and their associated paragraphs.", "Establish the relationship: The Documents table has a foreign key relationship with the Paragraphs table through Document_ID.", "Count the paragraphs: We need to count the number of paragraphs associated with each document. This can be done using the COUNT() function in SQL.", "Group the results: To count the paragraphs for each document, we will use the GROUP BY clause on Document_ID.", "Filter the results: We only want documents that have 2 or more paragraphs, so we will use the HAVING clause to filter groups with a count of paragraphs greater than or equal to 2."], "pred_sql": "SELECT Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2;", "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "source_tables": ["paragraphs"]}
{"sample_id": 373, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document id and name with greatest number of paragraphs?", "rationale": ["Identify the relevant tables: Documents and Paragraphs.", "We need to find the document ID and name, so we will select 'Document_ID' and 'Document_Name' from the Documents table.", "To find the document with the greatest number of paragraphs, we need to join the Documents table with the Paragraphs table on 'Document_ID'.", "We will group the results by 'Document_ID' and 'Document_Name' to count the number of paragraphs associated with each document.", "We will use the COUNT function to count the number of paragraphs for each document.", "To get the document with the greatest number of paragraphs, we will order the results in descending order based on the count of paragraphs.", "Finally, we will limit the results to 1 to get only the document with the highest count."], "pred_sql": "SELECT Documents.Document_ID, Documents.Document_Name\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name\nORDER BY COUNT(Paragraphs.Paragraph_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 374, "db_id": "cre_Doc_Template_Mgt", "question": "Return the id and name of the document with the most paragraphs.", "rationale": ["Identify the relevant tables: We need to retrieve information from the Documents and Paragraphs tables.", "Determine the relationship: The Documents table is linked to the Paragraphs table through the Document_ID column.", "Count the number of paragraphs for each document: We will use the COUNT function to count the Paragraph_IDs grouped by Document_ID.", "Sort the results: We will order the results by the count of paragraphs in descending order to get the document with the most paragraphs at the top.", "Limit the results: We will limit the output to just one record to get the document with the most paragraphs."], "pred_sql": "SELECT Documents.Document_ID, Documents.Document_Name\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name\nORDER BY COUNT(Paragraphs.Paragraph_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["paragraphs", "documents"]}
{"sample_id": 375, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document id with least number of paragraphs?", "rationale": ["Identify the relevant table: The query is asking for information related to documents and their paragraphs, so we will focus on the 'Paragraphs' table.", "Group by Document_ID: To find the number of paragraphs associated with each document, we will group the results by 'Document_ID'.", "Count the paragraphs: We will use the COUNT function to count the number of paragraphs for each document.", "Order the results: We need to order the results in ascending order based on the count of paragraphs to find the document with the least number of paragraphs.", "Limit the results: Since we only want the document with the least number of paragraphs, we will limit the results to 1."], "pred_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;", "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["paragraphs"]}
{"sample_id": 376, "db_id": "cre_Doc_Template_Mgt", "question": "Return the id of the document with the fewest paragraphs.", "rationale": ["Identify the relevant table: The query requires information about documents and their associated paragraphs, so we will work with the 'Documents' and 'Paragraphs' tables.", "Count the paragraphs for each document: We need to group the paragraphs by 'Document_ID' to count how many paragraphs each document has.", "Order the results: To find the document with the fewest paragraphs, we will order the grouped results by the count of paragraphs in ascending order.", "Limit the results: Since we only want the document with the fewest paragraphs, we will limit the results to 1."], "pred_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;", "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["paragraphs"]}
{"sample_id": 377, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document id with 1 to 2 paragraphs?", "rationale": ["Identify the relevant tables: We need to work with the Documents and Paragraphs tables since we are interested in document IDs and their associated paragraphs.", "Join the Documents and Paragraphs tables: We will join these tables on the Document_ID to link each document with its paragraphs.", "Group by Document_ID: To count the number of paragraphs associated with each document, we will group the results by Document_ID.", "Count the paragraphs: We will use the COUNT function to count the number of paragraphs for each document.", "Filter the results: We will use the HAVING clause to filter the grouped results to only include documents that have between 1 and 2 paragraphs."], "pred_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;", "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "source_tables": ["paragraphs"]}
{"sample_id": 378, "db_id": "cre_Doc_Template_Mgt", "question": "Give the ids of documents that have between one and two paragraphs.", "rationale": ["We need to retrieve the IDs of documents that have a specific number of paragraphs, specifically between one and two.", "To achieve this, we will use a SQL SELECT statement to get the 'Document_ID' from the 'Documents' table.", "Since we need to count the number of paragraphs associated with each document, we will join the 'Documents' table with the 'Paragraphs' table on the 'Document_ID'.", "We will group the results by 'Document_ID' to aggregate the paragraph counts for each document.", "Finally, we will use the HAVING clause to filter the grouped results to only include documents that have a count of paragraphs between 1 and 2."], "pred_sql": "SELECT Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nHAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;", "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "source_tables": ["paragraphs"]}
{"sample_id": 379, "db_id": "cre_Doc_Template_Mgt", "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "rationale": ["Identify the tables involved: We need to retrieve data from the Documents and Paragraphs tables.", "Determine the relationship: The Documents table is linked to the Paragraphs table through the Document_ID column.", "Specify the selection criteria: We want to find Document_IDs where the Paragraph_Text is either 'Brazil' or 'Ireland'.", "Use the SQL SELECT statement to retrieve the distinct Document_IDs that meet the criteria, using a JOIN to connect the two tables."], "pred_sql": "SELECT DISTINCT d.Document_ID \nFROM Documents d \nJOIN Paragraphs p ON d.Document_ID = p.Document_ID \nWHERE p.Paragraph_Text IN ('Brazil', 'Ireland');", "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "source_tables": ["paragraphs"]}
{"sample_id": 380, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "rationale": ["We need to find documents that contain specific paragraph texts, 'Brazil' and 'Ireland'.", "To do this, we will join the Documents table with the Paragraphs table on the Document_ID column, as this is the foreign key relationship.", "We will use a WHERE clause to filter the paragraphs to only those that contain either 'Brazil' or 'Ireland'.", "Since we want documents that contain both paragraph texts, we will group the results by Document_ID.", "We will use the HAVING clause to ensure that the count of distinct paragraph texts for each document is equal to 2, meaning both 'Brazil' and 'Ireland' are present."], "pred_sql": "SELECT DISTINCT d.Document_ID \nFROM Documents d \nJOIN Paragraphs p ON d.Document_ID = p.Document_ID \nWHERE p.Paragraph_Text IN ('Brazil', 'Ireland') \nGROUP BY d.Document_ID \nHAVING COUNT(DISTINCT p.Paragraph_Text) = 2;", "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "source_tables": ["paragraphs"]}
{"sample_id": 381, "db_id": "course_teach", "question": "How many teachers are there?", "rationale": ["Identify the table that contains the information about teachers, which is the 'teacher' table.", "To find out how many teachers there are, we need to count the number of entries in the 'teacher' table.", "Use the COUNT() function to count the total number of rows in the 'teacher' table.", "Select the count with an alias 'Teacher_Count' for clarity."], "pred_sql": "SELECT COUNT(*) AS Teacher_Count FROM teacher;", "gold_sql": "SELECT count(*) FROM teacher", "source_tables": ["teacher"]}
{"sample_id": 382, "db_id": "course_teach", "question": "What is the total count of teachers?", "rationale": ["Identify the table that contains the information about teachers, which is the 'teacher' table.", "To find the total count of teachers, we need to use the COUNT() function in SQL.", "The SQL query will select the count of all records from the 'teacher' table.", "The final SQL query will be 'SELECT COUNT(*) AS total_teachers FROM teacher;' to get the total number of teachers."], "pred_sql": "SELECT COUNT(*) AS total_teachers FROM teacher;", "gold_sql": "SELECT count(*) FROM teacher", "source_tables": ["teacher"]}
{"sample_id": 383, "db_id": "course_teach", "question": "List the names of teachers in ascending order of age.", "rationale": ["Identify the table that contains the information about teachers, which is the 'teacher' table.", "Determine the column that contains the names of the teachers, which is 'Name'.", "Since the request is to list the names in ascending order of age, we need to order the results by the 'Age' column.", "Construct the SQL query to select the 'Name' from the 'teacher' table and order the results by 'Age' in ascending order."], "pred_sql": "SELECT Name FROM teacher ORDER BY Age ASC;", "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC", "source_tables": ["teacher"]}
{"sample_id": 384, "db_id": "course_teach", "question": "What are the names of the teachers ordered by ascending age?", "rationale": ["Identify the table that contains the information needed: the 'teacher' table has the names and ages of teachers.", "Select the 'Name' column from the 'teacher' table to get the names of the teachers.", "Use the 'ORDER BY' clause to sort the results by the 'Age' column in ascending order."], "pred_sql": "SELECT Name FROM teacher ORDER BY Age ASC;", "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC", "source_tables": ["teacher"]}
{"sample_id": 385, "db_id": "course_teach", "question": "What are the age and hometown of teachers?", "rationale": ["Identify the relevant table: The query asks for information about teachers, so we will use the 'teacher' table.", "Determine the required columns: The query specifically asks for the 'age' and 'hometown' of teachers, which correspond to the 'Age' and 'Hometown' columns in the 'teacher' table.", "Construct the SQL SELECT statement: We will select the 'Age' and 'Hometown' columns from the 'teacher' table."], "pred_sql": "SELECT Age, Hometown FROM teacher;", "gold_sql": "SELECT Age ,  Hometown FROM teacher", "source_tables": ["teacher"]}
{"sample_id": 386, "db_id": "course_teach", "question": "What is the age and hometown of every teacher?", "rationale": ["Identify the relevant table: The query asks for information about teachers, so we will use the 'teacher' table.", "Determine the required columns: The query specifically asks for the 'Age' and 'Hometown' of each teacher.", "Construct the SQL SELECT statement: We will select the 'Age' and 'Hometown' columns from the 'teacher' table."], "pred_sql": "SELECT Age, Hometown FROM teacher;", "gold_sql": "SELECT Age ,  Hometown FROM teacher", "source_tables": ["teacher"]}
{"sample_id": 387, "db_id": "course_teach", "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "rationale": ["Identify the table that contains the information about teachers, which is the 'teacher' table.", "Determine the column that contains the hometown information, which is 'Hometown'.", "Specify the condition to filter out teachers whose hometown is 'Little Lever Urban District'.", "Construct the SQL query to select the 'Name' column from the 'teacher' table where the 'Hometown' does not equal 'Little Lever Urban District'."], "pred_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';", "gold_sql": "select name from teacher where hometown != 'little lever urban district'", "source_tables": ["teacher"]}
{"sample_id": 388, "db_id": "course_teach", "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "rationale": ["Identify the table that contains the information about teachers, which is the 'teacher' table.", "Determine the column that contains the hometown information, which is 'Hometown'.", "Specify the condition to filter out teachers whose hometown is not 'Little Lever Urban District'.", "Construct the SQL query to select the 'Name' column from the 'teacher' table where the 'Hometown' does not equal 'Little Lever Urban District'."], "pred_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';", "gold_sql": "select name from teacher where hometown != 'little lever urban district'", "source_tables": ["teacher"]}
{"sample_id": 389, "db_id": "course_teach", "question": "Show the name of teachers aged either 32 or 33?", "rationale": ["Identify the table that contains the information about teachers, which is the 'teacher' table.", "Determine the relevant column that contains the age of the teachers, which is 'Age'.", "The query requires filtering teachers based on their age, specifically those who are either 32 or 33 years old.", "Use the SQL 'SELECT' statement to retrieve the 'Name' of the teachers from the 'teacher' table.", "Apply a 'WHERE' clause to filter the results where 'Age' is either 32 or 33 using the 'IN' operator."], "pred_sql": "SELECT Name FROM teacher WHERE Age IN (32, 33);", "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "source_tables": ["teacher"]}
{"sample_id": 390, "db_id": "course_teach", "question": "What are the names of the teachers who are aged either 32 or 33?", "rationale": ["Identify the table that contains the information about teachers, which is the 'teacher' table.", "Determine the relevant column that contains the names of the teachers, which is the 'Name' column.", "Identify the column that contains the age of the teachers, which is the 'Age' column.", "Formulate a query to select the 'Name' from the 'teacher' table where the 'Age' is either 32 or 33 using the IN clause."], "pred_sql": "SELECT Name FROM teacher WHERE Age IN (32, 33);", "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "source_tables": ["teacher"]}
{"sample_id": 391, "db_id": "course_teach", "question": "What is the hometown of the youngest teacher?", "rationale": ["Identify the table that contains the information about teachers, which is the 'teacher' table.", "To find the youngest teacher, we need to sort the teachers by their age in ascending order.", "We will use the ORDER BY clause to sort the 'Age' column.", "To get only the youngest teacher, we will limit the results to 1 using the LIMIT clause.", "Finally, we will select the 'Hometown' column to get the required information."], "pred_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;", "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "source_tables": ["teacher"]}
{"sample_id": 392, "db_id": "course_teach", "question": "Where is the youngest teacher from?", "rationale": ["Identify the table that contains information about teachers, which is the 'teacher' table.", "To find the youngest teacher, we need to determine the minimum age from the 'Age' column in the 'teacher' table.", "Once we have the minimum age, we can select the 'Hometown' of the teacher(s) who have that age.", "The final SQL query selects the 'Hometown' from the 'teacher' table where the 'Age' is equal to the minimum age found."], "pred_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);", "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "source_tables": ["teacher"]}
{"sample_id": 393, "db_id": "course_teach", "question": "Show different hometown of teachers and the number of teachers from each hometown.", "rationale": ["Identify the table that contains the relevant information about teachers, which is the 'teacher' table.", "We need to select the 'Hometown' column to show different hometowns of teachers.", "To count the number of teachers from each hometown, we will use the COUNT() function.", "We will group the results by 'Hometown' to get the count for each unique hometown."], "pred_sql": "SELECT Hometown, COUNT(*) AS Number_of_Teachers FROM teacher GROUP BY Hometown;", "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "source_tables": ["teacher"]}
{"sample_id": 394, "db_id": "course_teach", "question": "For each hometown, how many teachers are there?", "rationale": ["Identify the relevant table: The 'teacher' table contains the information about teachers and their hometowns.", "Determine the required output: We need to count the number of teachers for each hometown.", "Use the COUNT() function to count the number of teachers.", "Group the results by hometown using GROUP BY to get the count for each unique hometown."], "pred_sql": "SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown;", "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "source_tables": ["teacher"]}
{"sample_id": 395, "db_id": "course_teach", "question": "List the most common hometown of teachers.", "rationale": ["Identify the relevant table: The 'teacher' table contains the 'Hometown' column.", "Count the occurrences of each hometown: Use COUNT(*) to count how many teachers come from each hometown.", "Group the results by hometown: Use GROUP BY Hometown to aggregate the counts for each unique hometown.", "Order the results by count in descending order: Use ORDER BY Count DESC to sort the hometowns by the number of teachers from each.", "Limit the results to the most common hometown: Use LIMIT 1 to get only the top result."], "pred_sql": "SELECT Hometown, COUNT(*) as Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["teacher"]}
{"sample_id": 396, "db_id": "course_teach", "question": "What is the most commmon hometowns for teachers?", "rationale": ["Identify the relevant table: The query is about teachers' hometowns, so we will use the 'teacher' table.", "We need to count how many teachers come from each hometown, which requires a COUNT function.", "To group the results by hometown, we will use the GROUP BY clause on the 'Hometown' column.", "To find the most common hometown, we will order the results by the count of teachers in descending order using ORDER BY.", "Finally, we will limit the results to only the top result using LIMIT 1."], "pred_sql": "SELECT Hometown, COUNT(Hometown) AS Hometown_Count FROM teacher GROUP BY Hometown ORDER BY Hometown_Count DESC LIMIT 1;", "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["teacher"]}
{"sample_id": 397, "db_id": "course_teach", "question": "Show the hometowns shared by at least two teachers.", "rationale": ["Identify the relevant table: The query requires information about teachers' hometowns, so we will use the 'teacher' table.", "Select the 'Hometown' column: We need to retrieve the hometowns of the teachers.", "Group by 'Hometown': To find shared hometowns, we will group the results by the 'Hometown' column.", "Count the number of teachers per hometown: We will use the COUNT function to count how many teachers belong to each hometown.", "Filter groups with at least two teachers: We will use the HAVING clause to filter the results to only include hometowns that have two or more teachers."], "pred_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;", "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "source_tables": ["teacher"]}
{"sample_id": 398, "db_id": "course_teach", "question": "What are the towns from which at least two teachers come from?", "rationale": ["Identify the relevant table: The query requires information about teachers and their hometowns, so we will use the 'teacher' table.", "Select the 'Hometown' column: We need to retrieve the hometowns of the teachers.", "Group by 'Hometown': To find towns with at least two teachers, we will group the results by the 'Hometown' column.", "Count the number of teachers per hometown: We will use the COUNT function to count the number of Teacher_IDs for each hometown.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with a count of 2 or more."], "pred_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;", "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "source_tables": ["teacher"]}
{"sample_id": 399, "db_id": "course_teach", "question": "Show names of teachers and the courses they are arranged to teach.", "rationale": ["Identify the tables needed: teacher, course_arrange, and course.", "Determine the columns to select: teacher's name and course title.", "Establish the relationships between the tables using JOINs: teacher to course_arrange on Teacher_ID, and course_arrange to course on Course_ID.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;", "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "source_tables": ["course", "course_arrange", "teacher"]}
{"sample_id": 400, "db_id": "course_teach", "question": "What is the name of each teacher and what course they teach?", "rationale": ["Identify the tables needed: We need information from the 'teacher' table for teacher names and from the 'course' table for course names.", "Determine the relationship between the tables: The 'course_arrange' table links teachers to courses through their IDs.", "Construct the SQL query: Use JOINs to combine the 'teacher', 'course_arrange', and 'course' tables based on their relationships.", "Select the required columns: We need to select the teacher's name and the course name."], "pred_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;", "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "source_tables": ["course", "course_arrange", "teacher"]}
{"sample_id": 401, "db_id": "course_teach", "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "rationale": ["Identify the tables needed: teacher, course_arrange, and course.", "Determine the columns to select: teacher's name and course title.", "Establish the relationships between the tables using JOINs: teacher to course_arrange on Teacher_ID, and course_arrange to course on Course_ID.", "Sort the results by the teacher's name in ascending order."], "pred_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;", "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "source_tables": ["course", "course_arrange", "teacher"]}
{"sample_id": 402, "db_id": "course_teach", "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "rationale": ["Identify the tables needed: teacher, course, and course_arrange.", "We need to retrieve the names of teachers and the courses they teach, which requires joining the teacher table with the course_arrange table and then with the course table.", "The join condition is based on the foreign keys: course_arrange.Teacher_ID links to teacher.Teacher_ID and course_arrange.Course_ID links to course.Course_ID.", "Select the columns: we need teacher.Name and course.Course.", "To sort the results in ascending order by the teacher's name, we will use the ORDER BY clause with teacher.Name ASC."], "pred_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;", "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "source_tables": ["course", "course_arrange", "teacher"]}
{"sample_id": 403, "db_id": "course_teach", "question": "Show the name of the teacher for the math course.", "rationale": ["Identify the relevant tables: teacher, course_arrange, and course.", "Determine the relationship between the tables: teacher is linked to course_arrange via Teacher_ID, and course_arrange is linked to course via Course_ID.", "We need to select the teacher's name, so we will select the 'Name' column from the teacher table.", "We need to filter the results to only include the math course, so we will add a WHERE clause that specifies course.Course = 'math'.", "Construct the SQL query using JOINs to connect the tables and apply the necessary filters."], "pred_sql": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';", "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'", "source_tables": ["course", "course_arrange", "teacher"]}
{"sample_id": 404, "db_id": "course_teach", "question": "What are the names of the people who teach math courses?", "rationale": ["Identify the relevant tables: teacher, course_arrange, and course.", "We need to find the names of teachers, so we will select the 'Name' column from the teacher table.", "To find the courses related to math, we will filter the course table using a WHERE clause that checks if the course name contains 'math'.", "We need to join the tables: teacher with course_arrange on Teacher_ID, and course_arrange with course on Course_ID to link teachers to their respective courses.", "Construct the SQL query using SELECT, JOIN, and WHERE clauses to get the desired result."], "pred_sql": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course LIKE '%math%';", "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'", "source_tables": ["course", "course_arrange", "teacher"]}
{"sample_id": 405, "db_id": "course_teach", "question": "Show names of teachers and the number of courses they teach.", "rationale": ["We need to show the names of teachers and the number of courses they teach.", "To get the names of teachers, we will select the 'Name' column from the 'teacher' table.", "To count the number of courses each teacher teaches, we will use the COUNT() function on the 'Course_ID' from the 'course' table.", "We need to join the 'teacher' table with the 'course_arrange' table on 'Teacher_ID' to link teachers to the courses they teach.", "We also need to join the 'course_arrange' table with the 'course' table on 'Course_ID' to ensure we are counting valid courses.", "Since a teacher may not teach any courses, we will use a LEFT JOIN to include all teachers even if they have zero courses.", "Finally, we will group the results by 'Teacher_ID' to get the count of courses for each teacher."], "pred_sql": "SELECT teacher.Name, COUNT(course.Course_ID) AS NumberOfCourses\nFROM teacher\nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nLEFT JOIN course ON course_arrange.Course_ID = course.Course_ID\nGROUP BY teacher.Teacher_ID;", "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["course_arrange", "teacher"]}
{"sample_id": 406, "db_id": "course_teach", "question": "What are the names of the teachers and how many courses do they teach?", "rationale": ["Identify the tables needed: We need data from the 'teacher' table for teacher names and the 'course_arrange' table to count the courses they teach.", "We need to join the 'teacher' table with the 'course_arrange' table on the Teacher_ID to link teachers with their courses.", "To count the number of courses each teacher teaches, we will use the COUNT() function on the Course_ID from the 'course_arrange' table.", "We will use a LEFT JOIN to ensure that teachers with no courses are still included in the results with a count of 0.", "Finally, we will group the results by teacher ID to get the count of courses for each teacher."], "pred_sql": "SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Course_Count\nFROM teacher\nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nGROUP BY teacher.Teacher_ID;", "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["course_arrange", "teacher"]}
{"sample_id": 407, "db_id": "course_teach", "question": "Show names of teachers that teach at least two courses.", "rationale": ["Identify the relevant tables: We need to get teacher names, so we will use the 'teacher' table.", "We need to find out how many courses each teacher teaches, which requires joining the 'teacher' table with the 'course_arrange' table.", "The join condition is based on the Teacher_ID, which is common in both tables.", "We will group the results by Teacher_ID to count the number of courses each teacher teaches.", "We will use the HAVING clause to filter out teachers who teach less than two courses."], "pred_sql": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID\nHAVING COUNT(ca.Course_ID) >= 2;", "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["course_arrange", "teacher"]}
{"sample_id": 408, "db_id": "course_teach", "question": "What are the names of the teachers who teach at least two courses?", "rationale": ["Identify the relevant tables: We need to find teacher names, so we will use the 'teacher' table.", "Determine the relationship: Teachers are linked to courses through the 'course_arrange' table.", "Join the tables: We will perform a JOIN between 'teacher' and 'course_arrange' on 'Teacher_ID'.", "Group the results: We need to group the results by 'Teacher_ID' to count the number of courses each teacher teaches.", "Filter the results: We will use the HAVING clause to filter for teachers who teach at least two courses (COUNT(ca.Course_ID) >= 2).", "Select the teacher names: Finally, we will select the 'Name' column from the 'teacher' table."], "pred_sql": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID\nHAVING COUNT(ca.Course_ID) >= 2;", "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["course_arrange", "teacher"]}
{"sample_id": 409, "db_id": "course_teach", "question": "List the names of teachers who have not been arranged to teach courses.", "rationale": ["Identify the table that contains teacher information, which is the 'teacher' table.", "We need to find teachers who have not been assigned to any courses, which means we need to look for teachers whose IDs are not present in the 'course_arrange' table.", "Use a subquery to select all Teacher_IDs from the 'course_arrange' table.", "The main query will select the names of teachers from the 'teacher' table where their Teacher_ID is not in the list obtained from the subquery."], "pred_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "source_tables": ["course_arrange", "teacher"]}
{"sample_id": 410, "db_id": "course_teach", "question": "What are the names of the teachers whose courses have not been arranged?", "rationale": ["Identify the relevant tables: We need to look at the 'teacher' table for teacher names and the 'course_arrange' table to check for course arrangements.", "Determine the condition: We want to find teachers whose courses have not been arranged, which means we need to find teachers whose IDs are not present in the 'course_arrange' table.", "Construct the subquery: Create a subquery that selects all Teacher_IDs from the 'course_arrange' table, as these represent teachers with arranged courses.", "Use the NOT IN clause: In the main query, select teacher names from the 'teacher' table where the Teacher_ID is not in the list of Teacher_IDs returned by the subquery."], "pred_sql": "SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange);", "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "source_tables": ["course_arrange", "teacher"]}
{"sample_id": 411, "db_id": "museum_visit", "question": "How many visitors below age 30 are there?", "rationale": ["Identify the table that contains visitor information, which is the 'visitor' table.", "Determine the relevant column for age, which is 'Age'.", "Specify the condition to filter visitors below age 30 using 'WHERE Age < 30'.", "Use the COUNT() function to count the number of visitors that meet the condition.", "Construct the SQL query to select the count from the 'visitor' table with the specified condition."], "pred_sql": "SELECT COUNT(*) AS Visitor_Count FROM visitor WHERE Age < 30;", "gold_sql": "SELECT count(*) FROM visitor WHERE age  <  30", "source_tables": ["visitor"]}
{"sample_id": 412, "db_id": "museum_visit", "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "rationale": ["Identify the table that contains the relevant information about visitors, which is the 'visitor' table.", "Determine the specific columns needed for the query: we need the 'Name' of the visitors and the 'Level_of_membership' to filter and sort the results.", "Construct the WHERE clause to filter visitors with a 'Level_of_membership' greater than 4.", "Add an ORDER BY clause to sort the results by 'Level_of_membership' in descending order (from high to low).", "Combine all parts to form the complete SQL query."], "pred_sql": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;", "gold_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "source_tables": ["visitor"]}
{"sample_id": 413, "db_id": "museum_visit", "question": "What is the average age of the visitors whose membership level is not higher than 4?", "rationale": ["Identify the table that contains the relevant data: the 'visitor' table holds information about visitors including their age and membership level.", "Determine the specific columns needed for the query: we need the 'Age' column to calculate the average and the 'Level_of_membership' column to filter the visitors.", "Formulate the condition for filtering: we want to include only those visitors whose membership level is not higher than 4, which translates to 'Level_of_membership <= 4'.", "Use the AVG() function to calculate the average age of the filtered visitors.", "Construct the SQL query to select the average age from the 'visitor' table with the specified condition."], "pred_sql": "SELECT AVG(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4;", "gold_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "source_tables": ["visitor"]}
{"sample_id": 414, "db_id": "museum_visit", "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "rationale": ["Identify the columns needed: 'Name' and 'Level_of_membership' from the 'visitor' table.", "Set the condition to filter visitors with a membership level greater than 4.", "Sort the results by 'Age' in descending order to get the oldest visitors first."], "pred_sql": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;", "gold_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "source_tables": ["visitor"]}
{"sample_id": 415, "db_id": "museum_visit", "question": "Find the id and name of the museum that has the most staff members?", "rationale": ["Identify the relevant table: The query requires information about museums, so we will use the 'museum' table.", "Determine the columns needed: We need the 'Museum_ID' and 'Name' of the museum, as well as the number of staff to determine which museum has the most staff.", "Sort the results: To find the museum with the most staff, we will sort the results by 'Num_of_Staff' in descending order.", "Limit the results: Since we only want the museum with the most staff, we will limit the results to 1."], "pred_sql": "SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;", "gold_sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "source_tables": ["museum"]}
{"sample_id": 416, "db_id": "museum_visit", "question": "Find the average number of staff working for the museums that were open before 2009.", "rationale": ["Identify the relevant table: The 'museum' table contains information about the museums, including the number of staff and the year they opened.", "Determine the condition: We need to find museums that were open before 2009, which means we will filter the records based on the 'Open_Year' column.", "Calculate the average: We will use the AVG() function to calculate the average number of staff. Since 'Num_of_Staff' is stored as text, we need to cast it to an integer for the calculation.", "Construct the SQL query: Combine the SELECT statement with the AVG function, the FROM clause to specify the 'museum' table, and the WHERE clause to filter museums opened before 2009."], "pred_sql": "SELECT AVG(CAST(Num_of_Staff AS INTEGER)) AS Average_Staff FROM museum WHERE CAST(Open_Year AS INTEGER) < 2009;", "gold_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "source_tables": ["museum"]}
{"sample_id": 417, "db_id": "museum_visit", "question": "What are the opening year and staff number of the museum named Plaza Museum?", "rationale": ["Identify the relevant table: The query is asking for information about a museum, so we will use the 'museum' table.", "Determine the columns needed: The query requests the opening year and the number of staff, which correspond to the 'Open_Year' and 'Num_of_Staff' columns in the 'museum' table.", "Specify the condition: We need to filter the results to only include the museum named 'Plaza Museum', which will be done using a WHERE clause.", "Construct the SQL query: Combine the selected columns, the table name, and the condition into a complete SQL statement."], "pred_sql": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';", "gold_sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "source_tables": ["museum"]}
{"sample_id": 418, "db_id": "museum_visit", "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "rationale": ["Identify the requirement: We need to find museum names with more staff than the minimum staff number of museums opened after 2010.", "Determine the subquery: We need to find the minimum number of staff from the museums that were established after 2010. This requires a subquery that selects the minimum from the 'Num_of_Staff' column where 'Open_Year' is greater than 2010.", "Construct the main query: The main query will select the 'Name' of museums from the 'museum' table where the 'Num_of_Staff' is greater than the result of the subquery.", "Combine the subquery with the main query to form the complete SQL statement."], "pred_sql": "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')", "gold_sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "source_tables": ["museum"]}
{"sample_id": 419, "db_id": "museum_visit", "question": "find the id, name and age for visitors who visited some museums more than once.", "rationale": ["We need to find visitors who have visited museums more than once.", "To do this, we will join the 'visitor' table with the 'visit' table on the visitor's ID.", "We will select the visitor's ID, name, and age from the 'visitor' table.", "To find visitors who visited more than once, we will group the results by visitor ID.", "We will use the HAVING clause to filter groups where the count of museum visits is greater than 1."], "pred_sql": "SELECT v.ID, v.Name, v.Age \nFROM visitor v \nJOIN visit vi ON v.ID = vi.visitor_ID \nGROUP BY v.ID \nHAVING COUNT(vi.Museum_ID) > 1;", "gold_sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "source_tables": ["visit", "visitor"]}
{"sample_id": 420, "db_id": "museum_visit", "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "rationale": ["Identify the relevant tables: 'visitor' for visitor details and 'visit' for spending information.", "We need to select the visitor's ID, Name, and Level_of_membership, so we will include these columns in the SELECT statement.", "To find the total amount spent by each visitor, we will join the 'visitor' table with the 'visit' table on the visitor's ID.", "We will use the SUM function to calculate the total amount spent by each visitor during their visits.", "To group the results by each visitor, we will use the GROUP BY clause on the visitor's ID, Name, and Level_of_membership.", "To find the visitor who has spent the most, we will order the results in descending order based on the total spent.", "Finally, we will limit the results to only the top visitor using the LIMIT clause."], "pred_sql": "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership\nFROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nGROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership\nORDER BY SUM(visit.Total_spent) DESC\nLIMIT 1;", "gold_sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "source_tables": ["visit", "visitor"]}
{"sample_id": 421, "db_id": "museum_visit", "question": "What are the id and name of the museum visited most times?", "rationale": ["Identify the columns needed: 'Museum_ID' and 'Name' from the 'museum' table.", "To find the museum visited most times, we need to count the number of visits for each museum. This can be done using the 'visit' table, grouping by 'Museum_ID'.", "Use the COUNT function to count the number of visits for each museum.", "Order the results by the count in descending order to get the most visited museum at the top.", "Limit the results to 1 to get only the museum with the highest count.", "Join this result back to the 'museum' table to get the corresponding 'Name' of the museum."], "pred_sql": "SELECT Museum_ID, Name FROM museum WHERE Museum_ID = (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(visitor_ID) DESC LIMIT 1);", "gold_sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["museum", "visit"]}
{"sample_id": 422, "db_id": "museum_visit", "question": "What is the name of the museum that had no visitor yet?", "rationale": ["Identify the table that contains the museum information, which is the 'museum' table.", "We need to find museums that have not had any visitors, which means we need to check the 'visit' table for any entries related to each museum.", "To find museums with no visitors, we can use a subquery that selects all Museum_IDs from the 'visit' table.", "We will then select the names of museums from the 'museum' table where their Museum_ID is not in the list of Museum_IDs returned by the subquery."], "pred_sql": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);", "gold_sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "source_tables": ["museum", "visit"]}
{"sample_id": 423, "db_id": "museum_visit", "question": "Find the name and age of the visitor who bought the most tickets at once.", "rationale": ["Identify the relevant tables: 'visitor' for visitor details and 'visit' for ticket purchase details.", "We need to find the visitor who bought the most tickets, so we will join the 'visitor' table with the 'visit' table on the visitor ID.", "Select the 'Name' and 'Age' columns from the 'visitor' table.", "To find the visitor who bought the most tickets, we will order the results by 'Num_of_Ticket' in descending order.", "Limit the results to 1 to get only the visitor who bought the most tickets."], "pred_sql": "SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID ORDER BY vi.Num_of_Ticket DESC LIMIT 1;", "gold_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "source_tables": ["visit", "visitor"]}
{"sample_id": 424, "db_id": "museum_visit", "question": "What are the average and maximum number of tickets bought in all visits?", "rationale": ["Identify the relevant table: The 'visit' table contains the 'Num_of_Ticket' column which is needed for the query.", "Determine the required calculations: We need to calculate the average and maximum number of tickets bought.", "Use aggregate functions: Use AVG() to calculate the average and MAX() to find the maximum number of tickets.", "Construct the SQL query: Combine the selected columns and aggregate functions in a SELECT statement."], "pred_sql": "SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM visit;", "gold_sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "source_tables": ["visit"]}
{"sample_id": 425, "db_id": "museum_visit", "question": "What is the total ticket expense of the visitors whose membership level is 1?", "rationale": ["Identify the relevant tables: 'visit' for ticket expenses and 'visitor' for membership levels.", "Determine the relationship between the tables: 'visitor.ID' is linked to 'visit.visitor_ID'.", "Filter the visitors based on the membership level, specifically those with Level_of_membership = 1.", "Calculate the total ticket expense by summing the 'Total_spent' column from the 'visit' table for the filtered visitors."], "pred_sql": "SELECT SUM(visit.Total_spent) AS Total_Ticket_Expense\nFROM visit\nJOIN visitor ON visit.visitor_ID = visitor.ID\nWHERE visitor.Level_of_membership = 1;", "gold_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "source_tables": ["visit", "visitor"]}
{"sample_id": 426, "db_id": "museum_visit", "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "rationale": ["Identify the visitor's name from the visitor table.", "Join the visitor table with the visit table to link visitors to their visits.", "Join the visit table with the museum table to access the museum's opening year.", "Filter for museums opened before 2009 using a WHERE clause.", "Use a subquery to find visitors who have also visited museums opened after 2011.", "The subquery selects visitor IDs from the visit table where the associated museum was opened after 2011.", "Use the IN clause to ensure that the visitor has visited both types of museums (before 2009 and after 2011).", "Select distinct visitor names to avoid duplicates in the final result."], "pred_sql": "SELECT DISTINCT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year < '2009' AND v.ID IN (\n    SELECT vi2.visitor_ID\n    FROM visit vi2\n    JOIN museum m2 ON vi2.Museum_ID = m2.Museum_ID\n    WHERE m2.Open_Year > '2011'\n)", "gold_sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "source_tables": ["museum", "visit", "visitor"]}
{"sample_id": 427, "db_id": "museum_visit", "question": "Find the number of visitors who did not visit any museum opened after 2010.", "rationale": ["Identify the visitors who have not visited any museum opened after 2010.", "To do this, we need to find the visitor IDs from the 'visit' table that correspond to museums opened after 2010.", "We will join the 'visit' table with the 'museum' table on the 'Museum_ID' to filter out the relevant museums.", "Next, we will use a subquery to get the distinct visitor IDs that visited those museums.", "Finally, we will count the total number of distinct visitors from the 'visitor' table whose IDs are not in the list obtained from the subquery."], "pred_sql": "SELECT COUNT(DISTINCT v.ID) AS num_of_visitors\nFROM visitor v\nWHERE v.ID NOT IN (\n    SELECT DISTINCT vi.visitor_ID\n    FROM visit vi\n    JOIN museum m ON vi.Museum_ID = m.Museum_ID\n    WHERE m.Open_Year > '2010'\n);", "gold_sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "source_tables": ["museum", "visit", "visitor"]}
{"sample_id": 428, "db_id": "museum_visit", "question": "How many museums were opened after 2013 or before 2008?", "rationale": ["Identify the relevant table: The query pertains to the 'museum' table since it involves the year the museums were opened.", "Determine the condition for filtering: We need to count museums that were opened after 2013 or before 2008.", "Construct the SQL query: Use the COUNT function to count the number of records that meet the specified conditions.", "Use the WHERE clause to filter the records based on the Open_Year column with the conditions specified in the input query."], "pred_sql": "SELECT COUNT(*) AS Museum_Count FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';", "gold_sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "source_tables": ["museum"]}
{"sample_id": 429, "db_id": "wta_1", "question": "Find the total number of players.", "rationale": ["Identify the requirement: We need to find the total number of players.", "Determine the relevant table: The 'players' table contains the information about players.", "Use the COUNT() function to count the number of entries in the 'players' table.", "Construct the SQL query to select the count from the 'players' table."], "pred_sql": "SELECT COUNT(*) AS total_players FROM players;", "gold_sql": "SELECT count(*) FROM players", "source_tables": ["players"]}
{"sample_id": 430, "db_id": "wta_1", "question": "How many players are there?", "rationale": ["Identify the requirement to count the number of players in the database.", "Determine the relevant table, which is 'players', as it contains the player information.", "Use the COUNT() function to count the total number of entries in the 'players' table.", "Construct the SQL query to select the count from the 'players' table."], "pred_sql": "SELECT COUNT(*) AS player_count FROM players;", "gold_sql": "SELECT count(*) FROM players", "source_tables": ["players"]}
{"sample_id": 431, "db_id": "wta_1", "question": "Find the total number of matches.", "rationale": ["Identify the requirement: We need to find the total number of matches.", "Determine the relevant table: The 'matches' table contains all the match records.", "Use the COUNT() function to count the total number of entries in the 'matches' table.", "Construct the SQL query to select the count from the matches table."], "pred_sql": "SELECT COUNT(*) AS total_matches FROM matches;", "gold_sql": "SELECT count(*) FROM matches", "source_tables": ["matches"]}
{"sample_id": 432, "db_id": "wta_1", "question": "Count the number of matches.", "rationale": ["Identify the requirement to count the number of matches.", "Determine the appropriate table to query, which is the 'matches' table.", "Use the COUNT() function to count all entries in the 'matches' table.", "Construct the SQL query to select the count from the matches table."], "pred_sql": "SELECT COUNT(*) AS match_count FROM matches;", "gold_sql": "SELECT count(*) FROM matches", "source_tables": ["matches"]}
{"sample_id": 433, "db_id": "wta_1", "question": "List the first name and birth date of all players from the country with code USA.", "rationale": ["Identify the table that contains player information, which is the 'players' table.", "Determine the columns needed for the output, which are 'first_name' and 'birth_date'.", "Filter the results to include only players from the country with the code 'USA'.", "Construct the SQL query using the SELECT statement to retrieve the specified columns from the 'players' table with the appropriate WHERE clause."], "pred_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';", "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "source_tables": ["players"]}
{"sample_id": 434, "db_id": "wta_1", "question": "What are the first names and birth dates of players from the USA?", "rationale": ["Identify the relevant table: The 'players' table contains the information about players, including their first names and birth dates.", "Determine the columns needed: We need 'first_name' and 'birth_date' from the 'players' table.", "Specify the condition: We want players from the USA, which is represented by the 'country_code' column.", "Construct the SQL query: Use a SELECT statement to retrieve the specified columns from the 'players' table where the 'country_code' is 'USA'."], "pred_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';", "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "source_tables": ["players"]}
{"sample_id": 435, "db_id": "wta_1", "question": "Find the average age of losers and winners of all matches.", "rationale": ["Identify the relevant columns: 'winner_age' and 'loser_age' from the 'matches' table.", "Use the AVG() function to calculate the average age of winners and losers.", "Select both averages in a single query using a SELECT statement."], "pred_sql": "SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;", "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "source_tables": ["matches"]}
{"sample_id": 436, "db_id": "wta_1", "question": "What are the average ages of losers and winners across matches?", "rationale": ["Identify the relevant columns for the average ages of winners and losers, which are 'winner_age' and 'loser_age' from the 'matches' table.", "Use the AVG() function to calculate the average for both 'winner_age' and 'loser_age'.", "Select both averages in the same query to get the results in one output.", "Construct the SQL query to select the averages from the matches table."], "pred_sql": "SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;", "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "source_tables": ["matches"]}
{"sample_id": 437, "db_id": "wta_1", "question": "Find the average rank of winners in all matches.", "rationale": ["Identify the relevant table: The 'matches' table contains the information about the winners and their ranks.", "Determine the required calculation: We need to calculate the average of the 'winner_rank' column.", "Construct the SQL query: Use the AVG() function to compute the average of 'winner_rank' from the 'matches' table."], "pred_sql": "SELECT AVG(winner_rank) AS average_winner_rank FROM matches;", "gold_sql": "SELECT avg(winner_rank) FROM matches", "source_tables": ["matches"]}
{"sample_id": 438, "db_id": "wta_1", "question": "What is the average rank for winners in all matches?", "rationale": ["Identify the relevant table: The 'matches' table contains the information about the winners and their ranks.", "Determine the required calculation: We need to calculate the average rank of the winners.", "Use the AVG() function: This function will help us compute the average of the 'winner_rank' column.", "Construct the SQL query: We will select the average of 'winner_rank' from the 'matches' table."], "pred_sql": "SELECT AVG(winner_rank) AS average_winner_rank FROM matches;", "gold_sql": "SELECT avg(winner_rank) FROM matches", "source_tables": ["matches"]}
{"sample_id": 439, "db_id": "wta_1", "question": "Find the highest rank of losers in all matches.", "rationale": ["Identify the relevant table: The 'matches' table contains information about the losing players, including their ranks.", "Determine the specific column needed: We need the 'loser_rank' column to find the highest rank of the losers.", "Use the MAX() function: To find the highest rank, we can use the SQL aggregate function MAX() on the 'loser_rank' column.", "Construct the SQL query: The query will select the maximum value of 'loser_rank' from the 'matches' table."], "pred_sql": "SELECT MAX(loser_rank) AS highest_rank FROM matches;", "gold_sql": "SELECT min(loser_rank) FROM matches", "source_tables": ["matches"]}
{"sample_id": 440, "db_id": "wta_1", "question": "What is the best rank of losers across all matches?", "rationale": ["Identify the relevant table: The 'matches' table contains information about the losing players, including their ranks.", "Determine the specific column needed: We need the 'loser_rank' column to find the best rank of losers.", "Use an aggregate function: To find the best rank, we can use the MIN() function on the 'loser_rank' column, as a lower rank number indicates a better rank.", "Construct the SQL query: The query will select the minimum loser rank from the matches table."], "pred_sql": "SELECT MIN(loser_rank) AS best_rank FROM matches;", "gold_sql": "SELECT min(loser_rank) FROM matches", "source_tables": ["matches"]}
{"sample_id": 441, "db_id": "wta_1", "question": "find the number of distinct country codes of all players.", "rationale": ["Identify the table that contains the relevant data: the 'players' table holds the 'country_code' column.", "Determine the requirement: we need to find the number of distinct country codes.", "Use the COUNT function to count the distinct values in the 'country_code' column.", "Construct the SQL query to select the count of distinct country codes from the 'players' table."], "pred_sql": "SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;", "gold_sql": "SELECT count(DISTINCT country_code) FROM players", "source_tables": ["players"]}
{"sample_id": 442, "db_id": "wta_1", "question": "How many distinct countries do players come from?", "rationale": ["Identify the table that contains the relevant information about players' countries, which is the 'players' table.", "Determine the column that holds the country information, which is 'country_code'.", "Use the COUNT function to count the number of distinct entries in the 'country_code' column.", "Construct the SQL query to select the count of distinct country codes from the players table."], "pred_sql": "SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;", "gold_sql": "SELECT count(DISTINCT country_code) FROM players", "source_tables": ["players"]}
{"sample_id": 443, "db_id": "wta_1", "question": "Find the number of distinct name of losers.", "rationale": ["Identify the table that contains the information about losers, which is the 'matches' table.", "Determine the column that holds the names of the losers, which is 'loser_name'.", "To find the number of distinct names, use the COUNT function along with DISTINCT on the 'loser_name' column.", "Construct the SQL query to select the count of distinct loser names from the matches table."], "pred_sql": "SELECT COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches;", "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches", "source_tables": ["matches"]}
{"sample_id": 444, "db_id": "wta_1", "question": "How many different loser names are there?", "rationale": ["Identify the table that contains the information about loser names, which is the 'matches' table.", "To find the number of different loser names, we need to count distinct values in the 'loser_name' column.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique names.", "The final SQL query will select the count of distinct loser names from the matches table."], "pred_sql": "SELECT COUNT(DISTINCT loser_name) AS different_loser_names FROM matches;", "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches", "source_tables": ["matches"]}
{"sample_id": 445, "db_id": "wta_1", "question": "Find the name of tourney that has more than 10 matches.", "rationale": ["Identify the relevant table: The 'matches' table contains information about the tournaments and matches.", "Determine the required information: We need the 'tourney_name' for tournaments with more than 10 matches.", "Group the results by 'tourney_name' to aggregate the matches for each tournament.", "Use the COUNT function to count the number of matches for each tournament.", "Apply the HAVING clause to filter the results to only include tournaments with more than 10 matches."], "pred_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;", "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "source_tables": ["matches"]}
{"sample_id": 446, "db_id": "wta_1", "question": "What are the names of tournaments that have more than 10 matches?", "rationale": ["Identify the relevant table: The 'matches' table contains information about tournaments and matches.", "Determine the required information: We need the names of tournaments, which are stored in the 'tourney_name' column.", "Count the number of matches for each tournament: Use the COUNT() function to count matches grouped by 'tourney_name'.", "Filter the results: Use the HAVING clause to only include tournaments with more than 10 matches."], "pred_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;", "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "source_tables": ["matches"]}
{"sample_id": 447, "db_id": "wta_1", "question": "List the names of all winners who played in both 2013 and 2016.", "rationale": ["Identify the requirement to list names of winners who played in both 2013 and 2016.", "Determine that we need to select distinct winner names from the matches table.", "Use a WHERE clause to filter matches for the years 2013 and 2016.", "To ensure the winners played in both years, use subqueries to check for winner_ids that exist in both years.", "Combine the results to get the distinct names of winners who meet the criteria."], "pred_sql": "SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016) AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016);", "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "source_tables": ["matches"]}
{"sample_id": 448, "db_id": "wta_1", "question": "What are the names of players who won in both 2013 and 2016?", "rationale": ["Identify the requirement to find players who won matches in both 2013 and 2016.", "The 'matches' table contains the information about the winners and the year of the matches.", "We need to select distinct winner names from the matches table where the year is either 2013 or 2016.", "To ensure that we only get players who won in both years, we can use subqueries to check for winners in each year.", "The first subquery selects winner_ids for the year 2013, and the second subquery selects winner_ids for the year 2016.", "We then filter the main query to include only those winner_ids that appear in both subqueries."], "pred_sql": "SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016) AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016);", "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "source_tables": ["matches"]}
{"sample_id": 449, "db_id": "wta_1", "question": "List the number of all matches who played in years of 2013 or 2016.", "rationale": ["Identify the relevant table: The 'matches' table contains information about the matches played.", "Determine the requirement: We need to count the number of matches played in the years 2013 or 2016.", "Use the COUNT() function to count the total number of matches.", "Filter the results using a WHERE clause to include only the years 2013 and 2016 using the IN operator."], "pred_sql": "SELECT COUNT(*) AS total_matches FROM matches WHERE year IN (2013, 2016);", "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "source_tables": ["matches"]}
{"sample_id": 450, "db_id": "wta_1", "question": "How many matches were played in 2013 or 2016?", "rationale": ["Identify the relevant table: The 'matches' table contains information about the matches played, including the year.", "Determine the condition: We need to count matches played in the years 2013 or 2016.", "Use the COUNT function: To get the total number of matches, we will use the COUNT(*) function.", "Specify the filtering criteria: We will filter the results using a WHERE clause to include only those matches where the year is either 2013 or 2016.", "Construct the SQL query: Combine all the elements into a complete SQL query that counts the matches for the specified years."], "pred_sql": "SELECT COUNT(*) AS match_count FROM matches WHERE year IN (2013, 2016);", "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "source_tables": ["matches"]}
{"sample_id": 451, "db_id": "wta_1", "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "rationale": ["Identify the relevant tables: players and matches.", "We need to find players who won matches in two specific tournaments: WTA Championships and Australian Open.", "Join the players table with the matches table on the winner_id to get the winners' details.", "Filter the results to include only those matches that are in the specified tournaments using a WHERE clause.", "Group the results by player_id to aggregate the matches won by each player.", "Use HAVING clause to ensure that only players who have won in both tournaments (count of distinct tournament names = 2) are included."], "pred_sql": "SELECT DISTINCT p.country_code, p.first_name \nFROM players p \nJOIN matches m ON p.player_id = m.winner_id \nWHERE m.tourney_name IN ('WTA Championships', 'Australian Open') \nGROUP BY p.player_id \nHAVING COUNT(DISTINCT m.tourney_name) = 2;", "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "source_tables": ["matches", "players"]}
{"sample_id": 452, "db_id": "wta_1", "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "rationale": ["Identify the required columns: first names and country codes of players.", "Determine the relevant tables: players and matches.", "Players who won matches are identified by their player_id in the matches table as winner_id.", "Join the players table with the matches table to get the winners of specific tournaments.", "Use two joins on the matches table to find players who won both the WTA Championships and the Australian Open.", "Filter the results by specifying the tournament names in the WHERE clause."], "pred_sql": "SELECT DISTINCT p.first_name, p.country_code \nFROM players p \nJOIN matches m1 ON p.player_id = m1.winner_id \nJOIN matches m2 ON p.player_id = m2.winner_id \nWHERE m1.tourney_name = 'WTA Championships' \nAND m2.tourney_name = 'Australian Open';", "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "source_tables": ["matches", "players"]}
{"sample_id": 453, "db_id": "wta_1", "question": "Find the first name and country code of the oldest player.", "rationale": ["Identify the relevant table: The 'players' table contains the information about players including their first names and country codes.", "Determine the required fields: We need to select 'first_name' and 'country_code' from the 'players' table.", "Find the oldest player: To find the oldest player, we can order the results by 'birth_date' in ascending order, as the earliest birth date corresponds to the oldest player.", "Limit the results: Since we only need the oldest player, we will limit the results to 1 using 'LIMIT 1'."], "pred_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;", "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "source_tables": ["players"]}
{"sample_id": 454, "db_id": "wta_1", "question": "What is the first name and country code of the oldest player?", "rationale": ["Identify the relevant table: The 'players' table contains the information about players including their first names and country codes.", "Determine the required fields: We need the 'first_name' and 'country_code' of the players.", "Find the oldest player: To find the oldest player, we can order the players by their 'birth_date' in ascending order (earliest birth date first).", "Limit the results to one entry: Since we only want the oldest player, we will use 'LIMIT 1' to get just one record."], "pred_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;", "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "source_tables": ["players"]}
{"sample_id": 455, "db_id": "wta_1", "question": "List the first and last name of all players in the order of birth date.", "rationale": ["Identify the table that contains player information, which is the 'players' table.", "Determine the columns needed for the output, which are 'first_name' and 'last_name'.", "Specify the order in which the results should be sorted, which is by 'birth_date'.", "Construct the SQL query to select the required columns from the 'players' table and order the results by 'birth_date'."], "pred_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date;", "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "source_tables": ["players"]}
{"sample_id": 456, "db_id": "wta_1", "question": "What are the full names of all players, sorted by birth date?", "rationale": ["Identify the table that contains player information, which is the 'players' table.", "Determine the columns needed to get the full names of the players, which are 'first_name' and 'last_name'.", "Use the SQL concatenation operator '||' to combine 'first_name' and 'last_name' into a single column called 'full_name'.", "Sort the results by 'birth_date' to meet the requirement of sorting by birth date."], "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;", "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "source_tables": ["players"]}
{"sample_id": 457, "db_id": "wta_1", "question": "List the first and last name of all players who are left / L hand in the order of birth date.", "rationale": ["Identify the table that contains player information, which is the 'players' table.", "Determine the columns needed for the output, which are 'first_name' and 'last_name'.", "Specify the condition to filter players based on their hand preference, which is 'left' or 'L'.", "Add an ORDER BY clause to sort the results by 'birth_date' in ascending order."], "pred_sql": "SELECT first_name, last_name FROM players WHERE hand = 'left' OR hand = 'L' ORDER BY birth_date;", "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "source_tables": ["players"]}
{"sample_id": 458, "db_id": "wta_1", "question": "What are the full names of all left handed players, in order of birth date?", "rationale": ["Identify the table that contains player information, which is the 'players' table.", "Select the columns needed for the output: 'first_name' and 'last_name' to create full names.", "Use the concatenation operator '||' to combine 'first_name' and 'last_name' into a single column named 'full_name'.", "Filter the results to include only players who are left-handed by adding a WHERE clause with 'hand = 'left''.", "Order the results by 'birth_date' to get the players in chronological order of their birth."], "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date;", "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "source_tables": ["players"]}
{"sample_id": 459, "db_id": "wta_1", "question": "Find the first name and country code of the player who did the most number of tours.", "rationale": ["Identify the relevant tables: players and rankings.", "We need the first name and country code from the players table, and the tours from the rankings table.", "Join the players table with the rankings table on player_id to access both players' information and their tours.", "Group the results by player_id to aggregate the number of tours for each player.", "Order the results by the count of tours in descending order to find the player with the most tours.", "Limit the results to 1 to get only the top player."], "pred_sql": "SELECT p.first_name, p.country_code\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.player_id\nORDER BY COUNT(r.tours) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "source_tables": ["rankings", "players"]}
{"sample_id": 460, "db_id": "wta_1", "question": "What is the first name and country code of the player with the most tours?", "rationale": ["Identify the relevant tables: players and rankings.", "Determine the columns needed: first_name and country_code from players.", "Find the player with the most tours by ordering the rankings table by the tours column in descending order and limiting the result to 1.", "Use a subquery to get the player_id of the player with the most tours.", "Select the first_name and country_code from the players table where the player_id matches the result of the subquery."], "pred_sql": "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours DESC LIMIT 1)", "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "source_tables": ["rankings", "players"]}
{"sample_id": 461, "db_id": "wta_1", "question": "Find the year that has the most number of matches.", "rationale": ["Identify the table that contains the relevant data, which is the 'matches' table.", "We need to count the number of matches for each year, so we will use the COUNT() function.", "To group the matches by year, we will use the GROUP BY clause on the 'year' column.", "To find the year with the most matches, we will order the results in descending order based on the count of matches.", "Finally, we will limit the results to only the top entry using LIMIT 1."], "pred_sql": "SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;", "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}
{"sample_id": 462, "db_id": "wta_1", "question": "Which year had the most matches?", "rationale": ["Identify the relevant table: The 'matches' table contains the 'year' column which is needed to determine the year of the matches.", "Count the number of matches for each year: Use the COUNT() function to count the number of matches grouped by the 'year' column.", "Group the results by year: Use GROUP BY to aggregate the match counts for each year.", "Order the results: Use ORDER BY to sort the results in descending order based on the match count.", "Limit the results to the top entry: Use LIMIT 1 to get only the year with the most matches."], "pred_sql": "SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;", "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}
{"sample_id": 463, "db_id": "wta_1", "question": "Find the name and rank points of the winner who won the most times.", "rationale": ["Identify the relevant columns needed for the query: 'winner_name' and 'winner_rank_points' from the 'matches' table.", "To find the winner who won the most times, we need to group the results by 'winner_id' to count the number of wins for each player.", "Use the COUNT function to count the number of matches won by each player.", "Order the results in descending order based on the count of wins to get the player with the most wins at the top.", "Limit the results to 1 to get only the top winner."], "pred_sql": "SELECT winner_name, winner_rank_points \nFROM matches \nGROUP BY winner_id \nORDER BY COUNT(winner_id) DESC \nLIMIT 1;", "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}
{"sample_id": 464, "db_id": "wta_1", "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "rationale": ["Identify the relevant tables: 'matches' for match results and 'players' for player information.", "We need to find the winner who has won the most matches, so we will group the results by 'winner_id' and count the number of matches won.", "To get the winner's name, we will join the 'matches' table with the 'players' table on 'winner_id'.", "We also need to retrieve the ranking points of the winner, which are stored in the 'rankings' table, so we will join the 'rankings' table as well.", "We will select the 'winner_name' and the maximum 'winner_rank_points' for the winner with the most matches.", "Finally, we will order the results by the count of matches won in descending order and limit the result to 1 to get the top winner."], "pred_sql": "SELECT winner_name, MAX(winner_rank_points) AS rank_points\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nGROUP BY winner_id\nORDER BY COUNT(*) DESC\nLIMIT 1;", "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}
{"sample_id": 465, "db_id": "wta_1", "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "rationale": ["Identify the relevant table: The 'matches' table contains information about the winners and their rank points.", "Filter the matches to only include those from the 'Australian Open' tournament by using a WHERE clause on the 'tourney_name' column.", "Order the results by 'winner_rank_points' in descending order to get the winner with the highest rank points.", "Limit the results to 1 to get only the top winner."], "pred_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;", "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "source_tables": ["matches"]}
{"sample_id": 466, "db_id": "wta_1", "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "rationale": ["Identify the relevant table: The 'matches' table contains information about the tournament and the winners.", "Filter for the Australian Open tournament: Use a WHERE clause to specify that we are only interested in matches from the 'Australian Open'.", "Order the results by the winner's rank points: Use ORDER BY to sort the results based on the 'winner_rank_points' in descending order to get the player with the most rank points.", "Limit the results to one: Use LIMIT 1 to ensure we only get the top result, which is the winner with the most rank points."], "pred_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;", "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "source_tables": ["matches"]}
{"sample_id": 467, "db_id": "wta_1", "question": "find the names of loser and winner who played in the match with greatest number of minutes.", "rationale": ["Identify the columns needed: winner_name and loser_name from the matches table.", "Determine the condition: we need to find the match with the greatest number of minutes.", "Use a subquery to find the maximum minutes from the matches table.", "Select the winner_name and loser_name from the matches table where the minutes equal the maximum minutes found in the subquery."], "pred_sql": "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)", "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "source_tables": ["matches"]}
{"sample_id": 468, "db_id": "wta_1", "question": "What are the names of the winner and loser who played in the longest match?", "rationale": ["Identify the relevant columns needed for the query: 'winner_name' and 'loser_name' from the 'matches' table.", "Determine the criteria for the longest match, which is based on the 'minutes' column in the 'matches' table.", "Sort the matches by the 'minutes' column in descending order to get the longest match at the top.", "Limit the results to 1 to get only the longest match's winner and loser names."], "pred_sql": "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;", "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "source_tables": ["matches"]}
{"sample_id": 469, "db_id": "wta_1", "question": "Find the average ranking for each player and their first name.", "rationale": ["Identify the required data: We need the average ranking and the first name of each player.", "Determine the tables involved: The 'players' table contains player names, and the 'rankings' table contains ranking information.", "Join the tables: We will join 'players' and 'rankings' on the 'player_id' column to associate players with their rankings.", "Calculate the average ranking: Use the AVG() function to compute the average ranking for each player.", "Group the results: Use GROUP BY to group the results by player ID and first name to get the average ranking for each player."], "pred_sql": "SELECT players.first_name, AVG(CAST(rankings.ranking AS FLOAT)) AS average_ranking\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id, players.first_name;", "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["rankings", "players"]}
{"sample_id": 470, "db_id": "wta_1", "question": "What are the first names of all players, and their average rankings?", "rationale": ["Identify the required data: first names of players and their average rankings.", "The first names are in the 'players' table under the 'first_name' column.", "The rankings are in the 'rankings' table under the 'ranking' column, which needs to be averaged.", "To get the average ranking for each player, we need to join the 'players' table with the 'rankings' table on 'player_id'.", "Use the AVG() function to calculate the average ranking and GROUP BY 'first_name' to get the average for each player."], "pred_sql": "SELECT players.first_name, AVG(CAST(rankings.ranking AS FLOAT)) AS average_ranking\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name;", "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["rankings", "players"]}
{"sample_id": 471, "db_id": "wta_1", "question": "Find the total ranking points for each player and their first name.", "rationale": ["Identify the required columns: first name of the player and total ranking points.", "The first name is in the 'players' table and the ranking points are in the 'rankings' table.", "To get the total ranking points for each player, we need to sum the 'ranking_points' from the 'rankings' table.", "We will join the 'players' table with the 'rankings' table on the 'player_id' column, which is common to both tables.", "We will group the results by 'player_id' and 'first_name' to ensure we get the total points for each player individually."], "pred_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points \nFROM players \nJOIN rankings ON players.player_id = rankings.player_id \nGROUP BY players.player_id, players.first_name;", "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["rankings", "players"]}
{"sample_id": 472, "db_id": "wta_1", "question": "What are the first names of all players, and their total ranking points?", "rationale": ["Identify the columns needed: 'first_name' from the 'players' table and the total of 'ranking_points' from the 'rankings' table.", "To get the total ranking points for each player, we need to use the SUM function on 'ranking_points'.", "We need to join the 'players' table with the 'rankings' table on the 'player_id' column, as it is the common key between the two tables.", "We will group the results by 'first_name' to ensure we get the total ranking points for each player individually."], "pred_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points \nFROM players \nJOIN rankings ON players.player_id = rankings.player_id \nGROUP BY players.first_name;", "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["rankings", "players"]}
{"sample_id": 473, "db_id": "wta_1", "question": "find the number of players for each country.", "rationale": ["Identify the table that contains the relevant data: the 'players' table.", "Determine the columns needed: 'country_code' to group by and 'player_id' to count the number of players.", "Use the COUNT() function to count the number of players for each country.", "Group the results by 'country_code' to get the count for each country."], "pred_sql": "SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code;", "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "source_tables": ["players"]}
{"sample_id": 474, "db_id": "wta_1", "question": "How many players are from each country?", "rationale": ["Identify the relevant table: The 'players' table contains information about players, including their country code.", "Determine the required information: We need to count the number of players from each country, which means we need to group the results by the 'country_code' column.", "Use the COUNT() function: This function will help us count the number of players for each country.", "Construct the SQL query: We will select the 'country_code' and the count of 'player_id', and group the results by 'country_code'."], "pred_sql": "SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code;", "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "source_tables": ["players"]}
{"sample_id": 475, "db_id": "wta_1", "question": "find the code of the country where has the greatest number of players.", "rationale": ["Identify the relevant table: The 'players' table contains the 'country_code' and 'player_id' columns.", "Count the number of players for each country: Use the COUNT function to count 'player_id' grouped by 'country_code'.", "Order the results: Sort the results in descending order based on the count of players to find the country with the greatest number of players.", "Limit the results: Use LIMIT 1 to get only the top result, which represents the country with the most players."], "pred_sql": "SELECT country_code, COUNT(player_id) AS player_count \nFROM players \nGROUP BY country_code \nORDER BY player_count DESC \nLIMIT 1;", "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["players"]}
{"sample_id": 476, "db_id": "wta_1", "question": "What is the code of the country with the most players?", "rationale": ["Identify the relevant table: The 'players' table contains the 'country_code' and player information.", "Count the number of players for each country: Use COUNT(*) to count players grouped by 'country_code'.", "Group the results by 'country_code' to aggregate player counts for each country.", "Order the results in descending order based on the player count to find the country with the most players.", "Limit the results to 1 to get only the country with the highest count."], "pred_sql": "SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1;", "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["players"]}
{"sample_id": 477, "db_id": "wta_1", "question": "Find the codes of countries that have more than 50 players.", "rationale": ["Identify the relevant table: The 'players' table contains the 'country_code' and 'player_id' columns.", "Group the results by 'country_code' to aggregate the number of players from each country.", "Use the COUNT function to count the number of players (using 'player_id') for each country.", "Filter the results using the HAVING clause to include only those countries with more than 50 players."], "pred_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;", "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "source_tables": ["players"]}
{"sample_id": 478, "db_id": "wta_1", "question": "What are the codes of countries with more than 50 players?", "rationale": ["Identify the relevant table: The 'players' table contains the 'country_code' and 'player_id' columns.", "Group the results by 'country_code' to aggregate the number of players from each country.", "Use the COUNT function to count the number of players (player_id) for each country.", "Filter the results using the HAVING clause to include only those countries with more than 50 players."], "pred_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;", "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "source_tables": ["players"]}
{"sample_id": 479, "db_id": "wta_1", "question": "Find the total number of tours for each ranking date.", "rationale": ["Identify the relevant table: The 'rankings' table contains the 'ranking_date' and 'tours' columns needed for the query.", "Determine the required output: We need to find the total number of tours for each ranking date.", "Use the COUNT function: To count the number of tours for each ranking date, we will use the COUNT function.", "Group the results: Since we want the total number of tours for each ranking date, we will use the GROUP BY clause on 'ranking_date'.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;", "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}
{"sample_id": 480, "db_id": "wta_1", "question": "How many total tours were there for each ranking date?", "rationale": ["Identify the relevant table: The query requires information about tours and their counts, which is found in the 'rankings' table.", "Determine the columns needed: We need 'ranking_date' to group the results and 'tours' to count the distinct tours for each date.", "Use COUNT(DISTINCT tours) to get the total number of unique tours for each ranking date.", "Group the results by 'ranking_date' to get the count for each date."], "pred_sql": "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date;", "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}
{"sample_id": 481, "db_id": "wta_1", "question": "Find the number of matches happened in each year.", "rationale": ["Identify the relevant table: The 'matches' table contains information about each match, including the year it took place.", "Determine the required output: We need to count the number of matches for each year.", "Use the COUNT() function to count the matches: This function will count the number of rows (matches) for each year.", "Group the results by year: Use the GROUP BY clause to aggregate the counts for each distinct year.", "Select the year and the count: The final query should select the year and the count of matches as match_count."], "pred_sql": "SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;", "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}
{"sample_id": 482, "db_id": "wta_1", "question": "How many matches were played in each year?", "rationale": ["Identify the relevant table: The 'matches' table contains information about each match played, including the year.", "Determine the required output: We need to count the number of matches played in each year.", "Use the COUNT() function to count the matches and GROUP BY the 'year' column to aggregate the results by year.", "Construct the SQL query to select the year and the count of matches, grouping by year."], "pred_sql": "SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;", "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}
{"sample_id": 483, "db_id": "wta_1", "question": "Find the name and rank of the 3 youngest winners across all matches.", "rationale": ["Identify the relevant columns needed: 'winner_name' and 'winner_rank' from the 'matches' table.", "To find the youngest winners, we need to order the results by 'winner_age' in ascending order.", "Limit the results to the top 3 youngest winners using 'LIMIT 3'.", "Construct the SQL query to select the required columns, order by age, and limit the results."], "pred_sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;", "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "source_tables": ["matches"]}
{"sample_id": 484, "db_id": "wta_1", "question": "What are the names and ranks of the three youngest winners across all matches?", "rationale": ["Identify the relevant columns needed: winner_name and winner_rank from the matches table.", "To find the youngest winners, we need to sort the results by winner_age in ascending order.", "We will limit the results to the top 3 youngest winners using the LIMIT clause."], "pred_sql": "SELECT winner_name, winner_rank \nFROM matches \nORDER BY winner_age ASC \nLIMIT 3;", "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "source_tables": ["matches"]}
{"sample_id": 485, "db_id": "wta_1", "question": "How many different winners both participated in the WTA Championships and were left handed?", "rationale": ["Identify the relevant table: The 'matches' table contains information about match winners.", "Determine the criteria for selection: We need to find winners who participated in the 'WTA Championships' and are left-handed.", "Use the COUNT function to count distinct winners: We will count the unique 'winner_id' for the specified conditions.", "Construct the SQL query: The query will select the count of distinct 'winner_id' from the 'matches' table where the 'tourney_name' is 'WTA Championships' and 'winner_hand' is 'left'."], "pred_sql": "SELECT COUNT(DISTINCT winner_id) AS different_winners_count\nFROM matches\nWHERE tourney_name = 'WTA Championships' AND winner_hand = 'left';", "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "source_tables": ["matches"]}
{"sample_id": 486, "db_id": "wta_1", "question": "Find the number of left handed winners who participated in the WTA Championships.", "rationale": ["Identify the relevant tables: We need to look at the 'matches' table to find winners and the 'players' table to filter by hand preference.", "We need to count the number of distinct winners who are left-handed.", "To find left-handed winners, we will filter the 'players' table where 'hand' is 'left'.", "We also need to filter the matches to only include those that took place in the 'WTA Championships'.", "The final query will count the distinct 'winner_id' from the 'matches' table where the winner is left-handed and the tournament name is 'WTA Championships'."], "pred_sql": "SELECT COUNT(DISTINCT winner_id) AS left_handed_winners_count \nFROM matches \nWHERE winner_id IN (SELECT player_id FROM players WHERE hand = 'left') \nAND tourney_name = 'WTA Championships';", "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "source_tables": ["matches"]}
{"sample_id": 487, "db_id": "wta_1", "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "rationale": ["Identify the relevant tables: players, matches, and rankings.", "We need to find the winner of the matches, so we will join the players table with the matches table on the winner_id.", "To get the ranking points, we will also join the rankings table on player_id.", "We need to select the first name, country code, and birth date of the player.", "To find the player with the highest ranking points, we will order the results by ranking_points in descending order.", "Finally, we will limit the results to 1 to get only the top player."], "pred_sql": "SELECT p.first_name, p.country_code, p.birth_date \nFROM players p \nJOIN matches m ON p.player_id = m.winner_id \nJOIN rankings r ON p.player_id = r.player_id \nORDER BY r.ranking_points DESC \nLIMIT 1;", "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "source_tables": ["matches", "players"]}
{"sample_id": 488, "db_id": "wta_1", "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "rationale": ["Identify the relevant tables: players and matches.", "We need to retrieve the first name, country code, and birth date of players, which are in the players table.", "The winner's rank points are in the matches table, specifically in the winner_rank_points column.", "To find the player with the most winner rank points, we will join the players table with the matches table on the player_id and winner_id columns.", "We will order the results by winner_rank_points in descending order to get the player with the highest points at the top.", "Finally, we will limit the results to 1 to get only the top player."], "pred_sql": "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nORDER BY m.winner_rank_points DESC\nLIMIT 1;", "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "source_tables": ["matches", "players"]}
{"sample_id": 489, "db_id": "wta_1", "question": "Find the number of players for each hand type.", "rationale": ["Identify the table to query: The 'players' table contains the relevant data about players and their hand types.", "Determine the required output: We need to count the number of players for each hand type.", "Use the COUNT() function to count the players, and GROUP BY clause to group the results by the 'hand' column.", "Construct the SQL query to select the 'hand' column and the count of players, grouping by 'hand'."], "pred_sql": "SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;", "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "source_tables": ["players"]}
{"sample_id": 490, "db_id": "wta_1", "question": "How many players are there for each hand type?", "rationale": ["Identify the table that contains the relevant data, which is the 'players' table.", "Determine the columns needed for the query: 'hand' to group the players by their playing hand type and a count of players for each hand type.", "Use the COUNT() function to count the number of players for each hand type.", "Group the results by the 'hand' column to get the count for each distinct hand type."], "pred_sql": "SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;", "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "source_tables": ["players"]}
{"sample_id": 491, "db_id": "battle_death", "question": "How many ships ended up being 'Captured'?", "rationale": ["Identify the table that contains the information about ships, which is the 'ship' table.", "Determine the relevant column that indicates the status of the ship, which is 'disposition_of_ship'.", "Specify the condition to filter the ships that have been captured, which is 'disposition_of_ship = 'Captured'.", "Use the COUNT() function to count the number of ships that meet the specified condition."], "pred_sql": "SELECT COUNT(*) AS captured_ships_count FROM ship WHERE disposition_of_ship = 'Captured';", "gold_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "source_tables": ["ship"]}
{"sample_id": 492, "db_id": "battle_death", "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "rationale": ["Identify the table to query: The 'ship' table contains the 'name' and 'tonnage' columns.", "Select the required columns: We need to select 'name' and 'tonnage'.", "Specify the order: The names should be ordered in descending alphabetical order.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT name, tonnage FROM ship ORDER BY name DESC;", "gold_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "source_tables": ["ship"]}
{"sample_id": 493, "db_id": "battle_death", "question": "List the name, date and result of each battle.", "rationale": ["Identify the table that contains the required information: The 'battle' table has the columns 'name', 'date', and 'result'.", "Formulate the SQL SELECT statement to retrieve the specified columns from the 'battle' table.", "Use the SELECT statement to specify the columns: name, date, and result.", "Construct the final SQL query by combining the SELECT statement with the FROM clause to indicate the source table."], "pred_sql": "SELECT name, date, result FROM battle;", "gold_sql": "SELECT name ,  date FROM battle", "source_tables": ["battle"]}
{"sample_id": 494, "db_id": "battle_death", "question": "What is maximum and minimum death toll caused each time?", "rationale": ["Identify the relevant table: The 'death' table contains information about deaths, including the number of individuals killed.", "Determine the required calculations: We need to find the maximum and minimum values of the 'killed' column.", "Construct the SQL query: Use the MAX() and MIN() functions to get the maximum and minimum death tolls from the 'killed' column in the 'death' table."], "pred_sql": "SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;", "gold_sql": "SELECT max(killed) ,  min(killed) FROM death", "source_tables": ["death"]}
{"sample_id": 495, "db_id": "battle_death", "question": "What is the average number of injuries caused each time?", "rationale": ["Identify the relevant table: The 'death' table contains information about injuries.", "Determine the required calculation: We need to calculate the average number of injuries.", "Use the AVG() function to compute the average of the 'injured' column in the 'death' table."], "pred_sql": "SELECT AVG(injured) AS average_injuries FROM death;", "gold_sql": "SELECT avg(injured) FROM death", "source_tables": ["death"]}
{"sample_id": 496, "db_id": "battle_death", "question": "What are the death and injury situations caused by the ship with tonnage 't'?", "rationale": ["Identify the relevant tables: 'death' for death and injury records, and 'ship' for ship details.", "We need to find deaths and injuries caused by a specific ship, so we will join the 'death' table with the 'ship' table on the ship ID.", "The condition specifies that we are interested in ships with a specific tonnage, denoted as 't'.", "The final query will select the 'killed' and 'injured' columns from the 'death' table where the corresponding ship's tonnage matches 't'."], "pred_sql": "SELECT d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';", "gold_sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "source_tables": ["ship", "death"]}
{"sample_id": 497, "db_id": "battle_death", "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "rationale": ["Identify the table that contains the relevant information: the 'battle' table.", "Determine the columns needed for the output: 'name' and 'result'.", "Specify the condition for filtering the results: the 'bulgarian_commander' should not be 'Boril'.", "Construct the SQL SELECT statement to retrieve the desired columns from the 'battle' table with the specified condition."], "pred_sql": "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';", "gold_sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "source_tables": ["battle"]}
{"sample_id": 498, "db_id": "battle_death", "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "rationale": ["Identify the tables involved: 'battle' and 'ship'.", "We need to find battles that lost ships, so we will join the 'battle' table with the 'ship' table on the condition that 'battle.id' matches 'ship.lost_in_battle'.", "We are specifically interested in ships of type 'Brig', so we will add a WHERE clause to filter for 'ship_type = 'Brig'.", "We want distinct ids and names of the battles, so we will select 'b.id' and 'b.name' and use DISTINCT to avoid duplicates."], "pred_sql": "SELECT DISTINCT b.id, b.name \nFROM battle b \nJOIN ship s ON b.id = s.lost_in_battle \nWHERE s.ship_type = 'Brig';", "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "source_tables": ["battle", "ship"]}
{"sample_id": 499, "db_id": "battle_death", "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "rationale": ["Identify the relevant tables: We need data from the 'battle' and 'death' tables.", "Determine the relationship: The 'death' table has a foreign key 'caused_by_ship_id' that relates to the 'id' in the 'battle' table.", "Select the required fields: We need the 'id' and 'name' from the 'battle' table.", "Join the tables: We will join 'battle' and 'death' on the condition that 'battle.id' matches 'death.caused_by_ship_id'.", "Group the results: We need to group the results by 'battle.id' and 'battle.name' to aggregate the deaths per battle.", "Filter the results: We will use the HAVING clause to filter groups where the total number of 'killed' exceeds 10."], "pred_sql": "SELECT b.id, b.name \nFROM battle b \nJOIN death d ON b.id = d.caused_by_ship_id \nGROUP BY b.id, b.name \nHAVING SUM(d.killed) > 10;", "gold_sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "source_tables": ["death", "battle", "ship"]}
