{"sample_id": 1000, "db_id": "singer", "question": "How many singers are there?", "rationale": ["The user wants to know the total number of singers in the database.", "To get the count of records in the 'singer' table, we can use the COUNT() function.", "We will select the count of all rows from the 'singer' table and alias it as 'NumberOfSingers'."], "pred_sql": "SELECT COUNT(*) AS NumberOfSingers FROM singer;", "gold_sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}
{"sample_id": 1001, "db_id": "singer", "question": "What is the count of singers?", "rationale": ["Identify the requirement: We need to count the number of singers in the database.", "Determine the appropriate SQL function: The COUNT() function is used to count the number of rows in a table.", "Specify the table to query: The table we are interested in is 'singer'.", "Construct the SQL query: We will select the count of all rows from the 'singer' table and alias it as 'Singer_Count'."], "pred_sql": "SELECT COUNT(*) AS Singer_Count FROM singer;", "gold_sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}
{"sample_id": 1002, "db_id": "singer", "question": "List the name of singers in ascending order of net worth.", "rationale": ["Identify the table that contains the singer's names, which is the 'singer' table.", "Determine the column that holds the singer's names, which is 'Name'.", "Identify the column that holds the net worth of the singers, which is 'Net_Worth_Millions'.", "Specify that the results should be ordered in ascending order based on the net worth, using the ORDER BY clause.", "Construct the SQL query to select the 'Name' from the 'singer' table and order the results by 'Net_Worth_Millions' in ascending order."], "pred_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;", "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "source_tables": ["singer"]}
{"sample_id": 1003, "db_id": "singer", "question": "What are the names of singers ordered by ascending net worth?", "rationale": ["Identify the table that contains the information about singers, which is the 'singer' table.", "Determine the column that contains the names of the singers, which is 'Name'.", "Identify the column that contains the net worth of the singers, which is 'Net_Worth_Millions'.", "Construct a SQL SELECT statement to retrieve the 'Name' column from the 'singer' table.", "Add an ORDER BY clause to sort the results by 'Net_Worth_Millions' in ascending order."], "pred_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;", "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "source_tables": ["singer"]}
{"sample_id": 1004, "db_id": "singer", "question": "What are the birth year and citizenship of singers?", "rationale": ["Identify the required information: birth year and citizenship of singers.", "Determine the relevant table: the 'singer' table contains both 'Birth_Year' and 'Citizenship' columns.", "Construct the SQL SELECT statement to retrieve 'Birth_Year' and 'Citizenship' from the 'singer' table."], "pred_sql": "SELECT Birth_Year, Citizenship FROM singer;", "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer", "source_tables": ["singer"]}
{"sample_id": 1005, "db_id": "singer", "question": "What are the birth years and citizenships of the singers?", "rationale": ["Identify the relevant table: The query is asking for information about singers, which is found in the 'singer' table.", "Determine the required columns: The user wants the 'Birth_Year' and 'Citizenship' of the singers.", "Construct the SQL SELECT statement: We need to select the specified columns from the 'singer' table."], "pred_sql": "SELECT Birth_Year, Citizenship FROM singer;", "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer", "source_tables": ["singer"]}
{"sample_id": 1006, "db_id": "singer", "question": "List the name of singers whose citizenship is not \"France\".", "rationale": ["Identify the table that contains the information about singers, which is the 'singer' table.", "Determine the column that contains the citizenship information, which is 'Citizenship'.", "Specify the condition to filter out singers whose citizenship is 'France'.", "Select the 'Name' column to get the names of the singers that meet the condition."], "pred_sql": "SELECT Name FROM singer WHERE Citizenship != 'France';", "gold_sql": "SELECT Name FROM singer WHERE Citizenship != 'France'", "source_tables": ["singer"]}
{"sample_id": 1007, "db_id": "singer", "question": "What are the names of the singers who are not French citizens?", "rationale": ["Identify the table that contains the information about singers, which is the 'singer' table.", "Determine the relevant column that contains the names of the singers, which is the 'Name' column.", "Identify the column that indicates the citizenship of the singers, which is the 'Citizenship' column.", "Formulate a SQL query to select the 'Name' from the 'singer' table where the 'Citizenship' is not equal to 'France'."], "pred_sql": "SELECT Name FROM singer WHERE Citizenship != 'France';", "gold_sql": "SELECT Name FROM singer WHERE Citizenship != 'France'", "source_tables": ["singer"]}
{"sample_id": 1008, "db_id": "singer", "question": "Show the name of singers whose birth year is either 1948 or 1949?", "rationale": ["Identify the table that contains the relevant information, which is the 'singer' table.", "Determine the columns needed for the output, which is the 'Name' of the singers.", "Identify the condition for filtering the results, which is based on the 'Birth_Year' being either 1948 or 1949.", "Use the SQL 'SELECT' statement to retrieve the 'Name' column from the 'singer' table.", "Apply the 'WHERE' clause to filter the results based on the specified birth years using the 'IN' operator."], "pred_sql": "SELECT Name FROM singer WHERE Birth_Year IN ('1948', '1949');", "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "source_tables": ["singer"]}
{"sample_id": 1009, "db_id": "singer", "question": "What are the names of the singers whose birth years are either 1948 or 1949?", "rationale": ["Identify the table that contains the relevant information, which is the 'singer' table.", "Determine the columns needed for the query: we need the 'Name' of the singers.", "Identify the condition for filtering: we want singers whose 'Birth_Year' is either 1948 or 1949.", "Use the SQL 'SELECT' statement to retrieve the 'Name' column from the 'singer' table.", "Apply the 'WHERE' clause to filter the results based on the specified birth years using the 'IN' operator."], "pred_sql": "SELECT Name FROM singer WHERE Birth_Year IN ('1948', '1949');", "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "source_tables": ["singer"]}
{"sample_id": 1010, "db_id": "singer", "question": "What is the name of the singer with the largest net worth?", "rationale": ["Identify the table that contains the information about singers, which is the 'singer' table.", "We need to find the singer with the largest net worth, so we will sort the results by the 'Net_Worth_Millions' column in descending order.", "To get only the singer with the largest net worth, we will limit the results to 1 using 'LIMIT 1'.", "Finally, we will select the 'Name' column to get the name of the singer."], "pred_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "source_tables": ["singer"]}
{"sample_id": 1011, "db_id": "singer", "question": "What is the name of the singer who is worth the most?", "rationale": ["Identify the relevant table: The 'singer' table contains information about singers, including their net worth.", "Determine the column needed: We need the 'Name' of the singer and the 'Net_Worth_Millions' to find the richest singer.", "Sort the results: To find the singer with the highest net worth, we will sort the results by 'Net_Worth_Millions' in descending order.", "Limit the results: Since we only want the singer who is worth the most, we will limit the results to 1."], "pred_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "source_tables": ["singer"]}
{"sample_id": 1012, "db_id": "singer", "question": "Show different citizenship of singers and the number of singers of each citizenship.", "rationale": ["Identify the relevant table: The 'singer' table contains the 'Citizenship' column and the 'Singer_ID' which can be counted.", "Use the COUNT() function to count the number of singers for each citizenship.", "Group the results by the 'Citizenship' column to get the count for each unique citizenship.", "Construct the SQL query to select the 'Citizenship' and the count of singers, using GROUP BY to aggregate the results."], "pred_sql": "SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;", "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}
{"sample_id": 1013, "db_id": "singer", "question": "For each citizenship, how many singers are from that country?", "rationale": ["Identify the relevant table: The 'singer' table contains information about singers, including their citizenship.", "Determine the required output: We need to count the number of singers from each country, which suggests using the COUNT() function.", "Group the results by citizenship: To get the count of singers for each country, we will use the GROUP BY clause on the Citizenship column.", "Construct the SQL query: Combine the SELECT statement with COUNT() and GROUP BY to form the complete SQL query."], "pred_sql": "SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;", "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}
{"sample_id": 1014, "db_id": "singer", "question": "Please show the most common citizenship of singers.", "rationale": ["Identify the relevant table: The 'singer' table contains the 'Citizenship' column.", "To find the most common citizenship, we need to count the occurrences of each citizenship.", "Use the COUNT() function to count the number of singers for each citizenship.", "Group the results by the 'Citizenship' column to aggregate the counts.", "Order the results in descending order based on the count to get the most common citizenship at the top.", "Limit the results to 1 to get only the most common citizenship."], "pred_sql": "SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["singer"]}
{"sample_id": 1015, "db_id": "singer", "question": "What is the most common singer citizenship ?", "rationale": ["Identify the relevant table: The 'singer' table contains the 'Citizenship' column which is needed to answer the query.", "Count the occurrences of each citizenship: Use the COUNT() function to count how many singers belong to each citizenship.", "Group the results by citizenship: Use GROUP BY to aggregate the counts for each unique citizenship.", "Order the results: Use ORDER BY to sort the counts in descending order so that the most common citizenship appears first.", "Limit the results to one: Use LIMIT 1 to get only the most common citizenship."], "pred_sql": "SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;", "gold_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "source_tables": ["singer"]}
{"sample_id": 1016, "db_id": "singer", "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "rationale": ["We need to show different citizenships, which means we will select the 'Citizenship' column from the 'singer' table.", "We also need the maximum net worth of singers for each citizenship, so we will use the MAX() function on the 'Net_Worth_Millions' column.", "To get the maximum net worth for each citizenship, we will group the results by the 'Citizenship' column using GROUP BY.", "We will use DISTINCT to ensure that we only show unique citizenships in the result set."], "pred_sql": "SELECT DISTINCT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;", "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}
{"sample_id": 1017, "db_id": "singer", "question": "For each citizenship, what is the maximum net worth?", "rationale": ["Identify the relevant table: The 'singer' table contains the 'Citizenship' and 'Net_Worth_Millions' columns needed for the query.", "Determine the required operation: We need to find the maximum net worth for each citizenship, which suggests using the MAX() function.", "Group the results by citizenship: To get the maximum net worth for each citizenship, we will use the GROUP BY clause on the 'Citizenship' column.", "Construct the SQL query: Combine the SELECT statement with the MAX() function, the GROUP BY clause, and specify the columns to retrieve."], "pred_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;", "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}
{"sample_id": 1018, "db_id": "singer", "question": "Show titles of songs and names of singers.", "rationale": ["Identify the tables involved: 'song' and 'singer'.", "Determine the columns needed: 'Title' from 'song' and 'Name' from 'singer'.", "Establish the relationship between the tables using the foreign key: 'song.Singer_ID' links to 'singer.Singer_ID'.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;", "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "source_tables": ["singer", "song"]}
{"sample_id": 1019, "db_id": "singer", "question": "What are the song titles and singer names?", "rationale": ["Identify the tables involved: 'song' and 'singer'.", "Determine the columns needed: 'Title' from the 'song' table and 'Name' from the 'singer' table.", "Establish the relationship between the tables using the foreign key: 'song.Singer_ID' links to 'singer.Singer_ID'.", "Construct the SQL query using a JOIN to combine the two tables based on the relationship, selecting the required columns."], "pred_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;", "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "source_tables": ["singer", "song"]}
{"sample_id": 1020, "db_id": "singer", "question": "Show distinct names of singers that have songs with sales more than 300000.", "rationale": ["Identify the tables involved: 'singer' and 'song'.", "We need to retrieve distinct names of singers, so we will select the 'Name' column from the 'singer' table.", "To find singers with songs that have sales greater than 300000, we need to join the 'singer' table with the 'song' table on the 'Singer_ID' column.", "We will apply a condition to filter songs with sales greater than 300000 using the WHERE clause.", "Finally, we will use DISTINCT to ensure that each singer's name appears only once in the result."], "pred_sql": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;", "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "source_tables": ["singer", "song"]}
{"sample_id": 1021, "db_id": "singer", "question": "what are the different names of the singers that have sales more than 300000?", "rationale": ["Identify the tables involved: 'singer' and 'song'.", "Determine the relationship between the tables: 'song' has a foreign key 'Singer_ID' that links to 'singer'.", "We need to select distinct names of singers, so we will use 'SELECT DISTINCT s.Name'.", "We need to filter the results based on sales, specifically where 'Sales' is greater than 300000.", "To apply the filter, we will join the 'singer' and 'song' tables on 'Singer_ID' and add a WHERE clause for the sales condition."], "pred_sql": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;", "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "source_tables": ["singer", "song"]}
{"sample_id": 1022, "db_id": "singer", "question": "Show the names of singers that have more than one song.", "rationale": ["We need to find singers who have more than one song.", "To do this, we will join the 'singer' table with the 'song' table using the 'Singer_ID' as the linking key.", "We will group the results by 'Singer_ID' to aggregate the songs for each singer.", "We will use the COUNT function to count the number of songs for each singer.", "Finally, we will filter the results using the HAVING clause to only include singers with more than one song."], "pred_sql": "SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1;", "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "source_tables": ["singer", "song"]}
{"sample_id": 1023, "db_id": "singer", "question": "What are the names of the singers that have more than one songs?", "rationale": ["Identify the relevant tables: 'singer' and 'song'.", "We need to find singers who have more than one song, so we will join the 'singer' table with the 'song' table on the 'Singer_ID'.", "We will group the results by 'Singer_ID' to aggregate the songs for each singer.", "We will use the HAVING clause to filter groups that have a count of songs greater than one.", "Finally, we will select the 'Name' of the singers from the result."], "pred_sql": "SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1;", "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "source_tables": ["singer", "song"]}
{"sample_id": 1024, "db_id": "singer", "question": "Show the names of singers and the total sales of their songs.", "rationale": ["Identify the tables involved: 'singer' and 'song'.", "Determine the columns needed: 'Name' from the 'singer' table and the total sales from the 'song' table.", "To get the total sales for each singer, we need to use the SUM() function on the 'Sales' column from the 'song' table.", "Since we want to associate songs with their respective singers, we will use a JOIN operation on the 'Singer_ID' column present in both tables.", "We need to group the results by singer's name to calculate the total sales for each singer, hence we will use GROUP BY on 'singer.Name'."], "pred_sql": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name;", "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["singer", "song"]}
{"sample_id": 1025, "db_id": "singer", "question": "For each singer name, what is the total sales for their songs?", "rationale": ["Identify the tables involved: 'singer' and 'song'.", "Determine the relationship between the tables: 'song' has a foreign key 'Singer_ID' that links to 'singer'.", "Select the singer's name from the 'singer' table and the total sales from the 'song' table.", "Use the SUM() function to calculate the total sales for each singer.", "Group the results by singer's name to get the total sales per singer."], "pred_sql": "SELECT s.Name, SUM(song.Sales) AS Total_Sales\nFROM singer s\nJOIN song ON s.Singer_ID = song.Singer_ID\nGROUP BY s.Name;", "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["singer", "song"]}
{"sample_id": 1026, "db_id": "singer", "question": "List the name of singers that do not have any song.", "rationale": ["Identify the table that contains the singer's information, which is the 'singer' table.", "We need to find singers who do not have any songs associated with them.", "To do this, we can use a subquery that selects all Singer_IDs from the 'song' table.", "We will then select the names of singers from the 'singer' table where their Singer_ID is not in the list of Singer_IDs returned by the subquery."], "pred_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "source_tables": ["singer", "song"]}
{"sample_id": 1027, "db_id": "singer", "question": "What is the sname of every sing that does not have any song?", "rationale": ["Identify the requirement: We need to find the names of singers who do not have any songs.", "To achieve this, we will first need to identify singers from the 'singer' table.", "Next, we will check which singers have songs by looking at the 'song' table and using the Singer_ID as a reference.", "We will use a subquery to select distinct Singer_IDs from the 'song' table.", "Finally, we will select the names of singers from the 'singer' table whose Singer_IDs are not in the list of Singer_IDs obtained from the subquery."], "pred_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song);", "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "source_tables": ["singer", "song"]}
{"sample_id": 1028, "db_id": "singer", "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "rationale": ["Identify the relevant table: The 'singer' table contains the necessary information about singers, including their citizenship and birth year.", "Determine the conditions: We need to find singers born before 1945 or after 1955.", "Select the required column: We want to retrieve the 'Citizenship' of these singers.", "Use DISTINCT to ensure that we only get unique citizenship values.", "Construct the SQL query using the SELECT statement with the appropriate WHERE clause to filter the birth years."], "pred_sql": "SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < '1945' OR Birth_Year > '1955';", "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "source_tables": ["singer"]}
{"sample_id": 1029, "db_id": "singer", "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "rationale": ["Identify the relevant table: The 'singer' table contains the necessary information about singers, including their citizenship and birth year.", "Determine the conditions: We need to find singers born before 1945 or after 1955.", "Select the citizenships: We want to retrieve the unique citizenships of these singers.", "Use DISTINCT to ensure that we only get unique citizenship values.", "Construct the SQL query using the SELECT statement to get the Citizenship column from the singer table with the specified conditions."], "pred_sql": "SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < '1945' OR Birth_Year > '1955';", "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "source_tables": ["singer"]}
{"sample_id": 1030, "db_id": "real_estate_properties", "question": "How many available features are there in total?", "rationale": ["Identify the table that contains the features, which is 'Other_Available_Features'.", "To find the total number of available features, we need to count the rows in this table.", "Use the COUNT() function to get the total number of entries in the 'Other_Available_Features' table.", "Construct the SQL query to select the count of all features from the 'Other_Available_Features' table."], "pred_sql": "SELECT COUNT(*) AS total_features FROM Other_Available_Features;", "gold_sql": "SELECT count(*) FROM Other_Available_Features", "source_tables": ["other_available_features"]}
{"sample_id": 1031, "db_id": "real_estate_properties", "question": "What is the feature type name of feature AirCon?", "rationale": ["Identify the relevant tables: We need to find the feature type name for a specific feature, which involves the Other_Available_Features and Ref_Feature_Types tables.", "Determine the relationship: The feature type code in Other_Available_Features links to the feature type name in Ref_Feature_Types.", "Formulate the query: We will select the feature_type_name from Ref_Feature_Types where the feature_name in Other_Available_Features matches 'AirCon'.", "Join the tables: Use an INNER JOIN to connect Other_Available_Features with Ref_Feature_Types on the feature_type_code.", "Add the condition: Include a WHERE clause to filter for the feature name 'AirCon'."], "pred_sql": "SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon';", "gold_sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  'AirCon'", "source_tables": ["ref_feature_types", "other_available_features"]}
{"sample_id": 1032, "db_id": "real_estate_properties", "question": "Show the property type descriptions of properties belonging to that code.", "rationale": ["Identify the relevant tables: Properties and Ref_Property_Types.", "Determine the relationship between the tables: Properties has a foreign key property_type_code that references Ref_Property_Types.", "Select the property_type_description from Ref_Property_Types.", "Join the Properties table with Ref_Property_Types on the property_type_code to get the descriptions of the property types for all properties."], "pred_sql": "SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;", "gold_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "source_tables": ["properties", "ref_property_types"]}
{"sample_id": 1033, "db_id": "real_estate_properties", "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "rationale": ["Identify the relevant table: Properties, as it contains property names and types.", "Determine the conditions for filtering: properties that are either houses or apartments and have more than 1 room.", "The property types for houses and apartments are represented by specific codes, which are 'HSE' for houses and 'APT' for apartments.", "Construct the SQL query to select the property_name from the Properties table where the property_type_code is either 'HSE' or 'APT' and the room_count is greater than 1."], "pred_sql": "SELECT property_name FROM Properties WHERE (property_type_code = 'HSE' OR property_type_code = 'APT') AND room_count > 1;", "gold_sql": "SELECT property_name FROM Properties WHERE property_type_code  =  'House' UNION SELECT property_name FROM Properties WHERE property_type_code  =  'Apartment' AND room_count  >  1", "source_tables": ["properties"]}
