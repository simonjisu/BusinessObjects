{"sample_id": 1000, "db_id": "university_basketball", "question": "Return the total and minimum enrollments across all schools.", "rationale": ["Identify the required data: total and minimum enrollments from the university table.", "Use the SUM function to calculate the total enrollment.", "Use the MIN function to find the minimum enrollment.", "Select both the total and minimum enrollments from the university table."], "pred_sql": "SELECT SUM(Enrollment) AS Total_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university;", "gold_sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "source_tables": ["university"]}
{"sample_id": 1001, "db_id": "university_basketball", "question": "Find the total student enrollment for different affiliation type schools.", "rationale": ["Identify the relevant table: The 'university' table contains the 'Enrollment' and 'Affiliation' columns.", "Determine the required output: We need to find the total student enrollment grouped by different affiliation types.", "Use the SUM function to calculate the total enrollment for each affiliation type.", "Group the results by the 'Affiliation' column to get the total enrollment for each type."], "pred_sql": "SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Affiliation;", "gold_sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "source_tables": ["university"]}
{"sample_id": 1002, "db_id": "university_basketball", "question": "What are the total enrollments of universities of each affiliation type?", "rationale": ["Identify the relevant table: The 'university' table contains the 'Enrollment' and 'Affiliation' columns.", "Determine the required output: We need the total enrollments grouped by each affiliation type.", "Use the SUM() function to calculate the total enrollment for each affiliation type.", "Group the results by the 'Affiliation' column to get the total enrollments for each type."], "pred_sql": "SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Affiliation;", "gold_sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "source_tables": ["university"]}
{"sample_id": 1003, "db_id": "university_basketball", "question": "How many schools do not participate in the basketball match?", "rationale": ["Identify the relevant tables: 'university' and 'basketball_match'.", "We need to count the number of schools that do not have any associated basketball matches.", "To find schools without basketball matches, we can use a subquery to select distinct School_IDs from the 'basketball_match' table.", "We will then count the total number of School_IDs in the 'university' table that are not present in the list obtained from the subquery.", "The final SQL query will use COUNT(*) to get the total number of such schools."], "pred_sql": "SELECT COUNT(*) AS School_Count FROM university WHERE School_ID NOT IN (SELECT DISTINCT School_ID FROM basketball_match);", "gold_sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "source_tables": ["basketball_match", "university"]}
{"sample_id": 1004, "db_id": "university_basketball", "question": "Count the number of universities that do not participate in the baketball match.", "rationale": ["Identify the main goal: Count the number of universities not participating in basketball matches.", "Understand the schema: We have two tables, 'university' and 'basketball_match', linked by 'School_ID'.", "To find universities not in basketball matches, we need to select from the 'university' table where 'School_ID' is not present in the 'basketball_match' table.", "Use a subquery to get all distinct 'School_ID's from the 'basketball_match' table.", "Count the total number of universities that meet the criteria using COUNT(*) function."], "pred_sql": "SELECT COUNT(*) AS University_Count FROM university WHERE School_ID NOT IN (SELECT DISTINCT School_ID FROM basketball_match);", "gold_sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "source_tables": ["basketball_match", "university"]}
{"sample_id": 1005, "db_id": "university_basketball", "question": "Find the schools that were either founded after 1850 or public.", "rationale": ["Identify the table to query: 'university'.", "Determine the conditions for filtering: founded after 1850 or public affiliation.", "Translate the conditions into SQL syntax: 'Founded > 1850' and 'Affiliation = 'Public' '.", "Combine the conditions using 'OR' to form the WHERE clause.", "Construct the full SQL query to select all columns from the 'university' table with the specified conditions."], "pred_sql": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public';", "gold_sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "source_tables": ["university"]}
{"sample_id": 1006, "db_id": "university_basketball", "question": "What are the schools that were either founded before 1850 or are public?", "rationale": ["Identify the relevant table: The query pertains to schools, which are stored in the 'university' table.", "Determine the conditions: The query asks for schools founded before 1850 or that are public. This translates to two conditions: 'Founded < 1850' and 'Affiliation = 'Public'.", "Construct the SQL SELECT statement: We need to select the 'School' column from the 'university' table based on the specified conditions.", "Combine the conditions using OR: The SQL WHERE clause will include both conditions combined with an OR operator."], "pred_sql": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public';", "gold_sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "source_tables": ["university"]}
{"sample_id": 1007, "db_id": "university_basketball", "question": "Find how many different affiliation types there are.", "rationale": ["Identify the table that contains the affiliation types, which is the 'university' table.", "To find the number of different affiliation types, we need to count distinct values in the 'Affiliation' column.", "Use the COUNT function along with DISTINCT to get the unique count of affiliation types.", "Construct the SQL query to select the count of distinct affiliation types from the university table."], "pred_sql": "SELECT COUNT(DISTINCT Affiliation) AS Different_Affiliation_Types FROM university;", "gold_sql": "SELECT count(DISTINCT affiliation) FROM university", "source_tables": ["university"]}
{"sample_id": 1008, "db_id": "university_basketball", "question": "Count the number of different affiliation types.", "rationale": ["Identify the table that contains the affiliation types, which is the 'university' table.", "To count the number of different affiliation types, we need to use the COUNT function along with DISTINCT to ensure we only count unique values.", "The SQL query will select the count of distinct values from the 'Affiliation' column in the 'university' table."], "pred_sql": "SELECT COUNT(DISTINCT Affiliation) AS Different_Affiliation_Types FROM university;", "gold_sql": "SELECT count(DISTINCT affiliation) FROM university", "source_tables": ["university"]}
{"sample_id": 1009, "db_id": "university_basketball", "question": "Find how many school locations have the word 'NY'.", "rationale": ["Identify the table that contains the school locations, which is the 'university' table.", "Determine the column that holds the location information, which is 'Location'.", "Formulate a query to count the number of records in the 'university' table where the 'Location' contains the substring 'NY'.", "Use the SQL COUNT function to get the total number of matching records."], "pred_sql": "SELECT COUNT(*) FROM university WHERE Location LIKE '%NY%';", "gold_sql": "SELECT count(*) FROM university WHERE LOCATION LIKE '%NY%'", "source_tables": ["university"]}
{"sample_id": 1010, "db_id": "university_basketball", "question": "How many universities have a location that contains NY?", "rationale": ["Identify the table that contains the information about universities, which is the 'university' table.", "Determine the column that contains the location information, which is the 'Location' column.", "Formulate a query to count the number of universities where the 'Location' contains 'NY'.", "Use the SQL COUNT function to get the total number of matching records.", "Use the LIKE operator with wildcards to search for 'NY' within the 'Location' column."], "pred_sql": "SELECT COUNT(*) FROM university WHERE Location LIKE '%NY%';", "gold_sql": "SELECT count(*) FROM university WHERE LOCATION LIKE '%NY%'", "source_tables": ["university"]}
{"sample_id": 1011, "db_id": "university_basketball", "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "rationale": ["Identify the relevant tables: basketball_match and university.", "Determine the columns needed: Team_Name from basketball_match and Enrollment from university.", "Calculate the average enrollment size using a subquery: SELECT AVG(Enrollment) FROM university.", "Join the basketball_match table with the university table on the School_ID column to link teams with their respective universities.", "Filter the results to include only those universities with an enrollment smaller than the average enrollment size."], "pred_sql": "SELECT bm.Team_Name \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nWHERE u.Enrollment < (SELECT AVG(Enrollment) FROM university);", "gold_sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "source_tables": ["basketball_match", "university"]}
{"sample_id": 1012, "db_id": "university_basketball", "question": "What are the names of teams from universities that have a below average enrollment?", "rationale": ["Identify the relevant tables: basketball_match and university.", "Determine the columns needed: Team_Name from basketball_match and Enrollment from university.", "Establish the relationship between the tables using the foreign key School_ID.", "Calculate the average enrollment from the university table using a subquery.", "Filter the results to include only teams from universities with below average enrollment."], "pred_sql": "SELECT bm.Team_Name \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nWHERE u.Enrollment < (SELECT AVG(Enrollment) FROM university);", "gold_sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "source_tables": ["basketball_match", "university"]}
{"sample_id": 1013, "db_id": "university_basketball", "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "rationale": ["Identify the relevant table: The 'university' table contains information about universities, including their enrollment size and affiliation type.", "Determine the condition: We need to filter universities with an enrollment size greater than 20000.", "Select the required columns: We need to select the 'Affiliation' column and count the number of universities for each affiliation type.", "Group the results: To get the count of universities for each affiliation type, we will use the GROUP BY clause on the 'Affiliation' column."], "pred_sql": "SELECT Affiliation, COUNT(*) AS University_Count FROM university WHERE Enrollment > 20000 GROUP BY Affiliation;", "gold_sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "source_tables": ["university"]}
{"sample_id": 1014, "db_id": "university_basketball", "question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "rationale": ["Identify the relevant table: The query requires information about university affiliations and enrollment sizes, so we will use the 'university' table.", "Select the columns needed: We need to select the 'Affiliation' column and count the number of schools for each affiliation, so we will use COUNT(*) to get the number of schools.", "Apply the condition: We need to filter the results to include only those schools with an enrollment size greater than 20000, which will be done using a WHERE clause.", "Group the results: To get the count of schools for each affiliation, we will use GROUP BY on the 'Affiliation' column."], "pred_sql": "SELECT Affiliation, COUNT(*) AS School_Count \nFROM university \nWHERE Enrollment > 20000 \nGROUP BY Affiliation;", "gold_sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "source_tables": ["university"]}
{"sample_id": 1015, "db_id": "university_basketball", "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "rationale": ["Identify the relevant table: The 'university' table contains the information about the universities, including their enrollment and founding year.", "Determine the columns needed: We need 'Affiliation' to group the results and 'Enrollment' to calculate the total number of students.", "Apply the condition: We need to filter universities founded after the year 1850, which is done using the WHERE clause.", "Group the results: To get the total number of students for each affiliation type, we will use the GROUP BY clause on the 'Affiliation' column.", "Calculate the total enrollment: We will use the SUM function to calculate the total number of students enrolled for each affiliation type."], "pred_sql": "SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment\nFROM university\nWHERE Founded > 1850\nGROUP BY Affiliation;", "gold_sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "source_tables": ["university"]}
{"sample_id": 1016, "db_id": "university_basketball", "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "rationale": ["Identify the relevant table: The query requires information about university affiliations and enrollments, which are found in the 'university' table.", "Select the columns needed: We need to select 'Affiliation' and the total 'Enrollment'.", "Filter the records: We need to include only those universities that were founded after 1850, so we will add a WHERE clause to filter based on the 'Founded' column.", "Group the results: To get the total enrollment for each type of affiliation, we will use the GROUP BY clause on the 'Affiliation' column.", "Calculate the total enrollment: We will use the SUM function to calculate the total enrollment for each affiliation type."], "pred_sql": "SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment\nFROM university\nWHERE Founded > 1850\nGROUP BY Affiliation;", "gold_sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "source_tables": ["university"]}
{"sample_id": 1017, "db_id": "university_basketball", "question": "What is the maximum enrollment across all schools?", "rationale": ["Identify the table that contains the enrollment data, which is the 'university' table.", "Determine the specific column that holds the enrollment numbers, which is 'Enrollment'.", "Use the SQL aggregate function MAX() to find the maximum value in the 'Enrollment' column.", "Construct the SQL query to select the maximum enrollment from the 'university' table."], "pred_sql": "SELECT MAX(Enrollment) AS Max_Enrollment FROM university;", "gold_sql": "SELECT max(Enrollment) FROM university", "source_tables": ["university"]}
{"sample_id": 1018, "db_id": "university_basketball", "question": "Return the maximum enrollment across all schools.", "rationale": ["Identify the table that contains the enrollment data, which is the 'university' table.", "Determine the specific column that holds the enrollment numbers, which is 'Enrollment'.", "Use the SQL aggregate function MAX() to find the maximum value in the 'Enrollment' column.", "Construct the SQL query to select the maximum enrollment from the 'university' table."], "pred_sql": "SELECT MAX(Enrollment) AS Max_Enrollment FROM university;", "gold_sql": "SELECT max(Enrollment) FROM university", "source_tables": ["university"]}
{"sample_id": 1019, "db_id": "university_basketball", "question": "List all information regarding the basketball match.", "rationale": ["The user requested to list all information regarding the basketball match.", "To retrieve all information from a table in SQL, we use the SELECT statement with an asterisk (*) to indicate all columns.", "The relevant table for basketball match information is 'basketball_match'.", "Therefore, the SQL query to fulfill the request is 'SELECT * FROM basketball_match'."], "pred_sql": "SELECT * FROM basketball_match;", "gold_sql": "SELECT * FROM basketball_match", "source_tables": ["basketball_match"]}
{"sample_id": 1020, "db_id": "university_basketball", "question": "What is all the information about the basketball match?", "rationale": ["The user is asking for all the information about the basketball match.", "To retrieve all information from a table in SQL, we use the SELECT statement with an asterisk (*) to indicate all columns.", "The relevant table for basketball match information is 'basketball_match'.", "Therefore, the SQL query will be 'SELECT * FROM basketball_match;'"], "pred_sql": "SELECT * FROM basketball_match;", "gold_sql": "SELECT * FROM basketball_match", "source_tables": ["basketball_match"]}
{"sample_id": 1021, "db_id": "university_basketball", "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "rationale": ["Identify the table that contains the team names, which is 'basketball_match'.", "Determine the column that holds the team names, which is 'Team_Name'.", "Identify the column that contains the home scores, which is 'All_Home'.", "Construct a SQL query to select 'Team_Name' from 'basketball_match'.", "Add an ORDER BY clause to sort the results by 'All_Home' in descending order."], "pred_sql": "SELECT Team_Name FROM basketball_match ORDER BY All_Home DESC;", "gold_sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "source_tables": ["basketball_match"]}
{"sample_id": 1022, "db_id": "university_basketball", "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "rationale": ["Identify the relevant table: basketball_match contains the team names and their home scores.", "Select the column Team_Name to get the names of the teams.", "Use ORDER BY clause to sort the results based on the All_Home column in descending order."], "pred_sql": "SELECT Team_Name FROM basketball_match ORDER BY All_Home DESC;", "gold_sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "source_tables": ["basketball_match"]}
{"sample_id": 1023, "db_id": "phone_1", "question": "the names of models that launched between 2002 and 2004.", "rationale": ["Identify the table that contains the relevant data: 'chip_model'.", "Determine the column that contains the model names: 'Model_name'.", "Identify the column that contains the launch year: 'Launch_year'.", "Formulate a query to select 'Model_name' from 'chip_model' where 'Launch_year' is between 2002 and 2004."], "pred_sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN '2002' AND '2004';", "gold_sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;", "source_tables": ["chip_model"]}
{"sample_id": 1024, "db_id": "phone_1", "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.", "rationale": ["Identify the relevant table: The query is asking about chip models, so we will use the 'chip_model' table.", "Select the required columns: We need to retrieve the 'Model_name' and 'RAM_MiB' columns.", "Determine the condition: We want to find the model with the least amount of RAM, which requires sorting the RAM values in ascending order.", "Use the ORDER BY clause: We will order the results by 'RAM_MiB' in ascending order to get the model with the least RAM at the top.", "Limit the results: Since we only need the model with the least RAM, we will use 'LIMIT 1' to return only the top result."], "pred_sql": "SELECT Model_name, RAM_MiB FROM chip_model ORDER BY CAST(RAM_MiB AS INTEGER) ASC LIMIT 1;", "gold_sql": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;", "source_tables": ["chip_model"]}
{"sample_id": 1025, "db_id": "phone_1", "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?", "rationale": ["Identify the tables involved: We need data from the 'phone', 'chip_model', and 'screen_mode' tables.", "Determine the columns to select: We need 'Model_name' from 'chip_model' and 'Graphics_mode' from 'screen_mode'.", "Establish the relationships: The 'phone' table has foreign keys referencing 'chip_model' and 'screen_mode'.", "Construct the JOIN clauses: We will join 'phone' with 'chip_model' on 'chip_model.Model_name' and with 'screen_mode' on 'screen_mode.Graphics_mode'.", "Add the WHERE clause: We need to filter the results to only include the phone with 'Hardware_Model_name' equal to 'LG-P760'.", "Combine all parts to form the final SQL query."], "pred_sql": "SELECT chip_model.Model_name, screen_mode.Graphics_mode FROM phone JOIN chip_model ON phone.chip_model = chip_model.Model_name JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode WHERE phone.Hardware_Model_name = 'LG-P760';", "gold_sql": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = 'LG-P760';", "source_tables": ["phone"]}
{"sample_id": 1026, "db_id": "phone_1", "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?", "rationale": ["Identify the table that contains information about phone hardware models, which is the 'phone' table.", "Determine the relevant column for the company name, which is 'Company_name'.", "Use the COUNT function to count distinct hardware model names, which is represented by the 'Hardware_Model_name' column.", "Add a WHERE clause to filter the results to only include records where the 'Company_name' is 'Nokia Corporation'.", "Construct the SQL query to select the count of distinct hardware models from the 'phone' table with the specified condition."], "pred_sql": "SELECT COUNT(DISTINCT Hardware_Model_name) AS Number_of_Hardware_Models FROM phone WHERE Company_name = 'Nokia Corporation';", "gold_sql": "SELECT count(*) FROM phone WHERE Company_name = 'Nokia Corporation';", "source_tables": ["phone"]}
{"sample_id": 1027, "db_id": "phone_1", "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?", "rationale": ["Identify the relevant tables: We need to use the 'phone' table to filter by company name and the 'chip_model' table to get the RAM size.", "Determine the columns needed: We need the RAM size, which is in the 'chip_model' table under the 'RAM_MiB' column.", "Use aggregate functions: To find the maximum and minimum RAM sizes, we will use the MAX() and MIN() functions on the 'RAM_MiB' column.", "Join the tables: Since the RAM size is in the 'chip_model' table and we need to filter by company name in the 'phone' table, we will perform a JOIN on these tables using the foreign key relationship.", "Filter by company name: We will add a WHERE clause to filter the results to only include phones produced by 'Nokia Corporation'."], "pred_sql": "SELECT MAX(c.RAM_MiB) AS Max_RAM, MIN(c.RAM_MiB) AS Min_RAM\nFROM phone p\nJOIN chip_model c ON p.chip_model = c.Model_name\nWHERE p.Company_name = 'Nokia Corporation';", "gold_sql": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = 'Nokia Corporation';", "source_tables": ["phone", "chip_model"]}
{"sample_id": 1028, "db_id": "phone_1", "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?", "rationale": ["Identify the relevant tables: We need data from the 'phone' and 'chip_model' tables to find the average ROM size.", "Determine the relationship: The 'phone' table has a foreign key 'chip_model' that references 'chip_model.Model_name'. We will join these two tables on this key.", "Filter the results: We need to filter the phones produced by 'Nokia Corporation'. This is done using a WHERE clause on 'phone.Company_name'.", "Calculate the average: We will use the AVG() function to calculate the average ROM size from the 'chip_model' table, specifically the 'ROM_MiB' column.", "Select the appropriate columns: We will select the average ROM size and give it an alias for clarity."], "pred_sql": "SELECT AVG(chip_model.ROM_MiB) AS average_ROM_size FROM phone JOIN chip_model ON phone.chip_model = chip_model.Model_name WHERE phone.Company_name = 'Nokia Corporation';", "gold_sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = 'Nokia Corporation';", "source_tables": ["phone", "chip_model"]}
{"sample_id": 1029, "db_id": "phone_1", "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.", "rationale": ["Identify the columns needed: 'Hardware_Model_name' and 'Company_name' from the 'phone' table.", "Determine the conditions for filtering: phones launched in 2002 or with RAM size greater than 32 MiB.", "Join the 'phone' table with the 'chip_model' table on the foreign key relationship (phone.chip_model = chip_model.Model_name).", "Construct the SQL SELECT statement to retrieve the required columns based on the specified conditions."], "pred_sql": "SELECT phone.Hardware_Model_name, phone.Company_name FROM phone JOIN chip_model ON phone.chip_model = chip_model.Model_name WHERE chip_model.Launch_year = '2002' OR chip_model.RAM_MiB > '32';", "gold_sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;", "source_tables": ["phone", "chip_model"]}
{"sample_id": 1030, "db_id": "phone_1", "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.", "rationale": ["Identify the relevant table: The query is about phones, so we will use the 'phone' table.", "Determine the columns to select: We need to list the 'Hardware_Model_name' and 'Company_name'.", "Identify the filtering condition: We need to find phones where the 'Accreditation_type' contains the word 'Full'.", "Construct the SQL query: Use SELECT to choose the columns, FROM to specify the table, and WHERE to apply the filtering condition with LIKE operator."], "pred_sql": "SELECT Company_name, Hardware_Model_name FROM phone WHERE Accreditation_type LIKE '%Full%';", "gold_sql": "SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full';", "source_tables": ["phone"]}
{"sample_id": 1031, "db_id": "phone_1", "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".", "rationale": ["Identify the relevant tables: We need to retrieve information about the screen, which is stored in the 'screen_mode' table, and we need to filter based on the phone's hardware model, which is in the 'phone' table.", "Determine the columns to select: The user wants 'Char_cells', 'Pixels', and 'Hardware_colours' from the 'screen_mode' table.", "Establish the relationship between tables: The 'phone' table has a foreign key reference to the 'screen_mode' table through the 'screen_mode' column, which corresponds to 'Graphics_mode' in the 'screen_mode' table.", "Construct the SQL query: We will use a JOIN to combine the 'phone' and 'screen_mode' tables based on the foreign key relationship, and filter the results using a WHERE clause to match the specified hardware model name 'LG-P760'."], "pred_sql": "SELECT sm.Char_cells, sm.Pixels, sm.Hardware_colours \nFROM phone p \nJOIN screen_mode sm ON p.screen_mode = sm.Graphics_mode \nWHERE p.Hardware_Model_name = 'LG-P760';", "gold_sql": "SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = 'LG-P760';", "source_tables": ["phone", "screen_mode"]}
{"sample_id": 1032, "db_id": "phone_1", "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"", "rationale": ["Identify the columns needed: 'Hardware_Model_name' and 'Company_name' from the 'phone' table.", "Determine the condition: we need to filter phones based on the 'screen_mode' type being 'Graphics'.", "Join the 'phone' table with the 'screen_mode' table using the foreign key relationship on 'screen_mode.Graphics_mode'.", "Construct the SQL SELECT statement to retrieve the required columns with the specified condition."], "pred_sql": "SELECT phone.Hardware_Model_name, phone.Company_name FROM phone JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode WHERE screen_mode.Type = 'Graphics';", "gold_sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  'Graphics';", "source_tables": ["phone", "screen_mode"]}
{"sample_id": 1033, "db_id": "phone_1", "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.", "rationale": ["Identify the relevant table: The 'phone' table contains the 'Company_name' and is where the phone models are recorded.", "Count the number of phone models for each company: Use the COUNT() function to count the number of entries for each 'Company_name'.", "Group the results by company: Use GROUP BY to aggregate the counts by 'Company_name'.", "Order the results to find the company with the least models: Use ORDER BY with ASC to sort the counts in ascending order.", "Limit the results to the top entry: Use LIMIT 1 to get only the company with the least number of phone models."], "pred_sql": "SELECT Company_name, COUNT(*) AS number_of_models \nFROM phone \nGROUP BY Company_name \nORDER BY number_of_models ASC \nLIMIT 1;", "gold_sql": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["phone"]}
{"sample_id": 1034, "db_id": "phone_1", "question": "List the name of the company that produced more than one phone model.", "rationale": ["Identify the relevant table: The 'phone' table contains the 'Company_name' and 'Hardware_Model_name' columns, which are needed for this query.", "Group the results by 'Company_name': This allows us to aggregate the data based on each company.", "Count the number of distinct 'Hardware_Model_name' for each 'Company_name': This will help us determine how many phone models each company has produced.", "Use the HAVING clause to filter the results: We want only those companies that have produced more than one phone model, which means we need to check if the count of 'Hardware_Model_name' is greater than 1."], "pred_sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(Hardware_Model_name) > 1;", "gold_sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;", "source_tables": ["phone"]}
{"sample_id": 1035, "db_id": "phone_1", "question": "List the maximum, minimum and average number of used kb in screen mode.", "rationale": ["Identify the table that contains the 'used_kb' column, which is 'screen_mode'.", "Determine the aggregate functions needed: MAX, MIN, and AVG to find the maximum, minimum, and average values of 'used_kb'.", "Construct the SQL query to select these aggregate values from the 'screen_mode' table."], "pred_sql": "SELECT MAX(used_kb) AS max_used_kb, MIN(used_kb) AS min_used_kb, AVG(used_kb) AS avg_used_kb FROM screen_mode;", "gold_sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;", "source_tables": ["screen_mode"]}
{"sample_id": 1036, "db_id": "phone_1", "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.", "rationale": ["Identify the relevant tables: We need to retrieve data from the 'phone' and 'chip_model' tables.", "Determine the conditions: We are looking for phone models launched in the year 2002 and want to find the one with the highest RAM size.", "Join the tables: We need to join 'phone' and 'chip_model' on the foreign key relationship where 'phone.chip_model' matches 'chip_model.Model_name'.", "Filter the results: Use a WHERE clause to filter for records where 'chip_model.Launch_year' is '2002'.", "Sort the results: To find the phone with the highest RAM size, we will order the results by 'chip_model.RAM_MiB' in descending order.", "Limit the results: Since we only want the top result, we will use LIMIT 1 to get the phone model with the highest RAM size."], "pred_sql": "SELECT p.Hardware_Model_name FROM phone p JOIN chip_model c ON p.chip_model = c.Model_name WHERE c.Launch_year = '2002' ORDER BY c.RAM_MiB DESC LIMIT 1;", "gold_sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;", "source_tables": ["phone", "chip_model"]}
{"sample_id": 1037, "db_id": "phone_1", "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?", "rationale": ["Identify the relevant tables: 'phone', 'chip_model', and 'screen_mode'.", "Determine the columns needed: 'WiFi' from 'chip_model' and 'Type' from 'screen_mode'.", "Establish the relationships between the tables using JOINs: 'phone' references 'chip_model' and 'screen_mode'.", "Filter the results to only include the hardware model named 'LG-P760' using a WHERE clause."], "pred_sql": "SELECT chip_model.WiFi, screen_mode.Type FROM phone JOIN chip_model ON phone.chip_model = chip_model.Model_name JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode WHERE phone.Hardware_Model_name = 'LG-P760';", "gold_sql": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = 'LG-P760';", "source_tables": ["phone", "screen_mode", "chip_model"]}
{"sample_id": 1038, "db_id": "phone_1", "question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.", "rationale": ["Identify the relevant tables: We need to query the 'phone' table to get the 'Hardware_Model_name'.", "Determine the conditions: We need to filter phones based on two conditions: screen mode type being 'Text' and RAM size greater than 32 MiB.", "For the first condition, we will use a subquery to select 'Graphics_mode' from the 'screen_mode' table where 'Type' is 'Text'.", "For the second condition, we will use another subquery to select 'Model_name' from the 'chip_model' table where 'RAM_MiB' is greater than '32'.", "Combine the results using an OR operator in the WHERE clause of the main query to get the 'Hardware_Model_name' from the 'phone' table that meets either condition."], "pred_sql": "SELECT Hardware_Model_name FROM phone WHERE screen_mode IN (SELECT Graphics_mode FROM screen_mode WHERE Type = 'Text') OR chip_model IN (SELECT Model_name FROM chip_model WHERE RAM_MiB > '32');", "gold_sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = 'Text' OR T1.RAM_MiB  >  32;", "source_tables": ["phone", "screen_mode", "chip_model"]}
{"sample_id": 1039, "db_id": "phone_1", "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"", "rationale": ["Identify the table that contains the hardware model name, which is the 'phone' table.", "Determine the conditions for filtering: the company name should be 'Nokia Corporation' or the screen mode type should be 'Graphics'.", "To check for the screen mode type, we need to reference the 'screen_mode' table and find the relevant graphics mode.", "Construct a subquery to select the graphics modes from the 'screen_mode' table where the Type is 'Graphics'.", "Combine the conditions using an OR operator in the main query to filter the 'phone' table based on the specified criteria."], "pred_sql": "SELECT Hardware_Model_name FROM phone WHERE Company_name = 'Nokia Corporation' OR screen_mode IN (SELECT Graphics_mode FROM screen_mode WHERE Type = 'Graphics');", "gold_sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  'Graphics' OR t2.Company_name  =  'Nokia Corporation'", "source_tables": ["phone", "screen_mode"]}
{"sample_id": 1040, "db_id": "phone_1", "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.", "rationale": ["Identify the table that contains the hardware model name, which is the 'phone' table.", "We need to filter the results based on the company name, which is 'Nokia Corporation'.", "We also need to filter the results based on the screen mode type, specifically excluding those that are of type 'Text'.", "To achieve this, we will use a subquery to select all Graphics_mode from the screen_mode table where the Type is 'Text'.", "The main query will select the Hardware_Model_name from the phone table where the Company_name matches 'Nokia Corporation' and the screen_mode is not in the results of the subquery."], "pred_sql": "SELECT Hardware_Model_name FROM phone WHERE Company_name = 'Nokia Corporation' AND screen_mode NOT IN (SELECT Graphics_mode FROM screen_mode WHERE Type = 'Text');", "gold_sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  'Nokia Corporation' AND T1.Type != 'Text';", "source_tables": ["phone", "screen_mode"]}
{"sample_id": 1041, "db_id": "phone_1", "question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.", "rationale": ["Identify the relevant tables: We need to retrieve data from the 'phone' table and the 'screen_mode' table.", "Determine the columns to select: We need 'Hardware_Model_name' and 'Company_name' from the 'phone' table.", "Establish the relationship between tables: The 'phone' table has a foreign key 'screen_mode' that references 'Graphics_mode' in the 'screen_mode' table.", "Set the condition for filtering: We need to filter the results based on the 'used_kb' column in the 'screen_mode' table, specifically for values between 10 and 15.", "Construct the SQL query: Use a JOIN to combine the 'phone' and 'screen_mode' tables, select the required columns, and apply the WHERE clause for filtering."], "pred_sql": "SELECT phone.Hardware_Model_name, phone.Company_name FROM phone JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode WHERE screen_mode.used_kb BETWEEN '10' AND '15';", "gold_sql": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;", "source_tables": ["phone", "screen_mode"]}
{"sample_id": 1042, "db_id": "phone_1", "question": "Find the number of phones for each accreditation type.", "rationale": ["Identify the relevant table: The query requires information about phones, so we will use the 'phone' table.", "Determine the required columns: We need to count the number of phones for each accreditation type, which means we need 'Accreditation_type' and a count of records.", "Use the COUNT() function: This function will help us count the number of phones for each accreditation type.", "Group the results: To get the count for each accreditation type, we will use the GROUP BY clause on 'Accreditation_type'.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT Accreditation_type, COUNT(*) AS number_of_phones FROM phone GROUP BY Accreditation_type;", "gold_sql": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "source_tables": ["phone"]}
{"sample_id": 1043, "db_id": "phone_1", "question": "How many phones belongs to each accreditation type?", "rationale": ["Identify the relevant table: The query is about phones and their accreditation types, so we will use the 'phone' table.", "Determine the required columns: We need to count the number of phones for each accreditation type, which means we need 'Accreditation_type' and a count of phones.", "Use the COUNT() function: To count the number of phones for each accreditation type, we will use the COUNT() function.", "Group the results: Since we want the count for each accreditation type, we will use the GROUP BY clause on 'Accreditation_type'.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT Accreditation_type, COUNT(*) AS phone_count FROM phone GROUP BY Accreditation_type;", "gold_sql": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "source_tables": ["phone"]}
{"sample_id": 1044, "db_id": "phone_1", "question": "Find the accreditation level that more than 3 phones use.", "rationale": ["Identify the relevant table: The query is about phones, so we will use the 'phone' table.", "Determine the required column: We need to find the 'Accreditation_level' from the 'phone' table.", "Group the results: To find levels that are used by more than 3 phones, we will group the results by 'Accreditation_level'.", "Count the number of phones for each accreditation level: We will use the COUNT function to count how many phones correspond to each accreditation level.", "Filter the results: We will use the HAVING clause to filter the groups where the count is greater than 3."], "pred_sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING COUNT(*) > 3;", "gold_sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3", "source_tables": ["phone"]}
{"sample_id": 1045, "db_id": "phone_1", "question": "Find the details for all chip models.", "rationale": ["The user wants to find details for all chip models.", "To retrieve all details from a table, we use the SELECT statement.", "The asterisk (*) is used to select all columns from the specified table.", "The table we need to query is 'chip_model'.", "Thus, the complete SQL query is 'SELECT * FROM chip_model;'"], "pred_sql": "SELECT * FROM chip_model;", "gold_sql": "SELECT * FROM chip_model", "source_tables": ["chip_model"]}
{"sample_id": 1046, "db_id": "phone_1", "question": "How many models do not have the wifi function?", "rationale": ["Identify the table that contains information about chip models, which is 'chip_model'.", "Determine the relevant column that indicates WiFi capabilities, which is 'WiFi'.", "To find models that do not have WiFi, filter the records where the 'WiFi' column has the value 'No'.", "Use the COUNT() function to count the number of records that meet this condition.", "Construct the SQL query to select the count of models from the 'chip_model' table where 'WiFi' is 'No'."], "pred_sql": "SELECT COUNT(*) AS model_count FROM chip_model WHERE WiFi = 'No';", "gold_sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "source_tables": ["chip_model"]}
{"sample_id": 1047, "db_id": "phone_1", "question": "Count the number of chip model that do not have wifi.", "rationale": ["Identify the table relevant to the query, which is 'chip_model'.", "Determine the condition for counting chip models without WiFi, which is where the 'WiFi' column indicates 'No'.", "Construct the SQL query to count the number of records in the 'chip_model' table that meet this condition."], "pred_sql": "SELECT COUNT(*) FROM chip_model WHERE WiFi = 'No';", "gold_sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "source_tables": ["chip_model"]}
{"sample_id": 1048, "db_id": "phone_1", "question": "List all the model names sorted by their launch year.", "rationale": ["Identify the table that contains the model names, which is the 'chip_model' table.", "Determine the column that contains the model names, which is 'Model_name'.", "Identify the column that contains the launch year for sorting, which is 'Launch_year'.", "Construct the SQL query to select 'Model_name' from 'chip_model' and order the results by 'Launch_year' in ascending order."], "pred_sql": "SELECT Model_name FROM chip_model ORDER BY Launch_year;", "gold_sql": "SELECT model_name FROM chip_model ORDER BY launch_year", "source_tables": ["chip_model"]}
{"sample_id": 1049, "db_id": "phone_1", "question": "Find the average ram mib size of the chip models that are never used by any phone.", "rationale": ["Identify the requirement to find the average RAM size of chip models that are not used by any phone.", "To find chip models that are never used, we need to check which models are not present in the 'phone' table.", "We will use a subquery to select distinct chip models from the 'phone' table.", "The main query will then select the average RAM size from the 'chip_model' table where the model name is not in the list of used models from the subquery.", "Since RAM_MiB is stored as text, we will cast it to INTEGER for the average calculation."], "pred_sql": "SELECT AVG(CAST(RAM_MiB AS INTEGER)) AS average_ram_mib\nFROM chip_model\nWHERE Model_name NOT IN (SELECT DISTINCT chip_model FROM phone);", "gold_sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)", "source_tables": ["phone", "chip_model"]}
{"sample_id": 1050, "db_id": "phone_1", "question": "Find the names of the chip models that are not used by any phone with full accreditation type.", "rationale": ["Identify the main table of interest, which is 'chip_model', as we need to find chip model names.", "We need to filter chip models that are not used by any phone with a specific accreditation type, which is 'full'.", "To achieve this, we will use a subquery to select all chip models from the 'phone' table where the 'Accreditation_type' is 'full'.", "The main query will select 'Model_name' from 'chip_model' where the 'Model_name' is not in the list returned by the subquery."], "pred_sql": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full')", "gold_sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'", "source_tables": ["phone", "chip_model"]}
{"sample_id": 1051, "db_id": "phone_1", "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.", "rationale": ["Identify the relevant tables: We need to use the 'screen_mode' and 'phone' tables to find the pixels of the screen modes.", "Determine the relationship: The 'phone' table has a foreign key reference to the 'screen_mode' table through the 'screen_mode' column.", "Select the required column: We need to select the 'Pixels' column from the 'screen_mode' table.", "Filter the results: We need to filter the results to include only those phones that have either 'full' or 'Provisional' accreditation types.", "Use JOIN to combine the tables: We will join the 'screen_mode' and 'phone' tables on the appropriate foreign key relationship."], "pred_sql": "SELECT DISTINCT sm.Pixels \nFROM screen_mode sm \nJOIN phone p ON sm.Graphics_mode = p.screen_mode \nWHERE p.Accreditation_type = 'full' \n   OR p.Accreditation_type = 'Provisional';", "gold_sql": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'", "source_tables": ["phone", "screen_mode"]}
{"sample_id": 1052, "db_id": "match_season", "question": "How many countries are there in total?", "rationale": ["Identify the table that contains the information about countries, which is the 'country' table.", "To find the total number of countries, we need to count the entries in the 'country' table.", "Use the COUNT() function to count all rows in the 'country' table.", "Select the count with an alias 'total_countries' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_countries FROM country;", "gold_sql": "SELECT count(*) FROM country", "source_tables": ["country"]}
{"sample_id": 1053, "db_id": "match_season", "question": "Count the number of countries.", "rationale": ["Identify the table that contains the information about countries, which is the 'country' table.", "To count the number of countries, we need to use the COUNT() function in SQL.", "The SQL query will select the count of all entries in the 'country' table.", "The final SQL query will be 'SELECT COUNT(*) AS country_count FROM country;' to get the total number of countries."], "pred_sql": "SELECT COUNT(*) AS country_count FROM country;", "gold_sql": "SELECT count(*) FROM country", "source_tables": ["country"]}
{"sample_id": 1054, "db_id": "match_season", "question": "Show the country name and capital of all countries.", "rationale": ["Identify the required columns: Country_name and Capital.", "Determine the table that contains these columns: the 'country' table.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'country' table."], "pred_sql": "SELECT Country_name, Capital FROM country;", "gold_sql": "SELECT Country_name ,  Capital FROM country", "source_tables": ["country"]}
{"sample_id": 1055, "db_id": "match_season", "question": "What are the names and capitals of each country?", "rationale": ["Identify the required information: names and capitals of countries.", "Determine the relevant table: 'country' contains the necessary data.", "Select the columns: 'Country_name' for the name and 'Capital' for the capital.", "Construct the SQL query using SELECT to retrieve the specified columns from the 'country' table."], "pred_sql": "SELECT Country_name, Capital FROM country;", "gold_sql": "SELECT Country_name ,  Capital FROM country", "source_tables": ["country"]}
{"sample_id": 1056, "db_id": "match_season", "question": "Show all official native languages that contain the word \"English\".", "rationale": ["Identify the table that contains the official native languages, which is the 'country' table.", "Determine the column that holds the official native languages, which is 'Official_native_language'.", "Formulate a query to select the 'Official_native_language' from the 'country' table.", "Apply a filter to the query to only include languages that contain the word 'English', using the LIKE operator with wildcards."], "pred_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%';", "gold_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%'", "source_tables": ["country"]}
{"sample_id": 1057, "db_id": "match_season", "question": "What are the official native languages that contain the string \"English\".", "rationale": ["Identify the table that contains the official native languages, which is the 'country' table.", "Determine the column that holds the official native languages, which is 'Official_native_language'.", "Formulate a query to select the 'Official_native_language' from the 'country' table.", "Apply a filter to the query to only include languages that contain the string 'English', using the LIKE operator with wildcards."], "pred_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%';", "gold_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%'", "source_tables": ["country"]}
{"sample_id": 1058, "db_id": "match_season", "question": "Show all distinct positions of matches.", "rationale": ["Identify the table that contains the position information, which is the 'match_season' table.", "Use the SELECT statement to specify that we want to retrieve data from the 'Position' column.", "To ensure that we only get unique positions, use the DISTINCT keyword in the query."], "pred_sql": "SELECT DISTINCT Position FROM match_season;", "gold_sql": "SELECT DISTINCT POSITION FROM match_season", "source_tables": ["match_season"]}
{"sample_id": 1059, "db_id": "match_season", "question": "What are the different positions for match season?", "rationale": ["The user wants to know the different positions for the match season.", "To get the unique positions, we need to select the 'Position' column from the 'match_season' table.", "Using 'DISTINCT' will ensure that we only get unique values for the positions."], "pred_sql": "SELECT DISTINCT Position FROM match_season;", "gold_sql": "SELECT DISTINCT POSITION FROM match_season", "source_tables": ["match_season"]}
{"sample_id": 1060, "db_id": "match_season", "question": "Show the players from college UCLA.", "rationale": ["Identify the relevant table: The 'player' table contains information about players, including their names and associated teams.", "Determine the condition: We need to filter players based on their college, specifically those who attended UCLA.", "Find the relationship: The 'match_season' table contains the college information and links to the 'team' table through the 'Team' column.", "Construct a subquery: Create a subquery to select 'Team_id' from 'match_season' where 'College' is 'UCLA'.", "Combine the queries: Use the result of the subquery to filter the 'player' table, selecting players whose teams match the 'Team_id' from the subquery."], "pred_sql": "SELECT Player FROM player WHERE Team IN (SELECT Team_id FROM match_season WHERE College = 'UCLA');", "gold_sql": "SELECT Player FROM match_season WHERE College  =  'UCLA'", "source_tables": ["match_season"]}
{"sample_id": 1061, "db_id": "match_season", "question": "Who are the players from UCLA?", "rationale": ["Identify the relevant table: The 'match_season' table contains information about players and their colleges.", "Determine the specific column needed: We need the 'Player' column to get the names of the players.", "Filter the results: We want players specifically from UCLA, so we will add a WHERE clause to filter by the 'College' column."], "pred_sql": "SELECT Player FROM match_season WHERE College = 'UCLA';", "gold_sql": "SELECT Player FROM match_season WHERE College  =  'UCLA'", "source_tables": ["match_season"]}
{"sample_id": 1062, "db_id": "match_season", "question": "Show the distinct position of players from college UCLA or Duke.", "rationale": ["Identify the relevant table: The 'match_season' table contains the 'Position' and 'College' columns.", "Determine the requirement: We need to find distinct positions of players from specific colleges (UCLA and Duke).", "Use the SELECT statement to retrieve the 'Position' column.", "Use the DISTINCT keyword to ensure that only unique positions are returned.", "Apply a WHERE clause to filter the results to only include players from UCLA or Duke using the IN operator."], "pred_sql": "SELECT DISTINCT Position FROM match_season WHERE College IN ('UCLA', 'Duke');", "gold_sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  'UCLA' OR College  =  'Duke'", "source_tables": ["match_season"]}
{"sample_id": 1063, "db_id": "match_season", "question": "What are the different positions of players from UCLA or Duke colleges?", "rationale": ["Identify the relevant table: The 'match_season' table contains information about players, including their positions and colleges.", "Determine the columns needed: We need the 'Position' column to find the different positions of players.", "Filter the results: We want players from either 'UCLA' or 'Duke', so we will use a WHERE clause with the IN operator to specify these colleges.", "Use DISTINCT to ensure that we only get unique positions, avoiding duplicates in the results."], "pred_sql": "SELECT DISTINCT Position FROM match_season WHERE College IN ('UCLA', 'Duke');", "gold_sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  'UCLA' OR College  =  'Duke'", "source_tables": ["match_season"]}
{"sample_id": 1064, "db_id": "match_season", "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.", "rationale": ["Identify the relevant table: The 'match_season' table contains information about players, including their positions, draft pick numbers, and draft classes.", "Determine the columns needed: We need 'Draft_Pick_Number' and 'Draft_Class' for the output.", "Specify the condition: We want to filter the results to include only players whose position is 'defender'.", "Construct the SQL SELECT statement: Use SELECT to choose the required columns from the match_season table with the specified condition."], "pred_sql": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender';", "gold_sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  'Defender'", "source_tables": ["match_season"]}
{"sample_id": 1065, "db_id": "match_season", "question": "What are the draft pick numbers and draft classes for players who play the Defender position?", "rationale": ["Identify the relevant table: The 'match_season' table contains information about players, including their positions, draft pick numbers, and draft classes.", "Determine the columns needed: We need 'Draft_Pick_Number' and 'Draft_Class' for the players who play the Defender position.", "Filter the results: We will filter the results to include only those players whose 'Position' is 'Defender'.", "Construct the SQL query: Using the SELECT statement to retrieve the required columns from the 'match_season' table with the appropriate WHERE clause."], "pred_sql": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'Defender';", "gold_sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  'Defender'", "source_tables": ["match_season"]}
{"sample_id": 1066, "db_id": "match_season", "question": "How many distinct teams are involved in match seasons?", "rationale": ["Identify the table that contains information about teams involved in match seasons, which is the 'match_season' table.", "To find the number of distinct teams, we need to use the COUNT function along with DISTINCT to ensure we only count unique team entries.", "The query will select the distinct 'Team' column from the 'match_season' table and count them, returning the result as 'Distinct_Teams'."], "pred_sql": "SELECT COUNT(DISTINCT Team) AS Distinct_Teams FROM match_season;", "gold_sql": "SELECT count(DISTINCT Team) FROM match_season", "source_tables": ["match_season"]}
{"sample_id": 1067, "db_id": "match_season", "question": "Count the number of different teams involved in match season.", "rationale": ["Identify the table that contains information about teams involved in matches, which is the 'match_season' table.", "To count the number of different teams, we need to use the COUNT function along with DISTINCT to ensure we only count unique teams.", "The SQL query will select the count of distinct teams from the 'match_season' table."], "pred_sql": "SELECT COUNT(DISTINCT Team) AS NumberOfTeams FROM match_season;", "gold_sql": "SELECT count(DISTINCT Team) FROM match_season", "source_tables": ["match_season"]}
{"sample_id": 1068, "db_id": "match_season", "question": "Show the players and the years played.", "rationale": ["Identify the relevant table: The 'player' table contains the information about players and their years played.", "Determine the required columns: We need to select 'Player' and 'Years_Played' from the 'player' table.", "Construct the SQL query: Use the SELECT statement to retrieve the specified columns from the 'player' table."], "pred_sql": "SELECT Player, Years_Played FROM player;", "gold_sql": "SELECT Player ,  Years_Played FROM player", "source_tables": ["player"]}
{"sample_id": 1069, "db_id": "match_season", "question": "Who are the different players and how many years has each played?", "rationale": ["Identify the relevant table: The 'player' table contains information about players and their years played.", "Select the required columns: We need to retrieve the 'Player' name and 'Years_Played' for each player.", "Construct the SQL query: Use a SELECT statement to get the 'Player' and 'Years_Played' from the 'player' table."], "pred_sql": "SELECT Player, Years_Played FROM player;", "gold_sql": "SELECT Player ,  Years_Played FROM player", "source_tables": ["player"]}
{"sample_id": 1070, "db_id": "match_season", "question": "Show all team names.", "rationale": ["Identify the table that contains team names, which is the 'team' table.", "Determine the column that holds the team names, which is 'Name'.", "Construct the SQL query to select all entries from the 'Name' column in the 'team' table."], "pred_sql": "SELECT Name FROM team;", "gold_sql": "SELECT Name FROM Team", "source_tables": ["team"]}
{"sample_id": 1071, "db_id": "match_season", "question": "What are the names of all teams?", "rationale": ["Identify the table that contains team information, which is the 'team' table.", "Determine the specific column that holds the names of the teams, which is 'Name'.", "Construct a SQL query to select the 'Name' column from the 'team' table."], "pred_sql": "SELECT Name FROM team;", "gold_sql": "SELECT Name FROM Team", "source_tables": ["team"]}
{"sample_id": 1072, "db_id": "match_season", "question": "Show the season, the player, and the name of the country that player belongs to.", "rationale": ["Identify the columns needed: Season, Player, and Country name.", "Determine the tables that contain these columns: match_season for Season and Player, and country for Country name.", "Establish the relationship between the tables: match_season.Country references country.Country_id.", "Use a JOIN operation to combine data from match_season and country based on the relationship identified.", "Construct the SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT match_season.Season, match_season.Player, country.Country_name FROM match_season JOIN country ON match_season.Country = country.Country_id;", "gold_sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "source_tables": ["country", "match_season"]}
{"sample_id": 1073, "db_id": "match_season", "question": "For each player, what are their name, season, and country that they belong to?", "rationale": ["Identify the relevant tables: player and match_season.", "Determine the columns needed: player name from player table, season and country from match_season table.", "Establish the relationship between the tables: player names in player table correspond to player names in match_season table.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT player.Player, match_season.Season, match_season.Country FROM player JOIN match_season ON player.Player = match_season.Player;", "gold_sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "source_tables": ["country", "match_season"]}
{"sample_id": 1074, "db_id": "match_season", "question": "Which players are from Indonesia?", "rationale": ["Identify the relevant table that contains player information, which is the 'match_season' table.", "Determine the column that specifies the country of the players, which is 'Country' in the 'match_season' table.", "To find players from Indonesia, we need to first get the 'Country_id' for Indonesia from the 'country' table.", "Construct a subquery to select 'Country_id' from the 'country' table where 'Country_name' is 'Indonesia'.", "Use this subquery in the main query to select 'Player' from the 'match_season' table where 'Country' matches the 'Country_id' for Indonesia."], "pred_sql": "SELECT Player FROM match_season WHERE Country = (SELECT Country_id FROM country WHERE Country_name = 'Indonesia');", "gold_sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  'Indonesia'", "source_tables": ["country", "match_season"]}
{"sample_id": 1075, "db_id": "match_season", "question": "Who are the players from Indonesia?", "rationale": ["Identify the relevant table that contains player information, which is the 'match_season' table.", "Determine the condition to filter players based on their country, which is 'Indonesia'.", "To find the players from Indonesia, we need to first get the 'Country_id' for Indonesia from the 'country' table.", "Use a subquery to select the 'Country_id' from the 'country' table where 'Country_name' is 'Indonesia'.", "Finally, construct the main query to select the 'Player' from the 'match_season' table where the 'Country' matches the 'Country_id' obtained from the subquery."], "pred_sql": "SELECT Player FROM match_season WHERE Country = (SELECT Country_id FROM country WHERE Country_name = 'Indonesia');", "gold_sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  'Indonesia'", "source_tables": ["country", "match_season"]}
{"sample_id": 1076, "db_id": "match_season", "question": "What are the distinct positions of the players from a country whose capital is Dublin?", "rationale": ["Identify the relevant tables: We need data from the 'match_season' table for player positions and the 'country' table to filter by capital.", "Determine the relationship: The 'match_season' table has a foreign key 'Country' that relates to 'Country_id' in the 'country' table.", "Formulate the query: We need to select distinct positions from 'match_season' where the country matches the one with the capital 'Dublin'.", "Join the 'match_season' and 'country' tables on the country identifier to filter the results based on the capital city."], "pred_sql": "SELECT DISTINCT ms.Position FROM match_season ms JOIN country c ON ms.Country = c.Country_id WHERE c.Capital = 'Dublin';", "gold_sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  'Dublin'", "source_tables": ["country", "match_season"]}
{"sample_id": 1077, "db_id": "match_season", "question": "Give the different positions of players who play for the country with the capital Dublin.", "rationale": ["Identify the relevant tables: We need to get player positions from the match_season table and filter by country information from the country table.", "Determine the relationship: The match_season table has a foreign key 'Country' that references 'Country_id' in the country table.", "Filter the country: We need to find the country whose capital is 'Dublin'.", "Select distinct positions: We want to retrieve unique player positions from the match_season table for players representing the country with the capital Dublin."], "pred_sql": "SELECT DISTINCT ms.Position FROM match_season ms JOIN country c ON ms.Country = c.Country_id WHERE c.Capital = 'Dublin';", "gold_sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  'Dublin'", "source_tables": ["country", "match_season"]}
{"sample_id": 1078, "db_id": "match_season", "question": "What are the official languages of the countries of players from Maryland or Duke college?", "rationale": ["Identify the relevant tables: We need information from the 'country' table for official languages and the 'match_season' table to filter players by college.", "Determine the relationship: The 'match_season' table has a foreign key 'Country' that links to 'Country_id' in the 'country' table.", "Select the official languages: We need to select the 'Official_native_language' from the 'country' table.", "Filter by college: We need to filter the results to include only those players from 'Maryland' or 'Duke' college.", "Use DISTINCT to avoid duplicate languages: Since multiple players from the same country may exist, we use DISTINCT to get unique official languages."], "pred_sql": "SELECT DISTINCT c.Official_native_language \nFROM country c \nJOIN match_season ms ON c.Country_id = ms.Country \nWHERE ms.College IN ('Maryland', 'Duke');", "gold_sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  'Maryland' OR T2.College  =  'Duke'", "source_tables": ["country", "match_season"]}
{"sample_id": 1079, "db_id": "match_season", "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.", "rationale": ["Identify the relevant tables: We need to get the official native languages from the 'country' table and filter players based on their colleges from the 'match_season' table.", "Determine the relationship: The 'match_season' table has a foreign key relationship with the 'country' table through the 'Country' column.", "Select the required columns: We need the 'Official_native_language' from the 'country' table.", "Apply the necessary filters: We need to filter the results to include only those players who attended either 'Maryland' or 'Duke' colleges.", "Use DISTINCT to avoid duplicate languages in the result set."], "pred_sql": "SELECT DISTINCT c.Official_native_language \nFROM country c \nJOIN match_season ms ON c.Country_id = ms.Country \nWHERE ms.College IN ('Maryland', 'Duke');", "gold_sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  'Maryland' OR T2.College  =  'Duke'", "source_tables": ["country", "match_season"]}
{"sample_id": 1080, "db_id": "match_season", "question": "How many distinct official languages are there among countries of players whose positions are defenders.", "rationale": ["Identify the relevant tables: We need information from the 'match_season' table to filter players by position and the 'country' table to get the official languages.", "We need to count distinct official languages, so we will use the COUNT(DISTINCT ...) function.", "We need to join the 'match_season' table with the 'country' table on the country identifier, which is 'Country' in 'match_season' and 'Country_id' in 'country'.", "We will filter the results to include only those players whose position is 'defender'.", "Finally, we will select the count of distinct official languages from the resulting dataset."], "pred_sql": "SELECT COUNT(DISTINCT c.Official_native_language) AS distinct_languages\nFROM match_season ms\nJOIN country c ON ms.Country = c.Country_id\nWHERE ms.Position = 'defender';", "gold_sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender'", "source_tables": ["country", "match_season"]}
{"sample_id": 1081, "db_id": "match_season", "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.", "rationale": ["Identify the relevant tables: We need information from the 'match_season' table to find players and their positions, and the 'country' table to find the official languages of the countries.", "We need to count the distinct official languages, so we will use the COUNT(DISTINCT ...) function.", "We need to filter the players by their position, specifically those who play as 'Defender'.", "We will join the 'match_season' table with the 'country' table on the country identifier to get the official languages corresponding to the players' countries.", "Finally, we will construct the SQL query to select the count of distinct official languages for players in the Defender position."], "pred_sql": "SELECT COUNT(DISTINCT c.Official_native_language) AS Different_Languages\nFROM match_season ms\nJOIN country c ON ms.Country = c.Country_id\nWHERE ms.Position = 'Defender';", "gold_sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender'", "source_tables": ["country", "match_season"]}
{"sample_id": 1082, "db_id": "match_season", "question": "Show the season, the player, and the name of the team that players belong to.", "rationale": ["Identify the relevant table: The 'match_season' table contains the columns we need: Season, Player, and Team.", "Select the required columns: We need to select 'Season', 'Player', and 'Team' from the 'match_season' table.", "Construct the SQL query: Use the SELECT statement to retrieve the specified columns from the 'match_season' table."], "pred_sql": "SELECT match_season.Season, match_season.Player, match_season.Team FROM match_season;", "gold_sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "source_tables": ["team", "match_season"]}
{"sample_id": 1083, "db_id": "match_season", "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?", "rationale": ["Identify the relevant table: The 'match_season' table contains information about players, the seasons they play in, and their teams.", "Select the required columns: We need to select 'Player', 'Season', and 'Team' from the 'match_season' table.", "Construct the SQL query: Use the SELECT statement to retrieve the specified columns from the 'match_season' table."], "pred_sql": "SELECT match_season.Player, match_season.Season, match_season.Team FROM match_season;", "gold_sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "source_tables": ["team", "match_season"]}
{"sample_id": 1084, "db_id": "match_season", "question": "Show the positions of the players from the team with name \"Ryley Goldner\".", "rationale": ["Identify the team ID for the team named 'Ryley Goldner' by querying the 'team' table.", "Use the retrieved team ID to find the positions of players in the 'match_season' table by filtering on the 'Team' column."], "pred_sql": "SELECT Position FROM match_season WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Ryley Goldner');", "gold_sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Ryley Goldner'", "source_tables": ["team", "match_season"]}
{"sample_id": 1085, "db_id": "match_season", "question": "Return the positions of players on the team Ryley Goldner.", "rationale": ["Identify the team name from the input query, which is 'Ryley Goldner'.", "Find the corresponding Team_id for 'Ryley Goldner' in the 'team' table.", "Use the Team_id to query the 'match_season' table to get the positions of players associated with that team."], "pred_sql": "SELECT Position FROM match_season WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Ryley Goldner');", "gold_sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Ryley Goldner'", "source_tables": ["team", "match_season"]}
{"sample_id": 1086, "db_id": "match_season", "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".", "rationale": ["Identify the team 'Columbus Crew' in the 'team' table to get its unique identifier (Team_id).", "Use the identified Team_id to filter the 'match_season' table for players associated with that team.", "Count the distinct colleges from the 'College' column in the filtered results of the 'match_season' table."], "pred_sql": "SELECT COUNT(DISTINCT College) AS distinct_colleges_count FROM match_season WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Columbus Crew');", "gold_sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Columbus Crew'", "source_tables": ["team", "match_season"]}
{"sample_id": 1087, "db_id": "match_season", "question": "Count the number of different colleges that players who play for Columbus Crew are from.", "rationale": ["Identify the relevant table: The 'match_season' table contains information about players and their colleges.", "Determine the condition: We need to filter players who play for 'Columbus Crew'.", "Find the Team_id for 'Columbus Crew': This requires a subquery to select the Team_id from the 'team' table where the Name is 'Columbus Crew'.", "Count distinct colleges: Use COUNT(DISTINCT College) to count the number of different colleges from which the players are.", "Construct the SQL query: Combine the above steps into a single SQL query."], "pred_sql": "SELECT COUNT(DISTINCT College) AS Different_Colleges FROM match_season WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Columbus Crew');", "gold_sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Columbus Crew'", "source_tables": ["team", "match_season"]}
{"sample_id": 1088, "db_id": "match_season", "question": "Show the players and years played for players from team \"Columbus Crew\".", "rationale": ["Identify the relevant tables: 'player' and 'team'.", "Determine the columns needed: 'Player' and 'Years_Played' from the 'player' table.", "Establish the relationship between the 'player' and 'team' tables using the foreign key 'player.Team' and 'team.Team_id'.", "Filter the results to include only players from the team named 'Columbus Crew'.", "Construct the SQL query using a JOIN to combine the 'player' and 'team' tables, selecting the desired columns and applying the WHERE clause for filtering."], "pred_sql": "SELECT player.Player, player.Years_Played FROM player JOIN team ON player.Team = team.Team_id WHERE team.Name = 'Columbus Crew';", "gold_sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Columbus Crew'", "source_tables": ["team", "player"]}
{"sample_id": 1089, "db_id": "match_season", "question": "What are the players who played for Columbus Crew, and how many years did each play for?", "rationale": ["Identify the relevant tables: 'player' and 'team' are needed to get player information and their associated teams.", "Determine the relationship between the tables: 'player' has a foreign key 'Team' that references 'team.Team_id'.", "Filter the results to only include players from 'Columbus Crew'.", "Select the player names and their years played from the 'player' table."], "pred_sql": "SELECT player.Player, player.Years_Played FROM player JOIN team ON player.Team = team.Team_id WHERE team.Name = 'Columbus Crew';", "gold_sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Columbus Crew'", "source_tables": ["team", "player"]}
{"sample_id": 1090, "db_id": "match_season", "question": "Show the position of players and the corresponding number of players.", "rationale": ["Identify the relevant table: The 'match_season' table contains the 'Position' of players.", "Determine the required information: We need to show the position of players and count how many players are in each position.", "Use the COUNT() function to count the number of players for each position.", "Group the results by 'Position' to get the count for each unique position."], "pred_sql": "SELECT Position, COUNT(*) AS Number_of_Players FROM match_season GROUP BY Position;", "gold_sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "source_tables": ["match_season"]}
{"sample_id": 1091, "db_id": "match_season", "question": "How many players played each position?", "rationale": ["Identify the relevant table: The 'match_season' table contains information about players and their positions.", "Determine the required information: We need to count the number of players for each position.", "Use the COUNT() function to count players: This function will help us get the total number of players for each position.", "Group the results by position: We will use the GROUP BY clause to aggregate the counts by the 'Position' column."], "pred_sql": "SELECT Position, COUNT(*) AS Number_of_Players FROM match_season GROUP BY Position;", "gold_sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "source_tables": ["match_season"]}
{"sample_id": 1092, "db_id": "match_season", "question": "Show the country names and the corresponding number of players.", "rationale": ["Identify the tables needed: We need the 'country' table for country names and the 'player' table to count the number of players.", "Establish the relationship: The 'match_season' table connects 'country' and 'player' through the 'Country' and 'Player' fields respectively.", "Use a LEFT JOIN to ensure we include all countries even if they have no players.", "Count the number of players for each country using COUNT() and group the results by country name."], "pred_sql": "SELECT c.Country_name, COUNT(p.Player_ID) AS Number_of_Players\nFROM country c\nLEFT JOIN match_season ms ON c.Country_id = ms.Country\nLEFT JOIN player p ON ms.Player = p.Player\nGROUP BY c.Country_name;", "gold_sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "source_tables": ["country", "match_season"]}
{"sample_id": 1093, "db_id": "match_season", "question": "How many players are from each country?", "rationale": ["Identify the relevant table that contains player and country information, which is the 'match_season' table.", "We need to count the number of players from each country, so we will use the COUNT() function.", "To group the results by country, we will use the GROUP BY clause on the 'Country' column.", "The final query will select the 'Country' and the count of players, giving us the number of players from each country."], "pred_sql": "SELECT Country, COUNT(Player) AS Number_of_Players FROM match_season GROUP BY Country;", "gold_sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "source_tables": ["country", "match_season"]}
{"sample_id": 1094, "db_id": "match_season", "question": "Return all players sorted by college in ascending alphabetical order.", "rationale": ["Identify the table that contains player information, which is the 'player' table.", "Determine the requirement to return all players, which means selecting all columns from the 'player' table.", "Recognize the need to sort the results by the 'College' column in ascending order.", "Construct the SQL query using SELECT to get all columns, FROM to specify the 'player' table, and ORDER BY to sort by 'College' in ascending order."], "pred_sql": "SELECT * FROM player ORDER BY College ASC;", "gold_sql": "SELECT player FROM match_season ORDER BY College ASC", "source_tables": ["match_season"]}
{"sample_id": 1095, "db_id": "match_season", "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?", "rationale": ["Identify the table that contains player information related to match seasons, which is the 'match_season' table.", "Determine the specific column that contains the player names, which is 'Player'.", "Since the request is to sort the results by college, identify the 'College' column in the 'match_season' table.", "Construct the SQL query to select all players from the 'match_season' table and order the results by the 'College' column in ascending order."], "pred_sql": "SELECT Player FROM match_season ORDER BY College ASC;", "gold_sql": "SELECT player FROM match_season ORDER BY College ASC", "source_tables": ["match_season"]}
{"sample_id": 1096, "db_id": "match_season", "question": "Show the most common position of players in match seasons.", "rationale": ["Identify the relevant table: The 'match_season' table contains the 'Position' column which we need to analyze.", "Count the occurrences of each position: We will use the COUNT() function to count how many players occupy each position.", "Group the results by position: We will use GROUP BY to aggregate the counts for each unique position.", "Order the results: To find the most common position, we will order the results in descending order based on the count.", "Limit the results: We will limit the output to only the top result to get the most common position."], "pred_sql": "SELECT Position, COUNT(*) as Position_Count FROM match_season GROUP BY Position ORDER BY Position_Count DESC LIMIT 1;", "gold_sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "source_tables": ["match_season"]}
{"sample_id": 1097, "db_id": "match_season", "question": "What is the position that is most common among players in match seasons?", "rationale": ["Identify the relevant table: The 'match_season' table contains the 'Position' column which we need to analyze.", "We need to count how many players occupy each position, so we will use the COUNT() function.", "To group the results by position, we will use the GROUP BY clause on the 'Position' column.", "To find the most common position, we will order the results in descending order based on the count of players in each position.", "Finally, we will limit the results to just one entry to get the most common position."], "pred_sql": "SELECT Position, COUNT(*) as Position_Count FROM match_season GROUP BY Position ORDER BY Position_Count DESC LIMIT 1;", "gold_sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "source_tables": ["match_season"]}
{"sample_id": 1098, "db_id": "match_season", "question": "Show the top 3 most common colleges of players in match seasons.", "rationale": ["Identify the relevant table: The 'match_season' table contains the 'College' column which we need to analyze.", "We need to count how many players attended each college, so we will use the COUNT() function.", "To get the most common colleges, we will group the results by the 'College' column using GROUP BY.", "To sort the colleges by their count in descending order, we will use ORDER BY with the COUNT result.", "Finally, we want only the top 3 colleges, so we will use LIMIT 3."], "pred_sql": "SELECT College, COUNT(*) as College_Count FROM match_season GROUP BY College ORDER BY College_Count DESC LIMIT 3;", "gold_sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "source_tables": ["match_season"]}
{"sample_id": 1099, "db_id": "match_season", "question": "What are the three colleges from which the most players are from?", "rationale": ["Identify the relevant table: The 'match_season' table contains the 'College' column which we need to analyze.", "We need to count the number of players from each college, so we will use the COUNT() function.", "To group the results by college, we will use the GROUP BY clause on the 'College' column.", "To find the colleges with the most players, we will order the results in descending order based on the count of players.", "Finally, we will limit the results to the top three colleges using the LIMIT clause."], "pred_sql": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;", "gold_sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "source_tables": ["match_season"]}
{"sample_id": 1100, "db_id": "match_season", "question": "Show the name of colleges that have at least two players.", "rationale": ["Identify the relevant table: The 'match_season' table contains the 'College' column and the 'Player' column.", "We need to find colleges that have at least two players, which means we will group the results by 'College'.", "Using the COUNT function, we can count the number of players associated with each college.", "To filter the results to only include colleges with two or more players, we will use the HAVING clause with a condition that counts players greater than or equal to 2."], "pred_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2;", "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "source_tables": ["match_season"]}
{"sample_id": 1101, "db_id": "match_season", "question": "What are the names of all colleges that have two or more players?", "rationale": ["Identify the relevant table: The 'match_season' table contains information about players and their colleges.", "We need to find colleges with two or more players, which requires counting the number of players associated with each college.", "Use the GROUP BY clause to group the results by the 'College' column.", "Use the HAVING clause to filter the groups to only include those with a count of players greater than or equal to 2."], "pred_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2;", "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "source_tables": ["match_season"]}
{"sample_id": 1102, "db_id": "match_season", "question": "Show the name of colleges that have at least two players in descending alphabetical order.", "rationale": ["Identify the relevant table: The 'match_season' table contains the 'College' and 'Player' columns.", "We need to find colleges with at least two players, so we will use the COUNT function to count the number of players per college.", "Use GROUP BY to group the results by 'College' so we can count the players in each college.", "Use HAVING to filter the groups to only include those with a count of players greater than or equal to 2.", "Finally, order the results in descending alphabetical order by 'College'."], "pred_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2 ORDER BY College DESC;", "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "source_tables": ["match_season"]}
{"sample_id": 1103, "db_id": "match_season", "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "rationale": ["Identify the relevant table: The 'match_season' table contains the 'College' and 'Player' columns, which are needed for this query.", "Group the results by 'College': To find colleges with two or more players, we need to group the results by the 'College' column.", "Count the number of players per college: Use the COUNT function to count the number of players associated with each college.", "Filter the groups: Use the HAVING clause to filter out colleges that have fewer than 2 players.", "Order the results: Finally, sort the results in descending alphabetical order by 'College'."], "pred_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2 ORDER BY College DESC;", "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "source_tables": ["match_season"]}
{"sample_id": 1104, "db_id": "match_season", "question": "What are the names of teams that do no have match season record?", "rationale": ["Identify the table that contains team information, which is the 'team' table.", "Determine the relevant column that contains the team names, which is 'Name'.", "Identify the table that contains match season records, which is the 'match_season' table.", "Find the column in the 'match_season' table that corresponds to the team, which is 'Team'.", "To find teams without match season records, we need to select teams from the 'team' table whose 'Team_id' is not present in the 'match_season' table's 'Team' column.", "Construct the SQL query using a subquery to filter out teams that have records in the 'match_season' table."], "pred_sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT DISTINCT Team FROM match_season);", "gold_sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "source_tables": ["team", "match_season"]}
{"sample_id": 1105, "db_id": "match_season", "question": "Return the names of teams that have no match season record.", "rationale": ["Identify the table that contains team information, which is the 'team' table.", "Determine the relevant column for team names, which is 'Name'.", "Identify the table that contains match season records, which is the 'match_season' table.", "Find the column in 'match_season' that relates to teams, which is 'Team'.", "To find teams with no match season records, we need to select teams from the 'team' table whose IDs are not present in the 'match_season' table.", "Use a subquery to select distinct team IDs from 'match_season' and use this in a NOT IN clause to filter teams from the 'team' table."], "pred_sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT DISTINCT Team FROM match_season);", "gold_sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "source_tables": ["team", "match_season"]}
{"sample_id": 1106, "db_id": "match_season", "question": "What are the names of countries that have both players with position forward and players with position defender?", "rationale": ["We need to find countries that have players in both the 'forward' and 'defender' positions.", "To do this, we will join the 'country' table with the 'match_season' table on the country identifier.", "We will filter the results to include only those players whose position is either 'forward' or 'defender'.", "Next, we will group the results by country name to aggregate the data for each country.", "Finally, we will use the HAVING clause to ensure that each country has players in both positions by checking that the count of distinct positions is equal to 2."], "pred_sql": "SELECT DISTINCT c.Country_name \nFROM country c \nJOIN match_season ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('forward', 'defender') \nGROUP BY c.Country_name \nHAVING COUNT(DISTINCT ms.Position) = 2;", "gold_sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender'", "source_tables": ["country", "match_season"]}
{"sample_id": 1107, "db_id": "match_season", "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.", "rationale": ["Identify the relevant tables: We need to retrieve country names, so we will use the 'country' table. We also need player positions, which are found in the 'match_season' table.", "Determine the relationship: The 'match_season' table has a foreign key 'Country' that links to 'Country_id' in the 'country' table. This allows us to join these two tables.", "Specify the required positions: We are interested in players who play either 'Forward' or 'Defender'.", "Construct the SQL query: We will select distinct country names from the 'country' table, joining it with the 'match_season' table on the country ID, and filter the results based on the specified positions."], "pred_sql": "SELECT DISTINCT c.Country_name \nFROM country c \nJOIN match_season ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('Forward', 'Defender');", "gold_sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender'", "source_tables": ["country", "match_season"]}
{"sample_id": 1108, "db_id": "match_season", "question": "Which college have both players with position midfielder and players with position defender?", "rationale": ["Identify the requirement to find colleges that have players in both the 'midfielder' and 'defender' positions.", "Use a subquery to select colleges that have players with the position 'midfielder'.", "Use another subquery to select colleges that have players with the position 'defender'.", "Combine the results of both subqueries using an intersection (i.e., using the IN clause) to find colleges that appear in both results.", "Select distinct colleges to avoid duplicates in the final result."], "pred_sql": "SELECT DISTINCT College FROM match_season WHERE College IN (SELECT College FROM match_season WHERE Position = 'midfielder') AND College IN (SELECT College FROM match_season WHERE Position = 'defender');", "gold_sql": "SELECT College FROM match_season WHERE POSITION  =  'Midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION  =  'Defender'", "source_tables": ["match_season"]}
{"sample_id": 1109, "db_id": "match_season", "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.", "rationale": ["Identify the relevant table: The 'match_season' table contains information about players, their positions, and the colleges they attended.", "Determine the required positions: We need to filter players based on the 'Midfielder' and 'Defender' positions.", "Construct the SQL query: We will select distinct colleges from the 'match_season' table where the position is either 'Midfielder' or 'Defender'."], "pred_sql": "SELECT DISTINCT College FROM match_season WHERE Position IN ('Midfielder', 'Defender');", "gold_sql": "SELECT College FROM match_season WHERE POSITION  =  'Midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION  =  'Defender'", "source_tables": ["match_season"]}
{"sample_id": 1110, "db_id": "climbing", "question": "How many climbers are there?", "rationale": ["Identify the table that contains information about climbers, which is the 'climber' table.", "To find out how many climbers there are, we need to count the number of entries in the 'climber' table.", "Use the COUNT() function to count all rows in the 'climber' table.", "Construct the SQL query to select the count of climbers from the climber table."], "pred_sql": "SELECT COUNT(*) AS NumberOfClimbers FROM climber;", "gold_sql": "SELECT count(*) FROM climber", "source_tables": ["climber"]}
{"sample_id": 1111, "db_id": "climbing", "question": "Count the number of climbers.", "rationale": ["Identify the table that contains the information about climbers, which is the 'climber' table.", "To count the number of climbers, we will use the COUNT() function in SQL.", "The query will select the count of all records in the 'climber' table.", "We will alias the count result as 'NumberOfClimbers' for clarity."], "pred_sql": "SELECT COUNT(*) AS NumberOfClimbers FROM climber;", "gold_sql": "SELECT count(*) FROM climber", "source_tables": ["climber"]}
{"sample_id": 1112, "db_id": "climbing", "question": "List the names of climbers in descending order of points.", "rationale": ["Identify the table that contains the climber names, which is the 'climber' table.", "Determine the column that holds the climber names, which is 'Name'.", "Identify the column that holds the points awarded to climbers, which is 'Points'.", "Construct the SQL query to select the 'Name' from the 'climber' table.", "Add an ORDER BY clause to sort the results by 'Points' in descending order."], "pred_sql": "SELECT Name FROM climber ORDER BY Points DESC;", "gold_sql": "SELECT Name FROM climber ORDER BY Points DESC", "source_tables": ["climber"]}
{"sample_id": 1113, "db_id": "climbing", "question": "What are the names of the climbers, ordered by points descending?", "rationale": ["Identify the table that contains the information about climbers, which is the 'climber' table.", "Determine the specific column needed for the output, which is 'Name' for the climbers' names.", "Since the user wants the results ordered by points, we need to include the 'Points' column in the ORDER BY clause.", "Construct the SQL query to select the 'Name' from the 'climber' table and order the results by 'Points' in descending order."], "pred_sql": "SELECT Name FROM climber ORDER BY Points DESC;", "gold_sql": "SELECT Name FROM climber ORDER BY Points DESC", "source_tables": ["climber"]}
{"sample_id": 1114, "db_id": "climbing", "question": "List the names of climbers whose country is not Switzerland.", "rationale": ["Identify the table that contains the information about climbers, which is the 'climber' table.", "Determine the column that contains the names of the climbers, which is the 'Name' column.", "Identify the column that contains the country of the climbers, which is the 'Country' column.", "Formulate a SQL query to select the 'Name' from the 'climber' table where the 'Country' is not equal to 'Switzerland'."], "pred_sql": "SELECT Name FROM climber WHERE Country != 'Switzerland';", "gold_sql": "SELECT Name FROM climber WHERE Country != 'Switzerland'", "source_tables": ["climber"]}
{"sample_id": 1115, "db_id": "climbing", "question": "What are the names of climbers who are not from the country of Switzerland?", "rationale": ["Identify the table that contains the information about climbers, which is the 'climber' table.", "Determine the column that contains the names of the climbers, which is the 'Name' column in the 'climber' table.", "Identify the column that contains the country of the climbers, which is the 'Country' column in the 'climber' table.", "Formulate a SQL query to select the 'Name' column from the 'climber' table where the 'Country' is not equal to 'Switzerland'."], "pred_sql": "SELECT Name FROM climber WHERE Country != 'Switzerland';", "gold_sql": "SELECT Name FROM climber WHERE Country != 'Switzerland'", "source_tables": ["climber"]}
{"sample_id": 1116, "db_id": "climbing", "question": "What is the maximum point for climbers whose country is United Kingdom?", "rationale": ["Identify the table that contains the relevant data: the 'climber' table holds information about climbers and their points.", "Determine the specific requirement: we need to find the maximum points awarded to climbers from the United Kingdom.", "Use the MAX() function to find the maximum value in the 'Points' column.", "Add a WHERE clause to filter the results to only include climbers from the United Kingdom."], "pred_sql": "SELECT MAX(Points) AS Max_Points FROM climber WHERE Country = 'United Kingdom';", "gold_sql": "SELECT max(Points) FROM climber WHERE Country  =  'United Kingdom'", "source_tables": ["climber"]}
{"sample_id": 1117, "db_id": "climbing", "question": "Return the maximum number of points for climbers from the United Kingdom.", "rationale": ["Identify the table that contains the points awarded to climbers, which is the 'climber' table.", "Determine the relevant column for points, which is 'Points'.", "We need to find the maximum points, so we will use the MAX() function on the 'Points' column.", "We need to filter the results to only include climbers from the United Kingdom, so we will add a WHERE clause that specifies Country = 'United Kingdom'.", "Combine these elements to form the complete SQL query."], "pred_sql": "SELECT MAX(Points) AS Max_Points FROM climber WHERE Country = 'United Kingdom';", "gold_sql": "SELECT max(Points) FROM climber WHERE Country  =  'United Kingdom'", "source_tables": ["climber"]}
{"sample_id": 1118, "db_id": "climbing", "question": "How many distinct countries are the climbers from?", "rationale": ["Identify the table that contains the information about climbers, which is the 'climber' table.", "Determine the column that contains the country information, which is the 'Country' column in the 'climber' table.", "To find the number of distinct countries, use the COUNT function along with DISTINCT to count unique entries in the 'Country' column.", "Construct the SQL query to select the count of distinct countries from the 'climber' table."], "pred_sql": "SELECT COUNT(DISTINCT Country) AS Distinct_Countries FROM climber;", "gold_sql": "SELECT COUNT(DISTINCT Country) FROM climber", "source_tables": ["climber"]}
{"sample_id": 1119, "db_id": "climbing", "question": "Count the number of different countries that climbers are from.", "rationale": ["Identify the table that contains the relevant data, which is the 'climber' table.", "Determine that we need to count the number of distinct countries from the 'Country' column in the 'climber' table.", "Use the COUNT function to count the distinct values in the 'Country' column.", "Construct the SQL query to select the count of distinct countries from the climber table."], "pred_sql": "SELECT COUNT(DISTINCT Country) AS NumberOfCountries FROM climber;", "gold_sql": "SELECT COUNT(DISTINCT Country) FROM climber", "source_tables": ["climber"]}
{"sample_id": 1120, "db_id": "climbing", "question": "What are the names of mountains in ascending alphabetical order?", "rationale": ["Identify the table that contains the mountain names, which is the 'mountain' table.", "Select the 'Name' column from the 'mountain' table to get the names of the mountains.", "To fulfill the requirement of ordering the names in ascending alphabetical order, use the ORDER BY clause with 'Name' and specify ASC for ascending order."], "pred_sql": "SELECT Name FROM mountain ORDER BY Name ASC;", "gold_sql": "SELECT Name FROM mountain ORDER BY Name ASC", "source_tables": ["mountain"]}
{"sample_id": 1121, "db_id": "climbing", "question": "Give the names of mountains in alphabetical order.", "rationale": ["Identify the table that contains the mountain names, which is the 'mountain' table.", "Select the 'Name' column from the 'mountain' table to get the names of the mountains.", "To fulfill the requirement of ordering the names alphabetically, use the ORDER BY clause with 'Name' and specify ASC for ascending order."], "pred_sql": "SELECT Name FROM mountain ORDER BY Name ASC;", "gold_sql": "SELECT Name FROM mountain ORDER BY Name ASC", "source_tables": ["mountain"]}
{"sample_id": 1122, "db_id": "climbing", "question": "What are the countries of mountains with height bigger than 5000?", "rationale": ["Identify the table that contains the relevant data: the 'mountain' table.", "Determine the column that contains the height of the mountains: 'Height'.", "Specify the condition for filtering mountains: height greater than 5000.", "Select the distinct countries from the 'Country' column where the height condition is met."], "pred_sql": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000'", "gold_sql": "SELECT Country FROM mountain WHERE Height  >  5000", "source_tables": ["mountain"]}
{"sample_id": 1123, "db_id": "climbing", "question": "Return the countries of the mountains that have a height larger than 5000.", "rationale": ["Identify the table that contains the relevant data: the 'mountain' table.", "Determine the column that contains the height of the mountains: 'Height'.", "Specify the condition for filtering: mountains with a height greater than 5000 meters.", "Select the 'Country' column to get the countries of those mountains.", "Use DISTINCT to ensure that each country is listed only once in the result."], "pred_sql": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000'", "gold_sql": "SELECT Country FROM mountain WHERE Height  >  5000", "source_tables": ["mountain"]}
{"sample_id": 1124, "db_id": "climbing", "question": "What is the name of the highest mountain?", "rationale": ["Identify the table that contains the information about mountains, which is the 'mountain' table.", "To find the highest mountain, we need to sort the mountains by their height in descending order.", "We will select the 'Name' column to get the name of the mountain.", "To get only the highest mountain, we will limit the results to 1 using 'LIMIT 1'."], "pred_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1;", "gold_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"]}
{"sample_id": 1125, "db_id": "climbing", "question": "Return the name of the mountain with the greatest height.", "rationale": ["Identify the table that contains the mountain information, which is the 'mountain' table.", "Determine the column that holds the height of the mountains, which is 'Height'.", "To find the mountain with the greatest height, we need to sort the mountains in descending order based on their height.", "Use the 'ORDER BY' clause to sort the results by 'Height' in descending order.", "Since we only want the mountain with the greatest height, we will limit the results to 1 using 'LIMIT 1'.", "Select the 'Name' column to return the name of the mountain."], "pred_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1;", "gold_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"]}
{"sample_id": 1126, "db_id": "climbing", "question": "List the distinct ranges of the mountains with the top 3 prominence.", "rationale": ["Identify the table that contains the information about mountain ranges, which is the 'mountain' table.", "We need to select distinct ranges, so we will use the SELECT DISTINCT statement on the 'Range' column.", "To get the top 3 prominence, we will order the results by the 'Prominence' column in descending order.", "Finally, we will limit the results to the top 3 using the LIMIT clause."], "pred_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3;", "gold_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "source_tables": ["mountain"]}
{"sample_id": 1127, "db_id": "climbing", "question": "What are the different ranges of the 3 mountains with the highest prominence?", "rationale": ["Identify the table that contains the information about mountains, which is the 'mountain' table.", "We need to find the different ranges of the mountains with the highest prominence, so we will select the 'Range' column from the 'mountain' table.", "To get the mountains with the highest prominence, we will order the results by the 'Prominence' column in descending order.", "Since we only want the top 3 mountains, we will use the LIMIT clause to restrict the results to 3.", "To ensure we get unique ranges, we will use the DISTINCT keyword to avoid duplicate range entries."], "pred_sql": "SELECT DISTINCT Range FROM mountain ORDER BY CAST(Prominence AS INTEGER) DESC LIMIT 3;", "gold_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "source_tables": ["mountain"]}
{"sample_id": 1128, "db_id": "climbing", "question": "Show names of climbers and the names of mountains they climb.", "rationale": ["Identify the tables involved: 'climber' and 'mountain'.", "Determine the columns needed: 'Name' from 'climber' and 'Name' from 'mountain'.", "Establish the relationship between the two tables using the foreign key 'Mountain_ID'.", "Construct the SQL query using a JOIN to combine data from both tables based on the matching 'Mountain_ID'.", "Select the appropriate columns and give them meaningful aliases for clarity."], "pred_sql": "SELECT climber.Name AS Climber_Name, mountain.Name AS Mountain_Name FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;", "gold_sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "source_tables": ["mountain", "climber"]}
{"sample_id": 1129, "db_id": "climbing", "question": "What are the names of climbers and the corresponding names of mountains that they climb?", "rationale": ["Identify the tables involved: 'climber' and 'mountain'.", "Determine the columns needed: 'climber.Name' for climber names and 'mountain.Name' for mountain names.", "Establish the relationship between the two tables using the foreign key 'Mountain_ID'.", "Use a JOIN operation to combine data from both tables based on the matching 'Mountain_ID'.", "Select the relevant columns and alias them for clarity in the output."], "pred_sql": "SELECT climber.Name AS Climber_Name, mountain.Name AS Mountain_Name FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;", "gold_sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "source_tables": ["mountain", "climber"]}
{"sample_id": 1130, "db_id": "climbing", "question": "Show the names of climbers and the heights of mountains they climb.", "rationale": ["Identify the tables involved: 'climber' and 'mountain'.", "Determine the columns needed: 'Name' from 'climber' and 'Height' from 'mountain'.", "Establish the relationship between the two tables using the foreign key 'Mountain_ID'.", "Construct the SQL query using a JOIN to combine data from both tables based on the 'Mountain_ID'.", "Select the required columns and alias them for clarity."], "pred_sql": "SELECT climber.Name AS Climber_Name, mountain.Height AS Mountain_Height FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;", "gold_sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "source_tables": ["mountain", "climber"]}
{"sample_id": 1131, "db_id": "climbing", "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?", "rationale": ["Identify the tables involved: 'climber' and 'mountain'.", "Determine the columns needed: 'Name' from 'climber' and 'Height' from 'mountain'.", "Establish the relationship between the two tables using the foreign key 'Mountain_ID'.", "Construct the SQL query using a JOIN to combine data from both tables based on the 'Mountain_ID'.", "Select the required columns and alias them for clarity."], "pred_sql": "SELECT climber.Name AS Climber_Name, mountain.Height AS Mountain_Height FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;", "gold_sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "source_tables": ["mountain", "climber"]}
{"sample_id": 1132, "db_id": "climbing", "question": "Show the height of the mountain climbed by the climber with the maximum points.", "rationale": ["Identify the relevant tables: 'mountain' and 'climber'.", "We need to find the height of the mountain climbed by the climber with the maximum points, so we will join the 'mountain' table with the 'climber' table on the 'Mountain_ID'.", "To find the climber with the maximum points, we will use a subquery that selects the maximum value from the 'Points' column in the 'climber' table.", "Finally, we will select the 'Height' from the 'mountain' table where the climber's points match the maximum points found in the subquery."], "pred_sql": "SELECT mountain.Height FROM mountain JOIN climber ON mountain.Mountain_ID = climber.Mountain_ID WHERE climber.Points = (SELECT MAX(Points) FROM climber);", "gold_sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "source_tables": ["mountain", "climber"]}
{"sample_id": 1133, "db_id": "climbing", "question": "What is the height of the mountain climbined by the climbing who had the most points?", "rationale": ["Identify the relevant tables: 'mountain' and 'climber'.", "We need to find the height of the mountain climbed by the climber with the most points.", "To do this, we will join the 'mountain' table with the 'climber' table on the 'Mountain_ID' column.", "Next, we need to find the maximum points awarded to any climber, which can be done using a subquery: (SELECT MAX(Points) FROM climber).", "Finally, we will select the height of the mountain where the climber's points match the maximum points found in the subquery."], "pred_sql": "SELECT mountain.Height FROM mountain JOIN climber ON mountain.Mountain_ID = climber.Mountain_ID WHERE climber.Points = (SELECT MAX(Points) FROM climber);", "gold_sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "source_tables": ["mountain", "climber"]}
{"sample_id": 1134, "db_id": "climbing", "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".", "rationale": ["Identify the relevant tables: 'mountain' and 'climber'.", "Determine the columns needed: we need the distinct names of mountains, which is in the 'Name' column of the 'mountain' table.", "Since we need to filter climbers based on their country, we will use the 'Country' column from the 'climber' table.", "To find the mountains climbed by these climbers, we need to join the 'mountain' and 'climber' tables on the 'Mountain_ID' column, which is the foreign key in the 'climber' table.", "Construct the SQL query to select distinct mountain names from the 'mountain' table where the climber's country is 'West Germany'."], "pred_sql": "SELECT DISTINCT mountain.Name FROM mountain JOIN climber ON mountain.Mountain_ID = climber.Mountain_ID WHERE climber.Country = 'West Germany';", "gold_sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  'West Germany'", "source_tables": ["mountain", "climber"]}
{"sample_id": 1135, "db_id": "climbing", "question": "What are the different names of mountains ascended by climbers from the country of West Germany?", "rationale": ["Identify the relevant tables: We need data from both the 'mountain' and 'climber' tables.", "Determine the relationship: The 'climber' table has a foreign key 'Mountain_ID' that links to 'Mountain_ID' in the 'mountain' table.", "Select the required columns: We need the distinct names of mountains, so we will select 'mountain.Name'.", "Apply the necessary filter: We need to filter climbers based on their country, specifically 'West Germany'.", "Join the tables: We will perform an INNER JOIN between 'mountain' and 'climber' on the 'Mountain_ID' to get the relevant mountain names for climbers from West Germany."], "pred_sql": "SELECT DISTINCT mountain.Name FROM mountain JOIN climber ON mountain.Mountain_ID = climber.Mountain_ID WHERE climber.Country = 'West Germany';", "gold_sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  'West Germany'", "source_tables": ["mountain", "climber"]}
{"sample_id": 1136, "db_id": "climbing", "question": "Show the times used by climbers to climb mountains in Country Uganda.", "rationale": ["Identify the relevant tables: 'climber' and 'mountain'.", "Determine the columns needed: 'Time' from the 'climber' table.", "Establish the relationship between the tables using the foreign key 'Mountain_ID'.", "Filter the results to include only those climbers who climbed mountains located in 'Uganda'.", "Construct the SQL query to select the 'Time' from the 'climber' table, joining it with the 'mountain' table on 'Mountain_ID' and applying the country filter."], "pred_sql": "SELECT climber.Time FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID WHERE mountain.Country = 'Uganda';", "gold_sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  'Uganda'", "source_tables": ["mountain", "climber"]}
{"sample_id": 1137, "db_id": "climbing", "question": "What are the times used by climbers who climbed mountains in the country of Uganda?", "rationale": ["Identify the relevant tables: 'climber' and 'mountain'.", "Determine the columns needed: 'Time' from the 'climber' table and filter based on 'Country' from the 'mountain' table.", "Establish the relationship between the two tables using the foreign key 'Mountain_ID'.", "Construct the SQL query to select 'Time' from 'climber' where the corresponding mountain's 'Country' is 'Uganda'."], "pred_sql": "SELECT climber.Time FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID WHERE mountain.Country = 'Uganda';", "gold_sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  'Uganda'", "source_tables": ["mountain", "climber"]}
{"sample_id": 1138, "db_id": "climbing", "question": "Please show the countries and the number of climbers from each country.", "rationale": ["Identify the relevant table: The 'climber' table contains information about climbers, including their country.", "Select the columns needed: We need the 'Country' column and a count of climbers, which can be done using COUNT(Climber_ID).", "Group the results by country: To get the number of climbers from each country, we will use the GROUP BY clause on the 'Country' column."], "pred_sql": "SELECT Country, COUNT(Climber_ID) AS Number_of_Climbers FROM climber GROUP BY Country;", "gold_sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "source_tables": ["climber"]}
{"sample_id": 1139, "db_id": "climbing", "question": "How many climbers are from each country?", "rationale": ["Identify the relevant table: The 'climber' table contains information about climbers, including their country.", "Determine the required information: We need to count the number of climbers from each country.", "Use the COUNT() function to count climbers: This function will help us count the number of climbers for each country.", "Group the results by country: We will use the GROUP BY clause to group the results based on the 'Country' column."], "pred_sql": "SELECT Country, COUNT(Climber_ID) AS Number_of_Climbers FROM climber GROUP BY Country;", "gold_sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "source_tables": ["climber"]}
{"sample_id": 1140, "db_id": "climbing", "question": "List the countries that have more than one mountain.", "rationale": ["Identify the relevant table: The query requires information from the 'mountain' table.", "Determine the required output: We need to list countries, so we will select the 'Country' column.", "Group the results: Since we want to find countries with more than one mountain, we will group the results by 'Country'.", "Count the mountains: We will use the COUNT function to count the number of mountains for each country.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with a count greater than 1."], "pred_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(Mountain_ID) > 1;", "gold_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "source_tables": ["mountain"]}
{"sample_id": 1141, "db_id": "climbing", "question": "Which countries have more than one mountain?", "rationale": ["Identify the relevant table: The query is about mountains, so we will use the 'mountain' table.", "Determine the required information: We need to find countries that have more than one mountain.", "Group the results by country: We will use the GROUP BY clause to group the mountains by their country.", "Count the number of mountains per country: We will use the COUNT function to count the number of mountains for each country.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with a count greater than one."], "pred_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(Mountain_ID) > 1;", "gold_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "source_tables": ["mountain"]}
{"sample_id": 1142, "db_id": "climbing", "question": "List the names of mountains that do not have any climber.", "rationale": ["Identify the table that contains the mountain names, which is the 'mountain' table.", "We need to find mountains that do not have any climbers associated with them.", "This can be achieved by selecting mountains whose IDs are not present in the 'climber' table.", "The SQL query will use a subquery to select all Mountain_IDs from the climber table and filter the mountain names accordingly."], "pred_sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber);", "gold_sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "source_tables": ["mountain", "climber"]}
{"sample_id": 1143, "db_id": "climbing", "question": "What are the names of countains that no climber has climbed?", "rationale": ["Identify the main requirement: We need the names of mountains that have not been climbed by any climber.", "To find mountains with no climbers, we can use a subquery that selects all Mountain_IDs from the climber table.", "We will then select the names from the mountain table where the Mountain_ID is not in the list of IDs returned by the subquery.", "The final SQL query will select the Name from the mountain table where the Mountain_ID is not present in the climber table."], "pred_sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber);", "gold_sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "source_tables": ["mountain", "climber"]}
{"sample_id": 1144, "db_id": "climbing", "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "rationale": ["Identify the relevant table: The query involves mountains, so we will use the 'mountain' table.", "Determine the conditions: We need to find mountains with a height greater than 5600 or less than 5200.", "Select the distinct countries: We want to show the countries that have mountains meeting the height criteria, so we will use DISTINCT to avoid duplicates.", "Construct the SQL query: We will select the 'Country' column from the 'mountain' table where the height conditions are met."], "pred_sql": "SELECT DISTINCT Country FROM mountain WHERE Height > '5600' OR Height < '5200';", "gold_sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "source_tables": ["mountain"]}
{"sample_id": 1145, "db_id": "climbing", "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?", "rationale": ["Identify the requirement to find countries with mountains that are higher than 5600 meters or lower than 5200 meters.", "Use the 'mountain' table to filter mountains based on their height.", "Select distinct countries from the filtered results to avoid duplicates."], "pred_sql": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;", "gold_sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "source_tables": ["mountain"]}
{"sample_id": 1146, "db_id": "climbing", "question": "Show the range that has the most number of mountains.", "rationale": ["Identify the relevant table: The query pertains to the 'mountain' table since we are interested in the range of mountains.", "Determine the required information: We need to find the range that has the most number of mountains.", "Group the data: Use GROUP BY to group the results by the 'Range' column.", "Count the number of mountains in each range: Use COUNT(*) to count the number of mountains for each range.", "Order the results: Use ORDER BY COUNT(*) DESC to sort the ranges by the number of mountains in descending order.", "Limit the results: Use LIMIT 1 to get only the range with the highest count."], "pred_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["mountain"]}
{"sample_id": 1147, "db_id": "climbing", "question": "Which range contains the most mountains?", "rationale": ["Identify the relevant table: The query is about mountains, so we will use the 'mountain' table.", "Determine the required information: We need to find out which range contains the most mountains, which involves counting the number of mountains in each range.", "Use the COUNT function: We will count the number of mountains for each range using COUNT(*) and group the results by the 'Range' column.", "Sort the results: To find the range with the most mountains, we will order the results in descending order based on the count of mountains.", "Limit the results: Since we only want the range with the most mountains, we will limit the results to 1."], "pred_sql": "SELECT Range, COUNT(*) AS MountainCount FROM mountain GROUP BY Range ORDER BY MountainCount DESC LIMIT 1;", "gold_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["mountain"]}
{"sample_id": 1148, "db_id": "climbing", "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.", "rationale": ["Identify the table to query: The 'mountain' table contains the relevant information about mountains.", "Determine the columns needed: We need the 'Name' column to show the names of the mountains.", "Set the conditions for the query: We want mountains with a height greater than 5000 or a prominence greater than 1000.", "Construct the SQL SELECT statement: Use SELECT to get the 'Name' from the 'mountain' table with the specified conditions in the WHERE clause."], "pred_sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000;", "gold_sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "source_tables": ["mountain"]}
{"sample_id": 1149, "db_id": "climbing", "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "rationale": ["Identify the table to query: 'mountain'.", "Determine the columns needed: 'Name' of the mountains.", "Set the conditions for the query: height greater than 5000 or prominence greater than 1000.", "Construct the SQL SELECT statement to retrieve the names of mountains that meet the conditions."], "pred_sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000;", "gold_sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "source_tables": ["mountain"]}
{"sample_id": 1150, "db_id": "body_builder", "question": "How many body builders are there?", "rationale": ["The user wants to know the total number of bodybuilders.", "To get this information, we need to count the entries in the 'body_builder' table.", "We will use the COUNT() function to count all rows in the 'body_builder' table.", "The SQL query will be: SELECT COUNT(*) AS NumberOfBodyBuilders FROM body_builder;"], "pred_sql": "SELECT COUNT(*) AS NumberOfBodyBuilders FROM body_builder;", "gold_sql": "SELECT count(*) FROM body_builder", "source_tables": ["body_builder"]}
{"sample_id": 1151, "db_id": "body_builder", "question": "List the total scores of body builders in ascending order.", "rationale": ["Identify the table that contains the total scores, which is the 'body_builder' table.", "Select the 'Total' column from the 'body_builder' table to get the total scores of bodybuilders.", "Use the ORDER BY clause to sort the results in ascending order."], "pred_sql": "SELECT Total FROM body_builder ORDER BY Total ASC;", "gold_sql": "SELECT Total FROM body_builder ORDER BY Total ASC", "source_tables": ["body_builder"]}
{"sample_id": 1152, "db_id": "body_builder", "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.", "rationale": ["Identify the required columns: Snatch and Clean_Jerk from the body_builder table.", "Determine the sorting requirement: ascending order of the Snatch score.", "Construct the SQL SELECT statement to retrieve the specified columns.", "Add the ORDER BY clause to sort the results by the Snatch score in ascending order."], "pred_sql": "SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch ASC;", "gold_sql": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "source_tables": ["body_builder"]}
{"sample_id": 1153, "db_id": "body_builder", "question": "What is the average snatch score of body builders?", "rationale": ["Identify the required calculation: average of the Snatch scores.", "Determine the appropriate SQL function for average: AVG().", "Specify the column to calculate the average from: Snatch.", "Since Snatch is stored as text, use CAST to convert it to a numeric type (REAL) for accurate calculation.", "Construct the SQL query to select the average Snatch from the body_builder table."], "pred_sql": "SELECT AVG(CAST(Snatch AS REAL)) AS Average_Snatch FROM body_builder;", "gold_sql": "SELECT avg(Snatch) FROM body_builder", "source_tables": ["body_builder"]}
{"sample_id": 1154, "db_id": "body_builder", "question": "What are the clean and jerk score of the body builder with the highest total score?", "rationale": ["Identify the relevant table: The 'body_builder' table contains the scores for the clean and jerk event and the total score.", "Determine the highest total score: Use a subquery to find the maximum value in the 'Total' column of the 'body_builder' table.", "Select the clean and jerk score: Use the result from the subquery to filter the 'body_builder' table and select the 'Clean_Jerk' score corresponding to the highest total score."], "pred_sql": "SELECT Clean_Jerk FROM body_builder WHERE Total = (SELECT MAX(Total) FROM body_builder);", "gold_sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1", "source_tables": ["body_builder"]}
{"sample_id": 1155, "db_id": "body_builder", "question": "What are the birthdays of people in ascending order of height?", "rationale": ["Identify the relevant table: The 'people' table contains the 'Birth_Date' and 'Height' columns.", "Select the 'Birth_Date' column to retrieve the birthdays.", "Order the results by the 'Height' column in ascending order to meet the requirement of sorting by height."], "pred_sql": "SELECT Birth_Date FROM people ORDER BY Height ASC;", "gold_sql": "SELECT Birth_Date FROM People ORDER BY Height ASC", "source_tables": ["people"]}
{"sample_id": 1156, "db_id": "body_builder", "question": "What are the names of body builders?", "rationale": ["Identify the tables involved: 'people' and 'body_builder'.", "Determine the relevant columns: we need the 'Name' from the 'people' table.", "Establish the relationship between the tables using the foreign key: 'body_builder.People_ID' links to 'people.People_ID'.", "Construct the SQL query to select the 'Name' from the 'people' table, joining it with the 'body_builder' table to ensure we only get names of bodybuilders."], "pred_sql": "SELECT p.Name FROM people p JOIN body_builder bb ON p.People_ID = bb.People_ID;", "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["body_builder", "people"]}
{"sample_id": 1157, "db_id": "body_builder", "question": "What are the names of body builders whose total score is higher than 300?", "rationale": ["Identify the tables involved: 'body_builder' for the total score and 'people' for the names.", "Determine the relationship between the tables: 'body_builder' has a foreign key 'People_ID' that links to 'people'.", "Select the 'Name' column from the 'people' table.", "Filter the results based on the condition that 'Total' in 'body_builder' is greater than 300."], "pred_sql": "SELECT p.Name FROM body_builder bb JOIN people p ON bb.People_ID = p.People_ID WHERE bb.Total > '300';", "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300", "source_tables": ["body_builder", "people"]}
{"sample_id": 1158, "db_id": "body_builder", "question": "What is the name of the body builder with the greatest body weight?", "rationale": ["Identify the relevant tables: 'people' for names and 'body_builder' for weights.", "We need to find the bodybuilder with the greatest body weight, which is stored in the 'Weight' column of the 'people' table.", "Join the 'people' table with the 'body_builder' table on the 'People_ID' column to access both names and weights.", "Order the results by the 'Weight' column in descending order to get the heaviest bodybuilder at the top.", "Limit the results to 1 to get only the name of the bodybuilder with the greatest weight."], "pred_sql": "SELECT p.Name FROM people p JOIN body_builder bb ON p.People_ID = bb.People_ID ORDER BY p.Weight DESC LIMIT 1;", "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "source_tables": ["body_builder", "people"]}
{"sample_id": 1159, "db_id": "body_builder", "question": "What are the birth date and birth place of the body builder with the highest total points?", "rationale": ["Identify the information needed: birth date and birth place of the bodybuilder with the highest total points.", "Determine the relevant tables: 'people' for personal information and 'body_builder' for competition results.", "Join the 'people' table with the 'body_builder' table on the common column 'People_ID'.", "Use a subquery to find the maximum total points from the 'body_builder' table.", "Filter the results to get the birth date and birth place of the bodybuilder who has this maximum total."], "pred_sql": "SELECT p.Birth_Date, p.Birth_Place \nFROM people p \nJOIN body_builder bb ON p.People_ID = bb.People_ID \nWHERE bb.Total = (SELECT MAX(Total) FROM body_builder);", "gold_sql": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1", "source_tables": ["body_builder", "people"]}
{"sample_id": 1160, "db_id": "body_builder", "question": "What are the heights of body builders with total score smaller than 315?", "rationale": ["Identify the relevant tables: 'body_builder' for total scores and 'people' for heights.", "Determine the condition: we need bodybuilders with a total score smaller than 315.", "Join the 'body_builder' table with the 'people' table on the 'People_ID' column to access both total scores and heights.", "Select the 'Height' column from the 'people' table where the 'Total' from the 'body_builder' table is less than 315."], "pred_sql": "SELECT p.Height FROM people p JOIN body_builder bb ON p.People_ID = bb.People_ID WHERE bb.Total < '315';", "gold_sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315", "source_tables": ["body_builder", "people"]}
{"sample_id": 1161, "db_id": "body_builder", "question": "What is the average total score of body builders with height bigger than 200?", "rationale": ["Identify the tables involved: 'body_builder' and 'people'.", "Determine the columns needed: 'Total' from 'body_builder' and 'Height' from 'people'.", "Calculate the average of the 'Total' scores, which requires using the AVG() function.", "Filter the results to include only those bodybuilders whose height is greater than 200 cm.", "Join the 'body_builder' table with the 'people' table on the 'People_ID' to access the height information."], "pred_sql": "SELECT AVG(Total) AS Average_Total FROM body_builder JOIN people ON body_builder.People_ID = people.People_ID WHERE Height > 200;", "gold_sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200", "source_tables": ["body_builder", "people"]}
{"sample_id": 1162, "db_id": "body_builder", "question": "What are the names of body builders in descending order of total scores?", "rationale": ["Identify the tables involved: 'body_builder' for bodybuilder data and 'people' for personal information.", "We need to retrieve the names of bodybuilders, which are stored in the 'people' table under the 'Name' column.", "To get the names of bodybuilders, we need to join the 'body_builder' table with the 'people' table on the 'People_ID' column, which is the foreign key in 'body_builder'.", "We need to order the results by the 'Total' column in the 'body_builder' table in descending order to meet the requirement of sorting by total scores.", "Construct the SQL query to select the names from the joined tables and apply the ordering."], "pred_sql": "SELECT p.Name FROM body_builder bb JOIN people p ON bb.People_ID = p.People_ID ORDER BY bb.Total DESC;", "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC", "source_tables": ["body_builder", "people"]}
{"sample_id": 1163, "db_id": "body_builder", "question": "List each birth place along with the number of people from there.", "rationale": ["Identify the relevant table: The 'people' table contains the 'Birth_Place' column and is where we can count the number of people from each place.", "Use the COUNT() function: This function will allow us to count the number of entries (people) for each unique birth place.", "Group the results: To get the count for each birth place, we need to group the results by the 'Birth_Place' column using GROUP BY.", "Select the required columns: We need to select 'Birth_Place' and the count of people, which we can alias as 'Number_of_People'."], "pred_sql": "SELECT Birth_Place, COUNT(*) AS Number_of_People FROM people GROUP BY Birth_Place;", "gold_sql": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place", "source_tables": ["people"]}
{"sample_id": 1164, "db_id": "body_builder", "question": "What is the most common birth place of people?", "rationale": ["Identify the relevant table: The query is about people's birth places, so we will use the 'people' table.", "Count occurrences: We need to count how many people have the same birth place, which requires the COUNT() function.", "Group by birth place: To count the occurrences for each birth place, we will use the GROUP BY clause on the 'Birth_Place' column.", "Order by count: To find the most common birth place, we will order the results by the count in descending order using ORDER BY Count DESC.", "Limit the results: Since we only want the most common birth place, we will limit the results to 1 using LIMIT 1."], "pred_sql": "SELECT Birth_Place, COUNT(*) as Count FROM people GROUP BY Birth_Place ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}
{"sample_id": 1165, "db_id": "body_builder", "question": "What are the birth places that are shared by at least two people?", "rationale": ["Identify the relevant table: The query requires information about people's birth places, so we will use the 'people' table.", "Select the column: We need to select the 'Birth_Place' column from the 'people' table.", "Group the results: To find shared birth places, we will group the results by 'Birth_Place'.", "Count the occurrences: We need to count how many people share the same birth place, which can be done using the COUNT function.", "Filter the results: We only want those birth places that are shared by at least two people, so we will use the HAVING clause to filter groups with a count of 2 or more."], "pred_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(People_ID) >= 2;", "gold_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2", "source_tables": ["people"]}
{"sample_id": 1166, "db_id": "body_builder", "question": "List the height and weight of people in descending order of height.", "rationale": ["Identify the table to query: The 'people' table contains the height and weight information.", "Select the required columns: We need to select 'Height' and 'Weight'.", "Specify the order: The results should be ordered by 'Height' in descending order.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT Height, Weight FROM people ORDER BY Height DESC;", "gold_sql": "SELECT Height ,  Weight FROM people ORDER BY Height DESC", "source_tables": ["people"]}
{"sample_id": 1167, "db_id": "body_builder", "question": "Show all information about each body builder.", "rationale": ["The user wants to see all information about each body builder.", "To retrieve all information from a table, we use the SELECT statement with an asterisk (*) to indicate all columns.", "The table containing the body builder information is named 'body_builder'.", "Thus, the SQL query will be 'SELECT * FROM body_builder;'"], "pred_sql": "SELECT * FROM body_builder;", "gold_sql": "SELECT * FROM body_builder", "source_tables": ["body_builder"]}
{"sample_id": 1168, "db_id": "body_builder", "question": "List the names and origins of people who are not body builders.", "rationale": ["Identify the relevant tables: 'people' for names and origins, and 'body_builder' to identify bodybuilders.", "We need to select the 'Name' and 'Birth_Place' columns from the 'people' table.", "To find people who are not bodybuilders, we will use a subquery to get the 'People_ID' of those who are bodybuilders from the 'body_builder' table.", "The main query will filter out those 'People_ID' from the 'people' table using the NOT IN clause."], "pred_sql": "SELECT Name, Birth_Place FROM people WHERE People_ID NOT IN (SELECT People_ID FROM body_builder);", "gold_sql": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id", "source_tables": ["body_builder", "people"]}
{"sample_id": 1169, "db_id": "body_builder", "question": "How many distinct birth places are there?", "rationale": ["Identify the table that contains the birth place information, which is the 'people' table.", "To find the number of distinct birth places, we need to use the COUNT function along with DISTINCT.", "The SQL query will select the count of distinct values from the 'Birth_Place' column in the 'people' table."], "pred_sql": "SELECT COUNT(DISTINCT Birth_Place) AS Distinct_Birth_Places FROM people;", "gold_sql": "SELECT count(DISTINCT Birth_Place) FROM people", "source_tables": ["people"]}
{"sample_id": 1170, "db_id": "body_builder", "question": "How many persons are not body builders?", "rationale": ["Identify the total number of persons in the 'people' table.", "Identify the persons who are body builders by selecting their 'People_ID' from the 'body_builder' table.", "Use a subquery to find 'People_ID' in the 'body_builder' table and filter them out from the 'people' table.", "Count the remaining persons who are not body builders."], "pred_sql": "SELECT COUNT(*) AS Non_Body_Builders FROM people WHERE People_ID NOT IN (SELECT People_ID FROM body_builder);", "gold_sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)", "source_tables": ["body_builder", "people"]}
{"sample_id": 1171, "db_id": "body_builder", "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "rationale": ["Identify the relevant tables: 'body_builder' for snatch scores and 'people' for height.", "Determine the columns needed: 'Snatch' from 'body_builder' and 'Height' from 'people'.", "Establish the relationship between the tables using the foreign key 'People_ID'.", "Formulate the WHERE clause to filter bodybuilders with a snatch score greater than 140 or a height greater than 200.", "Combine all parts to create the final SQL SELECT statement."], "pred_sql": "SELECT bb.Snatch, p.Height \nFROM body_builder bb \nJOIN people p ON bb.People_ID = p.People_ID \nWHERE bb.Snatch > 140 OR p.Height > 200;", "gold_sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;", "source_tables": ["body_builder", "people"]}
{"sample_id": 1172, "db_id": "body_builder", "question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?", "rationale": ["Identify the tables involved: 'body_builder' for total scores and 'people' for birth dates.", "Determine the relationship between the tables: 'body_builder' is linked to 'people' via 'People_ID'.", "Formulate the selection criteria: we need to filter based on the birth date containing 'January'.", "Use a JOIN clause to combine data from both tables based on the foreign key relationship.", "Select the 'Total' column from the 'body_builder' table where the birth date in the 'people' table matches the criteria."], "pred_sql": "SELECT bb.Total FROM body_builder bb JOIN people p ON bb.People_ID = p.People_ID WHERE p.Birth_Date LIKE '%January%';", "gold_sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE '%January%';", "source_tables": ["body_builder", "people"]}
{"sample_id": 1173, "db_id": "body_builder", "question": "What is the minimum snatch score?", "rationale": ["Identify the relevant table: The 'body_builder' table contains the 'Snatch' column which holds the scores.", "Determine the required operation: We need to find the minimum score, which corresponds to the SQL function MIN().", "Construct the SQL query: Use SELECT to retrieve the minimum value from the 'Snatch' column in the 'body_builder' table."], "pred_sql": "SELECT MIN(Snatch) AS Minimum_Snatch_Score FROM body_builder;", "gold_sql": "SELECT min(snatch) FROM body_builder", "source_tables": ["body_builder"]}
{"sample_id": 1174, "db_id": "election_representative", "question": "How many elections are there?", "rationale": ["Identify the requirement: The user wants to know the total number of elections.", "To find the total number of elections, we need to count the rows in the 'election' table.", "Use the COUNT() function to count all entries in the 'election' table.", "The SQL query will be: SELECT COUNT(*) AS Total_Elections FROM election;"], "pred_sql": "SELECT COUNT(*) AS Total_Elections FROM election;", "gold_sql": "SELECT count(*) FROM election", "source_tables": ["election"]}
{"sample_id": 1175, "db_id": "election_representative", "question": "List the votes of elections in descending order.", "rationale": ["Identify the table that contains the votes information, which is the 'election' table.", "Determine the specific column that holds the votes data, which is 'Votes'.", "Specify that we want to retrieve the 'Votes' column from the 'election' table.", "To list the votes in descending order, use the ORDER BY clause with 'Votes' and specify DESC for descending order."], "pred_sql": "SELECT Votes FROM election ORDER BY Votes DESC;", "gold_sql": "SELECT Votes FROM election ORDER BY Votes DESC", "source_tables": ["election"]}
{"sample_id": 1176, "db_id": "election_representative", "question": "List the dates and vote percents of elections.", "rationale": ["Identify the required columns: 'Date' and 'Vote_Percent'.", "Determine the table to query: 'election'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'election' table."], "pred_sql": "SELECT Date, Vote_Percent FROM election;", "gold_sql": "SELECT Date ,  Vote_Percent FROM election", "source_tables": ["election"]}
{"sample_id": 1177, "db_id": "election_representative", "question": "What are the minimum and maximum vote percents of elections?", "rationale": ["Identify the columns needed: We need the 'Vote_Percent' column from the 'election' table to find the minimum and maximum values.", "Use aggregate functions: To find the minimum and maximum values, we will use the MIN() and MAX() functions respectively.", "Construct the SQL query: We will select the minimum and maximum vote percentages from the 'election' table."], "pred_sql": "SELECT MIN(Vote_Percent) AS Min_Vote_Percent, MAX(Vote_Percent) AS Max_Vote_Percent FROM election;", "gold_sql": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election", "source_tables": ["election"]}
{"sample_id": 1178, "db_id": "election_representative", "question": "What are the names and parties of representatives?", "rationale": ["Identify the required information: names and parties of representatives.", "Determine the table that contains this information: the 'representative' table.", "Construct the SQL SELECT statement to retrieve the 'Name' and 'Party' columns from the 'representative' table."], "pred_sql": "SELECT Name, Party FROM representative;", "gold_sql": "SELECT Name ,  Party FROM representative", "source_tables": ["representative"]}
{"sample_id": 1179, "db_id": "election_representative", "question": "What are the names of representatives whose party is not \"Republican\"?", "rationale": ["Identify the table that contains the information about representatives, which is the 'representative' table.", "Determine the column that contains the names of the representatives, which is 'Name'.", "Identify the column that contains the party affiliation of the representatives, which is 'Party'.", "Formulate a condition to filter out representatives whose party is not 'Republican', using the '!=' operator.", "Combine these elements to create the SQL SELECT statement that retrieves the names of representatives based on the specified condition."], "pred_sql": "SELECT Name FROM representative WHERE Party != 'Republican';", "gold_sql": "SELECT Name FROM Representative WHERE Party != 'Republican'", "source_tables": ["representative"]}
{"sample_id": 1180, "db_id": "election_representative", "question": "What are the life spans of representatives from New York state or Indiana state?", "rationale": ["Identify the relevant table: The 'representative' table contains the lifespan and state information.", "Determine the condition: We need representatives from New York state or Indiana state.", "Use the SQL SELECT statement to retrieve the 'Lifespan' column from the 'representative' table.", "Apply the WHERE clause to filter representatives based on the specified states using the IN operator."], "pred_sql": "SELECT Lifespan FROM representative WHERE State IN ('New York', 'Indiana');", "gold_sql": "SELECT Lifespan FROM representative WHERE State  =  'New York' OR State  =  'Indiana'", "source_tables": ["representative"]}
{"sample_id": 1181, "db_id": "election_representative", "question": "What are the names of representatives and the dates of elections they participated in.", "rationale": ["Identify the tables involved: 'representative' and 'election'.", "Determine the columns needed: 'Name' from 'representative' and 'Date' from 'election'.", "Establish the relationship between the tables using the foreign key: 'election.Representative_ID' links to 'representative.Representative_ID'.", "Construct the SQL query using a JOIN to combine the two tables based on the foreign key relationship.", "Select the required columns from the joined tables."], "pred_sql": "SELECT representative.Name, election.Date FROM representative JOIN election ON representative.Representative_ID = election.Representative_ID;", "gold_sql": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID", "source_tables": ["representative", "election"]}
{"sample_id": 1182, "db_id": "election_representative", "question": "What are the names of representatives with more than 10000 votes in election?", "rationale": ["Identify the tables involved: 'representative' and 'election'.", "Determine the columns needed: we need the 'Name' from the 'representative' table and the 'Votes' from the 'election' table.", "Establish the relationship between the tables: 'election.Representative_ID' is a foreign key that references 'representative.Representative_ID'.", "Formulate the SQL query to select the 'Name' from the 'representative' table where the corresponding 'Votes' in the 'election' table are greater than 10000."], "pred_sql": "SELECT r.Name FROM representative r JOIN election e ON r.Representative_ID = e.Representative_ID WHERE e.Votes > '10000';", "gold_sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000", "source_tables": ["representative", "election"]}
{"sample_id": 1183, "db_id": "election_representative", "question": "What are the names of representatives in descending order of votes?", "rationale": ["Identify the tables involved: 'representative' for names and 'election' for votes.", "We need to join the 'representative' table with the 'election' table on the 'Representative_ID' column to link representatives with their respective votes.", "Select the 'Name' column from the 'representative' table.", "Order the results by the 'Votes' column from the 'election' table in descending order to get representatives with the highest votes first."], "pred_sql": "SELECT r.Name FROM representative r JOIN election e ON r.Representative_ID = e.Representative_ID ORDER BY e.Votes DESC;", "gold_sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC", "source_tables": ["representative", "election"]}
{"sample_id": 1184, "db_id": "election_representative", "question": "What is the party of the representative that has the smallest number of votes.", "rationale": ["Identify the relevant tables: 'election' for votes and 'representative' for party information.", "We need to find the representative associated with the smallest number of votes, so we will sort the 'Votes' column in ascending order.", "To get the party of the representative, we need to join the 'election' table with the 'representative' table on 'Representative_ID'.", "After joining, we will select the 'Party' column from the 'representative' table.", "To ensure we only get the representative with the smallest number of votes, we will use 'ORDER BY e.Votes ASC' and limit the result to 1."], "pred_sql": "SELECT r.Party FROM election e JOIN representative r ON e.Representative_ID = r.Representative_ID ORDER BY e.Votes ASC LIMIT 1;", "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes ASC LIMIT 1", "source_tables": ["representative", "election"]}
{"sample_id": 1185, "db_id": "election_representative", "question": "What are the lifespans of representatives in descending order of vote percent?", "rationale": ["Identify the columns needed: Lifespan from the representative table and Vote_Percent from the election table.", "Determine the relationship between the tables: The election table has a foreign key that references the representative table via Representative_ID.", "Use a JOIN clause to combine the representative and election tables based on the Representative_ID.", "Select the Lifespan column from the representative table.", "Order the results by Vote_Percent in descending order to get the representatives with the highest vote percentages first."], "pred_sql": "SELECT r.Lifespan FROM representative r JOIN election e ON r.Representative_ID = e.Representative_ID ORDER BY e.Vote_Percent DESC;", "gold_sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC", "source_tables": ["representative", "election"]}
{"sample_id": 1186, "db_id": "election_representative", "question": "What is the average number of votes of representatives from party \"Republican\"?", "rationale": ["Identify the relevant tables: 'election' and 'representative'.", "Determine the columns needed: 'Votes' from 'election' and 'Party' from 'representative'.", "Join the 'election' table with the 'representative' table on 'Representative_ID'.", "Filter the results to include only those representatives who belong to the 'Republican' party.", "Calculate the average of the 'Votes' column for the filtered results."], "pred_sql": "SELECT AVG(CAST(e.Votes AS INTEGER)) AS Average_Votes\nFROM election e\nJOIN representative r ON e.Representative_ID = r.Representative_ID\nWHERE r.Party = 'Republican';", "gold_sql": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  'Republican'", "source_tables": ["representative", "election"]}
{"sample_id": 1187, "db_id": "election_representative", "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.", "rationale": ["Identify the relevant table: The 'representative' table contains information about representatives and their party affiliations.", "Determine the required fields: We need the 'Party' name and the count of representatives in each party.", "Use the COUNT() function to count the number of representatives for each party.", "Group the results by 'Party' to get the count for each distinct party.", "Construct the SQL query using SELECT, COUNT(), and GROUP BY clauses."], "pred_sql": "SELECT Party, COUNT(*) AS Number_of_Representatives FROM representative GROUP BY Party;", "gold_sql": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party", "source_tables": ["representative"]}
{"sample_id": 1188, "db_id": "election_representative", "question": "What is the party that has the largest number of representatives?", "rationale": ["Identify the table that contains information about representatives, which is the 'representative' table.", "We need to find the party with the largest number of representatives, so we will group the results by the 'Party' column.", "To count the number of representatives in each party, we will use the COUNT function on 'Representative_ID'.", "We will order the results in descending order based on the count of representatives to get the party with the most representatives at the top.", "Finally, we will limit the results to 1 to get only the party with the largest number of representatives."], "pred_sql": "SELECT Party FROM representative GROUP BY Party ORDER BY COUNT(Representative_ID) DESC LIMIT 1;", "gold_sql": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["representative"]}
{"sample_id": 1189, "db_id": "election_representative", "question": "What parties have at least three representatives?", "rationale": ["Identify the table that contains the information about representatives, which is the 'representative' table.", "We need to find out the parties that have at least three representatives.", "To do this, we will use the COUNT function to count the number of representatives for each party.", "We will group the results by the 'Party' column to aggregate the counts for each party.", "Finally, we will use the HAVING clause to filter the groups to only include those with a count of three or more representatives."], "pred_sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(Representative_ID) >= 3;", "gold_sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3", "source_tables": ["representative"]}
{"sample_id": 1190, "db_id": "election_representative", "question": "What states have at least two representatives?", "rationale": ["Identify the table that contains the information about representatives, which is the 'representative' table.", "We need to find states that have at least two representatives, so we will group the results by the 'State' column.", "To count the number of representatives in each state, we will use the COUNT() function on 'Representative_ID'.", "We will use the HAVING clause to filter the groups to only include those with a count of 2 or more representatives."], "pred_sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(Representative_ID) >= 2;", "gold_sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2", "source_tables": ["representative"]}
{"sample_id": 1191, "db_id": "election_representative", "question": "List the names of representatives that have not participated in elections listed here.", "rationale": ["Identify the table that contains the names of representatives, which is the 'representative' table.", "We need to find representatives who have not participated in any elections, so we will look for those whose 'Representative_ID' is not present in the 'election' table.", "To achieve this, we will use a subquery that selects all 'Representative_ID's from the 'election' table.", "The main query will select the 'Name' from the 'representative' table where the 'Representative_ID' is not in the list obtained from the subquery."], "pred_sql": "SELECT r.Name FROM representative r WHERE r.Representative_ID NOT IN (SELECT e.Representative_ID FROM election e)", "gold_sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)", "source_tables": ["representative", "election"]}
{"sample_id": 1192, "db_id": "election_representative", "question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.", "rationale": ["Identify the requirement to find parties with representatives in both New York and Pennsylvania.", "Use the 'representative' table to find representatives based on their state.", "Join the 'representative' table with itself to find common parties between the two states.", "Filter the results to include only those representatives from New York and Pennsylvania.", "Select distinct parties to avoid duplicates in the final result."], "pred_sql": "SELECT DISTINCT r1.Party \nFROM representative r1 \nJOIN representative r2 ON r1.Party = r2.Party \nWHERE r1.State = 'New York' AND r2.State = 'Pennsylvania';", "gold_sql": "SELECT Party FROM representative WHERE State  =  'New York' INTERSECT SELECT Party FROM representative WHERE State  =  'Pennsylvania'", "source_tables": ["representative"]}
{"sample_id": 1193, "db_id": "election_representative", "question": "How many distinct parties are there for representatives?", "rationale": ["Identify the table that contains the party information, which is the 'representative' table.", "To find the number of distinct parties, we need to use the COUNT function along with DISTINCT.", "The SQL query will select the count of distinct values in the 'Party' column from the 'representative' table."], "pred_sql": "SELECT COUNT(DISTINCT Party) AS Distinct_Party_Count FROM representative;", "gold_sql": "SELECT count(DISTINCT Party) FROM representative", "source_tables": ["representative"]}
{"sample_id": 1194, "db_id": "apartment_rentals", "question": "How many apartment bookings are there in total?", "rationale": ["Identify the table that contains booking information, which is the Apartment_Bookings table.", "To find the total number of bookings, we need to count the entries in the Apartment_Bookings table.", "Use the COUNT() function to count all rows in the Apartment_Bookings table.", "Select the count with an alias 'total_bookings' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_bookings FROM Apartment_Bookings;", "gold_sql": "SELECT count(*) FROM Apartment_Bookings", "source_tables": ["apartment_bookings"]}
{"sample_id": 1195, "db_id": "apartment_rentals", "question": "Count the total number of apartment bookings.", "rationale": ["Identify the table that contains booking information, which is the 'Apartment_Bookings' table.", "To count the total number of bookings, we will use the COUNT() function in SQL.", "The query will select the count of all records in the 'Apartment_Bookings' table, which represents the total number of bookings."], "pred_sql": "SELECT COUNT(*) AS total_bookings FROM Apartment_Bookings;", "gold_sql": "SELECT count(*) FROM Apartment_Bookings", "source_tables": ["apartment_bookings"]}
{"sample_id": 1196, "db_id": "apartment_rentals", "question": "Show the start dates and end dates of all the apartment bookings.", "rationale": ["Identify the relevant table for apartment bookings, which is 'Apartment_Bookings'.", "Determine the specific columns needed for the query, which are 'booking_start_date' and 'booking_end_date'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Apartment_Bookings' table."], "pred_sql": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings;", "gold_sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "source_tables": ["apartment_bookings"]}
{"sample_id": 1197, "db_id": "apartment_rentals", "question": "What are the start date and end date of each apartment booking?", "rationale": ["Identify the relevant table for apartment bookings, which is 'Apartment_Bookings'.", "Determine the columns needed for the query, which are 'booking_start_date' and 'booking_end_date'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Apartment_Bookings' table."], "pred_sql": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings;", "gold_sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "source_tables": ["apartment_bookings"]}
{"sample_id": 1198, "db_id": "apartment_rentals", "question": "Show all distinct building descriptions.", "rationale": ["Identify the table that contains the building descriptions, which is 'Apartment_Buildings'.", "Determine the column that holds the descriptions, which is 'building_description'.", "Since the request is to show all distinct descriptions, use the DISTINCT keyword to ensure that duplicate descriptions are not included in the results.", "Construct the SQL query to select distinct building descriptions from the Apartment_Buildings table."], "pred_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings;", "gold_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "source_tables": ["apartment_buildings"]}
{"sample_id": 1199, "db_id": "apartment_rentals", "question": "Give me a list of all the distinct building descriptions.", "rationale": ["Identify the table that contains the building descriptions, which is 'Apartment_Buildings'.", "Determine the specific column that holds the descriptions, which is 'building_description'.", "Since the user requested a list of distinct descriptions, use the DISTINCT keyword to ensure that duplicate descriptions are not included in the results.", "Construct the SQL query to select the distinct building descriptions from the 'Apartment_Buildings' table."], "pred_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings;", "gold_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "source_tables": ["apartment_buildings"]}
{"sample_id": 1200, "db_id": "apartment_rentals", "question": "Show the short names of the buildings managed by \"Emma\".", "rationale": ["Identify the table that contains building information, which is 'Apartment_Buildings'.", "Determine the relevant column for the building manager's name, which is 'building_manager'.", "Specify the condition to filter the results to only include buildings managed by 'Emma'.", "Construct the SQL query to select the 'building_short_name' from the 'Apartment_Buildings' table where the 'building_manager' is 'Emma'."], "pred_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma';", "gold_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  'Emma'", "source_tables": ["apartment_buildings"]}
{"sample_id": 1201, "db_id": "apartment_rentals", "question": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.", "rationale": ["Identify the relevant table: Apartment_Buildings contains information about buildings and their managers.", "Determine the specific column needed: building_short_name is required to get the short names of the buildings.", "Filter the results based on the manager's name: We need to find buildings managed by 'Emma'.", "Construct the SQL query using SELECT to retrieve building_short_name from Apartment_Buildings where building_manager is 'Emma'."], "pred_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma';", "gold_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  'Emma'", "source_tables": ["apartment_buildings"]}
{"sample_id": 1202, "db_id": "apartment_rentals", "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".", "rationale": ["Identify the table that contains the required information: Apartment_Buildings.", "Determine the columns needed: building_address and building_phone.", "Specify the condition to filter the results: buildings managed by 'Brenden'.", "Construct the SQL SELECT statement to retrieve the specified columns from the Apartment_Buildings table with the appropriate WHERE clause."], "pred_sql": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = 'Brenden';", "gold_sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  'Brenden'", "source_tables": ["apartment_buildings"]}
{"sample_id": 1203, "db_id": "apartment_rentals", "question": "What are the address and phone number of the buildings managed by \"Brenden\"?", "rationale": ["Identify the relevant table: Apartment_Buildings contains the information about buildings and their managers.", "Determine the columns needed: building_address and building_phone are required as per the query.", "Specify the condition: We need to filter the results where the building_manager is 'Brenden'.", "Construct the SQL SELECT statement to retrieve the specified columns from the Apartment_Buildings table with the appropriate WHERE clause."], "pred_sql": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = 'Brenden';", "gold_sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  'Brenden'", "source_tables": ["apartment_buildings"]}
{"sample_id": 1204, "db_id": "apartment_rentals", "question": "What are the building full names that contain the word \"court\"?", "rationale": ["Identify the table that contains the building names, which is 'Apartment_Buildings'.", "Determine the column that holds the full names of the buildings, which is 'building_full_name'.", "The query needs to filter the results to only include building names that contain the word 'court'.", "Use the SQL 'LIKE' operator with wildcards '%' to search for 'court' within the 'building_full_name' column."], "pred_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%';", "gold_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%'", "source_tables": ["apartment_buildings"]}
{"sample_id": 1205, "db_id": "apartment_rentals", "question": "Find all the building full names containing the word \"court\".", "rationale": ["Identify the table that contains the building names, which is 'Apartment_Buildings'.", "Determine the column that holds the full names of the buildings, which is 'building_full_name'.", "Formulate a query to select 'building_full_name' from 'Apartment_Buildings'.", "Add a condition to filter the results where 'building_full_name' contains the word 'court'.", "Use the SQL LIKE operator with wildcards '%' to match any characters before and after 'court'."], "pred_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%';", "gold_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%'", "source_tables": ["apartment_buildings"]}
{"sample_id": 1206, "db_id": "apartment_rentals", "question": "What is the minimum and maximum number of bathrooms of all the apartments?", "rationale": ["Identify the relevant table: The Apartments table contains the bathroom_count column.", "Determine the required calculations: We need to find the minimum and maximum values of the bathroom_count.", "Construct the SQL query: Use the MIN() and MAX() functions to get the desired values from the bathroom_count column."], "pred_sql": "SELECT MIN(bathroom_count) AS min_bathrooms, MAX(bathroom_count) AS max_bathrooms FROM Apartments;", "gold_sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "source_tables": ["apartments"]}
{"sample_id": 1207, "db_id": "apartment_rentals", "question": "Give me the minimum and maximum bathroom count among all the apartments.", "rationale": ["Identify the relevant table: The Apartments table contains the bathroom_count column.", "Determine the required calculations: We need to find the minimum and maximum values of the bathroom_count.", "Construct the SQL query: Use the MIN() and MAX() functions to get the desired values from the bathroom_count column in the Apartments table."], "pred_sql": "SELECT MIN(bathroom_count) AS min_bathroom_count, MAX(bathroom_count) AS max_bathroom_count FROM Apartments;", "gold_sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "source_tables": ["apartments"]}
{"sample_id": 1208, "db_id": "apartment_rentals", "question": "What is the average number of bedrooms of all apartments?", "rationale": ["Identify the relevant table: The Apartments table contains the bedroom_count column.", "Determine the required calculation: We need to calculate the average number of bedrooms.", "Construct the SQL query: Use the AVG() function to compute the average of the bedroom_count column from the Apartments table."], "pred_sql": "SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments;", "gold_sql": "SELECT avg(bedroom_count) FROM Apartments", "source_tables": ["apartments"]}
{"sample_id": 1209, "db_id": "apartment_rentals", "question": "Find the average number of bedrooms of all the apartments.", "rationale": ["Identify the table that contains the relevant data: the 'Apartments' table has the 'bedroom_count' column.", "To find the average number of bedrooms, we will use the AVG() function, which calculates the average of a numeric column.", "Construct the SQL query to select the average of the 'bedroom_count' from the 'Apartments' table."], "pred_sql": "SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments;", "gold_sql": "SELECT avg(bedroom_count) FROM Apartments", "source_tables": ["apartments"]}
{"sample_id": 1210, "db_id": "apartment_rentals", "question": "Return the apartment number and the number of rooms for each apartment.", "rationale": ["Identify the required columns: apartment number (apt_number) and number of rooms (room_count).", "Determine the table that contains these columns, which is the Apartments table.", "Construct the SQL SELECT statement to retrieve the specified columns from the Apartments table."], "pred_sql": "SELECT apt_number, room_count FROM Apartments;", "gold_sql": "SELECT apt_number ,  room_count FROM Apartments", "source_tables": ["apartments"]}
{"sample_id": 1211, "db_id": "apartment_rentals", "question": "What are the apartment number and the room count of each apartment?", "rationale": ["Identify the required information: apartment number and room count.", "Locate the relevant table: Apartments.", "Select the columns apt_number and room_count from the Apartments table."], "pred_sql": "SELECT apt_number, room_count FROM Apartments;", "gold_sql": "SELECT apt_number ,  room_count FROM Apartments", "source_tables": ["apartments"]}
{"sample_id": 1212, "db_id": "apartment_rentals", "question": "What is the average number of rooms of apartments with type code \"Studio\"?", "rationale": ["Identify the relevant table: The Apartments table contains the information about the apartments, including their type and the number of rooms.", "Determine the required calculation: We need to calculate the average number of rooms, which can be done using the AVG() function in SQL.", "Filter the apartments: We need to focus on apartments with the type code 'Studio', so we will add a WHERE clause to filter the results accordingly.", "Construct the SQL query: Combine the SELECT statement with the AVG() function, the column to average (room_count), and the WHERE clause to filter by apt_type_code."], "pred_sql": "SELECT AVG(room_count) AS average_rooms FROM Apartments WHERE apt_type_code = 'Studio';", "gold_sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  'Studio'", "source_tables": ["apartments"]}
{"sample_id": 1213, "db_id": "apartment_rentals", "question": "Find the average room count of the apartments that have the \"Studio\" type code.", "rationale": ["Identify the table that contains the relevant data: Apartments.", "Determine the column that holds the room count: room_count.", "Identify the condition for filtering the apartments: apt_type_code = 'Studio'.", "Use the AVG() function to calculate the average of the room_count for the filtered apartments.", "Construct the SQL query to select the average room count from the Apartments table with the specified condition."], "pred_sql": "SELECT AVG(room_count) AS average_room_count FROM Apartments WHERE apt_type_code = 'Studio';", "gold_sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  'Studio'", "source_tables": ["apartments"]}
{"sample_id": 1214, "db_id": "apartment_rentals", "question": "Return the apartment numbers of the apartments with type code \"Flat\".", "rationale": ["Identify the relevant table: The Apartments table contains the apartment numbers and type codes.", "Determine the specific column needed: We need the 'apt_number' column for the apartment numbers.", "Specify the condition: We are looking for apartments with the type code 'Flat'.", "Construct the SQL query: Use a SELECT statement to retrieve 'apt_number' from the Apartments table where 'apt_type_code' equals 'Flat'."], "pred_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat';", "gold_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  'Flat'", "source_tables": ["apartments"]}
{"sample_id": 1215, "db_id": "apartment_rentals", "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.", "rationale": ["Identify the relevant table: Apartments, as it contains the apartment details including type code and apartment number.", "Determine the specific column needed: apt_number, which represents the apartment numbers.", "Apply the condition to filter the results: apt_type_code = 'Flat', to get only those apartments that are of type 'Flat'.", "Construct the SQL SELECT statement to retrieve the apt_number from the Apartments table where the apt_type_code matches 'Flat'."], "pred_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat';", "gold_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  'Flat'", "source_tables": ["apartments"]}
{"sample_id": 1216, "db_id": "apartment_rentals", "question": "Return the first names and last names of all guests", "rationale": ["Identify the table that contains guest information, which is the 'Guests' table.", "Determine the specific columns needed, which are 'guest_first_name' and 'guest_last_name'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Guests' table."], "pred_sql": "SELECT guest_first_name, guest_last_name FROM Guests;", "gold_sql": "SELECT guest_first_name ,  guest_last_name FROM Guests", "source_tables": ["guests"]}
{"sample_id": 1217, "db_id": "apartment_rentals", "question": "What are the first names and last names of all the guests?", "rationale": ["Identify the table that contains guest information, which is the 'Guests' table.", "Determine the specific columns needed from the 'Guests' table, which are 'guest_first_name' and 'guest_last_name'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Guests' table."], "pred_sql": "SELECT guest_first_name, guest_last_name FROM Guests;", "gold_sql": "SELECT guest_first_name ,  guest_last_name FROM Guests", "source_tables": ["guests"]}
{"sample_id": 1218, "db_id": "apartment_rentals", "question": "Return the date of birth for all the guests with gender code \"Male\".", "rationale": ["Identify the table that contains the required information: Guests table.", "Determine the specific column needed: date_of_birth.", "Apply a filter to select only those guests with a gender code of 'Male'.", "Construct the SQL query using SELECT to retrieve the date_of_birth from the Guests table with the specified condition."], "pred_sql": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male';", "gold_sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  'Male'", "source_tables": ["guests"]}
{"sample_id": 1219, "db_id": "apartment_rentals", "question": "What are dates of birth of all the guests whose gender is \"Male\"?", "rationale": ["Identify the relevant table: Guests, as it contains the information about guests including their date of birth and gender.", "Determine the specific columns needed: We need the 'date_of_birth' column for the guests.", "Apply the filter condition: We want to select only those guests whose 'gender_code' is 'Male'.", "Construct the SQL query using SELECT to retrieve the 'date_of_birth' from the Guests table with the specified condition."], "pred_sql": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male';", "gold_sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  'Male'", "source_tables": ["guests"]}
{"sample_id": 1220, "db_id": "apartment_rentals", "question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.", "rationale": ["Identify the required columns: apartment numbers, start dates, and end dates of bookings.", "The apartment numbers are in the Apartments table, while the booking details (start and end dates) are in the Apartment_Bookings table.", "To retrieve data from both tables, a JOIN operation is necessary based on the common column 'apt_id'.", "Construct the SQL SELECT statement to include the desired columns from the appropriate tables."], "pred_sql": "SELECT Apartments.apt_number, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id;", "gold_sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1221, "db_id": "apartment_rentals", "question": "What are the apartment number, start date, and end date of each apartment booking?", "rationale": ["Identify the required fields: apartment number, booking start date, and booking end date.", "Determine the relevant tables: 'Apartments' for apartment number and 'Apartment_Bookings' for booking dates.", "Establish the relationship between the tables: 'Apartment_Bookings' has a foreign key 'apt_id' that links to 'Apartments'.", "Construct the SQL SELECT statement to retrieve the desired fields from the joined tables."], "pred_sql": "SELECT Apartments.apt_number, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date FROM Apartment_Bookings JOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id;", "gold_sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1222, "db_id": "apartment_rentals", "question": "What are the booking start and end dates of the apartments with type code \"Duplex\"?", "rationale": ["Identify the relevant tables: Apartment_Bookings for booking dates and Apartments for apartment type.", "Determine the columns needed: booking_start_date and booking_end_date from Apartment_Bookings.", "Join the Apartment_Bookings table with the Apartments table on the apt_id to link bookings to their respective apartments.", "Filter the results to include only those apartments with the type code 'Duplex'."], "pred_sql": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id \nWHERE a.apt_type_code = 'Duplex';", "gold_sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  'Duplex'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1223, "db_id": "apartment_rentals", "question": "Return the booking start date and end date for the apartments that have type code \"Duplex\".", "rationale": ["Identify the relevant tables: Apartment_Bookings for booking dates and Apartments for apartment type.", "Determine the columns needed: booking_start_date and booking_end_date from Apartment_Bookings.", "Filter the apartments by type code 'Duplex' from the Apartments table.", "Join the Apartment_Bookings table with the Apartments table on the apt_id to link bookings to their respective apartments.", "Construct the SQL SELECT statement to retrieve the required booking dates for the specified apartment type."], "pred_sql": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id \nWHERE a.apt_type_code = 'Duplex';", "gold_sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  'Duplex'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1224, "db_id": "apartment_rentals", "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?", "rationale": ["Identify the relevant tables: We need data from the Apartments and Apartment_Bookings tables.", "Determine the columns needed: We need the booking start and end dates from the Apartment_Bookings table.", "Establish the relationship: The Apartments table is linked to the Apartment_Bookings table through the apt_id column.", "Filter the results: We only want apartments with more than 2 bedrooms, so we will add a WHERE clause to filter based on the bedroom_count column."], "pred_sql": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartments \nJOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id \nWHERE Apartments.bedroom_count > 2;", "gold_sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1225, "db_id": "apartment_rentals", "question": "Find the booking start date and end date for the apartments that have more than two bedrooms.", "rationale": ["Identify the relevant tables: We need data from the Apartment_Bookings table for booking dates and the Apartments table for bedroom count.", "Determine the columns needed: We need 'booking_start_date' and 'booking_end_date' from Apartment_Bookings, and we need to filter apartments based on 'bedroom_count' from Apartments.", "Establish the relationship between tables: The Apartments table is linked to the Apartment_Bookings table through 'apt_id'.", "Construct the SQL query: Use a SELECT statement to retrieve the required columns, join the two tables on 'apt_id', and apply a WHERE clause to filter apartments with more than two bedrooms."], "pred_sql": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartments \nJOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id \nWHERE Apartments.bedroom_count > 2;", "gold_sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1226, "db_id": "apartment_rentals", "question": "What is the booking status code of the apartment with apartment number \"Suite 634\"?", "rationale": ["Identify the relevant tables: Apartments and Apartment_Bookings are needed to find the booking status code for a specific apartment.", "Determine the relationship between the tables: Apartments has a foreign key relationship with Apartment_Bookings through apt_id.", "Specify the condition: We need to filter the apartments by the apartment number 'Suite 634'.", "Select the booking status code from the Apartment_Bookings table after joining it with the Apartments table based on the apt_id."], "pred_sql": "SELECT ab.booking_status_code \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE a.apt_number = 'Suite 634';", "gold_sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  'Suite 634'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1227, "db_id": "apartment_rentals", "question": "Tell me the booking status code for the apartment with number \"Suite 634\".", "rationale": ["Identify the relevant tables: Apartments and Apartment_Bookings are needed to get the booking status code.", "The Apartments table contains the apartment number, while the Apartment_Bookings table contains the booking status code.", "Join the Apartments table with the Apartment_Bookings table on the apt_id to link the apartment with its booking information.", "Filter the results to find the specific apartment by its number, which is 'Suite 634'.", "Select the booking_status_code from the joined tables."], "pred_sql": "SELECT ab.booking_status_code \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE a.apt_number = 'Suite 634';", "gold_sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  'Suite 634'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1228, "db_id": "apartment_rentals", "question": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".", "rationale": ["Identify the relevant tables: Apartments and Apartment_Bookings.", "We need to find distinct apartment numbers, so we will select the 'apt_number' column from the Apartments table.", "To filter the apartments that have bookings with a specific status, we will join the Apartments table with the Apartment_Bookings table on the 'apt_id' column.", "We will apply a WHERE clause to filter the bookings to only those with the status code 'Confirmed'.", "Finally, we will use DISTINCT to ensure that we only get unique apartment numbers."], "pred_sql": "SELECT DISTINCT a.apt_number \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE ab.booking_status_code = 'Confirmed';", "gold_sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1229, "db_id": "apartment_rentals", "question": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.", "rationale": ["Identify the relevant tables: Apartments and Apartment_Bookings.", "Determine the relationship between the tables: Apartments are linked to Apartment_Bookings through the apt_id.", "Select the apartment number from the Apartments table.", "Filter the results to include only those bookings with a status code of 'Confirmed'."], "pred_sql": "SELECT a.apt_number FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code = 'Confirmed';", "gold_sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1230, "db_id": "apartment_rentals", "question": "Show the average room count of the apartments that have booking status code \"Provisional\".", "rationale": ["Identify the relevant tables: Apartments and Apartment_Bookings are needed to get the room count and filter by booking status.", "Determine the required data: We need the average room count of apartments with a specific booking status code.", "Use the AVG() function to calculate the average of the room_count column from the Apartments table.", "Join the Apartments table with the Apartment_Bookings table on the apt_id to filter the apartments based on their booking status.", "Add a WHERE clause to filter the results to only include bookings with the status code 'Provisional'."], "pred_sql": "SELECT AVG(room_count) AS average_room_count \nFROM Apartments \nJOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id \nWHERE Apartment_Bookings.booking_status_code = 'Provisional';", "gold_sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1231, "db_id": "apartment_rentals", "question": "What is the average room count of the apartments whose booking status code is \"Provisional\"?", "rationale": ["Identify the relevant tables: Apartments and Apartment_Bookings are needed to get the room count and the booking status respectively.", "Determine the relationship between the tables: Apartments has a foreign key relationship with Apartment_Bookings through apt_id.", "Select the average room count: Use the AVG() function to calculate the average of the room_count column from the Apartments table.", "Filter the results: Use a WHERE clause to filter the bookings to only include those with a booking status code of 'Provisional'.", "Construct the SQL query: Combine the SELECT statement, JOIN clause, and WHERE clause to form the complete SQL query."], "pred_sql": "SELECT AVG(room_count) AS average_room_count \nFROM Apartments \nJOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id \nWHERE Apartment_Bookings.booking_status_code = 'Provisional';", "gold_sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1232, "db_id": "apartment_rentals", "question": "Show the guest first names, start dates, and end dates of all the apartment bookings.", "rationale": ["Identify the required fields: guest first names, booking start dates, and booking end dates.", "Determine the relevant tables: Guests for guest information and Apartment_Bookings for booking details.", "Establish the relationship between the tables: Guests are linked to Apartment_Bookings through guest_id.", "Construct the SQL SELECT statement to retrieve the desired fields from the joined tables."], "pred_sql": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;", "gold_sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "source_tables": ["apartment_bookings", "guests"]}
{"sample_id": 1233, "db_id": "apartment_rentals", "question": "What are the guest first name, start date, and end date of each apartment booking?", "rationale": ["Identify the required fields: guest first name, booking start date, and booking end date.", "Determine the relevant tables: Guests for guest information and Apartment_Bookings for booking details.", "Establish the relationship between the tables: Apartment_Bookings has a foreign key guest_id that links to Guests table.", "Construct the SQL SELECT statement to retrieve the specified fields from the joined tables."], "pred_sql": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;", "gold_sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "source_tables": ["apartment_bookings", "guests"]}
{"sample_id": 1234, "db_id": "apartment_rentals", "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".", "rationale": ["Identify the relevant tables: Apartment_Bookings and Guests are needed to get booking dates and guest information.", "Determine the columns to select: We need the booking start and end dates from the Apartment_Bookings table.", "Establish the relationship between tables: Use a JOIN to connect Apartment_Bookings with Guests on guest_id.", "Filter the results: Add a WHERE clause to filter for guests with the gender code 'Female'."], "pred_sql": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id \nWHERE Guests.gender_code = 'Female';", "gold_sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  'Female'", "source_tables": ["apartment_bookings", "guests"]}
{"sample_id": 1235, "db_id": "apartment_rentals", "question": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?", "rationale": ["Identify the relevant tables: Apartment_Bookings and Guests are needed to get booking dates and guest gender.", "Determine the columns to select: We need the start date and end date of bookings, which are in the Apartment_Bookings table.", "Establish the relationship between tables: We need to join Apartment_Bookings with Guests on guest_id to filter by gender.", "Add the condition to filter for female guests: Use a WHERE clause to specify that gender_code must be 'Female'."], "pred_sql": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id \nWHERE Guests.gender_code = 'Female';", "gold_sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  'Female'", "source_tables": ["apartment_bookings", "guests"]}
{"sample_id": 1236, "db_id": "apartment_rentals", "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".", "rationale": ["Identify the required data: first names and last names of guests.", "Determine the relevant tables: Guests and Apartment_Bookings.", "Establish the relationship between the tables: Guests are linked to Apartment_Bookings through guest_id.", "Formulate the SQL SELECT statement to retrieve guest_first_name and guest_last_name from the Guests table.", "Use a JOIN clause to combine data from Guests and Apartment_Bookings based on the guest_id.", "Add a WHERE clause to filter the results for bookings with a status code of 'Confirmed'."], "pred_sql": "SELECT Guests.guest_first_name, Guests.guest_last_name \nFROM Guests \nJOIN Apartment_Bookings ON Guests.guest_id = Apartment_Bookings.guest_id \nWHERE Apartment_Bookings.booking_status_code = 'Confirmed';", "gold_sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  'Confirmed'", "source_tables": ["apartment_bookings", "guests"]}
{"sample_id": 1237, "db_id": "apartment_rentals", "question": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.", "rationale": ["Identify the relevant tables: Guests and Apartment_Bookings.", "Determine the columns needed: guest_first_name and guest_last_name from Guests.", "Establish the relationship between Guests and Apartment_Bookings using the guest_id foreign key.", "Filter the results to include only those bookings with a status code of 'Confirmed'.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT g.guest_first_name, g.guest_last_name \nFROM Guests g \nJOIN Apartment_Bookings ab ON g.guest_id = ab.guest_id \nWHERE ab.booking_status_code = 'Confirmed';", "gold_sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  'Confirmed'", "source_tables": ["apartment_bookings", "guests"]}
{"sample_id": 1238, "db_id": "apartment_rentals", "question": "Show the facility codes of apartments with more than 4 bedrooms.", "rationale": ["Identify the relevant tables: Apartment_Facilities and Apartments.", "We need to retrieve facility codes, so we will select 'facility_code' from the Apartment_Facilities table.", "To filter apartments with more than 4 bedrooms, we need to join the Apartment_Facilities table with the Apartments table on 'apt_id'.", "In the WHERE clause, specify the condition that 'bedroom_count' must be greater than 4.", "Use DISTINCT to ensure that we only get unique facility codes."], "pred_sql": "SELECT DISTINCT af.facility_code \nFROM Apartment_Facilities af \nJOIN Apartments a ON af.apt_id = a.apt_id \nWHERE a.bedroom_count > 4;", "gold_sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "source_tables": ["apartments", "apartment_facilities"]}
{"sample_id": 1239, "db_id": "apartment_rentals", "question": "What are the facility codes of the apartments with more than four bedrooms?", "rationale": ["Identify the relevant tables: Apartment_Facilities and Apartments.", "We need to find apartments with more than four bedrooms, so we will filter the Apartments table based on the bedroom_count column.", "We will join the Apartment_Facilities table with the Apartments table using the apt_id column to get the facility codes associated with those apartments.", "Select the distinct facility codes from the joined result where the bedroom_count is greater than 4."], "pred_sql": "SELECT DISTINCT af.facility_code \nFROM Apartment_Facilities af \nJOIN Apartments a ON af.apt_id = a.apt_id \nWHERE a.bedroom_count > 4;", "gold_sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "source_tables": ["apartments", "apartment_facilities"]}
{"sample_id": 1240, "db_id": "apartment_rentals", "question": "Show the total number of rooms of all apartments with facility code \"Gym\".", "rationale": ["Identify the relevant table: We need to find the total number of rooms in apartments that have a specific facility code, which involves the Apartments and Apartment_Facilities tables.", "Determine the condition: We are interested in apartments that have the facility code 'Gym'.", "Create a subquery: We will create a subquery to select the apt_id from the Apartment_Facilities table where the facility_code is 'Gym'.", "Join the results: We will use the results of the subquery to filter the Apartments table to get the relevant apartments.", "Calculate the total: Finally, we will use the SUM function to calculate the total number of rooms from the filtered apartments."], "pred_sql": "SELECT SUM(room_count) AS total_rooms FROM Apartments WHERE apt_id IN (SELECT apt_id FROM Apartment_Facilities WHERE facility_code = 'Gym');", "gold_sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  'Gym'", "source_tables": ["apartments", "apartment_facilities"]}
{"sample_id": 1241, "db_id": "apartment_rentals", "question": "Find the total number of rooms in the apartments that have facility code \"Gym\".", "rationale": ["Identify the relevant table: We need to find information from the Apartments table regarding the total number of rooms.", "Determine the condition: We are interested in apartments that have a specific facility code, which is 'Gym'.", "Link the Apartments table with the Apartment_Facilities table: We will use a subquery to find the apt_ids of apartments that have the facility code 'Gym'.", "Calculate the total number of rooms: We will use the SUM function to add up the room_count for the apartments identified in the previous step."], "pred_sql": "SELECT SUM(room_count) AS total_rooms FROM Apartments WHERE apt_id IN (SELECT apt_id FROM Apartment_Facilities WHERE facility_code = 'Gym');", "gold_sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  'Gym'", "source_tables": ["apartments", "apartment_facilities"]}
{"sample_id": 1242, "db_id": "apartment_rentals", "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".", "rationale": ["Identify the relevant table for apartments, which is the 'Apartments' table.", "Determine the column that contains the number of rooms, which is 'room_count'.", "Identify the table that contains the building information, which is 'Apartment_Buildings'.", "Filter the apartments based on the building short name 'Columbus Square'.", "Use a subquery to find the 'building_id' corresponding to 'Columbus Square'.", "Sum the 'room_count' for all apartments that belong to the identified building."], "pred_sql": "SELECT SUM(room_count) AS total_rooms FROM Apartments WHERE building_id = (SELECT building_id FROM Apartment_Buildings WHERE building_short_name = 'Columbus Square');", "gold_sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  'Columbus Square'", "source_tables": ["apartments", "apartment_buildings"]}
{"sample_id": 1243, "db_id": "apartment_rentals", "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?", "rationale": ["Identify the relevant tables: Apartments and Apartment_Buildings.", "Determine the relationship between the tables: Apartments has a foreign key building_id that links to Apartment_Buildings.", "We need to sum the room_count from the Apartments table for a specific building.", "Filter the results by the building's short name, which is 'Columbus Square'.", "Construct the SQL query to select the sum of room_count from Apartments, joining with Apartment_Buildings on building_id, and applying the filter for building_short_name."], "pred_sql": "SELECT SUM(room_count) AS total_rooms\nFROM Apartments\nJOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id\nWHERE building_short_name = 'Columbus Square';", "gold_sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  'Columbus Square'", "source_tables": ["apartments", "apartment_buildings"]}
{"sample_id": 1244, "db_id": "apartment_rentals", "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "rationale": ["Identify the relevant tables: Apartment_Buildings for building addresses and Apartments for bathroom counts.", "Determine the relationship between the tables: Apartments are linked to Apartment_Buildings through the building_id.", "Select the building_address from Apartment_Buildings and filter apartments with more than 2 bathrooms using the bathroom_count column.", "Use JOIN to combine the two tables based on the building_id and apply the condition for bathroom_count in the WHERE clause.", "Use DISTINCT to ensure that each building address is listed only once, even if multiple apartments meet the criteria."], "pred_sql": "SELECT DISTINCT ab.building_address \nFROM Apartment_Buildings ab \nJOIN Apartments a ON ab.building_id = a.building_id \nWHERE a.bathroom_count > 2;", "gold_sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "source_tables": ["apartments", "apartment_buildings"]}
{"sample_id": 1245, "db_id": "apartment_rentals", "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.", "rationale": ["Identify the relevant tables: Apartment_Buildings and Apartments.", "We need to find buildings that have apartments with more than two bathrooms, so we will join the Apartment_Buildings table with the Apartments table using the building_id.", "We will filter the results to include only those apartments where the bathroom_count is greater than 2.", "Finally, we will select the distinct building addresses from the results to avoid duplicates."], "pred_sql": "SELECT DISTINCT Apartment_Buildings.building_address \nFROM Apartment_Buildings \nJOIN Apartments ON Apartment_Buildings.building_id = Apartments.building_id \nWHERE Apartments.bathroom_count > 2;", "gold_sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "source_tables": ["apartments", "apartment_buildings"]}
{"sample_id": 1246, "db_id": "apartment_rentals", "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".", "rationale": ["Identify the relevant tables: Apartments and Apartment_Buildings.", "Determine the columns needed: apt_type_code and apt_number from Apartments.", "Establish the relationship between the tables using the building_id foreign key.", "Filter the results to include only those buildings managed by 'Kyle'.", "Construct the SQL SELECT statement to retrieve the desired columns with the appropriate JOIN and WHERE clause."], "pred_sql": "SELECT a.apt_type_code, a.apt_number \nFROM Apartments a \nJOIN Apartment_Buildings b ON a.building_id = b.building_id \nWHERE b.building_manager = 'Kyle';", "gold_sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  'Kyle'", "source_tables": ["apartments", "apartment_buildings"]}
{"sample_id": 1247, "db_id": "apartment_rentals", "question": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?", "rationale": ["Identify the relevant tables: Apartments and Apartment_Buildings.", "Determine the columns needed: apt_type_code and apt_number from Apartments, and building_manager from Apartment_Buildings.", "Join the Apartments table with the Apartment_Buildings table on the building_id column to link apartments to their respective buildings.", "Filter the results to include only those buildings managed by 'Kyle' using a WHERE clause."], "pred_sql": "SELECT a.apt_type_code, a.apt_number \nFROM Apartments a \nJOIN Apartment_Buildings b ON a.building_id = b.building_id \nWHERE b.building_manager = 'Kyle';", "gold_sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  'Kyle'", "source_tables": ["apartments", "apartment_buildings"]}
{"sample_id": 1248, "db_id": "apartment_rentals", "question": "Show the booking status code and the corresponding number of bookings.", "rationale": ["Identify the relevant table: The Apartment_Bookings table contains the booking status code and the booking identifiers.", "Select the required columns: We need to select the booking_status_code and count the number of bookings (apt_booking_id).", "Use the COUNT function to count the number of bookings for each status code.", "Group the results by booking_status_code to get the count for each unique status code."], "pred_sql": "SELECT booking_status_code, COUNT(apt_booking_id) AS number_of_bookings\nFROM Apartment_Bookings\nGROUP BY booking_status_code;", "gold_sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "source_tables": ["apartment_bookings"]}
{"sample_id": 1249, "db_id": "apartment_rentals", "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.", "rationale": ["Identify the relevant table: The Apartment_Bookings table contains the booking status codes and the bookings.", "Select the columns needed: We need the booking_status_code and a count of bookings for each status.", "Use the COUNT() function to count the number of bookings for each status code.", "Group the results by booking_status_code to get the count for each unique status code."], "pred_sql": "SELECT booking_status_code, COUNT(*) AS booking_count FROM Apartment_Bookings GROUP BY booking_status_code;", "gold_sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "source_tables": ["apartment_bookings"]}
{"sample_id": 1250, "db_id": "apartment_rentals", "question": "Return all the apartment numbers sorted by the room count in ascending order.", "rationale": ["Identify the table that contains apartment numbers, which is the 'Apartments' table.", "Select the 'apt_number' column to retrieve the apartment numbers.", "To sort the results, use the 'ORDER BY' clause on the 'room_count' column.", "Specify 'ASC' to sort the room count in ascending order."], "pred_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC;", "gold_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "source_tables": ["apartments"]}
{"sample_id": 1251, "db_id": "apartment_rentals", "question": "Sort the apartment numbers in ascending order of room count.", "rationale": ["Identify the table that contains apartment numbers and room counts, which is the 'Apartments' table.", "Select the 'apt_number' column to get the apartment numbers.", "Use the 'ORDER BY' clause to sort the results based on the 'room_count' column in ascending order."], "pred_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC;", "gold_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "source_tables": ["apartments"]}
{"sample_id": 1252, "db_id": "apartment_rentals", "question": "Return the apartment number with the largest number of bedrooms.", "rationale": ["Identify the table that contains the apartment number and bedroom count, which is the Apartments table.", "To find the apartment with the largest number of bedrooms, we need to sort the results by the bedroom_count column in descending order.", "We will select the apt_number column from the Apartments table.", "To get only the apartment with the largest number of bedrooms, we will limit the results to 1 using LIMIT 1."], "pred_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1;", "gold_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "source_tables": ["apartments"]}
{"sample_id": 1253, "db_id": "apartment_rentals", "question": "What is the apartment number of the apartment with the most beds?", "rationale": ["Identify the relevant table: The Apartments table contains the apartment number and the number of bedrooms.", "Determine the required information: We need the apartment number of the apartment with the most bedrooms.", "Sort the apartments by the number of bedrooms in descending order to get the apartment with the most beds at the top.", "Limit the result to 1 to get only the apartment with the highest number of bedrooms."], "pred_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1;", "gold_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "source_tables": ["apartments"]}
{"sample_id": 1254, "db_id": "apartment_rentals", "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.", "rationale": ["Identify the relevant table: The Apartments table contains the apt_type_code and we need to count the number of apartments.", "Use the COUNT() function to count the number of apartments for each type code.", "Group the results by apt_type_code to get the count for each type.", "Sort the results in ascending order based on the count of apartments."], "pred_sql": "SELECT apt_type_code, COUNT(*) AS number_of_apartments \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY number_of_apartments ASC;", "gold_sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "source_tables": ["apartments"]}
{"sample_id": 1255, "db_id": "apartment_rentals", "question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.", "rationale": ["Identify the relevant table: The Apartments table contains the apartment type codes and their counts.", "Use the COUNT() function to count the number of apartments for each type code.", "Group the results by apt_type_code to aggregate the counts for each type.", "Order the results in ascending order based on the count of apartments."], "pred_sql": "SELECT apt_type_code, COUNT(*) AS apartment_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY apartment_count ASC;", "gold_sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "source_tables": ["apartments"]}
{"sample_id": 1256, "db_id": "apartment_rentals", "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "rationale": ["Identify the relevant table: The Apartments table contains the apt_type_code and room_count columns needed for the query.", "Calculate the average number of rooms for each apartment type: Use the AVG() function to compute the average of room_count, grouping by apt_type_code.", "Sort the results in descending order: Use ORDER BY to sort the average number of rooms from highest to lowest.", "Limit the results to the top 3: Use LIMIT 3 to restrict the output to the top three apartment type codes."], "pred_sql": "SELECT apt_type_code, AVG(room_count) AS average_rooms\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_rooms DESC\nLIMIT 3;", "gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "source_tables": ["apartments"]}
{"sample_id": 1257, "db_id": "apartment_rentals", "question": "What are the top three apartment types in terms of the average room count? Give me the", "rationale": ["Identify the relevant table: The Apartments table contains the apartment types and their room counts.", "Select the columns needed: We need the apartment type code (apt_type_code) and the average room count (AVG(room_count)).", "Group the results by apartment type: Use GROUP BY apt_type_code to calculate the average room count for each type.", "Order the results: Use ORDER BY average_room_count DESC to sort the types by average room count in descending order.", "Limit the results: Use LIMIT 3 to get only the top three apartment types."], "pred_sql": "SELECT apt_type_code, AVG(room_count) AS average_room_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_room_count DESC\nLIMIT 3;", "gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "source_tables": ["apartments"]}
{"sample_id": 1258, "db_id": "apartment_rentals", "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "rationale": ["Identify the relevant columns needed for the query: apt_type_code, room_count, bathroom_count, and bedroom_count from the Apartments table.", "Use the SUM function to calculate the total number of rooms, bathrooms, and bedrooms for each apartment type code.", "Group the results by apt_type_code to aggregate the data for each type of apartment.", "Order the results by the total number of rooms in descending order to find the apartment type with the largest number of total rooms.", "Limit the results to 1 to get only the apartment type with the largest number of total rooms."], "pred_sql": "SELECT apt_type_code, SUM(room_count) AS total_rooms, SUM(bathroom_count) AS total_bathrooms, SUM(bedroom_count) AS total_bedrooms\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY total_rooms DESC\nLIMIT 1;", "gold_sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "source_tables": ["apartments"]}
{"sample_id": 1259, "db_id": "apartment_rentals", "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "rationale": ["Identify the relevant table: The Apartments table contains the necessary columns for apartment type, room count, bathroom count, and bedroom count.", "Select the columns needed: We need apt_type_code, bathroom_count, bedroom_count, and the total number of rooms (room_count).", "Aggregate the data: Use SUM to calculate the total number of rooms for each apartment type and AVG to get the average number of bathrooms and bedrooms.", "Group the results by apartment type: This allows us to calculate the total and average values for each type.", "Order the results: We want to find the apartment type with the largest number of total rooms, so we order by total_rooms in descending order.", "Limit the results: Since we only need the apartment type with the largest number of total rooms, we limit the results to 1."], "pred_sql": "SELECT apt_type_code, SUM(room_count) AS total_rooms, AVG(bathroom_count) AS avg_bathrooms, AVG(bedroom_count) AS avg_bedrooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY total_rooms DESC \nLIMIT 1;", "gold_sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "source_tables": ["apartments"]}
{"sample_id": 1260, "db_id": "apartment_rentals", "question": "Show the most common apartment type code.", "rationale": ["Identify the relevant table: The Apartments table contains the apt_type_code which we need to analyze.", "Count the occurrences of each apartment type code: We will use the COUNT() function to count how many times each apt_type_code appears.", "Group the results by apt_type_code: This is necessary to aggregate the counts for each type code.", "Order the results by count in descending order: This will allow us to see the most common apartment type code at the top.", "Limit the results to 1: Since we only want the most common apartment type code, we will limit the output to 1."], "pred_sql": "SELECT apt_type_code, COUNT(*) as count FROM Apartments GROUP BY apt_type_code ORDER BY count DESC LIMIT 1;", "gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}
{"sample_id": 1261, "db_id": "apartment_rentals", "question": "Which apartment type code appears the most often?", "rationale": ["Identify the relevant table: The Apartments table contains the apt_type_code which we need to analyze.", "Count the occurrences of each apartment type code: We will use the COUNT() function to count how many times each apt_type_code appears.", "Group the results by apt_type_code: This is done using the GROUP BY clause to aggregate the counts for each type code.", "Order the results by count in descending order: We want to see which type code appears the most, so we will order the results by the count in descending order.", "Limit the results to the top one: Since we only want the most frequent apartment type code, we will use LIMIT 1."], "pred_sql": "SELECT apt_type_code, COUNT(*) as count FROM Apartments GROUP BY apt_type_code ORDER BY count DESC LIMIT 1;", "gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}
{"sample_id": 1262, "db_id": "apartment_rentals", "question": "Show the most common apartment type code among apartments with more than 1 bathroom.", "rationale": ["Identify the relevant table: The Apartments table contains the apartment type code and the number of bathrooms.", "Filter apartments: We need to filter apartments that have more than 1 bathroom, which is done using the WHERE clause with the condition 'bathroom_count > 1'.", "Group by apartment type: To find the most common apartment type, we will group the results by 'apt_type_code'.", "Count occurrences: We will count the number of occurrences of each apartment type code using COUNT(*).", "Order results: To find the most common type, we will order the results in descending order based on the count.", "Limit results: Since we only want the most common apartment type, we will limit the results to 1."], "pred_sql": "SELECT apt_type_code, COUNT(*) as count\nFROM Apartments\nWHERE bathroom_count > 1\nGROUP BY apt_type_code\nORDER BY count DESC\nLIMIT 1;", "gold_sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}
{"sample_id": 1263, "db_id": "apartment_rentals", "question": "Which apartment type code is the most common among apartments with more than one bathroom?", "rationale": ["Identify the relevant table: The Apartments table contains the apartment type code and the number of bathrooms.", "Filter apartments: We need to filter apartments that have more than one bathroom, which is done using the WHERE clause with bathroom_count > 1.", "Group by apartment type: To find the most common apartment type code, we will group the results by apt_type_code.", "Count occurrences: We will count the number of apartments for each apartment type code using COUNT(*).", "Order results: To find the most common type, we will order the results in descending order based on the count.", "Limit results: Since we only want the most common type, we will limit the results to 1."], "pred_sql": "SELECT apt_type_code, COUNT(*) AS count\nFROM Apartments\nWHERE bathroom_count > 1\nGROUP BY apt_type_code\nORDER BY count DESC\nLIMIT 1;", "gold_sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}
{"sample_id": 1264, "db_id": "apartment_rentals", "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.", "rationale": ["Identify the relevant table: The Apartments table contains the apt_type_code and room_count columns needed for the query.", "Select the columns needed: We need to select apt_type_code, the maximum number of rooms (MAX(room_count)), and the minimum number of rooms (MIN(room_count)).", "Use the GROUP BY clause: To get the maximum and minimum room counts for each apartment type, we need to group the results by apt_type_code.", "Construct the SQL query: Combine the selected columns and the GROUP BY clause into a complete SQL statement."], "pred_sql": "SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms\nFROM Apartments\nGROUP BY apt_type_code;", "gold_sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"]}
{"sample_id": 1265, "db_id": "apartment_rentals", "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.", "rationale": ["Identify the relevant table: The Apartments table contains the apt_type_code and room_count columns needed for the query.", "Select the columns needed: We need to select the apt_type_code, the maximum number of rooms (MAX(room_count)), and the minimum number of rooms (MIN(room_count)).", "Use the GROUP BY clause: To get the maximum and minimum room counts for each apartment type, we need to group the results by apt_type_code.", "Construct the SQL query: Combine the selected columns and the GROUP BY clause into a complete SQL statement."], "pred_sql": "SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms\nFROM Apartments\nGROUP BY apt_type_code;", "gold_sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"]}
{"sample_id": 1266, "db_id": "apartment_rentals", "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.", "rationale": ["Identify the relevant table: The 'Guests' table contains the gender information and guest identifiers.", "Select the columns needed: We need 'gender_code' and a count of 'guest_id' to get the number of guests for each gender.", "Use the COUNT() function: This function will count the number of guests for each gender code.", "Group the results: Use GROUP BY to aggregate the results by 'gender_code'.", "Sort the results: Use ORDER BY to sort the counts in descending order."], "pred_sql": "SELECT gender_code, COUNT(guest_id) AS guest_count FROM Guests GROUP BY gender_code ORDER BY guest_count DESC;", "gold_sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "source_tables": ["guests"]}
{"sample_id": 1267, "db_id": "apartment_rentals", "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.", "rationale": ["Identify the table that contains the gender codes and guest information, which is the 'Guests' table.", "To count the number of guests for each gender code, use the COUNT() function on the 'guest_id' column.", "Group the results by 'gender_code' to aggregate the counts for each gender.", "Sort the results in descending order based on the count of guests using ORDER BY with the COUNT() result."], "pred_sql": "SELECT gender_code, COUNT(guest_id) AS guest_count\nFROM Guests\nGROUP BY gender_code\nORDER BY guest_count DESC;", "gold_sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "source_tables": ["guests"]}
{"sample_id": 1268, "db_id": "apartment_rentals", "question": "How many apartments do not have any facility?", "rationale": ["Identify the Apartments table as it contains the apartments' information.", "To find apartments without any facilities, we need to check which apartments do not have corresponding entries in the Apartment_Facilities table.", "Use a subquery to select all apt_id values from the Apartment_Facilities table.", "Use the NOT IN clause to filter out those apartments that have facilities from the Apartments table.", "Finally, use COUNT(*) to count the number of apartments that do not have any facilities."], "pred_sql": "SELECT COUNT(*) AS apartment_count FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "gold_sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "source_tables": ["apartments", "apartment_facilities"]}
{"sample_id": 1269, "db_id": "apartment_rentals", "question": "Find the number of apartments that have no facility.", "rationale": ["We need to find the number of apartments that do not have any facilities associated with them.", "To do this, we will count the apartments in the Apartments table that do not have a corresponding entry in the Apartment_Facilities table.", "We can achieve this by using a subquery that selects all apt_id values from the Apartment_Facilities table.", "The main query will count all apartments whose apt_id is not in the list returned by the subquery."], "pred_sql": "SELECT COUNT(*) AS number_of_apartments_without_facility\nFROM Apartments\nWHERE apt_id NOT IN (\n    SELECT apt_id\n    FROM Apartment_Facilities\n);", "gold_sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "source_tables": ["apartments", "apartment_facilities"]}
{"sample_id": 1270, "db_id": "apartment_rentals", "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"", "rationale": ["Identify the relevant tables: Apartments and Apartment_Bookings.", "We need to select apartment numbers, so we will focus on the apt_number column from the Apartments table.", "We need to join the Apartments table with the Apartment_Bookings table on the apt_id column to access booking information.", "We will filter the results to include only those bookings that have a status code of 'Provisional' or 'Confirmed'.", "To ensure we only get apartments that have both status codes, we will group the results by apt_number and use the HAVING clause to count distinct status codes, ensuring it equals 2."], "pred_sql": "SELECT DISTINCT a.apt_number \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE ab.booking_status_code IN ('Provisional', 'Confirmed') \nGROUP BY a.apt_number \nHAVING COUNT(DISTINCT ab.booking_status_code) = 2;", "gold_sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1271, "db_id": "apartment_rentals", "question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.", "rationale": ["Identify the relevant tables: Apartments and Apartment_Bookings.", "We need to find apartments that have bookings with both 'Provisional' and 'Confirmed' status codes.", "Join the Apartments table with the Apartment_Bookings table on the apt_id column.", "Filter the results to include only those bookings that have a status code of either 'Provisional' or 'Confirmed'.", "Group the results by apartment number to aggregate the bookings for each apartment.", "Use the HAVING clause to ensure that only apartments with both status codes are included, which means counting distinct status codes should equal 2."], "pred_sql": "SELECT DISTINCT a.apt_number \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE ab.booking_status_code IN ('Provisional', 'Confirmed') \nGROUP BY a.apt_number \nHAVING COUNT(DISTINCT ab.booking_status_code) = 2;", "gold_sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional'", "source_tables": ["apartment_bookings", "apartments"]}
{"sample_id": 1272, "db_id": "apartment_rentals", "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.", "rationale": ["Identify the relevant tables: Apartments and View_Unit_Status.", "We need to select apartment numbers, so we will focus on the 'apt_number' column from the Apartments table.", "To check the availability status, we will join the Apartments table with the View_Unit_Status table on the 'apt_id' column.", "The condition specifies that we want apartments with availability status of both '0' and '1'.", "We will use the IN clause to filter for availability status of '0' and '1'.", "Finally, we will group the results by apartment number to ensure we get unique apartment numbers."], "pred_sql": "SELECT a.apt_number \nFROM Apartments a \nJOIN View_Unit_Status vus ON a.apt_id = vus.apt_id \nWHERE vus.available_yn IN ('0', '1') \nGROUP BY a.apt_number;", "gold_sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "source_tables": ["view_unit_status", "apartments"]}
{"sample_id": 1273, "db_id": "apartment_rentals", "question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.", "rationale": ["Identify the relevant tables: Apartments and View_Unit_Status are needed to check apartment numbers and their availability status.", "Join the Apartments table with the View_Unit_Status table on the apt_id to access both apartment numbers and their availability status.", "Filter the results to include only those apartments that have an availability status of '0' and '1'.", "Use the GROUP BY clause to group the results by apartment number.", "Use the HAVING clause to ensure that only those apartment numbers that have both availability statuses (0 and 1) are returned."], "pred_sql": "SELECT apt_number FROM Apartments a\nJOIN View_Unit_Status vus ON a.apt_id = vus.apt_id\nWHERE vus.available_yn IN ('0', '1')\nGROUP BY a.apt_number\nHAVING COUNT(DISTINCT vus.available_yn) = 2;", "gold_sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "source_tables": ["view_unit_status", "apartments"]}
{"sample_id": 1274, "db_id": "game_injury", "question": "How many games are held after season 2007?", "rationale": ["Identify the relevant table: The 'game' table contains information about games, including the season.", "Determine the condition: We need to count games held after the season 2007, which means we will filter the 'Season' column to be greater than 2007.", "Use the COUNT function: To get the total number of games that meet the condition, we will use the COUNT(*) function.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and the WHERE clause to filter the results."], "pred_sql": "SELECT COUNT(*) AS total_games FROM game WHERE Season > 2007;", "gold_sql": "SELECT count(*) FROM game WHERE season  >  2007", "source_tables": ["game"]}
{"sample_id": 1275, "db_id": "game_injury", "question": "List the dates of games by the home team name in descending order.", "rationale": ["Identify the relevant table for game dates, which is the 'game' table.", "To filter games by the home team name, we need to join or filter using the 'team' table, which is not explicitly mentioned in the schema but is implied.", "Use a subquery to select the 'id' of the home team based on the provided name.", "Select the 'Date' from the 'game' table where the 'Home_team' matches the id from the subquery.", "Order the results by 'Date' in descending order to get the latest games first."], "pred_sql": "SELECT Date FROM game WHERE Home_team IN (SELECT id FROM team WHERE name = 'home_team_name') ORDER BY Date DESC;", "gold_sql": "SELECT Date FROM game ORDER BY home_team DESC", "source_tables": ["game"]}
{"sample_id": 1276, "db_id": "game_injury", "question": "List the season, home team, away team of all the games.", "rationale": ["Identify the relevant table: The 'game' table contains the information about the games, including the season, home team, and away team.", "Determine the required columns: The user requested the season, home team, and away team, which correspond to the 'Season', 'Home_team', and 'Away_team' columns in the 'game' table.", "Construct the SQL SELECT statement: Use SELECT to specify the columns to retrieve from the 'game' table.", "Specify the table to query: Indicate that the data should be retrieved from the 'game' table."], "pred_sql": "SELECT Season, Home_team, Away_team FROM game;", "gold_sql": "SELECT season ,  home_team ,  away_team FROM game", "source_tables": ["game"]}
{"sample_id": 1277, "db_id": "game_injury", "question": "What are the maximum, minimum and average home games each stadium held?", "rationale": ["Identify the relevant table: The query requires information about home games held at each stadium, which is found in the 'stadium' table.", "Select the necessary columns: We need the stadium name and the maximum, minimum, and average of home games. This means we will use the 'name' and 'Home_Games' columns from the 'stadium' table.", "Use aggregate functions: To find the maximum, minimum, and average home games, we will use the MAX(), MIN(), and AVG() functions on the 'Home_Games' column.", "Group the results: Since we want these statistics for each stadium, we will group the results by the stadium name using GROUP BY.", "Construct the SQL query: Combine all the elements into a complete SQL query that selects the stadium name and the calculated statistics."], "pred_sql": "SELECT stadium.name, MAX(stadium.Home_Games) AS Max_Home_Games, MIN(stadium.Home_Games) AS Min_Home_Games, AVG(stadium.Home_Games) AS Avg_Home_Games FROM stadium GROUP BY stadium.name;", "gold_sql": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium", "source_tables": ["stadium"]}
{"sample_id": 1278, "db_id": "game_injury", "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?", "rationale": ["Identify the relevant table: The 'stadium' table contains the necessary columns for this query.", "Determine the columns needed: We need the 'Average_Attendance' and 'Capacity_Percentage' columns.", "Set the condition: We want to filter stadiums where 'Capacity_Percentage' is greater than 100%.", "Calculate the average: Use the AVG() function to calculate the average attendance of the filtered stadiums."], "pred_sql": "SELECT AVG(Average_Attendance) AS Average_Attendance FROM stadium WHERE Capacity_Percentage > '100'", "gold_sql": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100", "source_tables": ["stadium"]}
{"sample_id": 1279, "db_id": "game_injury", "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "rationale": ["Identify the relevant table: The query requires information about players and their injuries, which is found in the 'injury_accident' table.", "Determine the required columns: The user wants the player name, number of matches missed, and the source of information, which correspond to the columns 'Player', 'Number_of_matches', and 'Source' in the 'injury_accident' table.", "Filter the results: The query specifies that we need players who do not have the injury 'Knee problem'. This requires a condition in the WHERE clause to exclude those records.", "Construct the SQL query: Combine the SELECT statement with the identified columns and the WHERE clause to filter out the specified injury."], "pred_sql": "SELECT Player, Number_of_matches, Source FROM injury_accident WHERE Injury != 'Knee problem';", "gold_sql": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'", "source_tables": ["injury_accident"]}
{"sample_id": 1280, "db_id": "game_injury", "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?", "rationale": ["Identify the relevant tables: 'injury_accident' for player injuries and 'game' for game details.", "We need to find the season of the game related to the injury of the player 'Walter Samuel'.", "Join the 'injury_accident' table with the 'game' table using the foreign key relationship (injury_accident.game_id = game.id).", "Select the 'Season' column from the 'game' table where the 'Player' column in the 'injury_accident' table matches 'Walter Samuel'."], "pred_sql": "SELECT g.Season FROM injury_accident ia JOIN game g ON ia.game_id = g.id WHERE ia.Player = 'Walter Samuel';", "gold_sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'", "source_tables": ["injury_accident", "game"]}
{"sample_id": 1281, "db_id": "game_injury", "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "rationale": ["Identify the relevant tables: We need data from the 'game' table for game details and the 'injury_accident' table for injury incidents.", "Determine the required fields: We need the 'id', 'Score', and 'Date' from the 'game' table.", "Establish the relationship: The 'game' table is linked to the 'injury_accident' table through the 'game_id'.", "Use a JOIN clause to combine the 'game' and 'injury_accident' tables based on the matching 'id' and 'game_id'.", "Group the results by 'game.id' to aggregate the injury incidents for each game.", "Use the HAVING clause to filter the results to only include games that have two or more injury incidents."], "pred_sql": "SELECT game.id, game.Score, game.Date \nFROM game \nJOIN injury_accident ON game.id = injury_accident.game_id \nGROUP BY game.id \nHAVING COUNT(injury_accident.id) >= 2;", "gold_sql": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "source_tables": ["injury_accident", "game"]}
{"sample_id": 1282, "db_id": "game_injury", "question": "What are the id and name of the stadium where the most injury accidents happened?", "rationale": ["Identify the relevant tables: stadium, game, and injury_accident.", "We need to find the stadiums associated with injury accidents, so we will join the stadium table with the game table using the stadium_id foreign key.", "Next, we will join the game table with the injury_accident table using the game_id foreign key to link injuries to specific games.", "To find the stadium with the most injury accidents, we will group the results by stadium id and name, and count the number of injury accidents for each stadium.", "Finally, we will order the results by the count of injury accidents in descending order and limit the results to 1 to get the stadium with the most injuries."], "pred_sql": "SELECT stadium.id, stadium.name\nFROM stadium\nJOIN game ON stadium.id = game.stadium_id\nJOIN injury_accident ON game.id = injury_accident.game_id\nGROUP BY stadium.id, stadium.name\nORDER BY COUNT(injury_accident.id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["injury_accident", "game", "stadium"]}
{"sample_id": 1283, "db_id": "game_injury", "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.", "rationale": ["We need to find the stadium with the largest number of injury accidents.", "To do this, we will join the 'stadium', 'game', and 'injury_accident' tables based on their relationships.", "The 'stadium' table will provide the stadium's id and name.", "The 'game' table will link the stadium to the games played at it using the 'stadium_id'.", "The 'injury_accident' table will provide the injury incidents linked to each game using the 'game_id'.", "We will group the results by stadium id and name to count the number of injury accidents for each stadium.", "Finally, we will order the results in descending order based on the count of injury accidents and limit the results to the top one stadium."], "pred_sql": "SELECT stadium.id, stadium.name\nFROM stadium\nJOIN game ON stadium.id = game.stadium_id\nJOIN injury_accident ON game.id = injury_accident.game_id\nGROUP BY stadium.id, stadium.name\nORDER BY COUNT(injury_accident.id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["injury_accident", "game", "stadium"]}
{"sample_id": 1284, "db_id": "game_injury", "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "rationale": ["Identify the relevant tables: injury_accident, game, and stadium.", "We need to find the season and stadium name where injuries of 'Foot injury' or 'Knee problem' occurred.", "Join the injury_accident table with the game table on game_id to get the season and stadium_id.", "Join the game table with the stadium table on stadium_id to get the stadium name.", "Filter the results to include only those injuries that match 'Foot injury' or 'Knee problem'.", "Select the Season from the game table and the name from the stadium table."], "pred_sql": "SELECT g.Season, s.name \nFROM injury_accident ia \nJOIN game g ON ia.game_id = g.id \nJOIN stadium s ON g.stadium_id = s.id \nWHERE ia.Injury IN ('Foot injury', 'Knee problem');", "gold_sql": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'", "source_tables": ["injury_accident", "game", "stadium"]}
{"sample_id": 1285, "db_id": "game_injury", "question": "How many different kinds of information sources are there for injury accidents?", "rationale": ["Identify the table that contains the relevant information, which is the 'injury_accident' table.", "Determine the column that holds the information sources, which is the 'Source' column.", "To find the number of different kinds of information sources, use the COUNT function with DISTINCT to count unique entries in the 'Source' column."], "pred_sql": "SELECT COUNT(DISTINCT Source) AS Different_Sources FROM injury_accident;", "gold_sql": "SELECT count(DISTINCT SOURCE) FROM injury_accident", "source_tables": ["injury_accident"]}
{"sample_id": 1286, "db_id": "game_injury", "question": "How many games are free of injury accidents?", "rationale": ["Identify the main objective: Count the number of games that do not have any injury accidents.", "To find games free of injury accidents, we need to check the 'game' table and exclude those games that have entries in the 'injury_accident' table.", "We can achieve this by using a subquery that selects all game_ids from the 'injury_accident' table.", "The main query will count all games in the 'game' table whose ids are not present in the list of game_ids from the subquery."], "pred_sql": "SELECT COUNT(*) AS Free_Of_Injury_Accidents FROM game WHERE id NOT IN (SELECT game_id FROM injury_accident);", "gold_sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )", "source_tables": ["injury_accident", "game"]}
{"sample_id": 1287, "db_id": "game_injury", "question": "How many distinct kinds of injuries happened after season 2010?", "rationale": ["Identify the relevant tables: 'injury_accident' for injuries and 'game' for seasons.", "We need to count distinct types of injuries, so we will use COUNT(DISTINCT Injury).", "We need to filter injuries that occurred after season 2010, which requires a WHERE clause on the 'Season' column from the 'game' table.", "To link injuries to their respective games, we will use a JOIN between 'injury_accident' and 'game' on the game_id and id columns respectively."], "pred_sql": "SELECT COUNT(DISTINCT Injury) AS distinct_injury_count FROM injury_accident JOIN game ON injury_accident.game_id = game.id WHERE game.Season > 2010;", "gold_sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010", "source_tables": ["injury_accident", "game"]}
{"sample_id": 1288, "db_id": "game_injury", "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", "rationale": ["We need to find the names of stadiums where both players 'Walter Samuel' and 'Thiago Motta' got injured.", "To do this, we will join the 'stadium', 'game', and 'injury_accident' tables based on their relationships.", "The 'stadium' table will be joined with the 'game' table using the 'stadium_id' foreign key.", "Then, the 'game' table will be joined with the 'injury_accident' table using the 'game_id' foreign key.", "We will filter the results to include only the records where the 'Player' is either 'Walter Samuel' or 'Thiago Motta'.", "To ensure that we only get stadiums where both players were injured, we will group the results by stadium name and use the HAVING clause to count distinct players, ensuring it equals 2."], "pred_sql": "SELECT DISTINCT s.name \nFROM stadium s \nJOIN game g ON s.id = g.stadium_id \nJOIN injury_accident ia ON g.id = ia.game_id \nWHERE ia.Player IN ('Walter Samuel', 'Thiago Motta') \nGROUP BY s.name \nHAVING COUNT(DISTINCT ia.Player) = 2;", "gold_sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'", "source_tables": ["injury_accident", "game", "stadium"]}
{"sample_id": 1289, "db_id": "game_injury", "question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.", "rationale": ["We need to select the name, average attendance, and total attendance from the stadiums.", "To find stadiums where no accidents happened, we will use a LEFT JOIN between the stadium and game tables, and then another LEFT JOIN with the injury_accident table.", "The condition for no accidents is that the injury_accident table should not have any corresponding entries for the games played at the stadiums.", "We will filter the results using a WHERE clause to check for NULL values in the injury_accident table's id column, indicating no accidents occurred."], "pred_sql": "SELECT s.name, s.Average_Attendance, s.Total_Attendance \nFROM stadium s \nLEFT JOIN game g ON s.id = g.stadium_id \nLEFT JOIN injury_accident ia ON g.id = ia.game_id \nWHERE ia.id IS NULL;", "gold_sql": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id", "source_tables": ["injury_accident", "game", "stadium"]}
{"sample_id": 1290, "db_id": "game_injury", "question": "Which stadium name contains the substring \"Bank\"?", "rationale": ["Identify the table that contains the stadium names, which is the 'stadium' table.", "Determine the column that holds the names of the stadiums, which is the 'name' column.", "To find stadium names containing a specific substring, use the SQL 'LIKE' operator with wildcards.", "The substring we are looking for is 'Bank', so we will use '%Bank%' to match any stadium name that contains 'Bank' anywhere in it.", "Construct the SQL query to select the 'name' column from the 'stadium' table where the 'name' matches the condition using 'LIKE'."], "pred_sql": "SELECT name FROM stadium WHERE name LIKE '%Bank%';", "gold_sql": "SELECT name FROM stadium WHERE name LIKE '%Bank%'", "source_tables": ["stadium"]}
{"sample_id": 1291, "db_id": "game_injury", "question": "How many games has each stadium held?", "rationale": ["Identify the relevant tables: 'stadium' and 'game'.", "We need to count the number of games held at each stadium, which requires a join between the 'stadium' and 'game' tables based on the stadium's ID.", "Use a LEFT JOIN to ensure we include all stadiums, even those with no games.", "Count the number of game IDs associated with each stadium, which gives us the total number of games held.", "Group the results by stadium ID to get the count for each stadium."], "pred_sql": "SELECT stadium.name, COUNT(game.id) AS total_games FROM stadium LEFT JOIN game ON stadium.id = game.stadium_id GROUP BY stadium.id;", "gold_sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id", "source_tables": ["game", "stadium"]}
{"sample_id": 1292, "db_id": "game_injury", "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "rationale": ["We need to retrieve the date of the game and the name of the injured player for each injury accident.", "The relevant tables are 'injury_accident' for injury details and 'game' for game details.", "We will join the 'injury_accident' table with the 'game' table using the foreign key relationship where 'injury_accident.game_id' matches 'game.id'.", "We need to select the 'Date' from the 'game' table and 'Player' from the 'injury_accident' table.", "Finally, we will sort the results by the 'Season' column from the 'game' table in descending order."], "pred_sql": "SELECT g.Date, ia.Player \nFROM injury_accident ia \nJOIN game g ON ia.game_id = g.id \nORDER BY g.Season DESC;", "gold_sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC", "source_tables": ["injury_accident", "game"]}
{"sample_id": 1293, "db_id": "soccer_1", "question": "List all country and league names.", "rationale": ["Identify the tables needed: Country and League.", "Determine the columns to select: Country.name and League.name.", "Establish the relationship between the tables: League has a foreign key country_id that references Country.id.", "Construct the SQL query using a JOIN to combine the Country and League tables based on the relationship."], "pred_sql": "SELECT Country.name AS country_name, League.name AS league_name FROM Country JOIN League ON Country.id = League.country_id;", "gold_sql": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id", "source_tables": ["country", "league"]}
{"sample_id": 1294, "db_id": "soccer_1", "question": "How many leagues are there in England?", "rationale": ["Identify the table that contains league information, which is the 'League' table.", "Determine the relevant column that indicates the country of the league, which is the 'name' column.", "Formulate a SQL query to count the number of leagues where the 'name' is 'England'."], "pred_sql": "SELECT COUNT(*) FROM League WHERE name = 'England';", "gold_sql": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  'England'", "source_tables": ["country", "league"]}
{"sample_id": 1295, "db_id": "soccer_1", "question": "What is the average weight of all players?", "rationale": ["Identify the table that contains player information, which is the 'Player' table.", "Determine the column that holds the weight of the players, which is 'weight'.", "Use the AVG() function to calculate the average of the 'weight' column.", "Construct the SQL query to select the average weight from the 'Player' table."], "pred_sql": "SELECT AVG(weight) AS average_weight FROM Player;", "gold_sql": "SELECT avg(weight) FROM Player", "source_tables": ["player"]}
{"sample_id": 1296, "db_id": "soccer_1", "question": "What is the maximum and minimum height of all players?", "rationale": ["Identify the relevant table: The 'Player' table contains the height information of players.", "Determine the required calculations: We need to find the maximum and minimum height of all players.", "Construct the SQL query: Use the SELECT statement to retrieve the maximum and minimum height from the 'Player' table."], "pred_sql": "SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player;", "gold_sql": "SELECT max(weight) ,  min(weight) FROM Player", "source_tables": ["player"]}
{"sample_id": 1297, "db_id": "soccer_1", "question": "List all player names who have an overall rating higher than the average.", "rationale": ["Identify the relevant table: Player and Player_Attributes.", "We need to find player names, so we will select 'player_name' from the Player table.", "To filter players based on their overall rating, we will use a subquery on the Player_Attributes table.", "The subquery will calculate the average overall rating using AVG(overall_rating).", "We will then filter players whose overall rating is greater than this average.", "To link the Player and Player_Attributes tables, we will use the 'player_api_id' as the common key."], "pred_sql": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes))", "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )", "source_tables": ["player_attributes", "player"]}
{"sample_id": 1298, "db_id": "soccer_1", "question": "What are the names of players who have the best dribbling?", "rationale": ["Identify the relevant tables: Player and Player_Attributes.", "We need to retrieve player names, so we will select Player.player_name.", "To find the best dribbling, we will join Player with Player_Attributes on player_api_id.", "We will order the results by the dribbling attribute in descending order to get the highest value first.", "Finally, we will limit the results to 1 to get only the player with the best dribbling."], "pred_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.dribbling DESC LIMIT 1;", "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)", "source_tables": ["player_attributes", "player"]}
{"sample_id": 1299, "db_id": "soccer_1", "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.", "rationale": ["Identify the relevant tables: Player and Player_Attributes.", "We need to retrieve player names, so we will select Player.player_name.", "To find players with a crossing score higher than 90, we will filter using Player_Attributes.crossing > 90.", "We also need to filter for players who prefer their right foot, using Player_Attributes.preferred_foot = 'right'.", "Join the Player table with Player_Attributes on the player_api_id to combine player names with their attributes.", "Construct the SQL query using the SELECT statement with the necessary JOIN and WHERE clauses."], "pred_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.crossing > 90 AND Player_Attributes.preferred_foot = 'right';", "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  'right'", "source_tables": ["player_attributes", "player"]}
{"sample_id": 1300, "db_id": "soccer_1", "question": "List the names of all left-footed players who have overall rating between 85 and 90.", "rationale": ["Identify the relevant tables: Player and Player_Attributes.", "We need to select player names, so we will select Player.player_name.", "We need to filter players based on their preferred foot, which is in Player_Attributes, specifically looking for 'left'.", "We also need to filter players based on their overall rating, which is also in Player_Attributes, specifically looking for ratings between 85 and 90.", "Join the Player table with Player_Attributes on the player_api_id to access both player names and their attributes.", "Construct the SQL query using the SELECT statement with the necessary JOIN and WHERE clauses."], "pred_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.preferred_foot = 'left' AND Player_Attributes.overall_rating BETWEEN '85' AND '90';", "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  'left' AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90", "source_tables": ["player_attributes", "player"]}
{"sample_id": 1301, "db_id": "soccer_1", "question": "What is the average rating for right-footed players and left-footed players?", "rationale": ["Identify the relevant table: Player_Attributes contains the player ratings and preferred foot information.", "Determine the columns needed: We need 'preferred_foot' to differentiate between right-footed and left-footed players, and 'overall_rating' to calculate the average rating.", "Use the AVG() function to calculate the average of 'overall_rating'.", "Group the results by 'preferred_foot' to get separate averages for right-footed and left-footed players."], "pred_sql": "SELECT preferred_foot, AVG(overall_rating) AS average_rating FROM Player_Attributes GROUP BY preferred_foot;", "gold_sql": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot", "source_tables": ["player_attributes"]}
{"sample_id": 1302, "db_id": "soccer_1", "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?", "rationale": ["Identify the relevant table: Player_Attributes contains the player attributes including overall rating and preferred foot.", "Filter the records to include only those players with an overall rating greater than 80 using the WHERE clause.", "Group the results by the preferred foot to count the number of players for each foot (left or right) using GROUP BY.", "Select the preferred foot and the count of players for each foot using the SELECT statement."], "pred_sql": "SELECT preferred_foot, COUNT(*) AS count FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot;", "gold_sql": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot", "source_tables": ["player_attributes"]}
{"sample_id": 1303, "db_id": "soccer_1", "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.", "rationale": ["Identify the relevant tables: Player and Player_Attributes.", "Determine the columns needed: Player.id for player IDs, Player.height for height, and Player_Attributes.overall_rating for overall rating.", "Set the conditions: height must be at least 180 cm and overall rating must be higher than 85.", "Join the Player table with Player_Attributes on the player_api_id to access both height and overall rating.", "Construct the SQL SELECT statement to retrieve the player IDs that meet the specified conditions."], "pred_sql": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height >= 180 AND Player_Attributes.overall_rating > 85;", "gold_sql": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85", "source_tables": ["player_attributes", "player"]}
{"sample_id": 1304, "db_id": "soccer_1", "question": "List all of the ids for left-footed players with a height between 180cm and 190cm.", "rationale": ["Identify the relevant tables: Player and Player_Attributes.", "We need to select the 'id' from the Player table.", "We need to filter players based on their height, which is in the Player table, and their preferred foot, which is in the Player_Attributes table.", "Join the Player table with the Player_Attributes table on the player_api_id to access both height and preferred foot.", "Apply the height filter to be between 180cm and 190cm.", "Apply the filter for left-footed players by checking if preferred_foot is 'left'."], "pred_sql": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN 180 AND 190 AND Player_Attributes.preferred_foot = 'left';", "gold_sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  'left'", "source_tables": ["player_attributes", "player"]}
{"sample_id": 1305, "db_id": "soccer_1", "question": "Who are the top 3 players in terms of overall rating?", "rationale": ["Identify the relevant tables: Player and Player_Attributes, as we need player names and their overall ratings.", "Join the Player table with Player_Attributes on the player_api_id to access both player names and their ratings.", "Select the player_name and overall_rating columns from the joined tables.", "Order the results by overall_rating in descending order to get the highest ratings first.", "Limit the results to the top 3 players to fulfill the request."], "pred_sql": "SELECT player_name, overall_rating FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 3;", "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3", "source_tables": ["player_attributes", "player"]}
{"sample_id": 1306, "db_id": "soccer_1", "question": "List the names and birthdays of the top five players in terms of potential.", "rationale": ["Identify the required columns: player names and birthdays, which are in the Player table.", "To get the potential ratings, we need to join the Player table with the Player_Attributes table using the player_api_id.", "Sort the results by potential in descending order to get the top players.", "Limit the results to the top five players."], "pred_sql": "SELECT Player.player_name, Player.birthday \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY Player_Attributes.potential DESC \nLIMIT 5;", "gold_sql": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5", "source_tables": ["player_attributes", "player"]}
{"sample_id": 1307, "db_id": "performance_attendance", "question": "How many performances are there?", "rationale": ["Identify the table that contains performance data, which is the 'performance' table.", "To find out how many performances there are, we need to count the number of entries in the 'performance' table.", "Use the COUNT() function to count all rows in the 'performance' table.", "Select the count with an alias 'Total_Performances' for clarity."], "pred_sql": "SELECT COUNT(*) AS Total_Performances FROM performance;", "gold_sql": "SELECT count(*) FROM performance", "source_tables": ["performance"]}
{"sample_id": 1308, "db_id": "performance_attendance", "question": "List the hosts of performances in ascending order of attendance.", "rationale": ["Identify the table that contains the host information, which is the 'performance' table.", "Determine the column that contains the host names, which is 'Host'.", "Identify the column that contains the attendance numbers, which is 'Attendance'.", "Construct a SQL query to select the 'Host' from the 'performance' table.", "Add an ORDER BY clause to sort the results in ascending order based on the 'Attendance' column."], "pred_sql": "SELECT Host FROM performance ORDER BY Attendance ASC;", "gold_sql": "SELECT HOST FROM performance ORDER BY Attendance ASC", "source_tables": ["performance"]}
{"sample_id": 1309, "db_id": "performance_attendance", "question": "What are the dates and locations of performances?", "rationale": ["Identify the relevant table: The query asks for dates and locations of performances, which are found in the 'performance' table.", "Select the required columns: We need to retrieve the 'Date' and 'Location' columns from the 'performance' table.", "Construct the SQL query: Use the SELECT statement to specify the columns and the FROM clause to indicate the table."], "pred_sql": "SELECT Date, Location FROM performance;", "gold_sql": "SELECT Date ,  LOCATION FROM performance", "source_tables": ["performance"]}
{"sample_id": 1310, "db_id": "performance_attendance", "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"", "rationale": ["Identify the tables involved: member, performance, and member_attendance.", "Determine the columns needed: member's name, performance date, host, location, attendance, and number of pieces performed.", "Establish the relationships between the tables using JOINs: member to member_attendance and member_attendance to performance.", "Filter the results based on the specified locations: 'TD Garden' or 'Bell Centre'.", "Construct the SQL SELECT statement to retrieve the desired information."], "pred_sql": "SELECT m.Name, p.Date, p.Host, p.Location, p.Attendance, ma.Num_of_Pieces \nFROM member m \nJOIN member_attendance ma ON m.Member_ID = ma.Member_ID \nJOIN performance p ON ma.Performance_ID = p.Performance_ID \nWHERE p.Location IN ('TD Garden', 'Bell Centre');", "gold_sql": "SELECT Attendance FROM performance WHERE LOCATION  =  'TD Garden' OR LOCATION  =  'Bell Centre'", "source_tables": ["performance"]}
{"sample_id": 1311, "db_id": "performance_attendance", "question": "What is the average number of attendees for performances?", "rationale": ["Identify the table that contains the relevant data: the 'performance' table holds the attendance information.", "Determine the specific column needed: the 'Attendance' column contains the number of attendees for each performance.", "To calculate the average, use the AVG() function on the 'Attendance' column.", "Since 'Attendance' is stored as text, it needs to be cast to an integer for accurate calculation.", "Construct the SQL query to select the average attendance from the performance table."], "pred_sql": "SELECT AVG(CAST(Attendance AS INTEGER)) AS Average_Attendance FROM performance;", "gold_sql": "SELECT avg(Attendance) FROM performance", "source_tables": ["performance"]}
{"sample_id": 1312, "db_id": "performance_attendance", "question": "What is the date of the performance with the highest number of attendees?", "rationale": ["Identify the table that contains the performance details, which is the 'performance' table.", "Determine the relevant column that holds the number of attendees, which is 'Attendance'.", "To find the performance with the highest number of attendees, we need to sort the results by the 'Attendance' column in descending order.", "Finally, we select the 'Date' of the performance with the highest attendance, which can be achieved by limiting the results to 1 after sorting."], "pred_sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1;", "gold_sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1", "source_tables": ["performance"]}
{"sample_id": 1313, "db_id": "performance_attendance", "question": "Show different locations and the number of performances at each location.", "rationale": ["Identify the relevant table: The 'performance' table contains the 'Location' and we need to count performances.", "Use the COUNT() function to count the number of performances for each location.", "Group the results by 'Location' to get the count for each distinct location."], "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Performances FROM performance GROUP BY Location;", "gold_sql": "SELECT LOCATION ,  COUNT(*) FROM performance GROUP BY LOCATION", "source_tables": ["performance"]}
{"sample_id": 1314, "db_id": "performance_attendance", "question": "Show the most common location of performances.", "rationale": ["Identify the table that contains the location of performances, which is the 'performance' table.", "To find the most common location, we need to count the number of performances at each location.", "Use the COUNT function to count the number of occurrences of each location.", "Group the results by the 'Location' column to aggregate the counts for each unique location.", "Order the results in descending order based on the count of performances to get the most common location at the top.", "Limit the results to 1 to get only the most common location."], "pred_sql": "SELECT Location, COUNT(*) as Performance_Count FROM performance GROUP BY Location ORDER BY Performance_Count DESC LIMIT 1;", "gold_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["performance"]}
{"sample_id": 1315, "db_id": "performance_attendance", "question": "Show the locations that have at least two performances.", "rationale": ["Identify the table that contains location information, which is the 'performance' table.", "We need to find locations that have at least two performances, so we will use the COUNT function to count the number of performances for each location.", "To group the results by location, we will use the GROUP BY clause on the 'Location' column.", "Finally, we will filter the results to include only those locations that have a count of performances greater than or equal to 2 using the HAVING clause."], "pred_sql": "SELECT Location FROM performance GROUP BY Location HAVING COUNT(Performance_ID) >= 2;", "gold_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2", "source_tables": ["performance"]}
{"sample_id": 1316, "db_id": "performance_attendance", "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.", "rationale": ["Identify the requirement to find locations with performances that have both more than 2000 attendees and less than 1000 attendees.", "Use the 'performance' table to access the 'Location' and 'Attendance' columns.", "Filter the performances based on the attendance criteria: greater than 2000 and less than 1000.", "Group the results by 'Location' to aggregate the performances at each location.", "Use the HAVING clause to ensure that each location has at least one performance with more than 2000 attendees and at least one performance with less than 1000 attendees."], "pred_sql": "SELECT Location FROM performance WHERE Attendance > 2000 OR Attendance < 1000 GROUP BY Location HAVING COUNT(CASE WHEN Attendance > 2000 THEN 1 END) > 0 AND COUNT(CASE WHEN Attendance < 1000 THEN 1 END) > 0;", "gold_sql": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000", "source_tables": ["performance"]}
{"sample_id": 1317, "db_id": "performance_attendance", "question": "Show the names of members and the location of the performances they attended.", "rationale": ["Identify the tables involved: member, performance, and member_attendance.", "Determine the columns needed: member.Name and performance.Location.", "Establish the relationships between the tables using JOINs: member to member_attendance on Member_ID, and member_attendance to performance on Performance_ID.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT member.Name, performance.Location \nFROM member \nJOIN member_attendance ON member.Member_ID = member_attendance.Member_ID \nJOIN performance ON member_attendance.Performance_ID = performance.Performance_ID;", "gold_sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID", "source_tables": ["member_attendance", "member", "performance"]}
{"sample_id": 1318, "db_id": "performance_attendance", "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.", "rationale": ["We need to retrieve the names of members and the locations of performances they attended.", "The relevant tables for this query are 'member', 'performance', and 'member_attendance'.", "We will join the 'member' table with the 'member_attendance' table on 'Member_ID' to link members with their attendance records.", "Next, we will join the 'member_attendance' table with the 'performance' table on 'Performance_ID' to get the performance details including location.", "Finally, we will select the 'Name' from the 'member' table and 'Location' from the 'performance' table.", "To meet the requirement of sorting the results, we will order the results by 'member.Name' in ascending order."], "pred_sql": "SELECT member.Name, performance.Location \nFROM member \nJOIN member_attendance ON member.Member_ID = member_attendance.Member_ID \nJOIN performance ON member_attendance.Performance_ID = performance.Performance_ID \nORDER BY member.Name ASC;", "gold_sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC", "source_tables": ["member_attendance", "member", "performance"]}
{"sample_id": 1319, "db_id": "performance_attendance", "question": "Show the dates of performances with attending members whose roles are \"Violin\".", "rationale": ["Identify the relevant tables: performance, member_attendance, and member.", "We need to retrieve the performance dates, so we will select the 'Date' column from the performance table.", "To find the performances attended by members with the role 'Violin', we need to join the member_attendance table with the performance table on Performance_ID.", "Next, we join the member table with the member_attendance table on Member_ID to access the role of the members.", "Finally, we filter the results to include only those members whose role is 'Violin' using a WHERE clause."], "pred_sql": "SELECT performance.Date \nFROM performance \nJOIN member_attendance ON performance.Performance_ID = member_attendance.Performance_ID \nJOIN member ON member_attendance.Member_ID = member.Member_ID \nWHERE member.Role = 'Violin';", "gold_sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  'Violin'", "source_tables": ["member_attendance", "member", "performance"]}
{"sample_id": 1320, "db_id": "performance_attendance", "question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.", "rationale": ["Identify the tables needed: member, performance, and member_attendance.", "We need to retrieve member names and performance dates, so we will select 'Name' from the member table and 'Date' from the performance table.", "To link these tables, we will use the member_attendance table, which connects members to performances.", "We will perform a JOIN operation between member and member_attendance on Member_ID, and between member_attendance and performance on Performance_ID.", "Finally, we need to order the results by the attendance of the performances in descending order, so we will use ORDER BY on the Attendance column from the performance table."], "pred_sql": "SELECT m.Name, p.Date FROM member m JOIN member_attendance ma ON m.Member_ID = ma.Member_ID JOIN performance p ON ma.Performance_ID = p.Performance_ID ORDER BY p.Attendance DESC;", "gold_sql": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC", "source_tables": ["member_attendance", "member", "performance"]}
{"sample_id": 1321, "db_id": "performance_attendance", "question": "List the names of members who did not attend any performance.", "rationale": ["Identify the members from the 'member' table by selecting the 'Name' column.", "To find members who did not attend any performance, we need to check against the 'member_attendance' table.", "We will use a subquery to select all 'Member_ID's from the 'member_attendance' table.", "The main query will select names from the 'member' table where the 'Member_ID' is not in the list of 'Member_ID's from the subquery."], "pred_sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance);", "gold_sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)", "source_tables": ["member_attendance", "member"]}
{"sample_id": 1322, "db_id": "college_2", "question": "Find the buildings which have rooms with capacity more than 50.", "rationale": ["Identify the table that contains information about classrooms, which is the 'classroom' table.", "Determine the relevant column that indicates the capacity of the rooms, which is the 'capacity' column.", "Formulate a query to select distinct buildings from the 'classroom' table where the capacity is greater than 50.", "Since the capacity is stored as text, we need to ensure that we compare it as a string, hence using '50' in quotes."], "pred_sql": "SELECT DISTINCT building FROM classroom WHERE capacity > '50';", "gold_sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "source_tables": ["classroom"]}
{"sample_id": 1323, "db_id": "college_2", "question": "What are the distinct buildings with capacities of greater than 50?", "rationale": ["Identify the table that contains the information about buildings and their capacities, which is the 'classroom' table.", "We need to select distinct buildings, so we will use the SELECT DISTINCT statement.", "The condition specifies that we only want buildings with capacities greater than 50, so we will add a WHERE clause to filter the results based on the 'capacity' column.", "Since 'capacity' is stored as text, we need to compare it as a string, so we will use the condition 'capacity > '50'' in the WHERE clause."], "pred_sql": "SELECT DISTINCT building FROM classroom WHERE capacity > '50';", "gold_sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "source_tables": ["classroom"]}
{"sample_id": 1324, "db_id": "college_2", "question": "Count the number of rooms that are not in the Lamberton building.", "rationale": ["Identify the table that contains room information, which is the 'classroom' table.", "Determine the condition for filtering rooms, which is that the building should not be 'Lamberton'.", "Use the COUNT() function to count the number of rooms that meet the condition.", "Construct the SQL query using the SELECT statement to count the rooms from the 'classroom' table with the specified condition."], "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building != 'Lamberton';", "gold_sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "source_tables": ["classroom"]}
{"sample_id": 1325, "db_id": "college_2", "question": "How many classrooms are not in Lamberton?", "rationale": ["Identify the table that contains information about classrooms, which is the 'classroom' table.", "Determine the condition for classrooms that are not in Lamberton, which is to filter out rows where the 'building' column is equal to 'Lamberton'.", "Use the COUNT() function to count the number of classrooms that meet the condition.", "Construct the SQL query to select the count of classrooms not in Lamberton from the 'classroom' table."], "pred_sql": "SELECT COUNT(*) AS num_classrooms_not_in_lamberton FROM classroom WHERE building != 'Lamberton';", "gold_sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "source_tables": ["classroom"]}
{"sample_id": 1326, "db_id": "college_2", "question": "What is the name and building of the departments whose budget is more than the average budget?", "rationale": ["Identify the relevant table: The 'department' table contains the information about department names, buildings, and budgets.", "Determine the condition: We need to find departments where the budget is greater than the average budget.", "Calculate the average budget: Use a subquery to calculate the average budget from the 'department' table.", "Select the required columns: We need to select 'dept_name' and 'building' from the 'department' table where the budget condition is met."], "pred_sql": "SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "gold_sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "source_tables": ["department"]}
{"sample_id": 1327, "db_id": "college_2", "question": "Give the name and building of the departments with greater than average budget.", "rationale": ["Identify the relevant table: We need to retrieve information from the 'department' table.", "Determine the columns to select: We need the 'dept_name' and 'building' columns.", "Calculate the average budget: We need to find the average budget from the 'department' table using a subquery.", "Filter departments: We want departments where the budget is greater than the average budget calculated in the subquery."], "pred_sql": "SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "gold_sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "source_tables": ["department"]}
{"sample_id": 1328, "db_id": "college_2", "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "rationale": ["Identify the table that contains information about classrooms, which is the 'classroom' table.", "Determine the columns needed for the output: 'room_number' and 'building'.", "Specify the condition for the capacity of the classrooms, which should be between 50 and 100 students.", "Construct the SQL SELECT statement to retrieve the desired columns from the 'classroom' table with the specified condition."], "pred_sql": "SELECT room_number, building FROM classroom WHERE capacity BETWEEN '50' AND '100';", "gold_sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "source_tables": ["classroom"]}
{"sample_id": 1329, "db_id": "college_2", "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?", "rationale": ["Identify the relevant table: The 'classroom' table contains the information about room numbers, buildings, and capacities.", "Determine the columns needed: We need 'room_number' and 'building' from the 'classroom' table.", "Specify the condition for capacity: We want classrooms that can seat between 50 and 100 students, which translates to a condition on the 'capacity' column.", "Construct the SQL SELECT statement: We will select 'room_number' and 'building' from 'classroom' where 'capacity' is between 50 and 100."], "pred_sql": "SELECT room_number, building FROM classroom WHERE capacity BETWEEN '50' AND '100';", "gold_sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "source_tables": ["classroom"]}
{"sample_id": 1330, "db_id": "college_2", "question": "Find the name and building of the department with the highest budget.", "rationale": ["Identify the table that contains the required information: the 'department' table has 'dept_name', 'building', and 'budget'.", "To find the department with the highest budget, we need to select the 'dept_name' and 'building' from the 'department' table.", "We will use a subquery to find the maximum budget from the 'department' table.", "The main query will filter the results to only include the department(s) where the budget matches the maximum budget found in the subquery."], "pred_sql": "SELECT dept_name, building FROM department WHERE budget = (SELECT MAX(budget) FROM department);", "gold_sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "source_tables": ["department"]}
{"sample_id": 1331, "db_id": "college_2", "question": "What is the department name and corresponding building for the department with the greatest budget?", "rationale": ["Identify the relevant table: The 'department' table contains the information needed for department names and buildings.", "Determine the required columns: We need 'dept_name' and 'building' from the 'department' table.", "Find the department with the greatest budget: This requires a subquery to find the maximum budget in the 'department' table.", "Construct the SQL query: Use a SELECT statement to retrieve 'dept_name' and 'building' where the budget matches the maximum budget found in the subquery."], "pred_sql": "SELECT dept_name, building FROM department WHERE budget = (SELECT MAX(budget) FROM department);", "gold_sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "source_tables": ["department"]}
{"sample_id": 1332, "db_id": "college_2", "question": "What is the name of the student who has the highest total credits in the History department.", "rationale": ["Identify the relevant table: The 'student' table contains the information about students, including their names and total credits.", "Filter by department: We need to focus on students in the 'History' department, so we will add a WHERE clause to filter by 'dept_name'.", "Sort by total credits: To find the student with the highest total credits, we will sort the results in descending order based on the 'tot_cred' column.", "Limit the results: Since we only want the student with the highest total credits, we will use LIMIT 1 to get only the top result."], "pred_sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1;", "gold_sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 1333, "db_id": "college_2", "question": "Give the name of the student in the History department with the most credits.", "rationale": ["Identify the relevant table: The 'student' table contains the information about students, including their names and total credits earned.", "Filter the students: We need to filter the students to only include those in the 'History' department. This is done using the condition 'dept_name = 'History' in the WHERE clause.", "Sort the results: To find the student with the most credits, we need to sort the results by the 'tot_cred' column in descending order. This is done using 'ORDER BY tot_cred DESC'.", "Limit the results: Since we only want the student with the most credits, we use 'LIMIT 1' to return only the top result."], "pred_sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1;", "gold_sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 1334, "db_id": "college_2", "question": "How many rooms does the Lamberton building have?", "rationale": ["Identify the table that contains information about classrooms, which is the 'classroom' table.", "Determine the relevant column that specifies the building, which is the 'building' column.", "To find the number of rooms in the Lamberton building, we need to count the entries in the 'classroom' table where the 'building' column matches 'Lamberton'.", "Construct the SQL query using the COUNT function to count the number of rows that meet the specified condition."], "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton';", "gold_sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "source_tables": ["classroom"]}
{"sample_id": 1335, "db_id": "college_2", "question": "Count the number of classrooms in Lamberton.", "rationale": ["Identify the table that contains information about classrooms, which is the 'classroom' table.", "Determine the specific condition needed to filter the classrooms, which is the building name 'Lamberton'.", "Construct the SQL query to count the number of rows in the 'classroom' table that meet the specified condition."], "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton';", "gold_sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "source_tables": ["classroom"]}
{"sample_id": 1336, "db_id": "college_2", "question": "How many students have advisors?", "rationale": ["Identify the relevant table: The 'advisor' table contains the information about students and their advisors.", "Determine the required information: We need to count the number of distinct students who have advisors.", "Use the COUNT function to count the distinct student IDs (s_ID) in the advisor table.", "Construct the SQL query to select the count of distinct student IDs from the advisor table."], "pred_sql": "SELECT COUNT(DISTINCT advisor.s_ID) AS student_count FROM advisor;", "gold_sql": "SELECT count(DISTINCT s_id) FROM advisor", "source_tables": ["advisor"]}
{"sample_id": 1337, "db_id": "college_2", "question": "Count the number of students who have advisors.", "rationale": ["Identify the relevant table: The 'advisor' table contains information about students and their advisors.", "Determine the requirement: We need to count the number of unique students who have advisors.", "Use the COUNT function: To count the unique student IDs (s_ID) in the advisor table, we will use COUNT(DISTINCT advisor.s_ID).", "Construct the SQL query: The final SQL query will select the count from the advisor table."], "pred_sql": "SELECT COUNT(DISTINCT advisor.s_ID) AS student_count FROM advisor;", "gold_sql": "SELECT count(DISTINCT s_id) FROM advisor", "source_tables": ["advisor"]}
{"sample_id": 1338, "db_id": "college_2", "question": "How many departments offer courses?", "rationale": ["Identify the relevant table: The 'course' table contains information about courses and their associated departments.", "Determine the required information: We need to count the number of distinct departments that offer courses.", "Use the COUNT function to count distinct department names in the 'course' table.", "Construct the SQL query to select the count of distinct department names from the 'course' table."], "pred_sql": "SELECT COUNT(DISTINCT dept_name) AS department_count FROM course;", "gold_sql": "SELECT count(DISTINCT dept_name) FROM course", "source_tables": ["course"]}
{"sample_id": 1339, "db_id": "college_2", "question": "Count the number of departments which offer courses.", "rationale": ["Identify the relevant table: The 'course' table contains information about courses and their associated departments.", "Determine the required information: We need to count the number of distinct departments that offer courses.", "Use the COUNT function to count distinct department names in the 'course' table.", "Construct the SQL query to select the count of distinct 'dept_name' from the 'course' table."], "pred_sql": "SELECT COUNT(DISTINCT dept_name) AS department_count FROM course;", "gold_sql": "SELECT count(DISTINCT dept_name) FROM course", "source_tables": ["course"]}
{"sample_id": 1340, "db_id": "college_2", "question": "How many different courses offered by Physics department?", "rationale": ["Identify the table that contains information about courses, which is the 'course' table.", "Determine the relevant column that indicates the department offering the course, which is 'dept_name'.", "Specify the condition to filter courses offered by the Physics department, i.e., 'dept_name = 'Physics''.", "Use the COUNT function to count the number of distinct courses (using 'course_id') offered by the Physics department."], "pred_sql": "SELECT COUNT(DISTINCT course_id) AS num_courses FROM course WHERE dept_name = 'Physics';", "gold_sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "source_tables": ["course"]}
{"sample_id": 1341, "db_id": "college_2", "question": "Count the number of courses in the Physics department.", "rationale": ["Identify the table that contains course information, which is the 'course' table.", "Determine the relevant column to count the courses, which is the 'course_id' column.", "Apply a filter to count only the courses that belong to the Physics department by using the 'dept_name' column.", "Construct the SQL query using the COUNT function to get the total number of courses in the Physics department."], "pred_sql": "SELECT COUNT(*) AS course_count FROM course WHERE dept_name = 'Physics';", "gold_sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "source_tables": ["course"]}
{"sample_id": 1342, "db_id": "college_2", "question": "Find the title of courses that have two prerequisites?", "rationale": ["Identify the table that contains course information, which is the 'course' table.", "Identify the table that contains prerequisite information, which is the 'prereq' table.", "Join the 'course' table with the 'prereq' table on the 'course_id' to link courses with their prerequisites.", "Group the results by 'course_id' to aggregate the prerequisites for each course.", "Use the HAVING clause to filter the grouped results to only include courses that have exactly two prerequisites."], "pred_sql": "SELECT c.title\nFROM course c\nJOIN prereq p ON c.course_id = p.course_id\nGROUP BY c.course_id\nHAVING COUNT(p.prereq_id) = 2;", "gold_sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "source_tables": ["course", "prereq"]}
{"sample_id": 1343, "db_id": "college_2", "question": "What are the titles for courses with two prerequisites?", "rationale": ["Identify the relevant table for courses, which is the 'course' table.", "Identify the relevant table for prerequisites, which is the 'prereq' table.", "Join the 'course' table with the 'prereq' table on the 'course_id' to link courses with their prerequisites.", "Group the results by 'course_id' to aggregate the prerequisites for each course.", "Use the HAVING clause to filter the groups to only those with exactly two prerequisites."], "pred_sql": "SELECT c.title \nFROM course c \nJOIN prereq p ON c.course_id = p.course_id \nGROUP BY c.course_id \nHAVING COUNT(p.prereq_id) = 2;", "gold_sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "source_tables": ["course", "prereq"]}
{"sample_id": 1344, "db_id": "college_2", "question": "Find the title, credit, and department name of courses that have more than one prerequisites?", "rationale": ["Identify the relevant tables: We need to retrieve information from the 'course' table for course details and the 'prereq' table for prerequisite information.", "Select the required columns: We need the course title, credits, and department name, which are in the 'course' table.", "Join the 'course' table with the 'prereq' table on the course_id to link courses with their prerequisites.", "Group the results by course_id to aggregate the prerequisites for each course.", "Use the HAVING clause to filter the groups where the count of prerequisites is greater than one."], "pred_sql": "SELECT c.title, c.credits, c.dept_name \nFROM course c \nJOIN prereq p ON c.course_id = p.course_id \nGROUP BY c.course_id \nHAVING COUNT(p.prereq_id) > 1;", "gold_sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "source_tables": ["course", "prereq"]}
{"sample_id": 1345, "db_id": "college_2", "question": "What is the title, credit value, and department name for courses with more than one prerequisite?", "rationale": ["Identify the relevant tables: We need to retrieve information from the 'course' table for course titles, credits, and department names, and the 'prereq' table to count the number of prerequisites.", "Join the 'course' table with the 'prereq' table on the course_id to link courses with their prerequisites.", "Group the results by course_id to aggregate the prerequisites for each course.", "Use the HAVING clause to filter the grouped results to only include courses that have more than one prerequisite."], "pred_sql": "SELECT c.title, c.credits, c.dept_name \nFROM course c \nJOIN prereq p ON c.course_id = p.course_id \nGROUP BY c.course_id \nHAVING COUNT(p.prereq_id) > 1;", "gold_sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "source_tables": ["course", "prereq"]}
{"sample_id": 1346, "db_id": "college_2", "question": "How many courses that do not have prerequisite?", "rationale": ["Identify the table that contains course information, which is the 'course' table.", "Determine the requirement: we need to count courses that do not have prerequisites.", "To find courses without prerequisites, we can use a subquery to select all course_ids from the 'prereq' table.", "The main query will count all courses in the 'course' table whose course_id is not in the list of course_ids returned by the subquery.", "The final SQL query will use COUNT(*) to get the total number of such courses."], "pred_sql": "SELECT COUNT(*) AS num_courses FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "gold_sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}
{"sample_id": 1347, "db_id": "college_2", "question": "Count the number of courses without prerequisites.", "rationale": ["Identify the table that contains the courses, which is the 'course' table.", "Determine the requirement to count courses without prerequisites, which means we need to find courses whose IDs are not present in the 'prereq' table.", "Use a subquery to select all course_ids from the 'prereq' table.", "Use the NOT IN clause to filter out those course_ids from the main query on the 'course' table.", "Count the remaining courses using COUNT(*) and alias the result as 'course_count'."], "pred_sql": "SELECT COUNT(*) AS course_count FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "gold_sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}
{"sample_id": 1348, "db_id": "college_2", "question": "Find the name of the courses that do not have any prerequisite?", "rationale": ["Identify the table that contains course information, which is the 'course' table.", "Determine the relevant column that contains the course titles, which is 'title'.", "Recognize that we need to filter out courses that have prerequisites, which are listed in the 'prereq' table.", "To find courses without prerequisites, we can use a subquery to select all course_ids from the 'prereq' table.", "The main query will select titles from the 'course' table where the course_id is not in the list of course_ids returned by the subquery."], "pred_sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "gold_sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}
{"sample_id": 1349, "db_id": "college_2", "question": "What are the titles of courses without prerequisites?", "rationale": ["Identify the table that contains course titles, which is the 'course' table.", "Determine the condition for courses without prerequisites, which involves checking the 'prereq' table.", "Use a subquery to find all course_ids that have prerequisites from the 'prereq' table.", "Select the titles from the 'course' table where the course_id is not in the list of course_ids returned by the subquery."], "pred_sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "gold_sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}
{"sample_id": 1350, "db_id": "college_2", "question": "How many different instructors have taught some course?", "rationale": ["Identify the relevant table: The 'teaches' table contains information about instructors teaching courses.", "Determine the required information: We need to count the number of distinct instructors who have taught courses.", "Use the COUNT function: To get the number of different instructors, we will use COUNT(DISTINCT ID) to ensure we only count unique instructor IDs.", "Construct the SQL query: The final SQL query will select the count of distinct instructor IDs from the teaches table."], "pred_sql": "SELECT COUNT(DISTINCT ID) AS different_instructors FROM teaches;", "gold_sql": "SELECT COUNT (DISTINCT id) FROM teaches", "source_tables": ["teaches"]}
{"sample_id": 1351, "db_id": "college_2", "question": "Count the number of distinct instructors who have taught a course.", "rationale": ["Identify the relevant table: The 'teaches' table contains information about instructors and the courses they teach.", "Determine the required information: We need to count the distinct instructors, which is represented by the 'ID' column in the 'teaches' table.", "Use the COUNT function: To count the distinct IDs, we will use the COUNT function with the DISTINCT keyword to ensure we only count unique instructors.", "Construct the SQL query: The final SQL query will select the count of distinct IDs from the 'teaches' table."], "pred_sql": "SELECT COUNT(DISTINCT ID) AS distinct_instructors_count FROM teaches;", "gold_sql": "SELECT COUNT (DISTINCT id) FROM teaches", "source_tables": ["teaches"]}
{"sample_id": 1352, "db_id": "college_2", "question": "Find the total budgets of the Marketing or Finance department.", "rationale": ["Identify the relevant table: The 'department' table contains the budget information.", "Determine the columns needed: We need the 'budget' column to calculate the total budgets.", "Filter the departments: We are interested in the 'Marketing' and 'Finance' departments.", "Use the SUM function: To get the total budget, we will use the SUM function on the 'budget' column.", "Construct the SQL query: Combine the SELECT statement with the SUM function and the WHERE clause to filter the departments."], "pred_sql": "SELECT SUM(budget) AS total_budget FROM department WHERE dept_name IN ('Marketing', 'Finance');", "gold_sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "source_tables": ["department"]}
{"sample_id": 1353, "db_id": "college_2", "question": "What is the sum of budgets of the Marketing and Finance departments?", "rationale": ["Identify the relevant table: The 'department' table contains the budget information.", "Determine the columns needed: We need the 'budget' column to calculate the sum and the 'dept_name' column to filter the departments.", "Specify the departments of interest: We are interested in the 'Marketing' and 'Finance' departments.", "Construct the SQL query: Use the SUM function to calculate the total budget for the specified departments using a WHERE clause to filter by 'dept_name'."], "pred_sql": "SELECT SUM(budget) AS total_budget FROM department WHERE dept_name IN ('Marketing', 'Finance');", "gold_sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "source_tables": ["department"]}
{"sample_id": 1354, "db_id": "college_2", "question": "Find the department name of the instructor whose name contains 'Soisalon'.", "rationale": ["Identify the table that contains the instructor's name, which is the 'instructor' table.", "Determine the column that holds the instructor's name, which is 'name'.", "We need to find the department name associated with the instructor, which is in the 'dept_name' column of the 'instructor' table.", "Use the SQL SELECT statement to retrieve the 'dept_name' from the 'instructor' table.", "Apply a WHERE clause to filter the results to only those instructors whose name contains 'Soisalon', using the LIKE operator with wildcards."], "pred_sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%';", "gold_sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "source_tables": ["instructor"]}
{"sample_id": 1355, "db_id": "college_2", "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?", "rationale": ["Identify the relevant tables: department and instructor.", "Determine the relationship between the tables: instructor belongs to a department, so we can join these tables on dept_name.", "Formulate the SQL query to select the department name from the department table where the instructor's name matches the specified pattern ('Soisalon').", "Use the LIKE operator to filter the instructor names."], "pred_sql": "SELECT department.dept_name FROM department JOIN instructor ON department.dept_name = instructor.dept_name WHERE instructor.name LIKE 'Soisalon';", "gold_sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "source_tables": ["instructor"]}
{"sample_id": 1356, "db_id": "college_2", "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?", "rationale": ["Identify the table that contains the information about rooms and their capacities, which is the 'classroom' table.", "Determine the condition for the building, which is 'Lamberton'.", "Determine the condition for the capacity, which should be less than 50.", "Construct the SQL query to count the number of rooms that meet both conditions."], "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < '50';", "gold_sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "source_tables": ["classroom"]}
{"sample_id": 1357, "db_id": "college_2", "question": "Count the number of rooms in Lamberton with capacity lower than 50.", "rationale": ["Identify the table to query: The 'classroom' table contains information about rooms and their capacities.", "Determine the conditions: We need to filter for rooms in the building 'Lamberton' and with a capacity lower than 50.", "Construct the SQL query: Use the COUNT function to count the number of rows that meet the specified conditions."], "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < '50';", "gold_sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "source_tables": ["classroom"]}
{"sample_id": 1358, "db_id": "college_2", "question": "Find the name and budget of departments whose budgets are more than the average budget.", "rationale": ["Identify the relevant table: The 'department' table contains the information about department names and their budgets.", "Determine the columns needed: We need 'dept_name' and 'budget' from the 'department' table.", "Calculate the average budget: Use a subquery to calculate the average budget from the 'department' table.", "Filter the results: Use a WHERE clause to filter departments whose budget is greater than the average budget calculated in the subquery."], "pred_sql": "SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "gold_sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "source_tables": ["department"]}
{"sample_id": 1359, "db_id": "college_2", "question": "What are the names and budgets of departments with budgets greater than the average?", "rationale": ["Identify the relevant table: The 'department' table contains the information about department names and budgets.", "Determine the columns needed: We need 'dept_name' and 'budget' from the 'department' table.", "Calculate the average budget: Use a subquery to calculate the average budget from the 'department' table.", "Filter the results: Use a WHERE clause to filter departments with budgets greater than the calculated average."], "pred_sql": "SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department);", "gold_sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "source_tables": ["department"]}
{"sample_id": 1360, "db_id": "college_2", "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?", "rationale": ["Identify the table that contains the instructor information, which is the 'instructor' table.", "We need to filter the instructors based on the department, specifically the 'Statistics' department.", "To find the instructor with the lowest salary, we will order the results by the 'salary' column in ascending order.", "Finally, we will limit the results to only one record to get the instructor with the lowest salary."], "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary ASC LIMIT 1;", "gold_sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "source_tables": ["instructor"]}
{"sample_id": 1361, "db_id": "college_2", "question": "Give the name of the lowest earning instructor in the Statistics department.", "rationale": ["Identify the table that contains instructor information, which is the 'instructor' table.", "We need to filter the instructors based on the department, specifically the 'Statistics' department. This requires a WHERE clause to specify the condition 'dept_name = 'Statistics'.", "To find the lowest earning instructor, we need to sort the results by the 'salary' column in ascending order. This is done using the ORDER BY clause with 'salary ASC'.", "Since we only want the lowest earning instructor, we will limit the results to 1 using the LIMIT clause."], "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary ASC LIMIT 1;", "gold_sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "source_tables": ["instructor"]}
{"sample_id": 1362, "db_id": "college_2", "question": "Find the title of course that is provided by both Statistics and Psychology departments.", "rationale": ["Identify the relevant table: The 'course' table contains the course titles and their associated departments.", "Determine the departments of interest: We are looking for courses offered by both the 'Statistics' and 'Psychology' departments.", "Use a SQL query to select the course titles from the 'course' table where the department name is either 'Statistics' or 'Psychology'.", "To ensure that we only get courses offered by both departments, we can group the results by course title and use the HAVING clause to count distinct department names, ensuring it equals 2."], "pred_sql": "SELECT c.title \nFROM course c \nWHERE c.dept_name IN ('Statistics', 'Psychology') \nGROUP BY c.title \nHAVING COUNT(DISTINCT c.dept_name) = 2;", "gold_sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "source_tables": ["course"]}
{"sample_id": 1363, "db_id": "college_2", "question": "What is the title of a course that is listed in both the Statistics and Psychology departments?", "rationale": ["Identify the relevant table: The 'course' table contains the course titles and their associated departments.", "Determine the departments of interest: We are looking for courses in both the 'Statistics' and 'Psychology' departments.", "Use a SQL query to select the 'title' from the 'course' table where the 'dept_name' is either 'Statistics' or 'Psychology'.", "To ensure that the course is listed in both departments, we can group the results by 'title' and use the HAVING clause to count distinct department names, ensuring it equals 2."], "pred_sql": "SELECT title FROM course WHERE dept_name IN ('Statistics', 'Psychology') GROUP BY title HAVING COUNT(DISTINCT dept_name) = 2;", "gold_sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "source_tables": ["course"]}
{"sample_id": 1364, "db_id": "college_2", "question": "Find the title of course that is provided by Statistics but not Psychology departments.", "rationale": ["Identify the relevant table: The 'course' table contains the course titles and their associated departments.", "Determine the conditions: We need to find courses from the 'Statistics' department and exclude those from the 'Psychology' department.", "Construct the SQL query: Use a SELECT statement to retrieve the 'title' from the 'course' table where 'dept_name' is 'Statistics' and not 'Psychology'."], "pred_sql": "SELECT title FROM course WHERE dept_name = 'Statistics' AND dept_name != 'Psychology';", "gold_sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "source_tables": ["course"]}
{"sample_id": 1365, "db_id": "college_2", "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?", "rationale": ["Identify the relevant table: The 'course' table contains the course titles and their associated departments.", "Filter for courses in the Statistics department: Use a WHERE clause to specify that dept_name must be 'Statistics'.", "Exclude courses from the Psychology department: Add an additional condition to ensure that dept_name is not 'Psychology'.", "Combine the conditions using AND to ensure both criteria are met."], "pred_sql": "SELECT title FROM course WHERE dept_name = 'Statistics' AND dept_name != 'Psychology';", "gold_sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "source_tables": ["course"]}
{"sample_id": 1366, "db_id": "college_2", "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.", "rationale": ["Identify the instructors who taught classes in Fall 2009. This requires filtering the 'teaches' table for records where semester is 'Fall' and year is '2009'.", "Next, we need to find the instructors who taught classes in Spring 2010. This is done by filtering the 'teaches' table for records where semester is 'Spring' and year is '2010'.", "To find instructors who taught in Fall 2009 but not in Spring 2010, we can use a subquery. The subquery will select the IDs of instructors who taught in Spring 2010.", "The main query will select distinct IDs from the first query (Fall 2009) and exclude any IDs that appear in the results of the subquery (Spring 2010).", "The final SQL query combines these elements to return the desired result."], "pred_sql": "SELECT DISTINCT t1.ID\nFROM teaches t1\nWHERE t1.semester = 'Fall' AND t1.year = '2009'\nAND t1.ID NOT IN (\n    SELECT t2.ID\n    FROM teaches t2\n    WHERE t2.semester = 'Spring' AND t2.year = '2010'\n);", "gold_sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}
{"sample_id": 1367, "db_id": "college_2", "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?", "rationale": ["Identify the instructors who taught in the Fall of 2009 by filtering the teaches table for records where semester is 'Fall' and year is '2009'.", "Use a subquery to find the IDs of instructors who taught in the Spring of 2010 by filtering the teaches table for records where semester is 'Spring' and year is '2010'.", "Use the NOT IN clause to exclude the IDs from the first query that are present in the results of the subquery, ensuring we only get instructors who taught in Fall 2009 but not in Spring 2010.", "Select distinct IDs to avoid duplicates in the final result."], "pred_sql": "SELECT DISTINCT teaches.ID\nFROM teaches\nWHERE teaches.semester = 'Fall' AND teaches.year = '2009'\nAND teaches.ID NOT IN (\n    SELECT teaches.ID\n    FROM teaches\n    WHERE teaches.semester = 'Spring' AND teaches.year = '2010'\n);", "gold_sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}
{"sample_id": 1368, "db_id": "college_2", "question": "Find the name of students who took any class in the years of 2009 and 2010.", "rationale": ["Identify the relevant tables: We need to retrieve student names, so we will use the 'student' table and the 'takes' table to find out which students took classes.", "Determine the relationship: The 'takes' table contains the student IDs and the years in which they took classes, which we can join with the 'student' table on the student ID.", "Specify the conditions: We want to filter the results to include only those records where the year is either 2009 or 2010.", "Select the required fields: We need to select the 'name' field from the 'student' table and ensure that we only get distinct names to avoid duplicates."], "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID WHERE takes.year IN ('2009', '2010');", "gold_sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "source_tables": ["student", "takes"]}
{"sample_id": 1369, "db_id": "college_2", "question": "What are the names of the students who took classes in 2009 or 2010?", "rationale": ["Identify the relevant tables: We need to retrieve student names, so we will use the 'student' table and the 'takes' table to find out which students took classes in the specified years.", "Determine the join condition: The 'takes' table has a foreign key 'ID' that references the 'student' table's 'ID'. We will join these two tables on this key.", "Specify the filtering criteria: We need to filter the results to include only those records where the 'year' in the 'takes' table is either '2009' or '2010'.", "Select the distinct student names: We will select the 'name' column from the 'student' table and use DISTINCT to ensure that we do not have duplicate names in the result."], "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID WHERE takes.year IN ('2009', '2010');", "gold_sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "source_tables": ["student", "takes"]}
{"sample_id": 1370, "db_id": "college_2", "question": "Find the names of the top 3 departments that provide the largest amount of courses?", "rationale": ["Identify the relevant table: The 'course' table contains information about courses and their associated departments.", "Group the results by department name: Use GROUP BY to aggregate the number of courses per department.", "Count the number of courses for each department: Use COUNT(course_id) to get the total number of courses offered by each department.", "Order the results: Use ORDER BY COUNT(course_id) DESC to sort the departments by the number of courses in descending order.", "Limit the results to the top 3 departments: Use LIMIT 3 to restrict the output to the top 3 departments with the most courses."], "pred_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(course_id) DESC LIMIT 3;", "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["course"]}
{"sample_id": 1371, "db_id": "college_2", "question": "What are the names of the 3 departments with the most courses?", "rationale": ["Identify the relevant table: The 'course' table contains information about courses and their associated departments.", "Group the results by department name: Use GROUP BY to aggregate the number of courses per department.", "Count the number of courses for each department: Use COUNT(course_id) to get the total number of courses offered by each department.", "Order the results: Use ORDER BY COUNT(course_id) DESC to sort the departments by the number of courses in descending order.", "Limit the results to the top 3 departments: Use LIMIT 3 to restrict the output to the top three departments with the most courses."], "pred_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(course_id) DESC LIMIT 3;", "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["course"]}
{"sample_id": 1372, "db_id": "college_2", "question": "Find the name of the department that offers the highest total credits?", "rationale": ["Identify the relevant table: The 'course' table contains information about courses and their associated departments.", "We need to group the results by department name to calculate the total credits offered by each department.", "Use the SUM function to calculate the total credits for each department.", "Order the results in descending order based on the total credits to find the department with the highest total credits.", "Limit the results to 1 to get only the department with the highest total credits."], "pred_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1;", "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "source_tables": ["course"]}
{"sample_id": 1373, "db_id": "college_2", "question": "What is the name of the department with the most credits?", "rationale": ["Identify the relevant table: The 'course' table contains information about courses and their associated departments.", "Determine the required information: We need the department name and the total credits offered by each department.", "Group the results by department name to aggregate the credits: Use GROUP BY on 'dept_name'.", "Calculate the total credits for each department: Use SUM(credits) to get the total credits per department.", "Order the results to find the department with the most credits: Use ORDER BY SUM(credits) DESC to sort in descending order.", "Limit the results to the top entry: Use LIMIT 1 to get only the department with the highest total credits."], "pred_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1;", "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "source_tables": ["course"]}
{"sample_id": 1374, "db_id": "college_2", "question": "List the names of all courses ordered by their titles and credits.", "rationale": ["Identify the table that contains the course information, which is the 'course' table.", "Determine the columns needed for the output, which are 'title' and 'credits'.", "Specify that we want to select the 'title' of the courses.", "Add an ORDER BY clause to sort the results first by 'title' and then by 'credits'."], "pred_sql": "SELECT title FROM course ORDER BY title, credits;", "gold_sql": "SELECT title FROM course ORDER BY title ,  credits", "source_tables": ["course"]}
{"sample_id": 1375, "db_id": "college_2", "question": "Given the titles of all courses, in order of titles and credits.", "rationale": ["Identify the table that contains the course titles and credits, which is the 'course' table.", "Select the columns 'title' and 'credits' from the 'course' table.", "Order the results by 'title' and then by 'credits' in ascending order."], "pred_sql": "SELECT title, credits FROM course ORDER BY title, credits;", "gold_sql": "SELECT title FROM course ORDER BY title ,  credits", "source_tables": ["course"]}
{"sample_id": 1376, "db_id": "college_2", "question": "Which department has the lowest budget?", "rationale": ["Identify the table that contains budget information, which is the 'department' table.", "Select the 'dept_name' column to get the name of the department.", "Order the results by the 'budget' column in ascending order to find the department with the lowest budget.", "Limit the results to 1 to get only the department with the lowest budget."], "pred_sql": "SELECT dept_name FROM department ORDER BY budget ASC LIMIT 1;", "gold_sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "source_tables": ["department"]}
{"sample_id": 1377, "db_id": "college_2", "question": "Give the name of the department with the lowest budget.", "rationale": ["Identify the table that contains the budget information, which is the 'department' table.", "Select the 'dept_name' column to get the name of the department.", "Order the results by the 'budget' column in ascending order to find the department with the lowest budget.", "Limit the results to 1 to get only the department with the lowest budget."], "pred_sql": "SELECT dept_name FROM department ORDER BY budget ASC LIMIT 1;", "gold_sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "source_tables": ["department"]}
{"sample_id": 1378, "db_id": "college_2", "question": "List the names and buildings of all departments sorted by the budget from large to small.", "rationale": ["Identify the table that contains the required information: the 'department' table has 'dept_name', 'building', and 'budget'.", "Select the columns needed: 'dept_name' and 'building'.", "Sort the results by 'budget' in descending order to get the departments with the largest budgets first."], "pred_sql": "SELECT dept_name, building FROM department ORDER BY budget DESC;", "gold_sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "source_tables": ["department"]}
{"sample_id": 1379, "db_id": "college_2", "question": "What are the names and buildings of the deparments, sorted by budget descending?", "rationale": ["Identify the relevant table: The 'department' table contains the information needed for this query.", "Select the required columns: We need the 'dept_name' and 'building' columns from the 'department' table.", "Sort the results: The results should be sorted by the 'budget' column in descending order.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT dept_name, building FROM department ORDER BY budget DESC;", "gold_sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "source_tables": ["department"]}
{"sample_id": 1380, "db_id": "college_2", "question": "Who is the instructor with the highest salary?", "rationale": ["Identify the table that contains the information about instructors and their salaries, which is the 'instructor' table.", "To find the instructor with the highest salary, we need to select the 'name' column from the 'instructor' table.", "We need to determine the maximum salary, which can be done using the MAX() function on the 'salary' column.", "To get the instructor's name who has this maximum salary, we will use a subquery that selects the maximum salary from the 'instructor' table."], "pred_sql": "SELECT name FROM instructor WHERE salary = (SELECT MAX(salary) FROM instructor);", "gold_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "source_tables": ["instructor"]}
{"sample_id": 1381, "db_id": "college_2", "question": "Give the name of the highest paid instructor.", "rationale": ["Identify the table that contains the information about instructors, which is the 'instructor' table.", "Determine the column that contains the names of the instructors, which is 'name'.", "Identify the column that contains the salary information, which is 'salary'.", "To find the highest paid instructor, we need to sort the results by the 'salary' column in descending order.", "Limit the results to only one entry to get the highest paid instructor."], "pred_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1;", "gold_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "source_tables": ["instructor"]}
{"sample_id": 1382, "db_id": "college_2", "question": "List the information of all instructors ordered by their salary in ascending order.", "rationale": ["Identify the table that contains the information of instructors, which is the 'instructor' table.", "Determine the columns needed for the output. Since the request is to list all information, we will select all columns using '*'.", "Specify the ordering requirement, which is to order the results by the 'salary' column in ascending order.", "Construct the SQL query using the SELECT statement, specifying the table, the columns, and the ORDER BY clause."], "pred_sql": "SELECT * FROM instructor ORDER BY salary ASC;", "gold_sql": "SELECT * FROM instructor ORDER BY salary", "source_tables": ["instructor"]}
{"sample_id": 1383, "db_id": "college_2", "question": "Give all information regarding instructors, in order of salary from least to greatest.", "rationale": ["Identify the table that contains information about instructors, which is the 'instructor' table.", "Determine the requirement to retrieve all information regarding instructors, which means selecting all columns from the 'instructor' table.", "Recognize the need to order the results by salary from least to greatest, which requires using the ORDER BY clause with 'salary' in ascending order."], "pred_sql": "SELECT * FROM instructor ORDER BY salary ASC;", "gold_sql": "SELECT * FROM instructor ORDER BY salary", "source_tables": ["instructor"]}
{"sample_id": 1384, "db_id": "college_2", "question": "Find the name of the students and their department names sorted by their total credits in ascending order.", "rationale": ["Identify the relevant table: The 'student' table contains the information about students and their departments.", "Select the required columns: We need the 'name' and 'dept_name' columns from the 'student' table.", "Sort the results: We need to sort the results by 'tot_cred' in ascending order, which is also a column in the 'student' table.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT name, dept_name FROM student ORDER BY tot_cred ASC;", "gold_sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "source_tables": ["student"]}
{"sample_id": 1385, "db_id": "college_2", "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "rationale": ["Identify the relevant table: The 'student' table contains the names and departments of students.", "Select the required columns: We need 'name' and 'dept_name' from the 'student' table.", "Order the results: We need to order the results by 'tot_cred' in ascending order to show students from least to greatest credits earned."], "pred_sql": "SELECT name, dept_name FROM student ORDER BY tot_cred ASC;", "gold_sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "source_tables": ["student"]}
{"sample_id": 1386, "db_id": "college_2", "question": "list in alphabetic order all course names and their instructors' names in year 2008.", "rationale": ["Identify the tables needed: course, teaches, and instructor.", "We need to retrieve course names and instructor names, so we will select 'course.title' and 'instructor.name'.", "To link courses with their instructors, we will join the 'course' table with the 'teaches' table on 'course.course_id' and 'teaches.course_id'.", "Next, we will join the 'teaches' table with the 'instructor' table on 'teaches.ID' and 'instructor.ID'.", "We need to filter the results to only include records from the year 2008, so we will add a WHERE clause for 'teaches.year = '2008'.", "Finally, we will order the results alphabetically by course name using ORDER BY 'course.title'."], "pred_sql": "SELECT course.title, instructor.name \nFROM course \nJOIN teaches ON course.course_id = teaches.course_id \nJOIN instructor ON teaches.ID = instructor.ID \nWHERE teaches.year = '2008' \nORDER BY course.title;", "gold_sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "source_tables": ["course", "teaches", "instructor"]}
{"sample_id": 1387, "db_id": "college_2", "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "rationale": ["Identify the tables needed: course, teaches, and instructor.", "We need to select the course title and the instructor's name, so we will select 'course.title' and 'instructor.name'.", "To link the courses with their instructors, we will use the 'teaches' table which connects 'course' and 'instructor'.", "The condition specifies that we only want courses from the year 2008, so we will add a WHERE clause for 'teaches.year = '2008'.", "Finally, we need to order the results alphabetically by the course title, so we will add an ORDER BY clause for 'course.title ASC'."], "pred_sql": "SELECT course.title, instructor.name \nFROM course \nJOIN teaches ON course.course_id = teaches.course_id \nJOIN instructor ON teaches.ID = instructor.ID \nWHERE teaches.year = '2008' \nORDER BY course.title ASC;", "gold_sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "source_tables": ["course", "teaches", "instructor"]}
{"sample_id": 1388, "db_id": "college_2", "question": "Find the name of instructors who are advising more than one student.", "rationale": ["We need to find instructors who are advising students, so we will join the 'instructor' table with the 'advisor' table on the instructor's ID.", "We will group the results by the instructor's ID to count how many students each instructor is advising.", "We will use the HAVING clause to filter the groups to only include those instructors who are advising more than one student."], "pred_sql": "SELECT instructor.name\nFROM instructor\nJOIN advisor ON instructor.ID = advisor.i_ID\nGROUP BY instructor.ID\nHAVING COUNT(advisor.s_ID) > 1;", "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "source_tables": ["instructor", "advisor"]}
{"sample_id": 1389, "db_id": "college_2", "question": "What are the names of instructors who advise more than one student?", "rationale": ["Identify the relevant tables: We need the 'instructor' table to get the names of instructors and the 'advisor' table to find out which instructors advise students.", "Join the 'instructor' table with the 'advisor' table on the instructor's ID to link instructors with their advised students.", "Group the results by instructor ID to count how many students each instructor advises.", "Use the HAVING clause to filter the groups to only include those instructors who advise more than one student."], "pred_sql": "SELECT instructor.name\nFROM instructor\nJOIN advisor ON instructor.ID = advisor.i_ID\nGROUP BY instructor.ID\nHAVING COUNT(advisor.s_ID) > 1;", "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "source_tables": ["instructor", "advisor"]}
{"sample_id": 1390, "db_id": "college_2", "question": "Find the name of the students who have more than one advisor?", "rationale": ["Identify the relevant tables: We need to find student names and their advisors, so we will use the 'student' and 'advisor' tables.", "Join the 'student' table with the 'advisor' table on the student ID: This will allow us to associate each student with their advisors.", "Group the results by student ID: This is necessary to count the number of advisors each student has.", "Use the HAVING clause to filter groups: We want only those students who have more than one advisor, so we will count the advisors and filter for counts greater than 1."], "pred_sql": "SELECT s.name\nFROM student s\nJOIN advisor a ON s.ID = a.s_ID\nGROUP BY s.ID\nHAVING COUNT(a.i_ID) > 1;", "gold_sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "source_tables": ["advisor", "student"]}
{"sample_id": 1391, "db_id": "college_2", "question": "What are the names of students who have more than one advisor?", "rationale": ["Identify the relevant tables: We need to look at the 'student' table for student names and the 'advisor' table to find the relationship between students and their advisors.", "Join the 'student' table with the 'advisor' table on the student ID to associate students with their advisors.", "Group the results by student ID to aggregate the number of advisors each student has.", "Use the HAVING clause to filter the groups to only include students who have more than one advisor."], "pred_sql": "SELECT student.name\nFROM student\nJOIN advisor ON student.ID = advisor.s_ID\nGROUP BY student.ID\nHAVING COUNT(advisor.i_ID) > 1;", "gold_sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "source_tables": ["advisor", "student"]}
{"sample_id": 1392, "db_id": "college_2", "question": "Find the number of rooms with more than 50 capacity for each building.", "rationale": ["Identify the table that contains room capacity information, which is the 'classroom' table.", "We need to filter the rooms based on their capacity, specifically those with a capacity greater than 50.", "To count the number of rooms per building, we will use the COUNT() function and group the results by the 'building' column.", "The final SQL query will select the 'building' and the count of rooms that meet the capacity condition, grouping the results accordingly."], "pred_sql": "SELECT building, COUNT(*) AS room_count FROM classroom WHERE capacity > '50' GROUP BY building;", "gold_sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "source_tables": ["classroom"]}
{"sample_id": 1393, "db_id": "college_2", "question": "How many rooms in each building have a capacity of over 50?", "rationale": ["Identify the relevant table: The 'classroom' table contains information about rooms, including their building and capacity.", "Determine the condition: We need to filter rooms with a capacity greater than 50.", "Count the number of rooms: We will use the COUNT() function to count the number of rooms that meet the condition.", "Group the results: We will group the results by the 'building' column to get the count of rooms for each building."], "pred_sql": "SELECT building, COUNT(*) AS room_count FROM classroom WHERE capacity > '50' GROUP BY building;", "gold_sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "source_tables": ["classroom"]}
{"sample_id": 1394, "db_id": "college_2", "question": "Find the maximum and average capacity among rooms in each building.", "rationale": ["Identify the table that contains the relevant data: the 'classroom' table, which has 'building' and 'capacity' columns.", "To find the maximum and average capacity, we will use the SQL aggregate functions MAX() and AVG().", "We need to group the results by 'building' to get the maximum and average capacity for each building.", "Construct the SQL query to select the building, maximum capacity, and average capacity, using the appropriate aggregate functions and GROUP BY clause."], "pred_sql": "SELECT building, MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM classroom GROUP BY building;", "gold_sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "source_tables": ["classroom"]}
{"sample_id": 1395, "db_id": "college_2", "question": "What are the greatest and average capacity for rooms in each building?", "rationale": ["Identify the relevant table: The 'classroom' table contains the 'building' and 'capacity' columns needed for this query.", "Determine the required calculations: We need to find both the maximum (greatest) and average capacity of rooms in each building.", "Use the SQL aggregate functions: Use MAX() to find the greatest capacity and AVG() to find the average capacity.", "Group the results by building: Use GROUP BY to ensure that the calculations are done for each building separately.", "Construct the SQL query: Combine the SELECT statement with the aggregate functions and GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT building, MAX(capacity) AS greatest_capacity, AVG(capacity) AS average_capacity FROM classroom GROUP BY building;", "gold_sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "source_tables": ["classroom"]}
{"sample_id": 1396, "db_id": "college_2", "question": "Find the title of the course that is offered by more than one department.", "rationale": ["Identify the relevant tables: We need to look at the 'course' table to get the course titles and the 'department' table to check which department offers each course.", "Join the 'course' table with the 'department' table on the 'dept_name' column to associate each course with its respective department.", "Group the results by the course title to aggregate the data for each course.", "Use the HAVING clause to filter the grouped results to only include courses that are offered by more than one department, which is indicated by counting distinct department names."], "pred_sql": "SELECT DISTINCT c.title \nFROM course c \nJOIN department d ON c.dept_name = d.dept_name \nGROUP BY c.title \nHAVING COUNT(DISTINCT d.dept_name) > 1;", "gold_sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "source_tables": ["course"]}
{"sample_id": 1397, "db_id": "college_2", "question": "What are the titles of courses that are offered in more than one department?", "rationale": ["Identify the relevant tables: We need to look at the 'course' and 'department' tables to find the titles of courses offered in more than one department.", "Join the tables: We will join the 'course' table with the 'department' table on the 'dept_name' column to associate each course with its respective department.", "Group the results: We will group the results by the course title to aggregate the data for each course.", "Count distinct departments: We will use the COUNT function to count the distinct departments for each course title.", "Filter the results: We will use the HAVING clause to filter the grouped results to only include courses that are offered in more than one department (i.e., COUNT(DISTINCT d.dept_name) > 1).", "Select the course titles: Finally, we will select the distinct titles of the courses that meet the criteria."], "pred_sql": "SELECT DISTINCT c.title\nFROM course c\nJOIN department d ON c.dept_name = d.dept_name\nGROUP BY c.title\nHAVING COUNT(DISTINCT d.dept_name) > 1;", "gold_sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "source_tables": ["course"]}
{"sample_id": 1398, "db_id": "college_2", "question": "Find the total credits of courses provided by different department.", "rationale": ["Identify the relevant table: The 'course' table contains information about courses and their credits.", "Determine the required information: We need to find the total credits of courses provided by different departments.", "Use the SUM function: To calculate the total credits, we will use the SUM function on the 'credits' column.", "Group by department: To get the total credits for each department, we will group the results by the 'dept_name' column.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT SUM(c.credits) AS total_credits, c.dept_name FROM course c GROUP BY c.dept_name;", "gold_sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "source_tables": ["course"]}
{"sample_id": 1399, "db_id": "college_2", "question": "How many total credits are offered by each department?", "rationale": ["Identify the relevant table: The 'course' table contains information about courses and their credits.", "Determine the required information: We need to sum the credits for each department.", "Group the results by department: Use GROUP BY to aggregate the credits by 'dept_name'.", "Construct the SQL query: Use SELECT to choose 'dept_name' and the SUM of 'credits', and specify the grouping."], "pred_sql": "SELECT dept_name, SUM(credits) AS total_credits FROM course GROUP BY dept_name;", "gold_sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "source_tables": ["course"]}
{"sample_id": 1400, "db_id": "college_2", "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "rationale": ["Identify the requirement to find the minimum salary for departments with an average salary above the overall average salary of instructors.", "To achieve this, we need to first calculate the average salary of all instructors using a subquery: SELECT AVG(salary) FROM instructor.", "Next, we need to find departments where the average salary of instructors is greater than this overall average. This requires grouping by department and using the HAVING clause: SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (overall average).", "Finally, we need to find the minimum salary from the instructors in these departments. This is done by selecting the minimum salary from the instructor table where the department is in the list of departments identified in the previous step."], "pred_sql": "SELECT MIN(i.salary) AS min_salary\nFROM instructor i\nWHERE i.dept_name IN (\n    SELECT dept_name\n    FROM instructor\n    GROUP BY dept_name\n    HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)\n);", "gold_sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "source_tables": ["instructor"]}
{"sample_id": 1401, "db_id": "college_2", "question": "What is the lowest salary in departments with average salary greater than the overall average.", "rationale": ["Identify the requirement to find the lowest salary in departments with an average salary greater than the overall average.", "To achieve this, first, we need to calculate the overall average salary from the instructor table.", "Next, we need to find departments where the average salary of instructors is greater than this overall average.", "We can do this by grouping the instructors by department and using the HAVING clause to filter those departments based on the average salary condition.", "Finally, we will select the minimum salary from the instructor table for those departments that meet the criteria."], "pred_sql": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor));", "gold_sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "source_tables": ["instructor"]}
{"sample_id": 1402, "db_id": "college_2", "question": "Find the number of courses provided in each semester and year.", "rationale": ["Identify the relevant table: The 'section' table contains information about courses offered in different semesters and years.", "Determine the required information: We need to count the number of courses for each semester and year.", "Use the COUNT() function to count the 'course_id' for each group of semester and year.", "Group the results by 'semester' and 'year' to get the count for each combination."], "pred_sql": "SELECT semester, year, COUNT(course_id) AS number_of_courses FROM section GROUP BY semester, year;", "gold_sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "source_tables": ["section"]}
{"sample_id": 1403, "db_id": "college_2", "question": "How many courses are provided in each semester and year?", "rationale": ["Identify the relevant table: The 'section' table contains information about courses offered in different semesters and years.", "Determine the required information: We need to count the number of courses (identified by 'course_id') for each combination of semester and year.", "Use the COUNT() function to count the number of courses for each semester and year.", "Group the results by 'semester' and 'year' to get the count for each unique combination."], "pred_sql": "SELECT semester, year, COUNT(course_id) AS course_count FROM section GROUP BY semester, year;", "gold_sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "source_tables": ["section"]}
{"sample_id": 1404, "db_id": "college_2", "question": "Find the year which offers the largest number of courses.", "rationale": ["Identify the relevant table: The 'section' table contains information about courses offered in different years.", "Count the number of courses offered per year: Use COUNT(course_id) to count the courses for each year.", "Group the results by year: Use GROUP BY year to aggregate the counts for each year.", "Order the results to find the year with the largest number of courses: Use ORDER BY course_count DESC to sort the results in descending order of course count.", "Limit the results to the top entry: Use LIMIT 1 to get only the year with the largest number of courses."], "pred_sql": "SELECT year, COUNT(course_id) AS course_count\nFROM section\nGROUP BY year\nORDER BY course_count DESC\nLIMIT 1;", "gold_sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["section"]}
{"sample_id": 1405, "db_id": "college_2", "question": "Which year had the greatest number of courses?", "rationale": ["Identify the relevant table: The 'section' table contains information about courses offered in different years.", "Determine the columns needed: We need the 'year' column to group the data and 'course_id' to count the number of courses.", "Use COUNT() function: This will allow us to count the number of courses for each year.", "Group the results by year: This is done using GROUP BY clause to aggregate the course counts for each year.", "Order the results: We will order the results in descending order based on the course count to find the year with the greatest number of courses.", "Limit the results: We will use LIMIT 1 to get only the year with the highest count."], "pred_sql": "SELECT year, COUNT(course_id) AS course_count FROM section GROUP BY year ORDER BY course_count DESC LIMIT 1;", "gold_sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["section"]}
{"sample_id": 1406, "db_id": "college_2", "question": "Find the year and semester when offers the largest number of courses.", "rationale": ["Identify the relevant table: The 'section' table contains information about courses offered, including the year and semester.", "Select the columns needed: We need 'year' and 'semester' to identify when courses are offered, and we will count the number of courses using 'course_id'.", "Group the results: Use GROUP BY to aggregate the data by 'year' and 'semester' so we can count the number of courses for each combination.", "Count the courses: Use COUNT(course_id) to get the number of courses offered in each year and semester combination.", "Order the results: Use ORDER BY to sort the results by the count of courses in descending order, so the combination with the largest number of courses comes first.", "Limit the results: Use LIMIT 1 to get only the year and semester with the largest number of courses."], "pred_sql": "SELECT year, semester, COUNT(course_id) AS course_count\nFROM section\nGROUP BY year, semester\nORDER BY course_count DESC\nLIMIT 1;", "gold_sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["section"]}
{"sample_id": 1407, "db_id": "college_2", "question": "What is the year and semester with the most courses?", "rationale": ["Identify the relevant table: The 'section' table contains information about courses, including the year and semester they are offered.", "Select the columns needed: We need the 'year' and 'semester' columns, and we also want to count the number of courses offered in each year and semester combination.", "Use the COUNT function to count the number of courses (course_id) for each year and semester.", "Group the results by year and semester to aggregate the course counts.", "Order the results in descending order based on the course count to find the year and semester with the most courses.", "Limit the results to 1 to get only the top result."], "pred_sql": "SELECT year, semester, COUNT(course_id) AS course_count\nFROM section\nGROUP BY year, semester\nORDER BY course_count DESC\nLIMIT 1;", "gold_sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["section"]}
{"sample_id": 1408, "db_id": "college_2", "question": "Find the name of department has the highest amount of students?", "rationale": ["Identify the relevant tables: We need to find the department with the highest number of students, so we will use the 'student' and 'department' tables.", "Count the number of students in each department: We can use the COUNT function to count the number of students (using the 'ID' from the 'student' table) grouped by 'dept_name'.", "Order the results by the count of students in descending order: This will allow us to see which department has the most students at the top of the list.", "Limit the results to 1: We only need the department with the highest count, so we will limit the results to 1.", "Select the department name: Finally, we will select the 'dept_name' from the 'department' table that corresponds to the department with the highest student count."], "pred_sql": "SELECT dept_name FROM department WHERE dept_name = (SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(ID) DESC LIMIT 1);", "gold_sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 1409, "db_id": "college_2", "question": "What is the name of the deparment with the highest enrollment?", "rationale": ["Identify the relevant tables: We need to find the department with the highest enrollment, which involves the 'department' and 'student' tables, as well as the 'takes' table to count enrollments.", "Count the number of students enrolled in each department: We can achieve this by joining the 'student' table with the 'takes' table on the student ID and grouping by department name to get the count of enrollments for each department.", "Select the department name and the count of enrollments: We will create a subquery that selects the department name and the count of students (enrollment count) for each department.", "Join the subquery with the 'department' table: This allows us to get the department names along with their enrollment counts.", "Order the results by enrollment count in descending order: This will help us identify the department with the highest enrollment.", "Limit the results to 1: Since we only want the department with the highest enrollment, we will limit the results to 1."], "pred_sql": "SELECT d.dept_name\nFROM department d\nJOIN (SELECT s.dept_name, COUNT(t.ID) AS enrollment_count\n      FROM student s\n      JOIN takes t ON s.ID = t.ID\n      GROUP BY s.dept_name) AS enrollments\nON d.dept_name = enrollments.dept_name\nORDER BY enrollment_count DESC\nLIMIT 1;", "gold_sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 1410, "db_id": "college_2", "question": "Find the total number of students in each department.", "rationale": ["Identify the relevant table: The 'student' table contains information about students and their associated departments.", "Determine the required information: We need the total number of students in each department, which involves counting the number of student IDs grouped by department name.", "Construct the SQL query: Use the SELECT statement to choose the department name and count of student IDs, and use GROUP BY to aggregate the results by department."], "pred_sql": "SELECT dept_name, COUNT(ID) AS total_students FROM student GROUP BY dept_name;", "gold_sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "source_tables": ["student"]}
{"sample_id": 1411, "db_id": "college_2", "question": "How many students are in each department?", "rationale": ["Identify the relevant table: The 'student' table contains information about students and their associated departments.", "Determine the required information: We need to count the number of students in each department.", "Use the COUNT() function to count the number of students (ID) for each department (dept_name).", "Group the results by department using GROUP BY clause to get the count for each department."], "pred_sql": "SELECT dept_name, COUNT(ID) AS student_count FROM student GROUP BY dept_name;", "gold_sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "source_tables": ["student"]}
{"sample_id": 1412, "db_id": "college_2", "question": "Find the semester and year which has the least number of student taking any class.", "rationale": ["Identify the relevant table: The 'takes' table contains information about students taking classes, including semester and year.", "Group the data by semester and year to count the number of students taking classes in each semester and year combination.", "Use the COUNT function to count the number of students (IDs) for each semester and year.", "Order the results in ascending order based on the count of students to find the semester and year with the least number of students.", "Limit the results to 1 to get only the semester and year with the least number of students."], "pred_sql": "SELECT semester, year FROM takes GROUP BY semester, year ORDER BY COUNT(ID) ASC LIMIT 1;", "gold_sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "source_tables": ["takes"]}
{"sample_id": 1413, "db_id": "college_2", "question": "Which semeseter and year had the fewest students?", "rationale": ["Identify the relevant table: The 'takes' table contains information about students taking courses, including semester and year.", "Count the number of distinct students (IDs) for each semester and year combination: Use COUNT(DISTINCT ID) to ensure each student is only counted once per semester/year.", "Group the results by semester and year: This allows us to aggregate the student counts for each unique semester/year combination.", "Order the results by the student count in ascending order: This will help us find the semester and year with the fewest students.", "Limit the results to 1: Since we only want the semester and year with the fewest students, we use LIMIT 1."], "pred_sql": "SELECT semester, year, COUNT(DISTINCT ID) AS student_count \nFROM takes \nGROUP BY semester, year \nORDER BY student_count ASC \nLIMIT 1;", "gold_sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "source_tables": ["takes"]}
{"sample_id": 1414, "db_id": "college_2", "question": "What is the id of the instructor who advises of all students from History department?", "rationale": ["Identify the relevant tables: advisor and student.", "We need to find the instructor ID (i_ID) from the advisor table.", "We need to join the advisor table with the student table on the student ID (s_ID) to link advisors to their students.", "Filter the results to include only those students who belong to the History department by using a WHERE clause on the dept_name column."], "pred_sql": "SELECT advisor.i_ID\nFROM advisor\nJOIN student ON advisor.s_ID = student.ID\nWHERE student.dept_name = 'History'", "gold_sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "source_tables": ["student", "advisor"]}
{"sample_id": 1415, "db_id": "college_2", "question": "Give id of the instructor who advises students in the History department.", "rationale": ["Identify the relevant tables: advisor, student, and department.", "We need to find the instructor IDs (i_ID) from the advisor table.", "Join the advisor table with the student table on the student ID (s_ID) to link advisors to their students.", "Join the resulting table with the department table on the department name to filter by the History department.", "Use a WHERE clause to specify that we are only interested in the History department."], "pred_sql": "SELECT advisor.i_ID FROM advisor JOIN student ON advisor.s_ID = student.ID JOIN department ON student.dept_name = department.dept_name WHERE department.dept_name = 'History';", "gold_sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "source_tables": ["student", "advisor"]}
{"sample_id": 1416, "db_id": "college_2", "question": "Find the name and salary of the instructors who are advisors of any student from History department?", "rationale": ["Identify the tables involved: instructor, advisor, and student.", "We need to select the name and salary of instructors, so we will select 'instructor.name' and 'instructor.salary'.", "Instructors who are advisors are linked to students through the advisor table, so we will perform a JOIN between instructor and advisor on 'instructor.ID' and 'advisor.i_ID'.", "Next, we need to link the advisor table to the student table to filter for students from the History department, so we will JOIN advisor and student on 'advisor.s_ID' and 'student.ID'.", "Finally, we will add a WHERE clause to filter the results to only include students from the History department by checking 'student.dept_name = 'History''."], "pred_sql": "SELECT instructor.name, instructor.salary \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.dept_name = 'History';", "gold_sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "source_tables": ["instructor", "student", "advisor"]}
{"sample_id": 1417, "db_id": "college_2", "question": "What are the names and salaries of instructors who advises students in the History department?", "rationale": ["Identify the relevant tables: instructor, advisor, and student.", "We need to select the names and salaries of instructors, so we will select 'instructor.name' and 'instructor.salary'.", "Instructors who advise students are linked through the advisor table, so we will join the instructor table with the advisor table on 'instructor.ID = advisor.i_ID'.", "Next, we need to link the advisor table with the student table to find out which students are being advised, so we join on 'advisor.s_ID = student.ID'.", "Finally, we filter the results to only include students from the History department by adding a WHERE clause: 'student.dept_name = 'History''."], "pred_sql": "SELECT instructor.name, instructor.salary \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.dept_name = 'History';", "gold_sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "source_tables": ["instructor", "student", "advisor"]}
{"sample_id": 1418, "db_id": "college_2", "question": "Find the id of the courses that do not have any prerequisite?", "rationale": ["Identify the main table to query, which is 'course' since we need course IDs.", "We need to find courses that do not have any prerequisites, which means we need to check against the 'prereq' table.", "To find courses without prerequisites, we can use a subquery that selects all course_ids from the 'prereq' table.", "We will use the NOT IN clause to filter out any course_ids that appear in the 'prereq' table from our main query on the 'course' table."], "pred_sql": "SELECT course_id FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "gold_sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "source_tables": ["course", "prereq"]}
{"sample_id": 1419, "db_id": "college_2", "question": "What are the ids of courses without prerequisites?", "rationale": ["Identify the table that contains course information, which is the 'course' table.", "Determine the relevant column that contains the unique identifiers for courses, which is 'course_id'.", "To find courses without prerequisites, we need to exclude those courses that appear in the 'prereq' table.", "Construct a subquery that selects 'course_id' from the 'prereq' table to identify all courses that have prerequisites.", "Use the NOT IN clause to filter out the courses that are listed in the subquery from the main query on the 'course' table."], "pred_sql": "SELECT course_id FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "gold_sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "source_tables": ["course", "prereq"]}
{"sample_id": 1420, "db_id": "college_2", "question": "Find the name of the courses that do not have any prerequisite?", "rationale": ["Identify the table that contains course information, which is the 'course' table.", "Determine the relevant column that contains the course titles, which is 'title'.", "Identify the prerequisite information, which is stored in the 'prereq' table.", "To find courses without prerequisites, we need to select course IDs from the 'prereq' table and exclude them from our main query.", "Construct a subquery that selects all course_ids from the 'prereq' table.", "Use the NOT IN clause to filter out any course_ids that appear in the subquery from the main query that selects titles from the 'course' table."], "pred_sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "gold_sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}
{"sample_id": 1421, "db_id": "college_2", "question": "What are the names of courses without prerequisites?", "rationale": ["Identify the table that contains course information, which is the 'course' table.", "Determine the relevant column that contains the course titles, which is 'title'.", "To find courses without prerequisites, we need to check which course_ids are not present in the 'prereq' table.", "Use a subquery to select all course_ids from the 'prereq' table.", "Use the NOT IN clause to filter out those course_ids from the main query that selects titles from the 'course' table."], "pred_sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "gold_sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}
{"sample_id": 1422, "db_id": "college_2", "question": "What is the title of the prerequisite class of International Finance course?", "rationale": ["Identify the course 'International Finance' in the course table to get its course_id.", "Join the course table with the prereq table on course_id to find the prerequisites for 'International Finance'.", "Select the prerequisite course identifier (prereq_id) from the joined tables."], "pred_sql": "SELECT p.prereq_id FROM course c JOIN prereq p ON c.course_id = p.course_id WHERE c.title = 'International Finance';", "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "source_tables": ["course", "prereq"]}
{"sample_id": 1423, "db_id": "college_2", "question": "Give the title of the prerequisite to the course International Finance.", "rationale": ["Identify the course 'International Finance' in the course table to get its course_id.", "Join the course table with the prereq table on course_id to find the prerequisites for 'International Finance'.", "Join the prereq table with the course table again to get the title of the prerequisite course using the prereq_id.", "Select the title of the prerequisite course from the result."], "pred_sql": "SELECT p.title FROM course AS c JOIN prereq AS pr ON c.course_id = pr.course_id JOIN course AS p ON pr.prereq_id = p.course_id WHERE c.title = 'International Finance';", "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "source_tables": ["course", "prereq"]}
{"sample_id": 1424, "db_id": "college_2", "question": "Find the title of course whose prerequisite is course Differential Geometry.", "rationale": ["Identify the table that contains course titles, which is the 'course' table.", "Identify the table that contains prerequisite information, which is the 'prereq' table.", "To find the course title whose prerequisite is 'Differential Geometry', we need to first find the course_id of 'Differential Geometry'.", "Use a subquery to select the course_id from the 'course' table where the title is 'Differential Geometry'.", "Join the 'course' table with the 'prereq' table on course_id to find the courses that have 'Differential Geometry' as a prerequisite.", "Select the title of the course from the result of the join."], "pred_sql": "SELECT c.title FROM course c JOIN prereq p ON c.course_id = p.course_id WHERE p.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry');", "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "source_tables": ["course", "prereq"]}
{"sample_id": 1425, "db_id": "college_2", "question": "What is the title of the course with Differential Geometry as a prerequisite?", "rationale": ["Identify the relevant tables: We need to look at the 'course' table for course titles and the 'prereq' table for prerequisites.", "Determine the relationship: The 'prereq' table links courses with their prerequisites through 'course_id'.", "Find the prerequisite course: We need to find the 'course_id' for 'Differential Geometry' from the 'course' table.", "Join the tables: We will join the 'course' table with the 'prereq' table on 'course_id' to find courses that have 'Differential Geometry' as a prerequisite.", "Select the title: Finally, we will select the 'title' of the course from the 'course' table."], "pred_sql": "SELECT c.title FROM course c JOIN prereq p ON c.course_id = p.course_id WHERE p.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry')", "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "source_tables": ["course", "prereq"]}
{"sample_id": 1426, "db_id": "college_2", "question": "Find the names of students who have taken any course in the fall semester of year 2003.", "rationale": ["Identify the relevant tables: We need to retrieve student names, so we will use the 'student' table and the 'takes' table to find out which students have taken courses.", "Determine the join condition: The 'takes' table has a foreign key 'ID' that references the 'student' table's 'ID'. We will join these two tables on this key.", "Specify the filtering criteria: We need to filter the results to only include records where the semester is 'Fall' and the year is '2003'.", "Select the distinct names of students: We will select the 'name' column from the 'student' table and use DISTINCT to ensure we do not have duplicate names in the result."], "pred_sql": "SELECT DISTINCT student.name \nFROM student \nJOIN takes ON student.ID = takes.ID \nWHERE takes.semester = 'Fall' AND takes.year = '2003';", "gold_sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "source_tables": ["student", "takes"]}
{"sample_id": 1427, "db_id": "college_2", "question": "What are the names of students who took a course in the Fall of 2003?", "rationale": ["Identify the relevant tables: We need to find student names, so we will use the 'student' table and the 'takes' table to find which students took courses.", "Determine the relationship: The 'takes' table has a foreign key 'ID' that relates to the 'student' table's 'ID'. We will join these two tables on this key.", "Filter the results: We need to filter the results to only include courses taken in the Fall semester of the year 2003. This means we will add a WHERE clause to check for 'semester' = 'Fall' and 'year' = '2003'.", "Select the distinct names: Since we only want the names of the students, we will select 'student.name' and use DISTINCT to ensure we do not have duplicate names in the result."], "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID WHERE takes.semester = 'Fall' AND takes.year = '2003';", "gold_sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "source_tables": ["student", "takes"]}
{"sample_id": 1428, "db_id": "college_2", "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "rationale": ["Identify the relevant tables: We need to retrieve the course title, which is in the 'course' table, and we need to filter based on the section details, which are in the 'section' table.", "Determine the join condition: The 'course' table and 'section' table are related through the 'course_id' column. We will join these two tables on this column.", "Specify the filtering criteria: We need to filter the results based on the building ('Chandler'), semester ('Fall'), and year ('2010').", "Construct the SQL query: Using the SELECT statement to get the 'title' from the 'course' table, and applying the JOIN and WHERE clauses to filter the results accordingly."], "pred_sql": "SELECT title FROM course c JOIN section s ON c.course_id = s.course_id WHERE s.building = 'Chandler' AND s.semester = 'Fall' AND s.year = '2010';", "gold_sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "source_tables": ["course", "section"]}
{"sample_id": 1429, "db_id": "college_2", "question": "Give the title of the course offered in Chandler during the Fall of 2010.", "rationale": ["Identify the relevant tables: 'course' for course titles and 'section' for course offerings.", "Determine the columns needed: 'title' from 'course' and filter conditions from 'section'.", "Establish the join condition: 'course_id' in 'course' and 'section' tables to link courses with their sections.", "Set the filter criteria: building must be 'Chandler', semester must be 'Fall', and year must be '2010'.", "Construct the SQL query using SELECT to retrieve the course title based on the specified conditions."], "pred_sql": "SELECT title FROM course c JOIN section s ON c.course_id = s.course_id WHERE s.building = 'Chandler' AND s.semester = 'Fall' AND s.year = '2010';", "gold_sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "source_tables": ["course", "section"]}
{"sample_id": 1430, "db_id": "college_2", "question": "Find the name of the instructors who taught C Programming course before.", "rationale": ["Identify the relevant tables: instructor, teaches, and course.", "We need to find instructors who taught a specific course, so we will join the teaches table with the instructor table on the instructor's ID.", "Next, we will join the course table to the teaches table on the course_id to filter by the course title.", "The course title we are interested in is 'C Programming'.", "We will select the distinct names of the instructors who meet these criteria."], "pred_sql": "SELECT DISTINCT instructor.name \nFROM instructor \nJOIN teaches ON instructor.ID = teaches.ID \nJOIN course ON teaches.course_id = course.course_id \nWHERE course.title = 'C Programming';", "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "source_tables": ["instructor", "course", "teaches"]}
{"sample_id": 1431, "db_id": "college_2", "question": "What are the names of instructors who have taught C Programming courses?", "rationale": ["Identify the relevant tables: instructor, teaches, and course.", "We need to find instructors who have taught a specific course, which is 'C Programming'.", "Join the instructor table with the teaches table on the instructor ID to get the courses they have taught.", "Join the teaches table with the course table on the course ID to filter for the course title 'C Programming'.", "Select the distinct names of instructors to avoid duplicates."], "pred_sql": "SELECT DISTINCT instructor.name \nFROM instructor \nJOIN teaches ON instructor.ID = teaches.ID \nJOIN course ON teaches.course_id = course.course_id \nWHERE course.title = 'C Programming';", "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "source_tables": ["instructor", "course", "teaches"]}
{"sample_id": 1432, "db_id": "college_2", "question": "Find the name and salary of instructors who are advisors of the students from the Math department.", "rationale": ["Identify the tables needed: instructor, advisor, and student.", "We need to select the name and salary of instructors, so we will select 'instructor.name' and 'instructor.salary'.", "Instructors who are advisors are linked to students through the advisor table, so we will join the instructor table with the advisor table on 'instructor.ID = advisor.i_ID'.", "Next, we need to join the student table to filter for students from the Math department, so we join the advisor table with the student table on 'advisor.s_ID = student.ID'.", "Finally, we add a WHERE clause to filter the results to only include students from the Math department by checking 'student.dept_name = 'Math''."], "pred_sql": "SELECT instructor.name, instructor.salary \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.dept_name = 'Math';", "gold_sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "source_tables": ["instructor", "student", "advisor"]}
{"sample_id": 1433, "db_id": "college_2", "question": "What are the names and salaries of instructors who advise students in the Math department?", "rationale": ["Identify the relevant tables: instructor, advisor, and student.", "We need to select the names and salaries of instructors, so we will select 'instructor.name' and 'instructor.salary'.", "Instructors who advise students are linked through the advisor table, so we will perform a JOIN between instructor and advisor on 'instructor.ID' and 'advisor.i_ID'.", "Next, we need to link the advisor table to the student table to filter by the Math department, so we will JOIN advisor and student on 'advisor.s_ID' and 'student.ID'.", "Finally, we will add a WHERE clause to filter the results to only include students from the Math department by checking 'student.dept_name = 'Math''."], "pred_sql": "SELECT instructor.name, instructor.salary \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.dept_name = 'Math';", "gold_sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "source_tables": ["instructor", "student", "advisor"]}
{"sample_id": 1434, "db_id": "college_2", "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "rationale": ["Identify the tables needed: instructor, advisor, and student.", "We need to find instructors who are advisors, so we will join the instructor table with the advisor table on the instructor's ID.", "Next, we need to link the advisor table with the student table to find out which students are being advised by these instructors.", "We filter the results to include only those students who belong to the Math department by using a WHERE clause.", "Finally, we sort the results by the total credits earned by the students in ascending order using ORDER BY."], "pred_sql": "SELECT instructor.name \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.dept_name = 'Math' \nORDER BY student.tot_cred;", "gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "source_tables": ["instructor", "student", "advisor"]}
{"sample_id": 1435, "db_id": "college_2", "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "rationale": ["Identify the relevant tables: instructor, advisor, and student.", "We need to find instructors who advise students, so we will join the instructor table with the advisor table on the instructor's ID.", "Next, we will join the advisor table with the student table on the student's ID to get the students being advised.", "We need to filter the results to only include students from the math department, so we will add a WHERE clause for student.dept_name = 'math'.", "Finally, we want to sort the results by the total credits of the students, so we will use an ORDER BY clause on student.tot_cred."], "pred_sql": "SELECT instructor.name \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.dept_name = 'math' \nORDER BY student.tot_cred;", "gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "source_tables": ["instructor", "student", "advisor"]}
{"sample_id": 1436, "db_id": "college_2", "question": "What is the course title of the prerequisite of course Mobile Computing?", "rationale": ["Identify the course 'Mobile Computing' to find its prerequisites.", "Use a subquery to get the course_id of 'Mobile Computing'.", "Join the 'course' table with the 'prereq' table on the course_id to find the prerequisite course.", "Select the title of the course from the 'course' table that corresponds to the prerequisite course_id."], "pred_sql": "SELECT c.title FROM course c JOIN prereq p ON c.course_id = p.prereq_id WHERE p.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing')", "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "source_tables": ["course", "prereq"]}
{"sample_id": 1437, "db_id": "college_2", "question": "What is the title of the course that is a prerequisite for Mobile Computing?", "rationale": ["Identify the course 'Mobile Computing' to find its prerequisites.", "Use a subquery to get the course_id of 'Mobile Computing'.", "Join the course table with the prereq table on course_id to find the title of the prerequisite course."], "pred_sql": "SELECT c.title FROM course c JOIN prereq p ON c.course_id = p.prereq_id WHERE p.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing')", "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "source_tables": ["course", "prereq"]}
{"sample_id": 1438, "db_id": "college_2", "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "rationale": ["Identify the tables involved: instructor, advisor, and student.", "We need to find the instructor's name who is an advisor to a student.", "The student with the highest total credits needs to be identified.", "To find the student with the highest total credits, we can use a subquery that selects the maximum total credits from the student table.", "Join the instructor table with the advisor table on the instructor's ID and the advisor's ID.", "Join the advisor table with the student table on the student's ID.", "Filter the results to only include the instructor who advises the student with the maximum total credits."], "pred_sql": "SELECT instructor.name \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.tot_cred = (SELECT MAX(tot_cred) FROM student);", "gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "source_tables": ["instructor", "student", "advisor"]}
{"sample_id": 1439, "db_id": "college_2", "question": "What is the name of the instructor who advises the student with the greatest number of total credits?", "rationale": ["Identify the relevant tables: instructor, advisor, and student.", "We need to find the instructor's name who advises a specific student.", "The student with the greatest number of total credits can be found by using a subquery that selects the maximum total credits from the student table.", "Join the instructor table with the advisor table on the instructor ID, and then join the advisor table with the student table on the student ID.", "Filter the results to only include the instructor advising the student with the maximum total credits."], "pred_sql": "SELECT instructor.name \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.tot_cred = (SELECT MAX(tot_cred) FROM student);", "gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "source_tables": ["instructor", "student", "advisor"]}
{"sample_id": 1440, "db_id": "college_2", "question": "Find the name of instructors who didn't teach any courses?", "rationale": ["Identify the table that contains instructor information, which is the 'instructor' table.", "We need to find instructors who did not teach any courses, so we will look at the 'teaches' table to find IDs of instructors who have taught courses.", "We will use a subquery to select distinct IDs from the 'teaches' table.", "The main query will select names from the 'instructor' table where the ID is not in the list of IDs obtained from the subquery."], "pred_sql": "SELECT name FROM instructor WHERE ID NOT IN (SELECT DISTINCT ID FROM teaches);", "gold_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1441, "db_id": "college_2", "question": "What are the names of instructors who didn't teach?", "rationale": ["Identify the table that contains instructor information, which is the 'instructor' table.", "We need to find instructors who did not teach any courses, so we will look for instructors whose IDs are not present in the 'teaches' table.", "The 'teaches' table contains the IDs of instructors who have taught courses, so we will use a subquery to select distinct IDs from the 'teaches' table.", "The main query will select the names of instructors from the 'instructor' table where their ID is not in the list of IDs returned by the subquery."], "pred_sql": "SELECT name FROM instructor WHERE ID NOT IN (SELECT DISTINCT ID FROM teaches);", "gold_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1442, "db_id": "college_2", "question": "Find the id of instructors who didn't teach any courses?", "rationale": ["Identify the table that contains instructor information, which is the 'instructor' table.", "We need to find instructors who did not teach any courses, so we will look for IDs in the 'teaches' table.", "The 'teaches' table contains the IDs of instructors who have taught courses.", "To find instructors who did not teach any courses, we can use a subquery to select distinct IDs from the 'teaches' table and then use the NOT IN clause to filter out those IDs from the 'instructor' table."], "pred_sql": "SELECT ID FROM instructor WHERE ID NOT IN (SELECT DISTINCT teaches.ID FROM teaches);", "gold_sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1443, "db_id": "college_2", "question": "What are the ids of instructors who didnt' teach?", "rationale": ["Identify the table that contains instructor information, which is the 'instructor' table.", "We need to find instructors who did not teach any courses, so we will look for IDs in the 'teaches' table.", "The 'teaches' table contains the IDs of instructors who have taught courses, so we will use a subquery to get these IDs.", "We will use the NOT IN clause to filter out those instructors from the 'instructor' table.", "The final query selects the IDs of instructors from the 'instructor' table that are not present in the list of IDs from the 'teaches' table."], "pred_sql": "SELECT ID FROM instructor WHERE ID NOT IN (SELECT DISTINCT teaches.ID FROM teaches);", "gold_sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1444, "db_id": "college_2", "question": "Find the names of instructors who didn't each any courses in any Spring semester.", "rationale": ["Identify the table that contains instructor names, which is the 'instructor' table.", "Determine the condition for instructors who did not teach any courses in Spring semesters.", "To find instructors who did not teach in Spring, we can use a subquery to select IDs of instructors who taught in Spring from the 'teaches' table.", "The subquery will select distinct instructor IDs from the 'teaches' table where the semester is 'Spring'.", "The main query will select names from the 'instructor' table where the instructor ID is not in the list of IDs returned by the subquery."], "pred_sql": "SELECT name FROM instructor WHERE ID NOT IN (SELECT DISTINCT teaches.ID FROM teaches WHERE semester = 'Spring')", "gold_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1445, "db_id": "college_2", "question": "What are the names of instructors who didn't teach courses in the Spring?", "rationale": ["Identify the table that contains instructor names, which is the 'instructor' table.", "We need to find instructors who did not teach any courses in the Spring semester.", "To do this, we will use a subquery to select the IDs of instructors who taught courses in the Spring semester from the 'teaches' table.", "The subquery will select distinct IDs from the 'teaches' table where the semester is 'Spring'.", "Finally, we will select the names of instructors from the 'instructor' table whose IDs are not in the list obtained from the subquery."], "pred_sql": "SELECT name FROM instructor WHERE ID NOT IN (SELECT DISTINCT teaches.ID FROM teaches WHERE semester = 'Spring')", "gold_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1446, "db_id": "college_2", "question": "Find the name of the department which has the highest average salary of professors.", "rationale": ["Identify the relevant table: The 'instructor' table contains the salary information and the department name.", "Group the results by department name to calculate the average salary for each department.", "Use the AVG() function to compute the average salary for each department.", "Order the results in descending order based on the average salary to find the highest.", "Limit the results to 1 to get the department with the highest average salary."], "pred_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1;", "gold_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "source_tables": ["instructor"]}
{"sample_id": 1447, "db_id": "college_2", "question": "Which department has the highest average instructor salary?", "rationale": ["Identify the relevant table: The 'instructor' table contains the salary and department information.", "Group the data by department: Use GROUP BY to aggregate the salaries by department.", "Calculate the average salary: Use AVG(salary) to compute the average salary for each department.", "Order the results: Use ORDER BY AVG(salary) DESC to sort the departments by average salary in descending order.", "Limit the results: Use LIMIT 1 to get only the department with the highest average salary."], "pred_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1;", "gold_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "source_tables": ["instructor"]}
{"sample_id": 1448, "db_id": "college_2", "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.", "rationale": ["Identify the department with the highest budget by selecting the 'dept_name' from the 'department' table and ordering by 'budget' in descending order, limiting the result to 1.", "Count the number of instructors in that department by selecting the count of 'ID' from the 'instructor' table where 'dept_name' matches the department identified in the previous step.", "Calculate the average salary of those instructors by using the AVG function on the 'salary' column in the same query."], "pred_sql": "SELECT COUNT(ID) AS number_of_instructors, AVG(salary) AS average_salary\nFROM instructor\nWHERE dept_name = (SELECT dept_name\n                    FROM department\n                    ORDER BY budget DESC\n                    LIMIT 1);", "gold_sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "source_tables": ["instructor", "department"]}
{"sample_id": 1449, "db_id": "college_2", "question": "How many instructors are in the department with the highest budget, and what is their average salary?", "rationale": ["Identify the department with the highest budget by using a subquery that selects the maximum budget from the department table.", "Join the instructor table with the department table on the dept_name column to associate instructors with their respective departments.", "Filter the results to only include instructors from the department that has the highest budget, as determined by the subquery.", "Count the number of instructors in that department and calculate their average salary using COUNT() and AVG() functions."], "pred_sql": "SELECT COUNT(i.ID) AS instructor_count, AVG(i.salary) AS average_salary\nFROM instructor i\nJOIN department d ON i.dept_name = d.dept_name\nWHERE d.budget = (SELECT MAX(budget) FROM department);", "gold_sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "source_tables": ["instructor", "department"]}
{"sample_id": 1450, "db_id": "college_2", "question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?", "rationale": ["Identify the relevant tables: course, section, and classroom.", "We need to select the title and credits of the course, so we will select 'c.title' and 'c.credits' from the course table.", "To find the course taught in the largest classroom, we need to join the course table with the section table on 'course_id'.", "Next, we join the section table with the classroom table on both 'building' and 'room_number' to get the classroom details for each section.", "To find the largest classroom, we need to filter the results where the capacity of the classroom is equal to the maximum capacity found in the classroom table.", "The subquery (SELECT MAX(capacity) FROM classroom) will give us the highest capacity, which we will use in the WHERE clause."], "pred_sql": "SELECT c.title, c.credits \nFROM course c \nJOIN section s ON c.course_id = s.course_id \nJOIN classroom cl ON s.building = cl.building AND s.room_number = cl.room_number \nWHERE cl.capacity = (SELECT MAX(capacity) FROM classroom)", "gold_sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "source_tables": ["section", "classroom", "course"]}
{"sample_id": 1451, "db_id": "college_2", "question": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.", "rationale": ["Identify the relevant tables: course, section, and classroom.", "We need to retrieve the title and credits of the course, so we will select 'title' and 'credits' from the course table.", "To find out which course is taught in the classroom with the greatest capacity, we need to join the course table with the section table on 'course_id'.", "Next, we join the section table with the classroom table on both 'building' and 'room_number' to link the sections to their respective classrooms.", "To find the classroom with the greatest capacity, we will use a subquery to get the maximum capacity from the classroom table.", "Finally, we will filter the results to only include courses taught in the classroom that has this maximum capacity."], "pred_sql": "SELECT c.title, c.credits \nFROM course c \nJOIN section s ON c.course_id = s.course_id \nJOIN classroom cl ON s.building = cl.building AND s.room_number = cl.room_number \nWHERE cl.capacity = (SELECT MAX(capacity) FROM classroom)", "gold_sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "source_tables": ["section", "classroom", "course"]}
{"sample_id": 1452, "db_id": "college_2", "question": "Find the name of students who didn't take any course from Biology department.", "rationale": ["Identify the students from the student table.", "Filter out students who are enrolled in the Biology department by checking the dept_name column.", "Use a subquery to find all course_ids that belong to the Biology department from the course table.", "Use another subquery to find all student IDs that have taken any of the Biology courses.", "Finally, select the names of students whose IDs are not in the list of IDs from the previous subquery."], "pred_sql": "SELECT name FROM student WHERE dept_name != 'Biology' AND ID NOT IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE dept_name = 'Biology'));", "gold_sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "source_tables": ["course", "student", "takes"]}
{"sample_id": 1453, "db_id": "college_2", "question": "What are the names of students who haven't taken any Biology courses?", "rationale": ["Identify the relevant table: We need to find student names, so we will use the 'student' table.", "Determine the condition: We want students who haven't taken any Biology courses.", "Find Biology courses: We will query the 'course' table to find course_ids where the title contains 'Biology'.", "Find students who have taken Biology courses: We will use the 'takes' table to find IDs of students who have taken these Biology courses.", "Combine the results: We will select names from the 'student' table where their IDs are not in the list of IDs from the previous step."], "pred_sql": "SELECT name FROM student WHERE ID NOT IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE title LIKE '%Biology%'));", "gold_sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "source_tables": ["course", "student", "takes"]}
{"sample_id": 1454, "db_id": "college_2", "question": "Find the total number of students and total number of instructors for each department.", "rationale": ["We need to find the total number of students and instructors for each department.", "Start by selecting the department name from the 'department' table.", "To count the number of students, we will join the 'student' table on the department name.", "To count the number of instructors, we will also join the 'instructor' table on the department name.", "Use LEFT JOIN to ensure that departments with no students or instructors are still included in the results.", "We will use COUNT(DISTINCT s.ID) to count unique students and COUNT(DISTINCT i.ID) to count unique instructors.", "Finally, we will group the results by department name to get the totals for each department."], "pred_sql": "SELECT d.dept_name, COUNT(DISTINCT s.ID) AS total_students, COUNT(DISTINCT i.ID) AS total_instructors\nFROM department d\nLEFT JOIN student s ON d.dept_name = s.dept_name\nLEFT JOIN instructor i ON d.dept_name = i.dept_name\nGROUP BY d.dept_name;", "gold_sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "source_tables": ["instructor", "department", "student"]}
{"sample_id": 1455, "db_id": "college_2", "question": "How many students and instructors are in each department?", "rationale": ["Identify the relevant tables: We need to gather information from the 'department', 'student', and 'instructor' tables.", "Count the number of students and instructors for each department: This requires counting distinct student IDs and instructor IDs grouped by department name.", "Use LEFT JOINs to ensure that departments with no students or instructors are still included in the results.", "Group the results by department name to get the counts for each department."], "pred_sql": "SELECT d.dept_name, COUNT(DISTINCT s.ID) AS student_count, COUNT(DISTINCT i.ID) AS instructor_count\nFROM department d\nLEFT JOIN student s ON d.dept_name = s.dept_name\nLEFT JOIN instructor i ON d.dept_name = i.dept_name\nGROUP BY d.dept_name;", "gold_sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "source_tables": ["instructor", "department", "student"]}
{"sample_id": 1456, "db_id": "college_2", "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.", "rationale": ["Identify the course ID for 'International Finance' by querying the course table.", "Use the course ID to find its prerequisites from the prereq table.", "Join the takes table to find students who have taken the prerequisite courses.", "Join the student table to get the names of those students.", "Select distinct student names to avoid duplicates."], "pred_sql": "SELECT DISTINCT student.name \nFROM student \nJOIN takes ON student.ID = takes.ID \nJOIN section ON takes.course_id = section.course_id AND takes.sec_id = section.sec_id AND takes.semester = section.semester AND takes.year = section.year \nJOIN course ON section.course_id = course.course_id \nJOIN prereq ON course.course_id = prereq.course_id \nWHERE prereq.prereq_id IN (SELECT course_id FROM course WHERE title = 'International Finance');", "gold_sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "source_tables": ["course", "prereq", "student", "takes"]}
{"sample_id": 1457, "db_id": "college_2", "question": "What are the names of students who have taken the prerequisite for the course International Finance?", "rationale": ["Identify the course title for which we need to find prerequisites, which is 'International Finance'.", "Find the prerequisite courses for 'International Finance' by joining the 'course' table with the 'prereq' table on the course ID.", "Next, identify the students who have taken these prerequisite courses by joining the 'takes' table with the 'student' table on the student ID.", "Select the distinct names of students who have taken the prerequisite courses for 'International Finance'."], "pred_sql": "SELECT DISTINCT student.name \nFROM student \nJOIN takes ON student.ID = takes.ID \nJOIN prereq ON takes.course_id = prereq.course_id \nJOIN course ON prereq.prereq_id = course.course_id \nWHERE course.title = 'International Finance';", "gold_sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "source_tables": ["course", "prereq", "student", "takes"]}
{"sample_id": 1458, "db_id": "college_2", "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "rationale": ["Identify the relevant table: instructor, which contains the name and salary of instructors.", "Determine the condition: we need instructors from the Physics department, so we will filter by dept_name = 'Physics'.", "Calculate the average salary of instructors in the Physics department using a subquery: SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics'.", "Combine the conditions to form the final SQL query: select name and salary from instructor where the salary is less than the average salary calculated in the subquery."], "pred_sql": "SELECT name, salary FROM instructor WHERE dept_name = 'Physics' AND salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics');", "gold_sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "source_tables": ["instructor"]}
{"sample_id": 1459, "db_id": "college_2", "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "rationale": ["Identify the relevant table: The 'instructor' table contains the names and salaries of instructors.", "Determine the condition: We need to find instructors who earn less than the average salary of those in the Physics department.", "Calculate the average salary: Use a subquery to calculate the average salary of instructors in the Physics department.", "Construct the main query: Select the names and salaries of instructors where their salary is less than the calculated average."], "pred_sql": "SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics');", "gold_sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "source_tables": ["instructor"]}
{"sample_id": 1460, "db_id": "college_2", "question": "Find the name of students who took some course offered by Statistics department.", "rationale": ["Identify the tables involved: We need information from the 'student', 'takes', and 'course' tables.", "We need to find students who took courses offered by the Statistics department, so we will join the 'student' table with the 'takes' table on the student ID.", "Next, we will join the 'takes' table with the 'course' table on the course ID to access the department information.", "We will filter the results to include only those courses that belong to the 'Statistics' department by using a WHERE clause.", "Finally, we will select the names of the students from the resulting joined table."], "pred_sql": "SELECT student.name FROM student JOIN takes ON student.ID = takes.ID JOIN course ON takes.course_id = course.course_id WHERE course.dept_name = 'Statistics';", "gold_sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "source_tables": ["course", "student", "takes"]}
{"sample_id": 1461, "db_id": "college_2", "question": "What are the names of students who have taken Statistics courses?", "rationale": ["Identify the relevant tables: We need to find student names, so we will use the 'student' table. We also need to know which courses they have taken, so we will use the 'takes' and 'course' tables.", "Determine the relationship between the tables: The 'takes' table links students to the courses they have taken through the student ID and course ID.", "Filter for Statistics courses: We need to filter the courses to only include those that have 'Statistics' in their title. This can be done using a WHERE clause with a LIKE condition.", "Select the distinct names of students: We want to ensure that we only get unique student names, so we will use DISTINCT in our SELECT statement."], "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID JOIN course ON takes.course_id = course.course_id WHERE course.title LIKE '%Statistics%';", "gold_sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "source_tables": ["course", "student", "takes"]}
{"sample_id": 1462, "db_id": "college_2", "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "rationale": ["Identify the relevant tables: We need information from the 'section' and 'course' tables.", "Determine the columns to select: We need 'building', 'room_number', 'semester', and 'year' from the 'section' table.", "Establish the relationship between tables: The 'section' table is related to the 'course' table through 'course_id'.", "Filter the results: We only want courses offered by the 'Psychology' department, which is specified in the 'course' table under 'dept_name'.", "Sort the results: The final output should be sorted by the 'title' of the course from the 'course' table.", "Construct the SQL query using the SELECT statement, JOIN clause, WHERE clause for filtering, and ORDER BY clause for sorting."], "pred_sql": "SELECT section.building, section.room_number, section.semester, section.year \nFROM section \nJOIN course ON section.course_id = course.course_id \nWHERE course.dept_name = 'Psychology' \nORDER BY course.title;", "gold_sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "source_tables": ["course", "section"]}
{"sample_id": 1463, "db_id": "college_2", "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "rationale": ["Identify the relevant tables: section and course.", "Determine the columns needed: building, room_number, semester, year from section and title from course.", "Join the section and course tables on course_id to access the course details for each section.", "Filter the results to include only those courses that belong to the Psychology department using the WHERE clause.", "Sort the results by the course title using the ORDER BY clause."], "pred_sql": "SELECT section.building, section.room_number, section.semester, section.year \nFROM section \nJOIN course ON section.course_id = course.course_id \nWHERE course.dept_name = 'Psychology' \nORDER BY course.title;", "gold_sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "source_tables": ["course", "section"]}
{"sample_id": 1464, "db_id": "college_2", "question": "Find the names of all instructors in computer science department", "rationale": ["Identify the table that contains instructor information, which is the 'instructor' table.", "Determine the relevant column for the instructor's name, which is 'name'.", "Identify the condition needed to filter instructors by department, specifically the 'dept_name' column.", "Construct the SQL query to select the 'name' from the 'instructor' table where 'dept_name' equals 'computer science'."], "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'computer science';", "gold_sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "source_tables": ["instructor"]}
{"sample_id": 1465, "db_id": "college_2", "question": "What are the names of all instructors in the Comp. Sci. department?", "rationale": ["Identify the table that contains instructor information, which is the 'instructor' table.", "Determine the relevant column that contains the names of the instructors, which is 'name'.", "Identify the condition needed to filter the instructors by department, which is 'dept_name = 'Comp. Sci.''.", "Construct the SQL query to select the names of instructors from the 'instructor' table where the department name matches 'Comp. Sci.'."], "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.';", "gold_sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "source_tables": ["instructor"]}
{"sample_id": 1466, "db_id": "college_2", "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "rationale": ["Identify the table that contains the information about instructors, which is the 'instructor' table.", "Determine the columns needed: we need the 'name' of the instructors.", "Filter the results to include only those instructors who belong to the 'Comp. Sci.' department, which is done using the 'dept_name' column.", "Add an additional filter to include only those instructors whose salary is greater than 80000, using the 'salary' column.", "Combine these conditions into a SQL SELECT statement that retrieves the names of the instructors meeting both criteria."], "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000;", "gold_sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "source_tables": ["instructor"]}
{"sample_id": 1467, "db_id": "college_2", "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "rationale": ["Identify the table that contains the information about instructors, which is the 'instructor' table.", "Determine the columns needed: we need the 'name' of the instructors.", "We need to filter the results to only include instructors from the 'Comp. Sci.' department, so we will use a WHERE clause to specify 'dept_name = 'Comp. Sci.'", "Additionally, we need to filter for instructors who earn more than 80000, so we will add another condition in the WHERE clause: 'salary > 80000'.", "Combine these conditions to form the complete SQL query."], "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000;", "gold_sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "source_tables": ["instructor"]}
{"sample_id": 1468, "db_id": "college_2", "question": "Find the names of all instructors who have taught some course and the course_id.", "rationale": ["Identify the tables needed: 'instructor' for instructor names and 'teaches' for course IDs.", "Determine the relationship between the tables: 'teaches' has a foreign key 'ID' that references 'instructor.ID'.", "Select the required columns: 'instructor.name' for instructor names and 'teaches.course_id' for course IDs.", "Construct the SQL query using a JOIN to combine the 'instructor' and 'teaches' tables based on the matching 'ID' fields."], "pred_sql": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches ON instructor.ID = teaches.ID;", "gold_sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1469, "db_id": "college_2", "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?", "rationale": ["Identify the tables needed: 'instructor' for instructor names and 'teaches' for course IDs.", "Determine the relationship between the tables: 'teaches' has a foreign key 'ID' that references 'instructor.ID'.", "Select the desired columns: 'instructor.name' for instructor names and 'teaches.course_id' for course IDs.", "Construct the SQL query using a JOIN to combine the two tables based on the relationship."], "pred_sql": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches ON instructor.ID = teaches.ID;", "gold_sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1470, "db_id": "college_2", "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "rationale": ["Identify the relevant tables: instructor and teaches.", "We need to select the instructor's name and the course_id they have taught.", "Join the instructor table with the teaches table on the instructor's ID.", "Filter the results to include only those instructors who belong to the Art department."], "pred_sql": "SELECT instructor.name, teaches.course_id \nFROM instructor \nJOIN teaches ON instructor.ID = teaches.ID \nWHERE instructor.dept_name = 'Art';", "gold_sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1471, "db_id": "college_2", "question": "What are the names of Art instructors who have taught a course, and the corresponding course id?", "rationale": ["Identify the relevant tables: instructor, teaches, and course.", "We need to find instructors from the Art department, so we will filter the instructor table by dept_name = 'Art'.", "We need to join the teaches table to find out which courses these instructors have taught, using the instructor ID.", "Next, we join the course table to get the course_id associated with the taught courses.", "Finally, we select the instructor's name and the course_id to fulfill the query requirements."], "pred_sql": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches ON instructor.ID = teaches.ID JOIN course ON teaches.course_id = course.course_id WHERE instructor.dept_name = 'Art';", "gold_sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "source_tables": ["instructor", "teaches"]}
{"sample_id": 1472, "db_id": "college_2", "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "rationale": ["Identify the table that contains the information about instructors, which is the 'instructor' table.", "Determine the column that holds the names of the instructors, which is the 'name' column.", "Formulate a SQL query to select the 'name' column from the 'instructor' table.", "Use the LIKE operator to filter names that include the substring 'dar', using the wildcard '%' to match any characters before and after 'dar'."], "pred_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%';", "gold_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"]}
{"sample_id": 1473, "db_id": "college_2", "question": "What are the names of all instructors with names that include \"dar\"?", "rationale": ["Identify the table that contains the information about instructors, which is the 'instructor' table.", "Determine the column that holds the names of the instructors, which is the 'name' column.", "Formulate a query to select the 'name' column from the 'instructor' table.", "Apply a condition to filter the results where the 'name' contains the substring 'dar'.", "Use the SQL LIKE operator with wildcards '%' to match any names that include 'dar' anywhere in the string."], "pred_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%';", "gold_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"]}
{"sample_id": 1474, "db_id": "college_2", "question": "List in alphabetic order the names of all distinct instructors.", "rationale": ["Identify the table that contains instructor names, which is the 'instructor' table.", "To get distinct names, use the DISTINCT keyword in the SELECT statement.", "Order the results alphabetically by the instructor's name using the ORDER BY clause."], "pred_sql": "SELECT DISTINCT name FROM instructor ORDER BY name;", "gold_sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "source_tables": ["instructor"]}
{"sample_id": 1475, "db_id": "college_2", "question": "List the distinct names of the instructors, ordered by name.", "rationale": ["Identify the table that contains instructor names, which is the 'instructor' table.", "To get distinct names, use the DISTINCT keyword in the SELECT statement.", "Specify the column to select, which is 'name'.", "To order the results by name, use the ORDER BY clause with the 'name' column."], "pred_sql": "SELECT DISTINCT name FROM instructor ORDER BY name;", "gold_sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "source_tables": ["instructor"]}
{"sample_id": 1476, "db_id": "college_2", "question": "Find courses that ran in Fall 2009 or in Spring 2010.", "rationale": ["Identify the relevant tables: We need to look at the 'course' and 'section' tables since we are interested in courses and their corresponding semesters and years.", "Determine the conditions: We want to find courses that were offered in either Fall 2009 or Spring 2010.", "Construct a subquery: We will create a subquery that selects 'course_id' from the 'section' table where the semester is 'Fall' and the year is '2009' or the semester is 'Spring' and the year is '2010'.", "Use the subquery in the main query: The main query will select all columns from the 'course' table where the 'course_id' is in the results of the subquery."], "pred_sql": "SELECT * FROM course WHERE course_id IN (SELECT course_id FROM section WHERE (semester = 'Fall' AND year = '2009') OR (semester = 'Spring' AND year = '2010'));", "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}
{"sample_id": 1477, "db_id": "college_2", "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?", "rationale": ["Identify the relevant table: The 'section' table contains information about course sections, including the semester and year.", "Determine the columns needed: We need the 'course_id' column to get the IDs of the courses.", "Define the conditions: We want to filter for sections that are offered in either the Fall of 2009 or the Spring of 2010.", "Construct the SQL query: Use a SELECT statement to retrieve 'course_id' from the 'section' table with the specified conditions using the WHERE clause."], "pred_sql": "SELECT course_id FROM section WHERE (semester = 'Fall' AND year = '2009') OR (semester = 'Spring' AND year = '2010');", "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}
{"sample_id": 1478, "db_id": "college_2", "question": "Find courses that ran in Fall 2009 and in Spring 2010.", "rationale": ["Identify the relevant tables: We need to look at the 'course' and 'section' tables since we are interested in courses and their corresponding sections.", "Determine the relationship: The 'section' table has a foreign key 'course_id' that links to the 'course' table, allowing us to join these tables.", "Specify the conditions: We need to filter sections based on the semester and year. The conditions are that the semester is 'Fall' in the year '2009' or 'Spring' in the year '2010'.", "Use DISTINCT: Since a course may have multiple sections in the same semester, we use DISTINCT to ensure each course title is listed only once.", "Construct the SQL query: Combine the above elements into a SQL SELECT statement that retrieves the course titles based on the specified conditions."], "pred_sql": "SELECT DISTINCT c.title \nFROM course c \nJOIN section s ON c.course_id = s.course_id \nWHERE (s.semester = 'Fall' AND s.year = '2009') \n   OR (s.semester = 'Spring' AND s.year = '2010');", "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}
{"sample_id": 1479, "db_id": "college_2", "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?", "rationale": ["Identify the relevant tables: The 'section' table contains information about courses offered in different semesters and years.", "We need to find courses offered in two specific semesters and years: Fall 2009 and Spring 2010.", "To find courses offered in both semesters, we can perform a self-join on the 'section' table, matching on 'course_id'.", "In the WHERE clause, specify the conditions for the first section (Fall 2009) and the second section (Spring 2010).", "Select distinct course_ids to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT s1.course_id \nFROM section s1 \nJOIN section s2 ON s1.course_id = s2.course_id \nWHERE (s1.semester = 'Fall' AND s1.year = '2009') \nAND (s2.semester = 'Spring' AND s2.year = '2010');", "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}
{"sample_id": 1480, "db_id": "college_2", "question": "Find courses that ran in Fall 2009 but not in Spring 2010.", "rationale": ["Identify the relevant tables: We need to look at the 'course' and 'section' tables to find courses and their corresponding sections.", "We need to find courses that were offered in Fall 2009. This requires filtering the 'section' table for semester = 'Fall' and year = '2009'.", "We also need to ensure that these courses were not offered in Spring 2010. This requires a subquery that selects course_ids from the 'section' table where semester = 'Spring' and year = '2010'.", "We will use a JOIN between 'course' and 'section' to get the course titles for the courses that meet the criteria.", "Finally, we will use DISTINCT to ensure that we only get unique course titles in the result."], "pred_sql": "SELECT DISTINCT c.title \nFROM course c \nJOIN section s1 ON c.course_id = s1.course_id \nWHERE s1.semester = 'Fall' AND s1.year = '2009' \nAND c.course_id NOT IN (\n    SELECT s2.course_id \n    FROM section s2 \n    WHERE s2.semester = 'Spring' AND s2.year = '2010'\n);", "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}
{"sample_id": 1481, "db_id": "college_2", "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?", "rationale": ["Identify the courses offered in Fall 2009 by filtering the 'section' table for semester = 'Fall' and year = '2009'.", "Use a subquery to find courses offered in Spring 2010 by filtering the 'section' table for semester = 'Spring' and year = '2010'.", "Use the NOT IN clause to exclude the courses found in the Spring 2010 subquery from the Fall 2009 results.", "Select distinct course IDs to ensure that each course is listed only once in the final output."], "pred_sql": "SELECT DISTINCT s.course_id \nFROM section s \nWHERE s.semester = 'Fall' AND s.year = '2009' \nAND s.course_id NOT IN (\n    SELECT course_id \n    FROM section \n    WHERE semester = 'Spring' AND year = '2010'\n);", "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}
{"sample_id": 1482, "db_id": "college_2", "question": "Find the salaries of all distinct instructors that are less than the largest salary.", "rationale": ["Identify the table that contains the salary information, which is the 'instructor' table.", "We need to select distinct salaries, so we will use the DISTINCT keyword in our SELECT statement.", "We need to filter the salaries to only include those that are less than the largest salary.", "To find the largest salary, we will use a subquery that selects the maximum salary from the 'instructor' table using MAX(salary).", "Combine these elements into a complete SQL query that selects distinct salaries from the 'instructor' table where the salary is less than the maximum salary."], "pred_sql": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor);", "gold_sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "source_tables": ["instructor"]}
{"sample_id": 1483, "db_id": "college_2", "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?", "rationale": ["Identify the table that contains salary information, which is the 'instructor' table.", "We need to select distinct salaries, so we will use the DISTINCT keyword in our SELECT statement.", "We need to filter the results to include only those instructors who earned less than the maximum salary.", "To find the maximum salary, we will use a subquery that selects the MAX(salary) from the 'instructor' table.", "Combine these elements into a complete SQL query that selects distinct salaries from the 'instructor' table where the salary is less than the maximum salary."], "pred_sql": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor);", "gold_sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "source_tables": ["instructor"]}
{"sample_id": 1484, "db_id": "college_2", "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.", "rationale": ["Identify the relevant table: The 'teaches' table contains information about instructors and the courses they teach.", "Determine the criteria: We need to filter the records for the Spring semester of the year 2010.", "Count distinct instructors: We will use COUNT(DISTINCT teaches.ID) to ensure we count each instructor only once, even if they teach multiple courses."], "pred_sql": "SELECT COUNT(DISTINCT teaches.ID) AS total_instructors\nFROM teaches\nWHERE teaches.semester = 'Spring' AND teaches.year = '2010';", "gold_sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}
{"sample_id": 1485, "db_id": "college_2", "question": "How many instructors teach a course in the Spring of 2010?", "rationale": ["Identify the relevant tables: 'teaches' for instructors and 'section' for course offerings.", "We need to count distinct instructors, so we will use COUNT(DISTINCT teaches.ID).", "Join the 'teaches' table with the 'section' table on course_id and sec_id to filter by semester and year.", "Add a WHERE clause to filter for the Spring semester of the year 2010."], "pred_sql": "SELECT COUNT(DISTINCT teaches.ID) AS instructor_count\nFROM teaches\nJOIN section ON teaches.course_id = section.course_id AND teaches.sec_id = section.sec_id AND teaches.semester = section.semester AND teaches.year = section.year\nWHERE section.semester = 'Spring' AND section.year = '2010';", "gold_sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}
{"sample_id": 1486, "db_id": "college_2", "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.", "rationale": ["We need to find the names and average salaries of departments.", "The relevant tables are 'department' and 'instructor' since we need department names and instructor salaries.", "We will join the 'department' table with the 'instructor' table on the 'dept_name' column to associate instructors with their respective departments.", "To calculate the average salary, we will use the AVG() function on the 'salary' column from the 'instructor' table.", "We will group the results by 'department.dept_name' to get the average salary for each department.", "Finally, we will filter the results using the HAVING clause to include only those departments where the average salary is greater than 42000."], "pred_sql": "SELECT department.dept_name, AVG(instructor.salary) AS average_salary \nFROM department \nJOIN instructor ON department.dept_name = instructor.dept_name \nGROUP BY department.dept_name \nHAVING AVG(instructor.salary) > 42000;", "gold_sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "source_tables": ["instructor"]}
{"sample_id": 1487, "db_id": "college_2", "question": "What are the names and average salaries for departments with average salary higher than 42000?", "rationale": ["We need to find the names of departments and their average salaries.", "The relevant tables are 'department' and 'instructor'.", "We will join these two tables on the 'dept_name' column since it is the common attribute.", "We will use the AVG() function to calculate the average salary of instructors in each department.", "We will group the results by department name to get the average salary for each department.", "Finally, we will filter the results using the HAVING clause to only include departments with an average salary greater than 42000."], "pred_sql": "SELECT department.dept_name, AVG(instructor.salary) AS average_salary \nFROM department \nJOIN instructor ON department.dept_name = instructor.dept_name \nGROUP BY department.dept_name \nHAVING AVG(instructor.salary) > 42000;", "gold_sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "source_tables": ["instructor"]}
{"sample_id": 1488, "db_id": "college_2", "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "rationale": ["Identify the table that contains instructor information, which is the 'instructor' table.", "We need to select the 'name' column from the 'instructor' table.", "We need to filter instructors based on their salary being greater than that of at least one instructor in the Biology department.", "To find the salary of instructors in the Biology department, we will use a subquery that selects the minimum salary from the 'instructor' table where 'dept_name' is 'Biology'.", "The final SQL query combines these elements to select the names of instructors whose salary is greater than the minimum salary of instructors in the Biology department."], "pred_sql": "SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology')", "gold_sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}
{"sample_id": 1489, "db_id": "college_2", "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?", "rationale": ["Identify the table that contains instructor information, which is the 'instructor' table.", "We need to find instructors whose salary is greater than at least one instructor from the Biology department.", "To do this, we will use a subquery to find the maximum salary of instructors in the Biology department.", "The subquery will select the maximum salary from the 'instructor' table where the department name is 'Biology'.", "The main query will select the distinct names of instructors from the 'instructor' table where their salary is greater than the result of the subquery."], "pred_sql": "SELECT DISTINCT i1.name \nFROM instructor i1 \nWHERE i1.salary > (SELECT MAX(i2.salary) \n                   FROM instructor i2 \n                   WHERE i2.dept_name = 'Biology');", "gold_sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}
{"sample_id": 1490, "db_id": "college_2", "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "rationale": ["Identify the table that contains the information about instructors, which is the 'instructor' table.", "Determine the relevant columns needed: 'name' for the instructor's name and 'salary' for their salary.", "We need to find instructors whose salary is greater than the salary of instructors in the Biology department.", "To do this, we will use a subquery to find the maximum salary of instructors in the Biology department.", "The subquery will select the maximum salary from the 'instructor' table where the 'dept_name' is 'Biology'.", "The main query will select the 'name' from the 'instructor' table where the 'salary' is greater than the result of the subquery."], "pred_sql": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology');", "gold_sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}
{"sample_id": 1491, "db_id": "college_2", "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "rationale": ["Identify the table that contains the information about instructors, which is the 'instructor' table.", "We need to select the 'name' column from the 'instructor' table.", "The condition is to find instructors whose salary is higher than any instructor in the Biology department.", "To achieve this, we can use a subquery that selects the maximum salary from the 'instructor' table where the 'dept_name' is 'Biology'.", "The final SQL query combines these elements to select the names of instructors with a salary greater than the maximum salary of those in the Biology department."], "pred_sql": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology');", "gold_sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}
{"sample_id": 1492, "db_id": "debate", "question": "How many debates are there?", "rationale": ["Identify the requirement: The user wants to know the total number of debates.", "Determine the relevant table: The 'debate' table contains the information about debates.", "Use the COUNT() function to count the number of entries in the 'debate' table.", "Construct the SQL query to select the count from the 'debate' table."], "pred_sql": "SELECT COUNT(*) AS total_debates FROM debate;", "gold_sql": "SELECT count(*) FROM debate", "source_tables": ["debate"]}
{"sample_id": 1493, "db_id": "debate", "question": "List the venues of debates in ascending order of the number of audience.", "rationale": ["Identify the table that contains the venue information, which is the 'debate' table.", "Determine the column that holds the venue names, which is 'Venue'.", "Identify the column that contains the number of audience members, which is 'Num_of_Audience'.", "Construct a SQL query to select the 'Venue' from the 'debate' table.", "Add an ORDER BY clause to sort the results in ascending order based on 'Num_of_Audience'."], "pred_sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC;", "gold_sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "source_tables": ["debate"]}
{"sample_id": 1494, "db_id": "debate", "question": "What are the date and venue of each debate?", "rationale": ["Identify the relevant table: The query asks for information about debates, which is found in the 'debate' table.", "Determine the required columns: The user wants the 'Date' and 'Venue' of each debate.", "Construct the SQL query: Use a SELECT statement to retrieve the 'Date' and 'Venue' columns from the 'debate' table."], "pred_sql": "SELECT Date, Venue FROM debate;", "gold_sql": "SELECT Date ,  Venue FROM debate", "source_tables": ["debate"]}
{"sample_id": 1495, "db_id": "debate", "question": "List the dates of debates with number of audience bigger than 150", "rationale": ["Identify the relevant table: The query requires information about debates, so we will use the 'debate' table.", "Determine the columns needed: We need the 'Date' of the debates and the 'Num_of_Audience' to filter the results.", "Construct the SQL SELECT statement: We will select the 'Date' column from the 'debate' table.", "Add the WHERE clause: We need to filter the results to include only those debates where 'Num_of_Audience' is greater than 150."], "pred_sql": "SELECT Date FROM debate WHERE Num_of_Audience > 150;", "gold_sql": "SELECT Date FROM debate WHERE Num_of_Audience  >  150", "source_tables": ["debate"]}
{"sample_id": 1496, "db_id": "debate", "question": "Show the names of people aged either 35 or 36.", "rationale": ["Identify the table that contains the relevant information: the 'people' table has the 'Name' and 'Age' columns.", "Determine the condition for filtering: we need to find people aged either 35 or 36.", "Use the SQL 'SELECT' statement to retrieve the 'Name' column from the 'people' table.", "Apply the 'WHERE' clause to filter the results based on the 'Age' column, using the 'IN' operator to specify the ages 35 and 36."], "pred_sql": "SELECT Name FROM people WHERE Age IN ('35', '36');", "gold_sql": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36", "source_tables": ["people"]}
{"sample_id": 1497, "db_id": "debate", "question": "What is the party of the youngest people?", "rationale": ["Identify the relevant table: The 'people' table contains the information about individuals, including their party affiliation and age.", "Determine the requirement: We need to find the party of the youngest person.", "To find the youngest person, we need to find the minimum age in the 'people' table. This can be done using a subquery: (SELECT MIN(Age) FROM people).", "Once we have the minimum age, we can select the party of the person(s) who have that age.", "Construct the final SQL query: We select the 'Party' from the 'people' table where the 'Age' matches the minimum age found in the subquery."], "pred_sql": "SELECT Party FROM people WHERE Age = (SELECT MIN(Age) FROM people);", "gold_sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1", "source_tables": ["people"]}
{"sample_id": 1498, "db_id": "debate", "question": "Show different parties of people along with the number of people in each party.", "rationale": ["Identify the table that contains the relevant data: the 'people' table holds information about individuals and their party affiliations.", "Determine the columns needed for the query: we need the 'Party' column to group the data and count the number of people in each party.", "Use the COUNT() function to count the number of people in each party.", "Group the results by the 'Party' column to get the count for each distinct party."], "pred_sql": "SELECT Party, COUNT(*) AS Number_of_People FROM people GROUP BY Party;", "gold_sql": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party", "source_tables": ["people"]}
{"sample_id": 1499, "db_id": "debate", "question": "Show the party that has the most people.", "rationale": ["Identify the relevant table: The 'people' table contains the 'Party' column which we need to analyze.", "Count the number of people in each party: Use the COUNT() function to count the number of entries for each party.", "Group the results by party: Use GROUP BY to aggregate the counts for each unique party.", "Order the results: Use ORDER BY to sort the results in descending order based on the count of people in each party.", "Limit the results to the top party: Use LIMIT 1 to get only the party with the most people."], "pred_sql": "SELECT Party, COUNT(*) as PartyCount FROM people GROUP BY Party ORDER BY PartyCount DESC LIMIT 1;", "gold_sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}
