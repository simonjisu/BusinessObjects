{"sample_id": 5500, "db_id": "voter_2", "question": "For each advisor, report the total number of students advised by him or her.", "rationale": ["Identify the relevant table: The 'Student' table contains information about students and their advisors.", "Determine the required information: We need to count the number of students for each advisor.", "Use the COUNT() function to count the number of students for each advisor.", "Group the results by the 'Advisor' column to get the total count for each advisor."], "pred_sql": "SELECT Advisor, COUNT(*) AS Total_Students FROM Student GROUP BY Advisor;", "gold_sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor", "source_tables": ["student"]}
{"sample_id": 5501, "db_id": "voter_2", "question": "How many students does each advisor have?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students and their advisors.", "Determine the required information: We need to count the number of students for each advisor.", "Use the COUNT() function to count the number of students grouped by their advisor.", "Group the results by the 'Advisor' column to get the count for each advisor."], "pred_sql": "SELECT Advisor, COUNT(*) AS Student_Count FROM Student GROUP BY Advisor;", "gold_sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor", "source_tables": ["student"]}
{"sample_id": 5502, "db_id": "voter_2", "question": "Report all advisors that advise more than 2 students.", "rationale": ["Identify the relevant table: The 'Student' table contains information about students and their advisors.", "Determine the goal: We need to find advisors who advise more than 2 students.", "Use the GROUP BY clause: This will allow us to group the results by the 'Advisor' column.", "Count the number of students per advisor: We will use COUNT(StuID) to count how many students each advisor has.", "Filter the results: Use the HAVING clause to filter out advisors with 2 or fewer students, specifically keeping those with a count greater than 2."], "pred_sql": "SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;", "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2", "source_tables": ["student"]}
{"sample_id": 5503, "db_id": "voter_2", "question": "Which advisors have more than two students?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students and their advisors.", "Determine the required information: We need to find advisors who have more than two students.", "Use the GROUP BY clause: This will allow us to group the results by the 'Advisor' column.", "Count the number of students per advisor: We will use the COUNT function on 'StuID' to count the number of students for each advisor.", "Filter the results: Use the HAVING clause to filter out advisors with a count of students greater than 2."], "pred_sql": "SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;", "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2", "source_tables": ["student"]}
{"sample_id": 5504, "db_id": "voter_2", "question": "Report all majors that have less than 3 students.", "rationale": ["Identify the table that contains the information about students and their majors, which is the 'Student' table.", "To find the majors with less than 3 students, we need to group the results by the 'Major' column.", "Use the COUNT function to count the number of students (StuID) in each major.", "Apply the HAVING clause to filter the groups where the count of students is less than 3."], "pred_sql": "SELECT Major FROM Student GROUP BY Major HAVING COUNT(StuID) < 3;", "gold_sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "source_tables": ["student"]}
{"sample_id": 5505, "db_id": "voter_2", "question": "What are the majors only less than three students are studying?", "rationale": ["Identify the relevant table: The query pertains to the 'Student' table where the majors are listed.", "Determine the required information: We need to find majors that have less than three students enrolled.", "Use the GROUP BY clause: This will allow us to group the results by the 'Major' column.", "Count the number of students per major: We will use the COUNT() function to count the number of students in each major.", "Filter the results: The HAVING clause will be used to filter the grouped results to only include those with a count of less than three."], "pred_sql": "SELECT Major FROM Student GROUP BY Major HAVING COUNT(*) < 3;", "gold_sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "source_tables": ["student"]}
{"sample_id": 5506, "db_id": "voter_2", "question": "For each election cycle, report the number of voting records.", "rationale": ["Identify the table that contains the voting records, which is the 'Voting_record' table.", "Determine the relevant column for the election cycle, which is 'Election_Cycle'.", "To count the number of voting records for each election cycle, use the COUNT() function.", "Group the results by 'Election_Cycle' to get the count for each cycle."], "pred_sql": "SELECT Election_Cycle, COUNT(*) AS Number_of_Voting_Records FROM Voting_record GROUP BY Election_Cycle;", "gold_sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "source_tables": ["voting_record"]}
{"sample_id": 5507, "db_id": "voter_2", "question": "Count the number of voting records for each election cycle.", "rationale": ["Identify the table that contains the voting records, which is the 'Voting_record' table.", "Determine the relevant column for the election cycle, which is 'Election_Cycle'.", "To count the number of voting records for each election cycle, use the COUNT() function.", "Group the results by 'Election_Cycle' to get the count for each cycle."], "pred_sql": "SELECT Election_Cycle, COUNT(*) AS Voting_Record_Count FROM Voting_record GROUP BY Election_Cycle;", "gold_sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "source_tables": ["voting_record"]}
{"sample_id": 5508, "db_id": "voter_2", "question": "Which major has the most students?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students and their majors.", "Determine the required information: We need to count the number of students in each major.", "Use the COUNT() function to count students grouped by their major.", "Group the results by the 'Major' column to aggregate the counts.", "Order the results in descending order based on the count of students to find the major with the most students.", "Limit the results to 1 to get only the major with the highest count."], "pred_sql": "SELECT Major, COUNT(*) as StudentCount FROM Student GROUP BY Major ORDER BY StudentCount DESC LIMIT 1;", "gold_sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 5509, "db_id": "voter_2", "question": "Find the major that is studied by the largest number of students.", "rationale": ["Identify the table that contains the relevant data, which is the 'Student' table.", "We need to find the major that has the largest number of students, so we will use the COUNT function to count the number of students for each major.", "We will group the results by the 'Major' column to aggregate the counts for each major.", "To find the major with the largest number of students, we will order the results in descending order based on the count of students.", "Finally, we will limit the results to just one entry to get the major with the highest count."], "pred_sql": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 5510, "db_id": "voter_2", "question": "What is the most common major among female (sex is F) students?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students, including their major and sex.", "Filter the records: We need to focus on female students, so we will add a WHERE clause to filter by Sex = 'F'.", "Group the results: To find the most common major, we will group the results by the 'Major' column.", "Count occurrences: We will use COUNT(*) to count how many students are in each major.", "Order the results: To find the most common major, we will order the results in descending order based on the count of students in each major.", "Limit the results: Since we only want the most common major, we will limit the results to 1."], "pred_sql": "SELECT Major, COUNT(*) as MajorCount \nFROM Student \nWHERE Sex = 'F' \nGROUP BY Major \nORDER BY MajorCount DESC \nLIMIT 1;", "gold_sql": "SELECT Major FROM STUDENT WHERE Sex  =  'F' GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 5511, "db_id": "voter_2", "question": "Find the major that is studied by the most female students.", "rationale": ["Identify the relevant table: The 'Student' table contains information about students, including their major and gender.", "Filter the records: We need to focus on female students, so we will add a WHERE clause to filter by 'Sex = 'Female' '.", "Group the results: To find out how many female students are studying each major, we will use the GROUP BY clause on the 'Major' column.", "Count the female students: We will use the COUNT function to count the number of female students in each major.", "Order the results: To find the major with the most female students, we will order the results in descending order based on the count of female students.", "Limit the results: Since we only want the major with the most female students, we will limit the results to 1."], "pred_sql": "SELECT Major, COUNT(*) AS Female_Student_Count\nFROM Student\nWHERE Sex = 'Female'\nGROUP BY Major\nORDER BY Female_Student_Count DESC\nLIMIT 1;", "gold_sql": "SELECT Major FROM STUDENT WHERE Sex  =  'F' GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 5512, "db_id": "voter_2", "question": "What is the city_code of the city that the most students live in?", "rationale": ["Identify the relevant table: The 'Student' table contains the 'city_code' column.", "Group the results by 'city_code' to count the number of students in each city.", "Use the COUNT function to count the number of students for each city_code.", "Order the results in descending order based on the count to find the city with the most students.", "Limit the results to 1 to get only the city_code of the city with the highest count."], "pred_sql": "SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 5513, "db_id": "voter_2", "question": "Return the code of the city that has the most students.", "rationale": ["Identify the relevant table: The 'Student' table contains the 'city_code' column.", "Determine the goal: We need to find the city code with the most students.", "Use the COUNT function to count the number of students in each city.", "Group the results by 'city_code' to aggregate the counts for each city.", "Order the results in descending order based on the count of students to get the city with the most students at the top.", "Limit the results to 1 to get only the city code with the highest count."], "pred_sql": "SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 5514, "db_id": "voter_2", "question": "Report the distinct advisors who have more than 2 students.", "rationale": ["Identify the relevant table: The query requires information about advisors and their associated students, which is found in the 'Student' table.", "Select the 'Advisor' column: We need to report the distinct advisors, so we will select the 'Advisor' column from the 'Student' table.", "Group by 'Advisor': To count the number of students per advisor, we will group the results by the 'Advisor' column.", "Count the number of students: We will use the COUNT function to count the number of students (StuID) for each advisor.", "Filter advisors with more than 2 students: We will use the HAVING clause to filter the groups where the count of students is greater than 2."], "pred_sql": "SELECT DISTINCT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;", "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2", "source_tables": ["student"]}
{"sample_id": 5515, "db_id": "voter_2", "question": "Which advisors are advising more than 2 students?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students and their advisors.", "Determine the required information: We need to find advisors who are advising more than 2 students.", "Use the GROUP BY clause: This will allow us to group the results by the 'Advisor' column.", "Count the number of students per advisor: We will use COUNT(StuID) to count the number of students for each advisor.", "Filter the results: Use the HAVING clause to filter out advisors with 2 or fewer students, specifically keeping those with a count greater than 2."], "pred_sql": "SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;", "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2", "source_tables": ["student"]}
{"sample_id": 5516, "db_id": "products_gen_characteristics", "question": "How many products are there?", "rationale": ["Identify the requirement: Count the total number of products.", "Determine the relevant table: The 'Products' table contains the product information.", "Use the COUNT() function to count the number of entries in the 'Products' table.", "Construct the SQL query to select the count from the 'Products' table."], "pred_sql": "SELECT COUNT(*) AS product_count FROM Products;", "gold_sql": "SELECT count(*) FROM products", "source_tables": ["products"]}
{"sample_id": 5517, "db_id": "products_gen_characteristics", "question": "Count the number of products.", "rationale": ["Identify the goal: We need to count the number of products in the Products table.", "Determine the appropriate SQL function: The COUNT() function is used to count the number of rows in a table.", "Specify the table to count from: The table we are interested in is 'Products'.", "Construct the SQL query: We will use 'SELECT COUNT(*) AS product_count FROM Products;' to get the count of products."], "pred_sql": "SELECT COUNT(*) AS product_count FROM Products;", "gold_sql": "SELECT count(*) FROM products", "source_tables": ["products"]}
{"sample_id": 5518, "db_id": "products_gen_characteristics", "question": "How many colors are there?", "rationale": ["Identify the table that contains color information, which is 'Ref_Colors'.", "To find out how many colors there are, we need to count the number of entries in the 'Ref_Colors' table.", "Use the COUNT() function to count all rows in the 'Ref_Colors' table.", "Select the count with an alias 'color_count' for clarity."], "pred_sql": "SELECT COUNT(*) AS color_count FROM Ref_Colors;", "gold_sql": "SELECT count(*) FROM ref_colors", "source_tables": ["ref_colors"]}
{"sample_id": 5519, "db_id": "products_gen_characteristics", "question": "Count the number of colors.", "rationale": ["Identify the table that contains color information, which is 'Ref_Colors'.", "To count the number of colors, we need to use the COUNT() function in SQL.", "The SQL query will select the count of all entries in the 'Ref_Colors' table.", "The final SQL query is constructed as 'SELECT COUNT(*) AS color_count FROM Ref_Colors;' to return the count of colors with an alias 'color_count'."], "pred_sql": "SELECT COUNT(*) AS color_count FROM Ref_Colors;", "gold_sql": "SELECT count(*) FROM ref_colors", "source_tables": ["ref_colors"]}
{"sample_id": 5520, "db_id": "products_gen_characteristics", "question": "How many characteristics are there?", "rationale": ["Identify the table that contains the characteristics, which is the 'Characteristics' table.", "To find out how many characteristics there are, we need to count the number of entries in the 'Characteristics' table.", "Use the COUNT() function to get the total number of characteristics.", "Construct the SQL query to select the count from the 'Characteristics' table."], "pred_sql": "SELECT COUNT(*) AS total_characteristics FROM Characteristics;", "gold_sql": "SELECT count(*) FROM CHARACTERISTICS", "source_tables": ["characteristics"]}
{"sample_id": 5521, "db_id": "products_gen_characteristics", "question": "Count the number of characteristics.", "rationale": ["Identify the table that contains the characteristics, which is the 'Characteristics' table.", "To count the number of characteristics, we will use the COUNT() function in SQL.", "The SQL query will select the count of all rows in the 'Characteristics' table.", "The final SQL query will be 'SELECT COUNT(*) AS characteristic_count FROM Characteristics;' to return the total number of characteristics."], "pred_sql": "SELECT COUNT(*) AS characteristic_count FROM Characteristics;", "gold_sql": "SELECT count(*) FROM CHARACTERISTICS", "source_tables": ["characteristics"]}
{"sample_id": 5522, "db_id": "products_gen_characteristics", "question": "What are the names and buying prices of all the products?", "rationale": ["Identify the required information: product names and buying prices.", "Locate the appropriate table: Products contains both product names and buying prices.", "Construct the SQL SELECT statement to retrieve product_name and typical_buying_price from the Products table."], "pred_sql": "SELECT product_name, typical_buying_price FROM Products;", "gold_sql": "SELECT product_name ,  typical_buying_price FROM products", "source_tables": ["products"]}
{"sample_id": 5523, "db_id": "products_gen_characteristics", "question": "Return the names and typical buying prices for all products.", "rationale": ["Identify the required columns: product_name and typical_buying_price.", "Determine the table that contains these columns, which is the Products table.", "Construct the SQL SELECT statement to retrieve the specified columns from the Products table."], "pred_sql": "SELECT product_name, typical_buying_price FROM Products;", "gold_sql": "SELECT product_name ,  typical_buying_price FROM products", "source_tables": ["products"]}
{"sample_id": 5524, "db_id": "products_gen_characteristics", "question": "List the description of all the colors.", "rationale": ["Identify the table that contains color information, which is 'Ref_Colors'.", "Determine the specific column that holds the description of the colors, which is 'color_description'.", "Construct the SQL query to select the 'color_description' from the 'Ref_Colors' table."], "pred_sql": "SELECT color_description FROM Ref_Colors;", "gold_sql": "SELECT color_description FROM ref_colors", "source_tables": ["ref_colors"]}
{"sample_id": 5525, "db_id": "products_gen_characteristics", "question": "What are the descriptions for each color?", "rationale": ["Identify the table that contains color descriptions, which is Ref_Colors.", "Determine the specific column that holds the descriptions of the colors, which is color_description.", "Construct a SQL SELECT statement to retrieve all entries from the color_description column in the Ref_Colors table."], "pred_sql": "SELECT color_description FROM Ref_Colors;", "gold_sql": "SELECT color_description FROM ref_colors", "source_tables": ["ref_colors"]}
{"sample_id": 5526, "db_id": "products_gen_characteristics", "question": "Find the names of all the product characteristics.", "rationale": ["Identify the table that contains product characteristics, which is the 'Characteristics' table.", "Determine the specific column that holds the names of the product characteristics, which is 'characteristic_name'.", "Construct the SQL query to select the 'characteristic_name' from the 'Characteristics' table."], "pred_sql": "SELECT characteristic_name FROM Characteristics;", "gold_sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "source_tables": ["characteristics"]}
{"sample_id": 5527, "db_id": "products_gen_characteristics", "question": "What are the different names of the product characteristics?", "rationale": ["The user wants to know the different names of product characteristics.", "The relevant table for product characteristics is 'Characteristics'.", "To get the unique names, we will use the SELECT statement with DISTINCT on the 'characteristic_name' column.", "The final SQL query will select distinct characteristic names from the Characteristics table."], "pred_sql": "SELECT DISTINCT characteristic_name FROM Characteristics;", "gold_sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "source_tables": ["characteristics"]}
{"sample_id": 5528, "db_id": "products_gen_characteristics", "question": "What are the names of products with category \"Spices\"?", "rationale": ["Identify the relevant table: Products contains the product names and product categories.", "Determine the condition: We need to filter products based on the category 'Spices'.", "Find the corresponding product category code for 'Spices' from the Ref_Product_Categories table.", "Construct the SQL query to select product names from the Products table where the product_category_code matches the code retrieved from the Ref_Product_Categories table."], "pred_sql": "SELECT product_name FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Spices');", "gold_sql": "SELECT product_name FROM products WHERE product_category_code  =  'Spices'", "source_tables": ["products"]}
{"sample_id": 5529, "db_id": "products_gen_characteristics", "question": "Return the names of products in the category 'Spices'.", "rationale": ["Identify the relevant table to query for product names, which is the 'Products' table.", "Determine the condition needed to filter products by category, which involves the 'product_category_code'.", "To find the 'product_category_code' for 'Spices', a subquery is needed to select it from the 'Ref_Product_Categories' table where the description matches 'Spices'.", "Combine the main query and the subquery to retrieve the product names that belong to the 'Spices' category."], "pred_sql": "SELECT product_name FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Spices');", "gold_sql": "SELECT product_name FROM products WHERE product_category_code  =  'Spices'", "source_tables": ["products"]}
{"sample_id": 5530, "db_id": "products_gen_characteristics", "question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".", "rationale": ["Identify the tables needed: Products, Ref_Product_Categories, and Ref_Colors.", "Determine the columns to select: product_name from Products, color_description from Ref_Colors, and product_description from Products.", "Establish the relationships between the tables using JOINs: Products to Ref_Product_Categories on product_category_code, and Products to Ref_Colors on color_code.", "Add a WHERE clause to filter results for products in the 'Herbs' category by matching product_category_description."], "pred_sql": "SELECT Products.product_name, Ref_Colors.color_description, Products.product_description \nFROM Products \nJOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code \nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code \nWHERE Ref_Product_Categories.product_category_description = 'Herbs';", "gold_sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  'Herbs'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5531, "db_id": "products_gen_characteristics", "question": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?", "rationale": ["Identify the required columns: product names, color descriptions, and product descriptions.", "Determine the relevant tables: Products for product details, Ref_Colors for color descriptions, and Ref_Product_Categories for product category descriptions.", "Establish the relationships between the tables using JOINs: Products to Ref_Product_Categories on product_category_code, and Products to Ref_Colors on color_code.", "Filter the results to include only products in the 'Herbs' category by adding a WHERE clause that checks the product_category_description."], "pred_sql": "SELECT Products.product_name, Ref_Colors.color_description, Products.product_description \nFROM Products \nJOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code \nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code \nWHERE Ref_Product_Categories.product_category_description = 'Herbs';", "gold_sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  'Herbs'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5532, "db_id": "products_gen_characteristics", "question": "How many products are there under the category \"Seeds\"?", "rationale": ["Identify the relevant table to query, which is 'Products' for product information.", "Determine the condition needed to filter products by category, which involves the 'product_category_code'.", "To find the 'product_category_code' for the category 'Seeds', a subquery is needed on the 'Ref_Product_Categories' table.", "The subquery will select the 'product_category_code' where 'product_category_description' matches 'Seeds'.", "Finally, the main query will count the number of products that match the specified category code."], "pred_sql": "SELECT COUNT(*) AS product_count FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Seeds');", "gold_sql": "SELECT count(*) FROM products WHERE product_category_code  =  'Seeds'", "source_tables": ["products"]}
{"sample_id": 5533, "db_id": "products_gen_characteristics", "question": "Count the number of products in the category 'Seeds'.", "rationale": ["Identify the table that contains product information, which is the 'Products' table.", "Determine the column that links products to their categories, which is 'product_category_code'.", "Identify the table that contains product category descriptions, which is 'Ref_Product_Categories'.", "Find the specific category description we are interested in, which is 'Seeds'.", "Construct a subquery to get the 'product_category_code' for the category 'Seeds'.", "Use the COUNT function to count the number of products in the 'Products' table that match the 'product_category_code' obtained from the subquery."], "pred_sql": "SELECT COUNT(*) AS product_count FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Seeds');", "gold_sql": "SELECT count(*) FROM products WHERE product_category_code  =  'Seeds'", "source_tables": ["products"]}
{"sample_id": 5534, "db_id": "products_gen_characteristics", "question": "Find the number of products with category \"Spices\" and typically sold above 1000.", "rationale": ["Identify the relevant tables: Products and Ref_Product_Categories.", "Determine the relationship between Products and Ref_Product_Categories using the foreign key product_category_code.", "Filter the products based on the category description 'Spices'.", "Add a condition to count only those products with a typical selling price greater than 1000.", "Use the COUNT() function to get the total number of products that meet these criteria."], "pred_sql": "SELECT COUNT(*) AS product_count \nFROM Products p \nJOIN Ref_Product_Categories c ON p.product_category_code = c.product_category_code \nWHERE c.product_category_description = 'Spices' \nAND p.typical_selling_price > 1000;", "gold_sql": "SELECT count(*) FROM products WHERE product_category_code  =  'Spices' AND typical_buying_price  >  1000", "source_tables": ["products"]}
{"sample_id": 5535, "db_id": "products_gen_characteristics", "question": "How many products are in the 'Spices' category and have a typical price of over 1000?", "rationale": ["Identify the relevant table: Products, which contains product information including category and price.", "Determine the condition for the product category: We need to find the category code for 'Spices' from the Ref_Product_Categories table.", "Use a subquery to get the product_category_code for 'Spices'.", "Set the condition for typical_selling_price to be greater than 1000.", "Count the number of products that meet both conditions: in the 'Spices' category and with a typical selling price over 1000."], "pred_sql": "SELECT COUNT(*) AS product_count FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Spices') AND typical_selling_price > 1000;", "gold_sql": "SELECT count(*) FROM products WHERE product_category_code  =  'Spices' AND typical_buying_price  >  1000", "source_tables": ["products"]}
{"sample_id": 5536, "db_id": "products_gen_characteristics", "question": "What is the category and typical buying price  of the product with name \"cumin\"?", "rationale": ["Identify the relevant tables: Products and Ref_Product_Categories.", "Determine the columns needed: product_category_description from Ref_Product_Categories and typical_buying_price from Products.", "Establish the relationship between the tables using the foreign key: Products.product_category_code links to Ref_Product_Categories.product_category_code.", "Filter the results based on the product name 'cumin'.", "Construct the SQL SELECT statement to retrieve the desired columns with the appropriate JOIN and WHERE clause."], "pred_sql": "SELECT rpc.product_category_description, p.typical_buying_price \nFROM Products p \nJOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code \nWHERE p.product_name = 'cumin';", "gold_sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  'cumin'", "source_tables": ["products"]}
{"sample_id": 5537, "db_id": "products_gen_characteristics", "question": "Return the category code and typical price of 'cumin'.", "rationale": ["Identify the table that contains product information, which is the 'Products' table.", "Determine the columns needed: 'product_category_code' and 'typical_buying_price'.", "Filter the results to find the product with the name 'cumin' using a WHERE clause."], "pred_sql": "SELECT p.product_category_code, p.typical_buying_price FROM Products p WHERE p.product_name = 'cumin';", "gold_sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  'cumin'", "source_tables": ["products"]}
{"sample_id": 5538, "db_id": "products_gen_characteristics", "question": "Which category does the product named \"flax\" belong to?", "rationale": ["Identify the relevant tables: We need to find the product category for a specific product, so we will use the Products table and the Ref_Product_Categories table.", "Determine the relationship: The Products table has a foreign key 'product_category_code' that links to the 'product_category_code' in the Ref_Product_Categories table.", "Formulate the SELECT statement: We want to retrieve the 'product_category_description' from the Ref_Product_Categories table.", "Add the JOIN clause: We need to join the Products table with the Ref_Product_Categories table on the 'product_category_code'.", "Add the WHERE clause: We need to filter the results to only include the product with the name 'flax'."], "pred_sql": "SELECT Ref_Product_Categories.product_category_description \nFROM Products \nJOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code \nWHERE Products.product_name = 'flax';", "gold_sql": "SELECT product_category_code FROM products WHERE product_name  =  'flax'", "source_tables": ["products"]}
{"sample_id": 5539, "db_id": "products_gen_characteristics", "question": "What is the code of the category that the product with the name 'flax' belongs to?", "rationale": ["Identify the table that contains product information, which is the 'Products' table.", "Determine the relevant column that contains the product name, which is 'product_name'.", "Identify the column that contains the product category code, which is 'product_category_code'.", "Construct a SQL query to select 'product_category_code' from 'Products' where 'product_name' is 'flax'."], "pred_sql": "SELECT product_category_code FROM Products WHERE product_name = 'flax';", "gold_sql": "SELECT product_category_code FROM products WHERE product_name  =  'flax'", "source_tables": ["products"]}
{"sample_id": 5540, "db_id": "products_gen_characteristics", "question": "What is the name of the product with the color description 'yellow'?", "rationale": ["Identify the relevant tables: Products and Ref_Colors.", "Determine the relationship between the tables: Products has a foreign key color_code that links to Ref_Colors.", "We need to select the product_name from the Products table.", "We need to filter the results based on the color description, which is found in the Ref_Colors table.", "Construct the SQL query using an INNER JOIN to combine the two tables on the color_code, and add a WHERE clause to filter by the color description 'yellow'."], "pred_sql": "SELECT product_name FROM Products INNER JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Colors.color_description = 'yellow';", "gold_sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5541, "db_id": "products_gen_characteristics", "question": "Give the name of the products that have a color description 'yellow'.", "rationale": ["Identify the relevant table for product names, which is the 'Products' table.", "Identify the relevant table for color descriptions, which is the 'Ref_Colors' table.", "Establish a relationship between the 'Products' table and the 'Ref_Colors' table using the 'color_code' foreign key.", "Formulate a SELECT statement to retrieve 'product_name' from the 'Products' table.", "Add a JOIN clause to connect 'Products' with 'Ref_Colors' based on 'color_code'.", "Add a WHERE clause to filter results where 'color_description' is 'yellow'."], "pred_sql": "SELECT product_name FROM Products INNER JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Colors.color_description = 'yellow';", "gold_sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5542, "db_id": "products_gen_characteristics", "question": "Find the category descriptions of the products whose descriptions include letter 't'.", "rationale": ["Identify the relevant tables: We need to retrieve product category descriptions, which are in the Ref_Product_Categories table, and we also need to filter products based on their descriptions, which are in the Products table.", "Determine the relationship between tables: The Products table has a foreign key relationship with the Ref_Product_Categories table through the product_category_code. We will need to join these two tables to access the category descriptions based on the products.", "Formulate the SQL query: We will select the product_category_description from Ref_Product_Categories and join it with Products on the product_category_code. We will apply a WHERE clause to filter products whose descriptions contain the letter 't'.", "Use DISTINCT to avoid duplicate category descriptions in the result."], "pred_sql": "SELECT DISTINCT rpc.product_category_description \nFROM Ref_Product_Categories rpc \nJOIN Products p ON rpc.product_category_code = p.product_category_code \nWHERE p.product_description LIKE '%t%';", "gold_sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'", "source_tables": ["products", "ref_product_categories"]}
{"sample_id": 5543, "db_id": "products_gen_characteristics", "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?", "rationale": ["Identify the relevant tables: We need to get product category descriptions, so we will use the Ref_Product_Categories table. We also need to filter products based on their descriptions, which requires the Products table.", "Determine the relationship between tables: The Products table has a foreign key relationship with the Ref_Product_Categories table through the product_category_code. We will need to join these two tables to access the product category descriptions for the products.", "Formulate the WHERE clause: We need to filter products whose descriptions contain the letter 't'. This can be done using the LIKE operator with a wildcard in the WHERE clause.", "Select the distinct product category descriptions: Since we want the descriptions of the categories, we will select the product_category_description from the Ref_Product_Categories table and ensure that the results are distinct to avoid duplicates."], "pred_sql": "SELECT DISTINCT rpc.product_category_description\nFROM Ref_Product_Categories rpc\nJOIN Products p ON rpc.product_category_code = p.product_category_code\nWHERE p.product_description LIKE '%t%';", "gold_sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'", "source_tables": ["products", "ref_product_categories"]}
{"sample_id": 5544, "db_id": "products_gen_characteristics", "question": "What is the color description of the product with name \"catnip\"?", "rationale": ["Identify the relevant tables: Products and Ref_Colors.", "Determine the columns needed: color_description from Ref_Colors and product_name from Products.", "Establish the relationship between the tables: Products has a foreign key color_code that links to Ref_Colors.", "Formulate the SQL query to select the color_description from Ref_Colors where the product_name in Products matches 'catnip'."], "pred_sql": "SELECT Ref_Colors.color_description FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Products.product_name = 'catnip';", "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  'catnip'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5545, "db_id": "products_gen_characteristics", "question": "Give the color description for the product 'catnip'.", "rationale": ["Identify the relevant tables: We need to get the color description for a specific product, which involves the Products table and the Ref_Colors table.", "Determine the relationship: The Products table has a foreign key 'color_code' that links to the 'color_code' in the Ref_Colors table.", "Select the required column: We need to retrieve the 'color_description' from the Ref_Colors table.", "Filter the results: We need to filter the products to find the one with the name 'catnip'.", "Construct the SQL query: Using a JOIN to connect the Products and Ref_Colors tables, and applying the WHERE clause to filter by product name."], "pred_sql": "SELECT Ref_Colors.color_description \nFROM Products \nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code \nWHERE Products.product_name = 'catnip';", "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  'catnip'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5546, "db_id": "products_gen_characteristics", "question": "What is the color code and description of the product named \"chervil\"?", "rationale": ["Identify the relevant tables: Products and Ref_Colors are needed to get the color code and description.", "Determine the columns to select: We need 'color_code' from Products and 'color_description' from Ref_Colors.", "Establish the join condition: Products.color_code should match Ref_Colors.color_code to get the color description.", "Add a filter condition: We need to filter the results where the product name is 'chervil'.", "Construct the SQL query using SELECT, JOIN, and WHERE clauses."], "pred_sql": "SELECT Products.color_code, Ref_Colors.color_description \nFROM Products \nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code \nWHERE Products.product_name = 'chervil';", "gold_sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  'chervil'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5547, "db_id": "products_gen_characteristics", "question": "Return the color code and description for the product with the name 'chervil'.", "rationale": ["Identify the tables needed: Products and Ref_Colors.", "Determine the columns to select: color_code from Products and color_description from Ref_Colors.", "Establish the relationship between the tables: Products.color_code links to Ref_Colors.color_code.", "Add a condition to filter the product by name: WHERE Products.product_name = 'chervil'.", "Construct the SQL query using SELECT, JOIN, and WHERE clauses."], "pred_sql": "SELECT Products.color_code, Ref_Colors.color_description \nFROM Products \nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code \nWHERE Products.product_name = 'chervil';", "gold_sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  'chervil'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5548, "db_id": "products_gen_characteristics", "question": "Find the id and color description of the products with at least 2 characteristics.", "rationale": ["Identify the required fields: product_id and color_description.", "The product_id is from the Products table, and the color_description is from the Ref_Colors table.", "To get the color_description, we need to join the Products table with the Ref_Colors table on the color_code.", "We also need to join the Products table with the Product_Characteristics table to count the number of characteristics for each product.", "We will group the results by product_id and color_description to aggregate the characteristics count.", "Finally, we will use the HAVING clause to filter products that have at least 2 characteristics."], "pred_sql": "SELECT p.product_id, rc.color_description \nFROM Products p \nJOIN Ref_Colors rc ON p.color_code = rc.color_code \nJOIN Product_Characteristics pc ON p.product_id = pc.product_id \nGROUP BY p.product_id, rc.color_description \nHAVING COUNT(pc.characteristic_id) >= 2;", "gold_sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2", "source_tables": ["products", "ref_colors", "product_characteristics"]}
{"sample_id": 5549, "db_id": "products_gen_characteristics", "question": "What are the product ids and color descriptions for products with two or more characteristics?", "rationale": ["Identify the tables needed: Products for product IDs and Ref_Colors for color descriptions.", "Join Products with Ref_Colors on the color_code to get color descriptions for each product.", "Join Products with Product_Characteristics to link products with their characteristics.", "Group the results by product_id and color_description to aggregate the characteristics for each product.", "Use HAVING clause to filter groups that have two or more characteristics."], "pred_sql": "SELECT p.product_id, c.color_description \nFROM Products p \nJOIN Ref_Colors c ON p.color_code = c.color_code \nJOIN Product_Characteristics pc ON p.product_id = pc.product_id \nGROUP BY p.product_id, c.color_description \nHAVING COUNT(pc.characteristic_id) >= 2;", "gold_sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2", "source_tables": ["products", "ref_colors", "product_characteristics"]}
{"sample_id": 5550, "db_id": "products_gen_characteristics", "question": "List all the product names with the color description \"white\".", "rationale": ["Identify the relevant tables: Products and Ref_Colors.", "Determine the columns needed: product_name from Products and color_description from Ref_Colors.", "Establish the relationship between the tables using the foreign key: Products.color_code = Ref_Colors.color_code.", "Filter the results to include only those products where the color description is 'white'.", "Construct the SQL query using SELECT, JOIN, and WHERE clauses."], "pred_sql": "SELECT Products.product_name \nFROM Products \nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code \nWHERE Ref_Colors.color_description = 'white';", "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  'white'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5551, "db_id": "products_gen_characteristics", "question": "What are the names of products with 'white' as their color description?", "rationale": ["Identify the relevant tables: Products and Ref_Colors.", "Determine the relationship between the tables: Products has a foreign key color_code that links to Ref_Colors.", "Select the product_name from the Products table.", "Filter the results based on the color description from the Ref_Colors table, specifically looking for 'white'."], "pred_sql": "SELECT product_name FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Colors.color_description = 'white';", "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  'white'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5552, "db_id": "products_gen_characteristics", "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?", "rationale": ["Identify the relevant tables: Products and Ref_Colors.", "Determine the columns needed: product_name, typical_buying_price, and typical_selling_price from Products.", "Establish the relationship between Products and Ref_Colors using the color_code foreign key.", "Filter the results based on the color description being 'yellow'.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT Products.product_name, Products.typical_buying_price, Products.typical_selling_price \nFROM Products \nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code \nWHERE Ref_Colors.color_description = 'yellow';", "gold_sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  'yellow'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5553, "db_id": "products_gen_characteristics", "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.", "rationale": ["Identify the relevant tables: Products and Ref_Colors.", "Determine the columns needed: product_name, typical_buying_price, and typical_selling_price from Products.", "Establish the relationship between Products and Ref_Colors using the color_code foreign key.", "Filter the results to include only those products where the color description is 'yellow'.", "Construct the SQL SELECT statement to retrieve the specified columns from the joined tables."], "pred_sql": "SELECT Products.product_name, Products.typical_buying_price, Products.typical_selling_price \nFROM Products \nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code \nWHERE Ref_Colors.color_description = 'yellow';", "gold_sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  'yellow'", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5554, "db_id": "products_gen_characteristics", "question": "How many characteristics does the product named \"sesame\" have?", "rationale": ["Identify the relevant tables: Products and Product_Characteristics are needed to find the characteristics of a specific product.", "We need to count the number of characteristics, so we will use the COUNT() function.", "Join the Products table with the Product_Characteristics table on the product_id to link products with their characteristics.", "Filter the results to only include the product with the name 'sesame'.", "Select the count of characteristic_id from the joined tables."], "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count\nFROM Products p\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nWHERE p.product_name = 'sesame';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  'sesame'", "source_tables": ["products", "product_characteristics"]}
{"sample_id": 5555, "db_id": "products_gen_characteristics", "question": "Count the number of characteristics the product 'sesame' has.", "rationale": ["Identify the main goal: Count the number of characteristics for the product named 'sesame'.", "Determine the relevant tables: Products and Product_Characteristics are needed to link products to their characteristics.", "Use a JOIN to connect Products and Product_Characteristics on the product_id field.", "Filter the results to only include the product with the name 'sesame'.", "Use the COUNT() function to count the number of characteristic_id entries for the specified product."], "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count\nFROM Products p\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nWHERE p.product_name = 'sesame';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  'sesame'", "source_tables": ["products", "product_characteristics"]}
{"sample_id": 5556, "db_id": "products_gen_characteristics", "question": "How many distinct characteristic names does the product \"cumin\" have?", "rationale": ["Identify the relevant tables: Products, Product_Characteristics, and Characteristics are needed to find the distinct characteristic names for the product 'cumin'.", "We need to join these tables based on their relationships: Products to Product_Characteristics on product_id, and Product_Characteristics to Characteristics on characteristic_id.", "We will filter the results to only include the product with the name 'cumin'.", "To get the distinct characteristic names, we will use the COUNT(DISTINCT ...) function.", "Finally, we will select the count of distinct characteristic names as the output."], "pred_sql": "SELECT COUNT(DISTINCT Characteristics.characteristic_name) AS distinct_characteristic_count\nFROM Products\nJOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id\nJOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id\nWHERE Products.product_name = 'cumin';", "gold_sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'sesame'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5557, "db_id": "products_gen_characteristics", "question": "Count the number of different characteristic names the product 'cumin' has.", "rationale": ["Identify the relevant tables: Products, Product_Characteristics, and Characteristics are needed to find the characteristic names for the product 'cumin'.", "We need to count distinct characteristic names, so we will use COUNT(DISTINCT c.characteristic_name).", "Join the Products table with Product_Characteristics on product_id to link products to their characteristics.", "Join the Product_Characteristics table with Characteristics on characteristic_id to access the characteristic names.", "Filter the results to only include the product with the name 'cumin' using a WHERE clause."], "pred_sql": "SELECT COUNT(DISTINCT c.characteristic_name) AS distinct_characteristic_count\nFROM Products p\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nJOIN Characteristics c ON pc.characteristic_id = c.characteristic_id\nWHERE p.product_name = 'cumin';", "gold_sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'sesame'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5558, "db_id": "products_gen_characteristics", "question": "What are all the characteristic names of product \"sesame\"?", "rationale": ["Identify the relevant tables: Products, Product_Characteristics, and Characteristics are needed to find the characteristic names for a specific product.", "The Products table contains the product name, so we will filter by the product name 'sesame'.", "The Product_Characteristics table links products to their characteristics, so we will join this table with Products on product_id.", "The Characteristics table contains the characteristic names, so we will join this table with Product_Characteristics on characteristic_id.", "Finally, we will select the characteristic_name from the Characteristics table where the product name matches 'sesame'."], "pred_sql": "SELECT Characteristics.characteristic_name \nFROM Products \nJOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id \nJOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id \nWHERE Products.product_name = 'sesame';", "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'sesame'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5559, "db_id": "products_gen_characteristics", "question": "Return the characteristic names of the 'sesame' product.", "rationale": ["Identify the relevant tables: Products, Product_Characteristics, and Characteristics are needed to get the characteristic names for a specific product.", "Determine the relationship between the tables: Products is linked to Product_Characteristics through product_id, and Product_Characteristics is linked to Characteristics through characteristic_id.", "Specify the product of interest: The product name 'sesame' is used to filter the results.", "Construct the SQL query to select the characteristic names from the Characteristics table, joining the necessary tables and applying the filter for the product name."], "pred_sql": "SELECT Characteristics.characteristic_name \nFROM Products \nJOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id \nJOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id \nWHERE Products.product_name = 'sesame';", "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'sesame'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5560, "db_id": "products_gen_characteristics", "question": "List all the characteristic names and data types of product \"cumin\".", "rationale": ["Identify the tables needed: Products, Product_Characteristics, and Characteristics.", "We need to retrieve the characteristic names and data types, which are in the Characteristics table.", "To link the products to their characteristics, we will use the Product_Characteristics table as a junction table.", "We will join Products with Product_Characteristics on product_id, and then join Product_Characteristics with Characteristics on characteristic_id.", "Finally, we will filter the results to only include the product with the name 'cumin'."], "pred_sql": "SELECT Characteristics.characteristic_name, Characteristics.characteristic_data_type \nFROM Products \nJOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id \nJOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id \nWHERE Products.product_name = 'cumin';", "gold_sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'cumin'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5561, "db_id": "products_gen_characteristics", "question": "What are the names and data types of the characteristics of the 'cumin' product?", "rationale": ["Identify the relevant tables: Products, Product_Characteristics, and Characteristics are needed to get the characteristic names and data types for a specific product.", "The Products table contains the product name, so we will filter by the product name 'cumin'.", "The Product_Characteristics table links products to their characteristics, so we will join this table with Products on product_id.", "The Characteristics table contains the characteristic names and data types, so we will join this table with Product_Characteristics on characteristic_id.", "Select the characteristic_name and characteristic_data_type from the Characteristics table where the product name matches 'cumin'."], "pred_sql": "SELECT Characteristics.characteristic_name, Characteristics.characteristic_data_type \nFROM Products \nJOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id \nJOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id \nWHERE Products.product_name = 'cumin';", "gold_sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'cumin'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5562, "db_id": "products_gen_characteristics", "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".", "rationale": ["Identify the tables needed: Products, Product_Characteristics, Characteristics, and Ref_Characteristic_Types.", "We need to select characteristics of a specific product, so we will join Products with Product_Characteristics on product_id.", "Next, we join Product_Characteristics with Characteristics on characteristic_id to get the characteristic details.", "We also need to join with Ref_Characteristic_Types to filter by the characteristic type code 'Grade'.", "Finally, we filter the results where the product name is 'sesame' and the characteristic type code is 'Grade'.", "Select the relevant columns: characteristic_name and product_characteristic_value."], "pred_sql": "SELECT c.characteristic_name, pc.product_characteristic_value \nFROM Products p \nJOIN Product_Characteristics pc ON p.product_id = pc.product_id \nJOIN Characteristics c ON pc.characteristic_id = c.characteristic_id \nJOIN Ref_Characteristic_Types rct ON c.characteristic_type_code = rct.characteristic_type_code \nWHERE p.product_name = 'sesame' AND rct.characteristic_type_code = 'Grade';", "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'sesame' AND t3.characteristic_type_code  =  'Grade'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5563, "db_id": "products_gen_characteristics", "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?", "rationale": ["Identify the relevant tables: Products, Product_Characteristics, Characteristics, and Ref_Characteristic_Types.", "We need to find the characteristics of a specific product, so we will join the Products table with the Product_Characteristics table on product_id.", "Next, we join the Product_Characteristics table with the Characteristics table on characteristic_id to access the characteristic names.", "To filter by characteristic type, we join the Characteristics table with the Ref_Characteristic_Types table on characteristic_type_code.", "Finally, we apply the WHERE clause to filter for the product name 'sesame' and the characteristic type code 'Grade'."], "pred_sql": "SELECT Characteristics.characteristic_name \nFROM Products \nJOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id \nJOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id \nJOIN Ref_Characteristic_Types ON Characteristics.characteristic_type_code = Ref_Characteristic_Types.characteristic_type_code \nWHERE Products.product_name = 'sesame' \nAND Ref_Characteristic_Types.characteristic_type_code = 'Grade';", "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'sesame' AND t3.characteristic_type_code  =  'Grade'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5564, "db_id": "products_gen_characteristics", "question": "How many characteristics does the product named \"laurel\" have?", "rationale": ["Identify the relevant tables: Products and Product_Characteristics are needed to find the characteristics of a specific product.", "We need to count the number of characteristics for the product named 'laurel'.", "Use a JOIN between Products and Product_Characteristics on the product_id to link products with their characteristics.", "Filter the results to only include the product with the name 'laurel'.", "Use the COUNT function to count the number of characteristic_id entries for the specified product."], "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count\nFROM Products p\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nWHERE p.product_name = 'laurel';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'laurel'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5565, "db_id": "products_gen_characteristics", "question": "Count the number of characteristics of the product named 'laurel'.", "rationale": ["Identify the relevant tables: Products and Product_Characteristics are needed to link products to their characteristics.", "We need to count the characteristics, so we will use the COUNT function in SQL.", "To get the characteristics for a specific product, we will filter the Products table by the product name 'laurel'.", "We will join the Products table with the Product_Characteristics table on the product_id to get the characteristics associated with the product.", "We will use DISTINCT in the COUNT function to ensure we count unique characteristics only."], "pred_sql": "SELECT COUNT(DISTINCT pc.characteristic_id) AS characteristic_count\nFROM Products p\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nWHERE p.product_name = 'laurel';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'laurel'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5566, "db_id": "products_gen_characteristics", "question": "Find the number of characteristics that the product \"flax\" has.", "rationale": ["Identify the relevant tables: Products and Product_Characteristics are needed to find the characteristics of a specific product.", "We need to count the number of characteristics, so we will use the COUNT() function.", "The product name 'flax' will be used to filter the Products table.", "Join the Products table with the Product_Characteristics table on the product_id to link products with their characteristics.", "The final query will select the count of characteristic_id from the joined tables where the product name matches 'flax'."], "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count\nFROM Products p\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nWHERE p.product_name = 'flax';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'flax'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5567, "db_id": "products_gen_characteristics", "question": "Count the number of characteristics of the 'flax' product.", "rationale": ["Identify the main goal: Count the number of characteristics for the product named 'flax'.", "Determine the relevant tables: We need to access the Products table to find the product and the Product_Characteristics table to count the characteristics associated with that product.", "Establish the relationship between the tables: The Products table is linked to the Product_Characteristics table through the product_id.", "Formulate the SQL query: Use a JOIN to connect the Products and Product_Characteristics tables, and apply a COUNT function to count the characteristics for the specified product name."], "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count\nFROM Products p\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nWHERE p.product_name = 'flax';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  'flax'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5568, "db_id": "products_gen_characteristics", "question": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".", "rationale": ["Identify the tables needed: Products, Ref_Colors, Product_Characteristics, and Characteristics.", "Determine the relationships between the tables: Products is linked to Ref_Colors via color_code, and to Product_Characteristics via product_id. Product_Characteristics is linked to Characteristics via characteristic_id.", "Select the product_name from the Products table.", "Join the Products table with Ref_Colors to filter by color description 'red'.", "Join the Products table with Product_Characteristics to access the characteristics of each product.", "Join Product_Characteristics with Characteristics to filter by characteristic name 'fast'.", "Add the WHERE clause to filter results based on the specified color description and characteristic name."], "pred_sql": "SELECT p.product_name \nFROM Products p \nJOIN Ref_Colors c ON p.color_code = c.color_code \nJOIN Product_Characteristics pc ON p.product_id = pc.product_id \nJOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id \nWHERE c.color_description = 'red' \nAND ch.characteristic_name = 'fast';", "gold_sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'red' AND t3.characteristic_name  =  'fast'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"]}
{"sample_id": 5569, "db_id": "products_gen_characteristics", "question": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?", "rationale": ["Identify the relevant tables: Products, Ref_Colors, Product_Characteristics, and Characteristics.", "We need to select the product names from the Products table.", "Join the Products table with the Ref_Colors table on the color_code to filter by color description.", "Join the Products table with the Product_Characteristics table to link products with their characteristics.", "Join the Product_Characteristics table with the Characteristics table to filter by the characteristic name 'fast'.", "Add a WHERE clause to filter results for color description 'red' and characteristic name 'fast'."], "pred_sql": "SELECT Products.product_name \nFROM Products \nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code \nJOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id \nJOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id \nWHERE Ref_Colors.color_description = 'red' \nAND Characteristics.characteristic_name = 'fast';", "gold_sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'red' AND t3.characteristic_name  =  'fast'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"]}
{"sample_id": 5570, "db_id": "products_gen_characteristics", "question": "How many products have the characteristic named \"hot\"?", "rationale": ["Identify the tables involved: Products, Product_Characteristics, and Characteristics.", "We need to count the number of distinct products that have a specific characteristic.", "The characteristic we are interested in is named 'hot'.", "To find this, we will join the Products table with the Product_Characteristics table on product_id, and then join with the Characteristics table on characteristic_id.", "We will filter the results to only include characteristics where the name is 'hot'.", "Finally, we will use the COUNT function to count the distinct product IDs that meet this criterion."], "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count\nFROM Products p\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nJOIN Characteristics c ON pc.characteristic_id = c.characteristic_id\nWHERE c.characteristic_name = 'hot';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  'hot'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5571, "db_id": "products_gen_characteristics", "question": "Count the number of products with the 'hot' charactersitic.", "rationale": ["Identify the tables involved: Products, Product_Characteristics, and Characteristics.", "We need to count the number of products, so we will use the COUNT function.", "To get the products with the 'hot' characteristic, we need to join the Products table with the Product_Characteristics table on product_id.", "Next, we join the Product_Characteristics table with the Characteristics table on characteristic_id to access the characteristic names.", "We will filter the results where the characteristic_name is 'hot'.", "Finally, we will count the distinct product_id to ensure we count each product only once."], "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count\nFROM Products p\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nJOIN Characteristics c ON pc.characteristic_id = c.characteristic_id\nWHERE c.characteristic_name = 'hot';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  'hot'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5572, "db_id": "products_gen_characteristics", "question": "List the all the distinct names of the products with the characteristic name 'warm'.", "rationale": ["We need to list distinct product names, so we will use SELECT DISTINCT to avoid duplicates.", "The product names are stored in the Products table under the column product_name.", "To find products with a specific characteristic name ('warm'), we need to join the Products table with the Product_Characteristics table, which links products to their characteristics.", "Next, we join the Product_Characteristics table with the Characteristics table to access the characteristic names.", "We will filter the results using a WHERE clause to specify that we only want characteristics with the name 'warm'."], "pred_sql": "SELECT DISTINCT p.product_name \nFROM Products p \nJOIN Product_Characteristics pc ON p.product_id = pc.product_id \nJOIN Characteristics c ON pc.characteristic_id = c.characteristic_id \nWHERE c.characteristic_name = 'warm';", "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  'warm'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5573, "db_id": "products_gen_characteristics", "question": "What are the different product names for products that have the 'warm' characteristic:?", "rationale": ["Identify the main goal: to find distinct product names for products with a specific characteristic ('warm').", "Determine the relevant tables: Products, Product_Characteristics, and Characteristics are needed to link products to their characteristics.", "Use JOINs to connect these tables: Products to Product_Characteristics on product_id, and Product_Characteristics to Characteristics on characteristic_id.", "Filter the results to only include products with the characteristic name 'warm'.", "Select the distinct product names to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT p.product_name \nFROM Products p \nJOIN Product_Characteristics pc ON p.product_id = pc.product_id \nJOIN Characteristics c ON pc.characteristic_id = c.characteristic_id \nWHERE c.characteristic_name = 'warm';", "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  'warm'", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5574, "db_id": "products_gen_characteristics", "question": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".", "rationale": ["Identify the tables involved: Products, Ref_Colors, Product_Characteristics, and Characteristics.", "We need to filter products based on color and a specific characteristic.", "Join the Products table with Ref_Colors to filter by color description 'red'.", "Join the Products table with Product_Characteristics to link products to their characteristics.", "Join Product_Characteristics with Characteristics to filter by characteristic name 'slow'.", "Count the distinct product IDs that meet both conditions (color is 'red' and characteristic is 'slow').", "Construct the SQL query using the identified tables, joins, and conditions."], "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count\nFROM Products p\nJOIN Ref_Colors c ON p.color_code = c.color_code\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nJOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id\nWHERE c.color_description = 'red' AND ch.characteristic_name = 'slow';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'red' AND t3.characteristic_name  =  'slow'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"]}
{"sample_id": 5575, "db_id": "products_gen_characteristics", "question": "How many products have the color description 'red' and the characteristic name 'slow'?", "rationale": ["Identify the tables needed: Products, Ref_Colors, Product_Characteristics, and Characteristics.", "We need to count the number of products, so we will use the COUNT function.", "Join the Products table with the Ref_Colors table on the color_code to filter by color description.", "Join the Product_Characteristics table to link products with their characteristics.", "Join the Characteristics table to filter by characteristic name.", "Use a WHERE clause to specify the conditions: color description must be 'red' and characteristic name must be 'slow'.", "Use DISTINCT in the COUNT function to ensure we count unique products only."], "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count\nFROM Products p\nJOIN Ref_Colors c ON p.color_code = c.color_code\nJOIN Product_Characteristics pc ON p.product_id = pc.product_id\nJOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id\nWHERE c.color_description = 'red' AND ch.characteristic_name = 'slow';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'red' AND t3.characteristic_name  =  'slow'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"]}
{"sample_id": 5576, "db_id": "products_gen_characteristics", "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".", "rationale": ["We need to count the products based on two conditions: color description and characteristic name.", "First, we will select from the Products table, which contains the product information.", "Next, we will join the Ref_Colors table to get the color description for each product using the color_code foreign key.", "We also need to join the Product_Characteristics table to link products with their characteristics.", "Then, we will join the Characteristics table to access the characteristic names.", "In the WHERE clause, we will filter the results to include products that either have the color description 'white' or the characteristic name 'hot'.", "Finally, we will use COUNT(DISTINCT p.product_id) to count the unique products that meet either of the conditions."], "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count\nFROM Products p\nLEFT JOIN Ref_Colors c ON p.color_code = c.color_code\nLEFT JOIN Product_Characteristics pc ON p.product_id = pc.product_id\nLEFT JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id\nWHERE c.color_description = 'white' OR ch.characteristic_name = 'hot';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'white' OR t3.characteristic_name  =  'hot'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"]}
{"sample_id": 5577, "db_id": "products_gen_characteristics", "question": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?", "rationale": ["Identify the tables involved: Products, Ref_Colors, Product_Characteristics, and Characteristics.", "Determine the conditions: We need to check for products that are either white in color or have a characteristic named 'hot'.", "To find products with the color 'white', we will join the Products table with the Ref_Colors table to get the color_code for 'white'.", "To find products with the characteristic 'hot', we will join the Products table with Product_Characteristics and then with Characteristics to check for the characteristic_name 'hot'.", "Use COUNT(DISTINCT p.product_id) to count unique products that meet either condition.", "Combine the conditions using an OR clause in the WHERE statement to ensure we capture products that meet either criterion."], "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count\nFROM Products p\nLEFT JOIN Product_Characteristics pc ON p.product_id = pc.product_id\nLEFT JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id\nWHERE p.color_code = (SELECT color_code FROM Ref_Colors WHERE color_description = 'white')\n   OR c.characteristic_name = 'hot';", "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  'white' OR t3.characteristic_name  =  'hot'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"]}
{"sample_id": 5578, "db_id": "products_gen_characteristics", "question": "What is the unit of measuerment of the product category code \"Herbs\"?", "rationale": ["Identify the relevant table: The product category information is stored in the Ref_Product_Categories table.", "Determine the required column: We need the unit of measurement, which is in the 'unit_of_measure' column.", "Specify the condition: We are looking for the product category with the code 'Herbs'.", "Construct the SQL query: Use a SELECT statement to retrieve the 'unit_of_measure' from Ref_Product_Categories where the 'product_category_code' matches 'Herbs'."], "pred_sql": "SELECT unit_of_measure FROM Ref_Product_Categories WHERE product_category_code = 'Herbs';", "gold_sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  'Herbs'", "source_tables": ["ref_product_categories"]}
{"sample_id": 5579, "db_id": "products_gen_characteristics", "question": "Return the unit of measure for 'Herb' products.", "rationale": ["Identify the relevant tables: Products and Ref_Product_Categories.", "Determine the relationship between the tables: Products has a foreign key product_category_code that links to Ref_Product_Categories.", "Select the unit_of_measure from Ref_Product_Categories.", "Filter the Products table to only include those with 'Herb' in the product_name using a LIKE clause."], "pred_sql": "SELECT Ref_Product_Categories.unit_of_measure \nFROM Products \nJOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code \nWHERE Products.product_name LIKE '%Herb%';", "gold_sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  'Herbs'", "source_tables": ["ref_product_categories"]}
{"sample_id": 5580, "db_id": "products_gen_characteristics", "question": "Find the product category description of the product category with code \"Spices\".", "rationale": ["Identify the table that contains product category descriptions, which is 'Ref_Product_Categories'.", "Determine the column that holds the product category description, which is 'product_category_description'.", "Identify the column that contains the product category code, which is 'product_category_code'.", "Formulate the SQL query to select the 'product_category_description' from 'Ref_Product_Categories' where 'product_category_code' equals 'Spices'."], "pred_sql": "SELECT product_category_description FROM Ref_Product_Categories WHERE product_category_code = 'Spices';", "gold_sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  'Spices'", "source_tables": ["ref_product_categories"]}
{"sample_id": 5581, "db_id": "products_gen_characteristics", "question": "What is the description of the product category with the code 'Spices'?", "rationale": ["Identify the table that contains product category information, which is 'Ref_Product_Categories'.", "Determine the column that holds the product category description, which is 'product_category_description'.", "Identify the column that contains the product category code, which is 'product_category_code'.", "Construct the SQL query to select the 'product_category_description' from 'Ref_Product_Categories' where 'product_category_code' equals 'Spices'."], "pred_sql": "SELECT product_category_description FROM Ref_Product_Categories WHERE product_category_code = 'Spices';", "gold_sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  'Spices'", "source_tables": ["ref_product_categories"]}
{"sample_id": 5582, "db_id": "products_gen_characteristics", "question": "What is the product category description and unit of measurement of category \"Herbs\"?", "rationale": ["Identify the relevant table: Ref_Product_Categories contains the product category information.", "Determine the columns needed: product_category_description and unit_of_measure are required based on the query.", "Specify the condition: We need to filter the results to only include the category with the code 'Herbs'.", "Construct the SQL SELECT statement to retrieve the specified columns from the table with the appropriate WHERE clause."], "pred_sql": "SELECT product_category_description, unit_of_measure FROM Ref_Product_Categories WHERE product_category_code = 'Herbs';", "gold_sql": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  'Herbs'", "source_tables": ["ref_product_categories"]}
{"sample_id": 5583, "db_id": "products_gen_characteristics", "question": "Return the description and unit of measurement for products in the 'Herbs' category.", "rationale": ["Identify the relevant table that contains product category information, which is 'Ref_Product_Categories'.", "Determine the columns needed: 'product_category_description' and 'unit_of_measure'.", "Filter the results to only include the category where the description is 'Herbs'.", "To do this, a subquery is used to find the 'product_category_code' associated with 'Herbs' in the 'Ref_Product_Categories' table."], "pred_sql": "SELECT rpc.product_category_description, rpc.unit_of_measure \nFROM Ref_Product_Categories rpc \nWHERE rpc.product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Herbs')", "gold_sql": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  'Herbs'", "source_tables": ["ref_product_categories"]}
{"sample_id": 5584, "db_id": "products_gen_characteristics", "question": "What is the unit of measurement of product named \"cumin\"?", "rationale": ["Identify the relevant tables: We need to find the unit of measurement for a product named 'cumin', which involves the Products table and the Ref_Product_Categories table.", "Determine the relationship: The Products table has a foreign key 'product_category_code' that links to the Ref_Product_Categories table, which contains the 'unit_of_measure' we need.", "Formulate the SELECT statement: We want to select the 'unit_of_measure' from the Ref_Product_Categories table.", "Add the JOIN clause: We need to join the Products table with the Ref_Product_Categories table on the 'product_category_code'.", "Add the WHERE clause: We need to filter the results to only include the product with the name 'cumin'."], "pred_sql": "SELECT Ref_Product_Categories.unit_of_measure \nFROM Products \nJOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code \nWHERE Products.product_name = 'cumin';", "gold_sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'cumin'", "source_tables": ["products", "ref_product_categories"]}
{"sample_id": 5585, "db_id": "products_gen_characteristics", "question": "Give the unit of measure for the product with the name 'cumin'.", "rationale": ["Identify the relevant tables: Products and Ref_Product_Categories.", "Determine the relationship between the tables: Products has a foreign key product_category_code that links to Ref_Product_Categories.", "We need to retrieve the unit_of_measure from Ref_Product_Categories for a specific product name.", "Construct the SQL query to select unit_of_measure from Ref_Product_Categories, joining it with Products on product_category_code.", "Add a WHERE clause to filter the results for the product with the name 'cumin'."], "pred_sql": "SELECT Ref_Product_Categories.unit_of_measure \nFROM Products \nJOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code \nWHERE Products.product_name = 'cumin';", "gold_sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'cumin'", "source_tables": ["products", "ref_product_categories"]}
{"sample_id": 5586, "db_id": "products_gen_characteristics", "question": "Find the unit of measurement and product category code of product named \"chervil\".", "rationale": ["Identify the relevant tables: Products and Ref_Product_Categories.", "Determine the columns needed: product_category_code from Ref_Product_Categories and unit_of_measure from Ref_Product_Categories.", "Establish the relationship between Products and Ref_Product_Categories using the product_category_code foreign key.", "Filter the results to find the product with the name 'chervil'.", "Construct the SQL SELECT statement to retrieve the desired columns with the appropriate JOIN and WHERE clause."], "pred_sql": "SELECT pc.product_category_code, rc.unit_of_measure \nFROM Products p \nJOIN Ref_Product_Categories rc ON p.product_category_code = rc.product_category_code \nWHERE p.product_name = 'chervil';", "gold_sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'chervil'", "source_tables": ["products", "ref_product_categories"]}
{"sample_id": 5587, "db_id": "products_gen_characteristics", "question": "What are the unit of measure and category code for the 'chervil' product?", "rationale": ["Identify the relevant tables: Products and Ref_Product_Categories are needed to get the unit of measure and category code.", "Determine the columns to select: We need 'unit_of_measure' and 'product_category_code' from Ref_Product_Categories.", "Establish the relationship between tables: Products has a foreign key 'product_category_code' that links to Ref_Product_Categories.", "Filter the results: We need to find the product with the name 'chervil', so we will add a WHERE clause to filter by product_name."], "pred_sql": "SELECT Ref_Product_Categories.unit_of_measure, Ref_Product_Categories.product_category_code \nFROM Products \nJOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code \nWHERE Products.product_name = 'chervil';", "gold_sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'chervil'", "source_tables": ["products", "ref_product_categories"]}
{"sample_id": 5588, "db_id": "products_gen_characteristics", "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".", "rationale": ["Identify the relevant tables: Products, Ref_Colors, and Ref_Product_Categories.", "We need to find products that are colored 'white', so we will join the Products table with the Ref_Colors table on the color_code.", "Next, we need to ensure that the products do not have a unit of measurement of 'Handful', which requires joining the Products table with the Ref_Product_Categories table on the product_category_code.", "The WHERE clause will filter for products where the color description is 'white' and the unit of measure is not 'Handful'.", "Finally, we will select the product names from the Products table that meet these criteria."], "pred_sql": "SELECT p.product_name \nFROM Products p \nJOIN Ref_Colors c ON p.color_code = c.color_code \nJOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code \nWHERE c.color_description = 'white' \nAND pc.unit_of_measure != 'Handful';", "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  'white' AND t2.unit_of_measure != 'Handful'", "source_tables": ["products", "ref_colors", "ref_product_categories"]}
{"sample_id": 5589, "db_id": "products_gen_characteristics", "question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?", "rationale": ["Identify the main table to query from, which is the Products table, as we need product names.", "Determine the conditions for filtering: products that are not 'white' in color and are not measured by the unit 'Handful'.", "To filter out products that are not 'white', we need to join the Products table with the Ref_Colors table to get the color code for 'white'.", "To filter out products that are not measured by 'Handful', we need to join the Products table with the Ref_Product_Categories table to get the product category code for 'Handful'.", "Construct the SQL query to select product names from the Products table where the color code is not equal to the color code for 'white' and the product category code is not equal to the product category code for 'Handful'."], "pred_sql": "SELECT product_name FROM Products WHERE color_code != (SELECT color_code FROM Ref_Colors WHERE color_description = 'white') AND product_category_code != (SELECT product_category_code FROM Ref_Product_Categories WHERE unit_of_measure = 'Handful');", "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  'white' AND t2.unit_of_measure != 'Handful'", "source_tables": ["products", "ref_colors", "ref_product_categories"]}
{"sample_id": 5590, "db_id": "products_gen_characteristics", "question": "What is the description of the color for most products?", "rationale": ["Identify the relevant tables: Products and Ref_Colors are needed to get product color descriptions.", "Join the Products table with the Ref_Colors table on the color_code to access color descriptions.", "Group the results by color description to count how many products have each color.", "Count the number of products for each color using COUNT() function.", "Order the results in descending order based on the product count to find the most common color.", "Limit the results to 1 to get the description of the color for the most products."], "pred_sql": "SELECT Ref_Colors.color_description, COUNT(Products.product_id) AS product_count\nFROM Products\nJOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code\nGROUP BY Ref_Colors.color_description\nORDER BY product_count DESC\nLIMIT 1;", "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5591, "db_id": "products_gen_characteristics", "question": "Return the color description that is most common across all products.", "rationale": ["Identify the relevant table for color descriptions, which is Ref_Colors.", "Determine the relationship between products and colors, which is through the color_code in the Products table.", "To find the most common color, we need to count occurrences of each color_code in the Products table.", "Group the results by color_code and order them by the count in descending order to get the most common color at the top.", "Limit the results to 1 to get only the most common color_code.", "Finally, select the color_description from Ref_Colors where the color_code matches the most common one found in the previous step."], "pred_sql": "SELECT color_description FROM Ref_Colors WHERE color_code IN (SELECT color_code FROM Products GROUP BY color_code ORDER BY COUNT(*) DESC LIMIT 1)", "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5592, "db_id": "products_gen_characteristics", "question": "What is the description of the color used by least products?", "rationale": ["Identify the relevant tables: Ref_Colors for color descriptions and Products for product information.", "Join the Ref_Colors table with the Products table on the color_code to associate colors with products.", "Group the results by color_code to count how many products are associated with each color.", "Order the results by the count of products in ascending order to find the color used by the least products.", "Limit the results to 1 to get only the color description of the least used color."], "pred_sql": "SELECT rc.color_description\nFROM Ref_Colors rc\nJOIN Products p ON rc.color_code = p.color_code\nGROUP BY rc.color_code\nORDER BY COUNT(p.product_id) ASC\nLIMIT 1;", "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5593, "db_id": "products_gen_characteristics", "question": "Give the color description that is least common across products.", "rationale": ["Identify the relevant table for color descriptions, which is Ref_Colors.", "Determine the relationship between products and colors, which is through the color_code in the Products table.", "To find the least common color, we need to count how many products are associated with each color.", "Use a subquery to group products by color_code and count them.", "Find the minimum count of products for any color using another subquery.", "Select the color_description from Ref_Colors where the color_code matches the least common color(s) found in the previous steps."], "pred_sql": "SELECT color_description FROM Ref_Colors WHERE color_code IN (SELECT color_code FROM Products GROUP BY color_code HAVING COUNT(*) = (SELECT MIN(color_count) FROM (SELECT COUNT(*) AS color_count FROM Products GROUP BY color_code)))", "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5594, "db_id": "products_gen_characteristics", "question": "What is the characteristic name used by most number of the products?", "rationale": ["Identify the table that contains the characteristic names, which is the 'Characteristics' table.", "Join the 'Characteristics' table with the 'Product_Characteristics' table to link characteristics to products.", "Group the results by 'characteristic_name' to count how many products have each characteristic.", "Order the results by the count of products in descending order to find the most common characteristic.", "Limit the results to 1 to get only the characteristic name used by the most number of products."], "pred_sql": "SELECT C.characteristic_name\nFROM Characteristics C\nJOIN Product_Characteristics PC ON C.characteristic_id = PC.characteristic_id\nGROUP BY C.characteristic_name\nORDER BY COUNT(PC.product_id) DESC\nLIMIT 1;", "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5595, "db_id": "products_gen_characteristics", "question": "Return the name of the characteristic that is most common across all products.", "rationale": ["Identify the table that contains the characteristic names, which is the 'Characteristics' table.", "To find the most common characteristic, we need to count how many times each characteristic appears across all products. This requires the 'Product_Characteristics' table, which links products to their characteristics.", "We will group the results by 'characteristic_id' in the 'Product_Characteristics' table and count the occurrences of each characteristic.", "We will order the results by the count in descending order to get the most common characteristic at the top.", "Finally, we will limit the results to 1 to get only the most common characteristic.", "We will select the 'characteristic_name' from the 'Characteristics' table where the 'characteristic_id' matches the most common one found in the previous step."], "pred_sql": "SELECT characteristic_name\nFROM Characteristics\nWHERE characteristic_id IN (\n    SELECT characteristic_id\n    FROM Product_Characteristics\n    GROUP BY characteristic_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5596, "db_id": "products_gen_characteristics", "question": "What are the names, details and data types of the characteristics which are never used by any product?", "rationale": ["We need to find characteristics that are never used by any product.", "To do this, we will select the characteristic name, other details, and data type from the Characteristics table.", "We will perform a LEFT JOIN between the Characteristics table and the Product_Characteristics table on the characteristic_id.", "The LEFT JOIN will allow us to include all characteristics, even those that do not have a matching entry in Product_Characteristics.", "We will filter the results where the product_id in Product_Characteristics is NULL, indicating that the characteristic is not used by any product."], "pred_sql": "SELECT C.characteristic_name, C.other_characteristic_details, C.characteristic_data_type \nFROM Characteristics C \nLEFT JOIN Product_Characteristics PC ON C.characteristic_id = PC.characteristic_id \nWHERE PC.product_id IS NULL;", "gold_sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "source_tables": ["characteristics", "product_characteristics"]}
{"sample_id": 5597, "db_id": "products_gen_characteristics", "question": "Give the names, details, and data types of characteristics that are not found in any product.", "rationale": ["Identify the Characteristics table which contains the details of characteristics.", "Use a LEFT JOIN to connect the Characteristics table with the Product_Characteristics table on the characteristic_id.", "The LEFT JOIN will allow us to include all characteristics, even those that do not have a corresponding entry in the Product_Characteristics table.", "Filter the results to include only those characteristics where the product_id in the Product_Characteristics table is NULL, indicating that these characteristics are not associated with any product."], "pred_sql": "SELECT C.characteristic_name, C.other_characteristic_details, C.characteristic_data_type \nFROM Characteristics C \nLEFT JOIN Product_Characteristics PC ON C.characteristic_id = PC.characteristic_id \nWHERE PC.product_id IS NULL;", "gold_sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "source_tables": ["characteristics", "product_characteristics"]}
{"sample_id": 5598, "db_id": "products_gen_characteristics", "question": "What are characteristic names used at least twice across all products?", "rationale": ["Identify the table that contains characteristic names, which is the 'Characteristics' table.", "Join the 'Characteristics' table with the 'Product_Characteristics' table to link characteristics to products.", "Group the results by 'characteristic_name' to aggregate the data based on each unique characteristic name.", "Use the HAVING clause to filter the groups, selecting only those characteristic names that are associated with at least two products, which is indicated by a count of product IDs being greater than or equal to 2."], "pred_sql": "SELECT c.characteristic_name\nFROM Characteristics c\nJOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id\nGROUP BY c.characteristic_name\nHAVING COUNT(pc.product_id) >= 2;", "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5599, "db_id": "products_gen_characteristics", "question": "Give the names of characteristics that are in two or more products?", "rationale": ["Identify the table that contains the characteristic names, which is the 'Characteristics' table.", "Join the 'Characteristics' table with the 'Product_Characteristics' table to link characteristics to products.", "Group the results by the characteristic ID to aggregate the data for each characteristic.", "Use the HAVING clause to filter the groups to only include those with two or more distinct product IDs, indicating that the characteristic is associated with two or more products."], "pred_sql": "SELECT c.characteristic_name\nFROM Characteristics c\nJOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id\nGROUP BY c.characteristic_id\nHAVING COUNT(DISTINCT pc.product_id) >= 2;", "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "source_tables": ["products", "characteristics", "product_characteristics"]}
{"sample_id": 5600, "db_id": "products_gen_characteristics", "question": "How many colors are never used by any product?", "rationale": ["Identify the table that contains color information, which is 'Ref_Colors'.", "Determine the need to find colors that are not used by any products, which requires checking against the 'Products' table.", "Use a subquery to select distinct color codes from the 'Products' table to find out which colors are in use.", "Use the NOT IN clause to filter out the colors that are present in the 'Products' table from the 'Ref_Colors' table.", "Count the remaining colors in 'Ref_Colors' that are not used in 'Products' to get the total number of unused colors."], "pred_sql": "SELECT COUNT(*) AS unused_color_count\nFROM Ref_Colors\nWHERE color_code NOT IN (\n    SELECT DISTINCT color_code\n    FROM Products\n);", "gold_sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5601, "db_id": "products_gen_characteristics", "question": "Count the number of colors that are not used in any products.", "rationale": ["Identify the table that contains color information, which is 'Ref_Colors'.", "We need to count the colors that are not used in any products, so we will check the 'Products' table for any existing color codes.", "To find unused colors, we will use a subquery to select distinct color codes from the 'Products' table.", "The main query will count the number of colors in 'Ref_Colors' where the color code is not in the list of color codes from the 'Products' table."], "pred_sql": "SELECT COUNT(*) AS unused_color_count\nFROM Ref_Colors\nWHERE color_code NOT IN (\n    SELECT DISTINCT color_code\n    FROM Products\n);", "gold_sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "source_tables": ["products", "ref_colors"]}
{"sample_id": 5602, "db_id": "swimming", "question": "How many events are there?", "rationale": ["Identify the table that contains the events, which is the 'event' table.", "To find out how many events there are, we need to count the number of rows in the 'event' table.", "Use the COUNT() function to count the total number of events.", "Select the count and label it as 'event_count' for clarity."], "pred_sql": "SELECT COUNT(*) AS event_count FROM event;", "gold_sql": "SELECT count(*) FROM event", "source_tables": ["event"]}
{"sample_id": 5603, "db_id": "swimming", "question": "List all the event names by year from the most recent to the oldest.", "rationale": ["Identify the table that contains the event names and their corresponding years, which is the 'event' table.", "Select the columns 'Name' and 'Year' from the 'event' table.", "To list the events from the most recent to the oldest, use the ORDER BY clause on the 'Year' column in descending order."], "pred_sql": "SELECT Name, Year FROM event ORDER BY Year DESC;", "gold_sql": "SELECT name FROM event ORDER BY YEAR DESC", "source_tables": ["event"]}
{"sample_id": 5604, "db_id": "swimming", "question": "What is the name of the event that happened in the most recent year?", "rationale": ["Identify the table that contains the event information, which is the 'event' table.", "We need to find the most recent year in which an event occurred, so we will use a subquery to select the maximum year from the 'event' table.", "Once we have the most recent year, we will select the name of the event(s) that occurred in that year from the 'event' table."], "pred_sql": "SELECT Name FROM event WHERE Year = (SELECT MAX(Year) FROM event);", "gold_sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1", "source_tables": ["event"]}
{"sample_id": 5605, "db_id": "swimming", "question": "How many stadiums are there?", "rationale": ["Identify the table that contains information about stadiums, which is the 'stadium' table.", "To find out how many stadiums there are, we need to count the number of entries in the 'stadium' table.", "Use the COUNT() function to count all rows in the 'stadium' table.", "Construct the SQL query to select the count of stadiums from the 'stadium' table."], "pred_sql": "SELECT COUNT(*) AS total_stadiums FROM stadium;", "gold_sql": "SELECT count(*) FROM stadium", "source_tables": ["stadium"]}
{"sample_id": 5606, "db_id": "swimming", "question": "Find the name of the stadium that has the maximum capacity.", "rationale": ["Identify the table that contains stadium information, which is the 'stadium' table.", "Determine the column that holds the capacity of the stadium, which is 'Capacity'.", "To find the stadium with the maximum capacity, we need to find the maximum value in the 'Capacity' column.", "Use a subquery to select the maximum capacity from the 'stadium' table.", "Finally, select the 'name' of the stadium where the 'Capacity' matches the maximum capacity found in the subquery."], "pred_sql": "SELECT name FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium);", "gold_sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1", "source_tables": ["stadium"]}
{"sample_id": 5607, "db_id": "swimming", "question": "Find the names of stadiums whose capacity is smaller than the average capacity.", "rationale": ["Identify the table to query: stadium.", "Determine the column to select: name.", "Identify the condition: capacity smaller than the average capacity.", "Calculate the average capacity using a subquery: SELECT AVG(Capacity) FROM stadium.", "Combine the selection and condition into a SQL query."], "pred_sql": "SELECT name FROM stadium WHERE Capacity < (SELECT AVG(Capacity) FROM stadium);", "gold_sql": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)", "source_tables": ["stadium"]}
{"sample_id": 5608, "db_id": "swimming", "question": "Find the country that has the most stadiums.", "rationale": ["Identify the table that contains information about stadiums, which is the 'stadium' table.", "To find the country with the most stadiums, we need to count the number of stadiums for each country.", "Use the COUNT() function to count the number of stadiums grouped by the 'Country' column.", "Group the results by 'Country' to aggregate the counts for each country.", "Order the results in descending order based on the count of stadiums to get the country with the highest count at the top.", "Limit the results to 1 to get only the country with the most stadiums."], "pred_sql": "SELECT Country, COUNT(*) as StadiumCount FROM stadium GROUP BY Country ORDER BY StadiumCount DESC LIMIT 1;", "gold_sql": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["stadium"]}
{"sample_id": 5609, "db_id": "swimming", "question": "Which country has at most 3 stadiums listed?", "rationale": ["Identify the relevant table: The query is about stadiums, so we will use the 'stadium' table.", "We need to group the results by country to count the number of stadiums in each country. This is done using the GROUP BY clause on the 'Country' column.", "To find countries with at most 3 stadiums, we will use the HAVING clause to filter the grouped results where the count of stadium IDs is less than or equal to 3."], "pred_sql": "SELECT Country FROM stadium GROUP BY Country HAVING COUNT(ID) <= 3;", "gold_sql": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3", "source_tables": ["stadium"]}
{"sample_id": 5610, "db_id": "swimming", "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?", "rationale": ["Identify the table that contains the relevant information about stadiums, which is the 'stadium' table.", "We need to find countries that have stadiums with two different capacity conditions: greater than 60000 and less than 50000.", "To achieve this, we can use the INTERSECT operator to find common countries that meet both conditions.", "First, we select distinct countries from the 'stadium' table where the capacity is greater than 60000.", "Next, we select distinct countries from the 'stadium' table where the capacity is less than 50000.", "Finally, we combine these two queries using INTERSECT to get the countries that satisfy both conditions."], "pred_sql": "SELECT DISTINCT s.Country\nFROM stadium s\nWHERE s.Capacity > 60000\nINTERSECT\nSELECT DISTINCT s.Country\nFROM stadium s\nWHERE s.Capacity < 50000;", "gold_sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000", "source_tables": ["stadium"]}
{"sample_id": 5611, "db_id": "swimming", "question": "How many cities have a stadium that was opened before the year of 2006?", "rationale": ["Identify the relevant table: We need to look at the 'stadium' table since it contains information about stadiums and their opening years.", "Determine the condition: We are interested in stadiums that were opened before the year 2006.", "Count distinct cities: We need to count the number of unique cities that have stadiums meeting the condition.", "Construct the SQL query: Use SELECT with COUNT(DISTINCT City) to get the number of unique cities, and apply the WHERE clause to filter by the opening year."], "pred_sql": "SELECT COUNT(DISTINCT City) AS CityCount FROM stadium WHERE Opening_year < 2006;", "gold_sql": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006", "source_tables": ["stadium"]}
{"sample_id": 5612, "db_id": "swimming", "question": "How many stadiums does each country have?", "rationale": ["Identify the relevant table: The 'stadium' table contains information about stadiums, including their country.", "Determine the required information: We need to count the number of stadiums for each country.", "Use the COUNT() function to count the number of stadiums grouped by country.", "Write the SQL query to select the country and the count of stadiums, using GROUP BY to aggregate the results by country."], "pred_sql": "SELECT Country, COUNT(*) AS Stadium_Count FROM stadium GROUP BY Country;", "gold_sql": "SELECT country ,  count(*) FROM stadium GROUP BY country", "source_tables": ["stadium"]}
{"sample_id": 5613, "db_id": "swimming", "question": "Which countries do not have a stadium that was opened after 2006?", "rationale": ["Identify the countries represented by swimmers from the 'swimmer' table.", "Determine which countries have stadiums opened after 2006 by querying the 'stadium' table.", "Use a subquery to find all countries that have stadiums opened after 2006.", "Select distinct nationalities from the 'swimmer' table that are not in the list of countries from the subquery."], "pred_sql": "SELECT DISTINCT swimmer.Nationality \nFROM swimmer \nWHERE swimmer.Nationality NOT IN (\n    SELECT DISTINCT stadium.Country \n    FROM stadium \n    WHERE stadium.Opening_year > 2006\n);", "gold_sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006", "source_tables": ["stadium"]}
{"sample_id": 5614, "db_id": "swimming", "question": "How many stadiums are not in country \"Russia\"?", "rationale": ["Identify the table relevant to the query: 'stadium'.", "Determine the condition: we need to count stadiums that are not in 'Russia'.", "Use the COUNT() function to count the number of records that meet the condition.", "Construct the SQL query to select the count from the 'stadium' table where the 'Country' column is not equal to 'Russia'."], "pred_sql": "SELECT COUNT(*) FROM stadium WHERE Country != 'Russia';", "gold_sql": "SELECT count(*) FROM stadium WHERE country != 'Russia'", "source_tables": ["stadium"]}
{"sample_id": 5615, "db_id": "swimming", "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.", "rationale": ["Identify the table that contains the swimmer names and their 100 meter scores, which is the 'swimmer' table.", "Select the 'name' column from the 'swimmer' table to get the names of the swimmers.", "Use the 'ORDER BY' clause to sort the results by the 'meter_100' column in ascending order."], "pred_sql": "SELECT name FROM swimmer ORDER BY meter_100 ASC;", "gold_sql": "SELECT name FROM swimmer ORDER BY meter_100", "source_tables": ["swimmer"]}
{"sample_id": 5616, "db_id": "swimming", "question": "How many different countries are all the swimmers from?", "rationale": ["Identify the table that contains the relevant data, which is the 'swimmer' table.", "Determine the column that holds the country information, which is 'Nationality'.", "To find the number of different countries, use the COUNT function with DISTINCT to count unique entries in the 'Nationality' column.", "Construct the SQL query to select the count of distinct nationalities from the swimmer table."], "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS different_countries FROM swimmer;", "gold_sql": "SELECT count(DISTINCT nationality) FROM swimmer", "source_tables": ["swimmer"]}
{"sample_id": 5617, "db_id": "swimming", "question": "List countries that have more than one swimmer.", "rationale": ["Identify the relevant table: The 'swimmer' table contains the 'Nationality' column which we need to analyze.", "We want to find countries with more than one swimmer, so we will group the results by 'Nationality'.", "Using the COUNT function, we can count the number of swimmers for each nationality.", "We will use the HAVING clause to filter the results to only include nationalities that have a count greater than 1."], "pred_sql": "SELECT Nationality FROM swimmer GROUP BY Nationality HAVING COUNT(ID) > 1;", "gold_sql": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1", "source_tables": ["swimmer"]}
{"sample_id": 5618, "db_id": "swimming", "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".", "rationale": ["Identify the table that contains the relevant data: the 'swimmer' table holds the performance times and nationality of swimmers.", "Determine the specific columns needed: 'name' for the swimmer's name, 'meter_200' for the 200 meter results, and 'meter_300' for the 300 meter results.", "Apply a filter to select only those swimmers with the nationality 'Australia'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'swimmer' table with the appropriate WHERE clause."], "pred_sql": "SELECT name, meter_200, meter_300 FROM swimmer WHERE Nationality = 'Australia';", "gold_sql": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'", "source_tables": ["swimmer"]}
{"sample_id": 5619, "db_id": "swimming", "question": "Find the names of swimmers who has a result of \"win\".", "rationale": ["Identify the relevant tables: 'swimmer' and 'record'.", "We need to find the names of swimmers, so we will select the 'name' column from the 'swimmer' table.", "To find swimmers with a specific result, we need to join the 'swimmer' table with the 'record' table on the swimmer's ID.", "The condition for the result is specified as 'win', so we will filter the results where 'record.Result' equals 'win'.", "Construct the SQL query using the SELECT statement to retrieve the swimmer names based on the join and the condition."], "pred_sql": "SELECT swimmer.name FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID WHERE record.Result = 'win';", "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'", "source_tables": ["record", "swimmer"]}
{"sample_id": 5620, "db_id": "swimming", "question": "What is the name of the stadium which held the most events?", "rationale": ["Identify the relevant tables: We need to find the stadium name and the number of events held at each stadium, so we will use the 'stadium' and 'event' tables.", "Join the tables: We will join the 'stadium' table with the 'event' table on the stadium ID to associate each event with its corresponding stadium.", "Group by stadium: We will group the results by the stadium ID to count the number of events held at each stadium.", "Count events: We will use the COUNT function to count the number of events for each stadium.", "Order by count: We will order the results in descending order based on the count of events to find the stadium with the most events.", "Limit the results: We will limit the results to 1 to get only the stadium that held the most events."], "pred_sql": "SELECT stadium.name\nFROM stadium\nJOIN event ON stadium.ID = event.Stadium_ID\nGROUP BY stadium.ID\nORDER BY COUNT(event.ID) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["event", "stadium"]}
{"sample_id": 5621, "db_id": "swimming", "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.", "rationale": ["Identify the tables involved: We need information from the 'stadium' table for the stadium name and capacity, and from the 'event' table to filter by the event name.", "Determine the relationship between the tables: The 'event' table has a foreign key 'Stadium_ID' that links to the 'ID' in the 'stadium' table.", "Construct the SQL query: We will use a JOIN to combine the 'stadium' and 'event' tables on the matching IDs, and then filter the results where the event name is 'World Junior'.", "Select the required columns: We need to select 'stadium.name' and 'stadium.Capacity' as the output."], "pred_sql": "SELECT stadium.name, stadium.Capacity FROM stadium JOIN event ON stadium.ID = event.Stadium_ID WHERE event.Name = 'World Junior';", "gold_sql": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'", "source_tables": ["event", "stadium"]}
{"sample_id": 5622, "db_id": "swimming", "question": "Find the names of stadiums which have never had any event.", "rationale": ["Identify the table that contains stadium information, which is the 'stadium' table.", "Determine the condition for a stadium to have never hosted an event, which means its ID should not appear in the 'event' table's Stadium_ID column.", "Construct a subquery that selects all Stadium_IDs from the 'event' table.", "Use the NOT IN clause to filter out stadiums whose IDs are present in the subquery result.", "Select the 'name' column from the 'stadium' table where the ID is not in the list of Stadium_IDs from the event table."], "pred_sql": "SELECT name FROM stadium WHERE ID NOT IN (SELECT Stadium_ID FROM event);", "gold_sql": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)", "source_tables": ["event", "stadium"]}
{"sample_id": 5623, "db_id": "swimming", "question": "Find the name of the swimmer who has the most records.", "rationale": ["Identify the relevant tables: swimmer and record.", "We need to find the swimmer with the most records, so we will join the swimmer table with the record table on the swimmer's ID.", "Group the results by swimmer ID to count the number of records each swimmer has.", "Order the results in descending order based on the count of records to get the swimmer with the most records at the top.", "Limit the results to 1 to get only the swimmer with the highest count."], "pred_sql": "SELECT swimmer.name FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID GROUP BY swimmer.ID ORDER BY COUNT(record.ID) DESC LIMIT 1;", "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["record", "swimmer"]}
{"sample_id": 5624, "db_id": "swimming", "question": "Find the name of the swimmer who has at least 2 records.", "rationale": ["Identify the relevant tables: swimmer and record.", "We need to find swimmers who have records, so we will join the swimmer table with the record table on the swimmer's ID.", "We will group the results by swimmer ID to count the number of records each swimmer has.", "We will use the HAVING clause to filter the groups to only include those with 2 or more records."], "pred_sql": "SELECT swimmer.name FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID GROUP BY swimmer.ID HAVING COUNT(record.ID) >= 2;", "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2", "source_tables": ["record", "swimmer"]}
{"sample_id": 5625, "db_id": "swimming", "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.", "rationale": ["Identify the relevant tables: swimmer and record.", "We need to find swimmers who have a result of 'win', so we will join the swimmer table with the record table on the swimmer's ID.", "We will filter the records to only include those where the result is 'win'.", "To find swimmers who have won more than once, we will group the results by swimmer ID.", "We will use the HAVING clause to filter groups that have a count of wins greater than 1.", "Finally, we will select the name and nationality of these swimmers."], "pred_sql": "SELECT swimmer.name, swimmer.Nationality \nFROM swimmer \nJOIN record ON swimmer.ID = record.Swimmer_ID \nWHERE record.Result = 'win' \nGROUP BY swimmer.ID \nHAVING COUNT(record.ID) > 1;", "gold_sql": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1", "source_tables": ["record", "swimmer"]}
{"sample_id": 5626, "db_id": "swimming", "question": "Find the names of the swimmers who have no record.", "rationale": ["Identify the table that contains swimmer information, which is the 'swimmer' table.", "Determine the relevant column for swimmer names, which is 'name'.", "To find swimmers with no records, we need to check which swimmer IDs are not present in the 'record' table.", "Use a subquery to select all Swimmer_IDs from the 'record' table.", "Use the NOT IN clause to filter out swimmers whose IDs are in the list of Swimmer_IDs from the 'record' table."], "pred_sql": "SELECT name FROM swimmer WHERE ID NOT IN (SELECT Swimmer_ID FROM record);", "gold_sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)", "source_tables": ["record", "swimmer"]}
{"sample_id": 5627, "db_id": "swimming", "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.", "rationale": ["We need to find swimmers who have both 'win' and 'loss' results in the record table.", "To do this, we will join the swimmer table with the record table on the swimmer's ID.", "We will filter the results to include only those records where the result is either 'win' or 'loss'.", "Next, we will group the results by the swimmer's ID to aggregate their results.", "Finally, we will use the HAVING clause to ensure that we only select swimmers who have both results, which means the count of distinct results should be 2."], "pred_sql": "SELECT DISTINCT s.name FROM swimmer s JOIN record r ON s.ID = r.Swimmer_ID WHERE r.Result IN ('win', 'loss') GROUP BY s.ID HAVING COUNT(DISTINCT r.Result) = 2;", "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'", "source_tables": ["record", "swimmer"]}
{"sample_id": 5628, "db_id": "swimming", "question": "Find the names of stadiums that some Australian swimmers have been to.", "rationale": ["We need to find the names of stadiums that Australian swimmers have been to.", "First, we identify the relevant tables: 'stadium', 'event', 'record', and 'swimmer'.", "We will join these tables based on their relationships: stadium to event via Stadium_ID, event to record via Event_ID, and record to swimmer via Swimmer_ID.", "Next, we filter the results to include only those swimmers whose nationality is 'Australian'.", "Finally, we select the distinct names of the stadiums from the results to avoid duplicates."], "pred_sql": "SELECT DISTINCT stadium.name FROM stadium JOIN event ON stadium.ID = event.Stadium_ID JOIN record ON event.ID = record.Event_ID JOIN swimmer ON record.Swimmer_ID = swimmer.ID WHERE swimmer.Nationality = 'Australian';", "gold_sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'", "source_tables": ["record", "event", "swimmer", "stadium"]}
{"sample_id": 5629, "db_id": "swimming", "question": "Find the names of stadiums that the most swimmers have been to.", "rationale": ["Identify the tables involved: stadium, event, record, and swimmer.", "We need to find the stadiums that have hosted the most swimmers, which means we need to join these tables based on their relationships.", "Join the stadium table with the event table using the Stadium_ID foreign key.", "Join the event table with the record table using the Event_ID foreign key.", "Join the record table with the swimmer table using the Swimmer_ID foreign key.", "Group the results by stadium ID to count the number of unique swimmers associated with each stadium.", "Order the results in descending order based on the count of swimmers to find the stadium with the most swimmers.", "Limit the results to 1 to get only the stadium with the highest count."], "pred_sql": "SELECT stadium.name\nFROM stadium\nJOIN event ON stadium.ID = event.Stadium_ID\nJOIN record ON event.ID = record.Event_ID\nJOIN swimmer ON record.Swimmer_ID = swimmer.ID\nGROUP BY stadium.ID\nORDER BY COUNT(swimmer.ID) DESC\nLIMIT 1;", "gold_sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["record", "event", "stadium"]}
{"sample_id": 5630, "db_id": "swimming", "question": "Find all details for each swimmer.", "rationale": ["The user wants to find all details for each swimmer.", "To retrieve all details from a table, we use the SELECT statement with an asterisk (*) to indicate all columns.", "The table we need to query is 'swimmer'.", "Thus, the SQL query will be 'SELECT * FROM swimmer;'"], "pred_sql": "SELECT * FROM swimmer;", "gold_sql": "SELECT * FROM swimmer", "source_tables": ["swimmer"]}
{"sample_id": 5631, "db_id": "swimming", "question": "What is the average capacity of the stadiums that were opened in year 2005?", "rationale": ["Identify the table that contains the relevant information about stadiums, which is the 'stadium' table.", "Determine the column that holds the capacity of the stadiums, which is 'Capacity'.", "Identify the column that indicates the year the stadium was opened, which is 'Opening_year'.", "To find the average capacity of stadiums opened in 2005, we need to filter the records where 'Opening_year' equals 2005.", "Use the AVG() function to calculate the average of the 'Capacity' column for the filtered records."], "pred_sql": "SELECT AVG(Capacity) AS average_capacity FROM stadium WHERE Opening_year = 2005;", "gold_sql": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005", "source_tables": ["stadium"]}
{"sample_id": 5632, "db_id": "railway", "question": "How many railways are there?", "rationale": ["Identify the table that contains the information about railways, which is the 'railway' table.", "To find out how many railways there are, we need to count the number of entries in the 'railway' table.", "Use the COUNT() function to count all rows in the 'railway' table.", "Select the count with an alias 'total_railways' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_railways FROM railway;", "gold_sql": "SELECT count(*) FROM railway", "source_tables": ["railway"]}
{"sample_id": 5633, "db_id": "railway", "question": "List the builders of railways in ascending alphabetical order.", "rationale": ["Identify the relevant table: The 'railway' table contains the 'Builder' column which we need to list.", "Select the 'Builder' column: We need to retrieve the names of the builders.", "Use DISTINCT to avoid duplicate builder names: Since multiple railways can have the same builder, we use DISTINCT to get unique names.", "Order the results: We need to sort the builders in ascending alphabetical order, which can be done using the ORDER BY clause with ASC."], "pred_sql": "SELECT DISTINCT Builder FROM railway ORDER BY Builder ASC;", "gold_sql": "SELECT Builder FROM railway ORDER BY Builder ASC", "source_tables": ["railway"]}
{"sample_id": 5634, "db_id": "railway", "question": "List the wheels and locations of the railways.", "rationale": ["Identify the relevant table: The query requires information about wheels and locations, which are both found in the 'railway' table.", "Select the specific columns: We need to select the 'Wheels' and 'Location' columns from the 'railway' table.", "Construct the SQL query: Using the SELECT statement to retrieve the specified columns from the 'railway' table."], "pred_sql": "SELECT Wheels, Location FROM railway;", "gold_sql": "SELECT Wheels ,  LOCATION FROM railway", "source_tables": ["railway"]}
{"sample_id": 5635, "db_id": "railway", "question": "What is the maximum level of managers in countries that are not \"Australia\"?", "rationale": ["Identify the table that contains the information about managers, which is the 'manager' table.", "Determine the relevant column for the management level, which is 'Level'.", "We need to find the maximum level, so we will use the MAX() function on the 'Level' column.", "We need to filter out managers based in Australia, so we will add a WHERE clause to exclude 'Australia' from the 'Country' column."], "pred_sql": "SELECT MAX(Level) AS Max_Level FROM manager WHERE Country != 'Australia';", "gold_sql": "SELECT max(LEVEL) FROM manager WHERE Country != 'Australia\t'", "source_tables": ["manager"]}
{"sample_id": 5636, "db_id": "railway", "question": "What is the average age for all managers?", "rationale": ["Identify the table that contains the relevant data: the 'manager' table holds information about managers, including their ages.", "Determine the specific data needed: we need to calculate the average age of all managers.", "Use the AVG() function to compute the average of the 'Age' column in the 'manager' table.", "Construct the SQL query to select the average age from the 'manager' table."], "pred_sql": "SELECT AVG(Age) AS Average_Age FROM manager;", "gold_sql": "SELECT avg(Age) FROM manager", "source_tables": ["manager"]}
{"sample_id": 5637, "db_id": "railway", "question": "What are the names of managers in ascending order of level?", "rationale": ["Identify the table that contains the information about managers, which is the 'manager' table.", "Determine the column that contains the names of the managers, which is 'Name'.", "Since the user wants the names in ascending order of their level, we need to order the results by the 'Level' column.", "Construct the SQL query to select the 'Name' from the 'manager' table and order the results by 'Level' in ascending order."], "pred_sql": "SELECT Name FROM manager ORDER BY Level ASC;", "gold_sql": "SELECT Name FROM manager ORDER BY LEVEL ASC", "source_tables": ["manager"]}
{"sample_id": 5638, "db_id": "railway", "question": "What are the names and arrival times of trains?", "rationale": ["Identify the table that contains the information about trains, which is the 'train' table.", "Determine the specific columns needed from the 'train' table, which are 'Name' for the train's name and 'Arrival' for the arrival times.", "Construct the SQL query to select the 'Name' and 'Arrival' columns from the 'train' table."], "pred_sql": "SELECT Name, Arrival FROM train;", "gold_sql": "SELECT Name ,  Arrival FROM train", "source_tables": ["train"]}
{"sample_id": 5639, "db_id": "railway", "question": "What is the name of the oldest manager?", "rationale": ["Identify the table that contains manager information, which is the 'manager' table.", "To find the oldest manager, we need to look for the manager who started working the earliest.", "The relevant column for determining the oldest manager is 'Working_year_starts'.", "We will sort the results by 'Working_year_starts' in ascending order to get the earliest year first.", "Finally, we will limit the results to 1 to get only the name of the oldest manager."], "pred_sql": "SELECT Name FROM manager ORDER BY Working_year_starts ASC LIMIT 1;", "gold_sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1", "source_tables": ["manager"]}
{"sample_id": 5640, "db_id": "railway", "question": "Show the names of trains and locations of railways they are in.", "rationale": ["Identify the tables needed: 'train' for train names and 'railway' for railway locations.", "Determine the columns to select: 'Name' from 'train' and 'Location' from 'railway'.", "Establish the relationship between the tables using the foreign key 'Railway_ID'.", "Construct the SQL query using a JOIN to combine the 'train' and 'railway' tables based on 'Railway_ID'.", "Format the SELECT statement to retrieve the desired columns with appropriate aliases."], "pred_sql": "SELECT train.Name AS Train_Name, railway.Location AS Railway_Location\nFROM train\nJOIN railway ON train.Railway_ID = railway.Railway_ID;", "gold_sql": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID", "source_tables": ["train", "railway"]}
{"sample_id": 5641, "db_id": "railway", "question": "Show the builder of railways associated with the trains named \"Andaman Exp\".", "rationale": ["Identify the relevant tables: 'railway' and 'train' are needed to find the builder of the railways associated with specific trains.", "Determine the relationship between the tables: 'train' has a foreign key 'Railway_ID' that links to 'railway'.", "Filter the trains by the name 'Andaman Exp' to find the specific train of interest.", "Select the 'Builder' column from the 'railway' table, which contains the information about who built the railways."], "pred_sql": "SELECT railway.Builder FROM railway JOIN train ON railway.Railway_ID = train.Railway_ID WHERE train.Name = 'Andaman Exp';", "gold_sql": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  'Andaman Exp'", "source_tables": ["train", "railway"]}
{"sample_id": 5642, "db_id": "railway", "question": "Show id and location of railways that are associated with more than one train.", "rationale": ["Identify the relevant tables: 'railway' and 'train' are needed to get the railway details and their associated trains.", "Join the 'railway' table with the 'train' table on the 'Railway_ID' to link each railway with its trains.", "Group the results by 'Railway_ID' and 'Location' to aggregate the data for each railway.", "Use the HAVING clause to filter the groups to only include those with more than one associated train, which is determined by counting 'Train_ID' in the 'train' table."], "pred_sql": "SELECT railway.Railway_ID, railway.Location \nFROM railway \nJOIN train ON railway.Railway_ID = train.Railway_ID \nGROUP BY railway.Railway_ID, railway.Location \nHAVING COUNT(train.Train_ID) > 1;", "gold_sql": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1", "source_tables": ["train", "railway"]}
{"sample_id": 5643, "db_id": "railway", "question": "Show the id and builder of the railway that are associated with the most trains.", "rationale": ["Identify the relevant tables: railway and train.", "Determine the columns needed: Railway_ID and Builder from the railway table.", "Join the railway table with the train table on Railway_ID to associate railways with their trains.", "Group the results by Railway_ID and Builder to count the number of trains associated with each railway.", "Order the results by the count of trains in descending order to find the railway with the most trains.", "Limit the results to 1 to get only the railway associated with the most trains."], "pred_sql": "SELECT r.Railway_ID, r.Builder \nFROM railway r \nJOIN train t ON r.Railway_ID = t.Railway_ID \nGROUP BY r.Railway_ID, r.Builder \nORDER BY COUNT(t.Train_ID) DESC \nLIMIT 1;", "gold_sql": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["train", "railway"]}
{"sample_id": 5644, "db_id": "railway", "question": "Show different builders of railways, along with the corresponding number of railways using each builder.", "rationale": ["Identify the relevant table: The 'railway' table contains information about builders and railways.", "Determine the required columns: We need the 'Builder' column and a count of railways for each builder.", "Use the COUNT function to count the number of railways associated with each builder.", "Group the results by the 'Builder' column to get the count for each unique builder."], "pred_sql": "SELECT Builder, COUNT(Railway_ID) AS Number_of_Railways FROM railway GROUP BY Builder;", "gold_sql": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder", "source_tables": ["railway"]}
{"sample_id": 5645, "db_id": "railway", "question": "Show the most common builder of railways.", "rationale": ["Identify the relevant table: The 'railway' table contains the 'Builder' column which we need to analyze.", "Count the occurrences of each builder: We will use the COUNT() function to count how many railways each builder has constructed.", "Group the results by builder: We will use GROUP BY to aggregate the results based on the 'Builder' column.", "Order the results: To find the most common builder, we will order the results in descending order based on the count of railways.", "Limit the results to one: Since we only want the most common builder, we will use LIMIT 1 to get the top result."], "pred_sql": "SELECT Builder, COUNT(*) as BuilderCount FROM railway GROUP BY Builder ORDER BY BuilderCount DESC LIMIT 1;", "gold_sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["railway"]}
{"sample_id": 5646, "db_id": "railway", "question": "Show different locations of railways along with the corresponding number of railways at each location.", "rationale": ["Identify the relevant table: The 'railway' table contains the 'Location' and 'Railway_ID' columns needed for this query.", "Select the 'Location' column to display the different locations of railways.", "Use the COUNT function to count the number of railways at each location, which will be grouped by the 'Location'.", "Group the results by 'Location' to ensure that we get a count of railways for each unique location."], "pred_sql": "SELECT Location, COUNT(Railway_ID) AS Number_of_Railways FROM railway GROUP BY Location;", "gold_sql": "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION", "source_tables": ["railway"]}
{"sample_id": 5647, "db_id": "railway", "question": "Show the locations that have more than one railways.", "rationale": ["Identify the table that contains the location information, which is the 'railway' table.", "We need to find locations that have more than one railway, so we will use the GROUP BY clause to group the results by 'Location'.", "To filter the groups to only those with more than one railway, we will use the HAVING clause with COUNT(Railway_ID) > 1."], "pred_sql": "SELECT Location FROM railway GROUP BY Location HAVING COUNT(Railway_ID) > 1;", "gold_sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1", "source_tables": ["railway"]}
{"sample_id": 5648, "db_id": "railway", "question": "List the object number of railways that do not have any trains.", "rationale": ["Identify the 'railway' table as it contains the 'ObjectNumber' and 'Railway_ID'.", "To find railways without any trains, we need to check which 'Railway_ID's in the 'railway' table do not exist in the 'train' table.", "Use a subquery to select distinct 'Railway_ID's from the 'train' table.", "The main query will select 'ObjectNumber' from the 'railway' table where the 'Railway_ID' is not in the list of 'Railway_ID's returned by the subquery."], "pred_sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT DISTINCT Railway_ID FROM train);", "gold_sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)", "source_tables": ["train", "railway"]}
{"sample_id": 5649, "db_id": "railway", "question": "Show the countries that have both managers of age above 50 and managers of age below 46.", "rationale": ["Identify the managers who are older than 50 years.", "Identify the managers who are younger than 46 years.", "Find the countries of managers older than 50.", "Find the countries of managers younger than 46.", "Use a subquery to filter countries that have both conditions satisfied."], "pred_sql": "SELECT DISTINCT m1.Country\nFROM manager m1\nJOIN railway_manage rm1 ON m1.Manager_ID = rm1.Manager_ID\nJOIN railway r1 ON rm1.Railway_ID = r1.Railway_ID\nWHERE m1.Age > '50'\nAND m1.Country IN (\n    SELECT m2.Country\n    FROM manager m2\n    JOIN railway_manage rm2 ON m2.Manager_ID = rm2.Manager_ID\n    JOIN railway r2 ON rm2.Railway_ID = r2.Railway_ID\n    WHERE m2.Age < '46'\n)", "gold_sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46", "source_tables": ["manager"]}
{"sample_id": 5650, "db_id": "railway", "question": "Show the distinct countries of managers.", "rationale": ["Identify the table that contains the information about managers, which is the 'manager' table.", "Determine the specific column that holds the country information, which is the 'Country' column.", "Use the DISTINCT keyword to ensure that only unique countries are returned in the result set.", "Construct the SQL query to select distinct countries from the 'manager' table."], "pred_sql": "SELECT DISTINCT Country FROM manager;", "gold_sql": "SELECT DISTINCT Country FROM manager", "source_tables": ["manager"]}
{"sample_id": 5651, "db_id": "railway", "question": "Show the working years of managers in descending order of their level.", "rationale": ["Identify the relevant table: The 'manager' table contains information about managers including their working years and levels.", "Select the required columns: We need to select 'Name', 'Working_year_starts', and 'Level' from the 'manager' table.", "Order the results: The results should be ordered in descending order based on the 'Level' of the managers.", "Construct the SQL query: Combine the selected columns, the table name, and the order clause to form the complete SQL query."], "pred_sql": "SELECT Name, Working_year_starts, Level FROM manager ORDER BY Level DESC;", "gold_sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC", "source_tables": ["manager"]}
{"sample_id": 5652, "db_id": "railway", "question": "Show the countries that have managers of age above 50 or below 46.", "rationale": ["Identify the table that contains the information about managers, which is the 'manager' table.", "Determine the relevant column for filtering, which is 'Age'.", "Specify the condition to filter managers based on age: those older than 50 or younger than 46.", "Use the DISTINCT keyword to ensure that each country is listed only once in the results.", "Construct the SQL query to select the distinct countries from the 'manager' table where the age condition is met."], "pred_sql": "SELECT DISTINCT Country FROM manager WHERE Age > '50' OR Age < '46';", "gold_sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46", "source_tables": ["manager"]}
{"sample_id": 5653, "db_id": "customers_and_products_contacts", "question": "How many addresses are there in country USA?", "rationale": ["Identify the table that contains address information, which is the 'Addresses' table.", "Determine the relevant column for counting addresses, which is the 'address_id' column.", "Use the COUNT() function to count the number of addresses.", "Add a WHERE clause to filter the results to only include addresses where the 'country' column is 'USA'."], "pred_sql": "SELECT COUNT(*) AS address_count FROM Addresses WHERE country = 'USA';", "gold_sql": "SELECT count(*) FROM addresses WHERE country  =  'USA'", "source_tables": ["addresses"]}
{"sample_id": 5654, "db_id": "customers_and_products_contacts", "question": "Show all distinct cities in the address record.", "rationale": ["Identify the table that contains the city information, which is the Addresses table.", "To get distinct cities, we need to use the DISTINCT keyword in our SQL query.", "The SQL query will select the 'city' column from the Addresses table."], "pred_sql": "SELECT DISTINCT city FROM Addresses;", "gold_sql": "SELECT DISTINCT city FROM addresses", "source_tables": ["addresses"]}
{"sample_id": 5655, "db_id": "customers_and_products_contacts", "question": "Show each state and the number of addresses in each state.", "rationale": ["Identify the relevant table: The 'Addresses' table contains the state information and the addresses.", "Determine the required columns: We need 'state_province_county' for the state and a count of addresses.", "Use the COUNT() function to count the number of addresses for each state.", "Group the results by 'state_province_county' to get the count for each state."], "pred_sql": "SELECT state_province_county, COUNT(*) AS address_count FROM Addresses GROUP BY state_province_county;", "gold_sql": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county", "source_tables": ["addresses"]}
{"sample_id": 5656, "db_id": "customers_and_products_contacts", "question": "Show names and phones of customers who do not have address information.", "rationale": ["Identify the relevant table: Customers, as it contains customer names and phone numbers.", "Determine the columns needed: customer_name and customer_phone.", "Establish the condition for customers without address information: This can be done by checking if the customer_address column is NULL or an empty string.", "Construct the SQL SELECT statement to retrieve the required columns from the Customers table with the specified condition."], "pred_sql": "SELECT customer_name, customer_phone FROM Customers WHERE customer_address IS NULL OR customer_address = '';", "gold_sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)", "source_tables": ["customers", "customer_address_history"]}
{"sample_id": 5657, "db_id": "customers_and_products_contacts", "question": "Show the name of the customer who has the most orders.", "rationale": ["Identify the table that contains customer information, which is the Customers table.", "Identify the table that contains order information, which is the Customer_Orders table.", "To find the customer with the most orders, we need to count the number of orders for each customer. This can be done using a GROUP BY clause on the customer_id in the Customer_Orders table.", "We will order the results by the count of orders in descending order to get the customer with the most orders at the top.", "We will limit the results to 1 to get only the top customer.", "Finally, we will select the customer_name from the Customers table where the customer_id matches the one with the most orders."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1);", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customer_orders", "customers"]}
{"sample_id": 5658, "db_id": "customers_and_products_contacts", "question": "Show the product type codes which have at least two products.", "rationale": ["Identify the relevant table: The Products table contains the product_type_code and product_id.", "Group the results by product_type_code: This allows us to aggregate the products based on their type codes.", "Count the number of products for each product_type_code: We need to determine how many products belong to each type code.", "Filter the groups: Use the HAVING clause to only include those product_type_codes that have a count of at least 2 products."], "pred_sql": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2;", "gold_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2", "source_tables": ["products"]}
{"sample_id": 5659, "db_id": "customers_and_products_contacts", "question": "Show the names of customers who have both an order in completed status and an order in part status.", "rationale": ["We need to find customers who have orders in both 'completed' and 'part' statuses.", "Start by selecting the customer names from the Customers table.", "Join the Customer_Orders table to link customers with their orders using the customer_id.", "Filter the results to include only those orders that have a status of either 'completed' or 'part'.", "Group the results by customer_id to aggregate the orders for each customer.", "Use the HAVING clause to ensure that only customers with both statuses are included, which means we need to count distinct order statuses and check that it equals 2."], "pred_sql": "SELECT DISTINCT c.customer_name \nFROM Customers c \nJOIN Customer_Orders co ON c.customer_id = co.customer_id \nWHERE co.order_status_code IN ('completed', 'part') \nGROUP BY c.customer_id \nHAVING COUNT(DISTINCT co.order_status_code) = 2;", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'", "source_tables": ["customer_orders", "customers"]}
{"sample_id": 5660, "db_id": "customers_and_products_contacts", "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.", "rationale": ["Identify the required fields: customer_name, customer_phone, and payment_method_code from the Customers table.", "Determine the sorting requirement: the results should be in descending order based on customer_number.", "Construct the SQL SELECT statement to retrieve the specified fields from the Customers table.", "Add the ORDER BY clause to sort the results by customer_number in descending order."], "pred_sql": "SELECT customer_name, customer_phone, payment_method_code FROM Customers ORDER BY customer_number DESC;", "gold_sql": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC", "source_tables": ["customers"]}
{"sample_id": 5661, "db_id": "customers_and_products_contacts", "question": "Show the product name and total order quantity for each product.", "rationale": ["Identify the required columns: product name and total order quantity.", "The product name is in the Products table and the order quantity is in the Order_Items table.", "To get the total order quantity for each product, we need to sum the order_quantity from the Order_Items table.", "We need to join the Products table with the Order_Items table on the product_id column to link products with their order quantities.", "Finally, we group the results by product name to get the total quantity for each product."], "pred_sql": "SELECT Products.product_name, SUM(Order_Items.order_quantity) AS total_order_quantity\nFROM Products\nJOIN Order_Items ON Products.product_id = Order_Items.product_id\nGROUP BY Products.product_name;", "gold_sql": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id", "source_tables": ["products", "order_items"]}
{"sample_id": 5662, "db_id": "customers_and_products_contacts", "question": "Show the minimum, maximum, average price for all products.", "rationale": ["Identify the table that contains the product prices, which is the 'Products' table.", "Determine the required calculations: minimum, maximum, and average prices.", "Use the aggregate functions MIN(), MAX(), and AVG() to compute the respective values for the 'product_price' column.", "Construct the SQL SELECT statement to retrieve these calculated values from the 'Products' table."], "pred_sql": "SELECT MIN(product_price) AS min_price, MAX(product_price) AS max_price, AVG(product_price) AS avg_price FROM Products;", "gold_sql": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products", "source_tables": ["products"]}
{"sample_id": 5663, "db_id": "customers_and_products_contacts", "question": "How many products have a price higher than the average?", "rationale": ["Identify the table that contains product prices, which is the 'Products' table.", "To find products with a price higher than the average, we need to calculate the average price using the AVG() function.", "The subquery (SELECT AVG(product_price) FROM Products) calculates the average price of all products.", "The main query counts the number of products where the product_price is greater than the average price calculated in the subquery using COUNT(*) function."], "pred_sql": "SELECT COUNT(*) AS product_count FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);", "gold_sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)", "source_tables": ["products"]}
{"sample_id": 5664, "db_id": "customers_and_products_contacts", "question": "Show the customer name, customer address city, date from, and date to for each customer address history.", "rationale": ["Identify the required fields: customer name, city, date from, and date to.", "Determine the tables that contain these fields: Customers for customer name, Addresses for city, and Customer_Address_History for date from and date to.", "Establish the relationships between the tables: Customer_Address_History links to Customers via customer_id and to Addresses via address_id.", "Construct the SQL SELECT statement to retrieve the desired fields from the appropriate tables using JOINs to connect them."], "pred_sql": "SELECT Customers.customer_name, Addresses.city, Customer_Address_History.date_from, Customer_Address_History.date_to \nFROM Customer_Address_History \nJOIN Customers ON Customer_Address_History.customer_id = Customers.customer_id \nJOIN Addresses ON Customer_Address_History.address_id = Addresses.address_id;", "gold_sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id", "source_tables": ["addresses", "customers", "customer_address_history"]}
{"sample_id": 5665, "db_id": "customers_and_products_contacts", "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.", "rationale": ["Identify the relevant table: Customers, which contains customer information including payment method and name.", "Filter customers based on the payment method: We need customers who use 'Credit Card' as their payment method, which is stored in the 'payment_method_code' column.", "Next, we need to find customers who have more than 2 orders. This requires looking at the Customer_Orders table, where we can group by 'customer_id' and count the number of orders for each customer.", "Use a subquery to get the customer_ids of those who have more than 2 orders. This is done by grouping the Customer_Orders by 'customer_id' and using the HAVING clause to filter those with a count of order_id greater than 2.", "Finally, combine the results: Select the 'customer_name' from the Customers table where the 'payment_method_code' is 'Credit Card' and the 'customer_id' is in the list of customer_ids returned by the subquery."], "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method_code = 'Credit Card' AND customer_id IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING COUNT(order_id) > 2);", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", "source_tables": ["customer_orders", "customers"]}
{"sample_id": 5666, "db_id": "customers_and_products_contacts", "question": "What are the name and phone of the customer with the most ordered product quantity?", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, and Order_Items are needed to get customer details and their order quantities.", "Join the Customers table with Customer_Orders on customer_id to link customers to their orders.", "Join the resulting table with Order_Items on order_id to access the quantity of products ordered by each customer.", "Group the results by customer_id to aggregate the order quantities for each customer.", "Use SUM(oi.order_quantity) to calculate the total quantity of products ordered by each customer.", "Order the results in descending order based on the total quantity ordered to find the customer with the most ordered product quantity.", "Limit the results to 1 to get only the top customer."], "pred_sql": "SELECT c.customer_name, c.customer_phone\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nJOIN Order_Items oi ON co.order_id = oi.order_id\nGROUP BY c.customer_id\nORDER BY SUM(oi.order_quantity) DESC\nLIMIT 1;", "gold_sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 5667, "db_id": "customers_and_products_contacts", "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.", "rationale": ["Identify the table that contains the relevant information: Products.", "Determine the columns needed: product_type_code and product_name.", "Specify the condition for filtering products: price higher than 1000 or lower than 500.", "Construct the SQL SELECT statement to retrieve the specified columns from the Products table with the given conditions."], "pred_sql": "SELECT product_type_code, product_name FROM Products WHERE product_price > 1000 OR product_price < 500;", "gold_sql": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500", "source_tables": ["products"]}
{"sample_id": 5668, "db_id": "dorm_1", "question": "Find the name of dorms only for female (F gender).", "rationale": ["Identify the table that contains dormitory information, which is the 'Dorm' table.", "Determine the column that contains the dormitory names, which is 'dorm_name'.", "Identify the condition needed to filter the dorms for females, which is the 'gender' column being equal to 'F'.", "Construct the SQL query to select the 'dorm_name' from the 'Dorm' table where the 'gender' is 'F'."], "pred_sql": "SELECT dorm_name FROM Dorm WHERE gender = 'F';", "gold_sql": "SELECT dorm_name FROM dorm WHERE gender  =  'F'", "source_tables": ["dorm"]}
{"sample_id": 5669, "db_id": "dorm_1", "question": "What are the names of the all-female dorms?", "rationale": ["Identify the table that contains information about dormitories, which is the 'Dorm' table.", "Determine the relevant column that contains the names of the dormitories, which is 'dorm_name'.", "Identify the condition needed to filter for all-female dorms, which is the 'gender' column being equal to 'female'.", "Construct the SQL query to select the 'dorm_name' from the 'Dorm' table where the 'gender' is 'female'."], "pred_sql": "SELECT dorm_name FROM Dorm WHERE gender = 'female';", "gold_sql": "SELECT dorm_name FROM dorm WHERE gender  =  'F'", "source_tables": ["dorm"]}
{"sample_id": 5670, "db_id": "dorm_1", "question": "Find the name of dorms that can accommodate more than 300 students.", "rationale": ["Identify the table that contains information about dormitories, which is the 'Dorm' table.", "Determine the relevant column that indicates the capacity of each dormitory, which is 'student_capacity'.", "Formulate a condition to filter dormitories based on their capacity, specifically those that can accommodate more than 300 students.", "Construct the SQL query to select the 'dorm_name' from the 'Dorm' table where the 'student_capacity' exceeds 300."], "pred_sql": "SELECT dorm_name FROM Dorm WHERE student_capacity > 300;", "gold_sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300", "source_tables": ["dorm"]}
{"sample_id": 5671, "db_id": "dorm_1", "question": "What are the names of all the dorms that can accomdate more than 300 students?", "rationale": ["Identify the table that contains information about dormitories, which is the 'Dorm' table.", "Determine the relevant column that indicates the capacity of each dormitory, which is 'student_capacity'.", "Formulate a condition to filter dormitories that can accommodate more than 300 students, using the condition 'student_capacity > 300'.", "Select the 'dorm_name' column to retrieve the names of the dormitories that meet the condition."], "pred_sql": "SELECT dorm_name FROM Dorm WHERE student_capacity > 300;", "gold_sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300", "source_tables": ["dorm"]}
{"sample_id": 5672, "db_id": "dorm_1", "question": "How many female students (sex is F) whose age is below 25?", "rationale": ["Identify the table that contains the relevant data: the 'Student' table.", "Determine the conditions specified in the query: we need to filter for female students (Sex = 'F') and those whose age is below 25.", "Construct the SQL query to count the number of records that meet these conditions using COUNT(*) function.", "Use the WHERE clause to apply the filters for sex and age."], "pred_sql": "SELECT COUNT(*) FROM Student WHERE Sex = 'F' AND Age < '25';", "gold_sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25", "source_tables": ["student"]}
{"sample_id": 5673, "db_id": "dorm_1", "question": "How many girl students who are younger than 25?", "rationale": ["Identify the table that contains the relevant data: the 'Student' table.", "Determine the criteria for counting students: we need to count female students (Sex = 'F') who are younger than 25 years old (Age < '25').", "Use the COUNT() function to count the number of records that meet these criteria.", "Construct the SQL query to select the count from the 'Student' table with the specified conditions."], "pred_sql": "SELECT COUNT(*) AS girl_students_count FROM Student WHERE Sex = 'F' AND Age < '25';", "gold_sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25", "source_tables": ["student"]}
{"sample_id": 5674, "db_id": "dorm_1", "question": "Find the first name of students who is older than 20.", "rationale": ["Identify the table that contains the relevant information: the 'Student' table holds the first names and ages of students.", "Determine the specific columns needed: we need the 'Fname' column for the first names of students.", "Establish the condition for filtering: we want students who are older than 20, which means we need to filter the 'Age' column to be greater than '20'.", "Construct the SQL query using the SELECT statement to retrieve the 'Fname' from the 'Student' table where the 'Age' is greater than '20'."], "pred_sql": "SELECT Fname FROM Student WHERE Age > '20';", "gold_sql": "SELECT fname FROM student WHERE age  >  20", "source_tables": ["student"]}
{"sample_id": 5675, "db_id": "dorm_1", "question": "What are the first names of all students who are older than 20?", "rationale": ["Identify the table that contains the information about students, which is the 'Student' table.", "Determine the column that contains the first names of the students, which is 'Fname'.", "Identify the condition to filter the students, which is that their age must be greater than 20.", "Construct the SQL query to select the 'Fname' column from the 'Student' table where the 'Age' column is greater than 20."], "pred_sql": "SELECT Fname FROM Student WHERE Age > '20';", "gold_sql": "SELECT fname FROM student WHERE age  >  20", "source_tables": ["student"]}
{"sample_id": 5676, "db_id": "dorm_1", "question": "Find the first name of students living in city PHL whose age is between 20 and 25.", "rationale": ["Identify the table that contains the required information: The 'Student' table contains the first names and age of students.", "Determine the conditions for filtering: We need students living in the city with code 'PHL' and whose age is between 20 and 25.", "Construct the SQL SELECT statement: We will select the 'Fname' column from the 'Student' table.", "Add the WHERE clause to filter by city_code and age: We will specify that city_code must be 'PHL' and age must be between '20' and '25'.", "Combine all parts to form the complete SQL query."], "pred_sql": "SELECT Fname FROM Student WHERE city_code = 'PHL' AND Age BETWEEN '20' AND '25';", "gold_sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", "source_tables": ["student"]}
{"sample_id": 5677, "db_id": "dorm_1", "question": "What is the first name of the students who are in age 20 to 25 and living in PHL city?", "rationale": ["Identify the relevant table: The query is about students, so we will use the 'Student' table.", "Determine the columns needed: We need the 'Fname' column to get the first names of the students.", "Filter conditions: We need to filter students based on their age (between 20 and 25) and their city code (PHL).", "Construct the SQL query: Use the SELECT statement to get 'Fname' from 'Student' where the conditions for age and city code are met."], "pred_sql": "SELECT Fname FROM Student WHERE Age BETWEEN '20' AND '25' AND city_code = 'PHL';", "gold_sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", "source_tables": ["student"]}
{"sample_id": 5678, "db_id": "dorm_1", "question": "How many dorms are there?", "rationale": ["Identify the requirement: We need to find out how many dorms exist in the database.", "Determine the appropriate table: The 'Dorm' table contains the information about dormitories.", "Use the COUNT function: To count the number of entries (dorms) in the 'Dorm' table, we will use the COUNT(*) function.", "Construct the SQL query: The SQL query will select the count of all records from the 'Dorm' table."], "pred_sql": "SELECT COUNT(*) AS total_dorms FROM Dorm;", "gold_sql": "SELECT count(*) FROM dorm", "source_tables": ["dorm"]}
{"sample_id": 5679, "db_id": "dorm_1", "question": "How many dorms are in the database?", "rationale": ["Identify the requirement to count the number of dormitories in the database.", "Determine the appropriate table to query, which is the 'Dorm' table.", "Use the COUNT() function to count the total number of entries in the 'Dorm' table.", "Construct the SQL query to select the count from the 'Dorm' table."], "pred_sql": "SELECT COUNT(*) AS total_dorms FROM Dorm;", "gold_sql": "SELECT count(*) FROM dorm", "source_tables": ["dorm"]}
{"sample_id": 5680, "db_id": "dorm_1", "question": "Find the number of distinct amenities.", "rationale": ["Identify the table that contains the amenities, which is 'Dorm_amenity'.", "To find the number of distinct amenities, we need to count unique entries in the 'amenid' column.", "Use the COUNT function along with DISTINCT to get the count of unique 'amenid' values.", "Construct the SQL query to select the count of distinct 'amenid' from the 'Dorm_amenity' table."], "pred_sql": "SELECT COUNT(DISTINCT amenid) AS distinct_amenities FROM Dorm_amenity;", "gold_sql": "SELECT count(*) FROM dorm_amenity", "source_tables": ["dorm_amenity"]}
{"sample_id": 5681, "db_id": "dorm_1", "question": "How many diffrent dorm amenities are there?", "rationale": ["Identify the table that contains the information about dorm amenities, which is the 'Dorm_amenity' table.", "To find the number of different dorm amenities, we need to count the distinct values in the 'amenid' column of the 'Dorm_amenity' table.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique amenities."], "pred_sql": "SELECT COUNT(DISTINCT amenid) AS different_amenities FROM Dorm_amenity;", "gold_sql": "SELECT count(*) FROM dorm_amenity", "source_tables": ["dorm_amenity"]}
{"sample_id": 5682, "db_id": "dorm_1", "question": "Find the total capacity of all dorms.", "rationale": ["Identify the table that contains the information about dormitory capacities, which is the 'Dorm' table.", "Determine the column that holds the capacity information, which is 'student_capacity'.", "To find the total capacity of all dorms, use the SUM() function to aggregate the values in the 'student_capacity' column.", "Construct the SQL query to select the sum of 'student_capacity' from the 'Dorm' table."], "pred_sql": "SELECT SUM(student_capacity) AS total_capacity FROM Dorm;", "gold_sql": "SELECT sum(student_capacity) FROM dorm", "source_tables": ["dorm"]}
{"sample_id": 5683, "db_id": "dorm_1", "question": "What is the total student capacity of all dorms?", "rationale": ["Identify the relevant table: The 'Dorm' table contains the 'student_capacity' column which holds the capacity information for each dormitory.", "Determine the operation needed: We need to calculate the total capacity, which requires the SUM function to aggregate the 'student_capacity' values.", "Construct the SQL query: Use the SELECT statement to retrieve the sum of 'student_capacity' from the 'Dorm' table."], "pred_sql": "SELECT SUM(student_capacity) AS total_capacity FROM Dorm;", "gold_sql": "SELECT sum(student_capacity) FROM dorm", "source_tables": ["dorm"]}
{"sample_id": 5684, "db_id": "dorm_1", "question": "How many students are there?", "rationale": ["Identify the requirement: We need to count the total number of students.", "Determine the relevant table: The 'Student' table contains the information about students.", "Use the COUNT() function to count the number of entries in the 'Student' table.", "Construct the SQL query to select the count from the 'Student' table."], "pred_sql": "SELECT COUNT(*) AS total_students FROM Student;", "gold_sql": "SELECT count(*) FROM student", "source_tables": ["student"]}
{"sample_id": 5685, "db_id": "dorm_1", "question": "How many students exist?", "rationale": ["Identify the requirement to count the number of students.", "Determine the relevant table, which is the 'Student' table.", "Use the COUNT() function to count all entries in the 'Student' table.", "Construct the SQL query to select the count from the 'Student' table."], "pred_sql": "SELECT COUNT(*) AS total_students FROM Student;", "gold_sql": "SELECT count(*) FROM student", "source_tables": ["student"]}
{"sample_id": 5686, "db_id": "dorm_1", "question": "Find the average age of all students living in the each city.", "rationale": ["Identify the relevant table: The 'Student' table contains the age and city code of each student.", "Determine the required calculation: We need to calculate the average age of students, which can be done using the AVG() function.", "Group the results: Since we want the average age for each city, we will use the GROUP BY clause on the 'city_code' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT city_code, AVG(Age) AS average_age FROM Student GROUP BY city_code;", "gold_sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code", "source_tables": ["student"]}
{"sample_id": 5687, "db_id": "dorm_1", "question": "What is the average age for each city and what are those cities?", "rationale": ["Identify the relevant table: The 'Student' table contains the 'Age' and 'city_code' columns needed for the query.", "Determine the required output: We need the average age for each city, which implies using the AVG() function on the 'Age' column.", "Group the results by city: To get the average age for each city, we will use the GROUP BY clause on the 'city_code' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() function, the FROM clause, and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT city_code, AVG(Age) AS average_age FROM Student GROUP BY city_code;", "gold_sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code", "source_tables": ["student"]}
{"sample_id": 5688, "db_id": "dorm_1", "question": "Find the average and total capacity of dorms for the students with gender X.", "rationale": ["Identify the tables involved: Dorm, Lives_in, and Student.", "We need to calculate the average and total capacity of dorms, which is found in the Dorm table under the 'student_capacity' column.", "To find the relevant dorms, we need to join the Lives_in table to link students to their dorms, and then join the Student table to filter by gender.", "The condition for filtering is that the gender of the students should match 'X'.", "Use the AVG() function to calculate the average capacity and the SUM() function to calculate the total capacity of the dorms that meet the criteria."], "pred_sql": "SELECT AVG(Dorm.student_capacity) AS average_capacity, SUM(Dorm.student_capacity) AS total_capacity FROM Dorm JOIN Lives_in ON Dorm.dormid = Lives_in.dormid JOIN Student ON Lives_in.stuid = Student.StuID WHERE Student.Sex = 'X';", "gold_sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", "source_tables": ["dorm"]}
{"sample_id": 5689, "db_id": "dorm_1", "question": "What is the average and total capacity for all dorms who are of gender X?", "rationale": ["Identify the relevant table: The query requires information about dormitory capacities, which is found in the 'Dorm' table.", "Determine the required calculations: The query asks for both the average and total capacities, which can be calculated using the AVG() and SUM() functions respectively.", "Filter the results: The query specifies that we only want dorms of a certain gender, denoted as 'X'. This requires a WHERE clause to filter the results based on the 'gender' column.", "Construct the SQL query: Combine the selected columns, calculations, and filtering conditions into a complete SQL statement."], "pred_sql": "SELECT AVG(student_capacity) AS average_capacity, SUM(student_capacity) AS total_capacity FROM Dorm WHERE gender = 'X';", "gold_sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", "source_tables": ["dorm"]}
{"sample_id": 5690, "db_id": "dorm_1", "question": "Find the number of dorms that have some amenity.", "rationale": ["Identify the tables involved: We need to find information from the Dorm and Has_amenity tables.", "Determine the relationship: The Has_amenity table links dorms to their amenities through the dormid column.", "Count distinct dorms: We want to count the number of unique dorms that have at least one amenity, so we will use COUNT(DISTINCT d.dormid).", "Construct the SQL query: We will use a JOIN to connect the Dorm and Has_amenity tables and then apply the COUNT function to get the desired result."], "pred_sql": "SELECT COUNT(DISTINCT d.dormid) AS number_of_dorms_with_amenities\nFROM Dorm d\nJOIN Has_amenity ha ON d.dormid = ha.dormid;", "gold_sql": "SELECT count(DISTINCT dormid) FROM has_amenity", "source_tables": ["has_amenity"]}
{"sample_id": 5691, "db_id": "dorm_1", "question": "How many dorms have amenities?", "rationale": ["Identify the tables involved: We need to find information from the Dorm and Has_amenity tables.", "Determine the relationship: The Has_amenity table links dorms to their amenities, so we will join these two tables on the dormid.", "Count distinct dorms: We want to count how many unique dorms have at least one amenity, which requires using COUNT(DISTINCT d.dormid).", "Construct the SQL query: Combine the SELECT statement with the JOIN condition to get the final query."], "pred_sql": "SELECT COUNT(DISTINCT d.dormid) AS number_of_dorms_with_amenities\nFROM Dorm d\nJOIN Has_amenity ha ON d.dormid = ha.dormid;", "gold_sql": "SELECT count(DISTINCT dormid) FROM has_amenity", "source_tables": ["has_amenity"]}
{"sample_id": 5692, "db_id": "dorm_1", "question": "Find the name of dorms that do not have any amenity", "rationale": ["Identify the table that contains dormitory information, which is the 'Dorm' table.", "We need to find dorms that do not have any amenities, so we will look for dorms whose IDs are not present in the 'Has_amenity' table.", "The 'Has_amenity' table links dorms to their amenities through the 'dormid' column.", "We will use a subquery to select all 'dormid' values from the 'Has_amenity' table and then use the NOT IN clause to filter out those dorms from the 'Dorm' table.", "Finally, we will select the 'dorm_name' from the filtered results."], "pred_sql": "SELECT dorm_name FROM Dorm WHERE dormid NOT IN (SELECT dormid FROM Has_amenity)", "gold_sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "source_tables": ["has_amenity", "dorm"]}
{"sample_id": 5693, "db_id": "dorm_1", "question": "What are the names of all the dorms that don't have any amenities?", "rationale": ["Identify the table that contains dorm information, which is the 'Dorm' table.", "Determine the relevant column to retrieve the names of the dorms, which is 'dorm_name'.", "To find dorms without amenities, we need to check which dorms are not present in the 'Has_amenity' table.", "Use a subquery to select all 'dormid' values from the 'Has_amenity' table.", "Use the NOT IN clause to filter out dorms that have any amenities from the main query."], "pred_sql": "SELECT dorm_name FROM Dorm WHERE dormid NOT IN (SELECT dormid FROM Has_amenity)", "gold_sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "source_tables": ["has_amenity", "dorm"]}
{"sample_id": 5694, "db_id": "dorm_1", "question": "Find the number of distinct gender for dorms.", "rationale": ["Identify the table that contains the gender information for dorms, which is the 'Dorm' table.", "To find the number of distinct genders, we need to use the COUNT function along with DISTINCT to count unique values in the 'gender' column.", "Construct the SQL query to select the count of distinct genders from the 'Dorm' table."], "pred_sql": "SELECT COUNT(DISTINCT gender) AS distinct_gender_count FROM Dorm;", "gold_sql": "SELECT count(DISTINCT gender) FROM dorm", "source_tables": ["dorm"]}
{"sample_id": 5695, "db_id": "dorm_1", "question": "How many different genders are there in the dorms?", "rationale": ["Identify the relevant table: The question pertains to the dorms, so we will use the Dorm table.", "Determine the column of interest: We need to count the distinct genders present in the dorms, which is represented by the 'gender' column in the Dorm table.", "Construct the SQL query: We will use the COUNT function along with DISTINCT to count the unique values in the 'gender' column.", "Formulate the final SQL query: The query will select the count of distinct genders from the Dorm table."], "pred_sql": "SELECT COUNT(DISTINCT gender) AS different_genders FROM Dorm;", "gold_sql": "SELECT count(DISTINCT gender) FROM dorm", "source_tables": ["dorm"]}
{"sample_id": 5696, "db_id": "dorm_1", "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.", "rationale": ["Identify the relevant table: The query requires information about dormitories, so we will use the 'Dorm' table.", "Determine the required columns: We need to retrieve 'student_capacity' and 'gender' from the 'Dorm' table.", "Filter the results: We need to find dorms whose names contain the substring 'Donor'. This can be done using the SQL 'LIKE' operator with wildcards.", "Construct the SQL query: Combine the selected columns, the table name, and the filtering condition into a complete SQL statement."], "pred_sql": "SELECT student_capacity, gender FROM Dorm WHERE dorm_name LIKE '%Donor%';", "gold_sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "source_tables": ["dorm"]}
{"sample_id": 5697, "db_id": "dorm_1", "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?", "rationale": ["Identify the relevant table: The query is asking for information about dormitories, so we will use the 'Dorm' table.", "Determine the required columns: We need to retrieve 'student_capacity' and 'gender' from the 'Dorm' table.", "Filter the results: The query specifies that we are looking for dorms with names that contain the phrase 'Donor'. We will use the LIKE operator with wildcards to achieve this.", "Construct the SQL query: Combine the SELECT statement with the FROM clause and the WHERE condition to form the complete SQL query."], "pred_sql": "SELECT student_capacity, gender FROM Dorm WHERE dorm_name LIKE '%Donor%';", "gold_sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "source_tables": ["dorm"]}
{"sample_id": 5698, "db_id": "dorm_1", "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.", "rationale": ["Identify the relevant table: The query requires information about dormitories, so we will use the 'Dorm' table.", "Determine the columns needed: We need the 'dorm_name' and 'gender' columns from the 'Dorm' table.", "Specify the condition for filtering: The query specifies that we want dorms with a capacity greater than 300 or less than 100, which translates to a WHERE clause in SQL.", "Construct the SQL SELECT statement: We will select 'dorm_name' and 'gender' from the 'Dorm' table where the specified conditions are met."], "pred_sql": "SELECT dorm_name, gender FROM Dorm WHERE student_capacity > 300 OR student_capacity < 100;", "gold_sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100", "source_tables": ["dorm"]}
{"sample_id": 5699, "db_id": "dorm_1", "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?", "rationale": ["Identify the table that contains information about dormitories, which is the 'Dorm' table.", "Determine the columns needed for the output: 'dorm_name' for the name of the dormitory and 'student_capacity' for the capacity.", "Formulate the condition to filter dormitories based on their capacity: greater than 300 or less than 100.", "Construct the SQL SELECT statement to retrieve the required columns from the 'Dorm' table with the specified conditions."], "pred_sql": "SELECT dorm_name, student_capacity FROM Dorm WHERE student_capacity > 300 OR student_capacity < 100;", "gold_sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100", "source_tables": ["dorm"]}
{"sample_id": 5700, "db_id": "dorm_1", "question": "Find the numbers of different majors and cities.", "rationale": ["Identify the table that contains the information about majors and cities, which is the 'Student' table.", "To find the number of different majors, use the COUNT function with DISTINCT on the 'Major' column.", "To find the number of different cities, use the COUNT function with DISTINCT on the 'city_code' column.", "Combine both counts in a single SELECT statement to retrieve the results."], "pred_sql": "SELECT COUNT(DISTINCT Major) AS num_of_majors, COUNT(DISTINCT city_code) AS num_of_cities FROM Student;", "gold_sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student", "source_tables": ["student"]}
{"sample_id": 5701, "db_id": "dorm_1", "question": "How many different majors are there and how many different city codes are there for each student?", "rationale": ["Identify the table that contains the relevant information: The 'Student' table contains both 'Major' and 'city_code'.", "To find the number of different majors, use the COUNT function with DISTINCT on the 'Major' column.", "To find the number of different city codes, use the COUNT function with DISTINCT on the 'city_code' column.", "Combine both counts in a single SELECT statement to get the results in one query."], "pred_sql": "SELECT COUNT(DISTINCT Major) AS different_majors, COUNT(DISTINCT city_code) AS different_city_codes FROM Student;", "gold_sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student", "source_tables": ["student"]}
{"sample_id": 5702, "db_id": "dorm_1", "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.", "rationale": ["Identify the tables involved: We need information from the Dorm and Dorm_amenity tables, as well as the Has_amenity table to link them.", "We need to find dorms that have both 'TV Lounge' and 'Study Room' as amenities. This requires joining the Dorm table with the Has_amenity table and the Dorm_amenity table.", "Perform a self-join on the Has_amenity table to check for both amenities for the same dormitory.", "Use a WHERE clause to filter for the specific amenities 'TV Lounge' and 'Study Room'.", "Group the results by dorm_name to ensure we get unique dorm names that meet the criteria."], "pred_sql": "SELECT d.dorm_name \nFROM Dorm d \nJOIN Has_amenity ha1 ON d.dormid = ha1.dormid \nJOIN Dorm_amenity da1 ON ha1.amenid = da1.amenid \nJOIN Has_amenity ha2 ON d.dormid = ha2.dormid \nJOIN Dorm_amenity da2 ON ha2.amenid = da2.amenid \nWHERE da1.amenity_name = 'TV Lounge' \nAND da2.amenity_name = 'Study Room' \nGROUP BY d.dorm_name;", "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5703, "db_id": "dorm_1", "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?", "rationale": ["Identify the relevant tables: Dorm, Has_amenity, and Dorm_amenity are needed to find dorms with specific amenities.", "Use JOINs to connect the Dorm table with the Has_amenity and Dorm_amenity tables to access the amenities associated with each dorm.", "Filter the results to find dorms that have both 'TV Lounge' and 'Study Room' as amenities by using the WHERE clause with conditions for each amenity."], "pred_sql": "SELECT d.dorm_name \nFROM Dorm d \nJOIN Has_amenity ha1 ON d.dormid = ha1.dormid \nJOIN Dorm_amenity da1 ON ha1.amenid = da1.amenid \nJOIN Has_amenity ha2 ON d.dormid = ha2.dormid \nJOIN Dorm_amenity da2 ON ha2.amenid = da2.amenid \nWHERE da1.amenity_name = 'TV Lounge' \nAND da2.amenity_name = 'Study Room';", "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5704, "db_id": "dorm_1", "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.", "rationale": ["Identify the dorms that have the 'TV Lounge' amenity.", "Use a JOIN between the Dorm table and the Has_amenity table to find dorms with specific amenities.", "Filter the results to include only those dorms that have 'TV Lounge' as an amenity.", "To ensure that these dorms do not have 'Study Room' as an amenity, create a subquery that selects dorms with 'Study Room'.", "Use the NOT IN clause to exclude dorms that have 'Study Room' from the final results."], "pred_sql": "SELECT d.dorm_name \nFROM Dorm d \nJOIN Has_amenity ha ON d.dormid = ha.dormid \nJOIN Dorm_amenity da ON ha.amenid = da.amenid \nWHERE da.amenity_name = 'TV Lounge' \nAND d.dormid NOT IN (\n    SELECT ha2.dormid \n    FROM Has_amenity ha2 \n    JOIN Dorm_amenity da2 ON ha2.amenid = da2.amenid \n    WHERE da2.amenity_name = 'Study Room'\n)", "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5705, "db_id": "dorm_1", "question": "What is the name of each dorm that has a TV Lounge but no study rooms?", "rationale": ["Identify the dorms that have a 'TV Lounge' amenity.", "Use a JOIN between the Dorm table and the Has_amenity table to find dorms with amenities.", "Filter the results to only include those with 'TV Lounge' using a WHERE clause.", "To find dorms that do not have 'Study Room', create a subquery that selects dorms with 'Study Room' amenities.", "Use the NOT IN clause to exclude dorms from the main query that are returned by the subquery."], "pred_sql": "SELECT d.dorm_name \nFROM Dorm d \nJOIN Has_amenity ha ON d.dormid = ha.dormid \nJOIN Dorm_amenity da ON ha.amenid = da.amenid \nWHERE da.amenity_name = 'TV Lounge' \nAND d.dormid NOT IN (\n    SELECT ha2.dormid \n    FROM Has_amenity ha2 \n    JOIN Dorm_amenity da2 ON ha2.amenid = da2.amenid \n    WHERE da2.amenity_name = 'Study Room'\n);", "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5706, "db_id": "dorm_1", "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.", "rationale": ["Identify the table that contains the required information: the 'Student' table.", "Determine the columns needed: we need the 'LName' column for the last names of students.", "Establish the conditions for filtering: students who are either female (Sex = 'F') and live in the city with code 'BAL', or male (Sex = 'M') and are below the age of 20.", "Construct the SQL query using a SELECT statement to retrieve 'LName' from the 'Student' table with the specified conditions using a WHERE clause."], "pred_sql": "SELECT LName FROM Student WHERE (Sex = 'F' AND city_code = 'BAL') OR (Sex = 'M' AND Age < '20');", "gold_sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20", "source_tables": ["student"]}
{"sample_id": 5707, "db_id": "dorm_1", "question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?", "rationale": ["Identify the relevant table: The query requires information from the 'Student' table, specifically the last names of students.", "Determine the conditions for selection: The query specifies three conditions: 1) the student is female, 2) the student lives in a city with the code 'BAL', or 3) the student is male and under 20 years old.", "Construct the WHERE clause: The WHERE clause will include the three conditions using OR operators to ensure any of the conditions being true will include the student in the results.", "Select the required column: The query requests the last names, so we will select the 'LName' column from the 'Student' table.", "Combine all parts into a full SQL query: The final SQL query will select 'LName' from 'Student' where the specified conditions are met."], "pred_sql": "SELECT LName FROM Student WHERE (Sex = 'Female') OR (city_code = 'BAL') OR (Sex = 'Male' AND Age < '20');", "gold_sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20", "source_tables": ["student"]}
{"sample_id": 5708, "db_id": "dorm_1", "question": "Find the name of the dorm with the largest capacity.", "rationale": ["Identify the table that contains dormitory information, which is the 'Dorm' table.", "Determine the relevant columns needed to answer the query: 'dorm_name' for the name of the dorm and 'student_capacity' for the capacity.", "To find the dorm with the largest capacity, we need to sort the results by 'student_capacity' in descending order.", "Use the 'ORDER BY' clause to sort the dorms by 'student_capacity' in descending order.", "Limit the results to 1 using 'LIMIT 1' to get only the dorm with the largest capacity."], "pred_sql": "SELECT dorm_name FROM Dorm ORDER BY student_capacity DESC LIMIT 1;", "gold_sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "source_tables": ["dorm"]}
{"sample_id": 5709, "db_id": "dorm_1", "question": "What are the names of the dorm with the largest capacity?", "rationale": ["Identify the table that contains dormitory information, which is the 'Dorm' table.", "We need to find the dormitory with the largest capacity, so we will use the 'student_capacity' column.", "To find the dorm with the largest capacity, we will use a subquery to get the maximum value of 'student_capacity' from the 'Dorm' table.", "Finally, we will select the 'dorm_name' from the 'Dorm' table where the 'student_capacity' matches the maximum value found in the subquery."], "pred_sql": "SELECT dorm_name FROM Dorm WHERE student_capacity = (SELECT MAX(student_capacity) FROM Dorm);", "gold_sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "source_tables": ["dorm"]}
{"sample_id": 5710, "db_id": "dorm_1", "question": "List in alphabetic order all different amenities.", "rationale": ["Identify the table that contains the amenities, which is 'Dorm_amenity'.", "Select the column that holds the names of the amenities, which is 'amenity_name'.", "Use the DISTINCT keyword to ensure that only unique amenities are listed.", "Order the results alphabetically using the ORDER BY clause on 'amenity_name'."], "pred_sql": "SELECT DISTINCT amenity_name FROM Dorm_amenity ORDER BY amenity_name;", "gold_sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "source_tables": ["dorm_amenity"]}
{"sample_id": 5711, "db_id": "dorm_1", "question": "What are the different dorm amenity names in alphabetical order?", "rationale": ["Identify the table that contains the amenity names, which is the 'Dorm_amenity' table.", "We need to select the 'amenity_name' column from the 'Dorm_amenity' table.", "To ensure that we get unique amenity names, we will use the DISTINCT keyword.", "The results should be ordered alphabetically, so we will use the ORDER BY clause with 'amenity_name' and specify ASC for ascending order."], "pred_sql": "SELECT DISTINCT amenity_name FROM Dorm_amenity ORDER BY amenity_name ASC;", "gold_sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "source_tables": ["dorm_amenity"]}
{"sample_id": 5712, "db_id": "dorm_1", "question": "Find the code of city where most of students are living in.", "rationale": ["Identify the relevant table: The 'Student' table contains the 'city_code' column which indicates the city where students live.", "Group the results by 'city_code' to count the number of students in each city.", "Use the COUNT function to count the number of students for each city code.", "Order the results in descending order based on the count of students to find the city with the most students.", "Limit the results to 1 to get only the city code with the highest number of students."], "pred_sql": "SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 5713, "db_id": "dorm_1", "question": "What is the code of the city with the most students?", "rationale": ["Identify the relevant table: The 'Student' table contains the 'city_code' and is where student data is stored.", "Group the results by 'city_code' to count the number of students in each city.", "Use the COUNT function to count the number of students for each city code.", "Order the results in descending order based on the count of students to find the city with the most students.", "Limit the results to 1 to get only the city code with the highest number of students."], "pred_sql": "SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 5714, "db_id": "dorm_1", "question": "Find the first and last name of students whose age is younger than the average age.", "rationale": ["Identify the columns needed: Fname and LName from the Student table.", "Determine the condition: students whose age is younger than the average age.", "Calculate the average age using a subquery: SELECT AVG(Age) FROM Student.", "Combine the selection of names with the condition using a WHERE clause."], "pred_sql": "SELECT Fname, LName FROM Student WHERE Age < (SELECT AVG(Age) FROM Student);", "gold_sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)", "source_tables": ["student"]}
{"sample_id": 5715, "db_id": "dorm_1", "question": "What is the first and last name of all students who are younger than average?", "rationale": ["Identify the columns needed: Fname and LName from the Student table.", "Determine the condition: students younger than the average age.", "Calculate the average age using a subquery: SELECT AVG(CAST(Age AS INTEGER)) FROM Student.", "Combine the selection of names with the condition using a WHERE clause."], "pred_sql": "SELECT Fname, LName FROM Student WHERE Age < (SELECT AVG(CAST(Age AS INTEGER)) FROM Student)", "gold_sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)", "source_tables": ["student"]}
{"sample_id": 5716, "db_id": "dorm_1", "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.", "rationale": ["Identify the columns needed: Fname and LName from the Student table.", "Determine the condition: students not living in the city with code 'HKG'.", "Use the WHERE clause to filter out students based on the city_code.", "Sort the results by the Age column using the ORDER BY clause."], "pred_sql": "SELECT Fname, LName FROM Student WHERE city_code != 'HKG' ORDER BY Age;", "gold_sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age", "source_tables": ["student"]}
{"sample_id": 5717, "db_id": "dorm_1", "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?", "rationale": ["Identify the columns needed: Fname and LName from the Student table.", "Determine the condition: students not living in the city with code 'HKG'.", "Use the WHERE clause to filter out students based on the city_code.", "Specify the ordering of the results by the Age column.", "Construct the SQL SELECT statement with the identified columns, condition, and ordering."], "pred_sql": "SELECT Fname, LName FROM Student WHERE city_code != 'HKG' ORDER BY Age;", "gold_sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age", "source_tables": ["student"]}
{"sample_id": 5718, "db_id": "dorm_1", "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.", "rationale": ["Identify the relevant tables: Dorm, Has_amenity, and Dorm_amenity are needed to find the amenities for a specific dormitory.", "Use a JOIN operation to connect the Dorm table with the Has_amenity table on the dormid column to find which amenities are associated with the dorm.", "Then, join the result with the Dorm_amenity table on the amenid column to get the names of the amenities.", "Filter the results to only include amenities for 'Anonymous Donor Hall' using a WHERE clause.", "Finally, sort the results alphabetically by the amenity name using the ORDER BY clause."], "pred_sql": "SELECT a.amenity_name \nFROM Dorm d \nJOIN Has_amenity ha ON d.dormid = ha.dormid \nJOIN Dorm_amenity a ON ha.amenid = a.amenid \nWHERE d.dorm_name = 'Anonymous Donor Hall' \nORDER BY a.amenity_name ASC;", "gold_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name", "source_tables": ["dorm", "has_amenity", "dorm_amenity"]}
{"sample_id": 5719, "db_id": "dorm_1", "question": "What are the amenities in alphabetical order that Anonymous Donor Hall has?", "rationale": ["Identify the relevant tables: Dorm_amenity, Has_amenity, and Dorm.", "We need to find amenities associated with a specific dormitory, which is 'Anonymous Donor Hall'.", "Join the Dorm_amenity table with the Has_amenity table to link amenities to dormitories.", "Join the resulting table with the Dorm table to filter by the dormitory name 'Anonymous Donor Hall'.", "Select the amenity names and order them alphabetically."], "pred_sql": "SELECT a.amenity_name FROM Dorm_amenity a JOIN Has_amenity ha ON a.amenid = ha.amenid JOIN Dorm d ON ha.dormid = d.dormid WHERE d.dorm_name = 'Anonymous Donor Hall' ORDER BY a.amenity_name ASC;", "gold_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name", "source_tables": ["dorm", "has_amenity", "dorm_amenity"]}
{"sample_id": 5720, "db_id": "dorm_1", "question": "Find the number of dorms and total capacity for each gender.", "rationale": ["Identify the relevant table: The Dorm table contains information about dormitories, including their gender designation and student capacity.", "Determine the required output: We need to find the number of dorms and the total capacity for each gender.", "Use aggregate functions: COUNT() will be used to count the number of dorms, and SUM() will be used to calculate the total capacity.", "Group the results by gender: To get the results for each gender, we will use the GROUP BY clause on the gender column."], "pred_sql": "SELECT gender, COUNT(dormid) AS number_of_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender;", "gold_sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender", "source_tables": ["dorm"]}
{"sample_id": 5721, "db_id": "dorm_1", "question": "How many dorms are there and what is the total capacity for each gender?", "rationale": ["Identify the relevant table: The Dorm table contains information about dormitories, including their gender designation and student capacity.", "Determine the required information: We need to count the number of dorms and sum the total capacity for each gender.", "Use the COUNT() function to count the dorms and the SUM() function to calculate the total capacity.", "Group the results by gender to get the totals for each gender category."], "pred_sql": "SELECT gender, COUNT(dormid) AS total_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender;", "gold_sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender", "source_tables": ["dorm"]}
{"sample_id": 5722, "db_id": "dorm_1", "question": "Find the average and oldest age for students with different sex.", "rationale": ["Identify the relevant table: The 'Student' table contains the necessary information about students, including their age and sex.", "Determine the required calculations: We need to calculate the average age and the maximum (oldest) age of students.", "Group the results by sex: Since we want the average and oldest age for students with different sex, we will use the GROUP BY clause on the 'Sex' column.", "Construct the SQL query: Use the SELECT statement to retrieve the 'Sex', the average age using AVG(Age), and the oldest age using MAX(Age), and group the results by 'Sex'."], "pred_sql": "SELECT Sex, AVG(Age) AS average_age, MAX(Age) AS oldest_age FROM Student GROUP BY Sex;", "gold_sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex", "source_tables": ["student"]}
{"sample_id": 5723, "db_id": "dorm_1", "question": "What is the average and oldest age for each gender of student?", "rationale": ["Identify the columns needed: We need the 'Sex' column for gender, and 'Age' for calculating average and maximum age.", "Use aggregate functions: To find the average age, we will use AVG(Age), and to find the oldest age, we will use MAX(Age).", "Group the results: Since we want the results for each gender, we will group the results by the 'Sex' column.", "Construct the SQL query: Combine the SELECT statement with the aggregate functions and the GROUP BY clause."], "pred_sql": "SELECT Sex, AVG(Age) AS average_age, MAX(Age) AS oldest_age FROM Student GROUP BY Sex;", "gold_sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex", "source_tables": ["student"]}
{"sample_id": 5724, "db_id": "dorm_1", "question": "Find the number of students in each major.", "rationale": ["Identify the table that contains the relevant data: the 'Student' table holds information about students and their majors.", "Determine the required output: we need to count the number of students for each major.", "Use the COUNT() function to count the number of students, and GROUP BY clause to group the results by the 'Major' column.", "Construct the SQL query to select the 'Major' and the count of students, grouping by 'Major'."], "pred_sql": "SELECT Major, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Major;", "gold_sql": "SELECT count(*) ,  major FROM student GROUP BY major", "source_tables": ["student"]}
{"sample_id": 5725, "db_id": "dorm_1", "question": "How many students are there in each major?", "rationale": ["Identify the table that contains information about students and their majors, which is the 'Student' table.", "To find the number of students in each major, we need to count the number of students grouped by their 'Major'.", "Use the COUNT() function to count the number of students for each major.", "Group the results by the 'Major' column to get the count for each distinct major."], "pred_sql": "SELECT Major, COUNT(*) AS student_count FROM Student GROUP BY Major;", "gold_sql": "SELECT count(*) ,  major FROM student GROUP BY major", "source_tables": ["student"]}
{"sample_id": 5726, "db_id": "dorm_1", "question": "Find the number and average age of students living in each city.", "rationale": ["Identify the relevant table: The 'Student' table contains the necessary information about students, including their ages and city codes.", "Determine the required output: We need to find the number of students and the average age of students for each city.", "Use aggregate functions: COUNT() will be used to count the number of students, and AVG() will be used to calculate the average age.", "Group the results: To get the results for each city, we will use GROUP BY on the 'city_code' column."], "pred_sql": "SELECT city_code, COUNT(*) AS number_of_students, AVG(Age) AS average_age FROM Student GROUP BY city_code;", "gold_sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code", "source_tables": ["student"]}
{"sample_id": 5727, "db_id": "dorm_1", "question": "How many students live in each city and what are their average ages?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students, including their city of residence and age.", "Determine the required information: We need to count the number of students and calculate their average age for each city.", "Use the COUNT() function to count the number of students (StuID) for each city_code.", "Use the AVG() function to calculate the average age of students for each city_code.", "Group the results by city_code to get the count and average age for each city."], "pred_sql": "SELECT city_code, COUNT(StuID) AS student_count, AVG(Age) AS average_age FROM Student GROUP BY city_code;", "gold_sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code", "source_tables": ["student"]}
{"sample_id": 5728, "db_id": "dorm_1", "question": "Find the average age and number of male students (with sex M) from each city.", "rationale": ["Identify the required data: average age and count of male students.", "Filter the students by gender (Sex = 'M').", "Group the results by city code to get the average age and count for each city.", "Use the AVG() function to calculate the average age and COUNT() function to count the number of male students.", "Select the city code along with the calculated average age and count."], "pred_sql": "SELECT city_code, AVG(Age) AS average_age, COUNT(*) AS male_student_count \nFROM Student \nWHERE Sex = 'M' \nGROUP BY city_code;", "gold_sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code", "source_tables": ["student"]}
{"sample_id": 5729, "db_id": "dorm_1", "question": "What is the average age and how many male students are there in each city?", "rationale": ["Identify the relevant table: The 'Student' table contains the necessary information about students, including their age, sex, and city code.", "Determine the required calculations: We need to calculate the average age and count the number of male students for each city.", "Use the AVG() function to calculate the average age and COUNT() function with a conditional to count male students.", "Group the results by city code to get the average age and male count for each city.", "Construct the SQL query using SELECT to specify the columns, AVG() for average age, COUNT() for male students, and GROUP BY for city code."], "pred_sql": "SELECT city_code, AVG(Age) AS average_age, COUNT(CASE WHEN Sex = 'Male' THEN 1 END) AS male_count FROM Student GROUP BY city_code;", "gold_sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code", "source_tables": ["student"]}
{"sample_id": 5730, "db_id": "dorm_1", "question": "Find the number of students for the cities where have more than one student.", "rationale": ["Identify the relevant table: The 'Student' table contains information about students, including their city of residence.", "Determine the required information: We need to count the number of students in each city.", "Group the results by city: Use the GROUP BY clause to aggregate the results based on the 'city_code'.", "Count the number of students: Use the COUNT() function to count the number of students in each city.", "Filter the results: Use the HAVING clause to only include cities with more than one student."], "pred_sql": "SELECT city_code, COUNT(*) AS student_count \nFROM Student \nGROUP BY city_code \nHAVING COUNT(*) > 1;", "gold_sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1", "source_tables": ["student"]}
{"sample_id": 5731, "db_id": "dorm_1", "question": "How many students are from each city, and which cities have more than one cities?", "rationale": ["Identify the relevant table: The 'Student' table contains the information about students and their city codes.", "Determine the required information: We need to count the number of students from each city and filter for cities with more than one student.", "Use the COUNT function to count the number of students (StuID) for each city (city_code).", "Group the results by city_code to aggregate the counts.", "Use the HAVING clause to filter the results to only include cities where the count of students is greater than one."], "pred_sql": "SELECT city_code, COUNT(StuID) AS student_count FROM Student GROUP BY city_code HAVING COUNT(StuID) > 1;", "gold_sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1", "source_tables": ["student"]}
{"sample_id": 5732, "db_id": "dorm_1", "question": "Find the first and last name of students who are not in the largest major.", "rationale": ["Identify the columns needed: We need the first name (Fname) and last name (LName) of students.", "Determine the condition: We want students whose Major is not the largest major.", "To find the largest major, we can group the students by Major and count the number of students in each major, ordering by the count in descending order and limiting the result to 1 to get the largest major.", "Construct the subquery to find the largest major: SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1.", "Use the subquery in the main query to filter out students who are in the largest major."], "pred_sql": "SELECT Fname, LName FROM Student WHERE Major != (SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1);", "gold_sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["student"]}
{"sample_id": 5733, "db_id": "dorm_1", "question": "What is the first and last name of the students who are not in the largest major?", "rationale": ["Identify the columns needed: We need the first name (Fname) and last name (LName) of the students.", "Determine the condition: We want students whose Major is not the largest major.", "To find the largest major, we need to group the students by Major and count the number of students in each major, ordering by the count in descending order.", "Use a subquery to get the Major with the highest count of students.", "Finally, select the first and last names of students whose Major is not equal to the largest major found in the subquery."], "pred_sql": "SELECT Fname, LName FROM Student WHERE Major != (SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1);", "gold_sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["student"]}
{"sample_id": 5734, "db_id": "dorm_1", "question": "Find the number of students whose age is older than the average age for each gender.", "rationale": ["Identify the relevant table: The 'Student' table contains the necessary information about students, including their age and gender.", "Determine the condition: We need to find students whose age is older than the average age. This requires calculating the average age from the 'Student' table.", "Use a subquery to calculate the average age: The subquery (SELECT AVG(CAST(Age AS INTEGER)) FROM Student) computes the average age of all students. We cast Age to INTEGER to ensure proper numerical comparison.", "Filter students based on the condition: The main query filters students whose age is greater than the average age calculated in the subquery.", "Group the results by gender: We need to count the number of students for each gender, so we use GROUP BY Sex to aggregate the results accordingly.", "Select the count of students: We use COUNT(*) to count the number of students that meet the criteria for each gender."], "pred_sql": "SELECT Sex, COUNT(*) AS num_students\nFROM Student\nWHERE Age > (SELECT AVG(CAST(Age AS INTEGER)) FROM Student)\nGROUP BY Sex;", "gold_sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex", "source_tables": ["student"]}
{"sample_id": 5735, "db_id": "dorm_1", "question": "How many students are older than average for each gender?", "rationale": ["Identify the relevant table: The 'Student' table contains the necessary information about students, including their age and gender.", "Determine the average age: We need to calculate the average age of students, which requires a subquery to compute AVG(Age). Since Age is stored as text, we will cast it to INTEGER for accurate calculation.", "Filter students older than average: We will filter the students whose age is greater than the average age calculated in the subquery.", "Group by gender: To get the count of students older than average for each gender, we will group the results by the 'Sex' column.", "Count the number of students: We will use COUNT(*) to count the number of students in each gender group that meet the criteria."], "pred_sql": "SELECT Sex, COUNT(*) AS num_students\nFROM Student\nWHERE Age > (SELECT AVG(CAST(Age AS INTEGER)) FROM Student)\nGROUP BY Sex;", "gold_sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex", "source_tables": ["student"]}
{"sample_id": 5736, "db_id": "dorm_1", "question": "Find the average age of students living in each dorm and the name of dorm.", "rationale": ["Identify the tables needed: We need data from the Student and Dorm tables, and we also need to know which students live in which dorms, so we will use the Lives_in table.", "Determine the columns to select: We want the name of the dorm (Dorm.dorm_name) and the average age of students (AVG(Student.Age)).", "Join the tables: We will join the Lives_in table with the Student table on the student ID (Lives_in.stuid = Student.StuID) and with the Dorm table on the dorm ID (Lives_in.dormid = Dorm.dormid).", "Group the results: Since we want the average age for each dorm, we will group the results by the dorm name (GROUP BY Dorm.dorm_name).", "Convert age to a numeric type: Since age is stored as text, we will cast it to an integer for the average calculation (CAST(Student.Age AS INTEGER))."], "pred_sql": "SELECT Dorm.dorm_name, AVG(CAST(Student.Age AS INTEGER)) AS average_age\nFROM Lives_in\nJOIN Student ON Lives_in.stuid = Student.StuID\nJOIN Dorm ON Lives_in.dormid = Dorm.dormid\nGROUP BY Dorm.dorm_name;", "gold_sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5737, "db_id": "dorm_1", "question": "What is the average age for each dorm and what are the names of each dorm?", "rationale": ["Identify the tables needed: Dorm, Lives_in, and Student.", "We need to calculate the average age, so we will use the AVG() function on the Age column from the Student table.", "To get the names of each dorm, we will select the dorm_name from the Dorm table.", "We need to join the Dorm table with the Lives_in table to link students to their respective dorms.", "Then, we will join the Lives_in table with the Student table to access the Age of each student.", "Finally, we will group the results by dorm_name to get the average age for each dorm."], "pred_sql": "SELECT Dorm.dorm_name, AVG(CAST(Student.Age AS INTEGER)) AS average_age FROM Dorm JOIN Lives_in ON Dorm.dormid = Lives_in.dormid JOIN Student ON Lives_in.stuid = Student.StuID GROUP BY Dorm.dorm_name;", "gold_sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5738, "db_id": "dorm_1", "question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.", "rationale": ["Identify the relevant tables: Dorm and Has_amenity.", "We need to count the number of amenities for each dorm, so we will use a COUNT function on the amenid from the Has_amenity table.", "We need to filter the dorms based on their capacity, specifically those that can accommodate more than 100 students, which is done using a WHERE clause.", "To get the names of the dorms along with the count of amenities, we will select Dorm.dorm_name and the count of amenities.", "We will join the Dorm table with the Has_amenity table on the dormid to link dorms with their amenities.", "Finally, we will group the results by Dorm.dorm_name to get the count of amenities for each dorm."], "pred_sql": "SELECT Dorm.dorm_name, COUNT(Has_amenity.amenid) AS number_of_amenities\nFROM Dorm\nJOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid\nWHERE Dorm.student_capacity > 100\nGROUP BY Dorm.dorm_name;", "gold_sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid", "source_tables": ["has_amenity", "dorm"]}
{"sample_id": 5739, "db_id": "dorm_1", "question": "For each dorm, how many amenities does it have?", "rationale": ["Identify the relevant tables: We need to gather information from the Dorm table and the Has_amenity table to count the amenities for each dorm.", "Determine the relationship: The Has_amenity table links dormitories to their amenities through the dormid column.", "Use a LEFT JOIN: This will allow us to include dorms that may not have any amenities, ensuring they still appear in the results with a count of zero.", "Count the amenities: We will use the COUNT function to count the number of amenities associated with each dorm.", "Group the results: We will group the results by dormid to ensure we get a count for each individual dormitory."], "pred_sql": "SELECT Dorm.dorm_name, COUNT(Has_amenity.amenid) AS amenity_count\nFROM Dorm\nLEFT JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid\nGROUP BY Dorm.dormid;", "gold_sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid", "source_tables": ["has_amenity", "dorm"]}
{"sample_id": 5740, "db_id": "dorm_1", "question": "Find the number of students who is older than 20 in each dorm.", "rationale": ["Identify the tables needed: We need to get information from the Student and Dorm tables, and we also need to know which students live in which dorms, so we will use the Lives_in table.", "We need to count the number of students older than 20, so we will use the COUNT() function in SQL.", "To filter students older than 20, we will use a WHERE clause with the condition 's.Age > '20'',' which checks the Age column in the Student table.", "We will join the Dorm table with the Lives_in table on the dormid to get the dorm names, and then join the Lives_in table with the Student table on the student ID to get the student details.", "Finally, we will group the results by dorm name to get the count of students in each dorm who are older than 20."], "pred_sql": "SELECT d.dorm_name, COUNT(s.StuID) AS number_of_students\nFROM Dorm d\nLEFT JOIN Lives_in l ON d.dormid = l.dormid\nLEFT JOIN Student s ON l.stuid = s.StuID\nWHERE s.Age > '20'\nGROUP BY d.dorm_name;", "gold_sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5741, "db_id": "dorm_1", "question": "How many students are older than 20 in each dorm?", "rationale": ["Identify the tables needed: We need data from the Student, Lives_in, and Dorm tables.", "Determine the relationship between the tables: Students live in dorms, so we will join the Lives_in table with the Student and Dorm tables.", "Filter the students based on age: We need to count only those students who are older than 20.", "Group the results by dorm name: We want to count the number of students in each dorm, so we will group by the dorm name.", "Select the dorm name and the count of students: The final output should include the dorm name and the count of students older than 20."], "pred_sql": "SELECT d.dorm_name, COUNT(s.StuID) AS student_count\nFROM Student s\nJOIN Lives_in l ON s.StuID = l.stuid\nJOIN Dorm d ON l.dormid = d.dormid\nWHERE s.Age > '20'\nGROUP BY d.dorm_name;", "gold_sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5742, "db_id": "dorm_1", "question": "Find the first name of students who are living in the Smith Hall.", "rationale": ["Identify the relevant tables: Student, Lives_in, and Dorm.", "We need to find the first names of students, so we will select the 'Fname' column from the Student table.", "To find out where the students live, we will join the Lives_in table on the Student table using the StuID.", "Next, we will join the Dorm table on the Lives_in table using the dormid to access the dormitory names.", "Finally, we will filter the results to only include students living in 'Smith Hall' by adding a WHERE clause that checks the dorm_name in the Dorm table."], "pred_sql": "SELECT Fname FROM Student INNER JOIN Lives_in ON Student.StuID = Lives_in.stuid INNER JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Dorm.dorm_name = 'Smith Hall';", "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5743, "db_id": "dorm_1", "question": "What are the first names of all students in Smith Hall?", "rationale": ["Identify the relevant tables: Student, Lives_in, and Dorm.", "We need to retrieve the first names of students, so we will select the 'Fname' column from the Student table.", "To find out which students live in Smith Hall, we need to join the Lives_in table with the Student table on the StuID and the dorm table on the dormid.", "We will filter the results to only include those where the dorm_name is 'Smith Hall'."], "pred_sql": "SELECT Fname FROM Student INNER JOIN Lives_in ON Student.StuID = Lives_in.stuid INNER JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Dorm.dorm_name = 'Smith Hall';", "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5744, "db_id": "dorm_1", "question": "Find the average age of students who are living in the dorm with the largest capacity.", "rationale": ["Identify the dormitory with the largest capacity by ordering the Dorm table by student_capacity in descending order and selecting the top record.", "Use the dormid from the identified dormitory to find all students living in that dorm by querying the Lives_in table.", "Select the StuID of those students and use it to filter the Student table to get their ages.", "Finally, calculate the average age of the filtered students using the AVG() function."], "pred_sql": "SELECT AVG(Age) AS average_age FROM Student WHERE StuID IN (SELECT stuid FROM Lives_in WHERE dormid = (SELECT dormid FROM Dorm ORDER BY student_capacity DESC LIMIT 1));", "gold_sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5745, "db_id": "dorm_1", "question": "What is the average age of students who are living in the dorm with the largest capacity?", "rationale": ["Identify the relevant tables: Student, Lives_in, and Dorm.", "Determine the relationship between students and dorms through the Lives_in table.", "Find the dorm with the largest capacity by using a subquery to get the maximum student_capacity from the Dorm table.", "Join the Student table with Lives_in and Dorm to filter students living in the dorm with the largest capacity.", "Calculate the average age of these students by using the AVG function on the Age column, ensuring to cast Age to an integer for accurate calculation."], "pred_sql": "SELECT AVG(CAST(Student.Age AS INTEGER)) AS average_age FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Dorm.student_capacity = (SELECT MAX(student_capacity) FROM Dorm);", "gold_sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5746, "db_id": "dorm_1", "question": "Find the total number of students living in the male dorm (with gender M).", "rationale": ["Identify the relevant tables: Lives_in (to find students living in dorms) and Dorm (to filter by gender).", "We need to count the total number of students, so we will use the COUNT() function.", "Join the Lives_in table with the Dorm table on the dormid to access dorm information for each student.", "Filter the results to include only those dorms where the gender is 'M'.", "Select the count of students from the filtered results."], "pred_sql": "SELECT COUNT(*) AS total_students FROM Lives_in li JOIN Dorm d ON li.dormid = d.dormid WHERE d.gender = 'M';", "gold_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5747, "db_id": "dorm_1", "question": "What are the total number of students who are living in a male dorm?", "rationale": ["Identify the relevant tables: Lives_in and Dorm are needed to find students living in dorms.", "We need to count the number of distinct students (stuid) from the Lives_in table.", "Join the Lives_in table with the Dorm table on the dormid to access dorm information.", "Filter the results to include only those dorms that are designated for males (Dorm.gender = 'male').", "Use the COUNT function to get the total number of students living in male dorms."], "pred_sql": "SELECT COUNT(DISTINCT Lives_in.stuid) AS total_students_in_male_dorm\nFROM Lives_in\nJOIN Dorm ON Lives_in.dormid = Dorm.dormid\nWHERE Dorm.gender = 'male';", "gold_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5748, "db_id": "dorm_1", "question": "Find the number of female students (with F sex) living in Smith Hall", "rationale": ["Identify the tables needed: We need to count female students, so we will use the 'Student' table. We also need to know where they live, so we will join with the 'Lives_in' table and the 'Dorm' table.", "Determine the join conditions: We will join 'Student' with 'Lives_in' on 'StuID' and 'stuid', and then join 'Lives_in' with 'Dorm' on 'dormid'.", "Filter for female students: We need to add a condition to filter students where 'Sex' is 'F'.", "Filter for the specific dorm: We also need to filter for students living in 'Smith Hall', so we will add a condition for 'dorm_name'.", "Count the results: Finally, we will use the COUNT function to count the number of female students that meet these criteria."], "pred_sql": "SELECT COUNT(Student.StuID) AS female_student_count\nFROM Student\nJOIN Lives_in ON Student.StuID = Lives_in.stuid\nJOIN Dorm ON Lives_in.dormid = Dorm.dormid\nWHERE Student.Sex = 'F' AND Dorm.dorm_name = 'Smith Hall';", "gold_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5749, "db_id": "dorm_1", "question": "How many female students live in Smith Hall?", "rationale": ["Identify the relevant tables: Student, Lives_in, and Dorm.", "We need to count the number of female students, so we will filter the Student table by Sex = 'F'.", "We need to find out which dormitory the students live in, so we will join the Lives_in table with the Student table on StuID.", "Next, we will join the Dorm table to get the dormitory names, specifically filtering for 'Smith Hall'.", "Finally, we will use the COUNT function to count the number of records that meet these criteria."], "pred_sql": "SELECT COUNT(*) AS female_student_count FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Student.Sex = 'F' AND Dorm.dorm_name = 'Smith Hall';", "gold_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "source_tables": ["student", "lives_in", "dorm"]}
{"sample_id": 5750, "db_id": "dorm_1", "question": "Find the name of amenities Smith Hall dorm have.", "rationale": ["Identify the relevant tables: Dorm, Has_amenity, and Dorm_amenity are needed to find the amenities of a specific dorm.", "We need to join these tables to connect dorms with their amenities. The Dorm table will be joined with Has_amenity on dormid, and Has_amenity will be joined with Dorm_amenity on amenid.", "We need to filter the results to only include amenities for 'Smith Hall'.", "The final query will select the amenity names from the joined tables where the dorm name matches 'Smith Hall'."], "pred_sql": "SELECT a.amenity_name \nFROM Dorm d \nJOIN Has_amenity ha ON d.dormid = ha.dormid \nJOIN Dorm_amenity a ON ha.amenid = a.amenid \nWHERE d.dorm_name = 'Smith Hall';", "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5751, "db_id": "dorm_1", "question": "What are the names of the amenities that Smith Hall has?", "rationale": ["Identify the relevant tables: Dorm, Has_amenity, and Dorm_amenity.", "We need to find the amenities associated with a specific dormitory, which is 'Smith Hall'.", "Join the Dorm table with the Has_amenity table on the dormid to get the amenities linked to the dorm.", "Then, join the result with the Dorm_amenity table on amenid to get the names of the amenities.", "Filter the results where the dorm_name is 'Smith Hall'.", "Select the amenity_name from the final joined result."], "pred_sql": "SELECT a.amenity_name FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid JOIN Dorm_amenity a ON ha.amenid = a.amenid WHERE d.dorm_name = 'Smith Hall';", "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5752, "db_id": "dorm_1", "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.", "rationale": ["Identify the relevant tables: Dorm, Has_amenity, and Dorm_amenity are needed to find the amenities of a specific dorm.", "Use a JOIN operation to connect the Dorm table with the Has_amenity table on the dormid column to get the amenities associated with each dorm.", "Then, join the result with the Dorm_amenity table on the amenid column to get the names of the amenities.", "Filter the results to only include amenities for 'Smith Hall' by using a WHERE clause on the dorm_name column.", "Finally, order the results by amenity names using the ORDER BY clause."], "pred_sql": "SELECT a.amenity_name \nFROM Dorm d \nJOIN Has_amenity ha ON d.dormid = ha.dormid \nJOIN Dorm_amenity a ON ha.amenid = a.amenid \nWHERE d.dorm_name = 'Smith Hall' \nORDER BY a.amenity_name;", "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5753, "db_id": "dorm_1", "question": "What amenities does Smith Hall have in alphabetical order?", "rationale": ["Identify the table that contains the amenities: Dorm_amenity.", "Identify the relationship between dorms and amenities: Has_amenity links Dorm and Dorm_amenity.", "Identify the table that contains dorm names: Dorm.", "We need to filter the results to only include amenities for 'Smith Hall'.", "Finally, we need to order the results alphabetically by the amenity name."], "pred_sql": "SELECT a.amenity_name FROM Dorm_amenity a JOIN Has_amenity ha ON a.amenid = ha.amenid JOIN Dorm d ON ha.dormid = d.dormid WHERE d.dorm_name = 'Smith Hall' ORDER BY a.amenity_name;", "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5754, "db_id": "dorm_1", "question": "Find the name of amenity that is most common in all dorms.", "rationale": ["Identify the table that contains the amenity names, which is the 'Dorm_amenity' table.", "Join the 'Dorm_amenity' table with the 'Has_amenity' table to link amenities to dorms.", "Group the results by amenity name to count how many dorms each amenity is associated with.", "Order the results by the count of dorms in descending order to find the most common amenity.", "Limit the results to 1 to get only the most common amenity."], "pred_sql": "SELECT a.amenity_name\nFROM Dorm_amenity a\nJOIN Has_amenity ha ON a.amenid = ha.amenid\nGROUP BY a.amenity_name\nORDER BY COUNT(ha.dormid) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["has_amenity", "dorm_amenity"]}
{"sample_id": 5755, "db_id": "dorm_1", "question": "What is the most common amenity in the dorms?", "rationale": ["Identify the relevant tables: We need to look at the 'Has_amenity' table to find out which amenities are associated with which dorms, and the 'Dorm_amenity' table to get the names of those amenities.", "Join the tables: We will join 'Has_amenity' with 'Dorm_amenity' on the amenity ID to get the names of the amenities along with their counts.", "Count occurrences: We will count how many times each amenity appears in the 'Has_amenity' table to determine the most common one.", "Group by amenity name: We will group the results by the amenity name to aggregate the counts for each amenity.", "Order by count: We will order the results in descending order based on the count of occurrences to find the most common amenity.", "Limit the results: Finally, we will limit the results to 1 to get only the most common amenity."], "pred_sql": "SELECT amenity_name, COUNT(*) as amenity_count\nFROM Has_amenity\nJOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid\nGROUP BY amenity_name\nORDER BY amenity_count DESC\nLIMIT 1;", "gold_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["has_amenity", "dorm_amenity"]}
{"sample_id": 5756, "db_id": "dorm_1", "question": "Find the first name of students who are living in the dorm that has most number of amenities.", "rationale": ["Identify the tables involved: Student, Lives_in, Dorm, and Has_amenity.", "We need to find students living in dorms, so we will join the Student table with Lives_in and then with Dorm.", "To find the dorm with the most amenities, we will count the number of amenities for each dorm using the Has_amenity table.", "We will group the results by dormid to get the count of amenities for each dorm.", "We will use a subquery to find the maximum count of amenities across all dorms.", "Finally, we will filter the students based on the dorms that have the maximum number of amenities and select their first names."], "pred_sql": "SELECT S.Fname \nFROM Student S \nJOIN Lives_in L ON S.StuID = L.stuid \nJOIN Dorm D ON L.dormid = D.dormid \nJOIN Has_amenity HA ON D.dormid = HA.dormid \nGROUP BY D.dormid \nHAVING COUNT(HA.amenid) = (SELECT MAX(amenity_count) \n                            FROM (SELECT COUNT(HA2.amenid) AS amenity_count \n                                  FROM Dorm D2 \n                                  JOIN Has_amenity HA2 ON D2.dormid = HA2.dormid \n                                  GROUP BY D2.dormid))", "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["has_amenity", "lives_in", "student", "dorm_amenity", "dorm"]}
{"sample_id": 5757, "db_id": "dorm_1", "question": "What are the first names of all students who live in the dorm with the most amenities?", "rationale": ["Identify the tables involved: Student, Lives_in, Dorm, and Has_amenity.", "We need to find students who live in a dormitory, so we will join the Lives_in table with the Student and Dorm tables.", "To find the dorm with the most amenities, we will join the Dorm table with the Has_amenity table.", "We will group the results by dormitory and count the number of amenities for each dorm.", "We will order the results by the count of amenities in descending order to get the dorm with the most amenities at the top.", "Finally, we will limit the results to 1 to get only the dorm with the most amenities and select the first names of the students living in that dorm."], "pred_sql": "SELECT DISTINCT Student.Fname FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid GROUP BY Dorm.dormid ORDER BY COUNT(Has_amenity.amenid) DESC LIMIT 1;", "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["has_amenity", "lives_in", "student", "dorm_amenity", "dorm"]}
{"sample_id": 5758, "db_id": "dorm_1", "question": "Find the name and capacity of the dorm with least number of amenities.", "rationale": ["Identify the relevant tables: Dorm and Has_amenity are needed to find dorms and their amenities.", "Join the Dorm table with the Has_amenity table on the dormid to associate each dorm with its amenities.", "Group the results by dormid to aggregate the amenities count for each dorm.", "Order the results by the count of amenities in ascending order to find the dorm with the least number of amenities.", "Limit the results to 1 to get only the dorm with the least number of amenities."], "pred_sql": "SELECT d.dorm_name, d.student_capacity \nFROM Dorm d \nJOIN Has_amenity ha ON d.dormid = ha.dormid \nGROUP BY d.dormid \nORDER BY COUNT(ha.amenid) ASC \nLIMIT 1;", "gold_sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5759, "db_id": "dorm_1", "question": "What is the name and capacity of the dorm with the fewest amount of amenities?", "rationale": ["Identify the relevant tables: Dorm and Has_amenity.", "We need to find the dormitory with the fewest amenities, so we will join the Dorm table with the Has_amenity table on the dormid.", "Group the results by dormid to count the number of amenities for each dormitory.", "Order the results by the count of amenities in ascending order to get the dorm with the least amenities at the top.", "Select the dorm_name and student_capacity from the dorm with the fewest amenities, limiting the results to just one."], "pred_sql": "SELECT d.dorm_name, d.student_capacity \nFROM Dorm d \nJOIN Has_amenity ha ON d.dormid = ha.dormid \nGROUP BY d.dormid \nORDER BY COUNT(ha.amenid) ASC \nLIMIT 1;", "gold_sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5760, "db_id": "dorm_1", "question": "Find the name of dorms that do not have amenity TV Lounge.", "rationale": ["Identify the dorms that have the amenity 'TV Lounge' by querying the Dorm_amenity table to get the amenid for 'TV Lounge'.", "Use the Has_amenity table to find all dormids that have the amenity by filtering with the amenid obtained in the previous step.", "Select dorms from the Dorm table where the dormid is not in the list of dormids that have the 'TV Lounge' amenity."], "pred_sql": "SELECT dorm_name FROM Dorm WHERE dormid NOT IN (SELECT dormid FROM Has_amenity WHERE amenid = (SELECT amenid FROM Dorm_amenity WHERE amenity_name = 'TV Lounge'));", "gold_sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5761, "db_id": "dorm_1", "question": "What are the names of the dorm that does not have a TV Lounge?", "rationale": ["Identify the dormitories from the Dorm table.", "Determine which dormitories have a TV Lounge by checking the Has_amenity table for the amenid corresponding to 'TV Lounge' in the Dorm_amenity table.", "Use a subquery to find dormids that have the TV Lounge.", "Select dorm names from the Dorm table where the dormid is not in the list of dormids that have a TV Lounge."], "pred_sql": "SELECT dorm_name FROM Dorm WHERE dormid NOT IN (SELECT dormid FROM Has_amenity WHERE amenid = (SELECT amenid FROM Dorm_amenity WHERE amenity_name = 'TV Lounge'));", "gold_sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}
{"sample_id": 5762, "db_id": "dorm_1", "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.", "rationale": ["Identify the tables involved: Student, Lives_in, Dorm, Has_amenity, and Dorm_amenity.", "We need to find students, so we start with the Student table.", "Students live in dorms, which is represented in the Lives_in table, so we will join Student with Lives_in on StuID.", "Next, we need to join the Dorm table to get information about the dorms where students live, using the dormid from Lives_in.", "To filter dorms based on amenities, we join the Has_amenity table to link dorms to their amenities.", "Finally, we join the Dorm_amenity table to access the amenity names and filter for 'TV Lounge'.", "Select the first name (Fname) and last name (LName) of the students who meet the criteria."], "pred_sql": "SELECT Student.Fname, Student.LName \nFROM Student \nJOIN Lives_in ON Student.StuID = Lives_in.stuid \nJOIN Dorm ON Lives_in.dormid = Dorm.dormid \nJOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid \nJOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid \nWHERE Dorm_amenity.amenity_name = 'TV Lounge';", "gold_sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["has_amenity", "student", "lives_in", "dorm_amenity"]}
{"sample_id": 5763, "db_id": "dorm_1", "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?", "rationale": ["Identify the required information: first and last names of students living in a dorm with a specific amenity (TV Lounge).", "Determine the tables involved: Student, Lives_in, Dorm, Has_amenity, and Dorm_amenity.", "Establish relationships between the tables: Students live in dorms (Lives_in), dorms have amenities (Has_amenity), and amenities are defined in the Dorm_amenity table.", "Use JOIN clauses to connect these tables based on their relationships: JOIN Lives_in with Student on StuID, JOIN Lives_in with Dorm on dormid, JOIN Dorm with Has_amenity on dormid, and JOIN Has_amenity with Dorm_amenity on amenid.", "Filter the results to only include dorms that have a 'TV Lounge' amenity using a WHERE clause."], "pred_sql": "SELECT Student.Fname, Student.LName \nFROM Student \nJOIN Lives_in ON Student.StuID = Lives_in.stuid \nJOIN Dorm ON Lives_in.dormid = Dorm.dormid \nJOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid \nJOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid \nWHERE Dorm_amenity.amenity_name = 'TV Lounge';", "gold_sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["has_amenity", "student", "lives_in", "dorm_amenity"]}
{"sample_id": 5764, "db_id": "dorm_1", "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.", "rationale": ["Identify the required fields: first name (Fname) and age (Age) of students.", "Determine the relationship between students and dorms using the Lives_in table.", "Filter dorms that do not have the 'TV Lounge' amenity.", "Use a subquery to find dorms that have the 'TV Lounge' amenity by joining Has_amenity and Dorm_amenity tables.", "Use the NOT IN clause to exclude those dorms from the main query."], "pred_sql": "SELECT Student.Fname, Student.Age \nFROM Student \nJOIN Lives_in ON Student.StuID = Lives_in.stuid \nJOIN Dorm ON Lives_in.dormid = Dorm.dormid \nWHERE Dorm.dormid NOT IN (\n    SELECT Has_amenity.dormid \n    FROM Has_amenity \n    JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid \n    WHERE Dorm_amenity.amenity_name = 'TV Lounge'\n);", "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["has_amenity", "student", "lives_in", "dorm_amenity"]}
{"sample_id": 5765, "db_id": "dorm_1", "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?", "rationale": ["Identify the columns needed: first name (Fname) and age (Age) of students.", "Determine the tables involved: Student, Lives_in, Dorm, Has_amenity, and Dorm_amenity.", "Establish relationships between the tables using JOINs:", "- Join Student with Lives_in on StuID to get students and their dorms.", "- Join Lives_in with Dorm on dormid to get dorm details.", "- Join Dorm with Has_amenity on dormid to find amenities in the dorm.", "- Join Has_amenity with Dorm_amenity on amenid to filter for specific amenities.", "Filter the results to only include dorms that have a 'TV Lounge' amenity."], "pred_sql": "SELECT Student.Fname, Student.Age \nFROM Student \nJOIN Lives_in ON Student.StuID = Lives_in.stuid \nJOIN Dorm ON Lives_in.dormid = Dorm.dormid \nJOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid \nJOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid \nWHERE Dorm_amenity.amenity_name = 'TV Lounge';", "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["has_amenity", "student", "lives_in", "dorm_amenity"]}
{"sample_id": 5766, "db_id": "dorm_1", "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.", "rationale": ["Identify the student with the last name 'Smith' from the Student table.", "Join the Lives_in table to find out which dorm the student is living in using the student's ID.", "Join the Dorm table to get the details of the dormitory where the student resides.", "Join the Has_amenity table to find out which amenities are available in that dormitory.", "Join the Dorm_amenity table to get the names of the amenities.", "Filter the results to only include the amenities for the dorm where the student with last name 'Smith' is living."], "pred_sql": "SELECT da.amenity_name \nFROM Student s \nJOIN Lives_in li ON s.StuID = li.stuid \nJOIN Dorm d ON li.dormid = d.dormid \nJOIN Has_amenity ha ON d.dormid = ha.dormid \nJOIN Dorm_amenity da ON ha.amenid = da.amenid \nWHERE s.LName = 'Smith';", "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "source_tables": ["has_amenity", "lives_in", "student", "dorm_amenity", "dorm"]}
{"sample_id": 5767, "db_id": "dorm_1", "question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?", "rationale": ["Identify the student with the last name 'Smith' from the Student table.", "Join the Lives_in table to find the dormitory where the student lives using the student's ID.", "Join the Dorm table to get the details of the dormitory.", "Join the Has_amenity table to find the amenities associated with that dormitory.", "Join the Dorm_amenity table to get the names of the amenities.", "Filter the results to only include the student with the last name 'Smith'."], "pred_sql": "SELECT da.amenity_name \nFROM Student s \nJOIN Lives_in li ON s.StuID = li.stuid \nJOIN Dorm d ON li.dormid = d.dormid \nJOIN Has_amenity ha ON d.dormid = ha.dormid \nJOIN Dorm_amenity da ON ha.amenid = da.amenid \nWHERE s.LName = 'Smith';", "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "source_tables": ["has_amenity", "lives_in", "student", "dorm_amenity", "dorm"]}
{"sample_id": 5768, "db_id": "customer_complaints", "question": "How many customers are there?", "rationale": ["Identify the goal of the query: to count the number of customers.", "Determine the relevant table: the 'Customers' table contains the customer data.", "Use the COUNT() function to count the total number of entries in the 'Customers' table.", "Construct the SQL query to select the count from the 'Customers' table."], "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers;", "gold_sql": "SELECT count(*) FROM customers", "source_tables": ["customers"]}
{"sample_id": 5769, "db_id": "customer_complaints", "question": "Count the number of customers.", "rationale": ["Identify the goal: We need to count the number of customers.", "Determine the relevant table: The 'Customers' table contains the customer data.", "Use the COUNT() function to count the total number of entries in the 'Customers' table.", "Construct the SQL query to select the count from the 'Customers' table."], "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers;", "gold_sql": "SELECT count(*) FROM customers", "source_tables": ["customers"]}
{"sample_id": 5770, "db_id": "customer_complaints", "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.", "rationale": ["Identify the table needed: Customers, since we need customer information.", "Select the required columns: email_address and phone_number.", "Specify the order of the results: ORDER BY email_address, phone_number to sort the results accordingly."], "pred_sql": "SELECT email_address, phone_number FROM Customers ORDER BY email_address, phone_number;", "gold_sql": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number", "source_tables": ["customers"]}
{"sample_id": 5771, "db_id": "customer_complaints", "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?", "rationale": ["Identify the required columns: email_address and phone_number from the Customers table.", "Determine the table to query: Customers.", "Specify the sorting criteria: sort by email_address and then by phone_number in ascending order.", "Construct the SQL SELECT statement to retrieve the specified columns and apply the ORDER BY clause."], "pred_sql": "SELECT email_address, phone_number FROM Customers ORDER BY email_address, phone_number;", "gold_sql": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number", "source_tables": ["customers"]}
{"sample_id": 5772, "db_id": "customer_complaints", "question": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?", "rationale": ["Identify the relevant table: Customers, as we need information about customers and their locations.", "Filter the customers based on the type code 'Good Credit Rating'.", "Group the results by town_city to count the number of customers in each city.", "Count the number of customers in each city using COUNT(customer_id).", "Order the results in ascending order based on the customer count to find the city with the least number of customers.", "Limit the results to 1 to get only the city with the least number of customers."], "pred_sql": "SELECT town_city, COUNT(customer_id) AS customer_count \nFROM Customers \nWHERE customer_type_code = 'Good Credit Rating' \nGROUP BY town_city \nORDER BY customer_count ASC \nLIMIT 1;", "gold_sql": "SELECT town_city FROM customers WHERE customer_type_code  =  'Good Credit Rating' GROUP BY town_city ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}
{"sample_id": 5773, "db_id": "customer_complaints", "question": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.", "rationale": ["Identify the relevant table: Customers, as we need customer information.", "We need to filter customers based on the customer type code 'Good Credit Rating'.", "We will group the results by town_city to count the number of customers in each city.", "To find the city with the fewest customers, we will order the results by the count of customers in ascending order.", "Finally, we will limit the results to 1 to get only the city with the fewest customers."], "pred_sql": "SELECT town_city FROM Customers WHERE customer_type_code = 'Good Credit Rating' GROUP BY town_city ORDER BY COUNT(customer_id) ASC LIMIT 1;", "gold_sql": "SELECT town_city FROM customers WHERE customer_type_code  =  'Good Credit Rating' GROUP BY town_city ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}
{"sample_id": 5774, "db_id": "customer_complaints", "question": "List the name of all products along with the number of complaints that they have received.", "rationale": ["Identify the tables involved: Products and Complaints.", "We need to list product names, so we will select 'product_name' from the Products table.", "To count the number of complaints for each product, we will use the COUNT() function on 'complaint_id' from the Complaints table.", "Since not all products may have complaints, we will use a LEFT JOIN to include all products regardless of whether they have complaints or not.", "We will join the Products table with the Complaints table on the 'product_id' column.", "Finally, we will group the results by 'product_id' to ensure we get a count of complaints for each product."], "pred_sql": "SELECT Products.product_name, COUNT(Complaints.complaint_id) AS complaint_count\nFROM Products\nLEFT JOIN Complaints ON Products.product_id = Complaints.product_id\nGROUP BY Products.product_id;", "gold_sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name", "source_tables": ["complaints", "products"]}
{"sample_id": 5775, "db_id": "customer_complaints", "question": "What are all the different product names, and how many complains has each received?", "rationale": ["Identify the relevant tables: Products and Complaints.", "We need to retrieve product names from the Products table.", "We also need to count the number of complaints associated with each product, which requires joining the Complaints table.", "Use a LEFT JOIN to ensure we get all products, even those with zero complaints.", "Group the results by product name to aggregate the complaint counts."], "pred_sql": "SELECT Products.product_name, COUNT(Complaints.complaint_id) AS complaint_count \nFROM Products \nLEFT JOIN Complaints ON Products.product_id = Complaints.product_id \nGROUP BY Products.product_name;", "gold_sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name", "source_tables": ["complaints", "products"]}
{"sample_id": 5776, "db_id": "customer_complaints", "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.", "rationale": ["Identify the main goal: Find the emails of customers who filed complaints about the product with the most complaints.", "Understand the relationships: Customers are linked to Complaints through customer_id.", "Determine the product with the most complaints: This requires a subquery that counts complaints grouped by product_id and orders them in descending order, limiting the result to the top product.", "Join the Customers table with the Complaints table to get the email addresses of customers who filed complaints for the identified product.", "Select distinct email addresses to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT c.email_address\nFROM Customers c\nJOIN Complaints co ON c.customer_id = co.customer_id\nWHERE co.product_id = (\n    SELECT product_id\n    FROM Complaints\n    GROUP BY product_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1", "source_tables": ["complaints", "customers"]}
{"sample_id": 5777, "db_id": "customer_complaints", "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?", "rationale": ["Identify the relevant tables: Customers and Complaints.", "We need to find customers who have filed complaints, so we will join the Customers table with the Complaints table on customer_id.", "To find the product with the greatest number of complaints, we will use a subquery that counts the number of complaints for each product and orders them in descending order, limiting the result to the top product.", "The outer query will select the distinct email addresses of customers who have complaints related to the product identified in the subquery."], "pred_sql": "SELECT DISTINCT c.email_address\nFROM Customers c\nJOIN Complaints co ON c.customer_id = co.customer_id\nWHERE co.product_id = (\n    SELECT product_id\n    FROM Complaints\n    GROUP BY product_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1", "source_tables": ["complaints", "customers"]}
{"sample_id": 5778, "db_id": "customer_complaints", "question": "Which products has been complained by the customer who has filed least amount of complaints?", "rationale": ["Identify the customer who has filed the least amount of complaints. This can be done by grouping the complaints by customer_id and counting the number of complaints for each customer, then ordering the results in ascending order and limiting the output to the first result.", "Once we have the customer_id of the customer with the least complaints, we need to find the products associated with that customer. This requires joining the Products table with the Complaints table on the product_id.", "The final SQL query will select the product_id and product_name from the Products table where the product_id matches the complaints made by the identified customer."], "pred_sql": "SELECT p.product_id, p.product_name \nFROM Products p \nJOIN Complaints c ON p.product_id = c.product_id \nWHERE c.customer_id = (\n    SELECT customer_id \n    FROM Complaints \n    GROUP BY customer_id \n    ORDER BY COUNT(complaint_id) ASC \n    LIMIT 1\n)", "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1", "source_tables": ["complaints", "products", "customers"]}
{"sample_id": 5779, "db_id": "customer_complaints", "question": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.", "rationale": ["Identify the products that have complaints associated with them by joining the Products table with the Complaints table on the product_id.", "To find the customer who has filed the fewest complaints, we need to group the Complaints by customer_id and count the number of complaints for each customer.", "Order the results of the complaint counts in ascending order to get the customer with the fewest complaints at the top.", "Limit the results to just one customer to get their customer_id.", "Finally, use this customer_id to filter the complaints and select the distinct product names associated with that customer."], "pred_sql": "SELECT DISTINCT p.product_name \nFROM Products p \nJOIN Complaints c ON p.product_id = c.product_id \nWHERE c.customer_id = (\n    SELECT customer_id \n    FROM Complaints \n    GROUP BY customer_id \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n)", "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1", "source_tables": ["complaints", "products", "customers"]}
{"sample_id": 5780, "db_id": "customer_complaints", "question": "What is the phone number of the customer who has filed the most recent complaint?", "rationale": ["Identify the relevant tables: Customers and Complaints.", "We need to find the phone number of the customer, so we will select the 'phone_number' column from the Customers table.", "To find the customer who filed the most recent complaint, we need to join the Customers table with the Complaints table on the customer_id.", "We will order the results by the 'date_complaint_raised' column in descending order to get the most recent complaint first.", "Finally, we will limit the results to 1 to get only the most recent customer's phone number."], "pred_sql": "SELECT Customers.phone_number FROM Customers JOIN Complaints ON Customers.customer_id = Complaints.customer_id ORDER BY Complaints.date_complaint_raised DESC LIMIT 1;", "gold_sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "source_tables": ["complaints", "customers"]}
{"sample_id": 5781, "db_id": "customer_complaints", "question": "Return the phone number of the customer who filed the complaint that was raised most recently.", "rationale": ["Identify the relevant tables: Customers and Complaints, since we need customer information related to complaints.", "We need to find the most recent complaint, which requires ordering the complaints by the date they were raised.", "Join the Customers table with the Complaints table on the customer_id to access customer details for the complaints.", "Select the phone number from the Customers table.", "Order the results by the date_complaint_raised in descending order to get the most recent complaint first.", "Limit the results to 1 to get only the most recent complaint's customer phone number."], "pred_sql": "SELECT Customers.phone_number \nFROM Customers \nJOIN Complaints ON Customers.customer_id = Complaints.customer_id \nORDER BY Complaints.date_complaint_raised DESC \nLIMIT 1;", "gold_sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "source_tables": ["complaints", "customers"]}
{"sample_id": 5782, "db_id": "customer_complaints", "question": "Find the email and phone number of the customers who have never filed a complaint before.", "rationale": ["Identify the relevant table: Customers, which contains the email and phone number of customers.", "Determine the condition: We need customers who have never filed a complaint.", "To find customers who have never filed a complaint, we can use a subquery that selects customer_ids from the Complaints table.", "Use the NOT IN clause to filter out customers whose customer_id exists in the Complaints table.", "Select the email_address and phone_number from the Customers table where the customer_id is not in the list of customer_ids from the Complaints table."], "pred_sql": "SELECT email_address, phone_number FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Complaints)", "gold_sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)", "source_tables": ["complaints", "customers"]}
{"sample_id": 5783, "db_id": "customer_complaints", "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?", "rationale": ["Identify the relevant table: Customers, which contains the email and phone number of customers.", "Determine the condition: We need customers who have never filed a complaint.", "To find customers who have never filed a complaint, we can use a subquery that selects customer_ids from the Complaints table.", "Use the NOT IN clause to filter out customers whose customer_id exists in the Complaints table.", "Select the email_address and phone_number from the Customers table where the customer_id is not in the list of customer_ids from the Complaints table."], "pred_sql": "SELECT email_address, phone_number FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Complaints)", "gold_sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)", "source_tables": ["complaints", "customers"]}
{"sample_id": 5784, "db_id": "customer_complaints", "question": "Find the phone number of all the customers and staff.", "rationale": ["Identify the tables that contain the phone number: Customers and Staff.", "Determine the columns to select: phone_number from both tables.", "Use the UNION operator to combine results from both tables, ensuring that duplicate phone numbers are removed."], "pred_sql": "SELECT phone_number FROM Customers UNION SELECT phone_number FROM Staff;", "gold_sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "source_tables": ["staff", "customers"]}
{"sample_id": 5785, "db_id": "customer_complaints", "question": "What are the phone numbers of all customers and all staff members?", "rationale": ["Identify the tables involved: Customers and Staff.", "Determine the relevant column: phone_number from both tables.", "Use the UNION operator to combine results from both tables, ensuring unique phone numbers are returned."], "pred_sql": "SELECT phone_number FROM Customers UNION SELECT phone_number FROM Staff;", "gold_sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "source_tables": ["staff", "customers"]}
{"sample_id": 5786, "db_id": "customer_complaints", "question": "What is the description of the product named \"Chocolate\"?", "rationale": ["Identify the table that contains product information, which is the Products table.", "Determine the specific column needed, which is product_description, to get the description of the product.", "Use a WHERE clause to filter the results to only include the product with the name 'Chocolate'.", "Construct the SQL query to select the product_description from the Products table where the product_name matches 'Chocolate'."], "pred_sql": "SELECT product_description FROM Products WHERE product_name = 'Chocolate';", "gold_sql": "SELECT product_description FROM products WHERE product_name  =  'Chocolate'", "source_tables": ["products"]}
{"sample_id": 5787, "db_id": "customer_complaints", "question": "Return the description of the product called \"Chocolate\".", "rationale": ["Identify the table that contains product information, which is the 'Products' table.", "Determine the specific column needed, which is 'product_description' for the product called 'Chocolate'.", "Formulate the SQL query to select the 'product_description' from the 'Products' table where the 'product_name' matches 'Chocolate'."], "pred_sql": "SELECT product_description FROM Products WHERE product_name = 'Chocolate';", "gold_sql": "SELECT product_description FROM products WHERE product_name  =  'Chocolate'", "source_tables": ["products"]}
{"sample_id": 5788, "db_id": "customer_complaints", "question": "Find the name and category of the most expensive product.", "rationale": ["Identify the relevant table: The query requires information about products, so we will use the 'Products' table.", "Determine the required columns: We need the 'product_name' and 'product_category_code' for the most expensive product.", "Find the most expensive product: To do this, we will order the products by 'product_price' in descending order.", "Limit the results: Since we only want the most expensive product, we will limit the results to 1."], "pred_sql": "SELECT product_name, product_category_code FROM Products ORDER BY product_price DESC LIMIT 1;", "gold_sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"]}
{"sample_id": 5789, "db_id": "customer_complaints", "question": "What is the name and category code of the product with the highest price?", "rationale": ["Identify the relevant table: Products, as it contains product information including name, category code, and price.", "Determine the columns needed: product_name and product_category_code are required for the output.", "To find the product with the highest price, use a subquery to select the maximum product_price from the Products table.", "Use the result of the subquery to filter the Products table to get the product_name and product_category_code of the product that has the highest price."], "pred_sql": "SELECT product_name, product_category_code FROM Products WHERE product_price = (SELECT MAX(product_price) FROM Products);", "gold_sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"]}
{"sample_id": 5790, "db_id": "customer_complaints", "question": "Find the prices of products which has never received a single complaint.", "rationale": ["Identify the Products table which contains the product prices.", "We need to find products that have never received a complaint, which means we need to check the Complaints table.", "To find products with no complaints, we can use a subquery that selects all product_ids from the Complaints table.", "We will use the NOT IN clause to filter out any product_ids that appear in the Complaints table from our main query.", "Finally, we select the product_id and product_price from the Products table where the product_id is not in the list of product_ids from the Complaints table."], "pred_sql": "SELECT product_id, product_price FROM Products WHERE product_id NOT IN (SELECT product_id FROM Complaints)", "gold_sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)", "source_tables": ["complaints", "products"]}
{"sample_id": 5791, "db_id": "customer_complaints", "question": "What are the prices of products that have never gotten a complaint?", "rationale": ["Identify the Products table as the source of product information.", "We need to select the product_id, product_name, and product_price from the Products table.", "To find products that have never received a complaint, we will use a subquery to select product_ids from the Complaints table.", "The main query will filter products where the product_id is not in the list of product_ids returned by the subquery."], "pred_sql": "SELECT product_id, product_name, product_price FROM Products WHERE product_id NOT IN (SELECT product_id FROM Complaints)", "gold_sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)", "source_tables": ["complaints", "products"]}
{"sample_id": 5792, "db_id": "customer_complaints", "question": "What is the average price of the products for each category?", "rationale": ["Identify the table that contains the product information, which is the 'Products' table.", "Determine the relevant columns needed for the query: 'product_category_code' for grouping and 'product_price' for calculating the average.", "Use the AVG() function to calculate the average price of products.", "Group the results by 'product_category_code' to get the average price for each category."], "pred_sql": "SELECT product_category_code, AVG(product_price) AS average_price FROM Products GROUP BY product_category_code;", "gold_sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code", "source_tables": ["products"]}
{"sample_id": 5793, "db_id": "customer_complaints", "question": "Return the average price of products that have each category code.", "rationale": ["Identify the table that contains the product information, which is the 'Products' table.", "Determine the relevant columns needed for the query: 'product_category_code' for grouping and 'product_price' for calculating the average.", "Use the AVG() function to calculate the average price of products.", "Group the results by 'product_category_code' to get the average price for each category."], "pred_sql": "SELECT product_category_code, AVG(product_price) AS average_price FROM Products GROUP BY product_category_code;", "gold_sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code", "source_tables": ["products"]}
{"sample_id": 5794, "db_id": "customer_complaints", "question": "Find the last name of the staff member who processed the complaint of the cheapest product.", "rationale": ["Identify the relevant tables: Staff, Complaints, and Products are needed to find the last name of the staff member who processed a complaint.", "Determine the relationship between the tables: Complaints links to both Staff (via staff_id) and Products (via product_id).", "Find the cheapest product: Use a subquery to select the minimum product price from the Products table.", "Join the tables: Use JOIN statements to connect Staff, Complaints, and Products based on their relationships.", "Filter the results: Use a WHERE clause to filter the staff member based on the complaint related to the cheapest product."], "pred_sql": "SELECT s.last_name \nFROM Staff s \nJOIN Complaints c ON s.staff_id = c.staff_id \nJOIN Products p ON c.product_id = p.product_id \nWHERE p.product_price = (SELECT MIN(product_price) FROM Products);", "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1", "source_tables": ["complaints", "products", "staff"]}
{"sample_id": 5795, "db_id": "customer_complaints", "question": "What is the last name of the staff member in charge of the complaint on the product with the lowest price?", "rationale": ["Identify the relevant tables: Staff, Complaints, and Products.", "We need to find the staff member associated with a complaint about the product with the lowest price.", "Join the Staff table with the Complaints table on staff_id to link staff members to complaints.", "Join the Complaints table with the Products table on product_id to link complaints to products.", "Use a subquery to find the minimum product price from the Products table.", "Filter the results to only include the staff member handling the complaint for the product with the lowest price.", "Select the last name of the staff member from the resulting joined tables."], "pred_sql": "SELECT Staff.last_name FROM Staff JOIN Complaints ON Staff.staff_id = Complaints.staff_id JOIN Products ON Complaints.product_id = Products.product_id WHERE Products.product_price = (SELECT MIN(product_price) FROM Products);", "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1", "source_tables": ["complaints", "products", "staff"]}
{"sample_id": 5796, "db_id": "customer_complaints", "question": "Which complaint status has more than 3 records on file?", "rationale": ["Identify the table that contains the complaint status, which is the 'Complaints' table.", "We need to count the number of records for each complaint status, so we will use the COUNT() function.", "To group the results by complaint status, we will use the GROUP BY clause on 'complaint_status_code'.", "We want to filter the results to only include those complaint statuses that have more than 3 records, so we will use the HAVING clause with COUNT(*) > 3."], "pred_sql": "SELECT complaint_status_code, COUNT(*) as record_count \nFROM Complaints \nGROUP BY complaint_status_code \nHAVING COUNT(*) > 3;", "gold_sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3", "source_tables": ["complaints"]}
{"sample_id": 5797, "db_id": "customer_complaints", "question": "Return complaint status codes have more than 3 corresponding complaints?", "rationale": ["Identify the relevant table: The Complaints table contains the complaint status codes and the complaints themselves.", "Determine the required information: We need to find complaint status codes that have more than 3 corresponding complaints.", "Use GROUP BY: We will group the results by the complaint_status_code to aggregate the complaints for each status code.", "Use COUNT: We will count the number of complaints (complaint_id) for each status code.", "Use HAVING: We will filter the results to only include those status codes where the count of complaints is greater than 3."], "pred_sql": "SELECT complaint_status_code FROM Complaints GROUP BY complaint_status_code HAVING COUNT(complaint_id) > 3;", "gold_sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3", "source_tables": ["complaints"]}
{"sample_id": 5798, "db_id": "customer_complaints", "question": "Find the last name of the staff whose email address contains \"wrau\".", "rationale": ["Identify the table that contains the information needed: the 'Staff' table has the 'last_name' and 'email_address' columns.", "Determine the condition for filtering: we need to find staff members whose email address contains 'wrau'.", "Use the SQL 'LIKE' operator with wildcards '%' to match any characters before and after 'wrau'.", "Construct the SQL SELECT statement to retrieve the 'last_name' from the 'Staff' table where the email address matches the condition."], "pred_sql": "SELECT last_name FROM Staff WHERE email_address LIKE '%wrau%';", "gold_sql": "SELECT last_name FROM staff WHERE email_address LIKE '%wrau%'", "source_tables": ["staff"]}
{"sample_id": 5799, "db_id": "customer_complaints", "question": "What are the last names of staff with email addressed containing the substring \"wrau\"?", "rationale": ["Identify the table to query: The request is about staff members, so we will query the 'Staff' table.", "Determine the required column: The user wants the last names of the staff, so we will select the 'last_name' column.", "Specify the condition: We need to filter staff members based on their email addresses containing the substring 'wrau'. This requires a WHERE clause with the LIKE operator.", "Construct the SQL query: Combine the SELECT statement with the FROM clause and the WHERE condition to form the complete SQL query."], "pred_sql": "SELECT last_name FROM Staff WHERE email_address LIKE '%wrau%';", "gold_sql": "SELECT last_name FROM staff WHERE email_address LIKE '%wrau%'", "source_tables": ["staff"]}
{"sample_id": 5800, "db_id": "customer_complaints", "question": "How many customers are there in the customer type with the most customers?", "rationale": ["Identify the relevant table: The query is about customers, so we will use the Customers table.", "Determine the required information: We need to count the number of customers for each customer type.", "Group the results: We will group the results by customer_type_code to get the count for each type.", "Sort the results: We will order the results by the count of customers in descending order to find the type with the most customers.", "Limit the results: We will limit the output to 1 to get only the customer type with the highest count."], "pred_sql": "SELECT customer_type_code, COUNT(customer_id) AS customer_count\nFROM Customers\nGROUP BY customer_type_code\nORDER BY customer_count DESC\nLIMIT 1;", "gold_sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}
{"sample_id": 5801, "db_id": "customer_complaints", "question": "Count the number of customers that have the customer type that is most common.", "rationale": ["Identify the relevant table: Customers, as we need to count customers based on their type.", "Determine the column to group by: customer_type_code, since we want to find the most common customer type.", "Use COUNT function to count the number of customers for each customer type.", "Group the results by customer_type_code to aggregate the counts.", "Order the results in descending order based on the count to get the most common type at the top.", "Limit the results to 1 to get only the most common customer type."], "pred_sql": "SELECT customer_type_code, COUNT(customer_id) AS customer_count\nFROM Customers\nGROUP BY customer_type_code\nORDER BY customer_count DESC\nLIMIT 1;", "gold_sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}
{"sample_id": 5802, "db_id": "customer_complaints", "question": "What is the last name of the staff who has handled the first ever complaint?", "rationale": ["Identify the relevant tables: Staff and Complaints.", "We need to find the staff member who handled the first ever complaint, which requires joining the Staff table with the Complaints table on the staff_id.", "To find the first ever complaint, we need to determine the minimum date from the date_complaint_raised column in the Complaints table.", "Once we have the date of the first complaint, we can filter the joined results to get the last name of the staff member who handled that complaint."], "pred_sql": "SELECT Staff.last_name FROM Staff JOIN Complaints ON Staff.staff_id = Complaints.staff_id WHERE Complaints.date_complaint_raised = (SELECT MIN(date_complaint_raised) FROM Complaints);", "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "source_tables": ["complaints", "staff"]}
{"sample_id": 5803, "db_id": "customer_complaints", "question": "Return the last name of the staff member who handled the complaint with the earliest date raised.", "rationale": ["Identify the table that contains the staff member's last name, which is the 'Staff' table.", "Determine the relationship between complaints and staff members, which is through the 'staff_id' in the 'Complaints' table.", "To find the staff member who handled the complaint with the earliest date raised, we need to order the complaints by 'date_complaint_raised' in ascending order.", "Select the 'staff_id' of the complaint with the earliest date raised using a subquery that limits the result to 1.", "Finally, use the 'staff_id' from the subquery to select the corresponding 'last_name' from the 'Staff' table."], "pred_sql": "SELECT last_name FROM Staff WHERE staff_id = (SELECT staff_id FROM Complaints ORDER BY date_complaint_raised ASC LIMIT 1);", "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "source_tables": ["complaints", "staff"]}
{"sample_id": 5804, "db_id": "customer_complaints", "question": "How many distinct complaint type codes are there in the database?", "rationale": ["Identify the table that contains the complaint type codes, which is the Complaints table.", "To find the number of distinct complaint type codes, we need to use the COUNT function along with DISTINCT.", "The SQL query will select the count of distinct values from the complaint_type_code column in the Complaints table."], "pred_sql": "SELECT COUNT(DISTINCT complaint_type_code) AS distinct_complaint_type_count FROM Complaints;", "gold_sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "source_tables": ["complaints"]}
{"sample_id": 5805, "db_id": "customer_complaints", "question": "Count the number of different complaint type codes.", "rationale": ["Identify the goal: We need to count the number of different complaint type codes in the Complaints table.", "Determine the relevant table: The Complaints table contains the complaint_type_code column.", "Use the COUNT function to count the distinct values: We will use COUNT(DISTINCT complaint_type_code) to get the number of unique complaint type codes.", "Construct the SQL query: The final SQL query will select the count of distinct complaint_type_code from the Complaints table."], "pred_sql": "SELECT COUNT(DISTINCT complaint_type_code) AS different_complaint_types FROM Complaints;", "gold_sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "source_tables": ["complaints"]}
{"sample_id": 5806, "db_id": "customer_complaints", "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".", "rationale": ["Identify the table that contains the required information: The 'Customers' table has the address details.", "Determine the specific columns needed: We need 'address_line_1' and 'address_line_2'.", "Specify the condition to filter the results: We need to find the customer with the email 'vbogisich@example.org'.", "Construct the SQL SELECT statement using the identified table, columns, and condition."], "pred_sql": "SELECT address_line_1, address_line_2 FROM Customers WHERE email_address = 'vbogisich@example.org';", "gold_sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  'vbogisich@example.org'", "source_tables": ["customers"]}
{"sample_id": 5807, "db_id": "customer_complaints", "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?", "rationale": ["Identify the table that contains the required information: The 'Customers' table holds customer addresses.", "Determine the specific columns needed: We need 'address_line_1' and 'address_line_2'.", "Specify the condition to filter the results: We need to find the customer with the email 'vbogisich@example.org'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Customers' table with the given condition."], "pred_sql": "SELECT address_line_1, address_line_2 FROM Customers WHERE email_address = 'vbogisich@example.org';", "gold_sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  'vbogisich@example.org'", "source_tables": ["customers"]}
{"sample_id": 5808, "db_id": "customer_complaints", "question": "Find the number of complaints with Product Failure type for each complaint status.", "rationale": ["Identify the relevant table: The Complaints table contains the information about complaints, including their types and statuses.", "Determine the columns needed: We need the complaint_status_code to group the results and count the number of complaints for each status.", "Filter the results: We need to filter the complaints to only include those with a complaint_type_code of 'Product Failure'.", "Count the number of complaints: Use the COUNT() function to count the number of complaints for each status.", "Group the results: Use GROUP BY to group the results by complaint_status_code to get the count for each status."], "pred_sql": "SELECT complaint_status_code, COUNT(*) AS number_of_complaints \nFROM Complaints \nWHERE complaint_type_code = 'Product Failure' \nGROUP BY complaint_status_code;", "gold_sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  'Product Failure' GROUP BY complaint_status_code", "source_tables": ["complaints"]}
{"sample_id": 5809, "db_id": "customer_complaints", "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?", "rationale": ["Identify the relevant table: The Complaints table contains the information about complaints, including their type and status codes.", "Determine the filtering criteria: We need to filter the complaints to only include those with the type code 'Product Failure'.", "Count the number of complaints for each status code: We will use the COUNT() function to count the number of complaints for each unique status code.", "Group the results by status code: We will use the GROUP BY clause to group the results by the complaint_status_code to get the count for each status code."], "pred_sql": "SELECT complaint_status_code, COUNT(*) AS complaint_count \nFROM Complaints \nWHERE complaint_type_code = 'Product Failure' \nGROUP BY complaint_status_code;", "gold_sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  'Product Failure' GROUP BY complaint_status_code", "source_tables": ["complaints"]}
{"sample_id": 5810, "db_id": "customer_complaints", "question": "What is first names of the top 5 staff who have handled the greatest number of complaints?", "rationale": ["Identify the relevant table: We need to find staff members who have handled complaints, so we will focus on the 'Staff' and 'Complaints' tables.", "Determine the relationship: The 'Complaints' table has a foreign key 'staff_id' that links to the 'Staff' table, allowing us to associate complaints with staff members.", "Count the number of complaints handled by each staff member: We will use a GROUP BY clause on 'staff_id' in the 'Complaints' table and count the 'complaint_id' to determine how many complaints each staff member has handled.", "Order the results: We will order the results in descending order based on the count of complaints to find the top staff members.", "Limit the results: We will limit the results to the top 5 staff members using the LIMIT clause.", "Select the first names: Finally, we will select the 'first_name' from the 'Staff' table for the staff members identified in the previous steps."], "pred_sql": "SELECT first_name FROM Staff WHERE staff_id IN (SELECT staff_id FROM Complaints GROUP BY staff_id ORDER BY COUNT(complaint_id) DESC LIMIT 5)", "gold_sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "source_tables": ["complaints", "staff"]}
{"sample_id": 5811, "db_id": "customer_complaints", "question": "Return the first names of the 5 staff members who have handled the most complaints.", "rationale": ["Identify the relevant table: We need to retrieve data from the Staff table.", "Determine the required data: We need the first names of staff members.", "Identify the relationship: Staff members are linked to complaints through the staff_id in the Complaints table.", "Count the number of complaints handled by each staff member: We will group the complaints by staff_id and count the number of complaints for each.", "Order the results: We will order the staff members by the count of complaints in descending order to find those who handled the most complaints.", "Limit the results: We will limit the results to the top 5 staff members with the most complaints.", "Construct the final query: We will select the first names of the top 5 staff members based on the previous steps."], "pred_sql": "SELECT first_name FROM Staff WHERE staff_id IN (SELECT staff_id FROM Complaints GROUP BY staff_id ORDER BY COUNT(complaint_id) DESC LIMIT 5)", "gold_sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "source_tables": ["complaints", "staff"]}
{"sample_id": 5812, "db_id": "customer_complaints", "question": "Which state has the most customers?", "rationale": ["Identify the relevant table: Customers, as it contains customer information including their state.", "Determine the columns needed: We need the 'state' column to group customers by state and 'customer_id' to count the number of customers in each state.", "Use the COUNT() function to count the number of customers for each state.", "Group the results by the 'state' column to aggregate the customer counts per state.", "Order the results in descending order based on the customer count to find the state with the most customers.", "Limit the results to 1 to get only the state with the highest customer count."], "pred_sql": "SELECT state, COUNT(customer_id) AS customer_count FROM Customers GROUP BY state ORDER BY customer_count DESC LIMIT 1;", "gold_sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}
{"sample_id": 5813, "db_id": "customer_complaints", "question": "Give the state that has the most customers.", "rationale": ["Identify the relevant table: The Customers table contains the information about customers, including their state.", "Determine the required information: We need to find the state with the most customers, which involves counting the number of customers per state.", "Use the COUNT function: To count the number of customers in each state, we will use the COUNT function on the customer_id column.", "Group the results: We will group the results by the state column to get the count of customers for each state.", "Order the results: To find the state with the most customers, we will order the results in descending order based on the customer count.", "Limit the results: Since we only need the state with the most customers, we will limit the results to 1."], "pred_sql": "SELECT state, COUNT(customer_id) AS customer_count\nFROM Customers\nGROUP BY state\nORDER BY customer_count DESC\nLIMIT 1;", "gold_sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}
{"sample_id": 5814, "db_id": "workshop_paper", "question": "How many submissions are there?", "rationale": ["Identify the table that contains submission data, which is the 'submission' table.", "To find the total number of submissions, we need to count the rows in the 'submission' table.", "Use the COUNT() function to count all entries in the 'submission' table.", "Construct the SQL query to select the count of submissions from the 'submission' table."], "pred_sql": "SELECT COUNT(*) AS total_submissions FROM submission;", "gold_sql": "SELECT count(*) FROM submission", "source_tables": ["submission"]}
{"sample_id": 5815, "db_id": "workshop_paper", "question": "Count the number of submissions.", "rationale": ["Identify the goal: Count the number of submissions.", "Determine the relevant table: The 'submission' table contains the submissions.", "Use the COUNT() function to count the total number of entries in the 'submission' table.", "Construct the SQL query to select the count from the 'submission' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfSubmissions FROM submission;", "gold_sql": "SELECT count(*) FROM submission", "source_tables": ["submission"]}
{"sample_id": 5816, "db_id": "workshop_paper", "question": "List the authors of submissions in ascending order of scores.", "rationale": ["Identify the table that contains the authors of submissions, which is the 'submission' table.", "Determine the column that contains the author identifiers, which is 'Author'.", "Identify the column that contains the scores, which is 'Scores'.", "Construct a SQL query to select the 'Author' from the 'submission' table.", "Add an ORDER BY clause to sort the results in ascending order based on the 'Scores' column."], "pred_sql": "SELECT Author FROM submission ORDER BY Scores ASC;", "gold_sql": "SELECT Author FROM submission ORDER BY Scores ASC", "source_tables": ["submission"]}
{"sample_id": 5817, "db_id": "workshop_paper", "question": "Find the author for each submission and list them in ascending order of submission score.", "rationale": ["Identify the table that contains the author information, which is the 'submission' table.", "We need to select the 'Author' column from the 'submission' table.", "To meet the requirement of listing them in ascending order of submission score, we will also need to order the results by the 'Scores' column in ascending order.", "Construct the SQL query to select the 'Author' from 'submission' and order by 'Scores' in ascending order."], "pred_sql": "SELECT submission.Author FROM submission ORDER BY submission.Scores ASC;", "gold_sql": "SELECT Author FROM submission ORDER BY Scores ASC", "source_tables": ["submission"]}
{"sample_id": 5818, "db_id": "workshop_paper", "question": "What are the authors of submissions and their colleges?", "rationale": ["Identify the relevant table: The query asks for authors and their colleges, which are both found in the 'submission' table.", "Select the required columns: We need to select 'Author' and 'College' from the 'submission' table.", "Construct the SQL query: Use the SELECT statement to retrieve the specified columns from the 'submission' table."], "pred_sql": "SELECT submission.Author, submission.College FROM submission;", "gold_sql": "SELECT Author ,  College FROM submission", "source_tables": ["submission"]}
{"sample_id": 5819, "db_id": "workshop_paper", "question": "For each submission, show the author and their affiliated college.", "rationale": ["Identify the relevant table: The 'submission' table contains the information about authors and their affiliated colleges.", "Select the required columns: We need to retrieve the 'Author' and 'College' columns from the 'submission' table.", "Construct the SQL query: Use the SELECT statement to get the specified columns from the 'submission' table."], "pred_sql": "SELECT Author, College FROM submission;", "gold_sql": "SELECT Author ,  College FROM submission", "source_tables": ["submission"]}
{"sample_id": 5820, "db_id": "workshop_paper", "question": "Show the names of authors from college \"Florida\" or \"Temple\"", "rationale": ["Identify the relevant tables: We need to access the 'submission' table to get author information and the 'college' information.", "Filter the authors based on the college names 'Florida' and 'Temple'.", "Use a JOIN to connect the 'submission' table with the 'Acceptance' table to ensure we are only considering submissions that have been evaluated.", "Since we are only interested in the names of authors, we will select the 'Author' column from the 'submission' table.", "Use DISTINCT to ensure that we do not have duplicate author entries in the result."], "pred_sql": "SELECT DISTINCT submission.Author FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID JOIN workshop ON Acceptance.Workshop_ID = workshop.Workshop_ID WHERE submission.College IN (SELECT College FROM submission WHERE College IN ('Florida', 'Temple'));", "gold_sql": "SELECT Author FROM submission WHERE College  =  'Florida' OR College  =  'Temple'", "source_tables": ["submission"]}
{"sample_id": 5821, "db_id": "workshop_paper", "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?", "rationale": ["Identify the relevant tables: We need to look at the 'submission' table to find authors and their associated colleges.", "Determine the filtering criteria: We are interested in submissions from colleges named 'Florida' or 'Temple'.", "Use a JOIN operation: We need to join the 'submission' table with the 'Acceptance' table to ensure we are only considering submissions that have been evaluated.", "Use a WHERE clause: We will filter the results to include only those submissions from the specified colleges.", "Select distinct authors: Since we only want unique authors, we will use the DISTINCT keyword in our SELECT statement."], "pred_sql": "SELECT DISTINCT submission.Author FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID WHERE submission.College IN (SELECT College_ID FROM college WHERE College_Name IN ('Florida', 'Temple'));", "gold_sql": "SELECT Author FROM submission WHERE College  =  'Florida' OR College  =  'Temple'", "source_tables": ["submission"]}
{"sample_id": 5822, "db_id": "workshop_paper", "question": "What is the average score of submissions?", "rationale": ["Identify the table that contains the scores of submissions, which is the 'submission' table.", "To calculate the average score, we will use the AVG() function in SQL.", "The query will select the average of the 'Scores' column from the 'submission' table."], "pred_sql": "SELECT AVG(Scores) AS Average_Score FROM submission;", "gold_sql": "SELECT avg(Scores) FROM submission", "source_tables": ["submission"]}
{"sample_id": 5823, "db_id": "workshop_paper", "question": "Compute the average score of submissions.", "rationale": ["Identify the table that contains the scores of submissions, which is the 'submission' table.", "Determine the column that holds the scores, which is 'Scores'.", "Use the AVG() function to compute the average of the 'Scores' column.", "Construct the SQL query to select the average score from the 'submission' table."], "pred_sql": "SELECT AVG(Scores) AS Average_Score FROM submission;", "gold_sql": "SELECT avg(Scores) FROM submission", "source_tables": ["submission"]}
{"sample_id": 5824, "db_id": "workshop_paper", "question": "What is the author of the submission with the highest score?", "rationale": ["Identify the table that contains the author information, which is the 'submission' table.", "Determine that we need to find the submission with the highest score.", "To find the highest score, we can use a subquery that selects the maximum score from the 'Scores' column in the 'submission' table.", "Once we have the maximum score, we can select the 'Author' from the 'submission' table where the 'Scores' match this maximum score."], "pred_sql": "SELECT Author FROM submission WHERE Scores = (SELECT MAX(Scores) FROM submission);", "gold_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "source_tables": ["submission"]}
{"sample_id": 5825, "db_id": "workshop_paper", "question": "Find the author who achieved the highest score in a submission.", "rationale": ["Identify the table that contains the scores, which is the 'submission' table.", "To find the author with the highest score, we need to select the 'Author' column from the 'submission' table.", "We need to determine the maximum score from the 'Scores' column in the 'submission' table.", "We can use a subquery to find the maximum score and then filter the main query to get the author(s) who achieved that score."], "pred_sql": "SELECT Author FROM submission WHERE Scores = (SELECT MAX(Scores) FROM submission);", "gold_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "source_tables": ["submission"]}
{"sample_id": 5826, "db_id": "workshop_paper", "question": "Show different colleges along with the number of authors of submission from each college.", "rationale": ["Identify the relevant table: The 'submission' table contains information about authors and their associated colleges.", "Determine the required output: We need to show different colleges and the count of distinct authors from each college.", "Use the COUNT function to count distinct authors for each college.", "Group the results by college to get the count for each one."], "pred_sql": "SELECT college, COUNT(DISTINCT Author) AS NumberOfAuthors FROM submission GROUP BY college;", "gold_sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College", "source_tables": ["submission"]}
{"sample_id": 5827, "db_id": "workshop_paper", "question": "For each college, return the college name and the count of authors with submissions from that college.", "rationale": ["Identify the relevant table: The 'submission' table contains the 'Author' and 'College' columns needed for the query.", "We need to count the distinct authors for each college, so we will use the COUNT() function with DISTINCT.", "Group the results by college to get the count of authors for each college, which requires the GROUP BY clause.", "Select the 'College' and the count of distinct authors as 'Author_Count' in the final output."], "pred_sql": "SELECT College, COUNT(DISTINCT Author) AS Author_Count FROM submission GROUP BY College;", "gold_sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College", "source_tables": ["submission"]}
{"sample_id": 5828, "db_id": "workshop_paper", "question": "Show the most common college of authors of submissions.", "rationale": ["Identify the table that contains the relevant data: the 'submission' table holds information about authors and their associated colleges.", "To find the most common college, we need to count the number of submissions per college.", "Use the COUNT() function to count submissions grouped by the 'College' column.", "Sort the results in descending order based on the count of submissions to find the college with the highest number of submissions.", "Limit the results to 1 to get only the most common college."], "pred_sql": "SELECT College, COUNT(*) as SubmissionCount\nFROM submission\nGROUP BY College\nORDER BY SubmissionCount DESC\nLIMIT 1;", "gold_sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["submission"]}
{"sample_id": 5829, "db_id": "workshop_paper", "question": "Which college has the most authors with submissions?", "rationale": ["Identify the relevant table: The 'submission' table contains information about authors and their submissions, including the college they are associated with.", "We need to count the number of distinct authors for each college, so we will use the COUNT() function with DISTINCT.", "Group the results by college to get the count of authors per college using GROUP BY.", "To find the college with the most authors, we will order the results in descending order based on the count of authors using ORDER BY.", "Finally, we will limit the results to only the top entry using LIMIT 1."], "pred_sql": "SELECT College, COUNT(DISTINCT Author) AS AuthorCount\nFROM submission\nGROUP BY College\nORDER BY AuthorCount DESC\nLIMIT 1;", "gold_sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["submission"]}
{"sample_id": 5830, "db_id": "workshop_paper", "question": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.", "rationale": ["Identify the requirement to find colleges with authors having submission scores larger than 90 and smaller than 80.", "Use the 'submission' table to filter authors based on their scores.", "First, select colleges where the score is greater than 90.", "Then, use a subquery to find colleges where the score is less than 80.", "Combine these two conditions using the 'IN' clause to ensure that the college appears in both sets of results.", "Select distinct colleges to avoid duplicates in the final output."], "pred_sql": "SELECT DISTINCT s.College \nFROM submission s \nWHERE s.Scores > 90 \nAND s.College IN (SELECT s2.College \n                  FROM submission s2 \n                  WHERE s2.Scores < 80)", "gold_sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80", "source_tables": ["submission"]}
{"sample_id": 5831, "db_id": "workshop_paper", "question": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?", "rationale": ["Identify the table that contains the relevant data: the 'submission' table holds the scores and college information.", "We need to find colleges that have both types of authors: those with scores above 90 and those with scores below 80.", "To achieve this, we can perform a self-join on the 'submission' table, allowing us to compare scores from the same college.", "In the self-join, we will alias the first instance of the submission table as 's1' and the second as 's2'.", "We will set the condition that 's1.Scores' must be greater than 90 and 's2.Scores' must be less than 80, ensuring we are looking at the same college.", "Finally, we will select distinct colleges that meet both conditions."], "pred_sql": "SELECT DISTINCT s1.College\nFROM submission s1\nJOIN submission s2 ON s1.College = s2.College\nWHERE s1.Scores > 90 AND s2.Scores < 80;", "gold_sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80", "source_tables": ["submission"]}
{"sample_id": 5832, "db_id": "workshop_paper", "question": "Show the authors of submissions and the acceptance results of their submissions.", "rationale": ["Identify the tables involved: 'submission' for authors and 'Acceptance' for acceptance results.", "Determine the columns needed: 'Author' from 'submission' and 'Result' from 'Acceptance'.", "Establish the relationship between the tables: 'submission' and 'Acceptance' are linked by 'Submission_ID'.", "Construct the SQL query using a JOIN to combine the relevant data from both tables."], "pred_sql": "SELECT submission.Author, Acceptance.Result FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID;", "gold_sql": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5833, "db_id": "workshop_paper", "question": "For each submission, find its author and acceptance result.", "rationale": ["Identify the tables involved: 'submission' and 'Acceptance'.", "Determine the columns needed: 'Author' from 'submission' and 'Result' from 'Acceptance'.", "Establish the relationship between the tables using the foreign key: 'Submission_ID'.", "Construct the SQL query using a JOIN to combine the two tables based on the 'Submission_ID'.", "Select the required columns from the result of the JOIN."], "pred_sql": "SELECT submission.Author, Acceptance.Result FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID;", "gold_sql": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5834, "db_id": "workshop_paper", "question": "Show the result of the submission with the highest score.", "rationale": ["Identify the table that contains the scores of submissions, which is the 'submission' table.", "To find the submission with the highest score, we need to use the MAX() function to get the maximum score from the 'Scores' column in the 'submission' table.", "We will then select all columns from the 'submission' table where the 'Scores' match the maximum score obtained in the previous step."], "pred_sql": "SELECT * FROM submission WHERE Scores = (SELECT MAX(Scores) FROM submission);", "gold_sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5835, "db_id": "workshop_paper", "question": "Which submission received the highest score in acceptance result. Show me the result.", "rationale": ["Identify the relevant tables: 'submission' for scores and 'Acceptance' for the acceptance result.", "Join the 'submission' table with the 'Acceptance' table on 'Submission_ID' to link scores with their acceptance results.", "Filter the results to include only those submissions that have an acceptance result of 'accepted'.", "Order the filtered results by the 'Scores' in descending order to get the highest score at the top.", "Limit the results to 1 to get only the submission with the highest score."], "pred_sql": "SELECT submission.Submission_ID, submission.Scores, Acceptance.Result \nFROM submission \nJOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID \nWHERE Acceptance.Result = 'accepted' \nORDER BY submission.Scores DESC \nLIMIT 1;", "gold_sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5836, "db_id": "workshop_paper", "question": "Show each author and the number of workshops they submitted to.", "rationale": ["Identify the relevant tables: 'submission' for authors and 'Acceptance' for workshop submissions.", "We need to count the number of distinct workshops each author has submitted to, which requires joining the 'submission' and 'Acceptance' tables on 'Submission_ID'.", "Select the 'Author' from the 'submission' table and count the distinct 'Workshop_ID' from the 'Acceptance' table.", "Group the results by 'Author' to get the count of workshops for each author."], "pred_sql": "SELECT submission.Author, COUNT(DISTINCT Acceptance.Workshop_ID) AS Number_of_Workshops\nFROM submission\nJOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID\nGROUP BY submission.Author;", "gold_sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5837, "db_id": "workshop_paper", "question": "How many workshops did each author submit to? Return the author name and the number of workshops.", "rationale": ["Identify the relevant tables: 'submission' for authors and 'Acceptance' for workshop submissions.", "We need to count the number of distinct workshops each author submitted to, which requires joining the 'submission' and 'Acceptance' tables on 'Submission_ID'.", "Select the 'Author' from the 'submission' table and count the distinct 'Workshop_ID' from the 'Acceptance' table.", "Group the results by 'Author' to get the count of workshops for each author."], "pred_sql": "SELECT submission.Author, COUNT(DISTINCT Acceptance.Workshop_ID) AS Workshop_Count\nFROM submission\nJOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID\nGROUP BY submission.Author;", "gold_sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5838, "db_id": "workshop_paper", "question": "Show the authors who have submissions to more than one workshop.", "rationale": ["We need to find authors who have submissions to more than one workshop.", "To do this, we will join the 'submission' table with the 'Acceptance' table on the 'Submission_ID' column.", "Next, we will group the results by the 'Author' column from the 'submission' table.", "We will use the HAVING clause to filter the groups to only include those where the count of distinct 'Workshop_ID' from the 'Acceptance' table is greater than 1."], "pred_sql": "SELECT s.Author\nFROM submission s\nJOIN Acceptance a ON s.Submission_ID = a.Submission_ID\nGROUP BY s.Author\nHAVING COUNT(DISTINCT a.Workshop_ID) > 1;", "gold_sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5839, "db_id": "workshop_paper", "question": "Which authors have submitted to more than one workshop?", "rationale": ["Identify the relevant tables: We need to look at the 'submission' and 'Acceptance' tables since we are interested in authors and their submissions to workshops.", "Join the tables: We will join the 'submission' table with the 'Acceptance' table on the 'Submission_ID' to link submissions to their respective workshops.", "Group by authors: We will group the results by the 'Author' column from the 'submission' table to aggregate the data for each author.", "Count distinct workshops: We will use the COUNT function to count the distinct 'Workshop_ID' entries for each author to determine how many different workshops they have submitted to.", "Filter results: We will use the HAVING clause to filter the results to only include authors who have submitted to more than one workshop (i.e., COUNT > 1)."], "pred_sql": "SELECT submission.Author\nFROM submission\nJOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID\nGROUP BY submission.Author\nHAVING COUNT(DISTINCT Acceptance.Workshop_ID) > 1;", "gold_sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5840, "db_id": "workshop_paper", "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.", "rationale": ["Identify the columns needed: Date and Venue from the workshop table.", "Determine the table to query: workshop.", "Specify the order of results: ascending alphabetical order of the venue.", "Construct the SQL SELECT statement to retrieve the specified columns and apply the ORDER BY clause."], "pred_sql": "SELECT Date, Venue FROM workshop ORDER BY Venue ASC;", "gold_sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "source_tables": ["workshop"]}
{"sample_id": 5841, "db_id": "workshop_paper", "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.", "rationale": ["Identify the table that contains the required information: the 'workshop' table has the 'Date' and 'Venue' columns.", "The user wants to sort the workshops by the venue in alphabetical order, which requires an ORDER BY clause.", "Construct the SELECT statement to retrieve the 'Date' and 'Venue' columns from the 'workshop' table.", "Add the ORDER BY clause to sort the results by 'Venue' in ascending order."], "pred_sql": "SELECT Date, Venue FROM workshop ORDER BY Venue ASC;", "gold_sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "source_tables": ["workshop"]}
{"sample_id": 5842, "db_id": "workshop_paper", "question": "List the authors who do not have submission to any workshop.", "rationale": ["Identify the authors from the 'submission' table.", "Determine which authors have submissions that are linked to any workshop through the 'Acceptance' table.", "Use a subquery to find authors who have submissions accepted in any workshop.", "Select distinct authors from the 'submission' table who are not in the list of authors from the subquery."], "pred_sql": "SELECT DISTINCT Author FROM submission WHERE Author NOT IN (SELECT DISTINCT Author FROM submission INNER JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID)", "gold_sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5843, "db_id": "workshop_paper", "question": "Which authors did not submit to any workshop?", "rationale": ["Identify the authors from the 'submission' table.", "Determine which authors have made submissions to any workshop by joining the 'submission' table with the 'Acceptance' table on 'Submission_ID'.", "Use a subquery to find authors who have submissions that are linked to any workshop.", "Select distinct authors from the 'submission' table who are not in the list of authors from the subquery."], "pred_sql": "SELECT DISTINCT Author FROM submission WHERE Author NOT IN (SELECT DISTINCT Author FROM submission INNER JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID)", "gold_sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "source_tables": ["acceptance", "submission"]}
{"sample_id": 5844, "db_id": "tracking_share_transactions", "question": "Find the number of investors in total.", "rationale": ["Identify the table that contains the information about investors, which is the 'Investors' table.", "To find the total number of investors, we need to count the rows in the 'Investors' table.", "Use the COUNT() function to count all entries in the 'Investors' table.", "Select the count with an alias 'total_investors' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_investors FROM Investors;", "gold_sql": "SELECT count(*) FROM INVESTORS", "source_tables": ["investors"]}
{"sample_id": 5845, "db_id": "tracking_share_transactions", "question": "Show all investor details.", "rationale": ["Identify the table that contains investor details, which is the 'Investors' table.", "To show all investor details, we need to select all columns from the 'Investors' table.", "The SQL query to achieve this is 'SELECT * FROM Investors;'"], "pred_sql": "SELECT * FROM Investors;", "gold_sql": "SELECT Investor_details FROM INVESTORS", "source_tables": ["investors"]}
{"sample_id": 5846, "db_id": "tracking_share_transactions", "question": "Show all distinct lot details.", "rationale": ["Identify the table that contains the lot details, which is the 'Lots' table.", "To show all distinct lot details, we need to use the SELECT statement to retrieve data from the 'lot_details' column.", "Using the DISTINCT keyword will ensure that we only get unique lot details without duplicates."], "pred_sql": "SELECT DISTINCT lot_details FROM Lots;", "gold_sql": "SELECT DISTINCT lot_details FROM LOTS", "source_tables": ["lots"]}
{"sample_id": 5847, "db_id": "tracking_share_transactions", "question": "Show the maximum amount of transaction.", "rationale": ["Identify the table that contains the transaction amounts, which is the Transactions table.", "Determine the specific column that holds the transaction amounts, which is 'amount_of_transaction'.", "Use the SQL aggregate function MAX() to find the maximum value in the 'amount_of_transaction' column.", "Construct the SQL query to select the maximum transaction amount from the Transactions table."], "pred_sql": "SELECT MAX(amount_of_transaction) AS max_transaction_amount FROM Transactions;", "gold_sql": "SELECT max(amount_of_transaction) FROM TRANSACTIONS", "source_tables": ["transactions"]}
{"sample_id": 5848, "db_id": "tracking_share_transactions", "question": "Show all date and share count of transactions.", "rationale": ["Identify the relevant table: The Transactions table contains the date and share count information.", "Select the required columns: We need to select 'date_of_transaction' and 'share_count' from the Transactions table.", "Construct the SQL query: Use the SELECT statement to retrieve the specified columns from the Transactions table."], "pred_sql": "SELECT date_of_transaction, share_count FROM Transactions;", "gold_sql": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS", "source_tables": ["transactions"]}
{"sample_id": 5849, "db_id": "tracking_share_transactions", "question": "What is the total share of transactions?", "rationale": ["Identify the relevant table: The Transactions table contains the share_count column, which is needed to calculate the total shares.", "Determine the operation: We need to calculate the total, which requires the SUM function.", "Construct the SQL query: Use SELECT to retrieve the sum of share_count from the Transactions table."], "pred_sql": "SELECT SUM(share_count) AS total_shares FROM Transactions;", "gold_sql": "SELECT sum(share_count) FROM TRANSACTIONS", "source_tables": ["transactions"]}
{"sample_id": 5850, "db_id": "tracking_share_transactions", "question": "Show all transaction ids with transaction code 'PUR'.", "rationale": ["Identify the table that contains the transaction IDs and transaction type codes, which is the Transactions table.", "Determine the specific transaction type code we are interested in, which is 'PUR'.", "Construct a SQL SELECT statement to retrieve the transaction_id from the Transactions table where the transaction_type_code matches 'PUR'."], "pred_sql": "SELECT transaction_id FROM Transactions WHERE transaction_type_code = 'PUR';", "gold_sql": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'", "source_tables": ["transactions"]}
{"sample_id": 5851, "db_id": "tracking_share_transactions", "question": "Show all dates of transactions whose type code is \"SALE\".", "rationale": ["Identify the relevant table: Transactions, which contains the date_of_transaction and transaction_type_code.", "Determine the condition: We need to filter transactions where the transaction_type_code corresponds to 'SALE'.", "To find the transaction_type_code for 'SALE', we will query the Ref_Transaction_Types table.", "Construct a subquery to get the transaction_type_code for 'SALE'.", "Combine the main query and the subquery to select the date_of_transaction from Transactions where the transaction_type_code matches the result from the subquery."], "pred_sql": "SELECT date_of_transaction FROM Transactions WHERE transaction_type_code = (SELECT transaction_type_code FROM Ref_Transaction_Types WHERE transaction_type_description = 'SALE');", "gold_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  'SALE'", "source_tables": ["transactions"]}
{"sample_id": 5852, "db_id": "tracking_share_transactions", "question": "Show the average amount of transactions with type code \"SALE\".", "rationale": ["Identify the table that contains the transaction amounts, which is the 'Transactions' table.", "Determine the column that holds the transaction type code, which is 'transaction_type_code'.", "Filter the transactions to only include those with the type code 'SALE'.", "Use the AVG() function to calculate the average of the 'amount_of_transaction' column for the filtered results."], "pred_sql": "SELECT AVG(amount_of_transaction) AS average_transaction_amount \nFROM Transactions \nWHERE transaction_type_code = 'SALE';", "gold_sql": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  'SALE'", "source_tables": ["transactions"]}
{"sample_id": 5853, "db_id": "tracking_share_transactions", "question": "Show the description of transaction type with code \"PUR\".", "rationale": ["Identify the table that contains the transaction type descriptions, which is 'Ref_Transaction_Types'.", "Determine the column that holds the transaction type descriptions, which is 'transaction_type_description'.", "Identify the column that contains the transaction type codes, which is 'transaction_type_code'.", "Formulate the SQL query to select the 'transaction_type_description' from 'Ref_Transaction_Types' where 'transaction_type_code' equals 'PUR'."], "pred_sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = 'PUR';", "gold_sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  'PUR'", "source_tables": ["ref_transaction_types"]}
{"sample_id": 5854, "db_id": "tracking_share_transactions", "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.", "rationale": ["Identify the table that contains the relevant data: Transactions.", "Determine the columns needed: amount_of_transaction for the minimum amount, transaction_type_code to filter by type, and share_count to filter by share count.", "Use the MIN() function to find the minimum amount of transactions.", "Add a WHERE clause to filter transactions where the transaction_type_code is 'PUR'.", "Add another condition in the WHERE clause to filter transactions where the share_count is greater than 50."], "pred_sql": "SELECT MIN(amount_of_transaction) AS min_transaction_amount \nFROM Transactions \nWHERE transaction_type_code = 'PUR' \nAND share_count > 50;", "gold_sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR' AND share_count  >  50", "source_tables": ["transactions"]}
{"sample_id": 5855, "db_id": "tracking_share_transactions", "question": "Show the maximum share count of transactions where the amount is smaller than 10000", "rationale": ["Identify the table that contains the share count and amount of transactions, which is the Transactions table.", "Determine the condition for filtering the transactions, which is that the amount of transaction should be smaller than 10000.", "Use the MAX() function to find the maximum share count from the filtered results.", "Construct the SQL query to select the maximum share count from the Transactions table with the specified condition."], "pred_sql": "SELECT MAX(share_count) AS max_share_count FROM Transactions WHERE amount_of_transaction < 10000;", "gold_sql": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000", "source_tables": ["transactions"]}
{"sample_id": 5856, "db_id": "tracking_share_transactions", "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.", "rationale": ["Identify the table that contains the required information: Transactions.", "Determine the columns needed: date_of_transaction, share_count, and amount_of_transaction.", "Set the conditions for the query: share_count must be greater than 100 OR amount_of_transaction must be greater than 1000.", "Construct the SQL SELECT statement to retrieve the date_of_transaction based on the specified conditions."], "pred_sql": "SELECT date_of_transaction FROM Transactions WHERE share_count > 100 OR amount_of_transaction > 1000;", "gold_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000", "source_tables": ["transactions"]}
{"sample_id": 5857, "db_id": "tracking_share_transactions", "question": "Show the transaction type descriptions and dates if the share count is smaller than 10.", "rationale": ["Identify the columns needed: transaction type descriptions and transaction dates.", "The transaction type descriptions are in the Ref_Transaction_Types table, and the transaction dates are in the Transactions table.", "To get the transaction type descriptions, we need to join the Transactions table with the Ref_Transaction_Types table on the transaction_type_code.", "We need to filter the results to include only those transactions where the share count is smaller than 10."], "pred_sql": "SELECT Ref_Transaction_Types.transaction_type_description, Transactions.date_of_transaction \nFROM Transactions \nJOIN Ref_Transaction_Types ON Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code \nWHERE Transactions.share_count < 10;", "gold_sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10", "source_tables": ["transactions", "ref_transaction_types"]}
{"sample_id": 5858, "db_id": "tracking_share_transactions", "question": "Show details of all investors if they make any transaction with share count greater than 100.", "rationale": ["We need to show details of all investors who have made transactions with a share count greater than 100.", "To do this, we will select the investor details from the Investors table.", "We will join the Investors table with the Transactions table on the investor_id to link investors with their transactions.", "We will apply a condition to filter transactions where the share_count is greater than 100.", "Finally, we will use DISTINCT to ensure that each investor is listed only once, even if they have multiple qualifying transactions."], "pred_sql": "SELECT DISTINCT Investors.investor_id, Investors.Investor_details \nFROM Investors \nJOIN Transactions ON Investors.investor_id = Transactions.investor_id \nWHERE Transactions.share_count > 100;", "gold_sql": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100", "source_tables": ["transactions", "investors"]}
{"sample_id": 5859, "db_id": "tracking_share_transactions", "question": "How many distinct transaction types are used in the transactions?", "rationale": ["Identify the relevant table: The Transactions table contains the transaction types.", "Determine the column of interest: The transaction_type_code column holds the codes for transaction types.", "Use the COUNT function to count distinct values: We need to count how many unique transaction types exist.", "Construct the SQL query: The query will select the count of distinct transaction_type_code from the Transactions table."], "pred_sql": "SELECT COUNT(DISTINCT transaction_type_code) AS distinct_transaction_types FROM Transactions;", "gold_sql": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS", "source_tables": ["transactions"]}
{"sample_id": 5860, "db_id": "tracking_share_transactions", "question": "Return the lot details and investor ids.", "rationale": ["Identify the tables involved: We need to retrieve data from the Lots table.", "Determine the columns needed: The user requested 'lot details' and 'investor ids', which correspond to 'lot_details' and 'investor_id' in the Lots table.", "Construct the SQL SELECT statement: We will select 'lot_details' and 'investor_id' from the Lots table."], "pred_sql": "SELECT Lots.lot_details, Lots.investor_id FROM Lots;", "gold_sql": "SELECT lot_details ,  investor_id FROM LOTS", "source_tables": ["lots"]}
{"sample_id": 5861, "db_id": "tracking_share_transactions", "question": "Return the lot details of lots that belong to investors with details \"l\"?", "rationale": ["Identify the relevant tables: Lots and Investors.", "Determine the relationship between the tables: Lots are linked to Investors through the investor_id.", "Select the required column: lot_details from the Lots table.", "Filter the results based on the condition that Investor_details in the Investors table equals 'l'.", "Construct the SQL query using a JOIN to combine the two tables and apply the WHERE clause for filtering."], "pred_sql": "SELECT Lots.lot_details FROM Lots JOIN Investors ON Lots.investor_id = Investors.investor_id WHERE Investors.Investor_details = 'l';", "gold_sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  'l'", "source_tables": ["lots", "investors"]}
{"sample_id": 5862, "db_id": "tracking_share_transactions", "question": "What are the purchase details of transactions with amount bigger than 10000?", "rationale": ["Identify the relevant tables: Transactions and Purchases.", "Determine the relationship between Transactions and Purchases: Transactions.transaction_id is linked to Purchases.purchase_transaction_id.", "Specify the condition: We want transactions where the amount_of_transaction is greater than 10000.", "Construct the SQL query to select purchase_details from Purchases where the condition on Transactions is met."], "pred_sql": "SELECT Purchases.purchase_details FROM Transactions JOIN Purchases ON Transactions.transaction_id = Purchases.purchase_transaction_id WHERE Transactions.amount_of_transaction > 10000;", "gold_sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000", "source_tables": ["purchases", "transactions"]}
{"sample_id": 5863, "db_id": "tracking_share_transactions", "question": "What are the sale details and dates of transactions with amount smaller than 3000?", "rationale": ["Identify the required information: sale details and transaction dates for transactions with amounts smaller than 3000.", "Determine the relevant tables: Sales for sale details and Transactions for transaction dates and amounts.", "Establish the relationship between the tables: Sales is linked to Transactions through the sales_transaction_id.", "Construct the SQL SELECT statement to retrieve sales_details from Sales and date_of_transaction from Transactions.", "Add a WHERE clause to filter transactions where amount_of_transaction is less than 3000."], "pred_sql": "SELECT Sales.sales_details, Transactions.date_of_transaction \nFROM Transactions \nJOIN Sales ON Transactions.transaction_id = Sales.sales_transaction_id \nWHERE Transactions.amount_of_transaction < 3000;", "gold_sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000", "source_tables": ["sales", "transactions"]}
{"sample_id": 5864, "db_id": "tracking_share_transactions", "question": "What are the lot details of lots associated with transactions with share count smaller than 50?", "rationale": ["Identify the relevant tables: Lots, Transactions, and Transactions_Lots.", "We need to retrieve lot details, so we will select the 'lot_details' column from the Lots table.", "To find lots associated with transactions, we will join the Lots table with the Transactions_Lots table on 'lot_id'.", "Next, we will join the Transactions table to filter transactions based on the share count.", "We will apply a WHERE clause to filter transactions where 'share_count' is less than 50."], "pred_sql": "SELECT Lots.lot_details \nFROM Lots \nJOIN Transactions_Lots ON Lots.lot_id = Transactions_Lots.lot_id \nJOIN Transactions ON Transactions_Lots.transaction_id = Transactions.transaction_id \nWHERE Transactions.share_count < 50;", "gold_sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50", "source_tables": ["lots", "transactions_lots", "transactions"]}
{"sample_id": 5865, "db_id": "tracking_share_transactions", "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?", "rationale": ["Identify the relevant tables: Lots, Transactions, and Transactions_Lots are needed to get lot details associated with transactions.", "We need to join Lots with Transactions_Lots to link lots to their respective transactions.", "Next, we join Transactions to Transactions_Lots to access transaction details, specifically the share count and transaction type code.", "We apply a filter to select only those transactions where the share count is greater than 100.", "Additionally, we filter for transactions with a type code of 'PUR'.", "Finally, we select the lot details from the Lots table based on the filtered transactions."], "pred_sql": "SELECT Lots.lot_details \nFROM Lots \nJOIN Transactions_Lots ON Lots.lot_id = Transactions_Lots.lot_id \nJOIN Transactions ON Transactions_Lots.transaction_id = Transactions.transaction_id \nWHERE Transactions.share_count > 100 \nAND Transactions.transaction_type_code = 'PUR';", "gold_sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  'PUR'", "source_tables": ["lots", "transactions_lots", "transactions"]}
{"sample_id": 5866, "db_id": "tracking_share_transactions", "question": "Show the average transaction amount for different transaction types.", "rationale": ["Identify the tables involved: Transactions and Ref_Transaction_Types.", "We need to calculate the average transaction amount, so we will use the AVG() function on the amount_of_transaction column from the Transactions table.", "To categorize the average amounts by transaction type, we will join the Transactions table with the Ref_Transaction_Types table on the transaction_type_code.", "We will select the transaction_type_description from the Ref_Transaction_Types table and the average of the amount_of_transaction from the Transactions table.", "Finally, we will group the results by transaction_type_description to get the average for each type."], "pred_sql": "SELECT rt.transaction_type_description, AVG(t.amount_of_transaction) AS average_transaction_amount\nFROM Transactions t\nJOIN Ref_Transaction_Types rt ON t.transaction_type_code = rt.transaction_type_code\nGROUP BY rt.transaction_type_description;", "gold_sql": "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code", "source_tables": ["transactions"]}
{"sample_id": 5867, "db_id": "tracking_share_transactions", "question": "Show the maximum and minimum share count of different transaction types.", "rationale": ["Identify the relevant tables: Transactions and Ref_Transaction_Types.", "We need to retrieve the maximum and minimum share counts, so we will use the MAX() and MIN() aggregate functions on the share_count column from the Transactions table.", "To categorize the share counts by transaction type, we will join the Transactions table with the Ref_Transaction_Types table on the transaction_type_code.", "We will select the transaction_type_description from the Ref_Transaction_Types table along with the maximum and minimum share counts.", "Finally, we will group the results by transaction_type_description to get the desired output for each transaction type."], "pred_sql": "SELECT rt.transaction_type_description, MAX(t.share_count) AS max_share_count, MIN(t.share_count) AS min_share_count\nFROM Transactions t\nJOIN Ref_Transaction_Types rt ON t.transaction_type_code = rt.transaction_type_code\nGROUP BY rt.transaction_type_description;", "gold_sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code", "source_tables": ["transactions"]}
{"sample_id": 5868, "db_id": "tracking_share_transactions", "question": "Show the average share count of transactions for different investors.", "rationale": ["Identify the relevant table: The Transactions table contains the share_count and investor_id.", "Determine the required calculation: We need to calculate the average share count, which can be done using the AVG() function.", "Group the results by investor: To get the average share count for each investor, we will use the GROUP BY clause on investor_id.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT investor_id, AVG(share_count) AS average_share_count FROM Transactions GROUP BY investor_id;", "gold_sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id", "source_tables": ["transactions"]}
{"sample_id": 5869, "db_id": "tracking_share_transactions", "question": "Show the average share count of transactions each each investor, ordered by average share count.", "rationale": ["Identify the relevant table: The Transactions table contains the share_count and investor_id needed for the query.", "Calculate the average share count: Use the AVG() function to compute the average of share_count for each investor.", "Group the results by investor: Use GROUP BY investor_id to ensure the average is calculated for each investor individually.", "Order the results: Use ORDER BY to sort the results based on the average share count in ascending order."], "pred_sql": "SELECT investor_id, AVG(share_count) AS average_share_count\nFROM Transactions\nGROUP BY investor_id\nORDER BY average_share_count;", "gold_sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)", "source_tables": ["transactions"]}
{"sample_id": 5870, "db_id": "tracking_share_transactions", "question": "Show the average amount of transactions for different investors.", "rationale": ["Identify the relevant table: The Transactions table contains the transaction amounts and investor IDs.", "Select the investor_id and calculate the average of the amount_of_transaction: Use the AVG() function to compute the average transaction amount for each investor.", "Group the results by investor_id: This is necessary to get the average amount for each individual investor."], "pred_sql": "SELECT investor_id, AVG(amount_of_transaction) AS average_transaction_amount\nFROM Transactions\nGROUP BY investor_id;", "gold_sql": "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id", "source_tables": ["transactions"]}
{"sample_id": 5871, "db_id": "tracking_share_transactions", "question": "Show the average amount of transactions for different lots.", "rationale": ["Identify the relevant tables: Transactions, Lots, and Transactions_Lots are needed to calculate the average transaction amount per lot.", "Determine the relationship between the tables: Transactions are linked to Lots through Transactions_Lots, which connects transactions to lots.", "Select the necessary columns: We need the lot_id from Lots and the average of amount_of_transaction from Transactions.", "Use the AVG() function to calculate the average transaction amount for each lot.", "Group the results by lot_id to get the average for each lot."], "pred_sql": "SELECT Lots.lot_id, AVG(Transactions.amount_of_transaction) AS average_transaction_amount\nFROM Transactions\nJOIN Transactions_Lots ON Transactions.transaction_id = Transactions_Lots.transaction_id\nJOIN Lots ON Transactions_Lots.lot_id = Lots.lot_id\nGROUP BY Lots.lot_id;", "gold_sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id", "source_tables": ["transactions_lots", "transactions"]}
{"sample_id": 5872, "db_id": "tracking_share_transactions", "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions.", "rationale": ["Identify the tables involved: Transactions, Transactions_Lots, and Lots are relevant for this query.", "We need to calculate the average amount of transactions, so we will use the AVG() function on the amount_of_transaction column from the Transactions table.", "To link transactions to lots, we will join the Transactions table with the Transactions_Lots table on transaction_id, and then join the Transactions_Lots table with the Lots table on lot_id.", "We will group the results by Lots.lot_id to get the average amount for each lot.", "Finally, we will order the results by the calculated average amount of transactions in ascending order."], "pred_sql": "SELECT Lots.lot_id, AVG(Transactions.amount_of_transaction) AS average_transaction_amount\nFROM Transactions\nJOIN Transactions_Lots ON Transactions.transaction_id = Transactions_Lots.transaction_id\nJOIN Lots ON Transactions_Lots.lot_id = Lots.lot_id\nGROUP BY Lots.lot_id\nORDER BY average_transaction_amount;", "gold_sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)", "source_tables": ["transactions_lots", "transactions"]}
{"sample_id": 5873, "db_id": "tracking_share_transactions", "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.", "rationale": ["Identify the relevant tables: Investors, Transactions, and Ref_Transaction_Types.", "We need to count the number of transactions for each investor, so we will use the COUNT() function.", "Join the Investors table with the Transactions table on the investor_id to link investors with their transactions.", "Join the Transactions table with the Ref_Transaction_Types table on the transaction_type_code to filter by transaction type.", "Filter the results to include only those transactions where the transaction type description is 'SALE'.", "Group the results by investor_id to get the count of transactions per investor.", "Use the HAVING clause to filter out investors with a transaction count of 0."], "pred_sql": "SELECT Investors.investor_id, COUNT(Transactions.transaction_id) AS transaction_count\nFROM Investors\nJOIN Transactions ON Investors.investor_id = Transactions.investor_id\nJOIN Ref_Transaction_Types ON Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code\nWHERE Ref_Transaction_Types.transaction_type_description = 'SALE'\nGROUP BY Investors.investor_id\nHAVING transaction_count > 0;", "gold_sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  'SALE' GROUP BY investor_id", "source_tables": ["transactions"]}
{"sample_id": 5874, "db_id": "tracking_share_transactions", "question": "Show the number of transactions for different investors.", "rationale": ["Identify the relevant table: The Transactions table contains the transaction records linked to investors.", "Determine the required information: We need to count the number of transactions for each investor.", "Group the results: Use GROUP BY to aggregate the transaction counts by investor_id.", "Select the investor_id and the count of transactions: Use COUNT() function to get the number of transactions for each investor."], "pred_sql": "SELECT investor_id, COUNT(transaction_id) AS transaction_count FROM Transactions GROUP BY investor_id;", "gold_sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id", "source_tables": ["transactions"]}
{"sample_id": 5875, "db_id": "tracking_share_transactions", "question": "Show the transaction type code that occurs the fewest times.", "rationale": ["Identify the relevant table: The Transactions table contains the transaction_type_code.", "Group the results by transaction_type_code to count occurrences: Use GROUP BY to aggregate the data based on transaction_type_code.", "Count the occurrences of each transaction type code: Use COUNT(*) to count how many times each transaction_type_code appears.", "Order the results by the count in ascending order: Use ORDER BY COUNT(*) ASC to sort the transaction types from least to most frequent.", "Limit the results to the first entry: Use LIMIT 1 to get only the transaction type code that occurs the fewest times."], "pred_sql": "SELECT transaction_type_code FROM Transactions GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1;", "gold_sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["transactions"]}
{"sample_id": 5876, "db_id": "tracking_share_transactions", "question": "Show the transaction type code that occurs the most frequently.", "rationale": ["Identify the relevant table: The Transactions table contains the transaction_type_code.", "Count the occurrences of each transaction_type_code: Use COUNT(*) to count how many times each code appears.", "Group the results by transaction_type_code: This is done using GROUP BY to aggregate the counts for each code.", "Order the results by frequency: Use ORDER BY frequency DESC to sort the counts in descending order, so the most frequent code appears first.", "Limit the results to the top one: Use LIMIT 1 to get only the most frequently occurring transaction type code."], "pred_sql": "SELECT transaction_type_code, COUNT(*) as frequency\nFROM Transactions\nGROUP BY transaction_type_code\nORDER BY frequency DESC\nLIMIT 1;", "gold_sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["transactions"]}
{"sample_id": 5877, "db_id": "tracking_share_transactions", "question": "Show the description of the transaction type that occurs most frequently.", "rationale": ["Identify the table that contains the transaction type descriptions, which is 'Ref_Transaction_Types'.", "Determine the relationship between the 'Transactions' table and the 'Ref_Transaction_Types' table through the 'transaction_type_code'.", "To find the most frequently occurring transaction type, we need to count the occurrences of each 'transaction_type_code' in the 'Transactions' table.", "Group the results by 'transaction_type_code' and order them by the count in descending order to get the most frequent one at the top.", "Limit the results to 1 to get only the most frequent transaction type code.", "Use the most frequent transaction type code to select the corresponding description from the 'Ref_Transaction_Types' table."], "pred_sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = (SELECT transaction_type_code FROM Transactions GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1)", "gold_sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["transactions", "ref_transaction_types"]}
{"sample_id": 5878, "db_id": "tracking_share_transactions", "question": "Show the id and details of the investor that has the largest number of transactions.", "rationale": ["We need to find the investor with the largest number of transactions.", "To do this, we will join the Investors table with the Transactions table on the investor_id column.", "Next, we will group the results by investor_id and Investor_details to aggregate the transaction counts for each investor.", "We will use the COUNT function to count the number of transactions for each investor.", "To find the investor with the largest number of transactions, we will order the results in descending order based on the count of transactions.", "Finally, we will limit the results to only one record to get the investor with the maximum transactions."], "pred_sql": "SELECT Investors.investor_id, Investors.Investor_details \nFROM Investors \nJOIN Transactions ON Investors.investor_id = Transactions.investor_id \nGROUP BY Investors.investor_id, Investors.Investor_details \nORDER BY COUNT(Transactions.transaction_id) DESC \nLIMIT 1;", "gold_sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["transactions", "investors"]}
{"sample_id": 5879, "db_id": "tracking_share_transactions", "question": "Show the id and details for the investors who have the top 3 number of transactions.", "rationale": ["Identify the relevant tables: Investors and Transactions.", "We need to join these tables on the investor_id to link investors with their transactions.", "We will group the results by investor_id to count the number of transactions for each investor.", "We will order the results in descending order based on the count of transactions to get the top investors.", "Finally, we will limit the results to the top 3 investors."], "pred_sql": "SELECT Investors.investor_id, Investors.Investor_details \nFROM Investors \nJOIN Transactions ON Investors.investor_id = Transactions.investor_id \nGROUP BY Investors.investor_id \nORDER BY COUNT(Transactions.transaction_id) DESC \nLIMIT 3;", "gold_sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3", "source_tables": ["transactions", "investors"]}
{"sample_id": 5880, "db_id": "tracking_share_transactions", "question": "Show the ids of the investors who have at least two transactions.", "rationale": ["Identify the relevant table: Transactions, as it contains the investor_id and transaction_id.", "We need to group the results by investor_id to count the number of transactions for each investor.", "Use the COUNT function to count the number of transaction_id for each investor.", "Apply the HAVING clause to filter the groups, keeping only those with a count of at least 2 transactions."], "pred_sql": "SELECT investor_id FROM Transactions GROUP BY investor_id HAVING COUNT(transaction_id) >= 2;", "gold_sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "source_tables": ["transactions", "investors"]}
{"sample_id": 5881, "db_id": "tracking_share_transactions", "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".", "rationale": ["We need to select the investor IDs and their details from the Investors table.", "To find investors with at least two transactions of type 'SALE', we need to join the Investors table with the Transactions table on the investor_id.", "We filter the transactions to only include those with the transaction_type_code 'SALE'.", "We group the results by investor_id to count the number of transactions for each investor.", "Finally, we use the HAVING clause to filter groups that have two or more transactions."], "pred_sql": "SELECT Investors.investor_id, Investors.Investor_details \nFROM Investors \nJOIN Transactions ON Investors.investor_id = Transactions.investor_id \nWHERE Transactions.transaction_type_code = 'SALE' \nGROUP BY Investors.investor_id \nHAVING COUNT(Transactions.transaction_id) >= 2;", "gold_sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  'SALE' GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "source_tables": ["transactions", "investors"]}
{"sample_id": 5882, "db_id": "tracking_share_transactions", "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?", "rationale": ["Identify the relevant table: Transactions, as it contains the date_of_transaction, share_count, and amount_of_transaction.", "Determine the conditions for filtering: transactions with a share count of at least 100 or an amount greater than 100.", "Construct the SQL SELECT statement to retrieve the date_of_transaction from the Transactions table where the specified conditions are met."], "pred_sql": "SELECT date_of_transaction FROM Transactions WHERE share_count >= 100 OR amount_of_transaction > 100;", "gold_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100", "source_tables": ["transactions"]}
{"sample_id": 5883, "db_id": "tracking_share_transactions", "question": "What are the details of all sales and purchases?", "rationale": ["Identify the tables that contain sales and purchases data, which are the 'Sales' and 'Purchases' tables.", "To get the details of all sales, we will select the relevant columns from the 'Sales' table.", "To get the details of all purchases, we will select the relevant columns from the 'Purchases' table.", "Since we want to see all sales and purchases, we will use a LEFT JOIN to combine the 'Sales' and 'Purchases' tables through the 'Transactions' table, which links them via the 'transaction_id'.", "The final SQL query will select the sales transaction ID and details along with the purchase transaction ID and details."], "pred_sql": "SELECT Sales.sales_transaction_id, Sales.sales_details, Purchases.purchase_transaction_id, Purchases.purchase_details \nFROM Sales \nLEFT JOIN Transactions ON Sales.sales_transaction_id = Transactions.transaction_id \nLEFT JOIN Purchases ON Transactions.transaction_id = Purchases.purchase_transaction_id;", "gold_sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases", "source_tables": ["sales", "purchases"]}
{"sample_id": 5884, "db_id": "tracking_share_transactions", "question": "What are the details of the lots which are not used in any transactions?", "rationale": ["Identify the Lots table as the source of information for lot details.", "Determine that we need to find lots that are not used in any transactions.", "To find lots not used in transactions, we can use a subquery to select all lot_ids from the Transactions_Lots table.", "Use the NOT IN clause to filter out those lot_ids from the Lots table.", "Construct the final SQL query to select all columns from the Lots table where the lot_id is not in the list of lot_ids from the Transactions_Lots subquery."], "pred_sql": "SELECT * FROM Lots WHERE lot_id NOT IN (SELECT lot_id FROM Transactions_Lots)", "gold_sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id", "source_tables": ["lots", "transactions_lots"]}
{"sample_id": 5885, "db_id": "cre_Theme_park", "question": "How many available hotels are there in total?", "rationale": ["Identify the table that contains information about hotels, which is the 'Hotels' table.", "To find the total number of available hotels, we need to count the entries in the 'Hotels' table.", "Use the COUNT() function to count all rows in the 'Hotels' table.", "The final SQL query selects the count of hotels and labels it as 'total_available_hotels'."], "pred_sql": "SELECT COUNT(*) AS total_available_hotels FROM Hotels;", "gold_sql": "SELECT count(*) FROM HOTELS", "source_tables": ["hotels"]}
{"sample_id": 5886, "db_id": "cre_Theme_park", "question": "Find the total number of available hotels.", "rationale": ["Identify the table that contains hotel information, which is the 'Hotels' table.", "To find the total number of available hotels, we need to count the entries in the 'Hotels' table.", "Use the COUNT() function to count all rows in the 'Hotels' table.", "Select the count with an alias 'total_hotels' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_hotels FROM Hotels;", "gold_sql": "SELECT count(*) FROM HOTELS", "source_tables": ["hotels"]}
{"sample_id": 5887, "db_id": "cre_Theme_park", "question": "What are the price ranges of hotels?", "rationale": ["Identify the relevant table: The query is about hotels, so we will use the 'Hotels' table.", "Determine the required column: We need the 'price_range' column to answer the question about price ranges of hotels.", "Use DISTINCT to avoid duplicate price ranges: Since we want unique price ranges, we will use the DISTINCT keyword in our SQL query.", "Construct the SQL query: The final SQL query will select distinct price ranges from the Hotels table."], "pred_sql": "SELECT DISTINCT price_range FROM Hotels;", "gold_sql": "SELECT price_range FROM HOTELS", "source_tables": ["hotels"]}
{"sample_id": 5888, "db_id": "cre_Theme_park", "question": "Tell me the price ranges for all the hotels.", "rationale": ["Identify the table that contains hotel information, which is the 'Hotels' table.", "Determine the relevant column that contains the price range information, which is 'price_range'.", "Since we want to list all unique price ranges, we will use the DISTINCT keyword to avoid duplicates.", "Construct the SQL query to select distinct price ranges from the Hotels table."], "pred_sql": "SELECT DISTINCT price_range FROM Hotels;", "gold_sql": "SELECT price_range FROM HOTELS", "source_tables": ["hotels"]}
{"sample_id": 5889, "db_id": "cre_Theme_park", "question": "Show all distinct location names.", "rationale": ["Identify the table that contains location names, which is the 'Locations' table.", "To get distinct location names, use the SELECT statement with the DISTINCT keyword.", "Specify the column 'Location_Name' to retrieve the unique names from the 'Locations' table."], "pred_sql": "SELECT DISTINCT Location_Name FROM Locations;", "gold_sql": "SELECT DISTINCT Location_Name FROM LOCATIONS", "source_tables": ["locations"]}
{"sample_id": 5890, "db_id": "cre_Theme_park", "question": "What are the distinct location names?", "rationale": ["Identify the table that contains location names, which is the 'Locations' table.", "To get distinct location names, we need to use the SELECT statement with the DISTINCT keyword.", "The specific column we want to retrieve is 'Location_Name'.", "Combine these elements to form the SQL query: SELECT DISTINCT Location_Name FROM Locations."], "pred_sql": "SELECT DISTINCT Location_Name FROM Locations;", "gold_sql": "SELECT DISTINCT Location_Name FROM LOCATIONS", "source_tables": ["locations"]}
{"sample_id": 5891, "db_id": "cre_Theme_park", "question": "Show the names and details of all the staff members.", "rationale": ["Identify the table that contains staff member information, which is the 'Staff' table.", "Determine the columns needed for the output, which are 'Name' and 'Other_Details'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Staff' table."], "pred_sql": "SELECT Name, Other_Details FROM Staff;", "gold_sql": "SELECT Name ,  Other_Details FROM Staff", "source_tables": ["staff"]}
{"sample_id": 5892, "db_id": "cre_Theme_park", "question": "What is the name and detail of each staff member?", "rationale": ["Identify the table that contains staff member information, which is the 'Staff' table.", "Determine the columns needed for the output, which are 'Name' and 'Other_Details'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Staff' table."], "pred_sql": "SELECT Name, Other_Details FROM Staff;", "gold_sql": "SELECT Name ,  Other_Details FROM Staff", "source_tables": ["staff"]}
{"sample_id": 5893, "db_id": "cre_Theme_park", "question": "Show details of all visitors.", "rationale": ["Identify the table that contains visitor information, which is the 'Visitors' table.", "Determine the requirement to show details of all visitors, which implies a SELECT statement with all columns.", "Construct the SQL query to select all columns from the 'Visitors' table."], "pred_sql": "SELECT * FROM Visitors;", "gold_sql": "SELECT Tourist_Details FROM VISITORS", "source_tables": ["visitors"]}
{"sample_id": 5894, "db_id": "cre_Theme_park", "question": "What is the detail of each visitor?", "rationale": ["Identify the table that contains visitor details, which is the 'Visitors' table.", "Select all columns from the 'Visitors' table to get the details of each visitor.", "Construct the SQL query using the SELECT statement to retrieve all records from the 'Visitors' table."], "pred_sql": "SELECT * FROM Visitors;", "gold_sql": "SELECT Tourist_Details FROM VISITORS", "source_tables": ["visitors"]}
{"sample_id": 5895, "db_id": "cre_Theme_park", "question": "Show the price ranges of hotels with 5 star ratings.", "rationale": ["Identify the table that contains hotel information, which is the 'Hotels' table.", "Determine the relevant column for price ranges, which is 'price_range'.", "Identify the condition needed to filter for 5-star hotels, which is the 'star_rating_code' being equal to '5'.", "Construct the SQL query to select the 'price_range' from the 'Hotels' table where the 'star_rating_code' is '5'."], "pred_sql": "SELECT price_range FROM Hotels WHERE star_rating_code = '5';", "gold_sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  '5'", "source_tables": ["hotels"]}
{"sample_id": 5896, "db_id": "cre_Theme_park", "question": "What are the price ranges of five star hotels?", "rationale": ["Identify the table that contains hotel information, which is the 'Hotels' table.", "Determine the relevant column for star ratings, which is 'star_rating_code'.", "Specify that we are interested in five-star hotels, so we filter for 'star_rating_code' = '5'.", "We want to know the price ranges, so we select the 'price_range' column.", "Use DISTINCT to ensure we get unique price ranges for five-star hotels."], "pred_sql": "SELECT DISTINCT price_range FROM Hotels WHERE star_rating_code = '5'", "gold_sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  '5'", "source_tables": ["hotels"]}
{"sample_id": 5897, "db_id": "cre_Theme_park", "question": "Show the average price range of hotels that have 5 star ratings and allow pets.", "rationale": ["Identify the table that contains hotel information, which is the 'Hotels' table.", "Determine the columns needed: 'price_range' for the average price, 'star_rating_code' to filter for 5-star hotels, and 'pets_allowed_yn' to check if pets are allowed.", "Construct the SQL query to select the average of 'price_range' from the 'Hotels' table.", "Add a WHERE clause to filter the results to only include hotels with a 'star_rating_code' of '5' and 'pets_allowed_yn' equal to 'Yes'."], "pred_sql": "SELECT AVG(price_range) AS average_price_range FROM Hotels WHERE star_rating_code = '5' AND pets_allowed_yn = 'Yes';", "gold_sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  '5' AND pets_allowed_yn  =  1", "source_tables": ["hotels"]}
{"sample_id": 5898, "db_id": "cre_Theme_park", "question": "What is the average price range of five star hotels that allow pets?", "rationale": ["Identify the relevant table: Hotels, as it contains information about hotel star ratings and pet policies.", "Determine the columns needed: We need the 'price_range' column to calculate the average price range.", "Filter the hotels: We need to filter for hotels with a star rating of '5' and where pets are allowed (pets_allowed_yn = 'Yes').", "Use the AVG() function to calculate the average price range of the filtered hotels."], "pred_sql": "SELECT AVG(price_range) AS average_price_range FROM Hotels WHERE star_rating_code = '5' AND pets_allowed_yn = 'Yes';", "gold_sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  '5' AND pets_allowed_yn  =  1", "source_tables": ["hotels"]}
{"sample_id": 5899, "db_id": "cre_Theme_park", "question": "What is the address of the location \"UK Gallery\"?", "rationale": ["Identify the table that contains the address information, which is the 'Locations' table.", "Determine the column that holds the address, which is 'Address'.", "Identify the condition needed to filter the results, which is the location name 'UK Gallery'.", "Construct the SQL query to select the address from the 'Locations' table where the 'Location_Name' matches 'UK Gallery'."], "pred_sql": "SELECT Address FROM Locations WHERE Location_Name = 'UK Gallery';", "gold_sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  'UK Gallery'", "source_tables": ["locations"]}
{"sample_id": 5900, "db_id": "cre_Theme_park", "question": "Find the address of the location named \"UK Gallery\".", "rationale": ["Identify the table that contains location information, which is the 'Locations' table.", "Determine the column that holds the name of the location, which is 'Location_Name'.", "Identify the column that contains the address of the location, which is 'Address'.", "Construct the SQL query to select the 'Address' from the 'Locations' table where 'Location_Name' matches 'UK Gallery'."], "pred_sql": "SELECT Address FROM Locations WHERE Location_Name = 'UK Gallery';", "gold_sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  'UK Gallery'", "source_tables": ["locations"]}
{"sample_id": 5901, "db_id": "cre_Theme_park", "question": "What is the detail of the location UK Gallery?", "rationale": ["Identify the table that contains location details, which is the 'Locations' table.", "Determine the specific column that holds the name of the location, which is 'Location_Name'.", "Formulate a SQL query to select all columns from the 'Locations' table where the 'Location_Name' matches 'UK Gallery'."], "pred_sql": "SELECT * FROM Locations WHERE Location_Name = 'UK Gallery';", "gold_sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  'UK Gallery'", "source_tables": ["locations"]}
{"sample_id": 5902, "db_id": "cre_Theme_park", "question": "Return the detail of the location named \"UK Gallery\".", "rationale": ["Identify the table that contains location details, which is the 'Locations' table.", "Determine the specific column that holds the name of the location, which is 'Location_Name'.", "Formulate a SQL query to select all columns from the 'Locations' table where the 'Location_Name' matches 'UK Gallery'."], "pred_sql": "SELECT * FROM Locations WHERE Location_Name = 'UK Gallery';", "gold_sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  'UK Gallery'", "source_tables": ["locations"]}
{"sample_id": 5903, "db_id": "cre_Theme_park", "question": "Which location names contain the word \"film\"?", "rationale": ["Identify the table that contains location names, which is the 'Locations' table.", "Determine the column that holds the names of the locations, which is 'Location_Name'.", "Formulate a query to select 'Location_Name' from the 'Locations' table.", "Apply a condition to filter the results where 'Location_Name' contains the word 'film'.", "Use the SQL LIKE operator with wildcards to match any location names that include 'film' anywhere in the name."], "pred_sql": "SELECT Location_Name FROM Locations WHERE Location_Name LIKE '%film%';", "gold_sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%'", "source_tables": ["locations"]}
{"sample_id": 5904, "db_id": "cre_Theme_park", "question": "Find all the locations whose names contain the word \"film\".", "rationale": ["Identify the table that contains location names, which is the 'Locations' table.", "Determine the column that holds the names of the locations, which is 'Location_Name'.", "Formulate a SQL query to select all columns from the 'Locations' table where the 'Location_Name' contains the word 'film'.", "Use the SQL LIKE operator with wildcards '%' to match any location names that include 'film' anywhere in the name."], "pred_sql": "SELECT * FROM Locations WHERE Location_Name LIKE '%film%';", "gold_sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%'", "source_tables": ["locations"]}
{"sample_id": 5905, "db_id": "cre_Theme_park", "question": "How many distinct names are associated with all the photos?", "rationale": ["Identify the table that contains the relevant data: the Photos table.", "Determine the specific column that holds the names of the photos: the Name column.", "Use the COUNT function to count the distinct names in the Name column.", "Construct the SQL query to select the count of distinct names from the Photos table."], "pred_sql": "SELECT COUNT(DISTINCT Name) AS distinct_photo_names_count FROM Photos;", "gold_sql": "SELECT count(DISTINCT Name) FROM PHOTOS", "source_tables": ["photos"]}
{"sample_id": 5906, "db_id": "cre_Theme_park", "question": "Count the number of distinct names associated with the photos.", "rationale": ["Identify the table that contains the relevant data: the 'Photos' table contains the 'Name' column.", "Determine the requirement: we need to count distinct names associated with the photos.", "Use the COUNT function to count the distinct names in the 'Name' column.", "Construct the SQL query to select the count of distinct names from the 'Photos' table."], "pred_sql": "SELECT COUNT(DISTINCT Name) AS distinct_photo_names_count FROM Photos;", "gold_sql": "SELECT count(DISTINCT Name) FROM PHOTOS", "source_tables": ["photos"]}
{"sample_id": 5907, "db_id": "cre_Theme_park", "question": "What are the distinct visit dates?", "rationale": ["Identify the table that contains visit dates, which is the 'Visits' table.", "Use the SELECT statement to specify that we want to retrieve data from the 'Visit_Date' column.", "To ensure that we only get unique dates, use the DISTINCT keyword in the query."], "pred_sql": "SELECT DISTINCT Visit_Date FROM Visits;", "gold_sql": "SELECT DISTINCT Visit_Date FROM VISITS", "source_tables": ["visits"]}
{"sample_id": 5908, "db_id": "cre_Theme_park", "question": "Find all the distinct visit dates.", "rationale": ["Identify the table that contains visit dates, which is the 'Visits' table.", "Use the SELECT statement to specify that we want to retrieve data from the 'Visit_Date' column.", "To ensure that we only get unique dates, use the DISTINCT keyword before the column name."], "pred_sql": "SELECT DISTINCT Visit_Date FROM Visits;", "gold_sql": "SELECT DISTINCT Visit_Date FROM VISITS", "source_tables": ["visits"]}
{"sample_id": 5909, "db_id": "cre_Theme_park", "question": "What are the names of the tourist attractions that can be accessed by bus?", "rationale": ["Identify the relevant table: Tourist_Attractions contains the information about tourist attractions.", "Determine the required column: We need the 'Name' of the tourist attractions.", "Filter the attractions based on accessibility: We need to check the 'How_to_Get_There' column for mentions of 'bus'.", "Construct the SQL query to select the 'Name' from the Tourist_Attractions table where 'How_to_Get_There' contains 'bus'."], "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%';", "gold_sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  'bus'", "source_tables": ["tourist_attractions"]}
{"sample_id": 5910, "db_id": "cre_Theme_park", "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.", "rationale": ["Identify the relevant table: Tourist_Attractions contains information about tourist attractions.", "Determine the required information: We need the names of the attractions, which is in the 'Name' column.", "Filter the attractions based on the transportation method: We are looking for attractions that can be accessed by bus, so we will check the 'How_to_Get_There' column for the presence of the word 'bus'.", "Construct the SQL query using a SELECT statement to retrieve the 'Name' column from the Tourist_Attractions table where 'How_to_Get_There' contains 'bus'."], "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%';", "gold_sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  'bus'", "source_tables": ["tourist_attractions"]}
{"sample_id": 5911, "db_id": "cre_Theme_park", "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?", "rationale": ["Identify the relevant table: The query is about tourist attractions, so we will use the Tourist_Attractions table.", "Determine the required columns: We need the names and opening hours of the attractions, which correspond to the 'Name' and 'Opening_Hours' columns in the Tourist_Attractions table.", "Filter the attractions based on accessibility: The query specifies attractions that can be accessed by bus or walk, so we will filter the results using the 'How_to_Get_There' column.", "Construct the SQL SELECT statement: We will select the 'Name' and 'Opening_Hours' columns from the Tourist_Attractions table where the 'How_to_Get_There' column contains either 'bus' or 'walk'."], "pred_sql": "SELECT Name, Opening_Hours FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR How_to_Get_There LIKE '%walk%';", "gold_sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  'bus' OR How_to_Get_There  =  'walk'", "source_tables": ["tourist_attractions"]}
{"sample_id": 5912, "db_id": "cre_Theme_park", "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.", "rationale": ["Identify the relevant table: Tourist_Attractions contains the information about tourist attractions including their names and opening hours.", "Determine the columns needed: We need the 'Name' and 'Opening_Hours' columns from the Tourist_Attractions table.", "Identify the condition for filtering: We want attractions that can be reached by bus or walking, which is specified in the 'How_to_Get_There' column.", "Construct the SQL query: Use a SELECT statement to retrieve the required columns and a WHERE clause to filter based on the conditions specified."], "pred_sql": "SELECT Name, Opening_Hours FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR How_to_Get_There LIKE '%walk%';", "gold_sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  'bus' OR How_to_Get_There  =  'walk'", "source_tables": ["tourist_attractions"]}
{"sample_id": 5913, "db_id": "cre_Theme_park", "question": "What are the star rating descriptions of the hotels with price above 10000?", "rationale": ["Identify the relevant tables: We need data from the 'Hotels' table for price information and the 'Ref_Hotel_Star_Ratings' table for star rating descriptions.", "Determine the columns needed: We need 'star_rating_description' from 'Ref_Hotel_Star_Ratings' and we will filter based on the 'price_range' from 'Hotels'.", "Establish the relationship between tables: The 'star_rating_code' in 'Hotels' links to 'star_rating_code' in 'Ref_Hotel_Star_Ratings'.", "Formulate the SQL query: Use a SELECT statement to get the star rating descriptions, join the two tables on the star rating code, and apply a WHERE clause to filter hotels with a price above 10000."], "pred_sql": "SELECT Ref_Hotel_Star_Ratings.star_rating_description \nFROM Hotels \nJOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code \nWHERE Hotels.price_range > '10000';", "gold_sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000", "source_tables": ["ref_hotel_star_ratings", "hotels"]}
{"sample_id": 5914, "db_id": "cre_Theme_park", "question": "Give me the star rating descriptions of the hotels that cost more than 10000.", "rationale": ["Identify the relevant tables: Hotels and Ref_Hotel_Star_Ratings.", "Determine the columns needed: star_rating_description from Ref_Hotel_Star_Ratings and price_range from Hotels.", "Establish the relationship between the tables using the foreign key: Hotels.star_rating_code links to Ref_Hotel_Star_Ratings.star_rating_code.", "Filter the results to include only hotels with a price range greater than 10000."], "pred_sql": "SELECT Ref_Hotel_Star_Ratings.star_rating_description \nFROM Hotels \nJOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code \nWHERE Hotels.price_range = 'More than 10000';", "gold_sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000", "source_tables": ["ref_hotel_star_ratings", "hotels"]}
{"sample_id": 5915, "db_id": "cre_Theme_park", "question": "What are the details and opening hours of the museums?", "rationale": ["Identify the relevant table for museums, which is the 'Museums' table.", "Determine the columns needed: 'Museum_ID' for unique identification and 'Museum_Details' for details about the museums.", "Since the query also asks for opening hours, but the 'Museums' table does not have an 'Opening_Hours' column, we will only retrieve the available details from the 'Museums' table."], "pred_sql": "SELECT Museum_ID, Museum_Details FROM Museums;", "gold_sql": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID", "source_tables": ["tourist_attractions", "museums"]}
{"sample_id": 5916, "db_id": "cre_Theme_park", "question": "Give me the detail and opening hour for each museum.", "rationale": ["Identify the relevant table: Museums.", "Determine the required columns: Museum_ID and Museum_Details.", "Formulate the SQL query to select these columns from the Museums table."], "pred_sql": "SELECT Museum_ID, Museum_Details FROM Museums;", "gold_sql": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID", "source_tables": ["tourist_attractions", "museums"]}
{"sample_id": 5917, "db_id": "cre_Theme_park", "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?", "rationale": ["Identify the relevant tables: Photos and Tourist_Attractions.", "We need to find the name of the tourist attraction associated with a specific photo, so we will join the Photos table with the Tourist_Attractions table on the Tourist_Attraction_ID.", "The condition for the query is that the photo name should match 'game1'.", "Select the Name of the tourist attraction from the joined tables where the photo name is 'game1'."], "pred_sql": "SELECT ta.Name FROM Photos p JOIN Tourist_Attractions ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE p.Name = 'game1';", "gold_sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  'game1'", "source_tables": ["photos", "tourist_attractions"]}
{"sample_id": 5918, "db_id": "cre_Theme_park", "question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.", "rationale": ["Identify the relevant tables: Photos and Tourist_Attractions.", "Determine the relationship between the tables: Photos has a foreign key linking to Tourist_Attractions via Tourist_Attraction_ID.", "The query needs to select the Name of the Tourist Attraction associated with a specific photo name, which is 'game1'.", "Construct the SQL query to join the Photos and Tourist_Attractions tables on the Tourist_Attraction_ID and filter by the photo name."], "pred_sql": "SELECT Tourist_Attractions.Name \nFROM Photos \nJOIN Tourist_Attractions ON Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID \nWHERE Photos.Name = 'game1';", "gold_sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  'game1'", "source_tables": ["photos", "tourist_attractions"]}
{"sample_id": 5919, "db_id": "cre_Theme_park", "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?", "rationale": ["Identify the relevant tables: Photos and Tourist_Attractions are needed to get the names and descriptions of the photos related to the tourist attraction.", "Determine the columns to select: We need the Name and Description of the photos, which are in the Photos table.", "Establish the relationship between the tables: The Photos table has a foreign key linking to the Tourist_Attractions table via Tourist_Attraction_ID.", "Filter the results: We need to filter the Tourist_Attractions table to find the attraction with the name 'film festival'.", "Construct the SQL query using a JOIN to combine the two tables and apply the WHERE clause for filtering."], "pred_sql": "SELECT p.Name, p.Description \nFROM Photos p \nJOIN Tourist_Attractions ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID \nWHERE ta.Name = 'film festival';", "gold_sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  'film festival'", "source_tables": ["photos", "tourist_attractions"]}
{"sample_id": 5920, "db_id": "cre_Theme_park", "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".", "rationale": ["Identify the relevant tables: Photos and Tourist_Attractions.", "Determine the columns needed: Name and Description from the Photos table.", "Establish the relationship between the Photos and Tourist_Attractions tables using the Tourist_Attraction_ID foreign key.", "Filter the results to only include photos associated with the tourist attraction named 'film festival'.", "Construct the SQL query using a SELECT statement to retrieve the desired columns with a JOIN to connect the two tables and a WHERE clause to filter by the attraction name."], "pred_sql": "SELECT p.Name, p.Description \nFROM Photos p \nJOIN Tourist_Attractions ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID \nWHERE ta.Name = 'film festival';", "gold_sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  'film festival'", "source_tables": ["photos", "tourist_attractions"]}
{"sample_id": 5921, "db_id": "cre_Theme_park", "question": "What are the details and ways to get to tourist attractions related to royal family?", "rationale": ["Identify the relevant tables: Tourist_Attractions and Royal_Family.", "Determine the columns needed: Name, Description, How_to_Get_There, and Other_Details from Tourist_Attractions.", "Establish the relationship between the tables using the foreign key: Tourist_Attractions.Tourist_Attraction_ID = Royal_Family.Royal_Family_ID.", "Construct the SQL SELECT statement to retrieve the desired columns from the Tourist_Attractions table, joining it with the Royal_Family table."], "pred_sql": "SELECT Tourist_Attractions.Name, Tourist_Attractions.Description, Tourist_Attractions.How_to_Get_There, Tourist_Attractions.Other_Details \nFROM Tourist_Attractions \nJOIN Royal_Family ON Tourist_Attractions.Tourist_Attraction_ID = Royal_Family.Royal_Family_ID;", "gold_sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "source_tables": ["royal_family", "tourist_attractions"]}
{"sample_id": 5922, "db_id": "cre_Theme_park", "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.", "rationale": ["Identify the relevant tables: Tourist_Attractions and Royal_Family.", "Determine the relationship between the tables: Tourist_Attractions has a foreign key that links to Royal_Family.", "Select the columns needed: all details from Tourist_Attractions and the How_to_Get_There column.", "Construct the SQL query using INNER JOIN to combine the two tables based on the matching IDs."], "pred_sql": "SELECT Tourist_Attractions.*, Tourist_Attractions.How_to_Get_There FROM Tourist_Attractions INNER JOIN Royal_Family ON Tourist_Attractions.Tourist_Attraction_ID = Royal_Family.Royal_Family_ID;", "gold_sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "source_tables": ["royal_family", "tourist_attractions"]}
{"sample_id": 5923, "db_id": "cre_Theme_park", "question": "What are the details of the shops that can be accessed by walk?", "rationale": ["Identify the relevant table for shops, which is the 'Shops' table.", "Determine the necessary columns to retrieve, which are 'Shop_ID' and 'Shop_Details'.", "Understand that we need to filter shops based on accessibility by walking.", "To find shops accessible by walking, we need to look at the 'Tourist_Attractions' table, specifically the 'How_to_Get_There' column.", "Construct a subquery to select 'Tourist_Attraction_ID' from 'Tourist_Attractions' where 'How_to_Get_There' contains the word 'walk'.", "Use the results of the subquery to filter the 'Shops' table, ensuring we only select shops that correspond to attractions that can be accessed by walking."], "pred_sql": "SELECT Shop_ID, Shop_Details FROM Shops WHERE Shop_ID IN (SELECT Tourist_Attraction_ID FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%');", "gold_sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  'walk'", "source_tables": ["shops", "tourist_attractions"]}
{"sample_id": 5924, "db_id": "cre_Theme_park", "question": "Find the details of the shops that can be reached by walk.", "rationale": ["Identify the Shops table as the primary table to retrieve shop details.", "Determine that we need to filter shops based on their accessibility by walking.", "To find shops that can be reached by walking, we need to look at the Tourist_Attractions table to find attractions with 'How_to_Get_There' containing 'walk'.", "Use a subquery to select the Tourist_Attraction_IDs from the Tourist_Attractions table where the 'How_to_Get_There' field indicates walking.", "Join the results of the subquery with the Shops table to get the details of the shops that match the criteria."], "pred_sql": "SELECT * FROM Shops WHERE Shop_ID IN (SELECT Tourist_Attraction_ID FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%');", "gold_sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  'walk'", "source_tables": ["shops", "tourist_attractions"]}
{"sample_id": 5925, "db_id": "cre_Theme_park", "question": "What is the name of the staff that is in charge of the attraction named \"US museum\"?", "rationale": ["Identify the relevant tables: Staff and Tourist_Attractions.", "Determine the relationship between the tables: Staff is linked to Tourist_Attractions through the Tourist_Attraction_ID.", "Select the Name column from the Staff table, as we need the name of the staff member.", "Filter the results to only include the attraction named 'US museum' by using a WHERE clause on the Name column of the Tourist_Attractions table."], "pred_sql": "SELECT Staff.Name \nFROM Staff \nJOIN Tourist_Attractions ON Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID \nWHERE Tourist_Attractions.Name = 'US museum';", "gold_sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  'US museum'", "source_tables": ["staff", "tourist_attractions"]}
{"sample_id": 5926, "db_id": "cre_Theme_park", "question": "Tell me the name of the staff in charge of the attraction called \"US museum\".", "rationale": ["Identify the relevant tables: Staff and Tourist_Attractions.", "Determine the relationship between the tables: Staff is linked to Tourist_Attractions through the Tourist_Attraction_ID.", "Select the Name column from the Staff table, as we need the names of the staff.", "Filter the results to only include the attraction named 'US museum' by using a WHERE clause."], "pred_sql": "SELECT Staff.Name \nFROM Staff \nJOIN Tourist_Attractions ON Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID \nWHERE Tourist_Attractions.Name = 'US museum';", "gold_sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  'US museum'", "source_tables": ["staff", "tourist_attractions"]}
{"sample_id": 5927, "db_id": "cre_Theme_park", "question": "What are the details of the markets that can be accessed by walk or bus?", "rationale": ["Identify the relevant table for street markets, which is 'Street_Markets'.", "Determine the columns needed from the 'Street_Markets' table, which are 'Market_ID' and 'Market_Details'.", "Identify how to filter the markets based on accessibility by walk or bus.", "The accessibility information is likely found in the 'Tourist_Attractions' table under the 'How_to_Get_There' column.", "Construct a subquery to select 'Tourist_Attraction_ID' from 'Tourist_Attractions' where 'How_to_Get_There' contains 'walk' or 'bus'.", "Use the results of the subquery to filter the 'Street_Markets' table to get the desired market details."], "pred_sql": "SELECT Market_ID, Market_Details FROM Street_Markets WHERE Market_ID IN (SELECT Tourist_Attraction_ID FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%' OR How_to_Get_There LIKE '%bus%');", "gold_sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  'walk' OR  T2.How_to_Get_There  =  'bus'", "source_tables": ["street_markets", "tourist_attractions"]}
{"sample_id": 5928, "db_id": "cre_Theme_park", "question": "Find the details of all the markets that are accessible by walk or bus.", "rationale": ["Identify the relevant table: Street_Markets contains the details of the markets.", "Determine the criteria for accessibility: The query specifies markets that are accessible by walk or bus.", "Formulate the SQL query: Use a SELECT statement to retrieve all columns from the Street_Markets table where the Market_Details column contains either 'walk' or 'bus'.", "Use the LIKE operator to search for the keywords in the Market_Details column."], "pred_sql": "SELECT * FROM Street_Markets WHERE Market_Details LIKE '%walk%' OR Market_Details LIKE '%bus%';", "gold_sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  'walk' OR  T2.How_to_Get_There  =  'bus'", "source_tables": ["street_markets", "tourist_attractions"]}
{"sample_id": 5929, "db_id": "cre_Theme_park", "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?", "rationale": ["Identify the relevant tables: Visits and Visitors are needed to get the visit date and details of the visitor.", "Determine the columns to select: We need to select Visit_Date and Visit_Details from the Visits table.", "Establish the relationship between the tables: The Visits table has a foreign key (Tourist_ID) that links to the Visitors table.", "Filter the results: We need to filter the results based on the Tourist_Details column in the Visitors table, specifically for the value 'Vincent'.", "Construct the SQL query using a JOIN to combine the Visits and Visitors tables, selecting the required columns and applying the filter."], "pred_sql": "SELECT Visits.Visit_Date, Visits.Visit_Details \nFROM Visits \nJOIN Visitors ON Visits.Tourist_ID = Visitors.Tourist_ID \nWHERE Visitors.Tourist_Details = 'Vincent';", "gold_sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  'Vincent'", "source_tables": ["visits", "visitors"]}
{"sample_id": 5930, "db_id": "cre_Theme_park", "question": "Find the visit date and details of the tourist whose detail is 'Vincent'", "rationale": ["Identify the relevant tables: 'Visits' for visit records and 'Visitors' for tourist details.", "Determine the columns needed: 'Visit_Date' and 'Visit_Details' from the 'Visits' table.", "Establish the relationship between the 'Visits' and 'Visitors' tables using the 'Tourist_ID' foreign key.", "Filter the results to only include visits by the tourist with the detail 'Vincent'.", "Construct the SQL query using a JOIN to combine the two tables and a WHERE clause to filter by tourist details."], "pred_sql": "SELECT Visits.Visit_Date, Visits.Visit_Details \nFROM Visits \nJOIN Visitors ON Visits.Tourist_ID = Visitors.Tourist_ID \nWHERE Visitors.Tourist_Details = 'Vincent';", "gold_sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  'Vincent'", "source_tables": ["visits", "visitors"]}
{"sample_id": 5931, "db_id": "cre_Theme_park", "question": "Which tourist attractions does the visitor with detail 'Vincent' visit?", "rationale": ["Identify the relevant tables: Tourist_Attractions, Visits, and Visitors are needed to find the attractions visited by a specific visitor.", "Determine the relationship between the tables: Tourist_Attractions is linked to Visits through Tourist_Attraction_ID, and Visits is linked to Visitors through Tourist_ID.", "Select the columns to retrieve: We want the Name, Description, and Opening_Hours of the tourist attractions.", "Filter the results: We need to filter the results to only include visits by the visitor with the detail 'Vincent'.", "Construct the SQL query using JOINs to connect the tables and apply the WHERE clause for filtering."], "pred_sql": "SELECT ta.Name, ta.Description, ta.Opening_Hours \nFROM Tourist_Attractions ta \nJOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID \nJOIN Visitors vi ON v.Tourist_ID = vi.Tourist_ID \nWHERE vi.Tourist_Details = 'Vincent';", "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  'Vincent'", "source_tables": ["visits", "visitors", "tourist_attractions"]}
{"sample_id": 5932, "db_id": "cre_Theme_park", "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.", "rationale": ["Identify the relevant tables: Visits, Visitors, and Tourist_Attractions.", "We need to join these tables to get the names and descriptions of the tourist attractions visited by a specific tourist.", "The Visitors table contains the details of the tourist, so we will filter by 'Vincent' in the Tourist_Details column.", "We will select the Name and Description of the Tourist_Attractions along with the Visit_Date from the Visits table.", "Construct the SQL query using JOINs to connect the tables based on their foreign key relationships."], "pred_sql": "SELECT Tourist_Attractions.Name, Tourist_Attractions.Description, Visits.Visit_Date \nFROM Visits \nJOIN Visitors ON Visits.Tourist_ID = Visitors.Tourist_ID \nJOIN Tourist_Attractions ON Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID \nWHERE Visitors.Tourist_Details = 'Vincent';", "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  'Vincent'", "source_tables": ["visits", "visitors", "tourist_attractions"]}
{"sample_id": 5933, "db_id": "cre_Theme_park", "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?", "rationale": ["Identify the relevant tables: Visits, Tourist_Attractions, and Visitors are needed to get the names of attractions and visit dates.", "Select the columns: We need the Name of the tourist attraction from the Tourist_Attractions table and the Visit_Date from the Visits table.", "Join the tables: We will join Visits with Tourist_Attractions on the Tourist_Attraction_ID and with Visitors on the Tourist_ID to link visits to the corresponding attractions and tourists.", "Filter the results: We need to filter the results to include only those visits made by tourists named Vincent or Vivian. This is done using a WHERE clause that checks the Tourist_Details in the Visitors table."], "pred_sql": "SELECT ta.Name AS Tourist_Attraction_Name, v.Visit_Date \nFROM Visits v \nJOIN Tourist_Attractions ta ON v.Tourist_Attraction_ID = ta.Tourist_Attraction_ID \nJOIN Visitors vi ON v.Tourist_ID = vi.Tourist_ID \nWHERE vi.Tourist_Details IN ('Vincent', 'Vivian');", "gold_sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Vincent' OR T2.Tourist_Details  =  'Vivian'", "source_tables": ["visits", "visitors", "tourist_attractions"]}
{"sample_id": 5934, "db_id": "cre_Theme_park", "question": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.", "rationale": ["Identify the relevant tables: Tourist_Attractions for attraction names, Visits for visit dates, and Visitors for tourist names.", "Join the Tourist_Attractions table with the Visits table on the Tourist_Attraction_ID to link attractions with their visit records.", "Join the resulting table with the Visitors table on Tourist_ID to filter visits by specific tourists.", "Use a WHERE clause to filter the results to only include visits by tourists named Vincent or Vivian.", "Select the Name of the tourist attraction and the Visit_Date from the resulting joined table."], "pred_sql": "SELECT ta.Name, v.Visit_Date \nFROM Tourist_Attractions ta \nJOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID \nJOIN Visitors vi ON v.Tourist_ID = vi.Tourist_ID \nWHERE vi.Tourist_Details IN ('Vincent', 'Vivian');", "gold_sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Vincent' OR T2.Tourist_Details  =  'Vivian'", "source_tables": ["visits", "visitors", "tourist_attractions"]}
{"sample_id": 5935, "db_id": "cre_Theme_park", "question": "Show the average price of hotels for each star rating code.", "rationale": ["Identify the relevant table: The Hotels table contains the star_rating_code and price_range columns needed for the query.", "Determine the required calculation: We need to calculate the average price of hotels, which can be done using the AVG() function.", "Group the results: Since we want the average price for each star rating code, we will use the GROUP BY clause on star_rating_code.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT star_rating_code, AVG(price_range) AS average_price FROM Hotels GROUP BY star_rating_code;", "gold_sql": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code", "source_tables": ["hotels"]}
{"sample_id": 5936, "db_id": "cre_Theme_park", "question": "What is the average price range of hotels for each each star rating code?", "rationale": ["Identify the relevant table: The Hotels table contains the star_rating_code and price_range columns needed for the query.", "Determine the aggregation needed: We need to calculate the average price range for each star rating code.", "Use the AVG() function to compute the average price range.", "Group the results by star_rating_code to get the average price for each star rating category."], "pred_sql": "SELECT h.star_rating_code, AVG(h.price_range) AS average_price_range\nFROM Hotels h\nGROUP BY h.star_rating_code;", "gold_sql": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code", "source_tables": ["hotels"]}
{"sample_id": 5937, "db_id": "cre_Theme_park", "question": "Show the average price of hotels for different pet policy.", "rationale": ["Identify the relevant table: The Hotels table contains information about hotel prices and pet policies.", "Select the columns needed: We need the pet policy (pets_allowed_yn) and the average price of hotels (AVG(price_range)).", "Use the AVG() function to calculate the average price of hotels grouped by the pet policy.", "Group the results by the pet policy to get the average price for each policy type."], "pred_sql": "SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn;", "gold_sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "source_tables": ["hotels"]}
{"sample_id": 5938, "db_id": "cre_Theme_park", "question": "What are the average prices of hotels grouped by their pet policy.", "rationale": ["Identify the relevant table: The Hotels table contains information about hotel prices and pet policies.", "Determine the columns needed: We need the 'pets_allowed_yn' column to group by pet policy and the 'price_range' column to calculate the average price.", "Use the AVG() function to calculate the average price of hotels for each pet policy.", "Group the results by the 'pets_allowed_yn' column to get the average prices for each pet policy category."], "pred_sql": "SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn;", "gold_sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "source_tables": ["hotels"]}
{"sample_id": 5939, "db_id": "cre_Theme_park", "question": "Show the id and star rating of each hotel, ordered by its price from low to high.", "rationale": ["Identify the required columns: hotel_id and star_rating_code from the Hotels table.", "Determine the sorting requirement: order by price from low to high, which corresponds to the price_range column in the Hotels table.", "Construct the SQL SELECT statement to retrieve the specified columns from the Hotels table.", "Add the ORDER BY clause to sort the results based on the price_range in ascending order."], "pred_sql": "SELECT hotel_id, star_rating_code FROM Hotels ORDER BY price_range ASC;", "gold_sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "source_tables": ["hotels"]}
{"sample_id": 5940, "db_id": "cre_Theme_park", "question": "Find the id and star rating of each hotel and sort them in increasing order of price.", "rationale": ["Identify the required columns: hotel_id and star_rating_code from the Hotels table.", "Determine the sorting requirement: sort by price_range in increasing order.", "Construct the SQL SELECT statement to retrieve the specified columns from the Hotels table.", "Add the ORDER BY clause to sort the results based on price_range in ascending order."], "pred_sql": "SELECT hotel_id, star_rating_code FROM Hotels ORDER BY price_range ASC;", "gold_sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "source_tables": ["hotels"]}
{"sample_id": 5941, "db_id": "cre_Theme_park", "question": "Show the details of the top 3 most expensive hotels.", "rationale": ["Identify the table that contains hotel details, which is the 'Hotels' table.", "Determine the relevant column for hotel pricing, which is 'price_range'.", "To find the most expensive hotels, sort the results in descending order based on the 'price_range' column.", "Limit the results to the top 3 entries to get the top 3 most expensive hotels."], "pred_sql": "SELECT * FROM Hotels ORDER BY price_range DESC LIMIT 3;", "gold_sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "source_tables": ["hotels"]}
{"sample_id": 5942, "db_id": "cre_Theme_park", "question": "What are the details of the three most expensive hotels?", "rationale": ["Identify the table that contains hotel details, which is the 'Hotels' table.", "Determine the relevant column for hotel pricing, which is 'price_range'.", "To find the most expensive hotels, sort the results in descending order based on the 'price_range' column.", "Limit the results to the top three entries to get the three most expensive hotels."], "pred_sql": "SELECT * FROM Hotels ORDER BY price_range DESC LIMIT 3;", "gold_sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "source_tables": ["hotels"]}
{"sample_id": 5943, "db_id": "cre_Theme_park", "question": "Show the details and star ratings of the 3 least expensive hotels.", "rationale": ["Identify the relevant tables: Hotels and Ref_Hotel_Star_Ratings.", "We need to select hotel details and their star ratings, so we will select columns from both tables: hotel_id and other_hotel_details from Hotels, and star_rating_description from Ref_Hotel_Star_Ratings.", "To get the star ratings, we need to join the Hotels table with the Ref_Hotel_Star_Ratings table on the star_rating_code column.", "Since we want the least expensive hotels, we will order the results by the price_range column in ascending order.", "Finally, we limit the results to 3 to get only the three least expensive hotels."], "pred_sql": "SELECT Hotels.hotel_id, Hotels.other_hotel_details, Ref_Hotel_Star_Ratings.star_rating_description \nFROM Hotels \nJOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code \nORDER BY Hotels.price_range ASC \nLIMIT 3;", "gold_sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "source_tables": ["hotels"]}
{"sample_id": 5944, "db_id": "cre_Theme_park", "question": "What are the details and star ratings of the three hotels with the lowest price ranges?", "rationale": ["Identify the relevant tables: Hotels and Ref_Hotel_Star_Ratings.", "We need to select hotel details and their star ratings, so we will select columns from both tables: hotel_id and other_hotel_details from Hotels, and star_rating_description from Ref_Hotel_Star_Ratings.", "To get the star ratings, we need to join the Hotels table with the Ref_Hotel_Star_Ratings table on the star_rating_code column.", "We want the hotels with the lowest price ranges, so we will order the results by the price_range column in ascending order.", "Finally, we limit the results to the top 3 hotels with the lowest price ranges."], "pred_sql": "SELECT Hotels.hotel_id, Hotels.other_hotel_details, Ref_Hotel_Star_Ratings.star_rating_description \nFROM Hotels \nJOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code \nORDER BY Hotels.price_range ASC \nLIMIT 3;", "gold_sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "source_tables": ["hotels"]}
{"sample_id": 5945, "db_id": "cre_Theme_park", "question": "Show the transportation method most people choose to get to tourist attractions.", "rationale": ["Identify the relevant table: The query is about transportation methods to tourist attractions, which relates to the Tourist_Attractions table.", "Determine the relevant column: The column 'How_to_Get_There' in the Tourist_Attractions table contains the transportation methods.", "Count occurrences: We need to count how many times each transportation method is mentioned, which can be done using COUNT() function.", "Group by transportation method: To get the count for each method, we will use GROUP BY on the 'How_to_Get_There' column.", "Order by count: To find the most chosen method, we will order the results in descending order based on the count.", "Limit the results: Since we only want the most chosen method, we will limit the results to 1."], "pred_sql": "SELECT How_to_Get_There, COUNT(*) as Count FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["tourist_attractions"]}
{"sample_id": 5946, "db_id": "cre_Theme_park", "question": "Which transportation method is used the most often to get to tourist attractions?", "rationale": ["Identify the relevant table: The query is about transportation methods to tourist attractions, which relates to the 'Tourist_Attractions' table.", "Determine the relevant column: The 'How_to_Get_There' column contains the transportation methods used to reach the attractions.", "Count the occurrences: We need to count how many times each transportation method is mentioned, which can be done using the COUNT() function.", "Group the results: To get the count for each transportation method, we will use GROUP BY on the 'How_to_Get_There' column.", "Order the results: To find the most used transportation method, we will order the results in descending order based on the count.", "Limit the results: Since we only want the most used method, we will limit the results to 1."], "pred_sql": "SELECT How_to_Get_There, COUNT(*) as usage_count FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY usage_count DESC LIMIT 1;", "gold_sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["tourist_attractions"]}
{"sample_id": 5947, "db_id": "cre_Theme_park", "question": "Show the description and code of the attraction type most tourist attractions belong to.", "rationale": ["Identify the relevant tables: Ref_Attraction_Types and Tourist_Attractions.", "We need to join these tables on the Attraction_Type_Code to get the descriptions and codes of the attraction types.", "Group the results by Attraction_Type_Code to count how many tourist attractions belong to each type.", "Order the results by the count of tourist attractions in descending order to find the most popular attraction type.", "Limit the results to 1 to get only the top attraction type."], "pred_sql": "SELECT Ref_Attraction_Types.Attraction_Type_Code, Ref_Attraction_Types.Attraction_Type_Description\nFROM Ref_Attraction_Types\nJOIN Tourist_Attractions ON Ref_Attraction_Types.Attraction_Type_Code = Tourist_Attractions.Attraction_Type_Code\nGROUP BY Ref_Attraction_Types.Attraction_Type_Code\nORDER BY COUNT(Tourist_Attractions.Tourist_Attraction_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["tourist_attractions", "ref_attraction_types"]}
{"sample_id": 5948, "db_id": "cre_Theme_park", "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.", "rationale": ["Identify the relevant tables: Ref_Attraction_Types and Tourist_Attractions are needed to get the attraction type descriptions and their corresponding codes.", "Join the two tables on the Attraction_Type_Code to link the attraction types with the tourist attractions.", "Group the results by Attraction_Type_Code and Attraction_Type_Description to count the number of tourist attractions for each type.", "Use COUNT() to count the number of tourist attractions for each attraction type.", "Order the results in descending order based on the count to find the type with the most attractions.", "Limit the results to 1 to get only the top attraction type."], "pred_sql": "SELECT Ref_Attraction_Types.Attraction_Type_Code, Ref_Attraction_Types.Attraction_Type_Description\nFROM Ref_Attraction_Types\nJOIN Tourist_Attractions ON Ref_Attraction_Types.Attraction_Type_Code = Tourist_Attractions.Attraction_Type_Code\nGROUP BY Ref_Attraction_Types.Attraction_Type_Code, Ref_Attraction_Types.Attraction_Type_Description\nORDER BY COUNT(Tourist_Attractions.Tourist_Attraction_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["tourist_attractions", "ref_attraction_types"]}
{"sample_id": 5949, "db_id": "cre_Theme_park", "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.", "rationale": ["Identify the relevant table: The query is about tourist attractions and how to get to them, so we will use the Tourist_Attractions table.", "Select the columns needed: We need the 'How_to_Get_There' column to show different ways to get to attractions and we need to count the number of attractions for each way, which requires the 'Tourist_Attraction_ID' column.", "Use the COUNT function: To count the number of attractions for each method of getting there, we will use the COUNT function on 'Tourist_Attraction_ID'.", "Group the results: To get the count for each unique way to get to attractions, we will group the results by 'How_to_Get_There'.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT How_to_Get_There, COUNT(Tourist_Attraction_ID) AS Number_of_Attractions\nFROM Tourist_Attractions\nGROUP BY How_to_Get_There;", "gold_sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "source_tables": ["tourist_attractions"]}
{"sample_id": 5950, "db_id": "cre_Theme_park", "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.", "rationale": ["Identify the relevant table: The query requires information about how to get to attractions, which is found in the 'Tourist_Attractions' table under the column 'How_to_Get_There'.", "We need to count the number of attractions for each method of getting there, so we will use the COUNT() function.", "To group the results by the method of getting there, we will use the GROUP BY clause on the 'How_to_Get_There' column.", "The final SQL query will select the 'How_to_Get_There' column and the count of attractions, grouping the results accordingly."], "pred_sql": "SELECT How_to_Get_There, COUNT(*) AS Number_of_Attractions\nFROM Tourist_Attractions\nGROUP BY How_to_Get_There;", "gold_sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "source_tables": ["tourist_attractions"]}
{"sample_id": 5951, "db_id": "cre_Theme_park", "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.", "rationale": ["Identify the relevant tables: Tourist_Attractions for attraction details and Visits for visit records.", "Select the columns needed: Tourist_Attraction_ID and Name from Tourist_Attractions, and a count of Visit_ID from Visits to get the number of visits.", "Use a LEFT JOIN to include all tourist attractions even if they have no visits, ensuring we get a complete list of attractions.", "Group the results by Tourist_Attraction_ID and Name to aggregate the visit counts for each attraction."], "pred_sql": "SELECT Tourist_Attraction_ID, Name, COUNT(Visit_ID) AS Number_of_Visits\nFROM Tourist_Attractions\nLEFT JOIN Visits ON Tourist_Attractions.Tourist_Attraction_ID = Visits.Tourist_Attraction_ID\nGROUP BY Tourist_Attraction_ID, Name;", "gold_sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "source_tables": ["visits", "tourist_attractions"]}
{"sample_id": 5952, "db_id": "cre_Theme_park", "question": "What are the name, id and the corresponding number of visits for each  tourist attraction?", "rationale": ["Identify the relevant tables: Tourist_Attractions and Visits.", "We need to retrieve the name and ID of each tourist attraction, which are found in the Tourist_Attractions table.", "To get the number of visits for each attraction, we will join the Visits table on the Tourist_Attraction_ID.", "Use a LEFT JOIN to ensure we include all attractions, even those with zero visits.", "Count the number of Visit_IDs for each attraction to get the number of visits.", "Group the results by Tourist_Attraction_ID and Name to aggregate the visit counts."], "pred_sql": "SELECT Tourist_Attraction_ID, Name, COUNT(Visit_ID) AS Number_of_Visits\nFROM Tourist_Attractions\nLEFT JOIN Visits ON Tourist_Attractions.Tourist_Attraction_ID = Visits.Tourist_Attraction_ID\nGROUP BY Tourist_Attraction_ID, Name;", "gold_sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "source_tables": ["visits", "tourist_attractions"]}
{"sample_id": 5953, "db_id": "cre_Theme_park", "question": "Show the names and ids of tourist attractions that are visited at least two times.", "rationale": ["Identify the relevant table: Tourist_Attractions for attraction names and IDs, and Visits for visit records.", "We need to find attractions that have been visited at least two times, which requires counting visits per attraction.", "Use a subquery to count the number of visits for each Tourist_Attraction_ID in the Visits table, grouping by Tourist_Attraction_ID.", "Filter the results of the subquery to include only those attractions with a count of visits greater than or equal to 2 using HAVING clause.", "Join the results of the subquery with the Tourist_Attractions table to get the names and IDs of the attractions that meet the criteria."], "pred_sql": "SELECT Tourist_Attraction_ID, Name FROM Tourist_Attractions WHERE Tourist_Attraction_ID IN (SELECT Tourist_Attraction_ID FROM Visits GROUP BY Tourist_Attraction_ID HAVING COUNT(*) >= 2)", "gold_sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "source_tables": ["visits", "tourist_attractions"]}
{"sample_id": 5954, "db_id": "cre_Theme_park", "question": "Which tourist attractions are visited at least twice? Give me their names and ids.", "rationale": ["Identify the relevant table: Tourist_Attractions for attraction names and IDs, and Visits for tracking the number of visits.", "We need to find attractions that have been visited at least twice, so we will use the Visits table to group by Tourist_Attraction_ID and count the number of visits.", "Use the HAVING clause to filter those groups to only include those with a count of 2 or more.", "Select the Tourist_Attraction_ID and Name from the Tourist_Attractions table where the ID is in the list of IDs that meet the visit criteria."], "pred_sql": "SELECT Tourist_Attraction_ID, Name FROM Tourist_Attractions WHERE Tourist_Attraction_ID IN (SELECT Tourist_Attraction_ID FROM Visits GROUP BY Tourist_Attraction_ID HAVING COUNT(*) >= 2)", "gold_sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "source_tables": ["visits", "tourist_attractions"]}
{"sample_id": 5955, "db_id": "cre_Theme_park", "question": "Show the names and ids of tourist attractions that are visited at most once.", "rationale": ["Identify the relevant table: Tourist_Attractions contains the names and IDs of tourist attractions.", "Determine the condition: We need to find attractions that are visited at most once, which means we need to check the Visits table.", "Use a subquery to count the number of visits for each attraction: We will group by Tourist_Attraction_ID in the Visits table and count the number of Tourist_IDs.", "Filter the attractions: We will select those Tourist_Attraction_IDs that have a count of visits greater than 1.", "Use the NOT IN clause to exclude those attractions from the main query.", "Select the required columns: Tourist_Attraction_ID and Name from the Tourist_Attractions table."], "pred_sql": "SELECT Tourist_Attraction_ID, Name FROM Tourist_Attractions WHERE Tourist_Attraction_ID NOT IN (SELECT Tourist_Attraction_ID FROM Visits GROUP BY Tourist_Attraction_ID HAVING COUNT(Tourist_ID) > 1)", "gold_sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "source_tables": ["visits", "tourist_attractions"]}
{"sample_id": 5956, "db_id": "cre_Theme_park", "question": "What are the names and ids of the tourist attractions that are visited at most once?", "rationale": ["Identify the relevant table: Tourist_Attractions contains the names and IDs of tourist attractions.", "Determine the criteria: We need to find attractions that are visited at most once.", "To find attractions visited at most once, we can use a subquery on the Visits table to count the number of visits per attraction.", "The subquery will group the visits by Tourist_Attraction_ID and filter those with a count greater than 1.", "The main query will select the Name and Tourist_Attraction_ID from Tourist_Attractions where the Tourist_Attraction_ID is not in the result of the subquery."], "pred_sql": "SELECT Name, Tourist_Attraction_ID FROM Tourist_Attractions WHERE Tourist_Attraction_ID NOT IN (SELECT Tourist_Attraction_ID FROM Visits GROUP BY Tourist_Attraction_ID HAVING COUNT(*) > 1)", "gold_sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "source_tables": ["visits", "tourist_attractions"]}
{"sample_id": 5957, "db_id": "cre_Theme_park", "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?", "rationale": ["Identify the relevant table: Tourist_Attractions contains the names of the attractions and the method of reaching them.", "We need to filter attractions based on two conditions: those that can be reached by walking and those located at a specific address.", "The 'How_to_Get_There' column in the Tourist_Attractions table will be checked for the keyword 'walk'.", "For the second condition, we will need to join the Locations table to find the Location_ID corresponding to the address '660 Shea Crescent'.", "We will use a subquery to select the Location_ID from the Locations table where the address matches '660 Shea Crescent'.", "Finally, we will combine both conditions using an OR operator in the WHERE clause of the SQL query."], "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%' OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '660 Shea Crescent')", "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '660 Shea Crescent' OR T2.How_to_Get_There  =  'walk'", "source_tables": ["tourist_attractions", "locations"]}
{"sample_id": 5958, "db_id": "cre_Theme_park", "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.", "rationale": ["Identify the relevant table: Tourist_Attractions contains the names of the attractions and the method of access.", "We need to filter attractions based on two conditions: accessible by walk or located at a specific address.", "The 'How_to_Get_There' column in Tourist_Attractions will be checked for the keyword 'walk'.", "For the address condition, we will need to join with the Locations table to find the Location_ID that corresponds to '660 Shea Crescent'.", "Use a subquery to select Location_ID from Locations where the Address matches '660 Shea Crescent'.", "Combine both conditions using an OR operator in the WHERE clause of the SQL query."], "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%' OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '660 Shea Crescent')", "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '660 Shea Crescent' OR T2.How_to_Get_There  =  'walk'", "source_tables": ["tourist_attractions", "locations"]}
{"sample_id": 5959, "db_id": "cre_Theme_park", "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?", "rationale": ["Identify the main table to query from, which is 'Tourist_Attractions' to get the names of the attractions.", "Determine the features related to the attractions by joining 'Tourist_Attraction_Features' with 'Features' table.", "Filter the results to include only those attractions that have 'parking' or 'shopping' as their feature details using a WHERE clause."], "pred_sql": "SELECT ta.Name\nFROM Tourist_Attractions ta\nJOIN Tourist_Attraction_Features taf ON ta.Tourist_Attraction_ID = taf.Tourist_Attraction_ID\nJOIN Features f ON taf.Feature_ID = f.Feature_ID\nWHERE f.Feature_Details IN ('parking', 'shopping');", "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "source_tables": ["features", "tourist_attractions", "tourist_attraction_features"]}
{"sample_id": 5960, "db_id": "cre_Theme_park", "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?", "rationale": ["Identify the main table to query from, which is 'Tourist_Attractions' to get the names of the attractions.", "Determine the relationship between 'Tourist_Attractions' and 'Features' through the 'Tourist_Attraction_Features' table, which links attractions to their features.", "Use JOIN statements to connect 'Tourist_Attractions' with 'Tourist_Attraction_Features' and then with 'Features' to access feature details.", "Filter the results to include only those attractions that have features related to 'parking' or 'shopping' using a WHERE clause."], "pred_sql": "SELECT ta.Name\nFROM Tourist_Attractions ta\nJOIN Tourist_Attraction_Features taf ON ta.Tourist_Attraction_ID = taf.Tourist_Attraction_ID\nJOIN Features f ON taf.Feature_ID = f.Feature_ID\nWHERE f.Feature_Details IN ('parking', 'shopping');", "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "source_tables": ["features", "tourist_attractions", "tourist_attraction_features"]}
{"sample_id": 5961, "db_id": "cre_Theme_park", "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?", "rationale": ["Identify the relevant table: Tourist_Attractions contains the names and access information for tourist attractions.", "Determine the conditions for selection: attractions that can be reached by bus or are located at a specific address.", "Use the 'How_to_Get_There' column to filter for attractions that mention 'bus'.", "Use a subquery to find the Location_ID for the address '254 Ottilie Junction' from the Locations table.", "Combine the conditions using an OR clause to get the desired results."], "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '254 Ottilie Junction')", "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '254 Ottilie Junction' OR T2.How_to_Get_There  =  'bus'", "source_tables": ["tourist_attractions", "locations"]}
{"sample_id": 5962, "db_id": "cre_Theme_park", "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.", "rationale": ["Identify the table that contains the names of tourist attractions, which is the 'Tourist_Attractions' table.", "Determine the relevant columns needed: 'Name' for the attraction name and 'How_to_Get_There' to check for bus accessibility.", "The query needs to filter attractions based on two conditions: 1) accessible by bus, and 2) located at a specific address.", "To check if an attraction is accessible by bus, use a LIKE clause on the 'How_to_Get_There' column.", "For the second condition, we need to find the 'Location_ID' that corresponds to the address '254 Ottilie Junction' in the 'Locations' table.", "Use a subquery to select 'Location_ID' from 'Locations' where the address matches '254 Ottilie Junction'.", "Combine both conditions using an OR operator in the WHERE clause of the main query."], "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '254 Ottilie Junction')", "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '254 Ottilie Junction' OR T2.How_to_Get_There  =  'bus'", "source_tables": ["tourist_attractions", "locations"]}
{"sample_id": 5963, "db_id": "cre_Theme_park", "question": "What are the names of the tourist attractions Vincent and Marcelle visit?", "rationale": ["Identify the relevant tables: Tourist_Attractions, Visits, and Visitors are needed to find the names of the attractions visited by specific tourists.", "The Tourist_Attractions table contains the names of the attractions, while the Visits table links tourists to the attractions they visited.", "The Visitors table contains the details of the tourists, which we need to filter by the names 'Vincent' and 'Marcelle'.", "Join the Tourist_Attractions table with the Visits table on the Tourist_Attraction_ID to get the attractions visited.", "Join the resulting table with the Visitors table on Tourist_ID to filter the results for Vincent and Marcelle.", "Select the Name column from the Tourist_Attractions table to get the desired output."], "pred_sql": "SELECT ta.Name\nFROM Tourist_Attractions ta\nJOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID\nJOIN Visitors vi ON v.Tourist_ID = vi.Tourist_ID\nWHERE vi.Tourist_Details IN ('Vincent', 'Marcelle');", "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Marcelle'", "source_tables": ["visits", "visitors", "tourist_attractions"]}
{"sample_id": 5964, "db_id": "cre_Theme_park", "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.", "rationale": ["Identify the relevant tables: Tourist_Attractions for attraction names, Visits for linking tourists to attractions, and Visitors for tourist details.", "We need to select the names of tourist attractions, so we will select the 'Name' column from the Tourist_Attractions table.", "To find out which attractions were visited by tourists named Vincent and Marcelle, we will join the Visits table with the Tourist_Attractions table on the Tourist_Attraction_ID.", "Next, we will join the Visitors table to the Visits table on the Tourist_ID to access the tourist details.", "We will filter the results to include only those records where the Tourist_Details in the Visitors table match 'Vincent' or 'Marcelle'."], "pred_sql": "SELECT ta.Name FROM Tourist_Attractions ta\nJOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID\nJOIN Visitors vi ON v.Tourist_ID = vi.Tourist_ID\nWHERE vi.Tourist_Details IN ('Vincent', 'Marcelle');", "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Marcelle'", "source_tables": ["visits", "visitors", "tourist_attractions"]}
{"sample_id": 5965, "db_id": "cre_Theme_park", "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?", "rationale": ["Identify the main entities involved: tourist attractions and visitors.", "We need to find attractions visited by Alison but not by Rosalind.", "Start by selecting the names of tourist attractions from the Tourist_Attractions table.", "Join the Visits table to link tourist attractions with visitors who visited them.", "Filter the results to include only those visits made by Alison.", "To find attractions not visited by Rosalind, create a subquery that selects attractions visited by Rosalind.", "Use the NOT IN clause to exclude attractions from the main query that are present in the subquery results."], "pred_sql": "SELECT ta.Name\nFROM Tourist_Attractions ta\nJOIN Visits v1 ON ta.Tourist_Attraction_ID = v1.Tourist_Attraction_ID\nJOIN Visitors vi1 ON v1.Tourist_ID = vi1.Tourist_ID\nWHERE vi1.Tourist_Details = 'Alison'\nAND ta.Tourist_Attraction_ID NOT IN (\n    SELECT ta2.Tourist_Attraction_ID\n    FROM Visits v2\n    JOIN Visitors vi2 ON v2.Tourist_ID = vi2.Tourist_ID\n    WHERE vi2.Tourist_Details = 'Rosalind'\n);", "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Alison' EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Rosalind'", "source_tables": ["visits", "visitors", "tourist_attractions"]}
{"sample_id": 5966, "db_id": "cre_Theme_park", "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.", "rationale": ["Identify the main entities involved: tourist attractions and visitors.", "We need to find tourist attractions visited by 'Alison' but not by 'Rosalind'.", "Join the 'Tourist_Attractions' table with the 'Visits' table to get the attractions visited by tourists.", "Join the 'Visitors' table to filter visits by specific tourists, 'Alison' and 'Rosalind'.", "Use a subquery to find all attractions visited by 'Rosalind' and exclude them from the results for 'Alison'.", "Select the names of the tourist attractions that meet the criteria."], "pred_sql": "SELECT ta.Name\nFROM Tourist_Attractions ta\nJOIN Visits v1 ON ta.Tourist_Attraction_ID = v1.Tourist_Attraction_ID\nJOIN Visitors vi1 ON v1.Tourist_ID = vi1.Tourist_ID\nWHERE vi1.Tourist_Details = 'Alison'\nAND ta.Tourist_Attraction_ID NOT IN (\n    SELECT ta2.Tourist_Attraction_ID\n    FROM Tourist_Attractions ta2\n    JOIN Visits v2 ON ta2.Tourist_Attraction_ID = v2.Tourist_Attraction_ID\n    JOIN Visitors vi2 ON v2.Tourist_ID = vi2.Tourist_ID\n    WHERE vi2.Tourist_Details = 'Rosalind'\n);", "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Alison' EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Rosalind'", "source_tables": ["visits", "visitors", "tourist_attractions"]}
{"sample_id": 5967, "db_id": "cre_Theme_park", "question": "How many tourists did not make any visit?", "rationale": ["Identify the main goal of the query: to count tourists who did not make any visits.", "Determine the relevant tables: 'Visitors' for tourist information and 'Visits' for visit records.", "Use a subquery to find all Tourist_IDs from the 'Visits' table.", "Count the number of Tourist_IDs in the 'Visitors' table that are not present in the subquery result."], "pred_sql": "SELECT COUNT(*) AS Tourist_Count FROM Visitors WHERE Tourist_ID NOT IN (SELECT Tourist_ID FROM Visits);", "gold_sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "source_tables": ["visits", "visitors"]}
{"sample_id": 5968, "db_id": "cre_Theme_park", "question": "Count the number of tourists who did not visit any place.", "rationale": ["Identify the main goal of the query: to count tourists who did not visit any place.", "Determine the relevant tables: 'Visitors' for tourist information and 'Visits' for tracking visits.", "Use a subquery to find all Tourist_IDs from the 'Visits' table, which indicates tourists who have visited at least one place.", "Use the NOT IN clause to filter out those Tourist_IDs from the 'Visitors' table.", "Count the remaining Tourist_IDs in the 'Visitors' table to get the total number of tourists who did not visit any place."], "pred_sql": "SELECT COUNT(*) AS Tourist_Count FROM Visitors WHERE Tourist_ID NOT IN (SELECT Tourist_ID FROM Visits);", "gold_sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "source_tables": ["visits", "visitors"]}
{"sample_id": 5969, "db_id": "game_1", "question": "How many video games exist?", "rationale": ["Identify the requirement: We need to find out how many video games exist in the database.", "Determine the relevant table: The 'Video_Games' table contains the information about video games.", "Use the COUNT() function: This function will help us count the total number of entries in the 'Video_Games' table.", "Construct the SQL query: The query will select the count of all records from the 'Video_Games' table."], "pred_sql": "SELECT COUNT(*) AS Total_Video_Games FROM Video_Games;", "gold_sql": "SELECT count(*) FROM Video_games", "source_tables": ["video_games"]}
{"sample_id": 5970, "db_id": "game_1", "question": "How many video games do you have?", "rationale": ["The user is asking for the total number of video games available.", "To get this information, we need to count the number of entries in the Video_Games table.", "The SQL function COUNT(*) will be used to count all rows in the Video_Games table.", "The result will be labeled as 'Total_Video_Games' for clarity."], "pred_sql": "SELECT COUNT(*) AS Total_Video_Games FROM Video_Games;", "gold_sql": "SELECT count(*) FROM Video_games", "source_tables": ["video_games"]}
{"sample_id": 5971, "db_id": "game_1", "question": "How many video game types exist?", "rationale": ["Identify the table that contains the information about video game types, which is the Video_Games table.", "To find out how many distinct video game types exist, we need to count the unique entries in the GType column.", "Use the COUNT function along with DISTINCT to ensure we only count unique game types.", "The final SQL query will select the count of distinct GType from the Video_Games table."], "pred_sql": "SELECT COUNT(DISTINCT GType) AS NumberOfGameTypes FROM Video_Games;", "gold_sql": "SELECT count(DISTINCT gtype) FROM Video_games", "source_tables": ["video_games"]}
{"sample_id": 5972, "db_id": "game_1", "question": "What is the count of different game types?", "rationale": ["Identify the table that contains the game types, which is the Video_Games table.", "To count the different game types, we need to use the COUNT function along with DISTINCT to ensure we only count unique types.", "The SQL query will select the count of distinct game types from the Video_Games table."], "pred_sql": "SELECT COUNT(DISTINCT GType) AS DifferentGameTypes FROM Video_Games;", "gold_sql": "SELECT count(DISTINCT gtype) FROM Video_games", "source_tables": ["video_games"]}
{"sample_id": 5973, "db_id": "game_1", "question": "Show all video game types.", "rationale": ["Identify the table that contains the information about video game types, which is the Video_Games table.", "Determine the column that holds the type of video games, which is GType.", "To show all video game types, we need to select the GType column from the Video_Games table.", "Since we want to show all unique video game types, we will use the DISTINCT keyword to avoid duplicates."], "pred_sql": "SELECT DISTINCT GType FROM Video_Games;", "gold_sql": "SELECT DISTINCT gtype FROM Video_games", "source_tables": ["video_games"]}
{"sample_id": 5974, "db_id": "game_1", "question": "What are the different types of video games?", "rationale": ["The user wants to know the different types of video games.", "To find the different types, we need to select the 'GType' column from the 'Video_Games' table.", "Using 'DISTINCT' will ensure that we only get unique types of video games, eliminating duplicates."], "pred_sql": "SELECT DISTINCT GType FROM Video_Games;", "gold_sql": "SELECT DISTINCT gtype FROM Video_games", "source_tables": ["video_games"]}
{"sample_id": 5975, "db_id": "game_1", "question": "Show all video games and their types in the order of their names.", "rationale": ["Identify the table that contains the required information: Video_Games.", "Determine the columns needed: GName (name of the video game) and GType (type of the video game).", "Formulate the SELECT statement to retrieve GName and GType from the Video_Games table.", "Add an ORDER BY clause to sort the results by GName in ascending order."], "pred_sql": "SELECT GName, GType FROM Video_Games ORDER BY GName;", "gold_sql": "SELECT gname ,  gtype FROM Video_games ORDER BY gname", "source_tables": ["video_games"]}
{"sample_id": 5976, "db_id": "game_1", "question": "What are the names of all the video games and their types in alphabetical order?", "rationale": ["Identify the table that contains the required information: Video_Games.", "Select the columns that need to be retrieved: GName (name of the video game) and GType (type of the video game).", "Specify the order in which the results should be sorted: alphabetical order based on GName.", "Construct the SQL query using SELECT to retrieve the specified columns from the Video_Games table, and use ORDER BY to sort the results by GName in ascending order."], "pred_sql": "SELECT GName, GType FROM Video_Games ORDER BY GName ASC;", "gold_sql": "SELECT gname ,  gtype FROM Video_games ORDER BY gname", "source_tables": ["video_games"]}
{"sample_id": 5977, "db_id": "game_1", "question": "Show all video games with type Collectible card game.", "rationale": ["Identify the table that contains the information about video games, which is the Video_Games table.", "Determine the column that specifies the type of video game, which is GType.", "Formulate a SQL query to select all columns from the Video_Games table where the GType is equal to 'Collectible card game'."], "pred_sql": "SELECT * FROM Video_Games WHERE GType = 'Collectible card game';", "gold_sql": "SELECT gname FROM Video_games WHERE gtype  =  'Collectible card game'", "source_tables": ["video_games"]}
{"sample_id": 5978, "db_id": "game_1", "question": "What are the names of all video games that are collectible cards?", "rationale": ["Identify the table that contains the information about video games, which is the Video_Games table.", "Determine the relevant column that contains the names of the video games, which is GName.", "Identify the column that specifies the type or genre of the video game, which is GType.", "Formulate a query to select the GName from the Video_Games table where the GType is 'collectible cards'."], "pred_sql": "SELECT GName FROM Video_Games WHERE GType = 'collectible cards';", "gold_sql": "SELECT gname FROM Video_games WHERE gtype  =  'Collectible card game'", "source_tables": ["video_games"]}
{"sample_id": 5979, "db_id": "game_1", "question": "What is the type of video game Call of Destiny.", "rationale": ["Identify the table that contains information about video games, which is the Video_Games table.", "Determine the column that holds the name of the video game, which is GName.", "Determine the column that holds the type of the video game, which is GType.", "Construct a SQL SELECT statement to retrieve the GType where the GName matches 'Call of Destiny'."], "pred_sql": "SELECT GType FROM Video_Games WHERE GName = 'Call of Destiny';", "gold_sql": "SELECT gtype FROM Video_games WHERE gname  =  'Call of Destiny'", "source_tables": ["video_games"]}
{"sample_id": 5980, "db_id": "game_1", "question": "What type of game is Call of Destiny?", "rationale": ["Identify the table that contains information about video games, which is the Video_Games table.", "Determine the column that holds the name of the game, which is GName.", "Determine the column that holds the type of the game, which is GType.", "Construct a SQL query to select the GType from the Video_Games table where the GName matches 'Call of Destiny'."], "pred_sql": "SELECT GType FROM Video_Games WHERE GName = 'Call of Destiny';", "gold_sql": "SELECT gtype FROM Video_games WHERE gname  =  'Call of Destiny'", "source_tables": ["video_games"]}
{"sample_id": 5981, "db_id": "game_1", "question": "How many video games have type Massively multiplayer online game?", "rationale": ["Identify the table that contains the information about video games, which is the Video_Games table.", "Determine the column that specifies the type of video game, which is GType.", "We need to count the number of video games that have the type 'Massively multiplayer online game'.", "Use the COUNT() function to count the number of records that match the specified type.", "Construct the SQL query to select the count from the Video_Games table where GType equals 'Massively multiplayer online game'."], "pred_sql": "SELECT COUNT(*) AS NumberOfGames FROM Video_Games WHERE GType = 'Massively multiplayer online game';", "gold_sql": "SELECT count(*) FROM Video_games WHERE gtype  =  'Massively multiplayer online game'", "source_tables": ["video_games"]}
{"sample_id": 5982, "db_id": "game_1", "question": "Count the number of video games with Massively multiplayer online game type .", "rationale": ["Identify the table that contains the information about video games, which is the Video_Games table.", "Determine the column that specifies the type of video game, which is GType.", "Formulate a query to count the number of entries in the Video_Games table where the GType is 'Massively multiplayer online'.", "Use the COUNT() function to get the total number of games that match this criteria."], "pred_sql": "SELECT COUNT(*) AS NumberOfGames FROM Video_Games WHERE GType = 'Massively multiplayer online';", "gold_sql": "SELECT count(*) FROM Video_games WHERE gtype  =  'Massively multiplayer online game'", "source_tables": ["video_games"]}
{"sample_id": 5983, "db_id": "game_1", "question": "Show all video game types and the number of video games in each type.", "rationale": ["Identify the table that contains the relevant data: Video_Games.", "Determine the columns needed: GType for the type of video game and GameID to count the number of games.", "Use the COUNT() function to count the number of GameID entries for each GType.", "Group the results by GType to get the count for each type of video game."], "pred_sql": "SELECT GType, COUNT(GameID) AS NumberOfGames FROM Video_Games GROUP BY GType;", "gold_sql": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype", "source_tables": ["video_games"]}
{"sample_id": 5984, "db_id": "game_1", "question": "What are the types of video games and how many are in each type?", "rationale": ["Identify the table that contains the information about video games, which is the Video_Games table.", "Determine the columns needed: GType for the type of video game and a count of games for each type.", "Use the COUNT() function to count the number of games for each type.", "Group the results by GType to get the count for each type of video game."], "pred_sql": "SELECT GType, COUNT(*) AS GameCount FROM Video_Games GROUP BY GType;", "gold_sql": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype", "source_tables": ["video_games"]}
{"sample_id": 5985, "db_id": "game_1", "question": "Which game type has most number of games?", "rationale": ["Identify the relevant table: The query is asking about game types and the number of games, which relates to the Video_Games table.", "Determine the necessary columns: We need the GType column to group by game types and count the number of games for each type.", "Use the COUNT function: To find out how many games exist for each game type, we will use the COUNT function.", "Group the results: We will group the results by GType to aggregate the counts for each type of game.", "Order the results: To find the game type with the most games, we will order the results in descending order based on the count.", "Limit the results: Since we only want the game type with the most games, we will limit the results to 1."], "pred_sql": "SELECT GType, COUNT(*) AS NumberOfGames FROM Video_Games GROUP BY GType ORDER BY NumberOfGames DESC LIMIT 1;", "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1", "source_tables": ["video_games"]}
{"sample_id": 5986, "db_id": "game_1", "question": "What type has the most games?", "rationale": ["Identify the relevant table: The query is asking about the type of games, which is found in the Video_Games table under the GType column.", "Count the number of games for each type: We need to count the number of GameID entries for each GType to determine how many games exist for each type.", "Group the results by game type: Use GROUP BY GType to aggregate the counts for each type of game.", "Order the results: To find the type with the most games, we will order the results in descending order based on the count of games.", "Limit the results to the top entry: Use LIMIT 1 to get only the type with the highest count."], "pred_sql": "SELECT GType, COUNT(GameID) AS TotalGames FROM Video_Games GROUP BY GType ORDER BY TotalGames DESC LIMIT 1;", "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1", "source_tables": ["video_games"]}
{"sample_id": 5987, "db_id": "game_1", "question": "Which game type has least number of games?", "rationale": ["Identify the relevant table: The query requires information about game types, which is found in the Video_Games table.", "Determine the necessary columns: We need the GType column to group by game types and count the number of games.", "Group the results: Use GROUP BY GType to aggregate the data by game type.", "Count the number of games: Use COUNT(GameID) to count how many games exist for each game type.", "Order the results: Use ORDER BY COUNT(GameID) ASC to sort the game types by the number of games in ascending order.", "Limit the results: Use LIMIT 1 to get only the game type with the least number of games."], "pred_sql": "SELECT GType FROM Video_Games GROUP BY GType ORDER BY COUNT(GameID) ASC LIMIT 1;", "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1", "source_tables": ["video_games"]}
{"sample_id": 5988, "db_id": "game_1", "question": "What is the type with the fewest games?", "rationale": ["Identify the relevant table: The query is asking about the type of video games, so we will focus on the Video_Games table.", "Count the number of games for each type: We need to group the results by the GType column and count the number of GameID entries for each type.", "Order the results: To find the type with the fewest games, we will order the results by the count of games in ascending order.", "Limit the results: Since we only want the type with the fewest games, we will limit the results to 1."], "pred_sql": "SELECT GType, COUNT(GameID) AS GameCount FROM Video_Games GROUP BY GType ORDER BY GameCount ASC LIMIT 1;", "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1", "source_tables": ["video_games"]}
{"sample_id": 5989, "db_id": "game_1", "question": "Show ids for all students who live in CHI.", "rationale": ["Identify the table that contains the information about students, which is the 'Student' table.", "Determine the column that represents the city where the student resides, which is 'city_code'.", "Specify the condition to filter students who live in the city with the code 'CHI'.", "Construct the SQL query to select the 'StuID' from the 'Student' table where the 'city_code' is 'CHI'."], "pred_sql": "SELECT StuID FROM Student WHERE city_code = 'CHI';", "gold_sql": "SELECT StuID FROM Student WHERE city_code  =  'CHI'", "source_tables": ["student"]}
{"sample_id": 5990, "db_id": "game_1", "question": "What are the ids of all students who live in CHI?", "rationale": ["Identify the table that contains the information about students, which is the 'Student' table.", "Determine the column that contains the city code, which is 'city_code'.", "Formulate a query to select the 'StuID' of students where 'city_code' is equal to 'CHI'."], "pred_sql": "SELECT StuID FROM Student WHERE city_code = 'CHI';", "gold_sql": "SELECT StuID FROM Student WHERE city_code  =  'CHI'", "source_tables": ["student"]}
{"sample_id": 5991, "db_id": "game_1", "question": "Show ids for all students who have advisor 1121.", "rationale": ["Identify the table that contains the information about students, which is the 'Student' table.", "Determine the column that holds the advisor information, which is the 'Advisor' column in the 'Student' table.", "Formulate a SQL query to select the 'StuID' from the 'Student' table where the 'Advisor' is equal to '1121'."], "pred_sql": "SELECT StuID FROM Student WHERE Advisor = '1121';", "gold_sql": "SELECT StuID FROM Student WHERE Advisor  =  1121", "source_tables": ["student"]}
{"sample_id": 5992, "db_id": "game_1", "question": "What are the ids of all students who have advisor number 1121?", "rationale": ["Identify the table that contains the information about students and their advisors, which is the 'Student' table.", "Determine the column that stores the advisor information, which is 'Advisor'.", "Formulate a SQL query to select the 'StuID' from the 'Student' table where the 'Advisor' is equal to '1121'."], "pred_sql": "SELECT StuID FROM Student WHERE Advisor = '1121';", "gold_sql": "SELECT StuID FROM Student WHERE Advisor  =  1121", "source_tables": ["student"]}
{"sample_id": 5993, "db_id": "game_1", "question": "Show first name for all students with major 600.", "rationale": ["Identify the table that contains the required information: The 'Student' table contains the first names and majors of students.", "Determine the specific columns needed: We need the 'Fname' column for the first names.", "Specify the condition for filtering: We want to filter students based on their 'Major', specifically those with a major of '600'.", "Construct the SQL query using the SELECT statement to retrieve the 'Fname' from the 'Student' table where the 'Major' is '600'."], "pred_sql": "SELECT Fname FROM Student WHERE Major = '600';", "gold_sql": "SELECT Fname FROM Student WHERE Major  =  600", "source_tables": ["student"]}
{"sample_id": 5994, "db_id": "game_1", "question": "What are the first names for all students who are from the major numbered 600?", "rationale": ["Identify the table that contains the information about students, which is the 'Student' table.", "Determine the column that contains the first names of the students, which is 'Fname'.", "Identify the condition needed to filter the students based on their major, which is the 'Major' column.", "Construct the SQL query to select the 'Fname' from the 'Student' table where 'Major' equals '600'."], "pred_sql": "SELECT Fname FROM Student WHERE Major = '600';", "gold_sql": "SELECT Fname FROM Student WHERE Major  =  600", "source_tables": ["student"]}
{"sample_id": 5995, "db_id": "game_1", "question": "Show the average, minimum, and maximum age for different majors.", "rationale": ["Identify the relevant table: The 'Student' table contains the 'Age' and 'Major' columns needed for the query.", "Determine the required calculations: We need to calculate the average, minimum, and maximum age for each major.", "Use aggregate functions: Use AVG() for average, MIN() for minimum, and MAX() for maximum age.", "Group the results: Use GROUP BY clause to group the results by 'Major' to get the statistics for each major."], "pred_sql": "SELECT Major, AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM Student GROUP BY Major;", "gold_sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major", "source_tables": ["student"]}
{"sample_id": 5996, "db_id": "game_1", "question": "What are the average, minimum, and max ages for each of the different majors?", "rationale": ["Identify the relevant table: The 'Student' table contains the 'Age' and 'Major' columns needed for the query.", "Determine the required calculations: We need to calculate the average, minimum, and maximum ages, which can be done using the AVG(), MIN(), and MAX() functions in SQL.", "Group the results by Major: To get the statistics for each major, we will use the GROUP BY clause on the 'Major' column.", "Construct the SQL query: Combine the SELECT statement with the aggregate functions and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT Major, AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM Student GROUP BY Major;", "gold_sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major", "source_tables": ["student"]}
{"sample_id": 5997, "db_id": "game_1", "question": "Show all advisors who have at least two students.", "rationale": ["Identify the relevant table: The 'Student' table contains information about students and their advisors.", "Determine the required information: We need to find advisors who have at least two students.", "Group the results by the 'Advisor' column to aggregate the data based on each advisor.", "Use the COUNT function to count the number of students (StuID) for each advisor.", "Apply the HAVING clause to filter the groups, ensuring we only include advisors with a count of two or more students."], "pred_sql": "SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) >= 2;", "gold_sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2", "source_tables": ["student"]}
{"sample_id": 5998, "db_id": "game_1", "question": "What are the advisors", "rationale": ["The user wants to know about the advisors.", "To get the list of advisors, we need to select the 'Advisor' column from the 'Student' table.", "Using DISTINCT will ensure that we get unique advisor names without duplicates."], "pred_sql": "SELECT DISTINCT Advisor FROM Student;", "gold_sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2", "source_tables": ["student"]}
{"sample_id": 5999, "db_id": "game_1", "question": "How many sports do we have?", "rationale": ["Identify the relevant table: SportsInfo contains information about sports.", "Determine the requirement: We need to count the number of distinct sports.", "Use the COUNT function to count distinct values in the SportName column.", "Construct the SQL query to select the count of distinct SportName from SportsInfo."], "pred_sql": "SELECT COUNT(DISTINCT SportName) AS TotalSports FROM SportsInfo;", "gold_sql": "SELECT count(DISTINCT sportname) FROM Sportsinfo", "source_tables": ["sportsinfo"]}
