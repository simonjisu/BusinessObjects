{"sample_id": 500, "db_id": "battle_death", "question": "What is the ship id and name that caused most total injuries?", "rationale": ["Identify the relevant tables: 'death' for injuries and 'ship' for ship details.", "We need to find the ship that caused the most total injuries, so we will join the 'death' table with the 'ship' table on the ship ID.", "We will group the results by the ship ID to aggregate the total injuries caused by each ship.", "We will use the SUM function to calculate the total number of injuries for each ship.", "Finally, we will order the results in descending order based on the total injuries and limit the output to the top result."], "pred_sql": "SELECT d.caused_by_ship_id, s.name FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY d.caused_by_ship_id ORDER BY SUM(d.injured) DESC LIMIT 1;", "gold_sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship", "death"]}
{"sample_id": 501, "db_id": "battle_death", "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "rationale": ["Identify the table that contains the information about battles, which is the 'battle' table.", "Determine the columns needed to answer the query, specifically the 'name' column for battle names.", "Apply the DISTINCT keyword to ensure that only unique battle names are returned.", "Add a WHERE clause to filter the results to only include battles where the 'bulgarian_commander' is 'Kaloyan' and the 'latin_commander' is 'Baldwin I'."], "pred_sql": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';", "gold_sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "source_tables": ["battle"]}
{"sample_id": 502, "db_id": "battle_death", "question": "How many different results are there for the battles?", "rationale": ["Identify the table that contains the results of the battles, which is the 'battle' table.", "To find the number of different results, we need to count distinct values in the 'result' column of the 'battle' table.", "The SQL query will use the COUNT function along with DISTINCT to count unique results.", "The final SQL query will select the count of distinct results from the battle table."], "pred_sql": "SELECT COUNT(DISTINCT result) AS different_results FROM battle;", "gold_sql": "SELECT count(DISTINCT RESULT) FROM battle", "source_tables": ["battle"]}
{"sample_id": 503, "db_id": "battle_death", "question": "How many battles did not lose any ship with tonnage '225'?", "rationale": ["Identify the battles that did not lose any ships.", "To find battles that did not lose any ships, we need to check the 'battle' table and exclude those battles that have lost ships with a specific tonnage.", "We will use a subquery to find all battles that lost ships with a tonnage of '225'.", "The subquery will select 'lost_in_battle' from the 'ship' table where 'tonnage' is '225'.", "The main query will count the number of battles whose 'id' is not in the list of battles returned by the subquery."], "pred_sql": "SELECT COUNT(*) AS battles_without_lost_ships FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225 AND lost_in_battle IS NOT NULL);", "gold_sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "source_tables": ["battle", "ship"]}
{"sample_id": 504, "db_id": "battle_death", "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "rationale": ["Identify the tables involved: We need data from the 'battle' table for the battle name and date, and the 'ship' table to check for lost ships.", "Determine the relationship: The 'ship' table has a foreign key 'lost_in_battle' that references the 'id' in the 'battle' table, indicating which battle a ship was lost in.", "Filter the ships: We need to filter the ships to only include those named 'Lettice' and 'HMS Atalanta'.", "Construct the SQL query: Use a JOIN to combine the 'battle' and 'ship' tables based on the relationship, and select the required fields (battle name and date) where the ship names match the specified names."], "pred_sql": "SELECT b.name, b.date \nFROM battle b \nJOIN ship s ON b.id = s.lost_in_battle \nWHERE s.name IN ('Lettice', 'HMS Atalanta');", "gold_sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "source_tables": ["battle", "ship"]}
{"sample_id": 505, "db_id": "battle_death", "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "rationale": ["Identify the relevant tables: 'battle' for battle details and 'ship' for ship details.", "We need to select the names, results, and Bulgarian commanders from the 'battle' table.", "We need to filter battles where no ships were lost, which corresponds to 'lost_in_battle' being 0 in the 'ship' table.", "We also need to ensure that the ships are located in the 'English Channel', which is a condition on the 'location' column in the 'ship' table.", "Join the 'battle' table with the 'ship' table on the condition that the battle ID matches the lost_in_battle ID in the ship table.", "Construct the SQL query to select the required fields with the specified conditions."], "pred_sql": "SELECT b.name, b.result, b.bulgarian_commander \nFROM battle b \nJOIN ship s ON b.id = s.lost_in_battle \nWHERE s.lost_in_battle = 0 AND s.location = 'English Channel';", "gold_sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "source_tables": ["battle", "ship"]}
{"sample_id": 506, "db_id": "battle_death", "question": "What are the notes of the death events which has substring 'East'?", "rationale": ["Identify the table that contains the relevant information: the 'death' table has a 'note' column that we need to query.", "Determine the condition for filtering the results: we need to find notes that contain the substring 'East'.", "Use the SQL LIKE operator with wildcards to search for the substring in the 'note' column.", "Construct the SQL SELECT statement to retrieve the 'note' column from the 'death' table where the condition is met."], "pred_sql": "SELECT note FROM death WHERE note LIKE '%East%';", "gold_sql": "SELECT note FROM death WHERE note LIKE '%East%'", "source_tables": ["death"]}
{"sample_id": 507, "db_id": "student_transcripts_tracking", "question": "what are all the addresses including line 1 and line 2?", "rationale": ["Identify the table that contains address information, which is the 'Addresses' table.", "Determine the specific columns needed from the 'Addresses' table, which are 'line_1' and 'line_2'.", "Construct the SQL query to select 'line_1' and 'line_2' from the 'Addresses' table."], "pred_sql": "SELECT line_1, line_2 FROM Addresses;", "gold_sql": "SELECT line_1 ,  line_2 FROM addresses", "source_tables": ["addresses"]}
{"sample_id": 508, "db_id": "student_transcripts_tracking", "question": "What is the first and second line for all addresses?", "rationale": ["Identify the table that contains the address information, which is the 'Addresses' table.", "Determine the specific columns needed from the 'Addresses' table, which are 'line_1' and 'line_2'.", "Construct the SQL SELECT statement to retrieve 'line_1' and 'line_2' from the 'Addresses' table."], "pred_sql": "SELECT line_1, line_2 FROM Addresses;", "gold_sql": "SELECT line_1 ,  line_2 FROM addresses", "source_tables": ["addresses"]}
{"sample_id": 509, "db_id": "student_transcripts_tracking", "question": "How many courses in total are listed?", "rationale": ["Identify the table that contains the information about courses, which is the 'Courses' table.", "To find the total number of courses, we need to count the entries in the 'Courses' table.", "Use the COUNT() function to count all rows in the 'Courses' table.", "Select the count with an alias 'total_courses' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_courses FROM Courses;", "gold_sql": "SELECT count(*) FROM Courses", "source_tables": ["courses"]}
{"sample_id": 510, "db_id": "student_transcripts_tracking", "question": "How many courses are there?", "rationale": ["Identify the table that contains course information, which is the 'Courses' table.", "To find out how many courses there are, we need to count the number of entries in the 'Courses' table.", "Use the COUNT() function to count all rows in the 'Courses' table.", "Select the count with an alias 'total_courses' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_courses FROM Courses;", "gold_sql": "SELECT count(*) FROM Courses", "source_tables": ["courses"]}
{"sample_id": 511, "db_id": "student_transcripts_tracking", "question": "How is the math course described?", "rationale": ["Identify the table that contains course information, which is the 'Courses' table.", "Determine the relevant column that holds the description of the course, which is 'course_description'.", "Filter the results to only include the math course by using a WHERE clause that specifies the course name as 'math'."], "pred_sql": "SELECT course_description FROM Courses WHERE course_name = 'math';", "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "source_tables": ["courses"]}
{"sample_id": 512, "db_id": "student_transcripts_tracking", "question": "What are the descriptions for all the math courses?", "rationale": ["Identify the relevant table: The query is asking for descriptions of math courses, which are stored in the 'Courses' table.", "Determine the relevant column: The 'course_description' column contains the descriptions of the courses.", "Filter for math courses: Use a WHERE clause to filter courses that have 'math' in their name, which can be done using the LIKE operator with a wildcard."], "pred_sql": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%';", "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "source_tables": ["courses"]}
{"sample_id": 513, "db_id": "student_transcripts_tracking", "question": "What is the zip code of the address in the city Port Chelsea?", "rationale": ["Identify the table that contains the zip code and city information, which is the Addresses table.", "Determine the specific column needed for the output, which is zip_postcode.", "Formulate the SQL query to select the zip_postcode from the Addresses table where the city matches 'Port Chelsea'."], "pred_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';", "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "source_tables": ["addresses"]}
{"sample_id": 514, "db_id": "student_transcripts_tracking", "question": "What is the zip code for Port Chelsea?", "rationale": ["Identify the relevant table: The query is asking for a zip code, which is stored in the Addresses table.", "Determine the condition: The query specifies the city 'Port Chelsea', so we need to filter the results based on this city.", "Construct the SQL query: We will select the zip_postcode from the Addresses table where the city matches 'Port Chelsea'."], "pred_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';", "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "source_tables": ["addresses"]}
{"sample_id": 515, "db_id": "student_transcripts_tracking", "question": "Which department offers the most number of degrees? List department name and id.", "rationale": ["Identify the relevant tables: Departments and Degree_Programs.", "We need to find the department that offers the most degrees, so we will join the Departments table with the Degree_Programs table on the department_id.", "We will group the results by department_id and department_name to count the number of degrees offered by each department.", "Use the COUNT function to count the number of degree programs for each department.", "Order the results in descending order based on the count of degree programs to get the department with the most degrees at the top.", "Limit the results to 1 to get only the department with the highest count."], "pred_sql": "SELECT d.department_name, d.department_id\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id, d.department_name\nORDER BY COUNT(dp.degree_program_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["departments", "degree_programs"]}
{"sample_id": 516, "db_id": "student_transcripts_tracking", "question": "What is the name and id of the department with the most number of degrees ?", "rationale": ["Identify the relevant tables: Departments and Degree_Programs.", "We need to find the department with the most degrees, so we will join the Departments table with the Degree_Programs table on the department_id.", "We will group the results by department_id and department_name to count the number of degrees associated with each department.", "We will order the results in descending order based on the count of degree_program_id to get the department with the most degrees at the top.", "Finally, we will limit the results to 1 to get only the department with the highest count."], "pred_sql": "SELECT d.department_name, d.department_id \nFROM Departments d \nJOIN Degree_Programs dp ON d.department_id = dp.department_id \nGROUP BY d.department_id, d.department_name \nORDER BY COUNT(dp.degree_program_id) DESC \nLIMIT 1;", "gold_sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "source_tables": ["departments", "degree_programs"]}
{"sample_id": 517, "db_id": "student_transcripts_tracking", "question": "How many departments offer any degree?", "rationale": ["Identify the relevant tables: We need to find the number of departments that offer any degree, which involves the Departments and Degree_Programs tables.", "Determine the relationship: The Degree_Programs table has a foreign key that references the Departments table, indicating which department offers which degree.", "Count distinct departments: We want to count the unique department IDs from the Departments table that have corresponding entries in the Degree_Programs table.", "Construct the SQL query: Use a JOIN to connect the Departments and Degree_Programs tables and count the distinct department IDs."], "pred_sql": "SELECT COUNT(DISTINCT Departments.department_id) AS department_count\nFROM Departments\nJOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id;", "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "source_tables": ["degree_programs"]}
{"sample_id": 518, "db_id": "student_transcripts_tracking", "question": "How many different departments offer degrees?", "rationale": ["Identify the relevant table: Degree_Programs contains information about degree programs and their associated departments.", "To find out how many different departments offer degrees, we need to count the distinct department_ids in the Degree_Programs table.", "Use the COUNT function to count the distinct department_ids and alias the result as number_of_departments."], "pred_sql": "SELECT COUNT(DISTINCT department_id) AS number_of_departments FROM Degree_Programs;", "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "source_tables": ["degree_programs"]}
{"sample_id": 519, "db_id": "student_transcripts_tracking", "question": "How many different degree names are offered?", "rationale": ["Identify the table that contains degree program information, which is the Degree_Programs table.", "Determine the relevant column that holds the degree names, which is degree_summary_name.", "To find the number of different degree names, use the COUNT function with DISTINCT to count unique entries in the degree_summary_name column."], "pred_sql": "SELECT COUNT(DISTINCT degree_summary_name) AS different_degree_names FROM Degree_Programs;", "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "source_tables": ["degree_programs"]}
{"sample_id": 520, "db_id": "student_transcripts_tracking", "question": "How many different degrees are offered?", "rationale": ["Identify the table that contains information about degrees, which is the Degree_Programs table.", "To find the number of different degrees offered, we need to count distinct entries in the degree_summary_name column.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique degree names."], "pred_sql": "SELECT COUNT(DISTINCT degree_summary_name) AS different_degrees FROM Degree_Programs;", "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "source_tables": ["degree_programs"]}
{"sample_id": 521, "db_id": "student_transcripts_tracking", "question": "How many degrees does the engineering department offer?", "rationale": ["Identify the relevant table: Degree_Programs contains information about degree programs.", "Determine the condition: We need to filter the degree programs by the engineering department.", "Find the department_id for the engineering department: This requires a subquery to select the department_id from the Departments table where the department_name is 'Engineering'.", "Count the number of degree programs: Use COUNT(*) to count the number of entries in Degree_Programs that match the engineering department's id."], "pred_sql": "SELECT COUNT(*) AS degree_count FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');", "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "source_tables": ["departments", "degree_programs"]}
{"sample_id": 522, "db_id": "student_transcripts_tracking", "question": "How many degrees does the engineering department have?", "rationale": ["Identify the relevant table: Degree_Programs contains the degree programs.", "Determine the condition: We need to filter by the engineering department.", "Find the department_id for the engineering department: This requires a subquery to the Departments table to get the department_id where department_name is 'Engineering'.", "Count the number of degree programs associated with that department_id in the Degree_Programs table."], "pred_sql": "SELECT COUNT(*) AS degree_count FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');", "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "source_tables": ["departments", "degree_programs"]}
{"sample_id": 523, "db_id": "student_transcripts_tracking", "question": "What are the names and descriptions of all the sections?", "rationale": ["Identify the table that contains the required information: the Sections table.", "Determine the specific columns needed: section_name and section_description.", "Construct the SQL SELECT statement to retrieve these columns from the Sections table."], "pred_sql": "SELECT section_name, section_description FROM Sections;", "gold_sql": "SELECT section_name ,  section_description FROM Sections", "source_tables": ["sections"]}
{"sample_id": 524, "db_id": "student_transcripts_tracking", "question": "What are the names and descriptions for all the sections?", "rationale": ["Identify the table that contains the required information: the Sections table.", "Determine the specific columns needed: section_name and section_description.", "Construct the SQL SELECT statement to retrieve these columns from the Sections table."], "pred_sql": "SELECT section_name, section_description FROM Sections;", "gold_sql": "SELECT section_name ,  section_description FROM Sections", "source_tables": ["sections"]}
{"sample_id": 525, "db_id": "student_transcripts_tracking", "question": "What are the names and id of courses having at most 2 sections?", "rationale": ["Identify the relevant tables: Courses and Sections.", "We need to retrieve course names and IDs, so we will select 'course_name' and 'course_id' from the Courses table.", "To find the number of sections per course, we will join the Courses table with the Sections table on 'course_id'.", "We will group the results by 'course_id' to aggregate the sections for each course.", "Finally, we will use the HAVING clause to filter courses that have at most 2 sections, using COUNT(Sections.section_id) <= 2."], "pred_sql": "SELECT Courses.course_name, Courses.course_id \nFROM Courses \nJOIN Sections ON Courses.course_id = Sections.course_id \nGROUP BY Courses.course_id \nHAVING COUNT(Sections.section_id) <= 2;", "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "source_tables": ["courses", "sections"]}
{"sample_id": 526, "db_id": "student_transcripts_tracking", "question": "What are the names and ids of every course with less than 2 sections?", "rationale": ["Identify the relevant tables: Courses and Sections.", "We need to retrieve course names and ids, so we will select 'course_id' and 'course_name' from the Courses table.", "To find the number of sections for each course, we will perform a LEFT JOIN between the Courses and Sections tables on 'course_id'.", "We will group the results by 'course_id' to aggregate the sections for each course.", "Finally, we will use the HAVING clause to filter the results to only include courses that have less than 2 sections."], "pred_sql": "SELECT Courses.course_id, Courses.course_name FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(Sections.section_id) < 2;", "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "source_tables": ["courses", "sections"]}
{"sample_id": 527, "db_id": "student_transcripts_tracking", "question": "List the section_name in reversed lexicographical order.", "rationale": ["Identify the table that contains the required data: The 'Sections' table contains the 'section_name' column.", "Determine the required operation: The user wants to list the 'section_name' values.", "Specify the order: The user requests the names to be in reversed lexicographical order, which corresponds to descending order in SQL.", "Construct the SQL query: Use SELECT to get 'section_name' from 'Sections' and ORDER BY to sort it in descending order."], "pred_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "source_tables": ["sections"]}
{"sample_id": 528, "db_id": "student_transcripts_tracking", "question": "What are the names of the sections in reverse alphabetical order?", "rationale": ["Identify the table that contains the section names, which is the 'Sections' table.", "Select the 'section_name' column from the 'Sections' table.", "To get the names in reverse alphabetical order, use the ORDER BY clause with DESC (descending) on the 'section_name' column."], "pred_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "source_tables": ["sections"]}
{"sample_id": 529, "db_id": "student_transcripts_tracking", "question": "What is the semester which most student registered in? Show both the name and the id.", "rationale": ["Identify the relevant table: We need to find information about semesters and student registrations, so we will use the Semesters and Student_Enrolment tables.", "Determine the required columns: We need to retrieve the semester_id and semester_name from the Semesters table.", "Find the semester with the most registrations: We will use a subquery to count the number of student enrolments for each semester and order them in descending order to find the semester with the highest count.", "Limit the results: We will limit the subquery to return only the top result (the semester with the most registrations).", "Combine the results: The main query will select the semester_id and semester_name from the Semesters table where the semester_id matches the one returned by the subquery."], "pred_sql": "SELECT semester_id, semester_name FROM Semesters WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1)", "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "semesters"]}
{"sample_id": 530, "db_id": "student_transcripts_tracking", "question": "For each semester, what is the name and id of the one with the most students registered?", "rationale": ["Identify the relevant table: Semesters and Student_Enrolment.", "We need to count the number of students registered for each semester.", "Group the results by semester_id to get the count of students for each semester.", "Order the results by the count of students in descending order to find the semester with the most students.", "Limit the results to 1 to get only the semester with the highest count.", "Select the semester_id and semester_name from the Semesters table for the semester identified."], "pred_sql": "SELECT semester_id, semester_name\nFROM Semesters\nWHERE semester_id IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n    GROUP BY semester_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "semesters"]}
{"sample_id": 531, "db_id": "student_transcripts_tracking", "question": "What is the description of the department whose name has the substring the computer?", "rationale": ["Identify the table that contains department information, which is the 'Departments' table.", "Determine the column that holds the department name, which is 'department_name'.", "Use the SQL 'LIKE' operator to find department names that contain the substring 'computer'.", "Select the 'department_description' column to retrieve the description of the matching department."], "pred_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';", "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "source_tables": ["departments"]}
{"sample_id": 532, "db_id": "student_transcripts_tracking", "question": "What is the department description for the one whose name has the word computer?", "rationale": ["Identify the table that contains department information, which is the Departments table.", "Determine the column that holds the department description, which is department_description.", "Identify the column that contains the department name, which is department_name.", "Formulate a query to select the department_description from the Departments table where the department_name contains the word 'computer'.", "Use the SQL LIKE operator with wildcards to match any department name that includes 'computer'."], "pred_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';", "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "source_tables": ["departments"]}
{"sample_id": 533, "db_id": "student_transcripts_tracking", "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "rationale": ["Identify the relevant tables: Students and Student_Enrolment are needed to get student details and their enrolment information.", "Join the Students table with the Student_Enrolment table on student_id to link students with their enrolment records.", "Use a subquery to find students who are enrolled in 2 distinct degree programs within the same semester. This is done by grouping by student_id and semester_id and counting the distinct degree_program_id.", "Select the first name, middle name, last name, and student_id of those students who meet the criteria."], "pred_sql": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id \nFROM Students s \nJOIN Student_Enrolment se ON s.student_id = se.student_id \nJOIN ( \n    SELECT student_id \n    FROM Student_Enrolment \n    GROUP BY student_id, semester_id \n    HAVING COUNT(DISTINCT degree_program_id) = 2 \n) AS enrolled_students ON s.student_id = enrolled_students.student_id;", "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "source_tables": ["student_enrolment", "students"]}
{"sample_id": 534, "db_id": "student_transcripts_tracking", "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "rationale": ["Identify the relevant tables: Students and Student_Enrolment.", "We need to select the first, middle, and last names of students, along with their IDs, so we will select 'student_id', 'first_name', 'middle_name', and 'last_name' from the Students table.", "We need to join the Students table with the Student_Enrolment table to access the degree program information for each student.", "We will group the results by 'student_id' to count the number of distinct degree programs each student is enrolled in.", "We will use the HAVING clause to filter the results to only include students who are enrolled in exactly 2 degree programs."], "pred_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2;", "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "source_tables": ["student_enrolment", "students"]}
{"sample_id": 535, "db_id": "student_transcripts_tracking", "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "rationale": ["Identify the relevant tables: Students, Student_Enrolment, and Degree_Programs are needed to find students enrolled in degree programs.", "Determine the columns to select: We need to select first_name, middle_name, and last_name from the Students table.", "Establish the relationships: Students are linked to their enrolment records through Student_Enrolment, and enrolment records are linked to degree programs through Degree_Programs.", "Filter the results: We want to find students enrolled in a Bachelor degree program, so we will use a WHERE clause to filter Degree_Programs.degree_summary_name for entries that contain 'Bachelor'.", "Construct the SQL query using JOINs to connect the tables and the SELECT statement to retrieve the desired columns."], "pred_sql": "SELECT Students.first_name, Students.middle_name, Students.last_name \nFROM Students \nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%';", "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs", "students"]}
{"sample_id": 536, "db_id": "student_transcripts_tracking", "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "rationale": ["Identify the relevant tables: Students, Student_Enrolment, and Degree_Programs.", "We need to select the first_name, middle_name, and last_name from the Students table.", "To find out who is enrolled in a Bachelors program, we need to join the Students table with the Student_Enrolment table on student_id.", "Next, we join the Student_Enrolment table with the Degree_Programs table on degree_program_id to access the degree program details.", "We filter the results to include only those degree programs that have 'Bachelors' in their name using a LIKE clause."], "pred_sql": "SELECT s.first_name, s.middle_name, s.last_name \nFROM Students s \nJOIN Student_Enrolment se ON s.student_id = se.student_id \nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id \nWHERE dp.degree_summary_name LIKE '%Bachelors%';", "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs", "students"]}
{"sample_id": 537, "db_id": "student_transcripts_tracking", "question": "Find the kind of program which most number of students are enrolled in?", "rationale": ["Identify the relevant tables: Degree_Programs and Student_Enrolment are needed to find the degree programs and the number of students enrolled in each.", "Join the Degree_Programs table with the Student_Enrolment table on the degree_program_id to associate students with their respective programs.", "Use COUNT() to count the number of student enrolment records for each degree program.", "Group the results by degree_summary_name to aggregate the counts for each program.", "Order the results in descending order based on the student count to find the program with the most students enrolled.", "Limit the results to 1 to get only the program with the highest enrollment."], "pred_sql": "SELECT dp.degree_summary_name, COUNT(se.student_enrolment_id) AS student_count\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_summary_name\nORDER BY student_count DESC\nLIMIT 1;", "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}
{"sample_id": 538, "db_id": "student_transcripts_tracking", "question": "What is the degree summary name that has the most number of students enrolled?", "rationale": ["Identify the relevant tables: Degree_Programs and Student_Enrolment are needed to find the degree summary name and the number of students enrolled.", "Join the Degree_Programs table with the Student_Enrolment table on the degree_program_id to associate each degree program with its enrolled students.", "Group the results by degree_summary_name to count the number of students enrolled in each degree program.", "Use the COUNT function to count the number of students for each degree program.", "Order the results in descending order based on the count of students to find the program with the most enrollments.", "Limit the results to 1 to get only the degree program with the highest number of students."], "pred_sql": "SELECT dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}
{"sample_id": 539, "db_id": "student_transcripts_tracking", "question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "rationale": ["Identify the relevant tables: Degree_Programs and Student_Enrolment are needed to find the degree programs and their student enrollments.", "Join the Degree_Programs table with the Student_Enrolment table on the degree_program_id to associate each program with its enrolled students.", "Group the results by degree_program_id and degree_summary_name to count the number of students enrolled in each program.", "Use COUNT() to count the number of student_enrolment_id entries for each program, which indicates the number of students enrolled.", "Order the results by the count of students in descending order to find the program with the most enrollments.", "Limit the results to 1 to get only the program with the highest number of students."], "pred_sql": "SELECT dp.degree_program_id, dp.degree_summary_name, COUNT(se.student_enrolment_id) AS student_count\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY student_count DESC\nLIMIT 1;", "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}
{"sample_id": 540, "db_id": "student_transcripts_tracking", "question": "What is the program id and the summary of the degree that has the most students enrolled?", "rationale": ["Identify the relevant tables: Degree_Programs and Student_Enrolment.", "We need to find the degree program with the most students enrolled, so we will join Degree_Programs with Student_Enrolment on the degree_program_id.", "We will group the results by degree_program_id to count the number of students enrolled in each program.", "To find the program with the most students, we will order the results by the count of students in descending order.", "Finally, we will limit the results to 1 to get only the program with the highest enrollment."], "pred_sql": "SELECT dp.degree_program_id, dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}
{"sample_id": 541, "db_id": "student_transcripts_tracking", "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "rationale": ["Identify the relevant tables: Students and Student_Enrolment.", "We need to join these tables on the student_id to get student details along with their enrollment records.", "Count the number of enrollments for each student using COUNT() function on student_enrolment_id.", "Group the results by student_id to aggregate the count of enrollments for each student.", "Order the results in descending order based on the count of enrollments to find the student with the most enrollments.", "Limit the results to 1 to get only the top student."], "pred_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS number_of_enrollments\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nORDER BY number_of_enrollments DESC\nLIMIT 1;", "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "students"]}
{"sample_id": 542, "db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "rationale": ["Identify the relevant tables: Students and Student_Enrolment.", "We need to select the first name, middle name, last name, and student ID from the Students table.", "We also need to count the number of enrollments for each student from the Student_Enrolment table.", "Join the Students table with the Student_Enrolment table on the student_id field to link students with their enrollments.", "Group the results by student_id to aggregate the number of enrollments for each student.", "Order the results by the count of enrollments in descending order to find the student with the most enrollments.", "Limit the results to 1 to get only the top student."], "pred_sql": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS number_of_enrollments\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nORDER BY number_of_enrollments DESC\nLIMIT 1;", "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "students"]}
{"sample_id": 543, "db_id": "student_transcripts_tracking", "question": "Which semesters do not have any student enrolled? List the semester name.", "rationale": ["Identify the table that contains semester information, which is the 'Semesters' table.", "We need to find semesters that do not have any students enrolled, so we will look at the 'Student_Enrolment' table to see which semesters have student enrolments.", "We will use a subquery to select all distinct semester_ids from the 'Student_Enrolment' table.", "The main query will select semester names from the 'Semesters' table where the semester_id is not in the list of semester_ids returned by the subquery."], "pred_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment);", "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "source_tables": ["student_enrolment", "semesters"]}
{"sample_id": 544, "db_id": "student_transcripts_tracking", "question": "What is the name of the semester with no students enrolled?", "rationale": ["Identify the table that contains semester information, which is the 'Semesters' table.", "We need to find semesters that have no students enrolled, so we will look for semesters whose IDs are not present in the 'Student_Enrolment' table.", "The 'Student_Enrolment' table contains a 'semester_id' column that links students to the semesters they are enrolled in.", "We will use a subquery to select distinct 'semester_id' values from the 'Student_Enrolment' table.", "The main query will select 'semester_name' from the 'Semesters' table where the 'semester_id' is not in the list of IDs returned by the subquery."], "pred_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)", "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "source_tables": ["student_enrolment", "semesters"]}
{"sample_id": 545, "db_id": "student_transcripts_tracking", "question": "What are all the course names of the courses which ever have students enrolled in?", "rationale": ["Identify the relevant tables: Courses and Student_Enrolment_Courses.", "We need to find course names from the Courses table that have students enrolled, which is indicated by the Student_Enrolment_Courses table.", "Use a JOIN operation to connect the Courses table with the Student_Enrolment_Courses table on the course_id field.", "Select the course_name from the Courses table, ensuring to use DISTINCT to avoid duplicate course names."], "pred_sql": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;", "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "source_tables": ["courses", "student_enrolment_courses"]}
{"sample_id": 546, "db_id": "student_transcripts_tracking", "question": "What are the names of all courses that have some students enrolled?", "rationale": ["Identify the table that contains course information, which is the 'Courses' table.", "Identify the table that contains information about student enrolments in courses, which is the 'Student_Enrolment_Courses' table.", "To find courses with students enrolled, we need to join the 'Courses' table with the 'Student_Enrolment_Courses' table on the 'course_id' column.", "Select the 'course_name' from the 'Courses' table, ensuring to use DISTINCT to avoid duplicate course names in the result."], "pred_sql": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;", "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "source_tables": ["courses", "student_enrolment_courses"]}
{"sample_id": 547, "db_id": "student_transcripts_tracking", "question": "What's the name of the course with most number of enrollments?", "rationale": ["Identify the relevant tables: Courses and Student_Enrolment_Courses.", "We need to find the course name, so we will select the 'course_name' from the Courses table.", "To determine the course with the most enrollments, we will join the Courses table with the Student_Enrolment_Courses table on the course_id.", "We will group the results by course_id to count the number of enrollments for each course.", "We will order the results in descending order based on the count of enrollments.", "Finally, we will limit the results to 1 to get the course with the most enrollments."], "pred_sql": "SELECT C.course_name\nFROM Courses C\nJOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id\nGROUP BY C.course_id\nORDER BY COUNT(SEC.student_course_id) DESC\nLIMIT 1;", "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_enrolment_courses"]}
{"sample_id": 548, "db_id": "student_transcripts_tracking", "question": "What is the name of the course with the most students enrolled?", "rationale": ["Identify the relevant tables: Courses, Student_Enrolment_Courses, and Student_Enrolment.", "Join the Courses table with the Student_Enrolment_Courses table on course_id to link courses with their enrolments.", "Join the resulting table with the Student_Enrolment table on student_enrolment_id to access student enrolment records.", "Group the results by course_id to count the number of students enrolled in each course.", "Order the results in descending order based on the count of students enrolled to find the course with the most students.", "Limit the results to 1 to get only the top course."], "pred_sql": "SELECT C.course_name\nFROM Courses C\nJOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id\nJOIN Student_Enrolment SE ON SEC.student_enrolment_id = SE.student_enrolment_id\nGROUP BY C.course_id\nORDER BY COUNT(SE.student_enrolment_id) DESC\nLIMIT 1;", "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_enrolment_courses"]}
{"sample_id": 549, "db_id": "student_transcripts_tracking", "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "rationale": ["Identify the relevant table: Students, which contains the last names of students and their current addresses.", "Identify the Addresses table to filter students based on their current address in North Carolina.", "Use a subquery to select address_id from Addresses where state_province_county is 'North Carolina'.", "Use another subquery to find student_ids from Student_Enrolment to identify students who are enrolled in any degree program.", "Combine these conditions to select last names of students who live in North Carolina and are not in the Student_Enrolment table."], "pred_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)", "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "source_tables": ["addresses", "student_enrolment", "students"]}
{"sample_id": 550, "db_id": "student_transcripts_tracking", "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "rationale": ["Identify the relevant table: Students, which contains the last names of students.", "Identify the Addresses table to filter students based on their current address in North Carolina.", "Use a subquery to find all address_ids in North Carolina from the Addresses table.", "Filter the Students table to include only those students whose current_address_id matches the address_ids from the previous step.", "Identify the Student_Enrolment table to find students who have registered in any degree programs.", "Use another subquery to find all student_ids from the Student_Enrolment table.", "Finally, filter the Students table to exclude those student_ids that are present in the Student_Enrolment table."], "pred_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)", "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "source_tables": ["addresses", "student_enrolment", "students"]}
{"sample_id": 551, "db_id": "student_transcripts_tracking", "question": "Show the date and id of the transcript with at least 2 course results.", "rationale": ["We need to select the transcript ID and date from the Transcripts table.", "To find transcripts with at least 2 course results, we will join the Transcripts table with the Transcript_Contents table on the transcript_id.", "We will group the results by transcript_id to aggregate the course results for each transcript.", "Using the HAVING clause, we will filter the groups to include only those with a count of student_course_id that is 2 or more."], "pred_sql": "SELECT Transcripts.transcript_id, Transcripts.transcript_date\nFROM Transcripts\nJOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id\nGROUP BY Transcripts.transcript_id\nHAVING COUNT(Transcript_Contents.student_course_id) >= 2;", "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "source_tables": ["transcripts", "transcript_contents"]}
{"sample_id": 552, "db_id": "student_transcripts_tracking", "question": "What is the date and id of the transcript with at least 2 courses listed?", "rationale": ["Identify the relevant tables: Transcripts and Transcript_Contents are needed to get the transcript details and the courses associated with each transcript.", "We need to select the transcript_id and transcript_date from the Transcripts table.", "To find transcripts with at least 2 courses, we will join the Transcripts table with the Transcript_Contents table on the transcript_id.", "We will group the results by transcript_id to aggregate the course counts for each transcript.", "Using the HAVING clause, we will filter the groups to include only those with a count of student_course_id (courses) greater than or equal to 2."], "pred_sql": "SELECT t.transcript_id, t.transcript_date \nFROM Transcripts t \nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id \nGROUP BY t.transcript_id \nHAVING COUNT(tc.student_course_id) >= 2;", "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "source_tables": ["transcripts", "transcript_contents"]}
{"sample_id": 553, "db_id": "student_transcripts_tracking", "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "rationale": ["Identify the relevant table: The 'Students' table contains the information about students, including their names and phone numbers.", "Determine the columns needed: We need the 'cell_mobile_number' column to get the phone number.", "Specify the conditions: We need to filter the records where 'first_name' is 'Timmothy' and 'last_name' is 'Ward'.", "Construct the SQL query: Using the SELECT statement to retrieve the 'cell_mobile_number' from the 'Students' table with the specified conditions."], "pred_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';", "gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "source_tables": ["students"]}
{"sample_id": 554, "db_id": "student_transcripts_tracking", "question": "What is the mobile phone number of the student named Timmothy Ward ?", "rationale": ["Identify the table that contains student information, which is the 'Students' table.", "Determine the columns needed for the query, specifically the 'cell_mobile_number' column to get the mobile phone number.", "Use the 'first_name' and 'last_name' columns to filter the results for the student named 'Timmothy Ward'.", "Construct the SQL query using a SELECT statement to retrieve the 'cell_mobile_number' from the 'Students' table where the first name is 'Timmothy' and the last name is 'Ward'."], "pred_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';", "gold_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "source_tables": ["students"]}
{"sample_id": 555, "db_id": "student_transcripts_tracking", "question": "Who is the first student to register? List the first name, middle name and last name.", "rationale": ["Identify the relevant table: The 'Students' table contains the information about students including their names and registration date.", "Select the required columns: We need to retrieve the 'first_name', 'middle_name', and 'last_name' of the students.", "Determine the ordering: To find the first student to register, we need to order the results by 'date_first_registered' in ascending order.", "Limit the results: Since we only want the first student, we will limit the results to 1."], "pred_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;", "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "source_tables": ["students"]}
{"sample_id": 556, "db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the first student to register?", "rationale": ["Identify the relevant table: The 'Students' table contains the information about students including their names and registration date.", "Select the required columns: We need to retrieve the 'first_name', 'middle_name', and 'last_name' of the students.", "Determine the order of registration: To find the first student to register, we will order the results by 'date_first_registered' in ascending order.", "Limit the results: Since we only want the first student, we will use 'LIMIT 1' to restrict the output to a single record."], "pred_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;", "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "source_tables": ["students"]}
{"sample_id": 557, "db_id": "student_transcripts_tracking", "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "rationale": ["Identify the relevant table: The 'Students' table contains information about students, including their names and the date they left the institution.", "Determine the criteria for 'earliest graduate': A graduate is defined as a student who has a non-null 'date_left', indicating they have completed their studies.", "Select the required fields: We need to retrieve the 'first_name', 'middle_name', and 'last_name' of the student.", "Sort the results: To find the earliest graduate, we will order the results by 'date_left' in ascending order.", "Limit the results: Since we only need the earliest graduate, we will limit the results to 1."], "pred_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;", "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "source_tables": ["students"]}
{"sample_id": 558, "db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the earliest school graduate?", "rationale": ["Identify the relevant table: The 'Students' table contains the names and the date when students left the institution.", "Determine the fields needed: We need the first name, middle name, and last name of the students.", "Filter for graduates: A graduate is defined as a student who has a non-null 'date_left', indicating they have completed their studies.", "Sort the results: To find the earliest graduate, we will sort the results by 'date_left' in ascending order.", "Limit the results: We only need the first record from the sorted results, so we will use 'LIMIT 1' to get the earliest graduate."], "pred_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;", "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "source_tables": ["students"]}
{"sample_id": 559, "db_id": "student_transcripts_tracking", "question": "Whose permanent address is different from his or her current address? List his or her first name.", "rationale": ["Identify the relevant table: The query is about students and their addresses, so we will use the Students table.", "Determine the columns needed: We need the first name of the students whose permanent address is different from their current address, so we will select the 'first_name' column.", "Formulate the condition: We need to check where the 'permanent_address_id' is not equal to 'current_address_id'.", "Construct the SQL query: Combine the SELECT statement with the WHERE condition to get the desired result."], "pred_sql": "SELECT first_name FROM Students WHERE permanent_address_id != current_address_id;", "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "source_tables": ["students"]}
{"sample_id": 560, "db_id": "student_transcripts_tracking", "question": "What is the first name of the student whose permanent address is different from his or her current one?", "rationale": ["Identify the relevant table: Students, as it contains information about students and their addresses.", "Determine the columns needed: We need the 'first_name' of the student.", "Establish the condition: We want students whose 'permanent_address_id' is different from 'current_address_id'.", "Construct the SQL query using SELECT to retrieve the 'first_name' from the Students table with the specified condition."], "pred_sql": "SELECT first_name FROM Students WHERE permanent_address_id != current_address_id;", "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "source_tables": ["students"]}
{"sample_id": 561, "db_id": "student_transcripts_tracking", "question": "Which address holds the most number of students currently? List the address id and all lines.", "rationale": ["Identify the relevant tables: Addresses and Students.", "We need to find the current address of students, so we will join the Addresses table with the Students table on the current_address_id.", "We want to count the number of students associated with each address, so we will use the COUNT function and group the results by address.", "To find the address with the most students, we will order the results by the count of students in descending order.", "Finally, we will limit the results to only the top address."], "pred_sql": "SELECT a.address_id, a.line_1, a.line_2, a.line_3\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nGROUP BY a.address_id, a.line_1, a.line_2, a.line_3\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["addresses", "students"]}
{"sample_id": 562, "db_id": "student_transcripts_tracking", "question": "What is the id, line 1, and line 2 of the address with the most students?", "rationale": ["Identify the relevant columns needed from the Addresses table: address_id, line_1, and line_2.", "Join the Addresses table with the Students table to link addresses to students using both current and permanent address IDs.", "Group the results by address_id to count the number of students associated with each address.", "Order the results in descending order based on the count of students to find the address with the most students.", "Limit the results to 1 to get only the address with the highest count of students."], "pred_sql": "SELECT a.address_id, a.line_1, a.line_2\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id\nGROUP BY a.address_id\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["addresses", "students"]}
{"sample_id": 563, "db_id": "student_transcripts_tracking", "question": "On average, when were the transcripts printed?", "rationale": ["Identify the relevant table: The query is about transcripts, so we will use the Transcripts table.", "Determine the required information: We need to find the average date when transcripts were printed.", "Use the AVG function: Since we want the average of the transcript dates, we will use the AVG function on the transcript_date column.", "Construct the SQL query: The final SQL query will select the average of transcript_date from the Transcripts table."], "pred_sql": "SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;", "gold_sql": "SELECT avg(transcript_date) FROM Transcripts", "source_tables": ["transcripts"]}
{"sample_id": 564, "db_id": "student_transcripts_tracking", "question": "What is the average transcript date?", "rationale": ["Identify the relevant table: The query is about transcript dates, so we will use the Transcripts table.", "Determine the required calculation: The query asks for the average of the transcript dates, which means we need to use the AVG() function.", "Select the appropriate column: We will apply the AVG() function to the 'transcript_date' column in the Transcripts table.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and specify the table from which to retrieve the data."], "pred_sql": "SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;", "gold_sql": "SELECT avg(transcript_date) FROM Transcripts", "source_tables": ["transcripts"]}
{"sample_id": 565, "db_id": "student_transcripts_tracking", "question": "When is the first transcript released? List the date and details.", "rationale": ["Identify the relevant table: The query is asking about transcripts, so we will use the Transcripts table.", "Select the required columns: We need to retrieve the 'transcript_date' and 'other_details' from the Transcripts table.", "Order the results: To find the first transcript released, we will order the results by 'transcript_date' in ascending order.", "Limit the results: Since we only want the first transcript, we will limit the results to 1."], "pred_sql": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;", "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "source_tables": ["transcripts"]}
{"sample_id": 566, "db_id": "student_transcripts_tracking", "question": "What is the earliest date of a transcript release, and what details can you tell me?", "rationale": ["Identify the relevant table: The query is about transcripts, so we will use the Transcripts table.", "Determine the required information: We need the earliest date of a transcript release and any additional details.", "Use the MIN() function to find the earliest transcript date from the transcript_date column.", "Select the other_details column to provide additional information about the transcript.", "Construct the SQL query to select the minimum transcript date and other details from the Transcripts table."], "pred_sql": "SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM Transcripts;", "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "source_tables": ["transcripts"]}
{"sample_id": 567, "db_id": "student_transcripts_tracking", "question": "How many transcripts are released?", "rationale": ["Identify the table that contains the information about transcripts, which is the 'Transcripts' table.", "To find out how many transcripts are released, we need to count the number of records in the 'Transcripts' table.", "Use the COUNT() function to count all entries in the 'Transcripts' table and return the result as 'total_transcripts'."], "pred_sql": "SELECT COUNT(*) AS total_transcripts FROM Transcripts;", "gold_sql": "SELECT count(*) FROM Transcripts", "source_tables": ["transcripts"]}
{"sample_id": 568, "db_id": "student_transcripts_tracking", "question": "How many transcripts are listed?", "rationale": ["Identify the table that contains the information about transcripts, which is the 'Transcripts' table.", "To find out how many transcripts are listed, we need to count the number of records in the 'Transcripts' table.", "Use the COUNT() function to count the total number of rows in the 'Transcripts' table.", "Construct the SQL query to select the count from the 'Transcripts' table."], "pred_sql": "SELECT COUNT(*) AS transcript_count FROM Transcripts;", "gold_sql": "SELECT count(*) FROM Transcripts", "source_tables": ["transcripts"]}
{"sample_id": 569, "db_id": "student_transcripts_tracking", "question": "What is the last transcript release date?", "rationale": ["Identify the relevant table: The query is asking for information about transcripts, so we will use the Transcripts table.", "Determine the required information: We need the last release date of the transcripts, which can be found in the 'transcript_date' column.", "Use the MAX function: To find the latest date, we will use the MAX function on the 'transcript_date' column.", "Construct the SQL query: We will select the maximum transcript date from the Transcripts table."], "pred_sql": "SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;", "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}
{"sample_id": 570, "db_id": "student_transcripts_tracking", "question": "When was the last transcript released?", "rationale": ["Identify the relevant table: The question pertains to transcripts, so we will use the Transcripts table.", "Determine the required information: We need to find out when the last transcript was released, which corresponds to the maximum date in the transcript_date column.", "Construct the SQL query: We will use the MAX() function to get the latest date from the transcript_date column in the Transcripts table."], "pred_sql": "SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts;", "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}
{"sample_id": 571, "db_id": "student_transcripts_tracking", "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "rationale": ["Identify the relevant table for course enrollments and transcripts, which are 'Student_Enrolment_Courses' and 'Transcript_Contents'.", "Determine the relationship between course enrollments and transcripts, which is through the 'student_course_id' in 'Transcript_Contents'.", "Use the COUNT function to count how many times each 'student_course_id' appears in 'Transcript_Contents'.", "Group the results by 'student_course_id' to aggregate the counts for each course enrollment.", "Order the results by the count in descending order to find the maximum count.", "Limit the results to 1 to get the course enrollment id that appears the most in different transcripts."], "pred_sql": "SELECT student_course_id, COUNT(transcript_id) AS transcript_count\nFROM Transcript_Contents\nGROUP BY student_course_id\nORDER BY transcript_count DESC\nLIMIT 1;", "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}
{"sample_id": 572, "db_id": "student_transcripts_tracking", "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "rationale": ["Identify the relevant tables: We need to look at the Student_Enrolment_Courses and Transcript_Contents tables to find the relationship between courses and transcripts.", "Count the occurrences: We will count how many times each course appears in the transcripts by joining the two tables on the student_course_id.", "Group by enrollment id: We will group the results by student_enrolment_id to get the count of transcripts for each course.", "Order the results: We will order the results in descending order to find the maximum count.", "Limit the results: Finally, we will limit the results to 1 to get the course with the maximum count."], "pred_sql": "SELECT student_enrolment_id, COUNT(transcript_id) AS course_count\nFROM Student_Enrolment_Courses\nJOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id\nGROUP BY student_enrolment_id\nORDER BY course_count DESC\nLIMIT 1;", "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}
{"sample_id": 573, "db_id": "student_transcripts_tracking", "question": "Show the date of the transcript which shows the least number of results, also list the id.", "rationale": ["Identify the table that contains the transcript information, which is the 'Transcripts' table.", "We need to find the transcript with the least number of results, which refers to the number of courses associated with each transcript.", "The 'Transcript_Contents' table links transcripts to courses, so we will group by 'transcript_id' in that table and count the number of courses for each transcript.", "We will order the results by the count in ascending order to get the transcript with the least number of courses.", "Finally, we will limit the results to 1 to get only the transcript with the least number of results.", "We will select the 'transcript_id' and 'transcript_date' from the 'Transcripts' table where the 'transcript_id' matches the one with the least number of courses."], "pred_sql": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)", "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcripts", "transcript_contents"]}
{"sample_id": 574, "db_id": "student_transcripts_tracking", "question": "What is the date and id of the transcript with the least number of results?", "rationale": ["Identify the relevant table: Transcripts and Transcript_Contents.", "We need to find the transcript with the least number of results, which implies counting the number of entries in Transcript_Contents for each transcript.", "Use a subquery to group by transcript_id in Transcript_Contents and count the number of entries for each transcript.", "Order the results of the subquery by the count in ascending order to get the transcript with the least number of results.", "Limit the subquery to 1 to get only the transcript_id with the least results.", "Join this subquery with the Transcripts table to get the corresponding transcript date and id."], "pred_sql": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)", "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcripts", "transcript_contents"]}
{"sample_id": 575, "db_id": "student_transcripts_tracking", "question": "Find the semester when both Master students and Bachelor students got enrolled in.", "rationale": ["Identify the relevant tables: Semesters, Student_Enrolment, and Degree_Programs.", "We need to find semesters where students enrolled in both Master and Bachelor degree programs.", "Join the Semesters table with Student_Enrolment on semester_id to link semesters with enrolments.", "Join the Student_Enrolment table with Degree_Programs on degree_program_id to access the degree program names.", "Filter the results to include only those degree programs that are either 'Master' or 'Bachelor'.", "Select distinct semester names to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT S.semester_name\nFROM Semesters S\nJOIN Student_Enrolment SE ON S.semester_id = SE.semester_id\nJOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id\nWHERE DP.degree_summary_name IN ('Master', 'Bachelor');", "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs"]}
{"sample_id": 576, "db_id": "student_transcripts_tracking", "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "rationale": ["Identify the relevant tables: Semesters, Student_Enrolment, and Degree_Programs.", "We need to find semesters that had both Masters and Bachelors students enrolled.", "Join the Semesters table with the Student_Enrolment table on semester_id to link students to their respective semesters.", "Join the Student_Enrolment table with the Degree_Programs table on degree_program_id to access the degree program names.", "Use a WHERE clause to filter for degree programs that are either 'Masters' or 'Bachelors'.", "Select distinct semester_id to ensure we get unique semester IDs that meet the criteria."], "pred_sql": "SELECT DISTINCT s.semester_id \nFROM Semesters s \nJOIN Student_Enrolment se ON s.semester_id = se.semester_id \nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id \nWHERE dp.degree_summary_name IN ('Masters', 'Bachelors');", "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs"]}
{"sample_id": 577, "db_id": "student_transcripts_tracking", "question": "How many different addresses do the students currently live?", "rationale": ["Identify the relevant table: The 'Students' table contains the information about students and their current addresses.", "Determine the specific column: The 'current_address_id' column in the 'Students' table indicates the current address of each student.", "Count distinct addresses: Use the COUNT function with DISTINCT to count the number of unique current addresses.", "Formulate the SQL query: Combine the elements into a complete SQL query to retrieve the count of different addresses."], "pred_sql": "SELECT COUNT(DISTINCT current_address_id) AS different_addresses FROM Students;", "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students", "source_tables": ["students"]}
{"sample_id": 578, "db_id": "student_transcripts_tracking", "question": "What are the different addresses that have students living there?", "rationale": ["Identify the relevant tables: We need to look at the Addresses table to get the address details and the Students table to find out which students live at those addresses.", "Determine the relationship: Students have two types of addresses (current and permanent), so we need to join the Addresses table with the Students table on both address types.", "Select distinct addresses: Since a single address can have multiple students, we use DISTINCT to ensure we only get unique addresses.", "Construct the SQL query: We will select all columns from the Addresses table where the address_id matches either the current or permanent address of any student."], "pred_sql": "SELECT DISTINCT a.* FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id;", "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students", "source_tables": ["students"]}
{"sample_id": 579, "db_id": "student_transcripts_tracking", "question": "List all the student details in reversed lexicographical order.", "rationale": ["Identify the table that contains student details, which is the 'Students' table.", "To list all student details, we need to select all columns from the 'Students' table using SELECT *.", "Reversed lexicographical order means we need to sort the results in descending order.", "We will sort primarily by 'last_name', then by 'first_name', and finally by 'middle_name' to ensure a complete reversed order."], "pred_sql": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;", "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "source_tables": ["students"]}
{"sample_id": 580, "db_id": "student_transcripts_tracking", "question": "What other details can you tell me about students in reverse alphabetical order?", "rationale": ["Identify the table that contains student information, which is the 'Students' table.", "Determine the specific column that contains the additional details about students, which is 'other_student_details'.", "Specify that the results should be ordered in reverse alphabetical order based on the students' last names, which is the 'last_name' column.", "Construct the SQL query to select 'other_student_details' from the 'Students' table and order the results by 'last_name' in descending order."], "pred_sql": "SELECT other_student_details FROM Students ORDER BY last_name DESC;", "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "source_tables": ["students"]}
{"sample_id": 581, "db_id": "student_transcripts_tracking", "question": "Describe the section h.", "rationale": ["Identify the table that contains the information about sections, which is the 'Sections' table.", "Determine the specific section to describe, which is indicated by the name 'h'.", "Construct a SQL query to select all columns from the 'Sections' table where the section name matches 'h'."], "pred_sql": "SELECT * FROM Sections WHERE section_name = 'h';", "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "source_tables": ["sections"]}
{"sample_id": 582, "db_id": "student_transcripts_tracking", "question": "What is the description for the section named h?", "rationale": ["Identify the table that contains the section information, which is the 'Sections' table.", "Determine the column that holds the description of the section, which is 'section_description'.", "Identify the column that contains the name of the section, which is 'section_name'.", "Construct the SQL query to select 'section_description' from 'Sections' where 'section_name' is equal to 'h'."], "pred_sql": "SELECT section_description FROM Sections WHERE section_name = 'h';", "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "source_tables": ["sections"]}
{"sample_id": 583, "db_id": "student_transcripts_tracking", "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "rationale": ["Identify the relevant table: Students, which contains the first names of students and their permanent addresses.", "Identify the Addresses table to filter students based on their permanent address country.", "Construct a subquery to select address_id from Addresses where country is 'Haiti'.", "Combine the results of the subquery with a condition to check for the specific cell phone number.", "Use the OR operator to include students who either live in Haiti or have the specified cell phone number.", "Select the first_name from the Students table where the conditions are met."], "pred_sql": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';", "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "source_tables": ["addresses", "students"]}
{"sample_id": 584, "db_id": "student_transcripts_tracking", "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "rationale": ["Identify the relevant table: Students, which contains the first names and addresses of students.", "Identify the condition for permanent residence in Haiti: This requires a subquery to the Addresses table to find address_ids where the country is 'Haiti'.", "Identify the condition for the cell phone number: We need to check if the cell_mobile_number matches '09700166582'.", "Combine both conditions using an OR operator to filter the students who either live in Haiti or have the specified cell phone number.", "Select the first_name column from the Students table based on the combined conditions."], "pred_sql": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';", "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "source_tables": ["addresses", "students"]}
{"sample_id": 585, "db_id": "tvshow", "question": "List the title of all cartoons in alphabetical order.", "rationale": ["Identify the table that contains the required information: The 'Cartoon' table contains the titles of cartoons.", "Determine the specific column needed: We need the 'Title' column from the 'Cartoon' table.", "Specify the order of the results: The titles should be listed in alphabetical order, which can be achieved using the ORDER BY clause with ASC (ascending) order.", "Construct the SQL query: Combine the SELECT statement with the FROM clause and the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;", "gold_sql": "SELECT Title FROM Cartoon ORDER BY title", "source_tables": ["cartoon"]}
{"sample_id": 586, "db_id": "tvshow", "question": "What are the titles of the cartoons sorted alphabetically?", "rationale": ["Identify the table that contains the information needed: the Cartoon table.", "Determine the specific column that holds the titles of the cartoons: the Title column.", "Specify that we want to select the Title column from the Cartoon table.", "Add an ORDER BY clause to sort the results alphabetically by Title in ascending order."], "pred_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;", "gold_sql": "SELECT Title FROM Cartoon ORDER BY title", "source_tables": ["cartoon"]}
{"sample_id": 587, "db_id": "tvshow", "question": "List all cartoon directed by \"Ben Jones\".", "rationale": ["Identify the relevant table: The query is about cartoons, so we will use the Cartoon table.", "Determine the required columns: The user wants to list all cartoons, so we will select all columns from the Cartoon table.", "Apply the filter condition: We need to filter the results to only include cartoons directed by 'Ben Jones'.", "Construct the SQL query: Combine the SELECT statement with the FROM clause and the WHERE condition to form the complete SQL query."], "pred_sql": "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';", "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';", "source_tables": ["cartoon"]}
{"sample_id": 588, "db_id": "tvshow", "question": "What are the names of all cartoons directed by Ben Jones?", "rationale": ["Identify the relevant table: The query is about cartoons, so we will use the Cartoon table.", "Determine the required columns: We need the Title of the cartoons directed by Ben Jones.", "Specify the condition: We need to filter the results where the Directed_by column matches 'Ben Jones'.", "Construct the SQL query: Using SELECT to get the Title from the Cartoon table with the specified condition."], "pred_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';", "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';", "source_tables": ["cartoon"]}
{"sample_id": 589, "db_id": "tvshow", "question": "How many cartoons were written by \"Joseph Kuhr\"?", "rationale": ["Identify the relevant table: The query is about cartoons, so we will use the Cartoon table.", "Determine the condition: We need to filter the cartoons based on the writer's name, which is 'Joseph Kuhr'.", "Count the number of records: We will use the COUNT() function to count how many cartoons meet the specified condition.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and the WHERE clause to filter by the writer's name."], "pred_sql": "SELECT COUNT(*) AS number_of_cartoons FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "source_tables": ["cartoon"]}
{"sample_id": 590, "db_id": "tvshow", "question": "What is the number of cartoones written by Joseph Kuhr?", "rationale": ["Identify the relevant table: The query is about cartoons, so we will use the Cartoon table.", "Determine the required information: We need to count the number of cartoons written by a specific writer, Joseph Kuhr.", "Formulate the SQL query: We will use the COUNT() function to count the rows in the Cartoon table where the Written_by column matches 'Joseph Kuhr'.", "Construct the final SQL query: The query will select the count of cartoons from the Cartoon table with the specified condition."], "pred_sql": "SELECT COUNT(*) AS number_of_cartoons FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "source_tables": ["cartoon"]}
{"sample_id": 591, "db_id": "tvshow", "question": "list all cartoon titles and their directors ordered by their air date", "rationale": ["Identify the table that contains the required information: The 'Cartoon' table contains the titles and directors.", "Select the columns needed: We need 'Title' and 'Directed_by' from the 'Cartoon' table.", "Specify the order: We want to order the results by 'Original_air_date' to get the cartoons in the order they first aired."], "pred_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;", "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "source_tables": ["cartoon"]}
{"sample_id": 592, "db_id": "tvshow", "question": "What is the name and directors of all the cartoons that are ordered by air date?", "rationale": ["Identify the relevant table: The query is about cartoons, so we will use the Cartoon table.", "Determine the required columns: The user wants the name of the cartoons and their directors, which corresponds to the 'Title' and 'Directed_by' columns in the Cartoon table.", "Specify the ordering: The user wants the results ordered by the air date, which is represented by the 'Original_air_date' column in the Cartoon table.", "Construct the SQL SELECT statement: We will select 'Title' and 'Directed_by' from the Cartoon table.", "Add the ORDER BY clause: We will order the results by 'Original_air_date' to meet the user's request."], "pred_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;", "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "source_tables": ["cartoon"]}
{"sample_id": 593, "db_id": "tvshow", "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "rationale": ["Identify the table that contains the information about cartoons, which is the 'Cartoon' table.", "Determine the relevant column that contains the title of the cartoons, which is 'Title'.", "Identify the column that specifies the director of the cartoons, which is 'Directed_by'.", "Formulate the SQL query to select the 'Title' from the 'Cartoon' table where the 'Directed_by' is either 'Ben Jones' or 'Brandon Vietti'."], "pred_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "source_tables": ["cartoon"]}
{"sample_id": 594, "db_id": "tvshow", "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "rationale": ["Identify the table that contains the information about cartoons, which is the 'Cartoon' table.", "Determine the relevant column that contains the titles of the cartoons, which is 'Title'.", "Identify the column that contains the director's name, which is 'Directed_by'.", "Formulate a condition to filter the results where the director is either 'Ben Jones' or 'Brandon Vietti'.", "Use the SQL 'IN' clause to specify multiple values for the 'Directed_by' column.", "Construct the final SQL query to select the 'Title' from the 'Cartoon' table with the specified conditions."], "pred_sql": "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');", "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "source_tables": ["cartoon"]}
{"sample_id": 595, "db_id": "tvshow", "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "rationale": ["Identify the relevant table: TV_Channel contains the information about TV channels and their countries.", "We need to count the number of TV channels per country, so we will use the COUNT() function.", "To group the results by country, we will use the GROUP BY clause on the Country column.", "To find the country with the most TV channels, we will order the results in descending order based on the count of channels.", "Finally, we will limit the results to only the top country using LIMIT 1."], "pred_sql": "SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;", "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["tv_channel"]}
{"sample_id": 596, "db_id": "tvshow", "question": "What is the country with the most number of TV Channels and how many does it have?", "rationale": ["Identify the relevant table: TV_Channel, which contains the country and channel information.", "Use the COUNT() function to count the number of channels for each country.", "Group the results by the Country column to aggregate the counts per country.", "Order the results in descending order based on the count of channels to find the country with the most channels.", "Limit the results to 1 to get only the country with the highest count."], "pred_sql": "SELECT Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1;", "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["tv_channel"]}
{"sample_id": 597, "db_id": "tvshow", "question": "List the number of different series names and contents in the TV Channel table.", "rationale": ["Identify the table to query: TV_Channel.", "Determine the columns needed: series_name and Content.", "Use COUNT(DISTINCT column_name) to count unique values in series_name and Content.", "Construct the SQL query to select the counts from the TV_Channel table."], "pred_sql": "SELECT COUNT(DISTINCT series_name) AS different_series_names, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;", "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "source_tables": ["tv_channel"]}
{"sample_id": 598, "db_id": "tvshow", "question": "How many different series and contents are listed in the TV Channel table?", "rationale": ["Identify the table to query: TV_Channel.", "Determine the columns needed: series_name and Content.", "Use COUNT(DISTINCT) to count unique series names and content types.", "Construct the SQL query to select the counts from the TV_Channel table."], "pred_sql": "SELECT COUNT(DISTINCT series_name) AS different_series, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;", "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "source_tables": ["tv_channel"]}
{"sample_id": 599, "db_id": "tvshow", "question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "rationale": ["Identify the table that contains the information about TV channels, which is the TV_Channel table.", "Determine the column that contains the content type, which is the 'Content' column in the TV_Channel table.", "Specify the condition to filter the results to only include the channel with the series name 'Sky Radio'.", "Construct the SQL query to select the 'Content' from the TV_Channel table where the 'series_name' matches 'Sky Radio'."], "pred_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"]}
{"sample_id": 600, "db_id": "tvshow", "question": "What is the content of the series Sky Radio?", "rationale": ["Identify the table that contains the series information, which is TV_Channel.", "Determine the specific column that holds the content type, which is 'Content'.", "Formulate the SQL query to select the 'Content' from the TV_Channel table where the 'series_name' matches 'Sky Radio'."], "pred_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"]}
{"sample_id": 601, "db_id": "tvshow", "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "rationale": ["Identify the table that contains the information about TV channels, which is the TV_Channel table.", "Determine the column that contains the package options, which is Package_Option.", "Identify the condition needed to filter the results, which is the series_name being 'Sky Radio'.", "Construct the SQL query to select the Package_Option from the TV_Channel table where the series_name matches 'Sky Radio'."], "pred_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';", "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"]}
{"sample_id": 602, "db_id": "tvshow", "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "rationale": ["Identify the relevant table: The query is asking for package options related to TV channels, so we will focus on the TV_Channel table.", "Determine the specific column needed: We need the 'Package_Option' column from the TV_Channel table.", "Filter the results based on the series name: The query specifies that we are interested in channels whose series names are 'Sky Radio'.", "Construct the SQL SELECT statement: We will select the 'Package_Option' from the TV_Channel table where the 'series_name' matches 'Sky Radio'."], "pred_sql": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio';", "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"]}
{"sample_id": 603, "db_id": "tvshow", "question": "How many TV Channel using language English?", "rationale": ["Identify the table that contains the information about TV channels, which is the TV_Channel table.", "Determine the relevant column that specifies the language of the channels, which is the Language column.", "Formulate a SQL query to count the number of entries in the TV_Channel table where the Language is 'English'.", "Use the COUNT() function to get the total number of channels that meet the specified condition."], "pred_sql": "SELECT COUNT(*) AS ChannelCount FROM TV_Channel WHERE Language = 'English';", "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';", "source_tables": ["tv_channel"]}
{"sample_id": 604, "db_id": "tvshow", "question": "How many TV Channels use the English language?", "rationale": ["Identify the table that contains the information about TV channels, which is the TV_Channel table.", "Determine the relevant column that specifies the language of the channels, which is the Language column.", "Formulate a SQL query to count the number of entries in the TV_Channel table where the Language is 'English'.", "Use the COUNT() function to get the total number of channels that meet this criterion."], "pred_sql": "SELECT COUNT(*) AS NumberOfChannels FROM TV_Channel WHERE Language = 'English';", "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';", "source_tables": ["tv_channel"]}
{"sample_id": 605, "db_id": "tvshow", "question": "List the language used least number of TV Channel. List language and number of TV Channel.", "rationale": ["Identify the relevant table: TV_Channel, which contains the Language and id of TV channels.", "Use the COUNT function to count the number of TV channels for each language.", "Group the results by Language to get the count for each language.", "Order the results in ascending order based on the count of TV channels to find the least used language.", "Limit the results to 1 to get only the language with the least number of TV channels."], "pred_sql": "SELECT Language, COUNT(*) AS Number_of_TV_Channels \nFROM TV_Channel \nGROUP BY Language \nORDER BY Number_of_TV_Channels ASC \nLIMIT 1;", "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["tv_channel"]}
{"sample_id": 606, "db_id": "tvshow", "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "rationale": ["Identify the relevant table: TV_Channel, which contains the Language and id of TV channels.", "Use the COUNT function to count the number of channels for each language.", "Group the results by Language to get the count of channels for each language.", "Order the results in ascending order based on the count of channels to find the least used language.", "Limit the results to 1 to get only the language used by the least number of channels."], "pred_sql": "SELECT Language, COUNT(*) AS Channel_Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Channel_Count ASC\nLIMIT 1;", "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["tv_channel"]}
{"sample_id": 607, "db_id": "tvshow", "question": "List each language and the number of TV Channels using it.", "rationale": ["Identify the relevant table: TV_Channel, as it contains the Language and id of TV channels.", "We need to count the number of channels for each language, so we will use the COUNT() function.", "To group the results by language, we will use the GROUP BY clause on the Language column.", "The final query will select the Language and the count of channels, giving us the desired output."], "pred_sql": "SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language;", "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "source_tables": ["tv_channel"]}
{"sample_id": 608, "db_id": "tvshow", "question": "For each language, list the number of TV Channels that use it.", "rationale": ["Identify the relevant table: TV_Channel, as it contains the Language and id of the channels.", "We need to count the number of channels for each language, so we will use the COUNT() function.", "To group the results by language, we will use the GROUP BY clause on the Language column.", "Select the Language and the count of channels as Number_of_Channels in the final output."], "pred_sql": "SELECT Language, COUNT(*) AS Number_of_Channels\nFROM TV_Channel\nGROUP BY Language;", "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "source_tables": ["tv_channel"]}
{"sample_id": 609, "db_id": "tvshow", "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "rationale": ["Identify the relevant tables: We need to retrieve information from the TV_Channel and Cartoon tables.", "Determine the relationship: The Cartoon table has a foreign key 'Channel' that references the 'id' in the TV_Channel table.", "Specify the selection criteria: We want to find the TV channel that shows the cartoon titled 'The Rise of the Blue Beetle!'.", "Select the desired output: We need to list the series name from the TV_Channel table that corresponds to the identified channel."], "pred_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';", "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 610, "db_id": "tvshow", "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "rationale": ["Identify the relevant tables: TV_Channel and Cartoon.", "Determine the relationship between the tables: Cartoon has a foreign key 'Channel' that references 'id' in TV_Channel.", "The user is interested in the series name from the TV_Channel table.", "To find the series name, we need to join the TV_Channel table with the Cartoon table on the Channel field.", "Filter the results to only include the cartoon titled 'The Rise of the Blue Beetle'.", "Construct the SQL query to select the series name from the TV_Channel table based on the specified cartoon title."], "pred_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle';", "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 611, "db_id": "tvshow", "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "rationale": ["Identify the tables involved: Cartoon and TV_Channel.", "Determine the relationship between the tables: Cartoon.Channel is a foreign key that references TV_Channel.id.", "We need to select the Title from the Cartoon table.", "We need to filter the results based on the series name from the TV_Channel table, specifically where series_name is 'Sky Radio'.", "Construct the SQL query using a JOIN to combine the two tables based on the channel ID and apply the WHERE clause for filtering."], "pred_sql": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';", "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 612, "db_id": "tvshow", "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "rationale": ["Identify the relevant tables: Cartoon and TV_Channel.", "Determine the relationship between the tables: Cartoon.Channel is a foreign key that references TV_Channel.id.", "We need to find the titles of cartoons that are associated with a specific series name, which is 'Sky Radio'.", "Construct the SQL query to select the Title from the Cartoon table, joining it with the TV_Channel table on the Channel field.", "Add a WHERE clause to filter the results to only include those where the series_name in the TV_Channel table is 'Sky Radio'."], "pred_sql": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';", "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 613, "db_id": "tvshow", "question": "List the Episode of all TV series sorted by rating.", "rationale": ["Identify the table that contains the episodes of TV series, which is the TV_series table.", "Determine the column that contains the episode information, which is the Episode column.", "Identify the column that contains the ratings for sorting, which is the Rating column.", "Construct the SQL query to select the Episode column from the TV_series table and order the results by the Rating column in descending order."], "pred_sql": "SELECT Episode FROM TV_series ORDER BY Rating DESC;", "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating", "source_tables": ["tv_series"]}
{"sample_id": 614, "db_id": "tvshow", "question": "What are all of the episodes ordered by ratings?", "rationale": ["Identify the table that contains the episodes, which is the TV_series table.", "Determine the column that holds the ratings for the episodes, which is the Rating column.", "Construct a SQL query to select all columns from the TV_series table.", "Add an ORDER BY clause to sort the results by the Rating column in descending order."], "pred_sql": "SELECT * FROM TV_series ORDER BY Rating DESC;", "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating", "source_tables": ["tv_series"]}
{"sample_id": 615, "db_id": "tvshow", "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "rationale": ["Identify the relevant table: TV_series, as it contains the Episode and Rating information.", "Select the columns needed: Episode and Rating from the TV_series table.", "Order the results by Rating in descending order to get the highest ratings first.", "Limit the results to the top 3 entries to fulfill the request for the top 3 highest rating TV series."], "pred_sql": "SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;", "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "source_tables": ["tv_series"]}
{"sample_id": 616, "db_id": "tvshow", "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "rationale": ["Identify the relevant table: TV_series, as we need information about episodes and their ratings.", "Select the columns needed: Episode and Rating, since the query asks for the most highly rated episodes and their ratings.", "Order the results by Rating in descending order to get the highest ratings first.", "Limit the results to 3 to get only the top 3 highly rated episodes."], "pred_sql": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "source_tables": ["tv_series"]}
{"sample_id": 617, "db_id": "tvshow", "question": "What is minimum and maximum share of TV series?", "rationale": ["Identify the relevant table: The query is asking for information about TV series, so we will use the TV_series table.", "Determine the required columns: We need to find the minimum and maximum share of TV series, which corresponds to the 'Share' column in the TV_series table.", "Use aggregate functions: To find the minimum and maximum values, we will use the MIN() and MAX() functions respectively.", "Construct the SQL query: We will select the minimum and maximum share from the TV_series table."], "pred_sql": "SELECT MIN(Share) AS Minimum_Share, MAX(Share) AS Maximum_Share FROM TV_series;", "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "source_tables": ["tv_series"]}
{"sample_id": 618, "db_id": "tvshow", "question": "What is the maximum and minimum share for the TV series?", "rationale": ["Identify the relevant table: The query is asking for information about TV series, so we will use the TV_series table.", "Determine the required fields: We need to find the maximum and minimum share, which corresponds to the 'Share' column in the TV_series table.", "Use aggregate functions: To find the maximum and minimum values, we will use the MAX() and MIN() functions respectively.", "Construct the SQL query: We will select the maximum and minimum share from the TV_series table."], "pred_sql": "SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;", "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "source_tables": ["tv_series"]}
{"sample_id": 619, "db_id": "tvshow", "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "rationale": ["Identify the relevant table: The query is asking for information about a TV series, so we will use the TV_series table.", "Determine the specific column needed: The user wants the air date, which corresponds to the 'Air_Date' column in the TV_series table.", "Specify the condition: The user specified the episode name 'A Love of a Lifetime', so we will filter the results using a WHERE clause to match this episode name.", "Construct the SQL query: Combine the SELECT statement with the specified column, the FROM clause with the table name, and the WHERE clause to filter by episode name."], "pred_sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"]}
{"sample_id": 620, "db_id": "tvshow", "question": "When did the episode \"A Love of a Lifetime\" air?", "rationale": ["Identify the relevant table that contains information about TV series episodes, which is the TV_series table.", "Determine the column that holds the episode name, which is the Episode column in the TV_series table.", "Formulate a SQL SELECT statement to retrieve the Air_Date for the specified episode.", "Use a WHERE clause to filter the results to only include the episode titled 'A Love of a Lifetime'."], "pred_sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"]}
{"sample_id": 621, "db_id": "tvshow", "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "rationale": ["Identify the relevant table: TV_series, as it contains the information about episodes and their weekly ranks.", "Determine the specific column needed: Weekly_Rank, which indicates the rank of the episode based on viewership.", "Filter the results to find the specific episode: 'A Love of a Lifetime', using a WHERE clause to match the Episode column."], "pred_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"]}
{"sample_id": 622, "db_id": "tvshow", "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "rationale": ["Identify the table that contains the episode information, which is the TV_series table.", "Determine the relevant column that holds the weekly rank, which is Weekly_Rank.", "Formulate a SQL query to select the Weekly_Rank from the TV_series table where the Episode matches 'A Love of a Lifetime'."], "pred_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"]}
{"sample_id": 623, "db_id": "tvshow", "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "rationale": ["Identify the relevant tables: TV_series and TV_Channel.", "Determine the relationship between the tables: TV_series has a foreign key 'Channel' that references 'id' in TV_Channel.", "We need to find the TV Channel for a specific episode, so we will filter the TV_series table by the Episode name 'A Love of a Lifetime'.", "Select the series_name from the TV_Channel table that corresponds to the channel of the specified episode.", "Construct the SQL query using a JOIN to combine the two tables based on the channel id."], "pred_sql": "SELECT TV_Channel.series_name \nFROM TV_series \nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id \nWHERE TV_series.Episode = 'A Love of a Lifetime';", "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';", "source_tables": ["tv_channel", "tv_series"]}
{"sample_id": 624, "db_id": "tvshow", "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "rationale": ["Identify the relevant table: The episode name is related to the TV series, so we will use the TV_series table.", "Determine the column to select: We need the name of the series, which is in the 'series_name' column.", "Specify the condition: We need to filter the results to find the episode titled 'A Love of a Lifetime'.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';", "source_tables": ["tv_channel", "tv_series"]}
{"sample_id": 625, "db_id": "tvshow", "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "rationale": ["Identify the tables involved: TV_series and TV_Channel.", "Determine the relationship between the tables: TV_series has a foreign key 'Channel' that references 'id' in TV_Channel.", "Select the 'Episode' column from the TV_series table.", "Filter the results to include only those series that are broadcasted on the channel with the series name 'Sky Radio'.", "Construct the SQL query using a JOIN to combine the two tables based on the channel id."], "pred_sql": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';", "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "tv_series"]}
{"sample_id": 626, "db_id": "tvshow", "question": "What is the episode for the TV series named \"Sky Radio\"?", "rationale": ["Identify the relevant table for the TV series, which is 'TV_series'.", "Determine the column that contains the series name, which is 'Channel' in the 'TV_series' table.", "Find the corresponding channel ID for the series name 'Sky Radio' from the 'TV_Channel' table.", "Use a subquery to get the channel ID from 'TV_Channel' where the series name matches 'Sky Radio'.", "Select the 'Episode' from the 'TV_series' table where the 'Channel' matches the ID obtained from the subquery."], "pred_sql": "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');", "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "tv_series"]}
{"sample_id": 627, "db_id": "tvshow", "question": "Find the number of cartoons directed by each of the listed directors.", "rationale": ["Identify the relevant table: The query requires information about cartoons and their directors, so we will use the Cartoon table.", "Determine the required columns: We need the director's name and the count of cartoons directed by each director.", "Use the COUNT() function: To find the number of cartoons directed by each director, we will use the COUNT() function.", "Group the results: We need to group the results by the director's name to get the count for each director.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;", "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "source_tables": ["cartoon"]}
{"sample_id": 628, "db_id": "tvshow", "question": "How many cartoons did each director create?", "rationale": ["Identify the relevant table: The query is about cartoons and their directors, so we will use the Cartoon table.", "Determine the required information: We need to count the number of cartoons created by each director.", "Use the COUNT() function: This function will help us count the number of entries (cartoons) for each director.", "Group the results: To get the count per director, we will use the GROUP BY clause on the Directed_by column."], "pred_sql": "SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;", "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "source_tables": ["cartoon"]}
{"sample_id": 629, "db_id": "tvshow", "question": "Find the production code and channel of the most recently aired cartoon .", "rationale": ["Identify the relevant table: The query requires information from the Cartoon table, specifically the Production_code and Channel columns.", "Determine the criteria for 'most recently aired': This can be achieved by ordering the records in the Cartoon table by the Original_air_date in descending order, which will place the most recent cartoon at the top.", "Limit the results to one record: To get only the most recently aired cartoon, we will use the LIMIT clause set to 1."], "pred_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;", "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "source_tables": ["cartoon"]}
{"sample_id": 630, "db_id": "tvshow", "question": "What is the produdction code and channel of the most recent cartoon ?", "rationale": ["Identify the relevant table: The query is asking for information about cartoons, so we will use the Cartoon table.", "Determine the columns needed: The user wants the production code and the channel, which correspond to the 'Production_code' and 'Channel' columns in the Cartoon table.", "Find the most recent cartoon: To get the most recent cartoon, we need to order the results by the 'Original_air_date' in descending order.", "Limit the results: Since we only want the most recent cartoon, we will limit the results to 1."], "pred_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;", "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "source_tables": ["cartoon"]}
{"sample_id": 631, "db_id": "tvshow", "question": "Find the package choice and series name of the TV channel that has high definition TV.", "rationale": ["Identify the relevant table: TV_Channel contains the necessary information about package options and series names.", "Determine the columns needed: We need 'Package_Option' and 'series_name' from the TV_Channel table.", "Filter the results: We want only those channels that have high definition TV, which is indicated by the 'Hight_definition_TV' column being 'Yes'.", "Construct the SQL SELECT statement to retrieve the specified columns from the TV_Channel table with the appropriate WHERE clause."], "pred_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';", "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'yes'", "source_tables": ["tv_channel"]}
{"sample_id": 632, "db_id": "tvshow", "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "rationale": ["Identify the relevant table: TV_Channel contains the necessary information about package options and series names.", "Determine the columns needed: We need 'Package_Option' and 'series_name' from the TV_Channel table.", "Filter the results: We need to find channels that support high definition TV, which is indicated by the 'Hight_definition_TV' column being 'Yes'.", "Construct the SQL SELECT statement to retrieve the desired columns from the TV_Channel table with the specified condition."], "pred_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';", "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'yes'", "source_tables": ["tv_channel"]}
{"sample_id": 633, "db_id": "tvshow", "question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "rationale": ["Identify the relevant tables: TV_Channel and Cartoon.", "Determine the relationship between the tables: Cartoon has a foreign key that references TV_Channel.", "We need to find countries of TV channels that broadcast cartoons written by Todd Casey.", "Use a JOIN to combine TV_Channel and Cartoon on the Channel field.", "Filter the results where the Written_by field in the Cartoon table matches 'Todd Casey'.", "Select distinct countries to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey';", "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 634, "db_id": "tvshow", "question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "rationale": ["Identify the relevant tables: Cartoon and TV_Channel.", "Determine the relationship between the tables: Cartoon has a foreign key 'Channel' that references 'id' in TV_Channel.", "We need to find countries, so we will select the 'Country' column from TV_Channel.", "We need to filter the cartoons written by Todd Casey, so we will add a WHERE clause to filter by 'Written_by' in the Cartoon table.", "Use DISTINCT to ensure we only get unique country names."], "pred_sql": "SELECT DISTINCT TV_Channel.Country \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE Cartoon.Written_by = 'Todd Casey';", "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 635, "db_id": "tvshow", "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "rationale": ["Identify the relevant tables: TV_Channel and Cartoon.", "We need to find countries where TV channels do not broadcast any cartoons written by Todd Casey.", "Use a LEFT JOIN to include all TV channels and their corresponding cartoons, if any.", "Filter the results to include only those channels where the Written_by field is not 'Todd Casey' or is NULL (indicating no cartoons).", "Select distinct countries from the filtered results to avoid duplicates."], "pred_sql": "SELECT DISTINCT TV_Channel.Country \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL;", "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 636, "db_id": "tvshow", "question": "What are the countries that are not playing cartoons written by Todd Casey?", "rationale": ["Identify the relevant tables: TV_Channel and Cartoon.", "Determine the condition: we need to find countries that are not airing cartoons written by Todd Casey.", "To do this, we first need to find the channels that have cartoons written by Todd Casey using a subquery: SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey'.", "Next, we need to select distinct countries from the TV_Channel table where the channel id is not in the result of the subquery.", "Combine these steps into a single SQL query that selects distinct countries from TV_Channel where the id is not in the list of channels from the subquery."], "pred_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');", "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 637, "db_id": "tvshow", "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "rationale": ["Identify the relevant tables: TV_Channel and Cartoon.", "Determine the columns needed: series_name and Country from TV_Channel.", "Establish the relationship between the tables using the Channel column.", "Filter the results based on the directors' names, Ben Jones and Michael Chang, using a WHERE clause with IN operator."], "pred_sql": "SELECT TV_Channel.series_name, TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');", "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 638, "db_id": "tvshow", "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "rationale": ["Identify the required fields: series_name and Country from the TV_Channel table.", "Determine the relationship between TV_Channel and Cartoon tables using the Channel field.", "Filter the Cartoon table for entries where Directed_by is either 'Ben Jones' or 'Michael Chang'.", "Construct the SQL query to select the desired fields from the TV_Channel table, joining it with the Cartoon table based on the Channel identifier, and applying the necessary filters."], "pred_sql": "SELECT TV_Channel.series_name, TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')", "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 639, "db_id": "tvshow", "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "rationale": ["Identify the relevant table: TV_Channel, as it contains the columns Pixel_aspect_ratio_PAR and Country.", "Determine the columns to select: Pixel_aspect_ratio_PAR and Country.", "Specify the condition: we want channels that do not use English, which translates to Language != 'English'.", "Construct the SQL query using SELECT to retrieve the specified columns from the TV_Channel table with the appropriate WHERE clause."], "pred_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';", "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "source_tables": ["tv_channel"]}
{"sample_id": 640, "db_id": "tvshow", "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "rationale": ["Identify the columns needed: Pixel_aspect_ratio_PAR and Country from the TV_Channel table.", "Determine the condition: we need channels that do not use English as their language.", "Construct the SQL SELECT statement to retrieve the specified columns from the TV_Channel table.", "Add a WHERE clause to filter out channels where the Language is not English."], "pred_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';", "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "source_tables": ["tv_channel"]}
{"sample_id": 641, "db_id": "tvshow", "question": "find id of the tv channels that from the countries where have more than two tv channels.", "rationale": ["Identify the requirement to find TV channel IDs based on the country.", "Determine that we need to group the TV channels by country to count how many channels exist in each country.", "Use a subquery to select countries that have more than two TV channels by using GROUP BY and HAVING COUNT(*) > 2.", "Finally, select the IDs of the TV channels that belong to those countries using the main query."], "pred_sql": "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2);", "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "source_tables": ["tv_channel"]}
{"sample_id": 642, "db_id": "tvshow", "question": "What are the ids of all tv channels that have more than 2 TV channels?", "rationale": ["Identify the table that contains the relevant data, which is TV_Channel.", "We need to find the ids of TV channels that have more than 2 entries in the TV_Channel table.", "To achieve this, we will use the GROUP BY clause to group the results by the 'id' column.", "We will then use the HAVING clause to filter these groups, keeping only those with a count greater than 2."], "pred_sql": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;", "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "source_tables": ["tv_channel"]}
{"sample_id": 643, "db_id": "tvshow", "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "rationale": ["Identify the main table to query from, which is TV_Channel, as we need the IDs of TV channels.", "We need to find channels that do not play any cartoons directed by Ben Jones.", "To do this, we will use a subquery to select all channels that have cartoons directed by Ben Jones.", "The subquery will select the 'Channel' from the Cartoon table where the 'Directed_by' is 'Ben Jones'.", "We will then use the NOT IN clause to filter out these channels from the main query, ensuring we only get channels that do not have any cartoons directed by Ben Jones."], "pred_sql": "SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones');", "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 644, "db_id": "tvshow", "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "rationale": ["Identify the relevant tables: TV_Channel and Cartoon.", "We need to find TV channels that do not have any cartoons directed by Ben Jones.", "Use a LEFT JOIN to include all channels from TV_Channel and match them with Cartoon based on the channel id.", "Filter the results where the Directed_by column in Cartoon is not 'Ben Jones' or is NULL (indicating no cartoons exist for that channel).", "Select the id of the TV channels that meet the criteria."], "pred_sql": "SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL GROUP BY TV_Channel.id;", "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 645, "db_id": "tvshow", "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "rationale": ["Identify the relevant table: TV_Channel contains the package options and Cartoon contains the director information.", "We need to find package options from TV_Channel where there are no cartoons directed by Ben Jones.", "To achieve this, we will perform a LEFT JOIN between TV_Channel and Cartoon on the channel ID.", "We will filter the results to include only those channels where the Directed_by field in the Cartoon table is not 'Ben Jones' or is NULL (indicating no cartoons exist for that channel).", "Finally, we will select distinct package options to avoid duplicates."], "pred_sql": "SELECT DISTINCT TV_Channel.Package_Option \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;", "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 646, "db_id": "tvshow", "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "rationale": ["Identify the relevant table: TV_Channel for package options and Cartoon for director information.", "We need to find package options from TV_Channel where there are no cartoons directed by Ben Jones.", "Use a LEFT JOIN to include all channels from TV_Channel and match them with Cartoon based on the channel ID.", "Filter the results to include only those channels where the director of the cartoons is not Ben Jones or where there are no cartoons at all (NULL values).", "Select distinct package options to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT TV_Channel.Package_Option \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;", "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "source_tables": ["tv_channel", "cartoon"]}
{"sample_id": 647, "db_id": "poker_player", "question": "How many poker players are there?", "rationale": ["Identify the requirement: The user wants to know the total number of poker players.", "To get the count of poker players, we need to use the COUNT() function in SQL.", "The relevant table for poker players is 'poker_player'.", "We will select the count of all entries in the 'poker_player' table.", "The final SQL query will be 'SELECT COUNT(*) AS total_players FROM poker_player;' to return the total number of poker players."], "pred_sql": "SELECT COUNT(*) AS total_players FROM poker_player;", "gold_sql": "SELECT count(*) FROM poker_player", "source_tables": ["poker_player"]}
{"sample_id": 648, "db_id": "poker_player", "question": "Count the number of poker players.", "rationale": ["Identify the goal of the query, which is to count the number of poker players.", "Determine the appropriate table to query, which is 'poker_player' as it contains the player data.", "Use the COUNT() function to count the total number of entries in the 'poker_player' table.", "Construct the SQL query to select the count and give it an alias for clarity."], "pred_sql": "SELECT COUNT(*) AS NumberOfPlayers FROM poker_player;", "gold_sql": "SELECT count(*) FROM poker_player", "source_tables": ["poker_player"]}
{"sample_id": 649, "db_id": "poker_player", "question": "List the earnings of poker players in descending order.", "rationale": ["Identify the table that contains the earnings information, which is the 'poker_player' table.", "Select the 'Earnings' column from the 'poker_player' table.", "Order the results by the 'Earnings' column in descending order to list the highest earnings first."], "pred_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;", "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "source_tables": ["poker_player"]}
{"sample_id": 650, "db_id": "poker_player", "question": "What are the earnings of poker players, ordered descending by value?", "rationale": ["Identify the relevant table: The query is about poker players' earnings, which are stored in the 'poker_player' table.", "Select the column of interest: We need to retrieve the 'Earnings' column from the 'poker_player' table.", "Order the results: The query specifies that the earnings should be ordered in descending order, so we will use 'ORDER BY Earnings DESC' to achieve this."], "pred_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;", "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "source_tables": ["poker_player"]}
{"sample_id": 651, "db_id": "poker_player", "question": "List the final tables made and the best finishes of poker players.", "rationale": ["Identify the required information: final tables made and best finishes of poker players.", "Determine the relevant table: the 'poker_player' table contains the necessary columns.", "Construct the SQL SELECT statement to retrieve 'Final_Table_Made' and 'Best_Finish' from the 'poker_player' table."], "pred_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player;", "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "source_tables": ["poker_player"]}
{"sample_id": 652, "db_id": "poker_player", "question": "What are the final tables made and best finishes for all poker players?", "rationale": ["Identify the relevant table: The query is asking for information about poker players, which is stored in the 'poker_player' table.", "Determine the required columns: The user wants to know about 'Final_Table_Made' and 'Best_Finish', which are both columns in the 'poker_player' table.", "Construct the SQL SELECT statement: We need to select the specified columns from the 'poker_player' table.", "Formulate the complete SQL query: Combine the SELECT statement with the FROM clause to create the final SQL query."], "pred_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player;", "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "source_tables": ["poker_player"]}
{"sample_id": 653, "db_id": "poker_player", "question": "What is the average earnings of poker players?", "rationale": ["Identify the requirement: Calculate the average earnings of poker players.", "Determine the relevant table: The 'poker_player' table contains the 'Earnings' column.", "Use the AVG() function to compute the average of the 'Earnings' column.", "Construct the SQL query to select the average earnings from the 'poker_player' table."], "pred_sql": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;", "gold_sql": "SELECT avg(Earnings) FROM poker_player", "source_tables": ["poker_player"]}
{"sample_id": 654, "db_id": "poker_player", "question": "Return the average earnings across all poker players.", "rationale": ["Identify the requirement to calculate the average earnings of all poker players.", "Determine the relevant table, which is 'poker_player', where the earnings data is stored.", "Use the AVG() function to compute the average of the 'Earnings' column.", "Construct the SQL query to select the average earnings from the 'poker_player' table."], "pred_sql": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;", "gold_sql": "SELECT avg(Earnings) FROM poker_player", "source_tables": ["poker_player"]}
{"sample_id": 655, "db_id": "poker_player", "question": "What is the money rank of the poker player with the highest earnings?", "rationale": ["Identify the relevant table: poker_player, which contains the Money_Rank and Earnings columns.", "Determine the highest earnings by using the MAX function on the Earnings column.", "Use a subquery to find the maximum earnings and filter the main query to get the Money_Rank corresponding to that maximum earnings."], "pred_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);", "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "source_tables": ["poker_player"]}
{"sample_id": 656, "db_id": "poker_player", "question": "Return the money rank of the player with the greatest earnings.", "rationale": ["Identify the column needed: 'Money_Rank' from the 'poker_player' table.", "Determine the player with the greatest earnings: this requires finding the maximum value in the 'Earnings' column.", "Use a subquery to find the maximum earnings: SELECT MAX(Earnings) FROM poker_player.", "Filter the main query to return the 'Money_Rank' where 'Earnings' equals the maximum earnings found in the subquery."], "pred_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);", "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "source_tables": ["poker_player"]}
{"sample_id": 657, "db_id": "poker_player", "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "rationale": ["Identify the relevant table: The query involves the 'poker_player' table since it contains the columns 'Final_Table_Made' and 'Earnings'.", "Determine the condition: We need to filter the players based on their earnings being less than 200000.", "Select the maximum value: We want to find the maximum number of final tables made, which requires using the MAX() function on the 'Final_Table_Made' column.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to filter the results based on the earnings condition."], "pred_sql": "SELECT MAX(Final_Table_Made) AS Max_Final_Tables\nFROM poker_player\nWHERE Earnings < 200000;", "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "source_tables": ["poker_player"]}
{"sample_id": 658, "db_id": "poker_player", "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "rationale": ["Identify the relevant table: poker_player, which contains the columns for Final_Table_Made and Earnings.", "We need to find the maximum value of Final_Table_Made, so we will use the MAX() function.", "We need to filter the results to only include players with Earnings below 200000, so we will add a WHERE clause for Earnings.", "Construct the SQL query to select the maximum Final_Table_Made from the poker_player table with the specified condition."], "pred_sql": "SELECT MAX(Final_Table_Made) AS Max_Final_Tables\nFROM poker_player\nWHERE Earnings < 200000;", "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "source_tables": ["poker_player"]}
{"sample_id": 659, "db_id": "poker_player", "question": "What are the names of poker players?", "rationale": ["Identify the relevant tables: 'people' for player names and 'poker_player' for player details.", "Determine the relationship between the tables: 'poker_player' has a foreign key 'People_ID' that links to 'people'.", "Select the 'Name' column from the 'people' table, as it contains the names of the poker players.", "Use an INNER JOIN to combine the 'people' and 'poker_player' tables based on the 'People_ID' to ensure we only get names of players who exist in the poker_player table."], "pred_sql": "SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["poker_player", "people"]}
{"sample_id": 660, "db_id": "poker_player", "question": "Return the names of all the poker players.", "rationale": ["Identify the tables involved: 'people' and 'poker_player'.", "Determine the relevant column to retrieve: 'Name' from the 'people' table.", "Establish the relationship between the two tables using the foreign key 'People_ID'.", "Construct the SQL query to select the 'Name' from the 'people' table, joining it with the 'poker_player' table on 'People_ID'."], "pred_sql": "SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["poker_player", "people"]}
{"sample_id": 661, "db_id": "poker_player", "question": "What are the names of poker players whose earnings is higher than 300000?", "rationale": ["Identify the relevant tables: 'poker_player' for earnings and 'people' for names.", "Determine the condition: we need players with earnings greater than 300000.", "Join the 'poker_player' table with the 'people' table on the common column 'People_ID' to access player names.", "Select the 'Name' column from the 'people' table where the earnings condition is met."], "pred_sql": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > '300000';", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "source_tables": ["poker_player", "people"]}
{"sample_id": 662, "db_id": "poker_player", "question": "Give the names of poker players who have earnings above 300000.", "rationale": ["Identify the relevant tables: 'people' for player names and 'poker_player' for earnings.", "Determine the relationship between the tables: 'poker_player' has a foreign key 'People_ID' that links to 'people'.", "Select the 'Name' column from the 'people' table.", "Filter the results based on the condition that 'Earnings' in the 'poker_player' table is greater than 300000.", "Construct the SQL query using a JOIN to combine the two tables based on 'People_ID' and apply the earnings filter."], "pred_sql": "SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "source_tables": ["poker_player", "people"]}
{"sample_id": 663, "db_id": "poker_player", "question": "List the names of poker players ordered by the final tables made in ascending order.", "rationale": ["Identify the tables involved: 'poker_player' and 'people'.", "Determine the columns needed: we need the 'Name' from the 'people' table and 'Final_Table_Made' from the 'poker_player' table.", "Establish the relationship between the tables using the foreign key: 'poker_player.People_ID' links to 'people.People_ID'.", "Formulate the SELECT statement to retrieve the 'Name' from the 'people' table.", "Add a JOIN clause to combine 'poker_player' and 'people' based on the foreign key relationship.", "Include an ORDER BY clause to sort the results by 'Final_Table_Made' in ascending order."], "pred_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "source_tables": ["poker_player", "people"]}
{"sample_id": 664, "db_id": "poker_player", "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "rationale": ["Identify the relevant tables: 'people' for player names and 'poker_player' for final table data.", "We need to count the number of final tables made by each player, so we will use COUNT() function on 'Final_Table_Made'.", "Join the 'people' table with the 'poker_player' table using the foreign key 'People_ID'.", "Filter the results to include only those players who have made it to the final table, indicated by 'Final_Table_Made' being 'Yes'.", "Group the results by player name to aggregate the count of final tables made.", "Order the results in ascending order based on the count of final tables made."], "pred_sql": "SELECT p.Name, COUNT(pp.Final_Table_Made) AS Final_Table_Count \nFROM people p \nJOIN poker_player pp ON p.People_ID = pp.People_ID \nWHERE pp.Final_Table_Made = 'Yes' \nGROUP BY p.Name \nORDER BY Final_Table_Count ASC;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "source_tables": ["poker_player", "people"]}
{"sample_id": 665, "db_id": "poker_player", "question": "What is the birth date of the poker player with the lowest earnings?", "rationale": ["Identify the relevant tables: 'people' for birth dates and 'poker_player' for earnings.", "We need to find the player with the lowest earnings, so we will sort the 'Earnings' column in ascending order.", "To get the birth date of the player, we will join the 'people' table with the 'poker_player' table on the 'People_ID' column.", "After sorting by earnings, we will limit the results to 1 to get the player with the lowest earnings."], "pred_sql": "SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings ASC LIMIT 1;", "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "source_tables": ["poker_player", "people"]}
{"sample_id": 666, "db_id": "poker_player", "question": "Return the birth date of the poker player with the lowest earnings.", "rationale": ["Identify the relevant tables: 'people' for birth dates and 'poker_player' for earnings.", "We need to find the player with the lowest earnings, so we will order the results by the 'Earnings' column in ascending order.", "To get the birth date of the player, we will select the 'Birth_Date' from the 'people' table.", "We need to join the 'people' table with the 'poker_player' table on the 'People_ID' column to link the player's earnings with their birth date.", "Finally, we will limit the results to 1 to get only the player with the lowest earnings."], "pred_sql": "SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings ASC LIMIT 1;", "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "source_tables": ["poker_player", "people"]}
{"sample_id": 667, "db_id": "poker_player", "question": "What is the money rank of the tallest poker player?", "rationale": ["Identify the relevant tables: 'poker_player' for money rank and 'people' for height.", "Determine the tallest player by finding the maximum height in the 'people' table.", "Join the 'poker_player' and 'people' tables on the 'People_ID' to access both money rank and height.", "Filter the results to only include the player(s) with the maximum height.", "Select the 'Money_Rank' of the tallest player."], "pred_sql": "SELECT pp.Money_Rank FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people);", "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "source_tables": ["poker_player", "people"]}
{"sample_id": 668, "db_id": "poker_player", "question": "Return the money rank of the poker player with the greatest height.", "rationale": ["Identify the relevant tables: 'poker_player' and 'people'.", "Determine the columns needed: 'Money_Rank' from 'poker_player' and 'Height' from 'people'.", "To find the player with the greatest height, we need to use a subquery to get the maximum height from the 'people' table.", "Join the 'poker_player' and 'people' tables on 'People_ID' to access the 'Money_Rank' for the player with the maximum height.", "Construct the final SQL query to select 'Money_Rank' where 'Height' matches the maximum height found in the subquery."], "pred_sql": "SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height = (SELECT MAX(Height) FROM people);", "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "source_tables": ["poker_player", "people"]}
{"sample_id": 669, "db_id": "poker_player", "question": "What is the average earnings of poker players with height higher than 200?", "rationale": ["Identify the relevant tables: 'poker_player' for earnings and 'people' for height.", "Determine the condition: we need players with height greater than 200.", "Use the AVG() function to calculate the average of the 'Earnings' column.", "Join the 'poker_player' table with the 'people' table on the 'People_ID' column to access height information.", "Construct the SQL query to select the average earnings where the height condition is met."], "pred_sql": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;", "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "source_tables": ["poker_player", "people"]}
{"sample_id": 670, "db_id": "poker_player", "question": "Give average earnings of poker players who are taller than 200.", "rationale": ["Identify the required data: average earnings of poker players taller than 200 cm.", "Determine the relevant tables: 'poker_player' for earnings and 'people' for height.", "Join the 'poker_player' and 'people' tables on the common column 'People_ID'.", "Filter the results to include only those players whose height is greater than 200 cm.", "Use the AVG() function to calculate the average of the 'Earnings' column."], "pred_sql": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;", "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "source_tables": ["poker_player", "people"]}
{"sample_id": 671, "db_id": "poker_player", "question": "What are the names of poker players in descending order of earnings?", "rationale": ["Identify the relevant tables: 'poker_player' for player earnings and 'people' for player names.", "Determine the columns needed: 'Name' from the 'people' table and 'Earnings' from the 'poker_player' table.", "Establish the relationship between the tables using the foreign key 'People_ID'.", "Formulate the SQL query to select the names of players, joining the two tables on 'People_ID'.", "Add an ORDER BY clause to sort the results by 'Earnings' in descending order."], "pred_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "source_tables": ["poker_player", "people"]}
{"sample_id": 672, "db_id": "poker_player", "question": "Return the names of poker players sorted by their earnings descending.", "rationale": ["Identify the tables involved: 'poker_player' for player details and 'people' for player names.", "Determine the columns needed: 'Name' from the 'people' table and 'Earnings' from the 'poker_player' table.", "Establish the relationship between the tables using the foreign key 'People_ID'.", "Formulate the SQL SELECT statement to retrieve the 'Name' of players.", "Add a JOIN clause to combine 'poker_player' and 'people' tables on 'People_ID'.", "Include an ORDER BY clause to sort the results by 'Earnings' in descending order."], "pred_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "source_tables": ["poker_player", "people"]}
{"sample_id": 673, "db_id": "poker_player", "question": "What are different nationalities of people and the corresponding number of people from each nation?", "rationale": ["Identify the relevant table: The query requires information about nationalities and the count of people, which is found in the 'people' table.", "Select the columns needed: We need to select 'Nationality' and count the number of people for each nationality.", "Use the COUNT() function: To get the number of people from each nationality, we will use the COUNT() function.", "Group the results: To get the count per nationality, we will use the GROUP BY clause on the 'Nationality' column."], "pred_sql": "SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality;", "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "source_tables": ["people"]}
{"sample_id": 674, "db_id": "poker_player", "question": "How many people are there of each nationality?", "rationale": ["Identify the table that contains nationality information, which is the 'people' table.", "We need to count the number of people for each nationality, so we will use the COUNT() function.", "To group the results by nationality, we will use the GROUP BY clause on the 'Nationality' column.", "The final SQL query will select the 'Nationality' and the count of people for each nationality."], "pred_sql": "SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality;", "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "source_tables": ["people"]}
{"sample_id": 675, "db_id": "poker_player", "question": "What is the most common nationality of people?", "rationale": ["Identify the relevant table: The query requires information about people's nationalities, which is found in the 'people' table.", "Determine the necessary columns: We need the 'Nationality' column to find the most common nationality and a count of occurrences to determine which is the most common.", "Use the COUNT function: To find the most common nationality, we will count the number of occurrences of each nationality.", "Group the results: We will group the results by 'Nationality' to aggregate the counts for each nationality.", "Order the results: To find the most common nationality, we will order the results in descending order based on the count.", "Limit the results: We only need the top result, so we will limit the output to 1."], "pred_sql": "SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}
{"sample_id": 676, "db_id": "poker_player", "question": "Give the nationality that is most common across all people.", "rationale": ["Identify the table that contains the nationality information, which is the 'people' table.", "To find the most common nationality, we need to count the occurrences of each nationality.", "We will use the COUNT() function to count how many times each nationality appears.", "We will group the results by nationality using GROUP BY.", "To get the most common nationality, we will order the results in descending order based on the count.", "Finally, we will limit the results to only the top entry using LIMIT 1."], "pred_sql": "SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}
{"sample_id": 677, "db_id": "poker_player", "question": "What are the nationalities that are shared by at least two people?", "rationale": ["Identify the relevant table: The query requires information about nationalities, which is found in the 'people' table.", "Select the 'Nationality' column: We need to retrieve the nationalities from the 'people' table.", "Group by 'Nationality': To find shared nationalities, we group the results by the 'Nationality' column.", "Count the number of people for each nationality: We use the COUNT function to count how many people share each nationality.", "Filter the results: We use the HAVING clause to filter the groups, keeping only those with a count of at least 2."], "pred_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;", "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "source_tables": ["people"]}
{"sample_id": 678, "db_id": "poker_player", "question": "Return the nationalities for which there are two or more people.", "rationale": ["Identify the relevant table: The query requires information from the 'people' table, specifically the 'Nationality' column.", "Group the results: To find nationalities with two or more people, we need to group the results by the 'Nationality' column.", "Count the number of people: Use the COUNT function to count the number of 'People_ID' entries for each nationality.", "Filter the results: Use the HAVING clause to filter the groups to only include those with a count of 2 or more."], "pred_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;", "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "source_tables": ["people"]}
{"sample_id": 679, "db_id": "poker_player", "question": "List the names and birth dates of people in ascending alphabetical order of name.", "rationale": ["Identify the table that contains the required information: the 'people' table has the 'Name' and 'Birth_Date' columns.", "Select the columns needed: we need to select 'Name' and 'Birth_Date'.", "Specify the order of the results: we want the results in ascending alphabetical order based on 'Name'.", "Construct the SQL query using the SELECT statement, specifying the columns and the ORDER BY clause."], "pred_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;", "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}
{"sample_id": 680, "db_id": "poker_player", "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "rationale": ["Identify the table that contains the required information: the 'people' table has the 'Name' and 'Birth_Date' columns.", "Formulate the SELECT statement to retrieve 'Name' and 'Birth_Date'.", "Add the ORDER BY clause to sort the results by 'Name' in alphabetical order."], "pred_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;", "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}
{"sample_id": 681, "db_id": "poker_player", "question": "Show names of people whose nationality is not \"Russia\".", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "Determine the column that contains the nationality information, which is the 'Nationality' column in the 'people' table.", "Formulate a query to select the 'Name' column from the 'people' table where the 'Nationality' is not equal to 'Russia'."], "pred_sql": "SELECT Name FROM people WHERE Nationality != 'Russia';", "gold_sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "source_tables": ["people"]}
{"sample_id": 682, "db_id": "poker_player", "question": "What are the names of people who are not from Russia?", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "Determine the column that holds the names, which is 'Name'.", "Identify the condition to filter out people from Russia, which involves the 'Nationality' column.", "Construct the SQL query to select the 'Name' from the 'people' table where 'Nationality' is not equal to 'Russia'."], "pred_sql": "SELECT Name FROM people WHERE Nationality != 'Russia';", "gold_sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "source_tables": ["people"]}
{"sample_id": 683, "db_id": "poker_player", "question": "List the names of people that are not poker players.", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "Determine that we need to find people who are not poker players, which means we need to exclude those who have entries in the 'poker_player' table.", "To do this, we can use a subquery that selects the 'People_ID' from the 'poker_player' table.", "The main query will select the 'Name' from the 'people' table where the 'People_ID' is not in the list of 'People_ID' from the subquery."], "pred_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "source_tables": ["poker_player", "people"]}
{"sample_id": 684, "db_id": "poker_player", "question": "What are the names of people who do not play poker?", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "We need to find people who do not play poker, which means we need to exclude those who have an entry in the 'poker_player' table.", "To do this, we can use a subquery that selects all People_IDs from the 'poker_player' table.", "The main query will select the Name from the 'people' table where the People_ID is not in the list of People_IDs returned by the subquery."], "pred_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "source_tables": ["poker_player", "people"]}
{"sample_id": 685, "db_id": "poker_player", "question": "How many distinct nationalities are there?", "rationale": ["Identify the table that contains nationality information, which is the 'people' table.", "To find the number of distinct nationalities, we need to use the COUNT function along with DISTINCT.", "The SQL query should select the count of distinct values in the 'Nationality' column from the 'people' table."], "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS Distinct_Nationalities FROM people;", "gold_sql": "SELECT count(DISTINCT Nationality) FROM people", "source_tables": ["people"]}
{"sample_id": 686, "db_id": "poker_player", "question": "Count the number of different nationalities.", "rationale": ["Identify the goal: Count the number of different nationalities.", "Determine the relevant table: The 'people' table contains the 'Nationality' column.", "Use the COUNT function to count distinct values in the 'Nationality' column.", "Construct the SQL query to select the count of distinct nationalities from the 'people' table."], "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS Different_Nationalities FROM people;", "gold_sql": "SELECT count(DISTINCT Nationality) FROM people", "source_tables": ["people"]}
{"sample_id": 687, "db_id": "voter_1", "question": "How many states are there?", "rationale": ["Identify the goal: We need to find out how many unique states are present in the database.", "Determine the relevant table: The AREA_CODE_STATE table contains the state information.", "Use the COUNT function to count the distinct states: We will use COUNT(DISTINCT state) to ensure we only count unique states.", "Formulate the SQL query: The final SQL query will select the count of distinct states from the AREA_CODE_STATE table."], "pred_sql": "SELECT COUNT(DISTINCT state) AS number_of_states FROM AREA_CODE_STATE;", "gold_sql": "SELECT count(*) FROM area_code_state", "source_tables": ["area_code_state"]}
{"sample_id": 688, "db_id": "voter_1", "question": "List the contestant numbers and names, ordered by contestant name descending.", "rationale": ["Identify the table that contains the required information: CONTESTANTS.", "Determine the columns needed: contestant_number and contestant_name.", "Specify the order in which to sort the results: by contestant_name in descending order.", "Construct the SQL SELECT statement to retrieve the specified columns from the CONTESTANTS table, applying the ORDER BY clause."], "pred_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;", "gold_sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "source_tables": ["contestants"]}
{"sample_id": 689, "db_id": "voter_1", "question": "List the vote ids, phone numbers and states of all votes.", "rationale": ["Identify the required columns: vote_id, phone_number, and state.", "Determine the table from which to retrieve these columns: the VOTES table.", "Construct the SQL SELECT statement to fetch the specified columns from the VOTES table."], "pred_sql": "SELECT vote_id, phone_number, state FROM VOTES;", "gold_sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "source_tables": ["votes"]}
{"sample_id": 690, "db_id": "voter_1", "question": "What are the maximum and minimum values of area codes?", "rationale": ["Identify the table that contains area codes, which is AREA_CODE_STATE.", "To find the maximum and minimum values of area codes, we need to use the MAX() and MIN() aggregate functions.", "We will select the maximum and minimum area codes from the AREA_CODE_STATE table.", "The final SQL query will select the maximum and minimum area codes and label them appropriately."], "pred_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;", "gold_sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "source_tables": ["area_code_state"]}
{"sample_id": 691, "db_id": "voter_1", "question": "What is last date created of votes from the state 'CA'?", "rationale": ["Identify the table that contains the relevant data: VOTES table has the 'created' timestamp and 'state' information.", "We need to find the last date created of votes specifically from the state 'CA'.", "To get the last date, we can use the MAX() function on the 'created' column.", "We will filter the results to only include votes from the state 'CA' using a WHERE clause.", "Combine these elements to form the final SQL query."], "pred_sql": "SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA';", "gold_sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "source_tables": ["votes"]}
{"sample_id": 692, "db_id": "voter_1", "question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "rationale": ["Identify the table that contains contestant names, which is the CONTESTANTS table.", "Determine the condition needed to filter out the contestant named 'Jessie Alloway'.", "Construct the SQL SELECT statement to retrieve the contestant_name from the CONTESTANTS table where the contestant_name is not equal to 'Jessie Alloway'."], "pred_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';", "gold_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "source_tables": ["contestants"]}
{"sample_id": 693, "db_id": "voter_1", "question": "What are the distinct states and create time of all votes?", "rationale": ["Identify the table that contains the required information: VOTES table has the 'state' and 'created' columns.", "We need to select distinct values to avoid duplicates, so we will use the DISTINCT keyword.", "Construct the SQL query to select 'state' and 'created' from the VOTES table."], "pred_sql": "SELECT DISTINCT state, created FROM VOTES;", "gold_sql": "SELECT DISTINCT state ,  created FROM votes", "source_tables": ["votes"]}
{"sample_id": 694, "db_id": "voter_1", "question": "What are the contestant numbers and names of the contestants who had at least two votes?", "rationale": ["We need to retrieve contestant numbers and names from the CONTESTANTS table.", "To find contestants with at least two votes, we need to join the CONTESTANTS table with the VOTES table on the contestant_number.", "We will group the results by contestant_number and contestant_name to aggregate the votes for each contestant.", "Using the HAVING clause, we will filter the groups to include only those with a count of votes (vote_id) greater than or equal to 2."], "pred_sql": "SELECT C.contestant_number, C.contestant_name \nFROM CONTESTANTS C \nJOIN VOTES V ON C.contestant_number = V.contestant_number \nGROUP BY C.contestant_number, C.contestant_name \nHAVING COUNT(V.vote_id) >= 2;", "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "source_tables": ["votes", "contestants"]}
{"sample_id": 695, "db_id": "voter_1", "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "rationale": ["We need to find contestants who received votes, so we will join the CONTESTANTS table with the VOTES table on the contestant_number.", "We will group the results by contestant_number and contestant_name to aggregate the votes for each contestant.", "To find the contestant with the least votes, we will order the results by the count of votes in ascending order.", "Finally, we will limit the results to 1 to get only the contestant with the least votes."], "pred_sql": "SELECT c.contestant_number, c.contestant_name \nFROM CONTESTANTS c \nJOIN VOTES v ON c.contestant_number = v.contestant_number \nGROUP BY c.contestant_number, c.contestant_name \nORDER BY COUNT(v.vote_id) ASC \nLIMIT 1;", "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "source_tables": ["votes", "contestants"]}
{"sample_id": 696, "db_id": "voter_1", "question": "What are the number of votes from state 'NY' or 'CA'?", "rationale": ["Identify the relevant table: VOTES, as it contains the voting information.", "Determine the columns needed: We need to count the number of votes, so we will use COUNT(*) to get the total number of rows that match our criteria.", "Specify the condition: We need to filter the votes based on the state, specifically for 'NY' or 'CA'.", "Use the SQL IN clause to specify multiple values for the state condition.", "Construct the SQL query to select the count of votes from the VOTES table where the state is either 'NY' or 'CA'."], "pred_sql": "SELECT COUNT(*) AS number_of_votes FROM VOTES WHERE state IN ('NY', 'CA');", "gold_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "source_tables": ["votes"]}
{"sample_id": 697, "db_id": "voter_1", "question": "How many contestants did not get voted?", "rationale": ["Identify the total number of contestants from the CONTESTANTS table.", "Determine which contestants have received votes by checking the VOTES table.", "Use a subquery to find all distinct contestant_numbers that have votes.", "Count the contestants from the CONTESTANTS table whose contestant_number is not in the list of voted contestants."], "pred_sql": "SELECT COUNT(*) AS unvoted_contestants FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES);", "gold_sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "source_tables": ["votes", "contestants"]}
{"sample_id": 698, "db_id": "voter_1", "question": "What is the area code in which the most voters voted?", "rationale": ["Identify the states from which votes were cast by grouping the votes and counting them.", "Order the states by the number of votes in descending order to find the state with the most votes.", "Select the area code corresponding to that state from the AREA_CODE_STATE table."], "pred_sql": "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1)", "gold_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["votes", "area_code_state"]}
{"sample_id": 699, "db_id": "voter_1", "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "rationale": ["Identify the relevant tables: VOTES and CONTESTANTS are needed to get the required information.", "Determine the columns to select: We need the 'created' date, 'state', and 'phone_number' from the VOTES table.", "Establish the relationship between tables: VOTES has a foreign key 'contestant_number' that links to CONTESTANTS.", "Filter the results: We need to filter the votes to only include those for the contestant named 'Tabatha Gehling'.", "Construct the SQL query using a JOIN to combine the tables and a WHERE clause to filter by contestant name."], "pred_sql": "SELECT VOTES.created, VOTES.state, VOTES.phone_number \nFROM VOTES \nJOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number \nWHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';", "gold_sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "source_tables": ["votes", "contestants"]}
{"sample_id": 700, "db_id": "voter_1", "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "rationale": ["Identify the tables needed: AREA_CODE_STATE for area codes, VOTES for votes, and CONTESTANTS for contestant names.", "We need to find voters who voted for both 'Tabatha Gehling' and 'Kelly Clauss'. This requires joining the VOTES table twice: once for each contestant.", "Join the VOTES table with the CONTESTANTS table to filter votes for 'Tabatha Gehling'.", "Join the VOTES table again (aliased as v2) with the CONTESTANTS table to filter votes for 'Kelly Clauss'.", "To find voters who voted for both contestants, we can match the phone numbers from both votes (v1 and v2).", "Join the AREA_CODE_STATE table to get the area codes corresponding to the states from which the votes were cast.", "Select distinct area codes to avoid duplicates."], "pred_sql": "SELECT DISTINCT ac.area_code\nFROM AREA_CODE_STATE ac\nJOIN VOTES v1 ON ac.state = v1.state\nJOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number\nJOIN VOTES v2 ON v1.phone_number = v2.phone_number\nJOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number\nWHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';", "gold_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "source_tables": ["votes", "area_code_state", "contestants"]}
{"sample_id": 701, "db_id": "voter_1", "question": "Return the names of the contestants whose names contain the substring 'Al' .", "rationale": ["Identify the table that contains contestant names, which is the CONTESTANTS table.", "Determine the column that holds the contestant names, which is contestant_name.", "Use the SQL LIKE operator to filter names that contain the substring 'Al'.", "The '%' wildcard is used before and after 'Al' to match any characters before or after the substring.", "Construct the SQL SELECT statement to retrieve the contestant_name from the CONTESTANTS table with the specified condition."], "pred_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';", "gold_sql": "select contestant_name from contestants where contestant_name like '%al%'", "source_tables": ["contestants"]}
{"sample_id": 702, "db_id": "world_1", "question": "What are the names of all the countries that became independent after 1950?", "rationale": ["Identify the table that contains information about countries, which is the 'country' table.", "Determine the relevant column that indicates the year of independence, which is 'IndepYear'.", "Formulate a query to select the 'Name' of countries where 'IndepYear' is greater than 1950."], "pred_sql": "SELECT Name FROM country WHERE IndepYear > '1950';", "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "source_tables": ["country"]}
{"sample_id": 703, "db_id": "world_1", "question": "Give the names of the nations that were founded after 1950.", "rationale": ["Identify the relevant table: The query requires information about nations, which is found in the 'country' table.", "Determine the relevant column: We need the names of the nations, which corresponds to the 'Name' column in the 'country' table.", "Filter the results: The query specifies nations founded after 1950, so we need to filter the results based on the 'IndepYear' column, ensuring it is greater than '1950'.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to retrieve the desired data."], "pred_sql": "SELECT Name FROM country WHERE IndepYear > '1950';", "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "source_tables": ["country"]}
{"sample_id": 704, "db_id": "world_1", "question": "How many countries have a republic as their form of government?", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including their government forms.", "Determine the specific column to filter: The 'GovernmentForm' column will be used to identify countries with a republic form of government.", "Construct the SQL query: Use the COUNT() function to count the number of countries where the 'GovernmentForm' contains the word 'republic'.", "Format the SQL query to select the count from the 'country' table with the appropriate WHERE clause."], "pred_sql": "SELECT COUNT(*) AS NumberOfCountries FROM country WHERE GovernmentForm LIKE '%republic%';", "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic'", "source_tables": ["country"]}
{"sample_id": 705, "db_id": "world_1", "question": "How many countries have governments that are republics?", "rationale": ["Identify the relevant table: The 'country' table contains information about countries and their government forms.", "Determine the condition: We need to count countries where the 'GovernmentForm' includes the word 'Republic'.", "Construct the SQL query: Use the COUNT function to count the number of rows that meet the condition in the 'country' table."], "pred_sql": "SELECT COUNT(*) AS RepublicCount FROM country WHERE GovernmentForm LIKE '%Republic%';", "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic'", "source_tables": ["country"]}
{"sample_id": 706, "db_id": "world_1", "question": "What is the total surface area of the countries in the Caribbean region?", "rationale": ["Identify the relevant table: The 'country' table contains the 'SurfaceArea' and 'Region' columns.", "Determine the condition: We need to filter the countries that are in the 'Caribbean' region.", "Use the SUM function: To get the total surface area, we will use the SUM aggregate function on the 'SurfaceArea' column.", "Construct the SQL query: Combine the SELECT statement with the SUM function and the WHERE clause to filter by region."], "pred_sql": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';", "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean'", "source_tables": ["country"]}
{"sample_id": 707, "db_id": "world_1", "question": "How much surface area do the countires in the Carribean cover together?", "rationale": ["Identify the relevant table: The 'country' table contains the 'SurfaceArea' and 'Region' columns.", "Determine the region of interest: The query specifies the Caribbean region.", "Use the SUM function to calculate the total surface area of countries in the Caribbean.", "Construct the SQL query to select the sum of 'SurfaceArea' from the 'country' table where 'Region' is 'Caribbean'."], "pred_sql": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';", "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean'", "source_tables": ["country"]}
{"sample_id": 708, "db_id": "world_1", "question": "Which continent is Anguilla in?", "rationale": ["Identify the relevant table: The query is asking for the continent of Anguilla, which is a country. Therefore, we will use the 'country' table.", "Determine the column to select: We need to retrieve the 'Continent' column from the 'country' table.", "Specify the condition: We need to filter the results to find the row where the 'Name' column matches 'Anguilla'.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT Continent FROM country WHERE Name = 'Anguilla';", "gold_sql": "SELECT Continent FROM country WHERE Name  =  'Anguilla'", "source_tables": ["country"]}
{"sample_id": 709, "db_id": "world_1", "question": "What is the continent name which Anguilla belongs to?", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including their continent.", "Determine the specific information needed: We need to find the continent for the country named 'Anguilla'.", "Formulate the SQL query: We will select the 'continent' column from the 'country' table where the 'Name' column matches 'Anguilla'."], "pred_sql": "SELECT continent FROM country WHERE Name = 'Anguilla';", "gold_sql": "SELECT Continent FROM country WHERE Name  =  'Anguilla'", "source_tables": ["country"]}
{"sample_id": 710, "db_id": "world_1", "question": "Which region is the city Kabul located in?", "rationale": ["Identify the relevant tables: We need information from the 'city' table to find Kabul and the 'country' table to find its region.", "Determine the relationship: The 'city' table has a foreign key 'CountryCode' that links to the 'Code' in the 'country' table.", "Formulate the query: We will join the 'city' and 'country' tables on the 'CountryCode' and 'Code' fields.", "Specify the condition: We need to filter the results to only include the city named 'Kabul'.", "Select the desired output: We want to retrieve the 'Region' from the 'country' table."], "pred_sql": "SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';", "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'", "source_tables": ["country", "city"]}
{"sample_id": 711, "db_id": "world_1", "question": "What region is Kabul in?", "rationale": ["Identify the relevant table that contains the information about regions, which is the 'country' table.", "Determine that we need to find the region for the city 'Kabul'.", "To find the region, we first need to get the CountryCode for Kabul from the 'city' table.", "Use a subquery to select the CountryCode from the 'city' table where the Name is 'Kabul'.", "Finally, use the CountryCode obtained from the subquery to select the corresponding Region from the 'country' table."], "pred_sql": "SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul');", "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'", "source_tables": ["country", "city"]}
{"sample_id": 712, "db_id": "world_1", "question": "Which language is the most popular in Aruba?", "rationale": ["Identify the country code for Aruba by querying the 'country' table using the country name.", "Use the country code obtained to query the 'countrylanguage' table to find languages spoken in Aruba.", "Order the results by the percentage of speakers in descending order to find the most popular language.", "Limit the results to 1 to get only the most popular language."], "pred_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1;", "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 713, "db_id": "world_1", "question": "What language is predominantly spoken in Aruba?", "rationale": ["Identify the country code for Aruba by querying the 'country' table using the country name 'Aruba'.", "Use the country code obtained to query the 'countrylanguage' table to find languages spoken in Aruba.", "Filter the results to only include official languages by checking the 'IsOfficial' column.", "Order the results by the percentage of the population that speaks each language in descending order to find the predominant language.", "Limit the results to 1 to get the most predominantly spoken language."], "pred_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1;", "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 714, "db_id": "world_1", "question": "What are the population and life expectancies in Brazil?", "rationale": ["Identify the relevant table: The 'country' table contains the population and life expectancy data.", "Determine the columns needed: We need 'Population' and 'LifeExpectancy' from the 'country' table.", "Specify the condition: We want data specifically for Brazil, so we will filter the results where the 'Name' column equals 'Brazil'.", "Construct the SQL query: Using the SELECT statement to retrieve the specified columns from the 'country' table with the appropriate WHERE clause."], "pred_sql": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil';", "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'", "source_tables": ["country"]}
{"sample_id": 715, "db_id": "world_1", "question": "Give me Brazil\u2019s population and life expectancies.", "rationale": ["Identify the table that contains the required information: The 'country' table has the columns for population and life expectancy.", "Determine the specific country of interest: Brazil.", "Construct the SQL query to select the Population and LifeExpectancy columns from the country table where the Name is Brazil."], "pred_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';", "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'", "source_tables": ["country"]}
{"sample_id": 716, "db_id": "world_1", "question": "What are the region and population of Angola?", "rationale": ["Identify the relevant table: The 'country' table contains the information about countries, including their region and population.", "Determine the columns needed: We need the 'Region' and 'Population' columns from the 'country' table.", "Specify the condition: We want to filter the results to only include the country named 'Angola'.", "Construct the SQL query: Using the SELECT statement to retrieve the specified columns from the 'country' table where the country name is 'Angola'."], "pred_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola';", "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  'Angola'", "source_tables": ["country"]}
{"sample_id": 717, "db_id": "world_1", "question": "What region does Angola belong to and what is its population?", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including their region and population.", "Determine the columns needed: We need the 'Region' and 'Population' columns for Angola.", "Formulate the SQL query: We will select the 'Region' and 'Population' from the 'country' table where the 'Name' is 'Angola'."], "pred_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola';", "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  'Angola'", "source_tables": ["country"]}
{"sample_id": 718, "db_id": "world_1", "question": "What is the average expected life expectancy for countries in the region of Central Africa?", "rationale": ["Identify the relevant table: The 'country' table contains the 'LifeExpectancy' and 'Region' columns.", "Determine the condition: We need to filter the countries that are in the 'Central Africa' region.", "Use the AVG() function: To calculate the average life expectancy, we will use the AVG() function on the 'LifeExpectancy' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() function, the FROM clause for the 'country' table, and the WHERE clause to filter by region."], "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';", "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'", "source_tables": ["country"]}
{"sample_id": 719, "db_id": "world_1", "question": "How long is the people\u2019s average life expectancy in Central Africa?", "rationale": ["Identify the relevant table: The 'country' table contains the 'LifeExpectancy' column and the 'Region' column.", "Determine the condition: We need to filter the countries that are located in 'Central Africa'.", "Use the AVG() function: To find the average life expectancy, we will use the AVG() function on the 'LifeExpectancy' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and the WHERE clause to filter by region."], "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';", "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'", "source_tables": ["country"]}
{"sample_id": 720, "db_id": "world_1", "question": "What is the name of country that has the shortest life expectancy in Asia?", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including their life expectancy and continent.", "Determine the condition: We need to find the country with the shortest life expectancy specifically in Asia.", "Use a subquery to find the minimum life expectancy in Asia: This involves selecting the minimum life expectancy from the 'country' table where the continent is 'Asia'.", "Select the name of the country: Finally, we select the name of the country where the life expectancy matches the minimum value found in the previous step."], "pred_sql": "SELECT Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia');", "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy LIMIT 1", "source_tables": ["country"]}
{"sample_id": 721, "db_id": "world_1", "question": "Give the name of the country in Asia with the lowest life expectancy.", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including their continent and life expectancy.", "Filter for countries in Asia: Use a WHERE clause to select only those countries where the 'Continent' column is 'Asia'.", "Order by life expectancy: Use ORDER BY to sort the results by the 'LifeExpectancy' column in ascending order, so that the country with the lowest life expectancy comes first.", "Limit the results: Use LIMIT 1 to ensure that only the country with the lowest life expectancy is returned."], "pred_sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;", "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy LIMIT 1", "source_tables": ["country"]}
{"sample_id": 722, "db_id": "world_1", "question": "What is the total population and maximum GNP in Asia?", "rationale": ["Identify the relevant table: The 'country' table contains the population and GNP data.", "Determine the required fields: We need the total population and the maximum GNP.", "Use aggregate functions: To get the total population, we will use SUM(Population), and for the maximum GNP, we will use MAX(GNP).", "Filter the results: We need to focus on countries in Asia, so we will add a WHERE clause to filter by Continent = 'Asia'.", "Construct the SQL query: Combine the selected fields, aggregate functions, and the WHERE clause into a complete SQL query."], "pred_sql": "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';", "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'", "source_tables": ["country"]}
{"sample_id": 723, "db_id": "world_1", "question": "How many people live in Asia, and what is the largest GNP among them?", "rationale": ["Identify the relevant tables: 'country' for continent and GNP, and 'city' for population.", "We need to sum the population of cities located in countries that are in Asia, so we will join the 'country' and 'city' tables on the CountryCode.", "Filter the results to include only countries in the continent of Asia using a WHERE clause.", "Select the total population using SUM(c.Population) and the largest GNP using MAX(c.GNP).", "Construct the SQL query to reflect these requirements."], "pred_sql": "SELECT SUM(c.Population) AS TotalPopulation, MAX(c.GNP) AS LargestGNP\nFROM country AS co\nJOIN city AS c ON co.Code = c.CountryCode\nWHERE co.Continent = 'Asia';", "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'", "source_tables": ["country"]}
{"sample_id": 724, "db_id": "world_1", "question": "What is the average life expectancy in African countries that are republics?", "rationale": ["Identify the relevant table: The 'country' table contains the 'LifeExpectancy' and 'GovernmentForm' columns, which are needed for this query.", "Filter by continent: We need to focus on countries in Africa, so we will add a condition to filter by 'Continent = 'Africa'.", "Filter by government form: We are interested in countries that are republics, so we will add a condition to filter by 'GovernmentForm' using a LIKE clause to match any form that includes 'Republic'.", "Calculate the average: We will use the AVG() function to calculate the average life expectancy of the filtered countries."], "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';", "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'", "source_tables": ["country"]}
{"sample_id": 725, "db_id": "world_1", "question": "Give the average life expectancy for countries in Africa which are republics?", "rationale": ["Identify the relevant table: The 'country' table contains the 'LifeExpectancy' and 'GovernmentForm' columns, which are needed for this query.", "Filter by continent: We need to focus on countries in Africa, so we will add a WHERE clause to filter by 'Continent = 'Africa'.", "Filter by government form: We are interested in countries that are republics, so we will add another condition to the WHERE clause to check if 'GovernmentForm' contains the word 'Republic'.", "Calculate the average: We will use the AVG() function to calculate the average life expectancy of the filtered countries.", "Select the average life expectancy: The final SQL query will select the average life expectancy and label it as 'AverageLifeExpectancy'."], "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';", "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'", "source_tables": ["country"]}
{"sample_id": 726, "db_id": "world_1", "question": "What is the total surface area of the continents Asia and Europe?", "rationale": ["Identify the relevant table: The 'country' table contains the 'SurfaceArea' and 'Continent' columns.", "Determine the required operation: We need to calculate the total surface area, which involves summing the 'SurfaceArea' values.", "Filter the data: We only want the countries that are in the continents 'Asia' and 'Europe'.", "Construct the SQL query: Use the SUM function to aggregate the surface area for the specified continents."], "pred_sql": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');", "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe'", "source_tables": ["country"]}
{"sample_id": 727, "db_id": "world_1", "question": "Give the total surface area covered by countries in Asia or Europe.", "rationale": ["Identify the relevant table: The 'country' table contains the 'SurfaceArea' and 'Continent' columns.", "Determine the condition: We need to filter countries that are in either Asia or Europe.", "Use the SUM function: To get the total surface area, we will use the SUM aggregate function on the 'SurfaceArea' column.", "Construct the SQL query: The query will select the sum of 'SurfaceArea' from the 'country' table where 'Continent' is either 'Asia' or 'Europe'."], "pred_sql": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');", "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe'", "source_tables": ["country"]}
{"sample_id": 728, "db_id": "world_1", "question": "How many people live in Gelderland district?", "rationale": ["Identify the relevant table: The 'city' table contains population data and district information.", "Determine the specific district: The query asks for the population in the 'Gelderland' district.", "Use the SUM function: To get the total population of all cities in the specified district, we will sum the 'Population' column.", "Construct the SQL query: We will select the sum of the population from the 'city' table where the district matches 'Gelderland'."], "pred_sql": "SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland';", "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  'Gelderland'", "source_tables": ["city"]}
{"sample_id": 729, "db_id": "world_1", "question": "What is the total population of Gelderland district?", "rationale": ["Identify the table that contains population data, which is the 'city' table.", "Determine the relevant column for population, which is 'Population'.", "Identify the condition needed to filter the results, which is the district name 'Gelderland'.", "Construct the SQL query to sum the population of cities in the specified district."], "pred_sql": "SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland';", "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  'Gelderland'", "source_tables": ["city"]}
{"sample_id": 730, "db_id": "world_1", "question": "What is the average GNP and total population in all nations whose government is US territory?", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including their GNP and population.", "Determine the required calculations: We need to calculate the average GNP and the total population.", "Filter the countries: We need to filter the countries based on the government form being 'US territory'.", "Construct the SQL query: Use the AVG() function to calculate the average GNP and the SUM() function to calculate the total population, applying the necessary WHERE clause to filter the results."], "pred_sql": "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US territory';", "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  'US Territory'", "source_tables": ["country"]}
{"sample_id": 731, "db_id": "world_1", "question": "Give the mean GNP and total population of nations which are considered US territory.", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including GNP and population.", "Determine the criteria for selection: The query specifies 'nations which are considered US territory'. This implies we need to filter countries that have 'US' in their name.", "Construct the SQL query: We will use the AVG function to calculate the mean GNP and the SUM function to calculate the total population for the filtered countries. We will use a WHERE clause to filter the countries based on the name containing 'US'.", "Format the final SQL query to select the average GNP and total population from the country table."], "pred_sql": "SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE Name LIKE '%US%';", "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  'US Territory'", "source_tables": ["country"]}
{"sample_id": 732, "db_id": "world_1", "question": "How many unique languages are spoken in the world?", "rationale": ["Identify the table that contains language information, which is 'countrylanguage'.", "To find the number of unique languages, we need to count distinct entries in the 'Language' column of the 'countrylanguage' table.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique languages."], "pred_sql": "SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage;", "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "source_tables": ["countrylanguage"]}
{"sample_id": 733, "db_id": "world_1", "question": "What is the number of distinct languages used around the world?", "rationale": ["Identify the requirement: We need to find the number of distinct languages used around the world.", "Determine the relevant table: The 'countrylanguage' table contains the languages spoken in different countries.", "Use the COUNT function to count distinct entries: We will use COUNT(DISTINCT Language) to get the number of unique languages.", "Construct the SQL query: The final SQL query will select the count of distinct languages from the countrylanguage table."], "pred_sql": "SELECT COUNT(DISTINCT Language) AS DistinctLanguages FROM countrylanguage;", "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "source_tables": ["countrylanguage"]}
{"sample_id": 734, "db_id": "world_1", "question": "How many type of governments are in Africa?", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including their government forms and continent.", "Filter the countries by continent: We need to focus on countries located in Africa, so we will add a WHERE clause to filter by 'Continent = 'Africa'.", "Select distinct government forms: To find out how many types of governments are present, we will use the DISTINCT keyword to ensure we only get unique government forms.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT DISTINCT GovernmentForm FROM country WHERE Continent = 'Africa';", "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa'", "source_tables": ["country"]}
{"sample_id": 735, "db_id": "world_1", "question": "How many different forms of governments are there in Africa?", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including their government forms.", "Determine the specific column needed: The 'GovernmentForm' column will provide the types of government.", "Filter the results: We need to focus on countries located in Africa, which can be done by filtering the 'Region' column for 'Africa'.", "Count the distinct government forms: Use the COUNT(DISTINCT ...) function to count the unique forms of government in the filtered results."], "pred_sql": "SELECT COUNT(DISTINCT GovernmentForm) AS DifferentFormsOfGovernment FROM country WHERE Region = 'Africa';", "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa'", "source_tables": ["country"]}
{"sample_id": 736, "db_id": "world_1", "question": "What is the total number of languages used in Aruba?", "rationale": ["Identify the relevant table: The 'countrylanguage' table contains information about languages spoken in different countries.", "Determine the condition: We need to filter the languages for the country 'Aruba'.", "Find the country code for Aruba: This requires a subquery to select the 'Code' from the 'country' table where the 'Name' is 'Aruba'.", "Count the distinct languages: Use the COUNT function to count the number of unique languages in the 'countrylanguage' table for the specified country code."], "pred_sql": "SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');", "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 737, "db_id": "world_1", "question": "How many languages are spoken in Aruba?", "rationale": ["Identify the relevant table for languages spoken, which is 'countrylanguage'.", "To find the number of languages spoken in Aruba, we need to filter the 'countrylanguage' table by the country code for Aruba.", "First, we need to find the country code for Aruba from the 'country' table using a subquery.", "The subquery selects the 'Code' from the 'country' table where the 'Name' is 'Aruba'.", "We then count the distinct languages in the 'countrylanguage' table that match the country code obtained from the subquery."], "pred_sql": "SELECT COUNT(DISTINCT Language) AS NumberOfLanguages FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');", "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 738, "db_id": "world_1", "question": "How many official languages does Afghanistan have?", "rationale": ["Identify the country of interest: Afghanistan.", "Determine the country code for Afghanistan, which is 'AFG'.", "Focus on the 'countrylanguage' table to find languages associated with Afghanistan.", "Filter the results to include only official languages by checking the 'IsOfficial' column for 'T' (true).", "Count the number of rows that meet these criteria to get the total number of official languages."], "pred_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';", "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Afghanistan' AND IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 739, "db_id": "world_1", "question": "How many official languages are spoken in Afghanistan?", "rationale": ["Identify the country of interest, which is Afghanistan.", "Find the country code for Afghanistan from the country table.", "Count the number of languages in the countrylanguage table that correspond to the country code of Afghanistan and are marked as official (IsOfficial = 'T')."], "pred_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';", "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Afghanistan' AND IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 740, "db_id": "world_1", "question": "What is name of the country that speaks the largest number of languages?", "rationale": ["Identify the relevant tables: We need to find information from the 'country' and 'countrylanguage' tables.", "Join the tables: We will join 'country' and 'countrylanguage' on the 'Code' and 'CountryCode' columns respectively to associate countries with their languages.", "Group by country: We will group the results by the country name to count the number of languages spoken in each country.", "Count languages: Use COUNT(cl.Language) to count the number of languages for each country.", "Order the results: We will order the results in descending order based on the count of languages to find the country with the most languages.", "Limit the results: Finally, we will limit the results to 1 to get only the country that speaks the largest number of languages."], "pred_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1;", "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 741, "db_id": "world_1", "question": "Give the name of the nation that uses the greatest amount of languages.", "rationale": ["Identify the table that contains the country names, which is the 'country' table.", "Identify the table that contains the languages spoken in each country, which is the 'countrylanguage' table.", "Join the 'country' table with the 'countrylanguage' table on the 'Code' and 'CountryCode' columns to associate countries with their languages.", "Group the results by country name to aggregate the number of languages spoken in each country.", "Count the number of languages for each country using COUNT(countrylanguage.Language).", "Order the results in descending order to find the country with the greatest number of languages.", "Limit the results to 1 to get only the top country."], "pred_sql": "SELECT country.Name\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nGROUP BY country.Name\nORDER BY COUNT(countrylanguage.Language) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 742, "db_id": "world_1", "question": "Which continent has the most diverse languages?", "rationale": ["Identify the relevant tables: We need to look at the 'country' table for continents and the 'countrylanguage' table for languages.", "Join the 'country' and 'countrylanguage' tables on the 'Code' and 'CountryCode' fields respectively to associate countries with their languages.", "Group the results by continent to count the number of distinct languages spoken in each continent.", "Count the distinct languages for each continent using COUNT(DISTINCT cl.Language).", "Order the results by the count of languages in descending order to find the continent with the most diverse languages.", "Limit the results to 1 to get only the continent with the highest count of languages."], "pred_sql": "SELECT c.Continent, COUNT(DISTINCT cl.Language) AS LanguageCount\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Continent\nORDER BY LanguageCount DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 743, "db_id": "world_1", "question": "Which continent speaks the most languages?", "rationale": ["Identify the relevant tables: We need to look at the 'country' table for continents and the 'countrylanguage' table for languages spoken.", "Join the 'country' table with the 'countrylanguage' table on the 'Code' and 'CountryCode' fields to associate countries with their languages.", "Group the results by continent to count the number of languages spoken in each continent.", "Count the number of distinct languages for each continent using COUNT().", "Order the results in descending order based on the count of languages to find the continent with the most languages.", "Limit the results to 1 to get only the continent that speaks the most languages."], "pred_sql": "SELECT c.Continent, COUNT(cl.Language) AS LanguageCount\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Continent\nORDER BY LanguageCount DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 744, "db_id": "world_1", "question": "How many countries speak both English and Dutch?", "rationale": ["Identify the requirement: We need to find countries that speak both English and Dutch.", "Understand the schema: The relevant table is 'countrylanguage', which contains the languages spoken in each country.", "To find countries that speak both languages, we can use a self-join on the 'countrylanguage' table.", "In the self-join, we will match rows where the 'CountryCode' is the same for both languages.", "We will filter the results to include only those rows where one language is 'English' and the other is 'Dutch'.", "Finally, we will count the distinct 'CountryCode' values to get the number of countries that meet the criteria."], "pred_sql": "SELECT COUNT(DISTINCT cl1.CountryCode) AS CountryCount\nFROM countrylanguage cl1\nJOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode\nWHERE cl1.Language = 'English' AND cl2.Language = 'Dutch';", "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch')", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 745, "db_id": "world_1", "question": "What is the number of nations that use English and Dutch?", "rationale": ["Identify the relevant table: The 'countrylanguage' table contains information about languages spoken in different countries.", "Determine the criteria: We need to find countries that use 'English' and 'Dutch'.", "Use the COUNT function to count the distinct countries that meet the criteria.", "Filter the results to include only official languages by checking the 'IsOfficial' column for 'T'.", "Construct the SQL query to select the count of distinct country codes from the 'countrylanguage' table where the language is either 'English' or 'Dutch' and is official."], "pred_sql": "SELECT COUNT(DISTINCT cl.CountryCode) AS NumberOfNations\nFROM countrylanguage cl\nWHERE cl.Language IN ('English', 'Dutch')\nAND cl.IsOfficial = 'T';", "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch')", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 746, "db_id": "world_1", "question": "What are the names of nations speak both English and French?", "rationale": ["Identify the main entities involved: countries and languages.", "We need to find countries that have both English and French as official languages.", "Start by selecting the country names from the 'country' table.", "Join the 'countrylanguage' table to filter countries that speak English.", "Add a condition to ensure that the language is 'English' and it is an official language (IsOfficial = 'T').", "Next, we need to ensure that the same country also speaks French as an official language.", "To do this, we can use a subquery that selects countries from the 'countrylanguage' table where the language is 'French' and it is also an official language.", "Finally, combine these conditions to get the desired result."], "pred_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND c.Code IN (SELECT cl2.CountryCode FROM countrylanguage cl2 WHERE cl2.Language = 'French' AND cl2.IsOfficial = 'T');", "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 747, "db_id": "world_1", "question": "Give the names of nations that speak both English and French.", "rationale": ["Identify the tables involved: We need to get country names, which are in the 'country' table, and we need to check the languages spoken, which are in the 'countrylanguage' table.", "We need to find countries that speak both English and French. This requires joining the 'country' table with the 'countrylanguage' table twice: once for English and once for French.", "The first join (cl1) will filter for countries where the language is English, and the second join (cl2) will filter for countries where the language is French.", "We will select distinct country names to avoid duplicates in the result set."], "pred_sql": "SELECT DISTINCT c.Name \nFROM country c \nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' \nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French';", "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 748, "db_id": "world_1", "question": "What are the names of nations where both English and French are official languages?", "rationale": ["Identify the main entities involved: countries and their official languages.", "We need to find countries where both English and French are official languages.", "This requires joining the 'country' table with the 'countrylanguage' table to filter by languages.", "First, we filter for countries where English is an official language.", "Next, we need to ensure that these countries also have French as an official language.", "To do this, we can use a subquery to find countries that have French as an official language and check if they exist in the results of the first query."], "pred_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND c.Code IN (SELECT cl2.CountryCode FROM countrylanguage cl2 WHERE cl2.Language = 'French' AND cl2.IsOfficial = 'T');", "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 749, "db_id": "world_1", "question": "Give the names of countries with English and French as official languages.", "rationale": ["We need to find countries that have both English and French as official languages.", "To do this, we will join the 'country' table with the 'countrylanguage' table on the 'CountryCode'.", "We will filter the results to include only those languages that are 'English' or 'French' and are marked as official (IsOfficial = 'T').", "Next, we will group the results by the country code to aggregate the languages spoken in each country.", "Finally, we will use the HAVING clause to ensure that only countries with both languages (count of distinct languages = 2) are included in the final result."], "pred_sql": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T' GROUP BY c.Code HAVING COUNT(DISTINCT cl.Language) = 2;", "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 750, "db_id": "world_1", "question": "What is the number of distinct continents where Chinese is spoken?", "rationale": ["Identify the relevant tables: We need to look at the 'countrylanguage' table to find where Chinese is spoken and the 'country' table to get the continent information.", "We need to join the 'countrylanguage' table with the 'country' table on the 'CountryCode' to access the continent data.", "We will filter the results to only include rows where the language is 'Chinese'.", "Finally, we will count the distinct continents from the filtered results."], "pred_sql": "SELECT COUNT(DISTINCT c.Continent) AS DistinctContinents\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = 'Chinese';", "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 751, "db_id": "world_1", "question": "How many continents speak Chinese?", "rationale": ["Identify the relevant tables: We need to look at the 'countrylanguage' table to find languages and the 'country' table to find continents.", "Determine the condition: We are interested in the language 'Chinese'.", "Count distinct continents: We need to count how many unique continents have 'Chinese' as a spoken language.", "Join the tables: We will join 'countrylanguage' with 'country' on the CountryCode to access the continent information.", "Construct the SQL query: Using SELECT to count distinct continents where the language is 'Chinese' and joining the necessary tables."], "pred_sql": "SELECT COUNT(DISTINCT country.Continent) AS NumberOfContinents\nFROM countrylanguage\nJOIN country ON countrylanguage.CountryCode = country.Code\nWHERE countrylanguage.Language = 'Chinese';", "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 752, "db_id": "world_1", "question": "What are the regions that use English or Dutch?", "rationale": ["Identify the relevant tables: We need to look at the 'country' table for regions and the 'countrylanguage' table for languages.", "Determine the languages of interest: The query specifies 'English' and 'Dutch'.", "Find the countries that have English or Dutch as an official language: This can be done by querying the 'countrylanguage' table where the Language is either 'English' or 'Dutch'.", "Get the CountryCodes from the previous step and use them to filter the 'country' table to find the corresponding regions.", "Select distinct regions to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'));", "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 753, "db_id": "world_1", "question": "Which regions speak Dutch or English?", "rationale": ["Identify the relevant tables: We need to look at the 'country' table for regions and the 'countrylanguage' table for languages spoken.", "Determine the relationship: The 'country' table and 'countrylanguage' table are related through the 'CountryCode'.", "Filter the languages: We need to filter for countries where the language is either 'Dutch' or 'English'.", "Select distinct regions: We want to select distinct regions from the 'country' table based on the filtered languages."], "pred_sql": "SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');", "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 754, "db_id": "world_1", "question": "What are the countries where either English or Dutch is the official language ?", "rationale": ["Identify the relevant tables: We need to look at the 'country' table for country names and the 'countrylanguage' table for languages.", "Join the 'country' and 'countrylanguage' tables on the 'Code' and 'CountryCode' columns respectively to link countries with their languages.", "Filter the results to include only those languages that are official by checking 'IsOfficial' = 'T'.", "Further filter the results to include only countries where the language is either 'English' or 'Dutch'.", "Select distinct country names to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND (cl.Language = 'English' OR cl.Language = 'Dutch');", "gold_sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'english' and isofficial  =  't' union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'dutch' and isofficial  =  't'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 755, "db_id": "world_1", "question": "Which countries have either English or Dutch as an official language?", "rationale": ["Identify the relevant tables: We need to look at the 'country' and 'countrylanguage' tables since we are interested in countries and their official languages.", "Determine the relationship: The 'country' table has a primary key 'Code' which is referenced by 'CountryCode' in the 'countrylanguage' table. We will need to join these tables on this key.", "Filter for official languages: We need to filter the results to only include languages that are marked as official, which is indicated by 'IsOfficial' being 'T'.", "Specify the languages of interest: We are specifically looking for countries where the official language is either 'English' or 'Dutch'.", "Select distinct country names: Since we want to know which countries have these languages, we will select the distinct names of the countries that meet the criteria."], "pred_sql": "SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch');", "gold_sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND IsOfficial  =  'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch' AND IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 756, "db_id": "world_1", "question": "Which language is the most popular on the Asian continent?", "rationale": ["Identify the relevant tables: We need to look at the 'countrylanguage' table for languages and the 'country' table to filter by continent.", "Join the 'countrylanguage' table with the 'country' table on the CountryCode to access the continent information.", "Filter the results to only include countries in the 'Asia' continent.", "Group the results by Language to aggregate the percentage of speakers for each language.", "Order the results by the total percentage of speakers in descending order to find the most popular language.", "Limit the results to 1 to get only the most popular language."], "pred_sql": "SELECT Language, SUM(Percentage) AS TotalPercentage \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE country.Continent = 'Asia' \nGROUP BY Language \nORDER BY TotalPercentage DESC \nLIMIT 1;", "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  'Asia' GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 757, "db_id": "world_1", "question": "What is the language that is used by the largest number of Asian nations?", "rationale": ["Identify the relevant tables: We need to look at the 'country' and 'countrylanguage' tables to find the languages spoken in Asian countries.", "Filter for Asian countries: We will filter the 'country' table to only include countries in the continent of Asia.", "Group by language: We will group the results by language to count how many distinct countries speak each language.", "Count distinct countries: We will count the number of distinct countries for each language to determine which language is spoken by the largest number of Asian nations.", "Order by count: We will order the results in descending order based on the count of distinct countries.", "Limit the results: We will limit the results to only the top result to get the language used by the largest number of Asian nations."], "pred_sql": "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.Continent = 'Asia'\nGROUP BY cl.Language\nORDER BY COUNT(DISTINCT c.Code) DESC\nLIMIT 1;", "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  'Asia' GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 758, "db_id": "world_1", "question": "Which languages are spoken by only one country in republic governments?", "rationale": ["Identify the relevant tables: We need to look at the 'countrylanguage' table for languages and the 'country' table for government forms.", "Join the 'countrylanguage' table with the 'country' table on the 'CountryCode' to access the government form associated with each language.", "Filter the results to include only official languages by checking 'IsOfficial' = 'T'.", "Further filter the results to include only countries with a government form that contains the word 'Republic'.", "Group the results by language to count how many countries speak each language.", "Use the HAVING clause to filter the grouped results to include only those languages that are spoken by exactly one country."], "pred_sql": "SELECT cl.Language \nFROM countrylanguage cl \nJOIN country c ON cl.CountryCode = c.Code \nWHERE cl.IsOfficial = 'T' \nAND c.GovernmentForm LIKE '%Republic%' \nGROUP BY cl.Language \nHAVING COUNT(DISTINCT c.Code) = 1;", "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 759, "db_id": "world_1", "question": "What languages are only used by a single country with a republic government?", "rationale": ["Identify the relevant tables: We need to look at the 'countrylanguage' table for languages and the 'country' table for government forms.", "Join the 'countrylanguage' table with the 'country' table on the CountryCode to access both languages and their corresponding countries.", "Filter the results to include only official languages by checking if 'IsOfficial' is 'T'.", "Further filter the results to include only countries with a government form that contains 'Republic'.", "Group the results by language to count how many distinct countries speak each language.", "Use the HAVING clause to ensure that we only select languages that are spoken in exactly one country."], "pred_sql": "SELECT cl.Language \nFROM countrylanguage cl \nJOIN country c ON cl.CountryCode = c.Code \nWHERE cl.IsOfficial = 'T' \nAND c.GovernmentForm LIKE '%Republic%' \nGROUP BY cl.Language \nHAVING COUNT(DISTINCT c.Code) = 1;", "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 760, "db_id": "world_1", "question": "Find the city with the largest population that uses English.", "rationale": ["Identify the relevant tables: city, country, and countrylanguage.", "We need to find cities that use English, so we will filter the countrylanguage table for entries where Language is 'English'.", "We will join the city table with the country table on the CountryCode to get the country information for each city.", "Next, we will join the countrylanguage table with the country table to link languages to their respective countries.", "To find the city with the largest population, we will order the results by the Population column in descending order.", "Finally, we will limit the results to 1 to get only the city with the largest population."], "pred_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;", "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["city", "countrylanguage"]}
{"sample_id": 761, "db_id": "world_1", "question": "What is the most populace city that speaks English?", "rationale": ["Identify the relevant tables: city, country, and countrylanguage.", "We need to find cities that speak English, so we will filter the countrylanguage table for entries where Language is 'English'.", "We will join the city table with the country table on the CountryCode to get the country information for each city.", "Next, we will join the result with the countrylanguage table to filter for cities in countries where English is spoken.", "To find the most populous city, we will order the results by the Population column in descending order.", "Finally, we will limit the results to 1 to get only the most populous city."], "pred_sql": "SELECT city.Name, city.Population FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;", "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["city", "countrylanguage"]}
{"sample_id": 762, "db_id": "world_1", "question": "Find the name, population and expected life length of asian country with the largest area?", "rationale": ["Identify the relevant table: The query requires information about countries, so we will use the 'country' table.", "Select the required columns: We need the 'Name', 'Population', and 'LifeExpectancy' of the country.", "Filter for Asian countries: We will add a WHERE clause to filter countries where the 'Continent' is 'Asia'.", "Order by surface area: To find the largest area, we will order the results by 'SurfaceArea' in descending order.", "Limit the results: Since we only want the country with the largest area, we will limit the results to 1."], "pred_sql": "SELECT country.Name, country.Population, country.LifeExpectancy \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;", "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}
{"sample_id": 763, "db_id": "world_1", "question": "What are the name, population, and life expectancy of the largest Asian country by land?", "rationale": ["Identify the relevant table: The 'country' table contains the necessary information about countries, including their name, population, life expectancy, and surface area.", "Filter for Asian countries: We need to focus on countries located in Asia, which can be done by adding a WHERE clause that checks if the 'Continent' column is 'Asia'.", "Determine the largest country by land: To find the largest country by land, we will order the results by the 'SurfaceArea' column in descending order.", "Limit the results to one: Since we only want the largest country, we will use the LIMIT clause to return only the top result."], "pred_sql": "SELECT country.Name, country.Population, country.LifeExpectancy \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;", "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}
{"sample_id": 764, "db_id": "world_1", "question": "What is average life expectancy in the countries where English is not the official language?", "rationale": ["Identify the relevant table for life expectancy, which is the 'country' table.", "Determine the condition for filtering countries where English is not an official language.", "To find countries where English is not official, we need to check the 'countrylanguage' table for entries where 'Language' is 'English' and 'IsOfficial' is 'T'.", "Use a subquery to get the list of 'CountryCode' from the 'countrylanguage' table that meet the above condition.", "Use the NOT IN clause to filter out these countries from the main query.", "Finally, calculate the average life expectancy using the AVG() function on the 'LifeExpectancy' column in the 'country' table."], "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English');", "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T')", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 765, "db_id": "world_1", "question": "Give the mean life expectancy of countries in which English is not the official language.", "rationale": ["Identify the relevant table: The 'country' table contains the 'LifeExpectancy' column.", "Determine the condition: We need countries where English is not the official language.", "To find this, we can use a subquery to select the 'CountryCode' from the 'countrylanguage' table where 'IsOfficial' is 'T' and 'Language' is 'English'.", "Use the NOT IN clause to filter out these countries from the main query.", "Finally, calculate the average life expectancy using the AVG() function on the 'LifeExpectancy' column."], "pred_sql": "SELECT AVG(LifeExpectancy) AS MeanLifeExpectancy FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English');", "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T')", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 766, "db_id": "world_1", "question": "What is the total number of people living in the nations that do not use English?", "rationale": ["Identify the tables needed: We need data from the 'country', 'countrylanguage', and 'city' tables to get the total population of cities in countries that do not use English.", "We need to join these tables based on their relationships: 'country' to 'countrylanguage' on 'Code' and 'country' to 'city' on 'Code'.", "We need to filter the results to include only those countries where English is not an official language. This is done by checking 'Language' in 'countrylanguage' and ensuring 'IsOfficial' is 'T'.", "Finally, we need to sum the populations of the cities that meet the criteria, which is done using the SUM function on the 'Population' column from the 'city' table."], "pred_sql": "SELECT SUM(c.Population) AS TotalPopulation\nFROM country AS co\nJOIN countrylanguage AS cl ON co.Code = cl.CountryCode\nJOIN city AS c ON co.Code = c.CountryCode\nWHERE cl.Language != 'English' AND cl.IsOfficial = 'T';", "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English')", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 767, "db_id": "world_1", "question": "How many people live in countries that do not speak English?", "rationale": ["Identify the relevant tables: We need to consider the 'country' and 'countrylanguage' tables to find the countries and their languages.", "Determine the condition: We are interested in countries that do not speak English as an official language.", "Join the tables: We will join 'country' and 'countrylanguage' on the 'CountryCode' to link countries with their languages.", "Filter the results: We will filter the results to include only those countries where the language is not English and is marked as official.", "Calculate the total population: We will sum the population of these countries to get the total number of people living in countries that do not speak English."], "pred_sql": "SELECT SUM(c.Population) AS TotalPopulation FROM country AS co JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE cl.Language != 'English' AND cl.IsOfficial = 'Yes';", "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English')", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 768, "db_id": "world_1", "question": "What is the official language spoken in the country whose head of state is Beatrix?", "rationale": ["Identify the relevant tables: We need information from the 'country' table to find the country with the specified head of state and from the 'countrylanguage' table to find the official language.", "Determine the condition for the head of state: We need to filter the 'country' table where the 'HeadOfState' is 'Beatrix'.", "Join the 'country' and 'countrylanguage' tables: We will join these tables on the 'CountryCode' to link the country with its languages.", "Filter for official languages: We need to ensure that we only select languages that are marked as official, which is indicated by 'IsOfficial' being 'T'.", "Select the language: Finally, we will select the 'Language' column from the 'countrylanguage' table."], "pred_sql": "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';", "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 769, "db_id": "world_1", "question": "What is the official language used in the country the name of whose head of state is Beatrix.", "rationale": ["Identify the relevant tables: We need information from the 'country' table to find the country with the head of state named Beatrix, and from the 'countrylanguage' table to find the official language of that country.", "Determine the join condition: The 'country' table and 'countrylanguage' table are related through the 'CountryCode' field, so we will perform a JOIN on these tables using this field.", "Specify the selection criteria: We need to filter the results to find the country where the 'HeadOfState' is 'Beatrix'.", "Filter for official languages: We also need to ensure that we only select languages that are marked as official, which is indicated by the 'IsOfficial' column in the 'countrylanguage' table being 'T'.", "Construct the SQL query: Combine all the above steps into a single SQL query that selects the language from the 'countrylanguage' table based on the specified conditions."], "pred_sql": "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';", "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 770, "db_id": "world_1", "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "rationale": ["Identify the relevant tables: We need to look at the 'country' table for the year of independence and the 'countrylanguage' table for the languages.", "We need to count unique official languages, so we will use COUNT(DISTINCT cl.Language).", "We need to join the 'country' table with the 'countrylanguage' table on the CountryCode to get the languages spoken in each country.", "We need to filter the countries that were founded before 1930, which is done by checking the 'IndepYear' column in the 'country' table.", "We also need to ensure that we only consider official languages, which is indicated by the 'IsOfficial' column in the 'countrylanguage' table being 'T'."], "pred_sql": "SELECT COUNT(DISTINCT cl.Language) AS UniqueOfficialLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.IndepYear < '1930' AND cl.IsOfficial = 'T';", "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 771, "db_id": "world_1", "question": "For the countries founded before 1930, what is the total number of distinct official languages?", "rationale": ["Identify the relevant tables: We need data from the 'country' table for the year of independence and the 'countrylanguage' table for the languages.", "We need to filter countries founded before 1930, which means we will check the 'IndepYear' column in the 'country' table.", "We are interested in official languages, so we will filter the 'countrylanguage' table where 'IsOfficial' is 'T'.", "To find the total number of distinct official languages, we will use the COUNT function with DISTINCT on the 'Language' column from the 'countrylanguage' table.", "We will join the 'country' and 'countrylanguage' tables on the 'CountryCode' to correlate countries with their languages."], "pred_sql": "SELECT COUNT(DISTINCT cl.Language) AS TotalOfficialLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.IndepYear < '1930' AND cl.IsOfficial = 'T';", "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 772, "db_id": "world_1", "question": "What are the countries that have greater surface area than any country in Europe?", "rationale": ["Identify the relevant table: The query requires information about countries, so we will use the 'country' table.", "Determine the condition: We need to find countries with a surface area greater than any country in Europe.", "To find the maximum surface area of countries in Europe, we will use a subquery: SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe'.", "Construct the main query: We will select the 'Name' of countries from the 'country' table where their 'SurfaceArea' is greater than the result of the subquery.", "Combine the main query and the subquery to form the final SQL query."], "pred_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe')", "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "source_tables": ["country"]}
{"sample_id": 773, "db_id": "world_1", "question": "Which countries have greater area than that of any country in Europe?", "rationale": ["Identify the relevant table: The query is about countries and their surface areas, so we will use the 'country' table.", "Determine the condition: We need to find countries with a surface area greater than any country in Europe.", "To find the maximum surface area of countries in Europe, we will use a subquery: SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe'.", "The main query will select the names of countries from the 'country' table where their surface area is greater than the result of the subquery.", "Combine the main query and the subquery to form the complete SQL statement."], "pred_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe');", "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "source_tables": ["country"]}
{"sample_id": 774, "db_id": "world_1", "question": "What are the African countries that have a  population less than any country in Asia?", "rationale": ["Identify the countries in Africa by filtering the 'country' table where the 'Continent' column is 'Africa'.", "Determine the population of these African countries by using the 'Population' column.", "To find countries in Africa with a population less than any country in Asia, we need to find the minimum population of countries in Asia.", "This can be done by creating a subquery that selects the minimum population from the 'country' table where the 'Continent' is 'Asia'.", "Combine these conditions in a SQL SELECT statement to retrieve the names of the African countries that meet the criteria."], "pred_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia');", "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  'Asia')", "source_tables": ["country"]}
{"sample_id": 775, "db_id": "world_1", "question": "Which African countries have a smaller population than that of any country in Asia?", "rationale": ["Identify the countries in Africa by filtering the 'country' table where the 'Continent' column is 'Africa'.", "Determine the population of these African countries by selecting the 'Population' column.", "To find countries in Africa with a smaller population than any country in Asia, we need to compare their populations to those in Asia.", "Identify the countries in Asia by filtering the 'country' table where the 'Continent' column is 'Asia'.", "Select the minimum population from the Asian countries using the MIN() function on the 'Population' column.", "Construct the main query to select the names of African countries where their population is less than the minimum population found in the Asian countries."], "pred_sql": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');", "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  'Asia')", "source_tables": ["country"]}
{"sample_id": 776, "db_id": "world_1", "question": "Which Asian countries have a population that is larger than any country in Africa?", "rationale": ["Identify the countries in Asia by filtering the 'country' table where the 'Continent' column is 'Asia'.", "Determine the maximum population of countries in Africa by using a subquery that selects the maximum 'Population' from the 'country' table where the 'Continent' is 'Africa'.", "Combine these two conditions to find Asian countries whose population is greater than the maximum population found in the African countries."], "pred_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');", "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  'Africa')", "source_tables": ["country"]}
{"sample_id": 777, "db_id": "world_1", "question": "What are the Asian countries which have a population larger than that of any country in Africa?", "rationale": ["Identify the countries in Asia by filtering the 'country' table where the 'Continent' column is 'Asia'.", "Determine the population of these Asian countries by selecting the 'Population' column.", "To find countries in Asia with a population larger than any country in Africa, we need to compare their populations to the maximum population of countries in Africa.", "Use a subquery to find the maximum population of countries in Africa by filtering the 'country' table where the 'Continent' column is 'Africa' and selecting the maximum value from the 'Population' column.", "Combine these conditions to form the final SQL query that selects the names of Asian countries with a population greater than the maximum population found in the African countries."], "pred_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');", "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  'Africa')", "source_tables": ["country"]}
{"sample_id": 778, "db_id": "world_1", "question": "What are the country codes for countries that do not speak English?", "rationale": ["Identify the relevant tables: We need to use the 'country' and 'countrylanguage' tables to find the country codes.", "We need to find countries that do not speak English, which means we need to filter the 'countrylanguage' table for entries where the language is not 'English'.", "To ensure we get all countries, including those that have no language entries (i.e., do not speak any language), we will use a LEFT JOIN between 'country' and 'countrylanguage'.", "We will select the distinct country codes from the 'country' table where the language is not English or where there is no corresponding entry in the 'countrylanguage' table (indicating that the country does not speak any language)."], "pred_sql": "SELECT DISTINCT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL;", "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "source_tables": ["countrylanguage"]}
{"sample_id": 779, "db_id": "world_1", "question": "Return the country codes for countries that do not speak English.", "rationale": ["We need to find country codes for countries that do not speak English.", "To do this, we will join the 'country' table with the 'countrylanguage' table on the 'CountryCode'.", "We will select the distinct country codes from the 'country' table.", "We will filter the results where the language is not 'English' or where there is no language entry (i.e., the country does not have any languages listed)."], "pred_sql": "SELECT DISTINCT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL;", "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "source_tables": ["countrylanguage"]}
{"sample_id": 780, "db_id": "world_1", "question": "What are the country codes of countries where people use languages other than English?", "rationale": ["Identify the relevant table: We need to look at the 'countrylanguage' table since it contains information about languages spoken in each country.", "Filter for languages other than English: We need to select records where the 'Language' column is not equal to 'English'.", "Select distinct country codes: We want to retrieve unique country codes from the filtered results to avoid duplicates.", "Construct the SQL query: Combine the above steps into a SQL SELECT statement that retrieves the distinct country codes for countries where languages other than English are spoken."], "pred_sql": "SELECT DISTINCT cl.CountryCode FROM countrylanguage cl WHERE cl.Language != 'English';", "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'", "source_tables": ["countrylanguage"]}
{"sample_id": 781, "db_id": "world_1", "question": "Give the country codes for countries in which people speak langauges that are not English.", "rationale": ["Identify the table that contains the languages spoken in each country, which is the 'countrylanguage' table.", "We need to find country codes for countries where the language is not English.", "Use a SELECT statement to retrieve the 'CountryCode' from the 'countrylanguage' table.", "Use the DISTINCT keyword to ensure that each country code is unique in the result set.", "Add a WHERE clause to filter out languages that are not English by checking if 'Language' is not equal to 'English'."], "pred_sql": "SELECT DISTINCT cl.CountryCode FROM countrylanguage cl WHERE cl.Language != 'English';", "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'", "source_tables": ["countrylanguage"]}
{"sample_id": 782, "db_id": "world_1", "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "rationale": ["Identify the relevant tables: We need to use the 'country' and 'countrylanguage' tables to get the required information.", "Determine the conditions: We need to find countries that do not speak English and whose government forms are not Republic.", "Join the tables: We will join 'country' and 'countrylanguage' on the 'CountryCode' to filter the results based on the specified conditions.", "Select the distinct country codes: We will select the distinct 'Code' from the 'country' table that meets the conditions."], "pred_sql": "SELECT DISTINCT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic';", "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 783, "db_id": "world_1", "question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "rationale": ["Identify the relevant tables: We need to use the 'country' and 'countrylanguage' tables to get the required information about countries and their languages.", "Determine the conditions: We need to find countries that do not speak English and do not have 'Republic' in their government form.", "Join the tables: We will join 'country' and 'countrylanguage' on the 'CountryCode' to access both country information and language information.", "Construct the WHERE clause: We will filter out countries where the language is not English and the government form does not contain 'Republic'.", "Select the country codes: Finally, we will select the 'Code' from the 'country' table that meets the above conditions."], "pred_sql": "SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm NOT LIKE '%Republic%';", "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 784, "db_id": "world_1", "question": "Which cities are in European countries where English is not the official language?", "rationale": ["Identify the relevant tables: city, country, and countrylanguage.", "We need to find cities located in European countries, so we will filter the country table by the continent 'Europe'.", "Next, we need to check the languages spoken in these countries, specifically looking for English.", "We want to ensure that English is not an official language, so we will filter the countrylanguage table for records where IsOfficial is 'FALSE'.", "We will join the city table with the country table on CountryCode to get the cities in European countries.", "Then, we will join the countrylanguage table to filter out the cities where English is not an official language.", "Finally, we will select the names of the cities that meet these criteria."], "pred_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'FALSE';", "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "source_tables": ["country", "city", "countrylanguage"]}
{"sample_id": 785, "db_id": "world_1", "question": "What are the names of cities in Europe for which English is not the official language?", "rationale": ["Identify the relevant tables: city, country, and countrylanguage.", "We need to find cities in Europe, so we will filter the country table by the continent 'Europe'.", "We need to check for the language spoken in those countries, specifically English, and ensure it is not an official language.", "To do this, we will join the city table with the country table on CountryCode, and then join the result with the countrylanguage table on CountryCode.", "The final query will select the names of cities where the continent is Europe, the language is English, and it is not an official language (IsOfficial = 'F')."], "pred_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F';", "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "source_tables": ["country", "city", "countrylanguage"]}
{"sample_id": 786, "db_id": "world_1", "question": "Which unique cities are in Asian countries where Chinese is the official language ?", "rationale": ["Identify the relevant tables: city, country, and countrylanguage.", "We need to find cities that are in Asian countries, so we will join the city table with the country table on the CountryCode.", "Next, we need to filter the countries to only those in Asia, which can be done by checking the Continent column in the country table.", "We also need to ensure that the language spoken in these countries is Chinese and that it is an official language, which requires joining with the countrylanguage table and applying the appropriate filters.", "Finally, we select distinct city names to ensure we only get unique cities that meet all the criteria."], "pred_sql": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';", "gold_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  'asia'", "source_tables": ["country", "city", "countrylanguage"]}
{"sample_id": 787, "db_id": "world_1", "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "rationale": ["Identify the tables needed: 'city', 'country', and 'countrylanguage'.", "We need to find cities in Asia, so we will filter the 'country' table by the 'Continent' column.", "We also need to check for the official language, which requires joining the 'countrylanguage' table and filtering by 'Language' and 'IsOfficial'.", "We will join the 'city' table with the 'country' table on 'CountryCode' and then join the 'country' table with the 'countrylanguage' table on 'Code'.", "Finally, we will select distinct city names that meet the criteria of being in Asia and having Chinese as an official language."], "pred_sql": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';", "gold_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  'Asia'", "source_tables": ["country", "city", "countrylanguage"]}
{"sample_id": 788, "db_id": "world_1", "question": "What are the name, independence year, and surface area of the country with the smallest population?", "rationale": ["Identify the columns needed: Name, IndepYear, and SurfaceArea from the country table.", "Determine the condition to find the country with the smallest population, which requires a subquery to get the minimum population.", "Construct the subquery to select the minimum population from the country table.", "Use the result of the subquery to filter the main query to get the desired columns for the country with that minimum population."], "pred_sql": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);", "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "source_tables": ["country"]}
{"sample_id": 789, "db_id": "world_1", "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "rationale": ["Identify the columns needed: Name, IndepYear, and SurfaceArea from the country table.", "Determine the condition to find the country with the lowest population, which requires a subquery to get the minimum population.", "Construct the subquery to select the minimum population from the country table.", "Use the result of the subquery to filter the main query to get the country details where the population matches the minimum population."], "pred_sql": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);", "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "source_tables": ["country"]}
{"sample_id": 790, "db_id": "world_1", "question": "What are the population, name and leader of the country with the largest area?", "rationale": ["Identify the relevant columns needed from the 'country' table: Population, Name, and HeadOfState.", "To find the country with the largest area, we need to sort the results by the SurfaceArea column in descending order.", "We will limit the results to 1 to get only the country with the largest area."], "pred_sql": "SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1;", "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}
{"sample_id": 791, "db_id": "world_1", "question": "Give the name, population, and head of state for the country that has the largest area.", "rationale": ["Identify the relevant table: The query requires information about countries, so we will use the 'country' table.", "Select the required columns: We need to retrieve the 'Name', 'Population', and 'HeadOfState' from the 'country' table.", "Determine the condition for the largest area: To find the country with the largest area, we will order the results by 'SurfaceArea' in descending order.", "Limit the results: Since we only need the country with the largest area, we will limit the results to 1."], "pred_sql": "SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1;", "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}
{"sample_id": 792, "db_id": "world_1", "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "rationale": ["We need to retrieve the country name and the number of languages spoken for each country.", "The relevant tables are 'country' for country names and 'countrylanguage' for languages spoken.", "We will join the 'country' table with the 'countrylanguage' table on the 'Code' and 'CountryCode' columns respectively.", "To count the number of languages spoken per country, we will use the COUNT() function on the 'Language' column from the 'countrylanguage' table.", "We will group the results by the country name to aggregate the language counts for each country.", "Finally, we will filter the results to include only those countries that have at least 3 languages spoken using the HAVING clause."], "pred_sql": "SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Name\nHAVING COUNT(cl.Language) >= 3;", "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 793, "db_id": "world_1", "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "rationale": ["Identify the relevant tables: We need to use the 'country' and 'countrylanguage' tables to get the country names and the languages spoken in those countries.", "We need to count the number of languages spoken in each country. This can be done using the COUNT() function on the 'Language' column from the 'countrylanguage' table.", "To get the country names along with the language count, we will join the 'country' table with the 'countrylanguage' table on the 'CountryCode' column.", "We will group the results by 'CountryCode' to aggregate the language counts for each country.", "Finally, we will filter the results to include only those countries that have more than 2 languages spoken by using the HAVING clause."], "pred_sql": "SELECT cl.CountryCode, c.Name, COUNT(cl.Language) AS LanguageCount\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nGROUP BY cl.CountryCode\nHAVING COUNT(cl.Language) > 2;", "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "source_tables": ["country", "countrylanguage"]}
{"sample_id": 794, "db_id": "world_1", "question": "Find the number of cities in each district whose population is greater than the average population of cities?", "rationale": ["Identify the requirement to count cities in each district.", "Determine that we need to filter cities based on their population being greater than the average population.", "Calculate the average population of cities using a subquery: (SELECT AVG(Population) FROM city).", "Group the results by District to count the number of cities in each district that meet the population criteria.", "Construct the final SQL query using SELECT, COUNT, FROM, WHERE, and GROUP BY clauses."], "pred_sql": "SELECT District, COUNT(*) AS NumberOfCities\nFROM city\nWHERE Population > (SELECT AVG(Population) FROM city)\nGROUP BY District;", "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "source_tables": ["city"]}
{"sample_id": 795, "db_id": "world_1", "question": "How many cities in each district have a population that is above the average population across all cities?", "rationale": ["Identify the relevant table: The 'city' table contains the necessary information about cities and their populations.", "Determine the average population: We need to calculate the average population of all cities using the AVG() function in a subquery.", "Filter cities: We want to filter cities that have a population greater than the average population calculated in the subquery.", "Group by district: We need to group the results by the 'District' column to count the number of cities in each district that meet the population criteria.", "Count the cities: Use the COUNT() function to count the number of cities in each district that have a population above the average."], "pred_sql": "SELECT District, COUNT(*) AS CityCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;", "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "source_tables": ["city"]}
{"sample_id": 796, "db_id": "world_1", "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "rationale": ["Identify the relevant table: The 'country' table contains the columns for GovernmentForm and LifeExpectancy, as well as Population.", "Select the columns needed: We need to select the GovernmentForm and the total population, which requires using the SUM function on the Population column.", "Apply the condition: We need to filter the results to include only those countries where the LifeExpectancy is greater than 72.", "Group the results: Since we want the total population for each government form, we need to group the results by GovernmentForm."], "pred_sql": "SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation\nFROM country c\nWHERE c.LifeExpectancy > 72\nGROUP BY c.GovernmentForm;", "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "source_tables": ["country"]}
{"sample_id": 797, "db_id": "world_1", "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "rationale": ["Identify the relevant table: The query requires information about government forms and populations, which can be found in the 'country' table.", "Select the columns needed: We need 'GovernmentForm' and the total population, so we will select 'GovernmentForm' and use SUM(Population) to get the total population for each government form.", "Apply the condition: We need to filter the results to include only those government forms with an average life expectancy greater than 72, which is done using the WHERE clause on the 'LifeExpectancy' column.", "Group the results: Since we want the total population for each government form, we will use GROUP BY on 'GovernmentForm' to aggregate the population data accordingly."], "pred_sql": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation \nFROM country \nWHERE LifeExpectancy > 72 \nGROUP BY GovernmentForm;", "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "source_tables": ["country"]}
{"sample_id": 798, "db_id": "world_1", "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "rationale": ["Identify the relevant table: The 'country' table contains the columns for life expectancy and population, as well as the continent.", "Select the required columns: We need to select the continent, the average life expectancy (using AVG function), and the total population (using SUM function).", "Group the results by continent: To get the average life expectancy and total population for each continent, we need to use the GROUP BY clause on the continent column.", "Filter the results: We need to include only those continents where the average life expectancy is shorter than 72, which can be done using the HAVING clause."], "pred_sql": "SELECT continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation \nFROM country \nGROUP BY continent \nHAVING AVG(LifeExpectancy) < 72;", "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}
{"sample_id": 799, "db_id": "world_1", "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "rationale": ["Identify the relevant table: The 'country' table contains the necessary columns for continent, population, and life expectancy.", "Select the required columns: We need to select 'continent', the total population (using SUM), and the average life expectancy (using AVG).", "Apply the condition: We need to filter the results to include only those continents where the average life expectancy is less than 72.", "Group the results: Since we want the total population and average life expectancy for each continent, we need to group the results by 'continent'.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT continent, SUM(country.Population) AS total_population, AVG(country.LifeExpectancy) AS average_life_expectancy\nFROM country\nWHERE country.LifeExpectancy < 72\nGROUP BY continent;", "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}
{"sample_id": 800, "db_id": "world_1", "question": "What are the names and areas of countries with the top 5 largest area?", "rationale": ["Identify the relevant table: The query requires information about countries, so we will use the 'country' table.", "Determine the required columns: We need the 'Name' and 'SurfaceArea' of the countries.", "Sort the results: To find the top 5 largest areas, we need to order the results by 'SurfaceArea' in descending order.", "Limit the results: We only want the top 5 countries, so we will use the LIMIT clause."], "pred_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;", "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}
{"sample_id": 801, "db_id": "world_1", "question": "Return the names and surface areas of the 5 largest countries.", "rationale": ["Identify the required columns: 'Name' and 'SurfaceArea' from the 'country' table.", "Determine the criteria for the largest countries, which is based on the 'Population' column.", "Sort the results in descending order based on the 'Population' to get the largest countries first.", "Limit the results to the top 5 countries using 'LIMIT 5'."], "pred_sql": "SELECT Name, SurfaceArea FROM country ORDER BY Population DESC LIMIT 5;", "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}
{"sample_id": 802, "db_id": "world_1", "question": "What are names of countries with the top 3 largest population?", "rationale": ["Identify the table that contains country population data, which is the 'country' table.", "Select the 'Name' column from the 'country' table to get the names of the countries.", "Order the results by the 'Population' column in descending order to get the countries with the largest populations at the top.", "Limit the results to the top 3 countries using 'LIMIT 3'."], "pred_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;", "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}
{"sample_id": 803, "db_id": "world_1", "question": "Return the names of the 3 most populated countries.", "rationale": ["Identify the table that contains country information, which is the 'country' table.", "Determine the column that contains the names of the countries, which is 'Name'.", "Identify the column that contains the population data, which is 'Population'.", "To find the most populated countries, sort the results by the 'Population' column in descending order.", "Limit the results to the top 3 entries to get the 3 most populated countries."], "pred_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;", "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}
{"sample_id": 804, "db_id": "world_1", "question": "What are the names of the nations with the 3 lowest populations?", "rationale": ["Identify the table that contains the population data, which is the 'country' table.", "Select the 'Name' column from the 'country' table to get the names of the countries.", "Order the results by the 'Population' column in ascending order to get the countries with the lowest populations first.", "Limit the results to 3 to get only the three countries with the lowest populations."], "pred_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;", "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}
{"sample_id": 805, "db_id": "world_1", "question": "Return the names of the 3 countries with the fewest people.", "rationale": ["Identify the table that contains country information, which is the 'country' table.", "Determine the relevant column for country names, which is 'Name'.", "Identify the column that contains population data, which is 'Population'.", "To find the countries with the fewest people, sort the results by the 'Population' column in ascending order.", "Limit the results to the top 3 entries to get the 3 countries with the fewest people."], "pred_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;", "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}
{"sample_id": 806, "db_id": "world_1", "question": "how many countries are in Asia?", "rationale": ["Identify the relevant table: The 'country' table contains information about countries, including their continent.", "Determine the condition: We need to filter the countries that are located in Asia.", "Construct the SQL query: Use the COUNT() function to count the number of entries in the 'country' table where the 'Continent' column is 'Asia'."], "pred_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';", "gold_sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "source_tables": ["country"]}
{"sample_id": 807, "db_id": "world_1", "question": "Count the number of countries in Asia.", "rationale": ["Identify the table that contains country information, which is the 'country' table.", "Determine the relevant column for filtering by continent, which is 'Continent'.", "Specify the condition to filter for countries in Asia, using the value 'Asia'.", "Use the COUNT() function to count the number of records that meet the specified condition."], "pred_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';", "gold_sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "source_tables": ["country"]}
{"sample_id": 808, "db_id": "world_1", "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "rationale": ["Identify the table that contains the information about countries, which is the 'country' table.", "Determine the columns needed for the query: we need the 'Name' of the country, and we need to filter by 'Continent' and 'Population'.", "The condition specifies that the continent must be 'Europe' and the population must be '80000'.", "Construct the SQL SELECT statement to retrieve the 'Name' from the 'country' table where the specified conditions are met."], "pred_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = '80000';", "gold_sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "source_tables": ["country"]}
{"sample_id": 809, "db_id": "world_1", "question": "Give the names of countries that are in Europe and have a population equal to 80000.", "rationale": ["Identify the table that contains the relevant information about countries, which is the 'country' table.", "Determine the columns needed: we need the 'Name' of the country, and we need to filter by 'Continent' and 'Population'.", "The condition for the continent is 'Europe', and the population must be equal to 80000.", "Construct the SQL query using a SELECT statement to retrieve the 'Name' from the 'country' table with the specified conditions."], "pred_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = '80000';", "gold_sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "source_tables": ["country"]}
{"sample_id": 810, "db_id": "world_1", "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "rationale": ["Identify the relevant table: The query requires information about countries, so we will use the 'country' table.", "Determine the required fields: We need the total population and average area of the countries, which correspond to the 'Population' and 'SurfaceArea' columns.", "Apply the necessary filters: The query specifies that we are only interested in countries located in the continent of North America and whose area is greater than 3000. This will be done using a WHERE clause.", "Construct the SQL query: We will use the SUM function to calculate the total population and the AVG function to calculate the average area, applying the filters identified in the previous step."], "pred_sql": "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;", "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000", "source_tables": ["country"]}
{"sample_id": 811, "db_id": "world_1", "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "rationale": ["Identify the relevant table: The 'country' table contains the necessary information about countries, including population and surface area.", "Determine the required calculations: We need to calculate the total population and the average surface area of countries that meet specific criteria.", "Specify the criteria: The countries must be located in 'North America' and have a surface area greater than 3000.", "Construct the SQL query: Use the SUM function to calculate the total population and the AVG function to calculate the average surface area, applying the WHERE clause to filter the results based on the specified criteria."], "pred_sql": "SELECT SUM(c.Population) AS TotalPopulation, AVG(c.SurfaceArea) AS AverageSurfaceArea\nFROM country c\nWHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;", "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000", "source_tables": ["country"]}
{"sample_id": 812, "db_id": "world_1", "question": "What are the cities whose population is between 160000 and 900000?", "rationale": ["Identify the table to query: The 'city' table contains the population data.", "Determine the condition for filtering: We need cities with a population between 160000 and 900000.", "Construct the SQL query using the SELECT statement to retrieve all columns from the 'city' table.", "Use the WHERE clause to apply the population filter with the BETWEEN operator."], "pred_sql": "SELECT * FROM city WHERE Population BETWEEN '160000' AND '900000';", "gold_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "source_tables": ["city"]}
{"sample_id": 813, "db_id": "world_1", "question": "Return the names of cities that have a population between 160000 and 900000 .", "rationale": ["Identify the table that contains city information, which is the 'city' table.", "Determine the relevant column for city names, which is 'Name'.", "Identify the column that contains population data, which is 'Population'.", "Formulate a SQL query to select the 'Name' of cities where the 'Population' is between 160000 and 900000 using the BETWEEN clause."], "pred_sql": "SELECT Name FROM city WHERE Population BETWEEN '160000' AND '900000';", "gold_sql": "select name from city where population between 160000 and 900000", "source_tables": ["city"]}
{"sample_id": 814, "db_id": "world_1", "question": "Which language is spoken by the largest number of countries?", "rationale": ["Identify the table that contains the language information, which is 'countrylanguage'.", "We need to find out which language is spoken by the largest number of countries, so we will group the results by 'Language'.", "To count the number of distinct countries that speak each language, we will use the COUNT function on 'CountryCode'.", "We will order the results in descending order to get the language spoken by the most countries at the top.", "Finally, we will limit the results to just one entry to get the language spoken by the largest number of countries."], "pred_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;", "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["countrylanguage"]}
{"sample_id": 815, "db_id": "world_1", "question": "Give the language that is spoken in the most countries.", "rationale": ["Identify the table that contains language information, which is 'countrylanguage'.", "We need to find the language that is spoken in the most countries, so we will group the results by 'Language'.", "To determine how many countries speak each language, we will count the distinct 'CountryCode' for each language.", "We will order the results in descending order based on the count of distinct 'CountryCode'.", "Finally, we will limit the results to only the top entry to get the language spoken in the most countries."], "pred_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;", "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["countrylanguage"]}
{"sample_id": 816, "db_id": "world_1", "question": "What is the language spoken by the largest percentage of people in each country?", "rationale": ["Identify the relevant table: The 'countrylanguage' table contains information about languages spoken in each country, including the percentage of the population that speaks each language.", "Select the columns needed: We need the 'Language' and 'CountryCode' columns, as well as the maximum percentage of speakers for each country.", "Use the MAX() function: To find the language spoken by the largest percentage of people, we will use the MAX() function on the 'Percentage' column.", "Group the results: We will group the results by 'CountryCode' to ensure we get the maximum percentage for each country.", "Construct the SQL query: Combine the selected columns, the MAX() function, and the GROUP BY clause into a complete SQL query."], "pred_sql": "SELECT cl.Language, cl.CountryCode, MAX(cl.Percentage) AS MaxPercentage\nFROM countrylanguage cl\nGROUP BY cl.CountryCode;", "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "source_tables": ["countrylanguage"]}
{"sample_id": 817, "db_id": "world_1", "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "rationale": ["Identify the tables needed: We need data from the 'country' table for country codes and the 'countrylanguage' table for languages spoken.", "We need to join the 'country' and 'countrylanguage' tables on the 'CountryCode' column to associate each country with its languages.", "To find the language spoken by the greatest percentage of people for each country, we will use a subquery that selects the maximum percentage of languages for each country.", "The final query will select the country code, the language, and the percentage from the joined tables, ensuring we only get the language with the highest percentage for each country."], "pred_sql": "SELECT c.Code AS CountryCode, cl.Language, cl.Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code)", "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "source_tables": ["countrylanguage"]}
{"sample_id": 818, "db_id": "world_1", "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "rationale": ["Identify the relevant tables: We need to look at the 'country' and 'countrylanguage' tables to find countries where Spanish is spoken.", "Determine the condition: We need to find countries where Spanish is the language spoken by the largest percentage of the population.", "Use a subquery to find the maximum percentage of Spanish speakers: This will help us filter the countries that meet this criterion.", "Count the distinct countries: We want the total number of unique countries that meet the condition of having the maximum percentage of Spanish speakers."], "pred_sql": "SELECT COUNT(DISTINCT c.Code) AS TotalCountries\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');", "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}
{"sample_id": 819, "db_id": "world_1", "question": "Count the number of countries for which Spanish is the predominantly spoken language.", "rationale": ["Identify the relevant table: The 'countrylanguage' table contains information about languages spoken in each country.", "Determine the condition for Spanish being predominantly spoken: This can be defined as Spanish being spoken by more than 50% of the population.", "Use the COUNT function to count distinct countries that meet the criteria: We will count the distinct 'CountryCode' where the language is Spanish and the percentage is greater than 50."], "pred_sql": "SELECT COUNT(DISTINCT cl.CountryCode) AS CountryCount\nFROM countrylanguage cl\nWHERE cl.Language = 'Spanish' AND cl.Percentage > 50;", "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}
{"sample_id": 820, "db_id": "world_1", "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "rationale": ["Identify the table that contains the language data, which is 'countrylanguage'.", "We need to filter the records where the language is 'Spanish'.", "We want to find the country codes where Spanish is spoken by the largest percentage of people.", "To do this, we will use a subquery to find the maximum percentage of Spanish speakers.", "The final query will select the CountryCode from the countrylanguage table where the language is Spanish and the percentage matches the maximum percentage found in the subquery."], "pred_sql": "SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');", "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}
{"sample_id": 821, "db_id": "world_1", "question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "rationale": ["Identify the relevant table: We need to look at the 'countrylanguage' table since it contains information about languages spoken in countries.", "Determine the condition: We want to find countries where Spanish is predominantly spoken, which means we need to check for a high percentage of Spanish speakers.", "Construct the SQL query: We will select the 'CountryCode' from the 'countrylanguage' table where the 'Language' is 'Spanish' and the 'Percentage' is greater than 50."], "pred_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50;", "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}
{"sample_id": 822, "db_id": "orchestra", "question": "How many conductors are there?", "rationale": ["Identify the table that contains the information about conductors, which is the 'conductor' table.", "To find out how many conductors there are, we need to count the number of entries in the 'conductor' table.", "Use the COUNT() function to count the total number of rows in the 'conductor' table.", "Construct the SQL query to select the count from the 'conductor' table."], "pred_sql": "SELECT COUNT(*) AS Number_of_Conductors FROM conductor;", "gold_sql": "SELECT count(*) FROM conductor", "source_tables": ["conductor"]}
{"sample_id": 823, "db_id": "orchestra", "question": "Count the number of conductors.", "rationale": ["Identify the table that contains the information about conductors, which is the 'conductor' table.", "To count the number of conductors, we will use the COUNT() function in SQL.", "The SQL query will select the count of all records from the 'conductor' table.", "We will alias the count result as 'Number_of_Conductors' for clarity."], "pred_sql": "SELECT COUNT(*) AS Number_of_Conductors FROM conductor;", "gold_sql": "SELECT count(*) FROM conductor", "source_tables": ["conductor"]}
{"sample_id": 824, "db_id": "orchestra", "question": "List the names of conductors in ascending order of age.", "rationale": ["Identify the table that contains the information about conductors, which is the 'conductor' table.", "Determine the column that holds the names of the conductors, which is 'Name'.", "Since the request is to list the names, we will select the 'Name' column.", "The request specifies to order the results by age, so we will use the 'Age' column for ordering.", "Specify that the ordering should be in ascending order, which is done using 'ORDER BY Age ASC'.", "Combine all these elements to form the complete SQL query."], "pred_sql": "SELECT Name FROM conductor ORDER BY Age ASC;", "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC", "source_tables": ["conductor"]}
{"sample_id": 825, "db_id": "orchestra", "question": "What are the names of conductors, ordered by age?", "rationale": ["Identify the table that contains the information about conductors, which is the 'conductor' table.", "Determine the column that contains the names of the conductors, which is 'Name'.", "Since the user wants the results ordered by age, identify the column that contains the age information, which is 'Age'.", "Construct the SQL query to select the 'Name' from the 'conductor' table and order the results by 'Age'."], "pred_sql": "SELECT Name FROM conductor ORDER BY Age;", "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC", "source_tables": ["conductor"]}
{"sample_id": 826, "db_id": "orchestra", "question": "What are the names of conductors whose nationalities are not \"USA\"?", "rationale": ["Identify the table that contains the information about conductors, which is the 'conductor' table.", "Determine the column that contains the names of the conductors, which is 'Name'.", "Identify the column that contains the nationality of the conductors, which is 'Nationality'.", "Formulate a SQL query to select the 'Name' from the 'conductor' table where the 'Nationality' is not equal to 'USA'."], "pred_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA';", "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "source_tables": ["conductor"]}
{"sample_id": 827, "db_id": "orchestra", "question": "Return the names of conductors that do not have the nationality \"USA\".", "rationale": ["Identify the table that contains the information about conductors, which is the 'conductor' table.", "Determine the column that contains the names of the conductors, which is the 'Name' column.", "Identify the column that contains the nationality of the conductors, which is the 'Nationality' column.", "Formulate a SQL query to select the 'Name' from the 'conductor' table where the 'Nationality' is not equal to 'USA'."], "pred_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA';", "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "source_tables": ["conductor"]}
{"sample_id": 828, "db_id": "orchestra", "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "rationale": ["Identify the relevant table: The 'orchestra' table contains the 'Record_Company' and 'Year_of_Founded' columns.", "Select the 'Record_Company' column from the 'orchestra' table.", "Use DISTINCT to ensure that each record company is listed only once.", "Order the results by 'Year_of_Founded' in descending order to get the most recently founded orchestras first."], "pred_sql": "SELECT DISTINCT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;", "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "source_tables": ["orchestra"]}
{"sample_id": 829, "db_id": "orchestra", "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "rationale": ["Identify the table that contains the required information: the 'orchestra' table has the 'Record_Company' and 'Year_of_Founded' columns.", "We need to select the 'Record_Company' from the 'orchestra' table.", "To sort the results by the year the orchestras were founded, we will use the 'ORDER BY' clause on the 'Year_of_Founded' column.", "Since the user requested the results to be sorted in descending order, we will specify 'DESC' in the 'ORDER BY' clause."], "pred_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;", "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "source_tables": ["orchestra"]}
{"sample_id": 830, "db_id": "orchestra", "question": "What is the average attendance of shows?", "rationale": ["Identify the table that contains attendance data, which is the 'show' table.", "To find the average attendance, we need to use the AVG() function on the 'Attendance' column.", "Construct the SQL query to select the average attendance from the 'show' table."], "pred_sql": "SELECT AVG(Attendance) AS Average_Attendance FROM show;", "gold_sql": "SELECT avg(Attendance) FROM SHOW", "source_tables": ["show"]}
{"sample_id": 831, "db_id": "orchestra", "question": "Return the average attendance across all shows.", "rationale": ["Identify the requirement: Calculate the average attendance across all shows.", "Determine the relevant table: The 'show' table contains the 'Attendance' column which we need to average.", "Use the AVG() function to compute the average of the 'Attendance' column.", "Construct the SQL query to select the average attendance from the 'show' table."], "pred_sql": "SELECT AVG(Attendance) AS Average_Attendance FROM show;", "gold_sql": "SELECT avg(Attendance) FROM SHOW", "source_tables": ["show"]}
{"sample_id": 832, "db_id": "orchestra", "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "rationale": ["Identify the table that contains the 'Share' column, which is the 'performance' table.", "Determine the condition for filtering the performances, which is that the 'Type' should not be 'Live final'.", "Use the aggregate functions MAX() and MIN() to find the maximum and minimum values of the 'Share' column respectively.", "Construct the SQL query to select the maximum and minimum share from the 'performance' table with the specified condition."], "pred_sql": "SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final';", "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'", "source_tables": ["performance"]}
{"sample_id": 833, "db_id": "orchestra", "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "rationale": ["Identify the table that contains the share information, which is the 'performance' table.", "Determine the columns needed: we need the 'Share' column to find the maximum and minimum values.", "Use the aggregate functions MAX() and MIN() to get the maximum and minimum shares.", "Add a WHERE clause to filter out performances of type 'Live final' by using the condition Type != 'Live final'.", "Construct the SQL query to select the maximum and minimum shares from the filtered results."], "pred_sql": "SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final';", "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'", "source_tables": ["performance"]}
{"sample_id": 834, "db_id": "orchestra", "question": "How many different nationalities do conductors have?", "rationale": ["Identify the table that contains the relevant information about conductors, which is the 'conductor' table.", "Determine the column that holds the nationality information, which is 'Nationality'.", "To find the number of different nationalities, use the COUNT function along with DISTINCT to count unique values in the 'Nationality' column.", "Construct the SQL query to select the count of distinct nationalities from the 'conductor' table."], "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS Different_Nationalities FROM conductor;", "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor", "source_tables": ["conductor"]}
{"sample_id": 835, "db_id": "orchestra", "question": "Count the number of different nationalities of conductors.", "rationale": ["Identify the table that contains the relevant data: the 'conductor' table.", "Determine the column that holds the nationality information: 'Nationality'.", "To count the number of different nationalities, use the COUNT function with DISTINCT to ensure unique values are counted.", "Construct the SQL query to select the count of distinct nationalities from the conductor table."], "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS NumberOfNationalities FROM conductor;", "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor", "source_tables": ["conductor"]}
{"sample_id": 836, "db_id": "orchestra", "question": "List names of conductors in descending order of years of work.", "rationale": ["Identify the table that contains the names of conductors, which is the 'conductor' table.", "Determine the column that holds the names of the conductors, which is 'Name'.", "Identify the column that indicates the years of work, which is 'Year_of_Work'.", "Specify that the results should be ordered in descending order based on the 'Year_of_Work' column.", "Construct the SQL query to select the 'Name' from the 'conductor' table and order the results by 'Year_of_Work' in descending order."], "pred_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;", "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "source_tables": ["conductor"]}
{"sample_id": 837, "db_id": "orchestra", "question": "What are the names of conductors, sorted descending by the number of years they have worked?", "rationale": ["Identify the relevant table: The 'conductor' table contains the names and years of work for conductors.", "Calculate the number of years worked: This can be done by subtracting the 'Year_of_Work' from the current year (2023).", "Select the 'Name' of the conductors and the calculated years worked.", "Sort the results in descending order based on the calculated years worked."], "pred_sql": "SELECT Name, (2023 - CAST(Year_of_Work AS INTEGER)) AS Years_Worked FROM conductor ORDER BY Years_Worked DESC;", "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "source_tables": ["conductor"]}
{"sample_id": 838, "db_id": "orchestra", "question": "List the name of the conductor with the most years of work.", "rationale": ["Identify the relevant table: The 'conductor' table contains the information about conductors, including their names and years of work.", "Determine the column to sort by: We need to sort the conductors by 'Year_of_Work' to find the one with the most years of work.", "Use the ORDER BY clause: We will order the results by 'Year_of_Work' in descending order to get the conductor with the most years of work at the top.", "Limit the results: Since we only want the name of the conductor with the most years of work, we will use LIMIT 1 to get only the top result."], "pred_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work ASC LIMIT 1;", "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "source_tables": ["conductor"]}
{"sample_id": 839, "db_id": "orchestra", "question": "What is the name of the conductor who has worked the greatest number of years?", "rationale": ["Identify the relevant table: The 'conductor' table contains information about conductors, including their names and years of work.", "Determine the required information: We need the name of the conductor who has worked the greatest number of years, which implies we need to sort the conductors by their 'Year_of_Work'.", "Sort the conductors: We will sort the conductors in descending order based on 'Year_of_Work' to get the one who has worked the longest.", "Limit the results: Since we only need the name of the conductor with the greatest number of years, we will limit the result to 1."], "pred_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work ASC LIMIT 1;", "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "source_tables": ["conductor"]}
{"sample_id": 840, "db_id": "orchestra", "question": "Show the names of conductors and the orchestras they have conducted.", "rationale": ["Identify the tables needed: conductor and orchestra.", "Determine the columns to select: conductor's Name and orchestra's name.", "Establish the relationship between the tables using the foreign key: conductor.Conductor_ID = orchestra.Conductor_ID.", "Construct the SQL query using a JOIN to combine the data from both tables."], "pred_sql": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;", "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "source_tables": ["conductor", "orchestra"]}
{"sample_id": 841, "db_id": "orchestra", "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "rationale": ["Identify the tables needed: conductor and orchestra.", "Determine the columns to select: conductor's Name and orchestra's name.", "Establish the relationship between the tables using the foreign key: conductor.Conductor_ID = orchestra.Conductor_ID.", "Construct the SQL query using a JOIN to combine the data from both tables."], "pred_sql": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;", "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "source_tables": ["conductor", "orchestra"]}
{"sample_id": 842, "db_id": "orchestra", "question": "Show the names of conductors that have conducted more than one orchestras.", "rationale": ["Identify the relevant tables: We need to look at the 'conductor' and 'orchestra' tables since we want to find conductors and their associated orchestras.", "Join the tables: We will join the 'conductor' table with the 'orchestra' table on the 'Conductor_ID' to link conductors with the orchestras they have conducted.", "Group by conductor: We will group the results by 'Conductor_ID' to aggregate the orchestras conducted by each conductor.", "Count orchestras: We will use the COUNT function to count the number of orchestras each conductor has conducted.", "Filter results: We will use the HAVING clause to filter the groups to only include those conductors who have conducted more than one orchestra."], "pred_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nHAVING COUNT(o.Orchestra_ID) > 1;", "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "source_tables": ["conductor", "orchestra"]}
{"sample_id": 843, "db_id": "orchestra", "question": "What are the names of conductors who have conducted at more than one orchestra?", "rationale": ["Identify the relevant tables: We need information from the 'conductor' and 'orchestra' tables.", "Join the tables: We will join the 'conductor' table with the 'orchestra' table on the 'Conductor_ID' to link conductors with the orchestras they have conducted.", "Group by conductor: We will group the results by 'Conductor_ID' to aggregate the orchestras each conductor has worked with.", "Count distinct orchestras: We will use COUNT(DISTINCT o.Orchestra_ID) to count the number of unique orchestras each conductor has conducted.", "Filter for more than one orchestra: We will use HAVING COUNT(DISTINCT o.Orchestra_ID) > 1 to filter the results to only those conductors who have conducted at more than one orchestra.", "Select the conductor names: Finally, we will select the 'Name' of the conductors who meet the criteria."], "pred_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1;", "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "source_tables": ["conductor", "orchestra"]}
{"sample_id": 844, "db_id": "orchestra", "question": "Show the name of the conductor that has conducted the most number of orchestras.", "rationale": ["Identify the relevant tables: conductor and orchestra.", "We need to find the conductor who has conducted the most orchestras, which requires joining the conductor table with the orchestra table on the Conductor_ID.", "Use GROUP BY to group the results by each conductor's ID, allowing us to count the number of orchestras each conductor has conducted.", "Use COUNT to count the number of orchestras for each conductor.", "Order the results in descending order based on the count of orchestras to get the conductor with the most orchestras at the top.", "Limit the results to 1 to get only the top conductor."], "pred_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["conductor", "orchestra"]}
{"sample_id": 845, "db_id": "orchestra", "question": "What is the name of the conductor who has conducted the most orchestras?", "rationale": ["Identify the relevant tables: We need to find information from the 'conductor' and 'orchestra' tables.", "Join the tables: We will join the 'conductor' table with the 'orchestra' table on the 'Conductor_ID' to link conductors with their orchestras.", "Group by conductor: We will group the results by 'Conductor_ID' to count how many orchestras each conductor has conducted.", "Count orchestras: Use COUNT() to count the number of orchestras for each conductor.", "Order the results: We will order the results in descending order based on the count of orchestras to find the conductor with the most orchestras.", "Limit the results: We will limit the results to 1 to get only the top conductor."], "pred_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["conductor", "orchestra"]}
{"sample_id": 846, "db_id": "orchestra", "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "rationale": ["Identify the relevant tables: conductor and orchestra.", "We need to retrieve the names of conductors, so we will select the 'Name' column from the conductor table.", "To find conductors associated with orchestras founded after 2008, we need to join the conductor table with the orchestra table on the 'Conductor_ID'.", "We will filter the results to include only those orchestras where 'Year_of_Founded' is greater than 2008.", "Using DISTINCT ensures that we only get unique conductor names in case a conductor has conducted multiple orchestras founded after 2008."], "pred_sql": "SELECT DISTINCT c.Name \nFROM conductor c \nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID \nWHERE o.Year_of_Founded > 2008;", "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "source_tables": ["conductor", "orchestra"]}
{"sample_id": 847, "db_id": "orchestra", "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "rationale": ["Identify the relevant tables: conductor and orchestra.", "Determine the relationship between the tables: the conductor table is linked to the orchestra table via Conductor_ID.", "Select the Name column from the conductor table, as we need the names of the conductors.", "Filter the orchestras founded after the year 2008 by using a WHERE clause on the Year_of_Founded column in the orchestra table.", "Use JOIN to combine the conductor and orchestra tables based on the Conductor_ID to ensure we are only getting conductors who have conducted orchestras founded after 2008."], "pred_sql": "SELECT DISTINCT c.Name \nFROM conductor c \nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID \nWHERE o.Year_of_Founded > 2008;", "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "source_tables": ["conductor", "orchestra"]}
{"sample_id": 848, "db_id": "orchestra", "question": "Please show the different record companies and the corresponding number of orchestras.", "rationale": ["Identify the relevant table: The 'orchestra' table contains information about orchestras and their associated record companies.", "Determine the columns needed: We need 'Record_Company' to identify the different record companies and 'Orchestra_ID' to count the number of orchestras.", "Use the COUNT() function to count the number of orchestras for each record company.", "Group the results by 'Record_Company' to get the count for each company."], "pred_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;", "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "source_tables": ["orchestra"]}
{"sample_id": 849, "db_id": "orchestra", "question": "How many orchestras does each record company manage?", "rationale": ["Identify the relevant table: The 'orchestra' table contains information about orchestras and their associated record companies.", "Determine the columns needed: We need 'Record_Company' to group the results and 'Orchestra_ID' to count the number of orchestras.", "Use the COUNT() function to count the number of orchestras for each record company.", "Group the results by 'Record_Company' to get the count for each company."], "pred_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company;", "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "source_tables": ["orchestra"]}
{"sample_id": 850, "db_id": "orchestra", "question": "Please show the record formats of orchestras in ascending order of count.", "rationale": ["Identify the relevant table: The query is about orchestras and their record formats, so we will use the 'orchestra' table.", "Select the required columns: We need to show the 'Major_Record_Format' and the count of orchestras for each format.", "Group the results: To count the number of orchestras for each record format, we will use the GROUP BY clause on 'Major_Record_Format'.", "Order the results: We need the results in ascending order of the count, so we will use the ORDER BY clause on the count of orchestras."], "pred_sql": "SELECT Major_Record_Format, COUNT(*) as Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC;", "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "source_tables": ["orchestra"]}
{"sample_id": 851, "db_id": "orchestra", "question": "What are the major record formats of orchestras, sorted by their frequency?", "rationale": ["Identify the relevant table: The query is about orchestras and their major record formats, so we will use the 'orchestra' table.", "Select the columns needed: We need to select 'Major_Record_Format' and count the occurrences of each format, so we will use COUNT(*) to get the frequency.", "Group the results: To get the frequency of each major record format, we will use GROUP BY on 'Major_Record_Format'.", "Sort the results: Finally, we will sort the results by frequency in descending order using ORDER BY Frequency DESC."], "pred_sql": "SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;", "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "source_tables": ["orchestra"]}
{"sample_id": 852, "db_id": "orchestra", "question": "List the record company shared by the most number of orchestras.", "rationale": ["Identify the relevant table: The 'orchestra' table contains the 'Record_Company' and 'Orchestra_ID' columns, which are necessary for this query.", "Count the number of orchestras for each record company: Use the COUNT() function to count the 'Orchestra_ID' for each 'Record_Company'.", "Group the results by 'Record_Company': This is done using the GROUP BY clause to aggregate the counts for each record company.", "Order the results by the count in descending order: Use ORDER BY to sort the results so that the record company with the most orchestras appears first.", "Limit the results to the top record company: Use LIMIT 1 to get only the record company that is associated with the most orchestras."], "pred_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Orchestra_Count DESC\nLIMIT 1;", "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["orchestra"]}
{"sample_id": 853, "db_id": "orchestra", "question": "What is the record company used by the greatest number of orchestras?", "rationale": ["Identify the relevant table: The 'orchestra' table contains the 'Record_Company' and 'Orchestra_ID' columns, which are necessary for this query.", "Count the number of orchestras associated with each record company: Use the COUNT function to count the 'Orchestra_ID' for each 'Record_Company'.", "Group the results by 'Record_Company': This allows us to aggregate the counts for each company.", "Order the results by the count in descending order: This will help us find the record company with the greatest number of orchestras.", "Limit the results to 1: Since we only want the record company with the greatest number of orchestras, we use LIMIT 1."], "pred_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Orchestra_Count DESC\nLIMIT 1;", "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["orchestra"]}
{"sample_id": 854, "db_id": "orchestra", "question": "List the names of orchestras that have no performance.", "rationale": ["Identify the table that contains the orchestras, which is the 'orchestra' table.", "We need to find orchestras that have no performances, so we will look for orchestras whose IDs are not present in the 'performance' table.", "To achieve this, we can use a subquery that selects all Orchestra_IDs from the 'performance' table.", "The main query will select the names of orchestras from the 'orchestra' table where the Orchestra_ID is not in the list of IDs returned by the subquery."], "pred_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);", "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["performance", "orchestra"]}
{"sample_id": 855, "db_id": "orchestra", "question": "What are the orchestras that do not have any performances?", "rationale": ["Identify the relevant tables: 'orchestra' and 'performance'.", "We need to find orchestras that do not have any performances, which means we need to look for orchestras that do not have corresponding entries in the performance table.", "To achieve this, we can use a LEFT JOIN between the 'orchestra' table and the 'performance' table on the 'Orchestra_ID'.", "In the WHERE clause, we will filter for rows where 'Performance_ID' from the performance table is NULL, indicating that there are no performances associated with that orchestra."], "pred_sql": "SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;", "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["performance", "orchestra"]}
{"sample_id": 856, "db_id": "orchestra", "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "rationale": ["Identify the table that contains the information about orchestras and their founding years, which is the 'orchestra' table.", "To find record companies associated with orchestras founded before 2003, I will use a SELECT statement with a WHERE clause filtering for Year_of_Founded < 2003.", "To find record companies associated with orchestras founded after 2003, I will use another SELECT statement with a WHERE clause filtering for Year_of_Founded > 2003.", "Since I want to combine the results of both queries and ensure that there are no duplicate record companies, I will use the UNION operator to merge the results of the two SELECT statements.", "The final SQL query will select distinct Record_Company from the orchestra table for both conditions."], "pred_sql": "SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;", "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}
{"sample_id": 857, "db_id": "orchestra", "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "rationale": ["Identify the orchestras founded before 2003 and those founded after 2003.", "We need to find the record companies that are common to both groups of orchestras.", "To do this, we can perform a self-join on the orchestra table, matching orchestras based on their Record_Company.", "The condition for the first orchestra (o1) will be that its Year_of_Founded is less than 2003.", "The condition for the second orchestra (o2) will be that its Year_of_Founded is greater than or equal to 2003.", "Finally, we select distinct Record_Company values from the result of the join to avoid duplicates."], "pred_sql": "SELECT DISTINCT o1.Record_Company \nFROM orchestra o1 \nJOIN orchestra o2 ON o1.Record_Company = o2.Record_Company \nWHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded >= 2003;", "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}
{"sample_id": 858, "db_id": "orchestra", "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "rationale": ["Identify the table that contains information about orchestras, which is the 'orchestra' table.", "Determine the relevant column that specifies the record format, which is 'Major_Record_Format'.", "The query requires counting the number of orchestras, so we will use the COUNT() function.", "We need to filter the orchestras based on the record format being either 'CD' or 'DVD'.", "Use the IN clause to specify the two formats we are interested in: 'CD' and 'DVD'.", "Construct the SQL query to select the count of orchestras that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS NumberOfOrchestras FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');", "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'", "source_tables": ["orchestra"]}
{"sample_id": 859, "db_id": "orchestra", "question": "Count the number of orchestras that have CD or DVD as their record format.", "rationale": ["Identify the table that contains information about orchestras, which is the 'orchestra' table.", "Determine the relevant column that specifies the record format, which is 'Major_Record_Format'.", "The query requires counting the number of orchestras with specific record formats, namely 'CD' or 'DVD'.", "Use the COUNT() function to count the number of records that meet the criteria.", "Construct the SQL query to select the count from the 'orchestra' table where 'Major_Record_Format' is either 'CD' or 'DVD'."], "pred_sql": "SELECT COUNT(*) AS Number_of_Orchestras FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');", "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'", "source_tables": ["orchestra"]}
{"sample_id": 860, "db_id": "orchestra", "question": "Show the years in which orchestras that have given more than one performance are founded.", "rationale": ["We need to find orchestras that have given more than one performance.", "To do this, we will join the 'orchestra' table with the 'performance' table on the 'Orchestra_ID'.", "We will group the results by 'Orchestra_ID' to count the number of performances for each orchestra.", "Using the HAVING clause, we will filter the groups to include only those orchestras that have more than one performance (COUNT(p.Performance_ID) > 1).", "Finally, we will select the distinct years in which these orchestras were founded from the 'Year_of_Founded' column."], "pred_sql": "SELECT DISTINCT o.Year_of_Founded\nFROM orchestra o\nJOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nGROUP BY o.Orchestra_ID\nHAVING COUNT(p.Performance_ID) > 1;", "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "source_tables": ["performance", "orchestra"]}
{"sample_id": 861, "db_id": "orchestra", "question": "What are years of founding for orchestras that have had more than a single performance?", "rationale": ["Identify the relevant tables: 'orchestra' for orchestra details and 'performance' for performance details.", "We need to find orchestras that have had more than one performance, so we will join the 'orchestra' table with the 'performance' table on the 'Orchestra_ID'.", "We will group the results by 'Orchestra_ID' to count the number of performances for each orchestra.", "Using the HAVING clause, we will filter the groups to include only those orchestras that have more than one performance (COUNT(p.Performance_ID) > 1).", "Finally, we will select the 'Year_of_Founded' from the 'orchestra' table for the filtered orchestras."], "pred_sql": "SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1;", "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "source_tables": ["performance", "orchestra"]}
{"sample_id": 862, "db_id": "network_1", "question": "How many high schoolers are there?", "rationale": ["Identify the goal: We need to find out how many high schoolers there are.", "Determine the relevant table: The 'Highschooler' table contains the information about high school students.", "Use the COUNT() function to count the number of entries in the 'Highschooler' table.", "Construct the SQL query to select the count of all records from the 'Highschooler' table."], "pred_sql": "SELECT COUNT(*) AS total_highschoolers FROM Highschooler;", "gold_sql": "SELECT count(*) FROM Highschooler", "source_tables": ["highschooler"]}
{"sample_id": 863, "db_id": "network_1", "question": "Count the number of high schoolers.", "rationale": ["Identify the goal: Count the number of high schoolers.", "Determine the relevant table: The 'Highschooler' table contains the data about high school students.", "Use the COUNT() function to count the total number of entries in the 'Highschooler' table.", "Construct the SQL query to select the count from the 'Highschooler' table."], "pred_sql": "SELECT COUNT(*) AS total_highschoolers FROM Highschooler;", "gold_sql": "SELECT count(*) FROM Highschooler", "source_tables": ["highschooler"]}
{"sample_id": 864, "db_id": "network_1", "question": "Show the names and grades of each high schooler.", "rationale": ["Identify the table that contains the required information: Highschooler.", "Determine the columns needed: name and grade.", "Construct the SQL SELECT statement to retrieve the specified columns from the Highschooler table."], "pred_sql": "SELECT name, grade FROM Highschooler;", "gold_sql": "SELECT name ,  grade FROM Highschooler", "source_tables": ["highschooler"]}
{"sample_id": 865, "db_id": "network_1", "question": "What are the names and grades for each high schooler?", "rationale": ["Identify the required information: names and grades of high schoolers.", "Determine the table that contains this information, which is the 'Highschooler' table.", "Construct the SQL SELECT statement to retrieve 'name' and 'grade' columns from the 'Highschooler' table."], "pred_sql": "SELECT name, grade FROM Highschooler;", "gold_sql": "SELECT name ,  grade FROM Highschooler", "source_tables": ["highschooler"]}
{"sample_id": 866, "db_id": "network_1", "question": "Show all the grades of the high schoolers.", "rationale": ["Identify the table that contains the information needed, which is the 'Highschooler' table.", "Determine the specific column that holds the grade information, which is the 'grade' column.", "Construct a SQL query to select the 'grade' column from the 'Highschooler' table."], "pred_sql": "SELECT grade FROM Highschooler;", "gold_sql": "SELECT grade FROM Highschooler", "source_tables": ["highschooler"]}
{"sample_id": 867, "db_id": "network_1", "question": "What is the grade of each high schooler?", "rationale": ["Identify the table that contains the information about high schoolers, which is the 'Highschooler' table.", "Determine the columns needed to answer the query, which are 'name' and 'grade'.", "Construct a SQL SELECT statement to retrieve the 'name' and 'grade' columns from the 'Highschooler' table."], "pred_sql": "SELECT name, grade FROM Highschooler;", "gold_sql": "SELECT grade FROM Highschooler", "source_tables": ["highschooler"]}
{"sample_id": 868, "db_id": "network_1", "question": "What grade is Kyle in?", "rationale": ["Identify the table that contains the grade information, which is the 'Highschooler' table.", "Determine the column that holds the grade information, which is 'grade'.", "Identify the condition needed to find the specific student, which is the name 'Kyle'.", "Construct the SQL query to select the grade from the 'Highschooler' table where the name matches 'Kyle'."], "pred_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle';", "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  'Kyle'", "source_tables": ["highschooler"]}
{"sample_id": 869, "db_id": "network_1", "question": "Return the grade for the high schooler named Kyle.", "rationale": ["Identify the table that contains the information needed, which is the 'Highschooler' table.", "Determine the specific column to retrieve, which is 'grade'.", "Specify the condition to filter the results, which is the name of the high schooler, 'Kyle'.", "Construct the SQL query using the SELECT statement to get the 'grade' from the 'Highschooler' table where the 'name' matches 'Kyle'."], "pred_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle';", "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  'Kyle'", "source_tables": ["highschooler"]}
{"sample_id": 870, "db_id": "network_1", "question": "Show the names of all high schoolers in grade 10.", "rationale": ["Identify the table that contains the information needed: Highschooler.", "Determine the relevant column for the names of the students: 'name'.", "Identify the condition to filter the students: they must be in grade 10.", "Construct the SQL query to select the names from the Highschooler table where the grade is '10'."], "pred_sql": "SELECT name FROM Highschooler WHERE grade = '10';", "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10", "source_tables": ["highschooler"]}
{"sample_id": 871, "db_id": "network_1", "question": "What are the names of all high schoolers in grade 10?", "rationale": ["Identify the table that contains the information about high school students, which is the 'Highschooler' table.", "Determine the column that contains the names of the students, which is the 'name' column.", "Identify the column that indicates the grade level of the students, which is the 'grade' column.", "Formulate a SQL query to select the 'name' column from the 'Highschooler' table where the 'grade' is equal to '10'."], "pred_sql": "SELECT name FROM Highschooler WHERE grade = '10';", "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10", "source_tables": ["highschooler"]}
{"sample_id": 872, "db_id": "network_1", "question": "Show the ID of the high schooler named Kyle.", "rationale": ["Identify the table that contains the information about high schoolers, which is the 'Highschooler' table.", "Determine the column that contains the names of the high schoolers, which is the 'name' column.", "We need to filter the results to find the high schooler named 'Kyle'.", "Construct the SQL query to select the 'ID' column from the 'Highschooler' table where the 'name' is 'Kyle'."], "pred_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle';", "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  'Kyle'", "source_tables": ["highschooler"]}
{"sample_id": 873, "db_id": "network_1", "question": "What is Kyle's id?", "rationale": ["Identify the table that contains the information about students, which is the 'Highschooler' table.", "Determine the column that holds the unique identifier for each student, which is the 'ID' column.", "The user is asking for the ID of a specific student named 'Kyle'.", "Construct a SQL query that selects the 'ID' from the 'Highschooler' table where the 'name' is 'Kyle'."], "pred_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle';", "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  'Kyle'", "source_tables": ["highschooler"]}
{"sample_id": 874, "db_id": "network_1", "question": "How many high schoolers are there in grade 9 or 10?", "rationale": ["Identify the relevant table: Highschooler contains the information about students and their grades.", "Determine the condition for filtering: We need to count students in grade 9 or 10.", "Use the COUNT() function to count the number of students that meet the criteria.", "Construct the SQL query to select the count from the Highschooler table where the grade is either '9' or '10'."], "pred_sql": "SELECT COUNT(*) AS total_students FROM Highschooler WHERE grade IN ('9', '10');", "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "source_tables": ["highschooler"]}
{"sample_id": 875, "db_id": "network_1", "question": "Count the number of high schoolers in grades 9 or 10.", "rationale": ["Identify the table that contains the relevant data: Highschooler table.", "Determine the column that indicates the grade of the students: the 'grade' column.", "Specify the grades we are interested in: 9 and 10.", "Use the COUNT() function to count the number of students that meet the criteria.", "Construct the SQL query to select the count of students from the Highschooler table where the grade is either 9 or 10."], "pred_sql": "SELECT COUNT(*) AS number_of_students FROM Highschooler WHERE grade IN ('9', '10');", "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "source_tables": ["highschooler"]}
{"sample_id": 876, "db_id": "network_1", "question": "Show the number of high schoolers for each grade.", "rationale": ["Identify the table that contains the relevant data: the 'Highschooler' table contains the 'grade' column and the unique identifiers for students.", "To count the number of students in each grade, we need to use the COUNT() function in SQL.", "We will group the results by the 'grade' column to get the count of students for each grade level.", "The final SQL query will select the 'grade' and the count of students, grouping by 'grade' to aggregate the results."], "pred_sql": "SELECT grade, COUNT(*) AS number_of_students FROM Highschooler GROUP BY grade;", "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "source_tables": ["highschooler"]}
{"sample_id": 877, "db_id": "network_1", "question": "How many high schoolers are in each grade?", "rationale": ["Identify the table that contains the relevant data: the 'Highschooler' table holds information about students and their grades.", "To find out how many students are in each grade, we need to count the number of students grouped by their grade level.", "Use the COUNT() function to count the number of students for each grade.", "Group the results by the 'grade' column to get the count for each distinct grade level."], "pred_sql": "SELECT grade, COUNT(*) AS number_of_students FROM Highschooler GROUP BY grade;", "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "source_tables": ["highschooler"]}
{"sample_id": 878, "db_id": "network_1", "question": "Which grade has the most high schoolers?", "rationale": ["Identify the relevant table: The 'Highschooler' table contains the information about students and their grades.", "Determine the required information: We need to count the number of students in each grade.", "Use the COUNT() function to count students grouped by their grade.", "Group the results by the 'grade' column to aggregate the counts for each grade.", "Order the results in descending order based on the count of students to find the grade with the most students.", "Limit the results to 1 to get only the grade with the highest count."], "pred_sql": "SELECT grade, COUNT(*) as student_count FROM Highschooler GROUP BY grade ORDER BY student_count DESC LIMIT 1;", "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler"]}
{"sample_id": 879, "db_id": "network_1", "question": "Return the grade that has the greatest number of high schoolers.", "rationale": ["We need to find the grade with the greatest number of high schoolers.", "To do this, we will use the COUNT function to count the number of students in each grade.", "We will group the results by the 'grade' column to get the count for each grade.", "Next, we will order the results in descending order based on the count of students.", "Finally, we will limit the results to just one entry to get the grade with the highest count."], "pred_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler"]}
{"sample_id": 880, "db_id": "network_1", "question": "Show me all grades that have at least 4 students.", "rationale": ["Identify the relevant table: The 'Highschooler' table contains the 'grade' column and the 'ID' column which we need to count students.", "We need to group the results by 'grade' to count how many students are in each grade.", "Use the COUNT function to count the number of students (using 'ID') in each grade.", "Apply the HAVING clause to filter the groups to only include those with 4 or more students."], "pred_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;", "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "source_tables": ["highschooler"]}
{"sample_id": 881, "db_id": "network_1", "question": "Which grades have 4 or more high schoolers?", "rationale": ["Identify the relevant table: Highschooler, which contains the grade information.", "We need to group the results by the 'grade' column to count the number of students in each grade.", "Use the COUNT function to count the number of students (using the ID column) in each grade.", "Apply the HAVING clause to filter the groups where the count of students is 4 or more."], "pred_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;", "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "source_tables": ["highschooler"]}
{"sample_id": 882, "db_id": "network_1", "question": "Show the student IDs and numbers of friends corresponding to each.", "rationale": ["We need to retrieve the student IDs and the count of their friends.", "The 'Friend' table contains the relationships between students and their friends, where 'student_id' is the identifier for the student and 'friend_id' is the identifier for their friends.", "To count the number of friends for each student, we can use the COUNT() function in SQL.", "We will group the results by 'student_id' to get the count of friends for each student."], "pred_sql": "SELECT student_id, COUNT(friend_id) AS number_of_friends FROM Friend GROUP BY student_id;", "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "source_tables": ["friend"]}
{"sample_id": 883, "db_id": "network_1", "question": "How many friends does each student have?", "rationale": ["Identify the tables involved: We need to count friends, so we will use the 'Friend' table to get the friend relationships and the 'Highschooler' table to get student names.", "We need to count the number of friends for each student. This requires a COUNT function on the 'friend_id' from the 'Friend' table.", "To associate each student with their friends, we will perform a LEFT JOIN between the 'Highschooler' table and the 'Friend' table on the student ID.", "We will group the results by student ID and name to ensure we get a count of friends for each individual student."], "pred_sql": "SELECT H.name, COUNT(F.friend_id) AS friend_count\nFROM Highschooler H\nLEFT JOIN Friend F ON H.ID = F.student_id\nGROUP BY H.ID, H.name;", "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "source_tables": ["friend"]}
{"sample_id": 884, "db_id": "network_1", "question": "Show the names of high school students and their corresponding number of friends.", "rationale": ["We need to retrieve the names of high school students and the count of their friends.", "The names are stored in the 'Highschooler' table under the 'name' column.", "The number of friends for each student can be found in the 'Friend' table, where each entry corresponds to a friendship.", "To count the number of friends for each student, we will use a LEFT JOIN between the 'Highschooler' table and the 'Friend' table on the student ID.", "We will use the COUNT function to count the number of friends for each student.", "Finally, we will group the results by the student's ID and name to ensure we get the correct count for each student."], "pred_sql": "SELECT h.name, COUNT(f.friend_id) AS number_of_friends\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name;", "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["friend", "highschooler"]}
{"sample_id": 885, "db_id": "network_1", "question": "What are the names of the high schoolers and how many friends does each have?", "rationale": ["Identify the tables involved: Highschooler and Friend.", "We need to retrieve the names of high schoolers, which is in the Highschooler table.", "We also need to count the number of friends each high schooler has, which requires joining the Friend table.", "Use a LEFT JOIN to include all high schoolers even if they have no friends (to count as 0).", "Count the number of friend_id entries for each student_id to get the number of friends.", "Group the results by the high schooler's ID to ensure we get a count per student."], "pred_sql": "SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count \nFROM Highschooler \nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID;", "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["friend", "highschooler"]}
{"sample_id": 886, "db_id": "network_1", "question": "What is the name of the high schooler who has the greatest number of friends?", "rationale": ["Identify the table that contains the names of high schoolers, which is the 'Highschooler' table.", "Identify the table that contains the friendship relationships, which is the 'Friend' table.", "To find the high schooler with the greatest number of friends, we need to join the 'Highschooler' table with the 'Friend' table on the student ID.", "We will group the results by the high schooler's ID to count the number of friends each student has.", "We will order the results by the count of friends in descending order to get the student with the most friends at the top.", "Finally, we will limit the results to 1 to get only the name of the high schooler with the greatest number of friends."], "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1;", "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["friend", "highschooler"]}
{"sample_id": 887, "db_id": "network_1", "question": "Return the name of the high school student with the most friends.", "rationale": ["We need to find the high school student with the most friends.", "To do this, we will join the Highschooler table with the Friend table on the student ID.", "We will group the results by the student ID to count the number of friends each student has.", "We will order the results in descending order based on the count of friends.", "Finally, we will limit the results to only the top student, which will give us the student with the most friends."], "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1;", "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["friend", "highschooler"]}
{"sample_id": 888, "db_id": "network_1", "question": "Show the names of high schoolers who have at least 3 friends.", "rationale": ["We need to find high schoolers who have at least 3 friends.", "To do this, we will join the Highschooler table with the Friend table on the student ID.", "We will group the results by the high schooler's ID to aggregate the number of friends each student has.", "Using the COUNT function, we will count the number of friends for each student.", "Finally, we will use the HAVING clause to filter the results to only include students with 3 or more friends."], "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3;", "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "source_tables": ["friend", "highschooler"]}
{"sample_id": 889, "db_id": "network_1", "question": "What are the names of high schoolers who have 3 or more friends?", "rationale": ["Identify the relevant tables: Highschooler and Friend.", "We need to find high schoolers with 3 or more friends, so we will join the Highschooler table with the Friend table on the student ID.", "We will group the results by the high schooler's ID to count the number of friends each student has.", "We will use the HAVING clause to filter the groups to only include those with 3 or more friends.", "Finally, we will select the names of the high schoolers that meet this criterion."], "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3;", "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "source_tables": ["friend", "highschooler"]}
{"sample_id": 890, "db_id": "network_1", "question": "Show the names of all of the high schooler Kyle's friends.", "rationale": ["Identify the main entity of the query, which is 'Kyle' and his friends.", "To find Kyle's friends, we need to look at the 'Friend' table where 'student_id' matches Kyle's ID.", "We need to join the 'Highschooler' table to get the names of the friends, using the 'friend_id' from the 'Friend' table.", "First, we need to find Kyle's ID using a subquery that selects the ID from the 'Highschooler' table where the name is 'Kyle'.", "Then, we join the 'Highschooler' table with the 'Friend' table on the condition that the 'friend_id' in the 'Friend' table matches the 'ID' in the 'Highschooler' table.", "Finally, we select the names of the friends from the 'Highschooler' table."], "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id WHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle'", "source_tables": ["friend", "highschooler"]}
{"sample_id": 891, "db_id": "network_1", "question": "Return the names of friends of the high school student Kyle.", "rationale": ["Identify the tables involved: We need to get the names of friends, so we will use the 'Friend' and 'Highschooler' tables.", "Determine the relationship: The 'Friend' table contains 'student_id' and 'friend_id', where 'friend_id' corresponds to the 'ID' in the 'Highschooler' table.", "Filter for the specific student: We need to find friends of the student named 'Kyle'. We can do this by first finding Kyle's ID from the 'Highschooler' table.", "Join the tables: We will join the 'Friend' table with the 'Highschooler' table on the condition that 'friend_id' in 'Friend' matches 'ID' in 'Highschooler'.", "Select the names: Finally, we will select the 'name' from the 'Highschooler' table where the 'student_id' in the 'Friend' table matches Kyle's ID."], "pred_sql": "SELECT H.name FROM Friend F JOIN Highschooler H ON F.friend_id = H.ID WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle'", "source_tables": ["friend", "highschooler"]}
{"sample_id": 892, "db_id": "network_1", "question": "How many friends does the high school student Kyle have?", "rationale": ["Identify the student 'Kyle' in the Highschooler table to get his unique ID.", "Use the unique ID of 'Kyle' to count the number of friends in the Friend table where the student_id matches Kyle's ID."], "pred_sql": "SELECT COUNT(friend_id) AS friend_count FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["friend", "highschooler"]}
{"sample_id": 893, "db_id": "network_1", "question": "Count the number of friends Kyle has.", "rationale": ["Identify the student named 'Kyle' in the Highschooler table to get their unique ID.", "Use the unique ID of Kyle to count the number of entries in the Friend table where 'student_id' matches Kyle's ID."], "pred_sql": "SELECT COUNT(*) AS friend_count FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["friend", "highschooler"]}
{"sample_id": 894, "db_id": "network_1", "question": "Show ids of all students who do not have any friends.", "rationale": ["Identify the table that contains student IDs, which is the 'Highschooler' table.", "We need to find students who do not have any friends, which means their IDs should not appear in the 'Friend' table.", "The 'Friend' table has a column 'student_id' that lists all students who have friends.", "We can use a subquery to select all 'student_id' values from the 'Friend' table.", "The main query will select IDs from the 'Highschooler' table where the ID is not in the list of 'student_id' values from the 'Friend' table."], "pred_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "source_tables": ["friend", "highschooler"]}
{"sample_id": 895, "db_id": "network_1", "question": "What are the ids of high school students who do not have friends?", "rationale": ["Identify the main requirement: We need the IDs of high school students who do not have friends.", "To find students without friends, we can use a subquery to get all student IDs that are present in the Friend table as 'student_id'.", "The main query will select IDs from the Highschooler table where the ID is not in the list of IDs obtained from the Friend table.", "The final SQL query combines these elements to retrieve the desired result."], "pred_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "source_tables": ["friend", "highschooler"]}
{"sample_id": 896, "db_id": "network_1", "question": "Show names of all high school students who do not have any friends.", "rationale": ["Identify the table that contains the names of high school students, which is the 'Highschooler' table.", "To find students without friends, we need to check which students do not appear in the 'Friend' table.", "The 'Friend' table has a column 'student_id' that lists students who have friends.", "We can use a subquery to select all 'student_id's from the 'Friend' table.", "The main query will select names from the 'Highschooler' table where the 'ID' is not in the list of 'student_id's from the 'Friend' table."], "pred_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "source_tables": ["friend", "highschooler"]}
{"sample_id": 897, "db_id": "network_1", "question": "What are the names of students who have no friends?", "rationale": ["Identify the main requirement: we need the names of students who have no friends.", "To find students with no friends, we need to look at the 'Friend' table, specifically the 'student_id' column, which contains the IDs of students who have friends.", "We will select the names from the 'Highschooler' table where the student's ID is not present in the list of 'student_id' from the 'Friend' table.", "The SQL query will use a subquery to find all student IDs that are in the 'Friend' table and filter out those from the 'Highschooler' table."], "pred_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "source_tables": ["friend", "highschooler"]}
{"sample_id": 898, "db_id": "network_1", "question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "rationale": ["We need to find high schoolers who have friends and are liked by someone else.", "To find high schoolers with friends, we will join the Highschooler table with the Friend table on the student_id.", "To find high schoolers who are liked by someone, we will join the Highschooler table with the Likes table on the liked_id.", "We will use DISTINCT to ensure that we only get unique IDs of high schoolers who meet both criteria."], "pred_sql": "SELECT DISTINCT H.ID \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nJOIN Likes L ON H.ID = L.liked_id;", "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "source_tables": ["friend", "likes"]}
{"sample_id": 899, "db_id": "network_1", "question": "What are the ids of students who both have friends and are liked?", "rationale": ["Identify the tables involved: Highschooler, Friend, and Likes.", "We need to find students who have friends, which means we will use the Friend table to get student_ids.", "We also need to find students who are liked, which means we will use the Likes table to get student_ids.", "To find students who both have friends and are liked, we will perform an inner join between the Highschooler table and the Friend table on student_id, and then join the Likes table on the same student_id.", "We will select the distinct IDs from the Highschooler table to ensure we do not have duplicate entries."], "pred_sql": "SELECT DISTINCT H.ID FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.student_id;", "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "source_tables": ["friend", "likes"]}
{"sample_id": 900, "db_id": "network_1", "question": "Show name of all students who have some friends and also are liked by someone else.", "rationale": ["We need to find students who have friends, which means we need to look at the Friend table.", "To find students who are liked by someone else, we will look at the Likes table.", "We will join the Highschooler table with the Friend table to get students who have friends.", "Next, we will join the result with the Likes table to ensure these students are also liked by someone.", "Finally, we will select the distinct names of these students to avoid duplicates."], "pred_sql": "SELECT DISTINCT H.name \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nJOIN Likes L ON H.ID = L.liked_id;", "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "source_tables": ["friend", "highschooler", "likes"]}
{"sample_id": 901, "db_id": "network_1", "question": "What are the names of high schoolers who both have friends and are liked?", "rationale": ["Identify the tables involved: Highschooler, Friend, and Likes.", "We need to find high schoolers who have friends, which means we will join the Highschooler table with the Friend table on the student_id.", "Next, we need to ensure these high schoolers are also liked, so we will join the result with the Likes table on the student_id.", "We select the distinct names of the high schoolers from the resulting joined tables to avoid duplicates."], "pred_sql": "SELECT DISTINCT h.name \nFROM Highschooler h \nJOIN Friend f ON h.ID = f.student_id \nJOIN Likes l ON h.ID = l.student_id;", "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "source_tables": ["friend", "highschooler", "likes"]}
{"sample_id": 902, "db_id": "network_1", "question": "Count the number of likes for each student id.", "rationale": ["Identify the table that contains the information about likes, which is the 'Likes' table.", "To count the number of likes for each student, we need to group the results by 'student_id'.", "Use the COUNT() function to count the occurrences of 'liked_id' for each 'student_id'.", "Construct the SQL query to select 'student_id' and the count of likes, grouping by 'student_id'."], "pred_sql": "SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;", "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "source_tables": ["likes"]}
{"sample_id": 903, "db_id": "network_1", "question": "How many likes correspond to each student id?", "rationale": ["Identify the relevant table: The Likes table contains the information about which student likes whom.", "Determine the required output: We need to count the number of likes for each student.", "Use the COUNT() function to count the number of liked_id entries for each student_id.", "Group the results by student_id to get the count of likes for each student."], "pred_sql": "SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;", "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "source_tables": ["likes"]}
{"sample_id": 904, "db_id": "network_1", "question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "rationale": ["Identify the relevant tables: Highschooler and Likes.", "We need to show the names of high schoolers, which are in the Highschooler table.", "We also need to count the number of likes for each high schooler, which is represented in the Likes table.", "To get the names and the count of likes, we will perform a JOIN operation between Highschooler and Likes on the student ID.", "We will use COUNT() to count the number of likes for each student.", "Finally, we will group the results by the student's name to get the count of likes for each individual."], "pred_sql": "SELECT h.name, COUNT(l.liked_id) AS number_of_likes \nFROM Highschooler h \nJOIN Likes l ON h.ID = l.student_id \nGROUP BY h.name;", "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["highschooler", "likes"]}
{"sample_id": 905, "db_id": "network_1", "question": "What are the names of high schoolers who have likes, and how many likes does each have?", "rationale": ["Identify the relevant tables: Highschooler and Likes.", "We need to get the names of high schoolers, which are in the Highschooler table under the 'name' column.", "We also need to count the number of likes each high schooler has, which is represented in the Likes table.", "To get the count of likes, we will use the COUNT() function on the 'liked_id' column from the Likes table.", "We need to join the Highschooler table with the Likes table on the student ID to correlate students with their likes.", "We will group the results by the student ID to ensure we get a count of likes for each student."], "pred_sql": "SELECT h.name, COUNT(l.liked_id) AS like_count \nFROM Highschooler h \nJOIN Likes l ON h.ID = l.student_id \nGROUP BY h.ID;", "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["highschooler", "likes"]}
{"sample_id": 906, "db_id": "network_1", "question": "What is the name of the high schooler who has the greatest number of likes?", "rationale": ["Identify the table that contains the names of the high schoolers, which is the 'Highschooler' table.", "Determine that we need to find the student with the greatest number of likes, which is tracked in the 'Likes' table.", "To find the student with the most likes, we will group the 'Likes' table by 'student_id' and count the number of 'liked_id' for each student.", "We will order the results by the count of likes in descending order to get the student with the most likes at the top.", "We will limit the results to 1 to get only the top student.", "Finally, we will select the name of the student from the 'Highschooler' table using the ID of the student with the most likes."], "pred_sql": "SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(liked_id) DESC LIMIT 1)", "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "likes"]}
{"sample_id": 907, "db_id": "network_1", "question": "Give the name of the student with the most likes.", "rationale": ["Identify the table that contains the student names, which is the 'Highschooler' table.", "We need to find the student with the most likes, so we will look at the 'Likes' table.", "In the 'Likes' table, we will group the records by 'student_id' and count the number of 'liked_id' for each student to determine how many likes each student has.", "We will order the results by the count of likes in descending order to get the student with the most likes at the top.", "We will limit the results to 1 to get only the top student.", "Finally, we will select the name of the student from the 'Highschooler' table using the ID of the student with the most likes."], "pred_sql": "SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(liked_id) DESC LIMIT 1)", "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "likes"]}
{"sample_id": 908, "db_id": "network_1", "question": "Show the names of students who have at least 2 likes.", "rationale": ["Identify the relevant tables: Highschooler and Likes.", "We need to find students who have at least 2 likes, so we will join the Highschooler table with the Likes table on the student ID.", "We will group the results by the student ID to count the number of likes each student has.", "Using the HAVING clause, we will filter the groups to include only those with a count of likes greater than or equal to 2.", "Finally, we will select the names of the students from the Highschooler table."], "pred_sql": "SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2;", "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "likes"]}
{"sample_id": 909, "db_id": "network_1", "question": "What are the names of students who have 2 or more likes?", "rationale": ["Identify the relevant tables: Highschooler and Likes.", "We need to find students who have 2 or more likes, so we will join the Highschooler table with the Likes table on the student ID.", "We will group the results by the student ID to count the number of likes each student has.", "Using the HAVING clause, we will filter the groups to include only those with a count of likes greater than or equal to 2.", "Finally, we will select the names of those students from the Highschooler table."], "pred_sql": "SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2;", "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "likes"]}
{"sample_id": 910, "db_id": "network_1", "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "rationale": ["Identify the relevant table: We need to retrieve student names, which are in the Highschooler table.", "Filter students by grade: We need to select students whose grade is higher than 5. This is done using a WHERE clause.", "Count friends: We need to ensure that the students have at least 2 friends. This requires a JOIN with the Friend table and a GROUP BY clause to count the number of friends for each student.", "Use HAVING clause: After grouping by student ID, we use the HAVING clause to filter groups that have a count of friends greater than or equal to 2."], "pred_sql": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.grade > '5' GROUP BY H.ID HAVING COUNT(F.friend_id) >= 2;", "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["friend", "highschooler"]}
{"sample_id": 911, "db_id": "network_1", "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "rationale": ["Identify the relevant table: We need to get names from the Highschooler table.", "Filter by grade: We need to select high schoolers with a grade greater than 5.", "Join tables: We need to join the Highschooler table with the Friend table to access friendship data.", "Group by student: Since we want to count the number of friends, we need to group the results by student ID.", "Count friends: We will use the COUNT function to count the number of friends each student has.", "Filter by friend count: We need to ensure that we only include students who have 2 or more friends using the HAVING clause."], "pred_sql": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.grade > '5' GROUP BY H.ID HAVING COUNT(F.friend_id) >= 2;", "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["friend", "highschooler"]}
{"sample_id": 912, "db_id": "network_1", "question": "How many likes does Kyle have?", "rationale": ["Identify the student named 'Kyle' in the Highschooler table to get their ID.", "Use the ID of Kyle to count how many entries exist in the Likes table where Kyle is the liked_id.", "The COUNT function will provide the total number of likes Kyle has."], "pred_sql": "SELECT COUNT(*) AS like_count FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["highschooler", "likes"]}
{"sample_id": 913, "db_id": "network_1", "question": "Return the number of likes that the high schooler named Kyle has.", "rationale": ["Identify the table that contains the likes information, which is the 'Likes' table.", "To find the number of likes for a specific student, we need to count the entries in the 'Likes' table where the 'student_id' matches the ID of the student named Kyle.", "We need to retrieve Kyle's ID from the 'Highschooler' table using a subquery that selects the ID where the name is 'Kyle'.", "Finally, we will count the number of likes associated with Kyle's ID in the 'Likes' table."], "pred_sql": "SELECT COUNT(*) AS like_count FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["highschooler", "likes"]}
{"sample_id": 914, "db_id": "network_1", "question": "Find the average grade of all students who have some friends.", "rationale": ["Identify the requirement to find the average grade of students who have friends.", "To find students with friends, we need to look at the 'Friend' table, specifically the 'student_id' column.", "We will use a subquery to select all 'student_id's from the 'Friend' table.", "Next, we will use this subquery to filter the 'Highschooler' table to get only those students who have friends.", "Finally, we will calculate the average of the 'grade' column for these filtered students using the AVG() function."], "pred_sql": "SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)", "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}
{"sample_id": 915, "db_id": "network_1", "question": "What is the average grade of students who have friends?", "rationale": ["Identify the relevant table: We need to work with the 'Highschooler' table to get the grades of students.", "Determine the condition: We are interested in students who have friends, which is indicated by the 'Friend' table.", "Use a subquery: We will use a subquery to find all unique student IDs from the 'Friend' table, which indicates they have friends.", "Calculate the average: We will use the AVG function to calculate the average grade of the students identified in the subquery.", "Handle grade values: Since grades are stored as text, we will convert them to numbers for accurate averaging using a CASE statement."], "pred_sql": "SELECT AVG(CASE grade WHEN '9' THEN 9 WHEN '10' THEN 10 WHEN '11' THEN 11 WHEN '12' THEN 12 END) AS average_grade FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)", "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}
{"sample_id": 916, "db_id": "network_1", "question": "Find the minimum grade of students who have no friends.", "rationale": ["Identify the requirement: We need to find the minimum grade of students who have no friends.", "To find students with no friends, we can use a subquery that selects all student IDs from the Friend table.", "We will then select from the Highschooler table where the student ID is not in the list of IDs returned by the subquery.", "Finally, we will use the MIN() function to get the minimum grade from the filtered list of students."], "pred_sql": "SELECT MIN(grade) AS minimum_grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}
{"sample_id": 917, "db_id": "network_1", "question": "What is the lowest grade of students who do not have any friends?", "rationale": ["Identify the requirement: We need to find the lowest grade of students who do not have any friends.", "Determine the relevant tables: The 'Highschooler' table contains student grades, and the 'Friend' table contains friendships.", "To find students without friends, we can use a subquery to select all student IDs from the 'Friend' table.", "We will then filter the 'Highschooler' table to include only those students whose IDs are not in the list of IDs from the 'Friend' table.", "Finally, we will use the MIN() function to find the lowest grade among the filtered students."], "pred_sql": "SELECT MIN(grade) AS lowest_grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}
{"sample_id": 918, "db_id": "dog_kennels", "question": "Which states have both owners and professionals living there?", "rationale": ["Identify the tables that contain the relevant information: Owners and Professionals.", "Determine the common attribute to join these tables, which is the 'state' column.", "Use a JOIN operation to combine the Owners and Professionals tables based on the state.", "Select distinct states from the result to ensure each state is listed only once."], "pred_sql": "SELECT DISTINCT Owners.state\nFROM Owners\nJOIN Professionals ON Owners.state = Professionals.state;", "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "source_tables": ["professionals", "owners"]}
{"sample_id": 919, "db_id": "dog_kennels", "question": "Find the states where both owners and professionals live.", "rationale": ["Identify the tables that contain the information needed: Owners and Professionals.", "Determine the relevant column for states in both tables: Owners.state and Professionals.state.", "Use the SELECT statement to retrieve distinct states from both tables.", "Since we want states where both owners and professionals live, we can use the INTERSECT operator to find common states between the two SELECT queries."], "pred_sql": "SELECT DISTINCT Owners.state FROM Owners INTERSECT SELECT DISTINCT Professionals.state FROM Professionals;", "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "source_tables": ["professionals", "owners"]}
{"sample_id": 920, "db_id": "dog_kennels", "question": "What is the average age of the dogs who have gone through any treatments?", "rationale": ["Identify the relevant tables: Dogs and Treatments.", "Determine the relationship between the tables: Dogs have treatments linked by dog_id.", "Select the age of the dogs from the Dogs table.", "Use the AVG() function to calculate the average age of the dogs that have undergone treatments."], "pred_sql": "SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;", "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "source_tables": ["dogs", "treatments"]}
{"sample_id": 921, "db_id": "dog_kennels", "question": "Find the average age of the dogs who went through treatments.", "rationale": ["Identify the relevant tables: Dogs and Treatments.", "Determine the relationship between the tables: Dogs are linked to Treatments through the dog_id.", "Select the age of the dogs from the Dogs table.", "Use the AVG() function to calculate the average age of the dogs that have undergone treatments."], "pred_sql": "SELECT AVG(D.age) AS average_age FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id;", "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "source_tables": ["dogs", "treatments"]}
{"sample_id": 922, "db_id": "dog_kennels", "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "rationale": ["Identify the Professionals table to retrieve the required information about professionals.", "We need to select the professional_id, last_name, and cell_number from the Professionals table.", "We need to filter professionals who live in the state of Indiana or have done more than 2 treatments.", "To find professionals who have done more than 2 treatments, we can use a subquery that counts the number of treatments per professional and filters those with a count greater than 2.", "We will use a LEFT JOIN between the Professionals table and the Treatments table to connect professionals with their treatments.", "The final query will combine the conditions using an OR statement to meet either of the criteria."], "pred_sql": "SELECT DISTINCT p.professional_id, p.last_name, p.cell_number \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE p.state = 'Indiana' \nOR p.professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(treatment_id) > 2\n);", "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "source_tables": ["professionals", "treatments"]}
{"sample_id": 923, "db_id": "dog_kennels", "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "rationale": ["Identify the columns needed: professional_id, last_name, and cell_number from the Professionals table.", "Determine the conditions: professionals who live in Indiana or have performed more than two treatments.", "For the first condition, filter the Professionals table by the state column.", "For the second condition, create a subquery that counts the number of treatments per professional and filters those with more than two treatments.", "Combine both conditions using an OR operator in the WHERE clause."], "pred_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2);", "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "source_tables": ["professionals", "treatments"]}
{"sample_id": 924, "db_id": "dog_kennels", "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "rationale": ["Identify the relevant tables: Dogs and Treatments.", "We need to find dogs that have treatment costs associated with them, so we will join the Dogs table with the Treatments table on the dog_id.", "We want to group the results by each dog to calculate the total treatment cost for each dog.", "Use the SUM function to calculate the total treatment cost for each dog.", "Use the HAVING clause to filter the results to only include dogs whose total treatment cost is less than or equal to 1000.", "Select the dog names from the Dogs table for the final output."], "pred_sql": "SELECT Dogs.name FROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nGROUP BY Dogs.dog_id \nHAVING SUM(Treatments.cost_of_treatment) <= 1000;", "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "source_tables": ["dogs", "treatments"]}
{"sample_id": 925, "db_id": "dog_kennels", "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "rationale": ["Identify the relevant tables: Dogs, Treatments, and Owners.", "We need to find the names of dogs, so we will select the 'name' column from the Dogs table.", "To determine the total treatment cost for each dog, we will join the Dogs table with the Treatments table on 'dog_id'.", "We also need to link the Dogs table with the Owners table to ensure we are considering the correct owners for each dog.", "We will group the results by 'dog_id' to aggregate the treatment costs for each dog.", "Finally, we will use the HAVING clause to filter out dogs where the total treatment cost exceeds 1000."], "pred_sql": "SELECT Dogs.name \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nJOIN Owners ON Dogs.owner_id = Owners.owner_id \nGROUP BY Dogs.dog_id \nHAVING SUM(Treatments.cost_of_treatment) <= 1000;", "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "source_tables": ["dogs", "treatments"]}
{"sample_id": 926, "db_id": "dog_kennels", "question": "Which first names are used for professionals or owners but are not used as dog names?", "rationale": ["Identify the first names from both Owners and Professionals tables.", "Combine the first names from both tables using UNION to ensure uniqueness.", "Select distinct first names from the combined result that are not present in the Dogs table's name column."], "pred_sql": "SELECT DISTINCT first_name FROM (SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals) AS combined_names WHERE first_name NOT IN (SELECT name FROM Dogs);", "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "source_tables": ["professionals", "owners", "dogs"]}
{"sample_id": 927, "db_id": "dog_kennels", "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "rationale": ["Identify the columns needed: We need the 'first_name' from both the Owners and Professionals tables, and the 'name' from the Dogs table.", "Use a UNION to combine the first names from Owners and Professionals into a single list.", "Use a subquery to select all dog names from the Dogs table.", "Filter the combined list of first names to exclude any names that appear in the Dogs table using a NOT IN clause."], "pred_sql": "SELECT DISTINCT first_name FROM (SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals) AS Names WHERE first_name NOT IN (SELECT name FROM Dogs);", "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "source_tables": ["professionals", "owners", "dogs"]}
{"sample_id": 928, "db_id": "dog_kennels", "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "rationale": ["Identify the relevant table: Professionals and Treatments.", "We need to find professionals who did not operate any treatment on dogs, which means we need to look for professionals that do not have any corresponding entries in the Treatments table.", "Use a LEFT JOIN to combine the Professionals table with the Treatments table on the professional_id field.", "Filter the results to include only those professionals where the treatment_id from the Treatments table is NULL, indicating no treatments were recorded for them.", "Select the required fields: professional_id, role_code, and email_address from the Professionals table."], "pred_sql": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address \nFROM Professionals \nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.treatment_id IS NULL;", "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}
{"sample_id": 929, "db_id": "dog_kennels", "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "rationale": ["Identify the columns needed: professional_id, role_code, and email_address from the Professionals table.", "We need to find professionals who did not perform any treatments on dogs.", "To do this, we will use a subquery to select all distinct professional_ids from the Treatments table.", "The main query will select from the Professionals table where the professional_id is not in the list of professional_ids returned by the subquery."], "pred_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)", "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}
{"sample_id": 930, "db_id": "dog_kennels", "question": "Which owner owns the most dogs? List the owner id, first name and last name.", "rationale": ["Identify the relevant tables: Owners and Dogs.", "We need to find the owner who owns the most dogs, so we will join the Owners table with the Dogs table on the owner_id.", "We will group the results by owner_id, first_name, and last_name to count the number of dogs each owner has.", "We will use the COUNT function to count the number of dogs for each owner.", "To find the owner with the most dogs, we will order the results in descending order based on the count of dogs.", "Finally, we will limit the results to 1 to get only the owner with the highest count."], "pred_sql": "SELECT Owners.owner_id, Owners.first_name, Owners.last_name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nGROUP BY Owners.owner_id, Owners.first_name, Owners.last_name \nORDER BY COUNT(Dogs.dog_id) DESC \nLIMIT 1;", "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["owners", "dogs"]}
{"sample_id": 931, "db_id": "dog_kennels", "question": "Return the owner id, first name and last name of the owner who has the most dogs.", "rationale": ["We need to find the owner who has the most dogs.", "To do this, we will count the number of dogs for each owner by grouping the Dogs table by owner_id.", "We will then order the results by the count of dogs in descending order to get the owner with the most dogs at the top.", "Finally, we will limit the results to just one owner and select their owner_id, first_name, and last_name from the Owners table."], "pred_sql": "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(dog_id) DESC LIMIT 1)", "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["owners", "dogs"]}
{"sample_id": 932, "db_id": "dog_kennels", "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "rationale": ["Identify the relevant tables: Treatments and Professionals.", "We need to find professionals who have administered treatments, so we will join the Treatments table with the Professionals table on the professional_id.", "We want to count the number of treatments each professional has done, so we will use the COUNT() function.", "To ensure we only get professionals with at least two treatments, we will use the HAVING clause with COUNT() >= 2.", "Finally, we will select the professional_id, role_code, and first_name from the Professionals table."], "pred_sql": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name\nFROM Treatments\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id\nGROUP BY Professionals.professional_id\nHAVING COUNT(Treatments.treatment_id) >= 2;", "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}
{"sample_id": 933, "db_id": "dog_kennels", "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "rationale": ["Identify the relevant tables: Professionals and Treatments.", "We need to join these tables on the professional_id to link professionals to the treatments they have performed.", "We want to select the professional_id, role_code, and first_name from the Professionals table.", "To find professionals who have performed two or more treatments, we will group the results by professional_id, role_code, and first_name.", "We will use the HAVING clause to filter the groups to only include those with a count of treatment_id that is 2 or more."], "pred_sql": "SELECT p.professional_id, p.role_code, p.first_name \nFROM Professionals p \nJOIN Treatments t ON p.professional_id = t.professional_id \nGROUP BY p.professional_id, p.role_code, p.first_name \nHAVING COUNT(t.treatment_id) >= 2;", "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}
{"sample_id": 934, "db_id": "dog_kennels", "question": "What is the name of the breed with the most dogs?", "rationale": ["Identify the table that contains breed information, which is the 'Breeds' table.", "We need to find the breed with the most dogs, so we will look at the 'Dogs' table to count the number of dogs per breed.", "We will group the results by 'breed_code' in the 'Dogs' table and count the number of dogs for each breed.", "To find the breed with the most dogs, we will order the counts in descending order and limit the results to 1.", "Finally, we will select the 'breed_name' from the 'Breeds' table where the 'breed_code' matches the breed with the highest count from the previous step."], "pred_sql": "SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)", "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["breeds", "dogs"]}
{"sample_id": 935, "db_id": "dog_kennels", "question": "Which breed do the most dogs have? Give me the breed name.", "rationale": ["Identify the relevant table: We need to find the breed of dogs, so we will focus on the 'Dogs' and 'Breeds' tables.", "Determine the relationship: The 'Dogs' table has a foreign key 'breed_code' that links to the 'Breeds' table.", "Count the number of dogs for each breed: We will use a GROUP BY clause on 'breed_code' in the 'Dogs' table and count the number of occurrences.", "Order the results: We will order the counts in descending order to find the breed with the most dogs.", "Limit the results: We will limit the results to 1 to get the breed with the highest count.", "Select the breed name: Finally, we will select the 'breed_name' from the 'Breeds' table where the 'breed_code' matches the one with the highest count from the previous step."], "pred_sql": "SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)", "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["breeds", "dogs"]}
{"sample_id": 936, "db_id": "dog_kennels", "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "rationale": ["Identify the relevant tables: Owners, Dogs, and Treatments.", "Join the Owners table with the Dogs table on owner_id to link owners to their dogs.", "Join the resulting table with the Treatments table on dog_id to link treatments to the respective dogs.", "Group the results by owner_id and last_name to aggregate treatment costs per owner.", "Use SUM to calculate the total cost of treatments for each owner.", "Order the results in descending order based on the total treatment cost to find the owner who has paid the most.", "Limit the results to 1 to get only the top owner."], "pred_sql": "SELECT Owners.owner_id, Owners.last_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id, Owners.last_name\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["owners", "dogs", "treatments"]}
{"sample_id": 937, "db_id": "dog_kennels", "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "rationale": ["We need to find the owner who spent the most on treatments for their dogs.", "First, we will join the Owners table with the Dogs table using the owner_id to link owners to their dogs.", "Next, we will join the Treatments table to the Dogs table using the dog_id to link treatments to the respective dogs.", "We will then group the results by owner_id and last_name to aggregate the treatment costs for each owner.", "To find the owner who spent the most, we will use the SUM function to calculate the total treatment costs for each owner.", "Finally, we will order the results in descending order based on the total treatment costs and limit the results to 1 to get the owner with the highest spending."], "pred_sql": "SELECT Owners.owner_id, Owners.last_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id, Owners.last_name\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["owners", "dogs", "treatments"]}
{"sample_id": 938, "db_id": "dog_kennels", "question": "What is the description of the treatment type that costs the least money in total?", "rationale": ["Identify the relevant table for treatment types, which is 'Treatment_Types'.", "Identify the relevant table for treatments, which is 'Treatments'.", "We need to find the treatment type that costs the least in total, so we will sum the 'cost_of_treatment' from the 'Treatments' table.", "We will join the 'Treatments' table with the 'Treatment_Types' table on the 'treatment_type_code' to get the description of each treatment type.", "We will group the results by 'treatment_type_code' to aggregate the costs for each treatment type.", "We will order the results by the total cost in ascending order to find the least expensive treatment type.", "Finally, we will limit the results to 1 to get only the treatment type with the lowest total cost."], "pred_sql": "SELECT Treatment_Types.treatment_type_description\nFROM Treatments\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\nGROUP BY Treatments.treatment_type_code\nORDER BY SUM(Treatments.cost_of_treatment) ASC\nLIMIT 1;", "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "source_tables": ["treatment_types", "treatments"]}
{"sample_id": 939, "db_id": "dog_kennels", "question": "Give me the description of the treatment type whose total cost is the lowest.", "rationale": ["Identify the relevant table for treatment types, which is 'Treatment_Types'.", "Identify the relevant table for treatments, which is 'Treatments'.", "We need to find the total cost of each treatment type, so we will use the SUM function on 'cost_of_treatment' from the 'Treatments' table.", "We will join 'Treatments' with 'Treatment_Types' on the treatment type code to get the description of each treatment type.", "Group the results by 'treatment_type_code' to calculate the total cost for each treatment type.", "Order the results by the total cost in ascending order to find the treatment type with the lowest total cost.", "Limit the results to 1 to get only the treatment type with the lowest total cost."], "pred_sql": "SELECT Treatment_Types.treatment_type_description\nFROM Treatments\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\nGROUP BY Treatments.treatment_type_code\nORDER BY SUM(Treatments.cost_of_treatment) ASC\nLIMIT 1;", "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "source_tables": ["treatment_types", "treatments"]}
{"sample_id": 940, "db_id": "dog_kennels", "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "rationale": ["We need to find the owner who has paid the largest amount for their dogs.", "To do this, we will join the Owners table with the Dogs table to link each dog to its owner.", "Next, we will join the Treatments table to get the treatment costs associated with each dog.", "We will group the results by owner_id and zip_code to aggregate the total treatment costs for each owner.", "We will use the SUM function to calculate the total amount paid by each owner.", "Finally, we will order the results in descending order based on the total amount paid and limit the results to 1 to get the owner with the highest total."], "pred_sql": "SELECT Owners.owner_id, Owners.zip_code\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id, Owners.zip_code\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "source_tables": ["owners", "dogs", "treatments"]}
{"sample_id": 941, "db_id": "dog_kennels", "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "rationale": ["We need to find the owner id and zip code of the owner who spent the most money on treatments for their dogs.", "To do this, we will join the Owners table with the Dogs table on the owner_id, and then join the Treatments table on the dog_id.", "We will group the results by owner_id and zip code to aggregate the total spending for each owner.", "We will use the SUM function to calculate the total cost of treatments for each owner.", "Finally, we will order the results in descending order based on the total spending and limit the results to 1 to get the owner who spent the most."], "pred_sql": "SELECT Owners.owner_id, Owners.zip_code\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id, Owners.zip_code\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "source_tables": ["owners", "dogs", "treatments"]}
{"sample_id": 942, "db_id": "dog_kennels", "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "rationale": ["Identify the relevant tables: Professionals and Treatments.", "We need to join these tables on the professional_id to link treatments to professionals.", "We want to count the distinct treatment types for each professional, so we will use COUNT(DISTINCT t.treatment_type_code).", "We will group the results by professional_id to aggregate the treatment counts for each professional.", "Finally, we will filter the results using HAVING to include only those professionals who have done at least two different types of treatments."], "pred_sql": "SELECT p.professional_id, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;", "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}
{"sample_id": 943, "db_id": "dog_kennels", "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "rationale": ["Identify the relevant tables: Professionals and Treatments.", "We need to find professionals who operate two or more types of treatments, so we will join the Professionals table with the Treatments table on the professional_id.", "We will select the professional_id and cell_number from the Professionals table.", "To find professionals who operate two or more types of treatments, we will group the results by professional_id and count the distinct treatment_type_code from the Treatments table.", "We will use the HAVING clause to filter the groups to only include those with a count of distinct treatment types greater than or equal to 2."], "pred_sql": "SELECT p.professional_id, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;", "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}
{"sample_id": 944, "db_id": "dog_kennels", "question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "rationale": ["Identify the required fields: first name and last name of professionals.", "Determine the relevant tables: Professionals and Treatments.", "Establish the relationship between the tables using the professional_id foreign key in Treatments.", "Calculate the average cost of treatment using a subquery: SELECT AVG(cost_of_treatment) FROM Treatments.", "Filter the results to include only those treatments with a cost below the average.", "Use DISTINCT to ensure unique professionals are listed."], "pred_sql": "SELECT DISTINCT Professionals.first_name, Professionals.last_name \nFROM Professionals \nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);", "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "source_tables": ["professionals", "treatments"]}
{"sample_id": 945, "db_id": "dog_kennels", "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "rationale": ["Identify the relevant tables: Treatments and Professionals.", "We need to find professionals who have operated treatments, so we will join the Treatments table with the Professionals table using the professional_id.", "We need to filter the treatments based on their cost being less than the average cost of treatments.", "To find the average cost, we will use a subquery that calculates the average of the cost_of_treatment from the Treatments table.", "Finally, we will select the first names and last names of the professionals who meet the criteria."], "pred_sql": "SELECT DISTINCT Professionals.first_name, Professionals.last_name \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id \nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);", "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "source_tables": ["professionals", "treatments"]}
{"sample_id": 946, "db_id": "dog_kennels", "question": "List the date of each treatment, together with the first name of the professional who operated it.", "rationale": ["Identify the relevant tables: Treatments and Professionals.", "Determine the columns needed: date_of_treatment from Treatments and first_name from Professionals.", "Establish the relationship between the tables: Treatments.professional_id links to Professionals.professional_id.", "Construct the SQL SELECT statement to retrieve the required columns from the joined tables."], "pred_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id;", "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}
{"sample_id": 947, "db_id": "dog_kennels", "question": "What are the date and the operating professional's first name of each treatment?", "rationale": ["Identify the relevant tables: Treatments and Professionals.", "Determine the columns needed: date_of_treatment from Treatments and first_name from Professionals.", "Establish the relationship between the tables using the foreign key: Treatments.professional_id links to Professionals.professional_id.", "Construct the SQL SELECT statement to retrieve the required columns from the joined tables."], "pred_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id;", "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}
{"sample_id": 948, "db_id": "dog_kennels", "question": "List the cost of each treatment and the corresponding treatment type description.", "rationale": ["Identify the relevant tables: Treatments and Treatment_Types.", "Determine the columns needed: cost_of_treatment from Treatments and treatment_type_description from Treatment_Types.", "Establish the relationship between the tables using the foreign key: Treatments.treatment_type_code relates to Treatment_Types.treatment_type_code.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description \nFROM Treatments \nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;", "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "source_tables": ["treatments", "treatment_types"]}
{"sample_id": 949, "db_id": "dog_kennels", "question": "What are the cost and treatment type description of each treatment?", "rationale": ["Identify the relevant tables: Treatments and Treatment_Types.", "Determine the columns needed: cost_of_treatment from Treatments and treatment_type_description from Treatment_Types.", "Establish the relationship between the tables: Treatments.treatment_type_code is a foreign key that links to Treatment_Types.treatment_type_code.", "Construct the SQL query using a JOIN to combine the data from both tables based on the foreign key relationship."], "pred_sql": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;", "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "source_tables": ["treatments", "treatment_types"]}
{"sample_id": 950, "db_id": "dog_kennels", "question": "List each owner's first name, last name, and the size of his for her dog.", "rationale": ["Identify the required columns: owner's first name, last name, and dog's size.", "Determine the tables needed: Owners for owner details, Dogs for dog details, and Sizes for size descriptions.", "Establish relationships between the tables: Owners to Dogs via owner_id, and Dogs to Sizes via size_code.", "Construct the SQL SELECT statement to retrieve the specified columns from the joined tables."], "pred_sql": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nJOIN Sizes ON Dogs.size_code = Sizes.size_code;", "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["owners", "dogs"]}
{"sample_id": 951, "db_id": "dog_kennels", "question": "What are each owner's first name, last name, and the size of their dog?", "rationale": ["Identify the required information: owner's first name, last name, and dog's size.", "Determine the relevant tables: Owners, Dogs, and Sizes.", "Establish the relationships between the tables: Owners are linked to Dogs via owner_id, and Dogs are linked to Sizes via size_code.", "Construct the SQL SELECT statement to retrieve the desired columns from the Owners table and the Sizes table, while joining the Dogs table to connect them."], "pred_sql": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nJOIN Sizes ON Dogs.size_code = Sizes.size_code;", "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["owners", "dogs"]}
{"sample_id": 952, "db_id": "dog_kennels", "question": "List pairs of the owner's first name and the dogs's name.", "rationale": ["Identify the tables needed: Owners and Dogs.", "Determine the columns to select: Owners.first_name and Dogs.name.", "Establish the relationship between the tables: Owners and Dogs are linked by owner_id.", "Construct the SQL query using a JOIN to combine the two tables based on the owner_id."], "pred_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;", "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["owners", "dogs"]}
{"sample_id": 953, "db_id": "dog_kennels", "question": "What are each owner's first name and their dogs's name?", "rationale": ["Identify the tables needed: Owners and Dogs.", "Determine the columns to select: Owners.first_name and Dogs.name.", "Establish the relationship between the tables: Owners and Dogs are linked by owner_id.", "Use a JOIN clause to combine the data from both tables based on the owner_id."], "pred_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;", "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["owners", "dogs"]}
{"sample_id": 954, "db_id": "dog_kennels", "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "rationale": ["Identify the rarest breed by counting the occurrences of each breed in the Dogs table.", "Use a subquery to select the breed_code of the breed that has the least number of dogs associated with it.", "Join the Dogs table with the Breeds table to get the breed information for each dog.", "Join the Treatments table to get the treatment dates associated with each dog.", "Select the names of the dogs and their corresponding treatment dates where the breed matches the rarest breed identified in the subquery."], "pred_sql": "SELECT Dogs.name, Treatments.date_of_treatment \nFROM Dogs \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Breeds.breed_code = (SELECT breed_code \n                           FROM Breeds \n                           GROUP BY breed_code \n                           ORDER BY COUNT(*) ASC \n                           LIMIT 1);", "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "source_tables": ["dogs", "treatments"]}
{"sample_id": 955, "db_id": "dog_kennels", "question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "rationale": ["Identify the relevant tables: Dogs, Breeds, and Treatments are needed to get the dog names and treatment dates.", "Join the Dogs table with the Breeds table to access breed information.", "Join the resulting table with the Treatments table to access treatment dates for each dog.", "To find the rarest breed, we need to count the number of dogs per breed and select the breed with the least count.", "Use a subquery to get the breed_code of the rarest breed by grouping the Dogs table by breed_code, counting the number of dogs, and ordering by count in ascending order, limiting the result to 1.", "Finally, filter the main query to only include dogs of the rarest breed and select their names and treatment dates."], "pred_sql": "SELECT Dogs.name, Treatments.date_of_treatment \nFROM Dogs \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Breeds.breed_code IN (\n    SELECT breed_code \n    FROM Dogs \n    GROUP BY breed_code \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n)", "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "source_tables": ["dogs", "treatments"]}
{"sample_id": 956, "db_id": "dog_kennels", "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "rationale": ["Identify the relevant tables: Owners and Dogs.", "Determine the columns needed: Owners.first_name and Dogs.name.", "Establish the relationship between Owners and Dogs using the foreign key (Owners.owner_id = Dogs.owner_id).", "Filter the results to include only those owners who live in Virginia (Owners.state = 'Virginia').", "Construct the SQL SELECT statement to retrieve the specified columns from the joined tables with the appropriate WHERE clause."], "pred_sql": "SELECT Owners.first_name, Dogs.name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Owners.state = 'Virginia';", "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "source_tables": ["owners", "dogs"]}
{"sample_id": 957, "db_id": "dog_kennels", "question": "Find the first names of owners living in Virginia and the names of dogs they own.", "rationale": ["Identify the tables needed: Owners and Dogs.", "Determine the columns to select: Owners.first_name and Dogs.name.", "Establish the relationship between Owners and Dogs using the foreign key: Owners.owner_id = Dogs.owner_id.", "Filter the results to include only those owners who live in Virginia by adding a WHERE clause: Owners.state = 'Virginia'.", "Construct the SQL query using SELECT, JOIN, and WHERE clauses."], "pred_sql": "SELECT Owners.first_name, Dogs.name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Owners.state = 'Virginia';", "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "source_tables": ["owners", "dogs"]}
{"sample_id": 958, "db_id": "dog_kennels", "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "rationale": ["Identify the relevant tables: Dogs and Treatments.", "Determine the columns needed: date_arrived and date_departed from Dogs.", "Establish the relationship between Dogs and Treatments using the dog_id foreign key.", "Construct the SQL query to select the required columns from Dogs, joining with Treatments on the dog_id."], "pred_sql": "SELECT Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id;", "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "source_tables": ["dogs", "treatments"]}
{"sample_id": 959, "db_id": "dog_kennels", "question": "Find the arriving date and the departing date of the dogs that received a treatment.", "rationale": ["Identify the relevant tables: Dogs and Treatments.", "We need the arriving date and departing date of dogs, which are in the Dogs table.", "We need to filter the dogs that have received a treatment, which can be identified by checking the Treatments table.", "Use a subquery to select dog_ids from the Treatments table, and then use that to filter the Dogs table for the desired dates."], "pred_sql": "SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)", "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "source_tables": ["dogs", "treatments"]}
{"sample_id": 960, "db_id": "dog_kennels", "question": "List the last name of the owner owning the youngest dog.", "rationale": ["Identify the relevant tables: Owners and Dogs.", "We need to join these tables on the owner_id to link owners to their dogs.", "To find the youngest dog, we will order the results by the date_of_birth in descending order.", "We will select the last name of the owner associated with the youngest dog.", "Finally, we limit the results to 1 to get only the last name of the owner of the youngest dog."], "pred_sql": "SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1;", "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "source_tables": ["owners", "dogs"]}
{"sample_id": 961, "db_id": "dog_kennels", "question": "Who owns the youngest dog? Give me his or her last name.", "rationale": ["Identify the relevant tables: Owners and Dogs.", "We need to find the youngest dog, which requires us to sort the Dogs table by date_of_birth in descending order.", "Join the Owners table with the Dogs table on the owner_id to link each dog to its owner.", "Select the last_name of the owner of the youngest dog.", "Limit the results to 1 to get only the youngest dog."], "pred_sql": "SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1;", "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "source_tables": ["owners", "dogs"]}
{"sample_id": 962, "db_id": "dog_kennels", "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "rationale": ["Identify the table that contains the required information: Professionals table has the email addresses.", "Determine the condition for filtering: we need professionals who live in either Hawaii or Wisconsin.", "Use the SQL SELECT statement to retrieve the email_address column from the Professionals table.", "Apply the WHERE clause to filter results based on the state, using the IN operator to specify multiple states."], "pred_sql": "SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');", "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "source_tables": ["professionals"]}
{"sample_id": 963, "db_id": "dog_kennels", "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "rationale": ["Identify the table that contains the email addresses of professionals, which is the 'Professionals' table.", "Determine the relevant column for email addresses, which is 'email_address'.", "Identify the condition for filtering professionals based on their state of residence.", "The states of interest are Hawaii and Wisconsin, so we will use the 'IN' clause to filter for these two states."], "pred_sql": "SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');", "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "source_tables": ["professionals"]}
{"sample_id": 964, "db_id": "dog_kennels", "question": "What are the arriving date and the departing date of all the dogs?", "rationale": ["Identify the relevant table: The Dogs table contains information about the dogs, including their arrival and departure dates.", "Determine the required columns: We need the 'date_arrived' and 'date_departed' columns from the Dogs table.", "Construct the SQL query: Use a SELECT statement to retrieve the specified columns from the Dogs table."], "pred_sql": "SELECT date_arrived, date_departed FROM Dogs;", "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs", "source_tables": ["dogs"]}
{"sample_id": 965, "db_id": "dog_kennels", "question": "List the arrival date and the departure date for all the dogs.", "rationale": ["Identify the required information: arrival date and departure date for all dogs.", "Determine the relevant table: the Dogs table contains the necessary columns for arrival and departure dates.", "Construct the SQL SELECT statement to retrieve the 'date_arrived' and 'date_departed' columns from the Dogs table."], "pred_sql": "SELECT date_arrived, date_departed FROM Dogs;", "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs", "source_tables": ["dogs"]}
{"sample_id": 966, "db_id": "dog_kennels", "question": "How many dogs went through any treatments?", "rationale": ["Identify the relevant table: The Treatments table contains records of treatments administered to dogs.", "Determine the goal: We need to count the number of unique dogs that have received treatments.", "Use the COUNT function: To count the unique dog IDs, we will use COUNT(DISTINCT dog_id).", "Construct the SQL query: The query will select the count of distinct dog IDs from the Treatments table."], "pred_sql": "SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated FROM Treatments;", "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "source_tables": ["treatments"]}
{"sample_id": 967, "db_id": "dog_kennels", "question": "Count the number of dogs that went through a treatment.", "rationale": ["Identify the relevant table: The Treatments table contains records of treatments administered to dogs.", "Determine the goal: We need to count the number of unique dogs that have received treatments.", "Use the COUNT function: To count the unique dog IDs, we will use COUNT(DISTINCT dog_id).", "Construct the SQL query: The query will select the count of distinct dog_id from the Treatments table."], "pred_sql": "SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated FROM Treatments;", "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "source_tables": ["treatments"]}
{"sample_id": 968, "db_id": "dog_kennels", "question": "How many professionals have performed any treatment to dogs?", "rationale": ["Identify the relevant table: The query is about professionals who have performed treatments, so we will focus on the Treatments table.", "Determine the required information: We need to count the number of distinct professionals who have administered treatments to dogs.", "Use the COUNT function: To get the number of unique professionals, we will use COUNT(DISTINCT professional_id).", "Construct the SQL query: The final SQL query will select the count of distinct professional IDs from the Treatments table."], "pred_sql": "SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments;", "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "source_tables": ["treatments"]}
{"sample_id": 969, "db_id": "dog_kennels", "question": "Find the number of professionals who have ever treated dogs.", "rationale": ["Identify the relevant table: The query requires information about professionals who have treated dogs, which is found in the Treatments table.", "Determine the required data: We need to count the number of unique professionals who have treated dogs.", "Use the COUNT function: To get the number of unique professionals, we will use COUNT(DISTINCT professional_id).", "Construct the SQL query: The final SQL query will select the count of distinct professional IDs from the Treatments table."], "pred_sql": "SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments;", "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "source_tables": ["treatments"]}
{"sample_id": 970, "db_id": "dog_kennels", "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "rationale": ["Identify the table that contains the information about professionals, which is the 'Professionals' table.", "Determine the columns needed for the output: role, street, city, and state.", "Use the SQL SELECT statement to specify the columns to retrieve: role_code, street, city, and state.", "Apply a WHERE clause to filter the results to only include professionals whose city contains the substring 'West'.", "Use the LIKE operator with wildcards (%) to match any city that includes 'West' in its name."], "pred_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';", "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "source_tables": ["professionals"]}
{"sample_id": 971, "db_id": "dog_kennels", "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "rationale": ["Identify the table that contains the required information: Professionals.", "Determine the columns needed: role_code, street, city, and state.", "Use a WHERE clause to filter professionals based on the city containing the substring 'West'.", "Utilize the LIKE operator with wildcards to match any city that includes 'West'."], "pred_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';", "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "source_tables": ["professionals"]}
{"sample_id": 972, "db_id": "dog_kennels", "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "rationale": ["Identify the table that contains owner information, which is the 'Owners' table.", "Determine the columns needed for the output: first name, last name, and email address.", "Formulate the SQL SELECT statement to retrieve the specified columns from the 'Owners' table.", "Add a WHERE clause to filter the results based on the condition that the state contains the substring 'North'.", "Use the LIKE operator with wildcards to match any state that includes 'North' in its name."], "pred_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';", "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "source_tables": ["owners"]}
{"sample_id": 973, "db_id": "dog_kennels", "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "rationale": ["Identify the table that contains owner information, which is the 'Owners' table.", "Determine the columns needed: first name, last name, and email address.", "Filter the results based on the condition that the state name contains the substring 'North'.", "Use the SQL 'LIKE' operator with wildcards to match any state that includes 'North'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Owners' table with the appropriate WHERE clause."], "pred_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';", "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "source_tables": ["owners"]}
{"sample_id": 974, "db_id": "dog_kennels", "question": "How many dogs have an age below the average?", "rationale": ["Identify the main requirement: count the number of dogs with an age below the average age.", "To find the average age of dogs, use the AVG() function on the age column in the Dogs table.", "Use a subquery to calculate the average age: (SELECT AVG(age) FROM Dogs).", "Count the number of dogs whose age is less than the average age using COUNT(*) and a WHERE clause.", "Combine these elements into a single SQL query."], "pred_sql": "SELECT COUNT(*) AS count_below_average_age FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);", "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "source_tables": ["dogs"]}
{"sample_id": 975, "db_id": "dog_kennels", "question": "Count the number of dogs of an age below the average.", "rationale": ["Identify the main task: counting the number of dogs below the average age.", "Determine the relevant table: the 'Dogs' table contains the age information.", "Calculate the average age of dogs using the AVG() function in a subquery.", "Use a WHERE clause to filter dogs whose age is less than the calculated average age.", "Count the number of dogs that meet the criteria using COUNT()."], "pred_sql": "SELECT COUNT(*) AS number_of_dogs_below_average_age FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);", "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "source_tables": ["dogs"]}
{"sample_id": 976, "db_id": "dog_kennels", "question": "How much does the most recent treatment cost?", "rationale": ["Identify the relevant table: Treatments, as it contains the cost of treatments.", "We need to find the most recent treatment, which can be determined by ordering the treatments by date_of_treatment in descending order.", "To get only the most recent treatment, we will limit the results to 1 using LIMIT 1.", "Select the cost_of_treatment from the result of the ordered query."], "pred_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;", "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "source_tables": ["treatments"]}
{"sample_id": 977, "db_id": "dog_kennels", "question": "Show me the cost of the most recently performed treatment.", "rationale": ["Identify the relevant table: Treatments, which contains the cost of treatments and the date they were administered.", "To find the most recently performed treatment, we need to order the records by the date_of_treatment in descending order.", "We only need the cost of the treatment, so we will select the cost_of_treatment column.", "To get only the most recent treatment, we will limit the results to 1."], "pred_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;", "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "source_tables": ["treatments"]}
{"sample_id": 978, "db_id": "dog_kennels", "question": "How many dogs have not gone through any treatment?", "rationale": ["Identify the Dogs table as it contains the information about the dogs.", "We need to count the number of dogs that have not gone through any treatment.", "To find dogs that have not received treatment, we can use a subquery to select all dog_ids from the Treatments table.", "The main query will count all dogs whose dog_id is not in the list of dog_ids returned by the subquery.", "The final SQL query will select the count of untreated dogs."], "pred_sql": "SELECT COUNT(*) AS untreated_dogs_count FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments);", "gold_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "source_tables": ["dogs", "treatments"]}
{"sample_id": 979, "db_id": "dog_kennels", "question": "Tell me the number of dogs that have not received any treatment .", "rationale": ["Identify the Dogs table as it contains the information about the dogs.", "We need to count the number of dogs that have not received any treatment.", "To find dogs without treatment, we can use a subquery to select dog_ids from the Treatments table.", "The main query will count all dogs whose dog_id is not in the list of dog_ids from the Treatments table."], "pred_sql": "SELECT COUNT(*) AS number_of_dogs_without_treatment FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments);", "gold_sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "source_tables": ["dogs", "treatments"]}
{"sample_id": 980, "db_id": "dog_kennels", "question": "How many owners temporarily do not have any dogs?", "rationale": ["Identify the Owners table as it contains the information about dog owners.", "To find owners who do not have any dogs, we need to check which owner_ids are not present in the Dogs table.", "Use a subquery to select all owner_ids from the Dogs table.", "Count the number of owner_ids in the Owners table that are not in the list of owner_ids from the Dogs table."], "pred_sql": "SELECT COUNT(*) AS owner_count FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)", "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "source_tables": ["owners", "dogs"]}
{"sample_id": 981, "db_id": "dog_kennels", "question": "Find the number of owners who do not own any dogs at this moment.", "rationale": ["Identify the Owners table as it contains the information about dog owners.", "To find owners who do not own any dogs, we need to check which owner_ids in the Owners table are not present in the Dogs table.", "Use a subquery to select distinct owner_ids from the Dogs table.", "Count the number of owner_ids in the Owners table that are not in the list of owner_ids from the Dogs table."], "pred_sql": "SELECT COUNT(*) AS number_of_owners_without_dogs FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)", "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "source_tables": ["owners", "dogs"]}
{"sample_id": 982, "db_id": "dog_kennels", "question": "How many professionals did not operate any treatment on dogs?", "rationale": ["Identify the Professionals table to get the list of all professionals.", "We need to find professionals who did not operate any treatment on dogs, which means we need to check against the Treatments table.", "Use a subquery to select distinct professional_ids from the Treatments table to find those who have operated treatments.", "Use the NOT IN clause to filter out professionals who are present in the Treatments subquery from the Professionals table.", "Count the remaining professionals who have not operated any treatments."], "pred_sql": "SELECT COUNT(*) AS professionals_without_treatments\nFROM Professionals\nWHERE professional_id NOT IN (\n    SELECT DISTINCT professional_id\n    FROM Treatments\n);", "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "source_tables": ["professionals", "treatments"]}
{"sample_id": 983, "db_id": "dog_kennels", "question": "Find the number of professionals who have not treated any dogs.", "rationale": ["Identify the Professionals table as the source of data for professionals.", "We need to count the number of professionals who have not treated any dogs.", "To find professionals who have not treated any dogs, we can use a subquery to get the list of professional_ids from the Treatments table.", "We will use the NOT IN clause to filter out those professionals who are present in the Treatments table from the Professionals table.", "Finally, we will use COUNT(*) to get the total number of professionals who have not treated any dogs."], "pred_sql": "SELECT COUNT(*) AS number_of_professionals_without_treatments \nFROM Professionals \nWHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);", "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "source_tables": ["professionals", "treatments"]}
{"sample_id": 984, "db_id": "dog_kennels", "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "rationale": ["Identify the relevant table: The Dogs table contains information about the dogs, including their names, ages, weights, and abandonment status.", "Select the required columns: We need to retrieve the dog's name, age, and weight, which correspond to the columns 'name', 'age', and 'weight' in the Dogs table.", "Filter the results: We need to filter the dogs that have been abandoned, which is indicated by the column 'abandoned_yn' being equal to 1.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;", "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}
{"sample_id": 985, "db_id": "dog_kennels", "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "rationale": ["Identify the relevant table: The query is asking for information about dogs, so we will use the 'Dogs' table.", "Determine the required columns: The user wants the dog name, age, and weight, which correspond to the 'name', 'age', and 'weight' columns in the 'Dogs' table.", "Specify the condition: The query specifies that we only want dogs that were abandoned, which is indicated by 'abandoned_yn' being equal to 1.", "Construct the SQL SELECT statement: We will select the specified columns from the 'Dogs' table where the condition is met."], "pred_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;", "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}
{"sample_id": 986, "db_id": "dog_kennels", "question": "What is the average age of all the dogs?", "rationale": ["Identify the table that contains the relevant data: the 'Dogs' table holds information about the dogs, including their ages.", "Determine the specific column needed for the calculation: the 'age' column in the 'Dogs' table contains the ages of the dogs.", "Use the AVG() function to calculate the average of the ages in the 'age' column.", "Construct the SQL query to select the average age from the 'Dogs' table."], "pred_sql": "SELECT AVG(age) AS average_age FROM Dogs;", "gold_sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}
{"sample_id": 987, "db_id": "dog_kennels", "question": "Compute the average age of all the dogs.", "rationale": ["Identify the requirement: Compute the average age of all dogs.", "Determine the relevant table: The 'Dogs' table contains the 'age' column.", "Use the AVG() function to calculate the average of the 'age' column.", "Construct the SQL query to select the average age from the Dogs table."], "pred_sql": "SELECT AVG(age) AS average_age FROM Dogs;", "gold_sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}
{"sample_id": 988, "db_id": "dog_kennels", "question": "What is the age of the oldest dog?", "rationale": ["Identify the relevant table: The Dogs table contains the age of the dogs.", "Determine the required information: We need to find the maximum age to identify the oldest dog.", "Construct the SQL query: Use the MAX() function to get the maximum age from the age column in the Dogs table."], "pred_sql": "SELECT MAX(age) AS oldest_dog_age FROM Dogs;", "gold_sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}
{"sample_id": 989, "db_id": "dog_kennels", "question": "Tell me the age of the oldest dog.", "rationale": ["Identify the relevant table: The Dogs table contains the age of the dogs.", "Determine the required information: We need to find the maximum age to identify the oldest dog.", "Construct the SQL query: Use the MAX() function to get the maximum age from the age column in the Dogs table."], "pred_sql": "SELECT MAX(age) AS oldest_dog_age FROM Dogs;", "gold_sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}
{"sample_id": 990, "db_id": "dog_kennels", "question": "How much does each charge type costs? List both charge type and amount.", "rationale": ["Identify the relevant table: The query asks for charge types and their amounts, which are found in the Charges table.", "Select the required columns: We need to select 'charge_type' and 'charge_amount' from the Charges table.", "Construct the SQL query: Use the SELECT statement to retrieve the specified columns from the Charges table."], "pred_sql": "SELECT charge_type, charge_amount FROM Charges;", "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges", "source_tables": ["charges"]}
{"sample_id": 991, "db_id": "dog_kennels", "question": "List each charge type and its amount.", "rationale": ["Identify the relevant table: Charges.", "Determine the columns needed: charge_type and charge_amount.", "Construct the SQL query to select these columns from the Charges table."], "pred_sql": "SELECT charge_type, charge_amount FROM Charges;", "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges", "source_tables": ["charges"]}
{"sample_id": 992, "db_id": "dog_kennels", "question": "How much does the most expensive charge type costs?", "rationale": ["Identify the table that contains charge information, which is the Charges table.", "Determine the relevant column that holds the cost information, which is 'charge_amount'.", "Use the MAX() function to find the highest value in the 'charge_amount' column.", "Construct the SQL query to select the maximum charge amount from the Charges table."], "pred_sql": "SELECT MAX(charge_amount) AS max_charge FROM Charges;", "gold_sql": "SELECT max(charge_amount) FROM Charges", "source_tables": ["charges"]}
{"sample_id": 993, "db_id": "dog_kennels", "question": "What is the charge amount of the most expensive charge type?", "rationale": ["Identify the table that contains charge information, which is the Charges table.", "Determine the relevant column that holds the charge amount, which is 'charge_amount'.", "To find the most expensive charge, we need to sort the charge amounts in descending order.", "Use the ORDER BY clause to sort the results by 'charge_amount' in descending order.", "Limit the results to only one entry using LIMIT 1 to get the highest charge amount."], "pred_sql": "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;", "gold_sql": "SELECT max(charge_amount) FROM Charges", "source_tables": ["charges"]}
{"sample_id": 994, "db_id": "dog_kennels", "question": "List the email, cell phone and home phone of all the professionals.", "rationale": ["Identify the table that contains the required information: Professionals.", "Determine the specific columns needed: email_address, cell_number, and home_phone.", "Construct the SQL SELECT statement to retrieve these columns from the Professionals table."], "pred_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;", "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "source_tables": ["professionals"]}
{"sample_id": 995, "db_id": "dog_kennels", "question": "What are the email, cell phone and home phone of each professional?", "rationale": ["Identify the table that contains the required information: Professionals.", "Determine the specific columns needed: email_address, cell_number, and home_phone.", "Construct the SQL SELECT statement to retrieve these columns from the Professionals table."], "pred_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;", "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "source_tables": ["professionals"]}
{"sample_id": 996, "db_id": "dog_kennels", "question": "What are all the possible breed type and size type combinations?", "rationale": ["Identify the tables needed: Breeds and Sizes.", "Determine the columns to select: breed_name from Breeds and size_description from Sizes.", "Use a CROSS JOIN to get all combinations of breed types and size types, as there is no direct relationship between these two tables."], "pred_sql": "SELECT Breeds.breed_name, Sizes.size_description \nFROM Breeds, Sizes;", "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "source_tables": ["dogs"]}
{"sample_id": 997, "db_id": "dog_kennels", "question": "Find the distinct breed type and size type combinations for dogs.", "rationale": ["Identify the tables needed: Dogs, Breeds, and Sizes are required to get breed and size information.", "Use JOIN to connect the Dogs table with the Breeds table on the breed_code column to get breed names.", "Use JOIN to connect the Dogs table with the Sizes table on the size_code column to get size descriptions.", "Select distinct combinations of breed names and size descriptions to avoid duplicates."], "pred_sql": "SELECT DISTINCT Breeds.breed_name, Sizes.size_description \nFROM Dogs \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nJOIN Sizes ON Dogs.size_code = Sizes.size_code;", "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "source_tables": ["dogs"]}
{"sample_id": 998, "db_id": "dog_kennels", "question": "List the first name of all the professionals along with the description of the treatment they have done.", "rationale": ["Identify the tables needed: Professionals, Treatments, and Treatment_Types.", "Select the columns required: first name from Professionals and treatment description from Treatment_Types.", "Establish the relationships between the tables using JOINs: Treatments links to Professionals via professional_id and to Treatment_Types via treatment_type_code.", "Construct the SQL query to retrieve the desired information."], "pred_sql": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id \nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;", "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "source_tables": ["professionals", "treatments", "treatment_types"]}
{"sample_id": 999, "db_id": "dog_kennels", "question": "What are each professional's first name and description of the treatment they have performed?", "rationale": ["Identify the required information: professional's first name and treatment description.", "Determine the relevant tables: Professionals and Treatments, and Treatment_Types for the treatment description.", "Establish the relationships between the tables: Treatments links to Professionals via professional_id and to Treatment_Types via treatment_type_code.", "Construct the SQL SELECT statement to retrieve the first name from Professionals and the treatment description from Treatment_Types.", "Use JOIN clauses to connect the tables based on their foreign key relationships."], "pred_sql": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id \nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;", "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "source_tables": ["professionals", "treatments", "treatment_types"]}
