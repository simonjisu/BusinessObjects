{"sample_id": 6000, "db_id": "game_1", "question": "How many different types of sports do we offer?", "rationale": ["Identify the table that contains information about sports, which is the SportsInfo table.", "To find out how many different types of sports are offered, we need to count the distinct entries in the SportName column.", "Use the COUNT function along with DISTINCT to ensure we only count unique sport names.", "Construct the SQL query to select the count of distinct sport names from the SportsInfo table."], "pred_sql": "SELECT COUNT(DISTINCT SportName) AS DifferentSports FROM SportsInfo;", "gold_sql": "SELECT count(DISTINCT sportname) FROM Sportsinfo", "source_tables": ["sportsinfo"]}
{"sample_id": 6001, "db_id": "game_1", "question": "How many students play sports?", "rationale": ["Identify the relevant table: SportsInfo contains information about students participating in sports.", "To find out how many students play sports, we need to count the number of unique student IDs (StuID) in the SportsInfo table.", "Use the COUNT() function to count the total number of entries in the SportsInfo table, which represents the number of students who play sports."], "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM SportsInfo;", "gold_sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo", "source_tables": ["sportsinfo"]}
{"sample_id": 6002, "db_id": "game_1", "question": "How many different students are involved in sports?", "rationale": ["Identify the relevant table: SportsInfo contains information about students involved in sports.", "Determine the requirement: We need to count the number of different students, which means we need to count distinct student IDs (StuID).", "Construct the SQL query: Use COUNT(DISTINCT StuID) to count unique student IDs from the SportsInfo table."], "pred_sql": "SELECT COUNT(DISTINCT StuID) AS NumberOfStudents FROM SportsInfo;", "gold_sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo", "source_tables": ["sportsinfo"]}
{"sample_id": 6003, "db_id": "game_1", "question": "List ids for all student who are on scholarship.", "rationale": ["Identify the relevant table: SportsInfo contains information about students participating in sports and their scholarship status.", "Determine the specific column needed: We need the 'StuID' column to list the IDs of students.", "Filter the results: We only want students who are on a scholarship, indicated by the 'OnScholarship' column being 'Yes'.", "Construct the SQL query using SELECT to retrieve the 'StuID' from the SportsInfo table with the specified condition."], "pred_sql": "SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Yes';", "gold_sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", "source_tables": ["sportsinfo"]}
{"sample_id": 6004, "db_id": "game_1", "question": "What are the ids for all sporty students who are on scholarship?", "rationale": ["Identify the relevant table: SportsInfo contains information about students participating in sports.", "Determine the condition: We need to find students who are on a sports scholarship, which is indicated by the 'OnScholarship' column.", "Select the appropriate column: We want the 'StuID' of these students.", "Construct the SQL query: Use SELECT to get 'StuID' from SportsInfo where 'OnScholarship' is 'Yes'."], "pred_sql": "SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Yes';", "gold_sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", "source_tables": ["sportsinfo"]}
{"sample_id": 6005, "db_id": "game_1", "question": "Show last names for all student who are on scholarship.", "rationale": ["Identify the relevant tables: We need to retrieve last names of students who are on scholarship, which involves the 'Student' and 'SportsInfo' tables.", "Determine the relationship: The 'StuID' in 'SportsInfo' links to 'StuID' in 'Student', allowing us to join these tables.", "Select the required columns: We need the 'LName' column from the 'Student' table.", "Apply the condition: We need to filter the results to include only those students who are on a sports scholarship, indicated by 'OnScholarship' being 'Yes'.", "Construct the SQL query: Using an INNER JOIN to combine the two tables and applying the WHERE clause for the scholarship condition."], "pred_sql": "SELECT LName FROM Student INNER JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE SportsInfo.OnScholarship = 'Yes';", "gold_sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6006, "db_id": "game_1", "question": "What are the last names for all scholarship students?", "rationale": ["Identify the relevant tables: We need to get last names of students who are on a sports scholarship, so we will use the 'Student' and 'SportsInfo' tables.", "Determine the relationship: The 'StuID' in 'SportsInfo' links to 'StuID' in 'Student', allowing us to join these tables.", "Select the required columns: We need the last names, which are in the 'Student' table under the column 'LName'.", "Filter the results: We only want students who are on a scholarship, indicated by the 'OnScholarship' column in 'SportsInfo'.", "Construct the SQL query: Using a JOIN to combine the two tables and applying the WHERE clause to filter for scholarship students."], "pred_sql": "SELECT Student.LName FROM Student JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE SportsInfo.OnScholarship = 'Yes';", "gold_sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6007, "db_id": "game_1", "question": "How many games are played for all students?", "rationale": ["Identify the relevant table: The query is asking about the number of games played by students, which is found in the SportsInfo table.", "Determine the relevant column: The column that contains the number of games played is 'GamesPlayed'.", "Use the SUM function: To get the total number of games played by all students, we need to sum the values in the 'GamesPlayed' column.", "Construct the SQL query: The SQL query will select the sum of 'GamesPlayed' from the SportsInfo table."], "pred_sql": "SELECT SUM(GamesPlayed) AS TotalGamesPlayed FROM SportsInfo;", "gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo", "source_tables": ["sportsinfo"]}
{"sample_id": 6008, "db_id": "game_1", "question": "What is the total number of games played?", "rationale": ["Identify the relevant table: The question asks about the total number of games played, which relates to the 'GamesPlayed' column in the 'SportsInfo' table.", "Determine the aggregation needed: Since we want the total number of games played, we will use the SUM() function to aggregate the 'GamesPlayed' values.", "Construct the SQL query: We will select the sum of 'GamesPlayed' from the 'SportsInfo' table and alias it as 'TotalGamesPlayed'."], "pred_sql": "SELECT SUM(GamesPlayed) AS TotalGamesPlayed FROM SportsInfo;", "gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo", "source_tables": ["sportsinfo"]}
{"sample_id": 6009, "db_id": "game_1", "question": "How many games are played for all football games by students on scholarship?", "rationale": ["Identify the relevant tables: SportsInfo for sports participation and Student for student details.", "We need to filter for students who are on a sports scholarship, which is indicated by the 'OnScholarship' column in the SportsInfo table.", "We are specifically interested in the sport 'Football', so we will filter the results based on the 'SportName' column.", "To get the total number of games played for football by students on scholarship, we will use the SUM function on the 'GamesPlayed' column in the SportsInfo table.", "We will join the SportsInfo table with the Student table to ensure we have access to the necessary student information, although in this case, we are primarily focused on the SportsInfo table for the required data."], "pred_sql": "SELECT SUM(SportsInfo.GamesPlayed) AS TotalGamesPlayed\nFROM SportsInfo\nJOIN Student ON SportsInfo.StuID = Student.StuID\nWHERE SportsInfo.SportName = 'Football' AND SportsInfo.OnScholarship = 'Yes';", "gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  'Football' AND onscholarship  =  'Y'", "source_tables": ["sportsinfo"]}
{"sample_id": 6010, "db_id": "game_1", "question": "What is the total number of all football games played by scholarship students?", "rationale": ["Identify the relevant tables: SportsInfo (for sports participation) and Student (for scholarship status).", "We need to filter for the sport 'Football' in the SportsInfo table.", "We also need to filter for students who are on a scholarship, which is indicated by the 'OnScholarship' column in the SportsInfo table.", "We will use the SUM function to calculate the total number of games played by these students.", "Join the SportsInfo table with the Student table on the StuID to access the scholarship information.", "Construct the SQL query to select the sum of GamesPlayed where the conditions for football and scholarship are met."], "pred_sql": "SELECT SUM(GamesPlayed) AS TotalFootballGames\nFROM SportsInfo\nJOIN Student ON SportsInfo.StuID = Student.StuID\nWHERE SportName = 'Football' AND OnScholarship = 'Yes';", "gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  'Football' AND onscholarship  =  'Y'", "source_tables": ["sportsinfo"]}
{"sample_id": 6011, "db_id": "game_1", "question": "Show all sport name and the number of students.", "rationale": ["Identify the relevant table: SportsInfo contains the sport names and student identifiers.", "We need to count the number of students for each sport, which requires grouping the results by SportName.", "Use the COUNT function to count the number of unique StuID entries for each sport.", "Construct the SQL query to select SportName and the count of students, grouping by SportName."], "pred_sql": "SELECT SportName, COUNT(StuID) AS NumberOfStudents FROM SportsInfo GROUP BY SportName;", "gold_sql": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname", "source_tables": ["sportsinfo"]}
{"sample_id": 6012, "db_id": "game_1", "question": "How many students play each sport?", "rationale": ["Identify the relevant table: The query is about students and their participation in sports, so we will use the SportsInfo table.", "Determine the required information: We need to count the number of students for each sport, which means we will use the COUNT function.", "Group the results: To get the count of students for each sport, we will use the GROUP BY clause on the SportName column."], "pred_sql": "SELECT SportName, COUNT(StuID) AS NumberOfStudents FROM SportsInfo GROUP BY SportName;", "gold_sql": "SELECT sportname ,  count(*) FROM Sportsinfo GROUP BY sportname", "source_tables": ["sportsinfo"]}
{"sample_id": 6013, "db_id": "game_1", "question": "Show all student IDs with the number of sports and total number of games played", "rationale": ["Identify the required data: We need to show student IDs along with the number of sports they participate in and the total number of games played.", "Determine the tables involved: The 'Student' table contains student IDs, and the 'SportsInfo' table contains information about sports participation and games played.", "Join the tables: We will perform a LEFT JOIN between 'Student' and 'SportsInfo' on the StuID to ensure we get all students even if they don't participate in any sports.", "Count the number of sports: Use COUNT(SportsInfo.SportName) to count the number of different sports each student is involved in.", "Sum the total games played: Use SUM(SportsInfo.GamesPlayed) to get the total number of games played by each student.", "Group the results: Use GROUP BY Student.StuID to aggregate the results for each student."], "pred_sql": "SELECT Student.StuID, COUNT(SportsInfo.SportName) AS NumberOfSports, SUM(SportsInfo.GamesPlayed) AS TotalGamesPlayed\nFROM Student\nLEFT JOIN SportsInfo ON Student.StuID = SportsInfo.StuID\nGROUP BY Student.StuID;", "gold_sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID", "source_tables": ["sportsinfo"]}
{"sample_id": 6014, "db_id": "game_1", "question": "What are the ids of all students along with how many sports and games did they play?", "rationale": ["Identify the required information: We need the student IDs and the counts of sports and games they played.", "Determine the tables involved: We will use the 'Student', 'SportsInfo', and 'Plays_Games' tables.", "Join the tables: Use LEFT JOIN to include all students even if they haven't played any sports or games.", "Count the distinct sports and games: Use COUNT with DISTINCT to ensure we count unique entries for sports and games.", "Group the results by student ID: Use GROUP BY to aggregate the counts for each student."], "pred_sql": "SELECT Student.StuID, COUNT(DISTINCT SportsInfo.SportName) AS SportsCount, COUNT(DISTINCT Plays_Games.GameID) AS GamesCount\nFROM Student\nLEFT JOIN SportsInfo ON Student.StuID = SportsInfo.StuID\nLEFT JOIN Plays_Games ON Student.StuID = Plays_Games.StuID\nGROUP BY Student.StuID;", "gold_sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID", "source_tables": ["sportsinfo"]}
{"sample_id": 6015, "db_id": "game_1", "question": "Show all student IDs with more than total 10 hours per week on all sports played.", "rationale": ["Identify the relevant table: SportsInfo contains the information about students participating in sports and their hours per week.", "We need to find students who have a total of more than 10 hours per week across all sports played.", "To achieve this, we will use the SUM function to aggregate the HoursPerWeek for each student (StuID).", "We will group the results by StuID to ensure we get a total for each student.", "Finally, we will use the HAVING clause to filter the results to only include students whose total hours exceed 10."], "pred_sql": "SELECT StuID FROM SportsInfo GROUP BY StuID HAVING SUM(HoursPerWeek) > 10;", "gold_sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10", "source_tables": ["sportsinfo"]}
{"sample_id": 6016, "db_id": "game_1", "question": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?", "rationale": ["Identify the relevant table: SportsInfo contains information about students participating in sports.", "Determine the condition: We need to find students who worked for more than 10 hours per week on sports.", "Construct the SQL query: We will select the StuID from the SportsInfo table where the HoursPerWeek is greater than 10."], "pred_sql": "SELECT StuID FROM SportsInfo WHERE HoursPerWeek > 10;", "gold_sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10", "source_tables": ["sportsinfo"]}
{"sample_id": 6017, "db_id": "game_1", "question": "What is the first name and last name of the student who have most number of sports?", "rationale": ["Identify the relevant tables: We need to retrieve student names from the Student table and the number of games played from the SportsInfo table.", "Determine the criteria: We want to find the student with the most number of games played, which is represented by the 'GamesPlayed' column in the SportsInfo table.", "Create a subquery: We will create a subquery that selects the 'StuID' from the SportsInfo table, ordering by 'GamesPlayed' in descending order to get the student with the highest number of games played.", "Limit the subquery: We will limit the results of the subquery to 1 to get only the top student.", "Join the results: Finally, we will use the result of the subquery to select the corresponding 'Fname' and 'LName' from the Student table."], "pred_sql": "SELECT Fname, LName FROM Student WHERE StuID IN (SELECT StuID FROM SportsInfo ORDER BY GamesPlayed DESC LIMIT 1)", "gold_sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6018, "db_id": "game_1", "question": "What is the first and last name of the student who played the most sports?", "rationale": ["Identify the relevant tables: We need to get student names from the Student table and sports participation details from the SportsInfo table.", "Determine the criteria: We want to find the student who played the most sports, which is indicated by the 'GamesPlayed' column in the SportsInfo table.", "Create a subquery: We will create a subquery to select the 'StuID' of the student with the maximum 'GamesPlayed'. We will order the results by 'GamesPlayed' in descending order and limit the results to 1 to get the top student.", "Join the results: We will use the 'StuID' from the subquery to select the corresponding 'Fname' and 'LName' from the Student table."], "pred_sql": "SELECT Fname, LName FROM Student WHERE StuID = (SELECT StuID FROM SportsInfo ORDER BY GamesPlayed DESC LIMIT 1)", "gold_sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6019, "db_id": "game_1", "question": "Which sport has most number of students on scholarship?", "rationale": ["Identify the relevant table: SportsInfo contains information about students participating in sports and their scholarship status.", "Filter the records to include only those students who are on a scholarship by using the condition 'OnScholarship = 'Yes'.", "Group the results by SportName to count the number of students for each sport.", "Count the number of students on scholarship for each sport using COUNT(StuID).", "Order the results in descending order based on the count of students to find the sport with the most students on scholarship.", "Limit the results to 1 to get only the sport with the highest number of students on scholarship."], "pred_sql": "SELECT SportName, COUNT(StuID) AS NumberOfStudentsOnScholarship \nFROM SportsInfo \nWHERE OnScholarship = 'Yes' \nGROUP BY SportName \nORDER BY NumberOfStudentsOnScholarship DESC \nLIMIT 1;", "gold_sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["sportsinfo"]}
{"sample_id": 6020, "db_id": "game_1", "question": "What is the sport with the most scholarship students?", "rationale": ["Identify the relevant table: SportsInfo contains information about students participating in sports and their scholarship status.", "Filter the records to include only those students who are on a sports scholarship by using the condition 'OnScholarship = 'Yes'.", "Group the results by 'SportName' to aggregate the data for each sport.", "Count the number of scholarship students for each sport using COUNT(*).", "Order the results in descending order to find the sport with the most scholarship students.", "Limit the results to 1 to get only the sport with the highest count."], "pred_sql": "SELECT SportName FROM SportsInfo WHERE OnScholarship = 'Yes' GROUP BY SportName ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["sportsinfo"]}
{"sample_id": 6021, "db_id": "game_1", "question": "Show student ids who don't have any sports.", "rationale": ["Identify the main requirement: We need to find student IDs of students who do not participate in any sports.", "To achieve this, we can use a subquery to find all student IDs from the SportsInfo table.", "The main query will select student IDs from the Student table where the student ID is not in the list of IDs returned by the subquery.", "The final SQL query combines these elements to filter out students who are involved in sports."], "pred_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM SportsInfo);", "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6022, "db_id": "game_1", "question": "What are the ids of all students who don't play sports?", "rationale": ["Identify the main requirement: We need to find the IDs of students who do not participate in sports.", "To achieve this, we will select the 'StuID' from the 'Student' table.", "We need to exclude those students who are present in the 'SportsInfo' table, which contains the IDs of students who play sports.", "We can use a subquery to get all 'StuID' from the 'SportsInfo' table and use the NOT IN clause to filter out those IDs from the 'Student' table."], "pred_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM SportsInfo);", "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6023, "db_id": "game_1", "question": "Show student ids who are on scholarship and have major 600.", "rationale": ["Identify the relevant tables: SportsInfo for scholarship information and Student for major information.", "We need to select student IDs (StuID) from the SportsInfo table where the OnScholarship column indicates 'Yes'.", "We also need to filter these student IDs based on their major, which is found in the Student table.", "To achieve this, we can use a subquery to select StuIDs from the Student table where Major is '600'.", "Combine the conditions using an IN clause to ensure we only get student IDs that meet both criteria."], "pred_sql": "SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Yes' AND StuID IN (SELECT StuID FROM Student WHERE Major = '600');", "gold_sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6024, "db_id": "game_1", "question": "What are the student ids for those on scholarship in major number 600?", "rationale": ["Identify the relevant table: We need to find students who are on scholarship, which is indicated in the SportsInfo table.", "Determine the condition for the scholarship: We will filter the SportsInfo table for students where OnScholarship is 'Yes'.", "Identify the major condition: We need to filter the Student table for those whose Major is '600'.", "Combine the conditions: We will use a subquery to find the StuIDs from SportsInfo that meet the scholarship condition and then filter the Student table based on the Major and the results of the subquery."], "pred_sql": "SELECT StuID FROM Student WHERE Major = '600' AND StuID IN (SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Yes');", "gold_sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6025, "db_id": "game_1", "question": "Show student ids who are female and play football.", "rationale": ["Identify the relevant tables: We need to access the 'Student' table for student information and the 'SportsInfo' table for sports participation.", "Determine the conditions: We want to filter for female students and those who play football.", "Join the tables: Since we need to correlate students with their sports participation, we will use an INNER JOIN on the 'StuID' column.", "Select the required data: We only need the 'StuID' of the students who meet the criteria."], "pred_sql": "SELECT Student.StuID FROM Student JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE Student.Sex = 'female' AND SportsInfo.SportName = 'football';", "gold_sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  'Football'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6026, "db_id": "game_1", "question": "What are the ids of all female students who play football?", "rationale": ["Identify the relevant tables: We need to access the 'Student' table for student information and the 'SportsInfo' table for sports participation.", "Determine the criteria: We are looking for female students, so we will filter by 'Sex' = 'Female'.", "We also need to find students who play football, so we will filter by 'SportName' = 'Football'.", "To get the ids of the students, we will select 'StuID' from the 'Student' table.", "We need to join the 'Student' table with the 'SportsInfo' table on 'StuID' to combine the information from both tables."], "pred_sql": "SELECT Student.StuID FROM Student JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE Student.Sex = 'Female' AND SportsInfo.SportName = 'Football';", "gold_sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  'Football'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6027, "db_id": "game_1", "question": "Show all male student ids who don't play football.", "rationale": ["Identify the requirement to show male student IDs.", "Filter the Student table for male students by checking the 'Sex' column.", "To find students who do not play football, we need to check the SportsInfo table for any entries with 'Football' in the 'SportName' column.", "Use a subquery to select all StuID from SportsInfo where SportName is 'Football'.", "Use the NOT IN clause to exclude these IDs from the main query that selects male students."], "pred_sql": "SELECT StuID FROM Student WHERE Sex = 'Male' AND StuID NOT IN (SELECT StuID FROM SportsInfo WHERE SportName = 'Football')", "gold_sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  'Football'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6028, "db_id": "game_1", "question": "What are the ids of all male students who do not play football?", "rationale": ["Identify the relevant table: We need to query the 'Student' table to get the ids of male students.", "Filter for male students: We will add a condition to select only those students where the 'Sex' column is 'Male'.", "Identify students who play football: We need to check the 'SportsInfo' table to find students who are involved in football.", "Use a subquery: We will use a subquery to find all 'StuID' values from the 'SportsInfo' table where 'SportName' is 'Football'.", "Combine conditions: We will combine the conditions to select male students whose 'StuID' is not in the list of students who play football."], "pred_sql": "SELECT StuID FROM Student WHERE Sex = 'Male' AND StuID NOT IN (SELECT StuID FROM SportsInfo WHERE SportName = 'Football');", "gold_sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  'Football'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6029, "db_id": "game_1", "question": "Show total hours per week and number of games played for student David Shieber.", "rationale": ["Identify the relevant tables: We need data from the Student table and the SportsInfo table.", "Determine the columns needed: We need the first name (Fname), last name (LName), hours per week (HoursPerWeek), and games played (GamesPlayed).", "Establish the relationship between tables: The Student table and SportsInfo table are linked by the StuID column.", "Construct the SQL SELECT statement: We will select the required columns from the joined tables.", "Add the JOIN clause: We will join the Student table with the SportsInfo table on the StuID column.", "Add the WHERE clause: We will filter the results to only include the student named David Shieber."], "pred_sql": "SELECT S.Fname, S.LName, SI.HoursPerWeek, SI.GamesPlayed \nFROM Student S \nJOIN SportsInfo SI ON S.StuID = SI.StuID \nWHERE S.Fname = 'David' AND S.LName = 'Shieber';", "gold_sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  'David' AND T2.Lname  =  'Shieber'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6030, "db_id": "game_1", "question": "What is the total number of hours per work and number of games played by David Shieber?", "rationale": ["Identify the relevant tables: SportsInfo and Student, since we need information about hours played and games played by a specific student.", "We need to sum the hours per week and games played, so we will use the SUM() function on the respective columns in the SportsInfo table.", "To filter the results for the specific student, we will join the SportsInfo table with the Student table on the StuID column.", "We will apply a WHERE clause to filter for the student with the first name 'David' and last name 'Shieber'.", "Finally, we will select the summed values and give them meaningful aliases for clarity."], "pred_sql": "SELECT SUM(SportsInfo.HoursPerWeek) AS Total_Hours_Per_Week, SUM(SportsInfo.GamesPlayed) AS Total_Games_Played \nFROM SportsInfo \nJOIN Student ON SportsInfo.StuID = Student.StuID \nWHERE Student.Fname = 'David' AND Student.LName = 'Shieber';", "gold_sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  'David' AND T2.Lname  =  'Shieber'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6031, "db_id": "game_1", "question": "Show total hours per week and number of games played for students under 20.", "rationale": ["Identify the relevant tables: We need data from the Student table and the SportsInfo table.", "Determine the columns needed: We need the first name (Fname), last name (LName) from the Student table, and HoursPerWeek and GamesPlayed from the SportsInfo table.", "Establish the relationship between tables: The Student table and SportsInfo table are linked by the StuID column.", "Filter the results: We need to include only students under the age of 20, which requires a WHERE clause to filter based on the Age column."], "pred_sql": "SELECT S.Fname, S.LName, SI.HoursPerWeek, SI.GamesPlayed \nFROM Student S \nJOIN SportsInfo SI ON S.StuID = SI.StuID \nWHERE S.Age < '20';", "gold_sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6032, "db_id": "game_1", "question": "What is the total number of hours per week and number of games played by students under 20?", "rationale": ["Identify the relevant tables: SportsInfo and Student, since we need information about hours per week and games played, as well as the age of students.", "We need to sum the hours per week and the number of games played, so we will use the SUM() function on the respective columns in the SportsInfo table.", "To filter students under 20, we will join the SportsInfo table with the Student table on StuID and apply a WHERE clause to check if the Age is less than 20.", "Since Age is stored as text, we will cast it to an integer for the comparison."], "pred_sql": "SELECT SUM(HoursPerWeek) AS Total_Hours_Per_Week, SUM(GamesPlayed) AS Total_Games_Played \nFROM SportsInfo \nJOIN Student ON SportsInfo.StuID = Student.StuID \nWHERE CAST(Age AS INTEGER) < 20;", "gold_sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6033, "db_id": "game_1", "question": "How many students play video games?", "rationale": ["Identify the relevant table: The 'Plays_Games' table contains information about students who play video games.", "Determine the required information: We need to count the number of distinct students (StuID) who are recorded in the 'Plays_Games' table.", "Construct the SQL query: Use the COUNT function to count distinct StuID values from the 'Plays_Games' table."], "pred_sql": "SELECT COUNT(DISTINCT StuID) AS NumberOfStudentsPlayingGames FROM Plays_Games;", "gold_sql": "SELECT count(DISTINCT StuID) FROM Plays_games", "source_tables": ["plays_games"]}
{"sample_id": 6034, "db_id": "game_1", "question": "How many different students play games?", "rationale": ["Identify the relevant table: The query is about students who play games, so we will use the Plays_Games table.", "Count distinct students: We need to count the unique student identifiers (StuID) in the Plays_Games table to find out how many different students play games.", "Construct the SQL query: Use the COUNT function along with DISTINCT to count unique StuID values."], "pred_sql": "SELECT COUNT(DISTINCT StuID) AS DifferentStudentsPlayingGames FROM Plays_Games;", "gold_sql": "SELECT count(DISTINCT StuID) FROM Plays_games", "source_tables": ["plays_games"]}
{"sample_id": 6035, "db_id": "game_1", "question": "Show ids of students who don't play video game.", "rationale": ["Identify the main requirement: We need to find the IDs of students who do not play any video games.", "To achieve this, we will use a subquery to find all student IDs from the Plays_Games table, which contains records of students who play video games.", "We will then select student IDs from the Student table where the StuID is not in the list of IDs returned by the subquery.", "The final SQL query will use a SELECT statement with a NOT IN clause to filter out students who play video games."], "pred_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Plays_Games);", "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games", "source_tables": ["plays_games", "student"]}
{"sample_id": 6036, "db_id": "game_1", "question": "What are the ids of all students who are not video game players?", "rationale": ["Identify the main requirement: We need to find the IDs of students who are not playing video games.", "To achieve this, we will select the 'StuID' from the 'Student' table.", "We need to exclude those students who are present in the 'Plays_Games' table, which contains the IDs of students who play video games.", "We can use a subquery to select all 'StuID' from the 'Plays_Games' table.", "Finally, we will use the NOT IN clause to filter out those students from the 'Student' table."], "pred_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Plays_Games);", "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games", "source_tables": ["plays_games", "student"]}
{"sample_id": 6037, "db_id": "game_1", "question": "Show ids of students who play video game and play sports.", "rationale": ["Identify the tables involved: We need to find students who play video games and also participate in sports, so we will use the Student, Plays_Games, and SportsInfo tables.", "Determine the relationships: The Plays_Games table links students to video games through the StuID, and the SportsInfo table links students to sports also through the StuID.", "Use JOINs to combine the tables: We will perform INNER JOINs on the Student table with Plays_Games and SportsInfo using the StuID to ensure we only get students who are present in both tables.", "Select the unique student IDs: We want to show the ids of students, so we will select the StuID from the Student table and use DISTINCT to avoid duplicates."], "pred_sql": "SELECT DISTINCT Student.StuID FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID JOIN SportsInfo ON Student.StuID = SportsInfo.StuID;", "gold_sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "source_tables": ["plays_games", "sportsinfo"]}
{"sample_id": 6038, "db_id": "game_1", "question": "What are the ids of all students who played video games and sports?", "rationale": ["Identify the tables involved: Student, Plays_Games, and SportsInfo.", "We need to find students who are present in both Plays_Games and SportsInfo tables.", "Use JOIN to combine the Student table with Plays_Games on StuID to get students who played video games.", "Then, join the result with SportsInfo on StuID to filter those who also participate in sports.", "Select the distinct StuID to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT Student.StuID FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID JOIN SportsInfo ON Student.StuID = SportsInfo.StuID;", "gold_sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "source_tables": ["plays_games", "sportsinfo"]}
{"sample_id": 6039, "db_id": "game_1", "question": "Show all game ids and the number of hours played.", "rationale": ["Identify the relevant table: The query requires information about games and hours played, which is found in the Plays_Games table.", "Select the columns needed: We need to select GameID and the total hours played, so we will include GameID and use the SUM function on Hours_Played.", "Group the results: To get the total hours played for each game, we need to group the results by GameID."], "pred_sql": "SELECT GameID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY GameID;", "gold_sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid", "source_tables": ["plays_games"]}
{"sample_id": 6040, "db_id": "game_1", "question": "What are ids and total number of hours played for each game?", "rationale": ["Identify the relevant table: The query requires information about games and the hours played, which is found in the Plays_Games table.", "Select the columns needed: We need the GameID and the total hours played for each game. The total hours can be calculated using the SUM function on the Hours_Played column.", "Group the results: To get the total hours played for each game, we need to group the results by GameID using the GROUP BY clause."], "pred_sql": "SELECT GameID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY GameID;", "gold_sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid", "source_tables": ["plays_games"]}
{"sample_id": 6041, "db_id": "game_1", "question": "Show all student ids and the number of hours played.", "rationale": ["Identify the relevant table: The 'Plays_Games' table contains the information about students and the hours they have played games.", "Select the required columns: We need 'StuID' to identify the students and the total hours played, which can be calculated using the SUM function on 'Hours_Played'.", "Group the results by 'StuID' to aggregate the hours played for each student."], "pred_sql": "SELECT StuID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY StuID;", "gold_sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid", "source_tables": ["plays_games"]}
{"sample_id": 6042, "db_id": "game_1", "question": "What are the ids of all students and number of hours played?", "rationale": ["Identify the relevant tables: We need data from the 'Student' table for student IDs and the 'Plays_Games' table for hours played.", "We need to select the 'StuID' from the 'Student' table and the total hours played from the 'Plays_Games' table.", "To get the total hours played by each student, we will use the SUM function on 'Hours_Played'.", "We need to join the 'Student' table with the 'Plays_Games' table on the 'StuID' column to link students with their game playing records.", "Finally, we will group the results by 'StuID' to aggregate the hours played for each student."], "pred_sql": "SELECT Student.StuID, SUM(Plays_Games.Hours_Played) AS Total_Hours_Played\nFROM Student\nJOIN Plays_Games ON Student.StuID = Plays_Games.StuID\nGROUP BY Student.StuID;", "gold_sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid", "source_tables": ["plays_games"]}
{"sample_id": 6043, "db_id": "game_1", "question": "Show the game name that has most number of hours played.", "rationale": ["Identify the relevant tables: Video_Games and Plays_Games are needed to get the game names and the hours played.", "Join the Video_Games table with the Plays_Games table on the GameID to associate games with their play hours.", "Group the results by game name to aggregate the total hours played for each game.", "Order the results in descending order based on the total hours played to find the game with the most hours.", "Limit the results to 1 to get only the game with the highest hours played."], "pred_sql": "SELECT G.GName FROM Video_Games G JOIN Plays_Games P ON G.GameID = P.GameID GROUP BY G.GName ORDER BY SUM(P.Hours_Played) DESC LIMIT 1;", "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1", "source_tables": ["plays_games", "video_games"]}
{"sample_id": 6044, "db_id": "game_1", "question": "What is the name of the game that has been played the most?", "rationale": ["Identify the table that contains the game names, which is the Video_Games table.", "Determine the relationship between games and their playtime, which is found in the Plays_Games table.", "To find the game that has been played the most, we need to sum the Hours_Played for each GameID in the Plays_Games table.", "Group the results by GameID to aggregate the total hours played for each game.", "Order the results in descending order based on the total hours played to get the most played game at the top.", "Limit the results to 1 to get only the top game.", "Finally, select the GName from the Video_Games table where the GameID matches the one with the highest total hours played."], "pred_sql": "SELECT GName FROM Video_Games WHERE GameID = (SELECT GameID FROM Plays_Games GROUP BY GameID ORDER BY SUM(Hours_Played) DESC LIMIT 1)", "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1", "source_tables": ["plays_games", "video_games"]}
{"sample_id": 6045, "db_id": "game_1", "question": "Show all game names played by at least 1000 hours.", "rationale": ["Identify the requirement to show all game names played for at least 1000 hours.", "Determine that we need to access the Video_Games table to get the game names.", "Recognize that the Plays_Games table contains the hours played for each game by students.", "Construct a subquery to filter the GameIDs from Plays_Games where Hours_Played is greater than or equal to 1000.", "Use the result of the subquery to filter the Video_Games table to get the corresponding game names."], "pred_sql": "SELECT GName FROM Video_Games WHERE GameID IN (SELECT GameID FROM Plays_Games WHERE Hours_Played >= '1000')", "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000", "source_tables": ["plays_games", "video_games"]}
{"sample_id": 6046, "db_id": "game_1", "question": "What are the names of all the games that have been played for at least 1000 hours?", "rationale": ["Identify the table that contains the game names, which is the Video_Games table.", "We need to find games that have been played for at least 1000 hours, so we will look at the Plays_Games table where the Hours_Played column is greater than or equal to 1000.", "We will use a subquery to get the GameID from the Plays_Games table where the Hours_Played is at least 1000.", "Finally, we will select the GName from the Video_Games table where the GameID matches the results from the subquery."], "pred_sql": "SELECT GName FROM Video_Games WHERE GameID IN (SELECT GameID FROM Plays_Games WHERE Hours_Played >= '1000')", "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000", "source_tables": ["plays_games", "video_games"]}
{"sample_id": 6047, "db_id": "game_1", "question": "Show all game names played by Linda Smith", "rationale": ["Identify the tables involved: We need to retrieve game names, which are in the Video_Games table, and we need to link this with the Plays_Games table to find out which games are played by which students.", "Determine the relationship: The Plays_Games table connects students to the games they play through StuID and GameID. We also need to join the Student table to filter by the specific student, Linda Smith.", "Construct the SQL query: We will select the game names (GName) from the Video_Games table, joining it with Plays_Games on GameID and with Student on StuID. We will filter the results to only include records where the last name is 'Smith' and the first name is 'Linda'."], "pred_sql": "SELECT Video_Games.GName FROM Video_Games JOIN Plays_Games ON Video_Games.GameID = Plays_Games.GameID JOIN Student ON Plays_Games.StuID = Student.StuID WHERE Student.LName = 'Smith' AND Student.Fname = 'Linda';", "gold_sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  'Smith' AND T3.Fname  =  'Linda'", "source_tables": ["plays_games", "student", "video_games"]}
{"sample_id": 6048, "db_id": "game_1", "question": "What are the names of all games played by Linda Smith?", "rationale": ["Identify the tables involved: We need to get game names, so we will use the Video_Games table. We also need to link it to the Plays_Games table to find out which games are played by which students, and finally, we need to access the Student table to filter by the specific student, Linda Smith.", "Determine the relationships: The Plays_Games table connects students to the games they play through StuID and GameID. The Video_Games table provides the names of the games through GameID.", "Construct the SQL query: We will use a SELECT statement to get the game names (GName) from the Video_Games table. We will join the Plays_Games table on GameID and the Student table on StuID to filter for Linda Smith.", "Add the WHERE clause: We need to specify the first name and last name of the student in the WHERE clause to ensure we only get games played by Linda Smith."], "pred_sql": "SELECT Video_Games.GName FROM Video_Games JOIN Plays_Games ON Video_Games.GameID = Plays_Games.GameID JOIN Student ON Plays_Games.StuID = Student.StuID WHERE Student.Fname = 'Linda' AND Student.LName = 'Smith';", "gold_sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  'Smith' AND T3.Fname  =  'Linda'", "source_tables": ["plays_games", "student", "video_games"]}
{"sample_id": 6049, "db_id": "game_1", "question": "Find the last and first name of students who are playing Football or Lacrosse.", "rationale": ["Identify the relevant tables: We need to retrieve student names, so we will use the 'Student' table. Since we are interested in students playing specific sports, we will also use the 'SportsInfo' table.", "Determine the columns to select: We need the last name (LName) and first name (Fname) of the students.", "Establish the relationship between tables: We will join the 'Student' table with the 'SportsInfo' table on the StuID column, which is the unique identifier for students in both tables.", "Filter the results: We need to filter the results to include only those students who are playing either 'Football' or 'Lacrosse'. This can be done using the WHERE clause with the IN operator to specify the sports of interest."], "pred_sql": "SELECT Student.LName, Student.Fname FROM Student JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE SportsInfo.SportName IN ('Football', 'Lacrosse');", "gold_sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  'Football' OR T1.SportName  =  'Lacrosse'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6050, "db_id": "game_1", "question": "What is the first and last name of all students who play Football or Lacrosse?", "rationale": ["Identify the relevant tables: We need to retrieve student names, so we will use the 'Student' table. We also need to filter students based on the sports they play, which is in the 'SportsInfo' table.", "Determine the columns to select: We need the first name (Fname) and last name (LName) of the students.", "Identify the condition for filtering: We want students who play either 'Football' or 'Lacrosse'. This condition will be applied to the 'SportName' column in the 'SportsInfo' table.", "Use a subquery to find the relevant student IDs: We will create a subquery that selects 'StuID' from 'SportsInfo' where 'SportName' is either 'Football' or 'Lacrosse'.", "Combine the main query and the subquery: The main query will select 'Fname' and 'LName' from 'Student' where 'StuID' is in the result set of the subquery."], "pred_sql": "SELECT Fname, LName FROM Student WHERE StuID IN (SELECT StuID FROM SportsInfo WHERE SportName IN ('Football', 'Lacrosse'));", "gold_sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  'Football' OR T1.SportName  =  'Lacrosse'", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6051, "db_id": "game_1", "question": "Find the first name and age of the students who are playing both Football and Lacrosse.", "rationale": ["Identify the required fields: first name and age of students.", "Determine the relevant tables: Student and SportsInfo, since we need student details and their sports participation.", "Join the Student table with the SportsInfo table to access the sports data for each student.", "Since we need students who play both Football and Lacrosse, we will join the SportsInfo table twice (once for each sport).", "Use a WHERE clause to filter the results to only include students who are involved in both sports."], "pred_sql": "SELECT S.Fname, S.Age \nFROM Student S \nJOIN SportsInfo SI1 ON S.StuID = SI1.StuID \nJOIN SportsInfo SI2 ON S.StuID = SI2.StuID \nWHERE SI1.SportName = 'Football' AND SI2.SportName = 'Lacrosse';", "gold_sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  'Football' INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  'Lacrosse')", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6052, "db_id": "game_1", "question": "What are the first names and ages of all students who are playing both Football and Lacrosse?", "rationale": ["Identify the relevant tables: We need to retrieve data from the Student and SportsInfo tables.", "Determine the required fields: We need the first names (Fname) and ages (Age) of the students.", "Establish the relationship: We will join the Student table with the SportsInfo table to get the sports information for each student.", "Filter the results: We need to find students who are playing both Football and Lacrosse. This requires joining the SportsInfo table twice (once for each sport) and applying the appropriate conditions in the WHERE clause."], "pred_sql": "SELECT DISTINCT S.Fname, S.Age \nFROM Student S \nJOIN SportsInfo SI1 ON S.StuID = SI1.StuID \nJOIN SportsInfo SI2 ON S.StuID = SI2.StuID \nWHERE SI1.SportName = 'Football' AND SI2.SportName = 'Lacrosse';", "gold_sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  'Football' INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  'Lacrosse')", "source_tables": ["sportsinfo", "student"]}
{"sample_id": 6053, "db_id": "game_1", "question": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.", "rationale": ["Identify the required fields: last name (LName) and gender (Sex) of students.", "Determine the tables involved: Student, Plays_Games, and Video_Games.", "Students must be playing both specified games, so we need to join the Plays_Games table twice, once for each game.", "Join the Student table with the Plays_Games table to get the students who play games.", "Join the Plays_Games table with the Video_Games table to filter by game names.", "Use a WHERE clause to specify the game names 'Call of Destiny' and 'Works of Widenius'.", "Select distinct last names and genders to avoid duplicates."], "pred_sql": "SELECT DISTINCT S.LName, S.Sex \nFROM Student S \nJOIN Plays_Games PG1 ON S.StuID = PG1.StuID \nJOIN Video_Games VG1 ON PG1.GameID = VG1.GameID \nJOIN Plays_Games PG2 ON S.StuID = PG2.StuID \nJOIN Video_Games VG2 ON PG2.GameID = VG2.GameID \nWHERE VG1.GName = 'Call of Destiny' AND VG2.GName = 'Works of Widenius';", "gold_sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Call of Destiny' INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Works of Widenius')", "source_tables": ["plays_games", "student", "video_games"]}
{"sample_id": 6054, "db_id": "game_1", "question": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?", "rationale": ["Identify the required fields: last name (LName) and gender (Sex) of students.", "Determine the tables involved: Student, Plays_Games, and Video_Games.", "Students who played both games need to be identified, which requires joining the Plays_Games table twice (once for each game).", "Use JOINs to connect the Student table with Plays_Games and Video_Games based on the StuID and GameID.", "Filter the results to include only those students who played 'Call of Destiny' and 'Works of Widenius' using a WHERE clause."], "pred_sql": "SELECT DISTINCT s.LName, s.Sex \nFROM Student s \nJOIN Plays_Games pg1 ON s.StuID = pg1.StuID \nJOIN Video_Games vg1 ON pg1.GameID = vg1.GameID \nJOIN Plays_Games pg2 ON s.StuID = pg2.StuID \nJOIN Video_Games vg2 ON pg2.GameID = vg2.GameID \nWHERE vg1.GName = 'Call of Destiny' AND vg2.GName = 'Works of Widenius';", "gold_sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Call of Destiny' INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Works of Widenius')", "source_tables": ["plays_games", "student", "video_games"]}
{"sample_id": 6055, "db_id": "customers_and_addresses", "question": "Find the name of all customers.", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "Determine the specific column that holds the names of the customers, which is 'customer_name'.", "Construct the SQL query to select the 'customer_name' from the 'Customers' table."], "pred_sql": "SELECT customer_name FROM Customers;", "gold_sql": "SELECT customer_name FROM customers", "source_tables": ["customers"]}
{"sample_id": 6056, "db_id": "customers_and_addresses", "question": "What are the names of all the customers?", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "Determine the specific column that holds the names of the customers, which is 'customer_name'.", "Construct the SQL query to select the 'customer_name' from the 'Customers' table."], "pred_sql": "SELECT customer_name FROM Customers;", "gold_sql": "SELECT customer_name FROM customers", "source_tables": ["customers"]}
{"sample_id": 6057, "db_id": "customers_and_addresses", "question": "How many customers are there?", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "To find the total number of customers, we need to count the entries in the 'Customers' table.", "Use the COUNT() function to get the total number of rows in the 'Customers' table.", "Construct the SQL query to select the count of customers from the 'Customers' table."], "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers;", "gold_sql": "SELECT count(*) FROM customers", "source_tables": ["customers"]}
{"sample_id": 6058, "db_id": "customers_and_addresses", "question": "Return the total number of distinct customers.", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "To find the total number of distinct customers, we need to count unique 'customer_id' values.", "Use the COUNT function along with DISTINCT to ensure we only count unique customer IDs.", "Construct the SQL query to select the count of distinct customer IDs from the Customers table."], "pred_sql": "SELECT COUNT(DISTINCT customer_id) AS total_distinct_customers FROM Customers;", "gold_sql": "SELECT count(*) FROM customers", "source_tables": ["customers"]}
{"sample_id": 6059, "db_id": "customers_and_addresses", "question": "What is the average amount of items ordered in each order?", "rationale": ["Identify the relevant table: The 'Order_Items' table contains the 'order_quantity' which is needed to calculate the average amount of items ordered.", "Use the AVG() function: To find the average quantity of items ordered, we will use the AVG() function on the 'order_quantity' column.", "Group by order_id: Since we want the average amount of items ordered in each order, we need to group the results by 'order_id' to get the average for each individual order."], "pred_sql": "SELECT AVG(order_quantity) AS average_items_per_order FROM Order_Items GROUP BY order_id;", "gold_sql": "SELECT avg(order_quantity) FROM order_items", "source_tables": ["order_items"]}
{"sample_id": 6060, "db_id": "customers_and_addresses", "question": "Find the average order quantity per order.", "rationale": ["Identify the relevant table: The 'Order_Items' table contains the 'order_quantity' which we need to average.", "Use the AVG() function: This function calculates the average of a numeric column, in this case, 'order_quantity'.", "Group by order_id: To find the average order quantity per order, we need to group the results by 'order_id' so that we get the average for each individual order."], "pred_sql": "SELECT AVG(order_quantity) AS average_order_quantity FROM Order_Items GROUP BY order_id;", "gold_sql": "SELECT avg(order_quantity) FROM order_items", "source_tables": ["order_items"]}
{"sample_id": 6061, "db_id": "customers_and_addresses", "question": "What are the names of customers who use payment method \"Cash\"?", "rationale": ["Identify the relevant table: The query is asking for customer names, which are found in the Customers table.", "Determine the condition: The query specifies that we are looking for customers who use the payment method 'Cash'.", "Construct the SQL SELECT statement: We need to select the 'customer_name' column from the Customers table where the 'payment_method' is 'Cash'.", "Combine these elements into a complete SQL query."], "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method = 'Cash';", "gold_sql": "SELECT customer_name FROM customers WHERE payment_method  =  'Cash'", "source_tables": ["customers"]}
{"sample_id": 6062, "db_id": "customers_and_addresses", "question": "Which customers use \"Cash\" for payment method? Return the customer names.", "rationale": ["Identify the relevant table: The query is asking for customer information, so we will use the Customers table.", "Determine the columns needed: We need the customer names, which corresponds to the 'customer_name' column in the Customers table.", "Apply the filter: The query specifies that we only want customers who use 'Cash' as their payment method, so we will add a WHERE clause to filter by the 'payment_method' column."], "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method = 'Cash';", "gold_sql": "SELECT customer_name FROM customers WHERE payment_method  =  'Cash'", "source_tables": ["customers"]}
{"sample_id": 6063, "db_id": "customers_and_addresses", "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.", "rationale": ["Identify the relevant table: The query requires information about customers, so we will use the Customers table.", "Determine the required column: We need the 'date_became_customer' column from the Customers table.", "Specify the condition: We need to filter customers whose IDs are between 10 and 20, which can be done using the BETWEEN clause in SQL.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to filter the results based on the customer_id range."], "pred_sql": "SELECT date_became_customer FROM Customers WHERE customer_id BETWEEN '10' AND '20';", "gold_sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "source_tables": ["customers"]}
{"sample_id": 6064, "db_id": "customers_and_addresses", "question": "What are the dates when customers with ids between 10 and 20 became customers?", "rationale": ["Identify the relevant table: The query pertains to customer information, so we will use the Customers table.", "Determine the required columns: We need the 'date_became_customer' column to find out when customers became customers.", "Specify the condition: We need to filter customers whose IDs are between 10 and 20, which can be done using the BETWEEN clause in SQL.", "Construct the SQL query: Combine the selected columns, table, and conditions into a complete SQL statement."], "pred_sql": "SELECT date_became_customer FROM Customers WHERE customer_id BETWEEN '10' AND '20';", "gold_sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "source_tables": ["customers"]}
{"sample_id": 6065, "db_id": "customers_and_addresses", "question": "Which payment method is used by most customers?", "rationale": ["Identify the relevant table: The 'Customers' table contains the 'payment_method' column.", "Count the number of customers for each payment method: Use COUNT(customer_id) to count how many customers use each payment method.", "Group the results by payment method: Use GROUP BY payment_method to aggregate the counts for each method.", "Order the results to find the most used payment method: Use ORDER BY customer_count DESC to sort the counts in descending order.", "Limit the results to the top entry: Use LIMIT 1 to get only the payment method used by the most customers."], "pred_sql": "SELECT payment_method, COUNT(customer_id) AS customer_count \nFROM Customers \nGROUP BY payment_method \nORDER BY customer_count DESC \nLIMIT 1;", "gold_sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}
{"sample_id": 6066, "db_id": "customers_and_addresses", "question": "Find the payment method that is used most frequently.", "rationale": ["Identify the relevant table: The 'Customers' table contains the 'payment_method' column which we need to analyze.", "Count the occurrences of each payment method: We will use the COUNT() function to count how many times each payment method appears.", "Group the results by payment method: We will use GROUP BY to aggregate the counts for each unique payment method.", "Order the results by frequency: We will order the results in descending order to get the most frequently used payment method at the top.", "Limit the results to one: We will use LIMIT 1 to return only the most frequently used payment method."], "pred_sql": "SELECT payment_method, COUNT(payment_method) AS frequency FROM Customers GROUP BY payment_method ORDER BY frequency DESC LIMIT 1;", "gold_sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}
{"sample_id": 6067, "db_id": "customers_and_addresses", "question": "What are the names of customers using the most popular payment method?", "rationale": ["Identify the relevant table: Customers, which contains customer names and their payment methods.", "Determine the most popular payment method by grouping the Customers table by payment_method and counting the occurrences of each method.", "Order the results of the previous step in descending order to find the most frequently used payment method.", "Limit the results to 1 to get the most popular payment method.", "Use the most popular payment method to filter the Customers table and select the customer names associated with that payment method."], "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method = (SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1)", "gold_sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["customers"]}
{"sample_id": 6068, "db_id": "customers_and_addresses", "question": "Find the name of the customers who use the most frequently used payment method.", "rationale": ["Identify the relevant table: Customers, which contains customer names and their payment methods.", "Determine the most frequently used payment method by grouping the payment_method column and counting occurrences.", "Order the grouped results by count in descending order to find the most common payment method.", "Limit the results to 1 to get the top payment method.", "Select the customer names from the Customers table where the payment method matches the most frequently used payment method."], "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method = (SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1)", "gold_sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["customers"]}
{"sample_id": 6069, "db_id": "customers_and_addresses", "question": "What are all the payment methods?", "rationale": ["Identify the relevant table: The query is asking for payment methods, which are stored in the Customers table under the column payment_method.", "Use SELECT statement: To retrieve data from the database, we use the SELECT statement.", "Use DISTINCT: Since we want all unique payment methods, we will use the DISTINCT keyword to avoid duplicate entries.", "Specify the column: We will specify the payment_method column to get the required information from the Customers table."], "pred_sql": "SELECT DISTINCT payment_method FROM Customers;", "gold_sql": "SELECT DISTINCT payment_method FROM customers", "source_tables": ["customers"]}
{"sample_id": 6070, "db_id": "customers_and_addresses", "question": "Return all the distinct payment methods used by customers.", "rationale": ["Identify the table that contains the payment methods, which is the Customers table.", "Determine that we need to select distinct values to avoid duplicates in the results.", "Construct the SQL query to select the distinct payment_method from the Customers table."], "pred_sql": "SELECT DISTINCT payment_method FROM Customers;", "gold_sql": "SELECT DISTINCT payment_method FROM customers", "source_tables": ["customers"]}
{"sample_id": 6071, "db_id": "customers_and_addresses", "question": "What are the details of all products?", "rationale": ["Identify the table that contains product details, which is the 'Products' table.", "To retrieve all details of the products, we need to select all columns from the 'Products' table.", "The SQL query to achieve this is 'SELECT * FROM Products;'"], "pred_sql": "SELECT * FROM Products;", "gold_sql": "SELECT DISTINCT product_details FROM products", "source_tables": ["products"]}
{"sample_id": 6072, "db_id": "customers_and_addresses", "question": "Return the the details of all products.", "rationale": ["Identify the table that contains product details, which is the 'Products' table.", "To retrieve all details of the products, we need to select all columns from the 'Products' table.", "The SQL query to achieve this is 'SELECT * FROM Products;'"], "pred_sql": "SELECT * FROM Products;", "gold_sql": "SELECT DISTINCT product_details FROM products", "source_tables": ["products"]}
{"sample_id": 6073, "db_id": "customers_and_addresses", "question": "Find the name of all customers whose name contains \"Alex\".", "rationale": ["Identify the table that contains customer names, which is the Customers table.", "Determine the column that holds the customer names, which is customer_name.", "Use the SQL SELECT statement to retrieve the customer_name column.", "Apply a WHERE clause to filter the results to only include names that contain 'Alex'.", "Use the LIKE operator with wildcards (%) to match any customer names that contain 'Alex' anywhere in the name."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_name LIKE '%Alex%';", "gold_sql": "SELECT customer_name FROM customers WHERE customer_name LIKE '%Alex%'", "source_tables": ["customers"]}
{"sample_id": 6074, "db_id": "customers_and_addresses", "question": "Which customer's name contains \"Alex\"? Find the full name.", "rationale": ["Identify the table that contains customer names, which is the 'Customers' table.", "Determine the column that holds the customer's name, which is 'customer_name'.", "Formulate a query to select 'customer_name' from the 'Customers' table.", "Use the WHERE clause to filter results where 'customer_name' contains the substring 'Alex', using the LIKE operator with wildcards."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_name LIKE '%Alex%';", "gold_sql": "SELECT customer_name FROM customers WHERE customer_name LIKE '%Alex%'", "source_tables": ["customers"]}
{"sample_id": 6075, "db_id": "customers_and_addresses", "question": "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"", "rationale": ["Identify the table to query: Products.", "Determine the column to search for the keywords: product_details.", "Use the SQL LIKE operator to search for the presence of 'Latte' or 'Americano' in the product_details column.", "Combine the conditions using the OR operator to include both keywords in the search."], "pred_sql": "SELECT * FROM Products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%';", "gold_sql": "SELECT product_details FROM products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%'", "source_tables": ["products"]}
{"sample_id": 6076, "db_id": "customers_and_addresses", "question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.", "rationale": ["Identify the table that contains product details, which is the 'Products' table.", "Determine the column that holds the product specifications, which is 'product_details'.", "Formulate a query to select 'product_details' from the 'Products' table.", "Use the WHERE clause to filter results where 'product_details' contains the word 'Latte' or 'Americano'.", "Utilize the LIKE operator with wildcards (%) to match any occurrence of the specified words."], "pred_sql": "SELECT product_details FROM Products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%';", "gold_sql": "SELECT product_details FROM products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%'", "source_tables": ["products"]}
{"sample_id": 6077, "db_id": "customers_and_addresses", "question": "What is the address content of the customer named \"Maudie Kertzmann\"?", "rationale": ["Identify the relevant tables: We need to access the Addresses and Customers tables to get the address content for a specific customer.", "Determine the relationship between tables: The Customer_Addresses table links Customers to Addresses, so we will need to join these tables.", "Formulate the SQL query: We will select the address_content from the Addresses table, joining it with Customer_Addresses and Customers to filter by the customer name 'Maudie Kertzmann'."], "pred_sql": "SELECT a.address_content FROM Addresses a JOIN Customer_Addresses ca ON a.address_id = ca.address_id JOIN Customers c ON ca.customer_id = c.customer_id WHERE c.customer_name = 'Maudie Kertzmann';", "gold_sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  'Maudie Kertzmann'", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6078, "db_id": "customers_and_addresses", "question": "Return the address content for the customer whose name is \"Maudie Kertzmann\".", "rationale": ["Identify the relevant tables: Addresses, Customers, and Customer_Addresses.", "We need to retrieve the address content, which is in the Addresses table.", "To link the customer to their addresses, we will use the Customer_Addresses table as a junction table.", "Join the Addresses table with Customer_Addresses on address_id.", "Join the Customer_Addresses table with Customers on customer_id.", "Filter the results to only include the customer with the name 'Maudie Kertzmann'.", "Construct the SQL query to select the address_content from the Addresses table based on the joins and the specified customer name."], "pred_sql": "SELECT Addresses.address_content FROM Addresses \nJOIN Customer_Addresses ON Addresses.address_id = Customer_Addresses.address_id \nJOIN Customers ON Customer_Addresses.customer_id = Customers.customer_id \nWHERE Customers.customer_name = 'Maudie Kertzmann';", "gold_sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  'Maudie Kertzmann'", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6079, "db_id": "customers_and_addresses", "question": "How many customers are living in city \"Lake Geovannyton\"?", "rationale": ["Identify the relevant tables: Customers, Customer_Addresses, and Addresses are needed to find customers living in a specific city.", "We need to count the number of distinct customers, so we will use the COUNT function with DISTINCT on customer_id.", "Join the Customers table with Customer_Addresses on customer_id to link customers to their addresses.", "Join the Customer_Addresses table with Addresses on address_id to access the city information.", "Filter the results to only include addresses where the city is 'Lake Geovannyton'.", "Construct the SQL query to select the count of distinct customers based on the above joins and conditions."], "pred_sql": "SELECT COUNT(DISTINCT c.customer_id) AS customer_count \nFROM Customers c \nJOIN Customer_Addresses ca ON c.customer_id = ca.customer_id \nJOIN Addresses a ON ca.address_id = a.address_id \nWHERE a.city = 'Lake Geovannyton';", "gold_sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  'Lake Geovannyton'", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6080, "db_id": "customers_and_addresses", "question": "Find the number of customers who live in the city called Lake Geovannyton.", "rationale": ["Identify the relevant tables: Customers, Customer_Addresses, and Addresses are needed to find customers based on their addresses.", "We need to count the number of distinct customers, so we will use COUNT(DISTINCT c.customer_id).", "Join the Customers table with Customer_Addresses on customer_id to link customers to their addresses.", "Join the Customer_Addresses table with Addresses on address_id to access the city information.", "Filter the results to only include addresses where the city is 'Lake Geovannyton'."], "pred_sql": "SELECT COUNT(DISTINCT c.customer_id) AS number_of_customers\nFROM Customers c\nJOIN Customer_Addresses ca ON c.customer_id = ca.customer_id\nJOIN Addresses a ON ca.address_id = a.address_id\nWHERE a.city = 'Lake Geovannyton';", "gold_sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  'Lake Geovannyton'", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6081, "db_id": "customers_and_addresses", "question": "Find the name of customers who are living in Colorado?", "rationale": ["Identify the relevant tables: Customers, Customer_Addresses, and Addresses.", "We need to find customers based on their address, so we will join Customers with Customer_Addresses on customer_id.", "Next, we will join Customer_Addresses with Addresses on address_id to access the address details.", "We are specifically looking for customers living in Colorado, so we will filter the results where the state_province_county column in the Addresses table equals 'Colorado'.", "Finally, we will select the customer_name from the Customers table."], "pred_sql": "SELECT customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.state_province_county = 'Colorado';", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'Colorado'", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6082, "db_id": "customers_and_addresses", "question": "What are the names of customers who live in Colorado state?", "rationale": ["Identify the relevant tables: Customers, Customer_Addresses, and Addresses are needed to find customer names and their associated addresses.", "Determine the relationship between the tables: Customers are linked to Customer_Addresses through customer_id, and Customer_Addresses are linked to Addresses through address_id.", "Select the customer_name from the Customers table, ensuring to get distinct names to avoid duplicates.", "Filter the results to include only those addresses where the state_province_county is 'Colorado'."], "pred_sql": "SELECT DISTINCT Customers.customer_name \nFROM Customers \nJOIN Customer_Addresses ON Customers.customer_id = Customer_Addresses.customer_id \nJOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id \nWHERE Addresses.state_province_county = 'Colorado';", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'Colorado'", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6083, "db_id": "customers_and_addresses", "question": "Find the list of cities that no customer is living in.", "rationale": ["Identify the relevant table: We need to find cities from the Addresses table.", "Determine the condition: We want cities that have no associated customers, which means we need to check for addresses that are not linked to any customer.", "Use a subquery: We will use a subquery to find all address_ids that are linked to customers in the Customer_Addresses table.", "Select distinct cities: Finally, we will select distinct cities from the Addresses table where the address_id is not in the list of address_ids from the subquery."], "pred_sql": "SELECT DISTINCT city FROM Addresses WHERE address_id NOT IN (SELECT address_id FROM Customer_Addresses)", "gold_sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6084, "db_id": "customers_and_addresses", "question": "What are the cities no customers live in?", "rationale": ["Identify the relevant table: We need to find cities where no customers live, which involves the Addresses and Customer_Addresses tables.", "Determine the relationship: The Customer_Addresses table links customers to addresses, so we need to find addresses that are not linked to any customers.", "Construct the subquery: We will create a subquery to select all address_ids from the Customer_Addresses table, which indicates addresses that have customers.", "Select distinct cities: We will select distinct cities from the Addresses table where the address_id is not in the list of address_ids from the subquery."], "pred_sql": "SELECT DISTINCT city FROM Addresses WHERE address_id NOT IN (SELECT address_id FROM Customer_Addresses)", "gold_sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6085, "db_id": "customers_and_addresses", "question": "Which city has the most customers living in?", "rationale": ["Identify the relevant tables: We need to find the city with the most customers, so we will use the Customer_Addresses and Addresses tables.", "Join the tables: We will join Customer_Addresses with Addresses on the address_id to get the city associated with each customer.", "Count distinct customers: We will count the distinct customer_id for each city to determine how many customers live in each city.", "Group by city: We will group the results by city to aggregate the customer counts for each city.", "Order the results: We will order the results in descending order based on the customer count to find the city with the most customers.", "Limit the results: We will limit the results to 1 to get only the city with the highest customer count."], "pred_sql": "SELECT city, COUNT(DISTINCT customer_id) AS customer_count\nFROM Customer_Addresses\nJOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id\nGROUP BY city\nORDER BY customer_count DESC\nLIMIT 1;", "gold_sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6086, "db_id": "customers_and_addresses", "question": "Find the city where the most customers live.", "rationale": ["We need to find the city where the most customers live, which requires counting the number of distinct customers in each city.", "To do this, we will join the Customer_Addresses table with the Addresses table on the address_id to get the city associated with each customer.", "Next, we will group the results by city and count the distinct customer_id for each city to get the number of customers living in that city.", "Finally, we will order the results in descending order based on the customer count and limit the results to 1 to get the city with the most customers."], "pred_sql": "SELECT city, COUNT(DISTINCT customer_id) AS customer_count\nFROM Customer_Addresses\nJOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id\nGROUP BY city\nORDER BY customer_count DESC\nLIMIT 1;", "gold_sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["addresses", "customers", "customer_addresses"]}
{"sample_id": 6087, "db_id": "customers_and_addresses", "question": "Retrieve the list of all cities.", "rationale": ["Identify the table that contains city information, which is the Addresses table.", "To retrieve a list of all cities, we need to select the 'city' column from the Addresses table.", "Since we want a list of all unique cities, we will use the DISTINCT keyword to avoid duplicate entries."], "pred_sql": "SELECT DISTINCT city FROM Addresses;", "gold_sql": "SELECT DISTINCT city FROM addresses", "source_tables": ["addresses"]}
{"sample_id": 6088, "db_id": "customers_and_addresses", "question": "List all the distinct cities", "rationale": ["Identify the requirement to list distinct cities from the database.", "Determine the relevant table that contains city information, which is the 'Addresses' table.", "Use the SQL command 'SELECT DISTINCT' to ensure that only unique city names are retrieved.", "Specify the column 'city' from the 'Addresses' table in the query."], "pred_sql": "SELECT DISTINCT city FROM Addresses;", "gold_sql": "SELECT DISTINCT city FROM addresses", "source_tables": ["addresses"]}
{"sample_id": 6089, "db_id": "customers_and_addresses", "question": "Find the city with post code 255.", "rationale": ["Identify the relevant table: The query is asking for information about a city, which is stored in the Addresses table.", "Determine the specific column needed: The city is stored in the 'city' column of the Addresses table.", "Identify the condition: The query specifies a particular postal code (zip_postcode) of '255'.", "Construct the SQL SELECT statement: We need to select the 'city' from the Addresses table where the 'zip_postcode' matches '255'."], "pred_sql": "SELECT city FROM Addresses WHERE zip_postcode = '255';", "gold_sql": "SELECT city FROM addresses WHERE zip_postcode  =  255", "source_tables": ["addresses"]}
{"sample_id": 6090, "db_id": "customers_and_addresses", "question": "Which city is post code 255 located in?", "rationale": ["Identify the relevant table: The query is asking for information about a city associated with a specific postal code, which is found in the Addresses table.", "Determine the columns needed: We need the 'city' column to answer the question.", "Formulate the SQL query: We will select the 'city' from the Addresses table where the 'zip_postcode' matches '255'."], "pred_sql": "SELECT city FROM Addresses WHERE zip_postcode = '255';", "gold_sql": "SELECT city FROM addresses WHERE zip_postcode  =  255", "source_tables": ["addresses"]}
{"sample_id": 6091, "db_id": "customers_and_addresses", "question": "Find the state and country of all cities with post code starting with 4.", "rationale": ["Identify the relevant table: The query requires information about addresses, so we will use the 'Addresses' table.", "Determine the required columns: We need the 'state_province_county' and 'country' columns from the 'Addresses' table.", "Filter the results: We need to find addresses where the 'zip_postcode' starts with '4'. This can be done using the SQL LIKE operator with the pattern '4%'.", "Use DISTINCT to ensure that we only get unique combinations of state and country for the specified post codes."], "pred_sql": "SELECT DISTINCT state_province_county, country FROM Addresses WHERE zip_postcode LIKE '4%';", "gold_sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE '4%'", "source_tables": ["addresses"]}
{"sample_id": 6092, "db_id": "customers_and_addresses", "question": "What are the state and country of all the cities that have post codes starting with 4.\\", "rationale": ["Identify the relevant table: The query requires information about cities, which is found in the Addresses table.", "Determine the required columns: The user wants the state and country, so we will select 'state_province_county' and 'country'.", "Filter the results: We need to find addresses where the 'zip_postcode' starts with '4'. This can be done using the LIKE operator with the pattern '4%'.", "Use DISTINCT to ensure that we only get unique combinations of state and country for the cities that meet the criteria."], "pred_sql": "SELECT DISTINCT state_province_county, country FROM Addresses WHERE zip_postcode LIKE '4%';", "gold_sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE '4%'", "source_tables": ["addresses"]}
{"sample_id": 6093, "db_id": "customers_and_addresses", "question": "List the countries having more than 4 addresses listed.", "rationale": ["Identify the relevant table: The query requires information about addresses, so we will use the 'Addresses' table.", "Determine the required columns: We need to list the countries, so we will select the 'country' column.", "Group the results: To count the number of addresses per country, we will use the GROUP BY clause on the 'country' column.", "Count the addresses: We will use the COUNT function to count the number of 'address_id' entries for each country.", "Filter the results: We need only those countries that have more than 4 addresses, so we will use the HAVING clause to filter the grouped results."], "pred_sql": "SELECT country FROM Addresses GROUP BY country HAVING COUNT(address_id) > 4;", "gold_sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4", "source_tables": ["addresses"]}
{"sample_id": 6094, "db_id": "customers_and_addresses", "question": "For which countries are there more than four distinct addresses listed?", "rationale": ["Identify the relevant table: The query requires information about addresses, so we will use the 'Addresses' table.", "Determine the required columns: We need the 'country' column to group the addresses by country.", "Count distinct addresses: We will use COUNT(DISTINCT address_id) to count the unique addresses for each country.", "Group by country: We will group the results by the 'country' column to aggregate the counts for each country.", "Filter the results: We will use HAVING to filter the groups where the count of distinct addresses is greater than four."], "pred_sql": "SELECT country FROM Addresses GROUP BY country HAVING COUNT(DISTINCT address_id) > 4;", "gold_sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4", "source_tables": ["addresses"]}
{"sample_id": 6095, "db_id": "customers_and_addresses", "question": "List all the contact channel codes that were used less than 5 times.", "rationale": ["Identify the table that contains the contact channel codes, which is 'Customer_Contact_Channels'.", "We need to count how many times each channel code appears, so we will use the COUNT() function.", "To group the results by channel code, we will use the GROUP BY clause on 'channel_code'.", "We want to filter the results to only include channel codes that were used less than 5 times, so we will use the HAVING clause with COUNT(*) < 5."], "pred_sql": "SELECT channel_code FROM Customer_Contact_Channels GROUP BY channel_code HAVING COUNT(*) < 5;", "gold_sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5", "source_tables": ["customer_contact_channels"]}
{"sample_id": 6096, "db_id": "customers_and_addresses", "question": "Which contact channel codes were used less than 5 times?", "rationale": ["Identify the table that contains the contact channel codes, which is 'Customer_Contact_Channels'.", "We need to count how many times each contact channel code appears, so we will use the COUNT() function.", "To group the results by each contact channel code, we will use the GROUP BY clause on 'channel_code'.", "To filter the results to only include those contact channel codes that were used less than 5 times, we will use the HAVING clause with the condition COUNT(*) < 5."], "pred_sql": "SELECT channel_code FROM Customer_Contact_Channels GROUP BY channel_code HAVING COUNT(*) < 5;", "gold_sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5", "source_tables": ["customer_contact_channels"]}
{"sample_id": 6097, "db_id": "customers_and_addresses", "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?", "rationale": ["Identify the customer by their name 'Tillman Ernser' to get their unique customer_id.", "Use the customer_id to query the Customer_Contact_Channels table to find the contact channels associated with that customer.", "Select the channel_code and contact_number from the Customer_Contact_Channels table for the identified customer."], "pred_sql": "SELECT channel_code, contact_number FROM Customer_Contact_Channels WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Tillman Ernser');", "gold_sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Tillman Ernser'", "source_tables": ["customer_contact_channels", "customers"]}
{"sample_id": 6098, "db_id": "customers_and_addresses", "question": "Find the contact channel code that was used by the customer named \"Tillman Ernser\".", "rationale": ["Identify the relevant tables: We need to find the contact channel code, which is in the Customer_Contact_Channels table, and we need to link it to the customer, which is in the Customers table.", "Determine the relationship: The Customers table has a customer_id that links to the Customer_Contact_Channels table, allowing us to join these two tables.", "Specify the selection: We want to select the channel_code from the Customer_Contact_Channels table.", "Add the condition: We need to filter the results to only include the customer named 'Tillman Ernser'.", "Construct the SQL query: Combine the SELECT statement, JOIN clause, and WHERE condition to form the complete SQL query."], "pred_sql": "SELECT Customer_Contact_Channels.channel_code \nFROM Customers \nJOIN Customer_Contact_Channels ON Customers.customer_id = Customer_Contact_Channels.customer_id \nWHERE Customers.customer_name = 'Tillman Ernser';", "gold_sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Tillman Ernser'", "source_tables": ["customer_contact_channels", "customers"]}
{"sample_id": 6099, "db_id": "customers_and_addresses", "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?", "rationale": ["Identify the customer ID for 'Tillman Ernser' from the Customers table.", "Use the customer ID to find the relevant contact channels in the Customer_Contact_Channels table.", "Sort the contact channels by 'active_from_date' in descending order to get the latest one.", "Select the 'active_to_date' of the latest contact channel."], "pred_sql": "SELECT active_to_date FROM Customer_Contact_Channels WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Tillman Ernser') ORDER BY active_from_date DESC LIMIT 1;", "gold_sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Tillman Ernser'", "source_tables": ["customer_contact_channels", "customers"]}
{"sample_id": 6100, "db_id": "customers_and_addresses", "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".", "rationale": ["Identify the customer ID for 'Tillman Ernser' from the Customers table.", "Use the identified customer ID to find the contact channels in the Customer_Contact_Channels table.", "Sort the contact channels by 'active_from_date' in descending order to get the latest one.", "Select the 'active_to_date' of the latest contact channel and limit the result to 1."], "pred_sql": "SELECT active_to_date FROM Customer_Contact_Channels WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Tillman Ernser') ORDER BY active_from_date DESC LIMIT 1;", "gold_sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  'Tillman Ernser'", "source_tables": ["customer_contact_channels", "customers"]}
{"sample_id": 6101, "db_id": "customers_and_addresses", "question": "What is the average time span of contact channels in the database?", "rationale": ["Identify the relevant table: The query pertains to contact channels, so we will use the Customer_Contact_Channels table.", "Determine the relevant columns: We need the active_from_date and active_to_date columns to calculate the time span.", "Calculate the time span: We will use the julianday function to convert the dates to Julian day numbers and subtract active_from_date from active_to_date to get the duration.", "Calculate the average: We will use the AVG function to compute the average of the calculated time spans.", "Filter out inactive channels: We will include a condition to ensure that we only consider channels that have an active_to_date (i.e., they have been deactivated)."], "pred_sql": "SELECT AVG(julianday(active_to_date) - julianday(active_from_date)) AS average_time_span FROM Customer_Contact_Channels WHERE active_to_date IS NOT NULL;", "gold_sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "source_tables": ["customer_contact_channels"]}
{"sample_id": 6102, "db_id": "customers_and_addresses", "question": "Compute the average active time span of contact channels.", "rationale": ["Identify the relevant table: Customer_Contact_Channels contains the data about contact channels and their active periods.", "Determine the columns needed: active_from_date and active_to_date are necessary to calculate the active time span.", "Calculate the time span: Use the JULIANDAY function to convert the dates to Julian day numbers and subtract to find the difference in days.", "Compute the average: Use the AVG function to calculate the average of the active time spans.", "Filter out inactive channels: Ensure that only channels with a non-null active_to_date are considered for the average calculation."], "pred_sql": "SELECT AVG(julianday(active_to_date) - julianday(active_from_date)) AS average_active_time_span FROM Customer_Contact_Channels WHERE active_to_date IS NOT NULL;", "gold_sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "source_tables": ["customer_contact_channels"]}
{"sample_id": 6103, "db_id": "customers_and_addresses", "question": "What is the channel code and contact number of the customer contact channel that was active for the longest time?", "rationale": ["Identify the relevant table: Customer_Contact_Channels contains the channel code and contact number.", "Determine the criteria for 'active for the longest time': This can be interpreted as the earliest 'active_from_date'.", "Use a subquery to find the minimum 'active_from_date' in the Customer_Contact_Channels table.", "Select the channel_code and contact_number where the active_from_date matches the earliest date found in the subquery."], "pred_sql": "SELECT channel_code, contact_number FROM Customer_Contact_Channels WHERE active_from_date = (SELECT MIN(active_from_date) FROM Customer_Contact_Channels)", "gold_sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "source_tables": ["customer_contact_channels"]}
{"sample_id": 6104, "db_id": "customers_and_addresses", "question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.", "rationale": ["Identify the relevant table: Customer_Contact_Channels contains the channel code and contact number.", "Determine the columns needed: channel_code and contact_number are required for the output.", "Calculate the duration of each contact channel: This can be done by subtracting active_from_date from active_to_date using the julianday function to convert the dates to a numeric format.", "Sort the results by the duration in descending order to get the longest active duration at the top.", "Limit the results to 1 to get only the channel with the longest active duration."], "pred_sql": "SELECT channel_code, contact_number \nFROM Customer_Contact_Channels \nORDER BY (julianday(active_to_date) - julianday(active_from_date)) DESC \nLIMIT 1;", "gold_sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "source_tables": ["customer_contact_channels"]}
{"sample_id": 6105, "db_id": "customers_and_addresses", "question": "Find the name and active date of the customer that use email as the contact channel.", "rationale": ["Identify the relevant tables: Customers and Customer_Contact_Channels.", "We need to retrieve the customer name and the active date of the contact channel.", "Join the Customers table with the Customer_Contact_Channels table on the customer_id field to link customers with their contact channels.", "Filter the results to include only those records where the channel_code is 'email' to focus on email users.", "Ensure that we only get active email channels by checking that active_to_date is NULL, indicating the channel is currently active."], "pred_sql": "SELECT c.customer_name, cc.active_from_date \nFROM Customers c \nJOIN Customer_Contact_Channels cc ON c.customer_id = cc.customer_id \nWHERE cc.channel_code = 'email' AND cc.active_to_date IS NULL;", "gold_sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", "source_tables": ["customer_contact_channels", "customers"]}
{"sample_id": 6106, "db_id": "customers_and_addresses", "question": "What are the name and active date of the customers whose contact channel code is email?", "rationale": ["Identify the relevant tables: Customers and Customer_Contact_Channels.", "Determine the columns needed: customer_name from Customers and active_from_date from Customer_Contact_Channels.", "Establish the relationship between the tables using the foreign key: Customers.customer_id = Customer_Contact_Channels.customer_id.", "Filter the results to include only those records where the channel_code is 'email'.", "Construct the SQL SELECT statement to retrieve the desired columns with the appropriate JOIN and WHERE clause."], "pred_sql": "SELECT Customers.customer_name, Customer_Contact_Channels.active_from_date \nFROM Customers \nJOIN Customer_Contact_Channels ON Customers.customer_id = Customer_Contact_Channels.customer_id \nWHERE Customer_Contact_Channels.channel_code = 'email';", "gold_sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", "source_tables": ["customer_contact_channels", "customers"]}
{"sample_id": 6107, "db_id": "customers_and_addresses", "question": "What is the name of the customer that made the order with the largest quantity?", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, and Order_Items are needed to find the customer associated with the largest order quantity.", "Join the Customers table with Customer_Orders on customer_id to link customers to their orders.", "Join the resulting table with Order_Items on order_id to access the order quantities for each order.", "Use a subquery to find the maximum order quantity from the Order_Items table.", "Filter the results to only include the customer(s) who made the order with this maximum quantity."], "pred_sql": "SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id WHERE oi.order_quantity = (SELECT MAX(order_quantity) FROM Order_Items)", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6108, "db_id": "customers_and_addresses", "question": "Find the name of the customer who made the order of the largest amount of goods.", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, and Order_Items are needed to find the customer and their order details.", "Join the Customers table with Customer_Orders on customer_id to link customers to their orders.", "Join the resulting table with Order_Items on order_id to access the quantity of items ordered.", "Group the results by customer_id to aggregate the total quantity of items ordered by each customer.", "Use SUM(oi.order_quantity) to calculate the total amount of goods ordered by each customer.", "Order the results in descending order based on the total quantity ordered to find the customer with the largest order.", "Limit the results to 1 to get only the customer who made the largest order."], "pred_sql": "SELECT c.customer_name\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nJOIN Order_Items oi ON co.order_id = oi.order_id\nGROUP BY c.customer_id\nORDER BY SUM(oi.order_quantity) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6109, "db_id": "customers_and_addresses", "question": "What is the name of the customer that has purchased the most items?", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, and Order_Items are needed to find the customer who purchased the most items.", "Join the Customers table with Customer_Orders on customer_id to link customers to their orders.", "Join the resulting table with Order_Items on order_id to access the quantity of items ordered by each customer.", "Group the results by customer_id to aggregate the total quantity of items purchased by each customer.", "Use SUM(oi.order_quantity) to calculate the total number of items purchased for each customer.", "Order the results in descending order to get the customer with the highest total first.", "Limit the results to 1 to get only the top customer."], "pred_sql": "SELECT c.customer_name\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nJOIN Order_Items oi ON co.order_id = oi.order_id\nGROUP BY c.customer_id\nORDER BY SUM(oi.order_quantity) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6110, "db_id": "customers_and_addresses", "question": "Give me the name of the customer who ordered the most items in total.", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, and Order_Items are needed to find the customer who ordered the most items.", "Join the Customers table with Customer_Orders on customer_id to link customers to their orders.", "Join the resulting table with Order_Items on order_id to access the quantity of items ordered.", "Group the results by customer_id to aggregate the total quantity of items ordered by each customer.", "Use SUM(oi.order_quantity) to calculate the total number of items ordered for each customer.", "Order the results in descending order based on the total quantity of items ordered.", "Limit the results to 1 to get the customer who ordered the most items."], "pred_sql": "SELECT c.customer_name\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nJOIN Order_Items oi ON co.order_id = oi.order_id\nGROUP BY c.customer_id\nORDER BY SUM(oi.order_quantity) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6111, "db_id": "customers_and_addresses", "question": "What is the payment method of the customer that has purchased the least quantity of items?", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, and Order_Items are needed to find the payment method of customers and their order quantities.", "Join the Customers table with Customer_Orders on customer_id to link customers with their orders.", "Join the resulting table with Order_Items on order_id to access the quantity of items ordered by each customer.", "Group the results by customer_id to aggregate the total quantity of items purchased by each customer.", "Order the results by the total quantity in ascending order to find the customer who purchased the least quantity of items.", "Limit the results to 1 to get only the customer with the least quantity of items purchased."], "pred_sql": "SELECT c.payment_method \nFROM Customers c \nJOIN Customer_Orders co ON c.customer_id = co.customer_id \nJOIN Order_Items oi ON co.order_id = oi.order_id \nGROUP BY c.customer_id \nORDER BY SUM(oi.order_quantity) ASC \nLIMIT 1;", "gold_sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6112, "db_id": "customers_and_addresses", "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total.", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, and Order_Items are needed to find the payment method and the quantity of goods ordered.", "Join the Customers table with Customer_Orders on customer_id to link customers with their orders.", "Join the resulting table with Order_Items on order_id to access the quantity of goods ordered for each customer.", "Group the results by customer_id to aggregate the total quantity of goods ordered for each customer.", "Order the results by the total quantity in ascending order to find the customer who ordered the least amount of goods.", "Limit the results to 1 to get only the customer with the least total quantity ordered."], "pred_sql": "SELECT c.payment_method \nFROM Customers c \nJOIN Customer_Orders co ON c.customer_id = co.customer_id \nJOIN Order_Items oi ON co.order_id = oi.order_id \nGROUP BY c.customer_id \nORDER BY SUM(oi.order_quantity) ASC \nLIMIT 1;", "gold_sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6113, "db_id": "customers_and_addresses", "question": "How many types of products have Rodrick Heaney bought in total?", "rationale": ["Identify the customer by name, which is 'Rodrick Heaney'.", "Join the Customers table with the Customer_Orders table to find orders placed by Rodrick Heaney.", "Join the resulting table with the Order_Items table to find the products associated with those orders.", "Count the distinct product IDs from the Order_Items table to determine how many different types of products Rodrick Heaney has bought."], "pred_sql": "SELECT COUNT(DISTINCT oi.product_id) AS product_types_bought\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nJOIN Order_Items oi ON co.order_id = oi.order_id\nWHERE c.customer_name = 'Rodrick Heaney';", "gold_sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  'Rodrick Heaney'", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6114, "db_id": "customers_and_addresses", "question": "Find the number of distinct products Rodrick Heaney has bought so far.", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, and Order_Items are needed to find the products bought by a specific customer.", "We need to count distinct products, so we will use COUNT(DISTINCT product_id) in the query.", "Join the Customers table with Customer_Orders on customer_id to link customers to their orders.", "Join the Customer_Orders table with Order_Items on order_id to link orders to the products ordered.", "Filter the results to only include orders made by 'Rodrick Heaney' using a WHERE clause on customer_name."], "pred_sql": "SELECT COUNT(DISTINCT oi.product_id) AS distinct_product_count\nFROM Customers c\nJOIN Customer_Orders co ON c.customer_id = co.customer_id\nJOIN Order_Items oi ON co.order_id = oi.order_id\nWHERE c.customer_name = 'Rodrick Heaney';", "gold_sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  'Rodrick Heaney'", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6115, "db_id": "customers_and_addresses", "question": "What is the total quantity of products purchased by \"Rodrick Heaney\"?", "rationale": ["Identify the customer by name, which is 'Rodrick Heaney'.", "Join the Customers table with the Customer_Orders table to link customers to their orders.", "Join the resulting table with the Order_Items table to access the quantity of products ordered.", "Use the SUM function to calculate the total quantity of products purchased by the identified customer."], "pred_sql": "SELECT SUM(Order_Items.order_quantity) AS total_quantity\nFROM Customers\nJOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id\nJOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id\nWHERE Customers.customer_name = 'Rodrick Heaney';", "gold_sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  'Rodrick Heaney'", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6116, "db_id": "customers_and_addresses", "question": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".", "rationale": ["Identify the customer by name 'Rodrick Heaney' from the Customers table.", "Join the Customer_Orders table to link the customer to their orders using the customer_id.", "Join the Order_Items table to link the orders to the products ordered using the order_id.", "Use the SUM function to calculate the total quantity of products ordered by this customer.", "Filter the results to only include the customer named 'Rodrick Heaney'."], "pred_sql": "SELECT SUM(Order_Items.order_quantity) AS total_quantity\nFROM Customers\nJOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id\nJOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id\nWHERE Customers.customer_name = 'Rodrick Heaney';", "gold_sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  'Rodrick Heaney'", "source_tables": ["customer_orders", "customers", "order_items"]}
{"sample_id": 6117, "db_id": "customers_and_addresses", "question": "How many customers have at least one order with status \"Cancelled\"?", "rationale": ["Identify the relevant table: Customer_Orders contains the order information including the status of each order.", "We need to count distinct customers who have at least one order with the status 'Cancelled'.", "Use the COUNT function to count the number of unique customer_ids from the Customer_Orders table where the order_status is 'Cancelled'.", "The final SQL query selects the count of distinct customer_ids that meet the criteria."], "pred_sql": "SELECT COUNT(DISTINCT customer_id) AS customer_count FROM Customer_Orders WHERE order_status = 'Cancelled';", "gold_sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  'Cancelled'", "source_tables": ["customer_orders"]}
{"sample_id": 6118, "db_id": "customers_and_addresses", "question": "Return the number of customers who have at least one order with \"Cancelled\" status.", "rationale": ["Identify the relevant table: Customer_Orders contains the order status and customer ID.", "We need to count distinct customers, so we will use COUNT(DISTINCT customer_id).", "Filter the results to include only those orders with a status of 'Cancelled'.", "Construct the SQL query to select the count of distinct customer IDs from the Customer_Orders table where the order status is 'Cancelled'."], "pred_sql": "SELECT COUNT(DISTINCT customer_id) AS number_of_customers\nFROM Customer_Orders\nWHERE order_status = 'Cancelled';", "gold_sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  'Cancelled'", "source_tables": ["customer_orders"]}
{"sample_id": 6119, "db_id": "customers_and_addresses", "question": "How many orders have detail \"Second time\"?", "rationale": ["Identify the relevant table: The query is about orders, so we will use the Customer_Orders table.", "Determine the specific column to filter: We need to count orders based on the 'order_details' column.", "Construct the SQL query: We will use the COUNT() function to count the number of rows where 'order_details' is 'Second time'."], "pred_sql": "SELECT COUNT(*) AS order_count FROM Customer_Orders WHERE order_details = 'Second time';", "gold_sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  'Second time'", "source_tables": ["customer_orders"]}
{"sample_id": 6120, "db_id": "customers_and_addresses", "question": "Tell me the number of orders with \"Second time\" as order detail.", "rationale": ["Identify the table that contains the order details, which is the Customer_Orders table.", "Determine the relevant column for filtering, which is order_details.", "Use the COUNT() function to count the number of orders that contain 'Second time' in the order_details column.", "Construct the SQL query to select the count of orders from the Customer_Orders table where order_details matches the specified condition."], "pred_sql": "SELECT COUNT(*) AS order_count FROM Customer_Orders WHERE order_details LIKE '%Second time%';", "gold_sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  'Second time'", "source_tables": ["customer_orders"]}
{"sample_id": 6121, "db_id": "customers_and_addresses", "question": "Find the customer name and date of the orders that have the status \"Delivered\".", "rationale": ["Identify the required fields: customer name and order date.", "Determine the relevant tables: Customers and Customer_Orders.", "Establish the relationship between the tables using the customer_id foreign key.", "Filter the results to include only those orders with the status 'Delivered'.", "Construct the SQL SELECT statement to retrieve the desired fields from the joined tables."], "pred_sql": "SELECT Customers.customer_name, Customer_Orders.order_date \nFROM Customer_Orders \nJOIN Customers ON Customer_Orders.customer_id = Customers.customer_id \nWHERE Customer_Orders.order_status = 'Delivered';", "gold_sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  'Delivered'", "source_tables": ["customer_orders", "customers"]}
{"sample_id": 6122, "db_id": "customers_and_addresses", "question": "What are the customer name and date of the orders whose status is \"Delivered\".", "rationale": ["Identify the required fields: customer name and order date.", "Determine the relevant tables: Customers and Customer_Orders.", "Establish the relationship between the tables using the customer_id foreign key.", "Filter the results to include only those orders with a status of 'Delivered'.", "Construct the SQL SELECT statement to retrieve the desired fields from the joined tables."], "pred_sql": "SELECT Customers.customer_name, Customer_Orders.order_date FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customer_Orders.order_status = 'Delivered';", "gold_sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  'Delivered'", "source_tables": ["customer_orders", "customers"]}
{"sample_id": 6123, "db_id": "customers_and_addresses", "question": "What is the total number of products that are in orders with status \"Cancelled\"?", "rationale": ["Identify the relevant tables: We need to look at the Customer_Orders table for order status and the Order_Items table for product information.", "Determine the relationship: The Customer_Orders table is linked to the Order_Items table through the order_id.", "Filter the orders: We need to filter the orders to only include those with a status of 'Cancelled'.", "Count the distinct products: We want to count the unique product IDs from the Order_Items table that are associated with the cancelled orders."], "pred_sql": "SELECT COUNT(DISTINCT oi.product_id) AS total_products\nFROM Customer_Orders co\nJOIN Order_Items oi ON co.order_id = oi.order_id\nWHERE co.order_status = 'Cancelled';", "gold_sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  'Cancelled'", "source_tables": ["customer_orders", "order_items"]}
{"sample_id": 6124, "db_id": "customers_and_addresses", "question": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.", "rationale": ["Identify the relevant tables: Customer_Orders and Order_Items are needed to find the order status and the quantities of products ordered.", "We need to sum the quantities of products, so we will use the SUM() function on the order_quantity column from the Order_Items table.", "To filter the orders by their status, we will use a WHERE clause to specify that we only want orders with the status 'Cancelled'.", "We will join the Customer_Orders table with the Order_Items table on the order_id to link the orders with their respective items."], "pred_sql": "SELECT SUM(Order_Items.order_quantity) AS total_quantity\nFROM Customer_Orders\nJOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id\nWHERE Customer_Orders.order_status = 'Cancelled';", "gold_sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  'Cancelled'", "source_tables": ["customer_orders", "order_items"]}
{"sample_id": 6125, "db_id": "customers_and_addresses", "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.", "rationale": ["Identify the relevant tables: Order_Items and Customer_Orders are needed to find the total amount of products ordered.", "We need to sum the order_quantity from the Order_Items table.", "To filter the orders before a specific date, we will join the Order_Items table with the Customer_Orders table on order_id.", "The condition for filtering is that the order_date in the Customer_Orders table must be less than '2018-03-17 07:13:53'.", "Construct the SQL query to select the sum of order_quantity with the appropriate join and where clause."], "pred_sql": "SELECT SUM(order_quantity) AS total_products_ordered\nFROM Order_Items oi\nJOIN Customer_Orders co ON oi.order_id = co.order_id\nWHERE co.order_date < '2018-03-17 07:13:53';", "gold_sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  '2018-03-17 07:13:53'", "source_tables": ["customer_orders", "order_items"]}
{"sample_id": 6126, "db_id": "customers_and_addresses", "question": "What is the total amount of products purchased before 2018-03-17 07:13:53?", "rationale": ["Identify the relevant tables: Order_Items and Customer_Orders are needed to find the total amount of products purchased.", "The total amount of products purchased can be calculated by summing the order_quantity from the Order_Items table.", "To filter the orders made before a specific date, we need to join the Order_Items table with the Customer_Orders table on the order_id.", "The condition for filtering is that the order_date in the Customer_Orders table must be less than '2018-03-17 07:13:53'.", "Construct the SQL query to select the sum of order_quantity with the appropriate join and where clause."], "pred_sql": "SELECT SUM(order_quantity) AS total_products_purchased FROM Order_Items oi JOIN Customer_Orders co ON oi.order_id = co.order_id WHERE co.order_date < '2018-03-17 07:13:53';", "gold_sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  '2018-03-17 07:13:53'", "source_tables": ["customer_orders", "order_items"]}
{"sample_id": 6127, "db_id": "customers_and_addresses", "question": "Who made the latest order?", "rationale": ["Identify the table that contains order information, which is the Customer_Orders table.", "To find out who made the latest order, we need to sort the orders by the order_date in descending order.", "We will select the customer_id from the Customer_Orders table.", "To get only the latest order, we will limit the results to 1 using LIMIT 1."], "pred_sql": "SELECT customer_id FROM Customer_Orders ORDER BY order_date DESC LIMIT 1;", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "source_tables": ["customer_orders", "customers"]}
{"sample_id": 6128, "db_id": "customers_and_addresses", "question": "Find the name of the customer who made an order most recently.", "rationale": ["Identify the relevant tables: Customers and Customer_Orders.", "We need to find the most recent order, so we will focus on the Customer_Orders table and sort by order_date in descending order.", "To get the customer who made that order, we will select the customer_id from the Customer_Orders table, ordering by order_date and limiting the result to 1 (the most recent order).", "Finally, we will use the customer_id obtained from the previous step to select the customer_name from the Customers table."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders ORDER BY order_date DESC LIMIT 1)", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "source_tables": ["customer_orders", "customers"]}
{"sample_id": 6129, "db_id": "customers_and_addresses", "question": "Which product has been ordered most number of times?", "rationale": ["Identify the relevant table: The 'Order_Items' table contains the information about products ordered and their quantities.", "To find out which product has been ordered the most, we need to sum the 'order_quantity' for each 'product_id'.", "Use the SUM function to aggregate the total quantity ordered for each product.", "Group the results by 'product_id' to get the total quantity for each product.", "Order the results in descending order based on the total quantity ordered to get the most ordered product at the top.", "Limit the results to 1 to get only the product that has been ordered the most."], "pred_sql": "SELECT product_id, SUM(order_quantity) AS total_ordered FROM Order_Items GROUP BY product_id ORDER BY total_ordered DESC LIMIT 1;", "gold_sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["products", "order_items"]}
{"sample_id": 6130, "db_id": "customers_and_addresses", "question": "What is the most frequently ordered product? Tell me the detail of the product", "rationale": ["Identify the relevant tables: We need to look at the 'Order_Items' table to find the products that have been ordered and the 'Products' table to get the details of those products.", "Count the frequency of each product ordered: We will use the COUNT function to count how many times each product appears in the 'Order_Items' table.", "Join the 'Order_Items' table with the 'Products' table: This will allow us to get the product details along with the order count.", "Group the results by product: We will use GROUP BY on the product_id to aggregate the order counts for each product.", "Order the results by the count of orders: We will use ORDER BY to sort the results in descending order based on the order count.", "Limit the results to the top product: We will use LIMIT 1 to get only the most frequently ordered product."], "pred_sql": "SELECT Products.product_id, Products.product_details, COUNT(Order_Items.product_id) AS order_count\nFROM Order_Items\nJOIN Products ON Order_Items.product_id = Products.product_id\nGROUP BY Order_Items.product_id\nORDER BY order_count DESC\nLIMIT 1;", "gold_sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["products", "order_items"]}
{"sample_id": 6131, "db_id": "customers_and_addresses", "question": "Find the name and ID of the product whose total order quantity is the largest.", "rationale": ["We need to find the product with the largest total order quantity.", "To do this, we will use the Order_Items table to get the product_id and the order_quantity.", "We will join the Order_Items table with the Customer_Orders table to ensure we are considering only valid orders.", "Next, we will group the results by product_id to calculate the total order quantity for each product using SUM.", "We will then order the results in descending order based on the total quantity to get the product with the largest quantity at the top.", "Finally, we will limit the results to just one record to get the product with the largest total order quantity."], "pred_sql": "SELECT oi.product_id, SUM(oi.order_quantity) AS total_quantity\nFROM Order_Items oi\nJOIN Customer_Orders co ON oi.order_id = co.order_id\nGROUP BY oi.product_id\nORDER BY total_quantity DESC\nLIMIT 1;", "gold_sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "source_tables": ["products", "order_items"]}
{"sample_id": 6132, "db_id": "customers_and_addresses", "question": "What are the name and ID of the product bought the most.", "rationale": ["Identify the relevant table: The 'Order_Items' table contains the product IDs and the quantity of each product ordered.", "Count the occurrences of each product ID in the 'Order_Items' table to determine how many times each product was bought.", "Group the results by 'product_id' to aggregate the counts for each product.", "Order the results in descending order based on the count of purchases to find the most bought product.", "Limit the results to 1 to get only the top product that was bought the most."], "pred_sql": "SELECT oi.product_id, COUNT(oi.product_id) AS purchase_count\nFROM Order_Items oi\nGROUP BY oi.product_id\nORDER BY purchase_count DESC\nLIMIT 1;", "gold_sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "source_tables": ["products", "order_items"]}
{"sample_id": 6133, "db_id": "customers_and_addresses", "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "rationale": ["Identify the relevant table: The query requires information about addresses, so we will use the 'Addresses' table.", "Determine the filtering criteria: We need to find addresses in two specific cities (East Julianaside and Gleasonmouth) and their corresponding states (Texas and Arizona).", "Construct the WHERE clause: We will use the OR operator to combine the conditions for the two cities and their states.", "Select all columns: Since the query asks for all addresses, we will use SELECT * to retrieve all columns from the Addresses table."], "pred_sql": "SELECT * FROM Addresses WHERE (city = 'East Julianaside' AND state_province_county = 'Texas') OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona');", "gold_sql": "SELECT address_content FROM addresses WHERE city  =  'East Julianaside' AND state_province_county  =  'Texas' UNION SELECT address_content FROM addresses WHERE city  =  'Gleasonmouth' AND state_province_county  =  'Arizona'", "source_tables": ["addresses"]}
{"sample_id": 6134, "db_id": "customers_and_addresses", "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "rationale": ["Identify the relevant table: The query requires information about addresses, which is stored in the 'Addresses' table.", "Determine the filtering criteria: The user is interested in addresses located in either 'East Julianaside, Texas' or 'Gleasonmouth, Arizona'.", "Construct the WHERE clause: This will include two conditions connected by an OR operator. Each condition checks for a specific city and state combination.", "Formulate the SELECT statement: Since we want all addresses that meet the criteria, we will select all columns from the 'Addresses' table."], "pred_sql": "SELECT * FROM Addresses WHERE (city = 'East Julianaside' AND state_province_county = 'Texas') OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona');", "gold_sql": "SELECT address_content FROM addresses WHERE city  =  'East Julianaside' AND state_province_county  =  'Texas' UNION SELECT address_content FROM addresses WHERE city  =  'Gleasonmouth' AND state_province_county  =  'Arizona'", "source_tables": ["addresses"]}
{"sample_id": 6135, "db_id": "customers_and_addresses", "question": "Find the name of customers who did not pay with Cash.", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "Determine the relevant column for customer names, which is 'customer_name'.", "Identify the column that indicates the payment method, which is 'payment_method'.", "Formulate a condition to filter out customers who paid with 'Cash'.", "Construct the SQL SELECT statement to retrieve the 'customer_name' from the 'Customers' table where the 'payment_method' is not 'Cash'."], "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method != 'Cash';", "gold_sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "source_tables": ["customers"]}
{"sample_id": 6136, "db_id": "customers_and_addresses", "question": "What is the name of customers who do not use Cash as payment method.", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "Determine the relevant column for customer names, which is 'customer_name'.", "Identify the column that indicates the payment method, which is 'payment_method'.", "Formulate a condition to filter out customers who use 'Cash' as their payment method.", "Construct the SQL SELECT statement to retrieve the 'customer_name' from the 'Customers' table where the 'payment_method' is not 'Cash'."], "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method != 'Cash';", "gold_sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "source_tables": ["customers"]}
{"sample_id": 6137, "db_id": "customers_and_addresses", "question": "Find the names of customers who never ordered product Latte.", "rationale": ["Identify the relevant table: Customers, which contains customer names.", "Determine the relationship between customers and orders: Customers are linked to Customer_Orders via customer_id.", "Identify the product of interest: 'Latte', which is found in the Products table.", "Find the product_id for 'Latte' in the Products table.", "Use the Order_Items table to find all order_ids that include the product_id for 'Latte'.", "Use the Customer_Orders table to find all customer_ids that have placed orders for 'Latte'.", "Select customer names from the Customers table where the customer_id is not in the list of customer_ids who ordered 'Latte'."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = (SELECT product_id FROM Products WHERE product_details = 'Latte')));", "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "source_tables": ["products", "customer_orders", "customers", "order_items"]}
{"sample_id": 6138, "db_id": "customers_and_addresses", "question": "What are names of customers who never ordered product Latte.", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, and Order_Items.", "We need to find customers who have never ordered a specific product, 'Latte'.", "First, we need to find the product_id for 'Latte' from the Products table.", "Next, we need to find all order_ids from the Order_Items table that correspond to the product_id of 'Latte'.", "Then, we will find all customer_ids from the Customer_Orders table that have placed orders for those order_ids.", "Finally, we will select customer_names from the Customers table where the customer_id is not in the list of customer_ids who ordered 'Latte'."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = (SELECT product_id FROM Products WHERE product_details = 'Latte')));", "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "source_tables": ["products", "customer_orders", "customers", "order_items"]}
{"sample_id": 6139, "db_id": "customers_and_addresses", "question": "Find the names of customers who never placed an order.", "rationale": ["Identify the Customers table which contains customer names and IDs.", "Identify the Customer_Orders table which contains customer IDs for those who have placed orders.", "Use a subquery to select all customer IDs from the Customer_Orders table.", "Use the NOT IN clause to filter out customers whose IDs are present in the Customer_Orders table, meaning they have placed orders.", "Select the customer_name from the Customers table where the customer_id is not in the list of IDs from the Customer_Orders subquery."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders);", "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customer_orders", "customers"]}
{"sample_id": 6140, "db_id": "customers_and_addresses", "question": "What are the names of customers who never made an order.", "rationale": ["Identify the Customers table which contains customer names.", "We need to find customers who have never made an order, which means we need to look for customers whose IDs are not present in the Customer_Orders table.", "Use a subquery to select all customer_ids from the Customer_Orders table.", "Use the NOT IN clause to filter out those customer_ids from the Customers table to get the names of customers who never made an order."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)", "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customer_orders", "customers"]}
{"sample_id": 6141, "db_id": "customers_and_addresses", "question": "Find the names of customers who ordered both products Latte and Americano.", "rationale": ["Identify the tables involved: Customers, Customer_Orders, Order_Items, and Products.", "We need to find customers who ordered both 'Latte' and 'Americano'.", "Join the Customers table with Customer_Orders to link customers to their orders.", "Join Customer_Orders with Order_Items to get the products associated with each order.", "Join Order_Items with Products to filter the products by their names ('Latte' and 'Americano').", "Use a WHERE clause to filter products to only those that are 'Latte' or 'Americano'.", "Group the results by customer_id to aggregate the orders for each customer.", "Use HAVING clause to ensure that only customers who ordered both products (count of distinct products = 2) are selected."], "pred_sql": "SELECT DISTINCT c.customer_name \nFROM Customers c \nJOIN Customer_Orders co ON c.customer_id = co.customer_id \nJOIN Order_Items oi ON co.order_id = oi.order_id \nJOIN Products p ON oi.product_id = p.product_id \nWHERE p.product_details IN ('Latte', 'Americano') \nGROUP BY c.customer_id \nHAVING COUNT(DISTINCT p.product_details) = 2;", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "source_tables": ["products", "customer_orders", "customers", "order_items"]}
{"sample_id": 6142, "db_id": "customers_and_addresses", "question": "What are the names of customers who have purchased both products Latte and Americano?", "rationale": ["Identify the relevant tables: Customers, Customer_Orders, Order_Items, and Products.", "We need to find customers who have purchased both 'Latte' and 'Americano'.", "Join the Customers table with Customer_Orders to link customers to their orders.", "Join Customer_Orders with Order_Items to link orders to the products ordered.", "Join Order_Items with Products to access product details.", "Filter the results to include only those products that are either 'Latte' or 'Americano'.", "Group the results by customer to aggregate their purchases.", "Use HAVING to ensure that only customers who have purchased both products (count of distinct products = 2) are included."], "pred_sql": "SELECT DISTINCT c.customer_name \nFROM Customers c \nJOIN Customer_Orders co ON c.customer_id = co.customer_id \nJOIN Order_Items oi ON co.order_id = oi.order_id \nJOIN Products p ON oi.product_id = p.product_id \nWHERE p.product_details IN ('Latte', 'Americano') \nGROUP BY c.customer_id \nHAVING COUNT(DISTINCT p.product_details) = 2;", "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "source_tables": ["products", "customer_orders", "customers", "order_items"]}
{"sample_id": 6143, "db_id": "music_4", "question": "How many artists are there?", "rationale": ["Identify the requirement: Count the number of artists.", "Determine the relevant table: The 'artist' table contains the information about artists.", "Use the COUNT() function to count the total number of entries in the 'artist' table.", "Construct the SQL query to select the count from the 'artist' table."], "pred_sql": "SELECT COUNT(*) AS Artist_Count FROM artist;", "gold_sql": "SELECT count(*) FROM artist", "source_tables": ["artist"]}
{"sample_id": 6144, "db_id": "music_4", "question": "Count the number of artists.", "rationale": ["Identify the goal: We need to count the number of artists in the artist table.", "Determine the appropriate SQL function: The COUNT() function is used to count the number of rows in a table.", "Specify the table to count from: We will count from the 'artist' table.", "Construct the SQL query: The final query will be 'SELECT COUNT(*) AS Artist_Count FROM artist;' to get the total number of artists."], "pred_sql": "SELECT COUNT(*) AS Artist_Count FROM artist;", "gold_sql": "SELECT count(*) FROM artist", "source_tables": ["artist"]}
{"sample_id": 6145, "db_id": "music_4", "question": "List the age of all music artists.", "rationale": ["Identify the table that contains the information about music artists, which is the 'artist' table.", "Determine the specific column that holds the age of the artists, which is the 'Age' column.", "Construct the SQL query to select the 'Age' column from the 'artist' table."], "pred_sql": "SELECT Age FROM artist;", "gold_sql": "SELECT Age FROM artist", "source_tables": ["artist"]}
{"sample_id": 6146, "db_id": "music_4", "question": "What are the ages of all music artists?", "rationale": ["Identify the table that contains the information about music artists, which is the 'artist' table.", "Determine the specific column that holds the ages of the artists, which is the 'Age' column.", "Construct a SQL query to select the 'Age' column from the 'artist' table."], "pred_sql": "SELECT Age FROM artist;", "gold_sql": "SELECT Age FROM artist", "source_tables": ["artist"]}
{"sample_id": 6147, "db_id": "music_4", "question": "What is the average age of all artists?", "rationale": ["Identify the table that contains the age of the artists, which is the 'artist' table.", "Determine the appropriate SQL function to calculate the average, which is AVG().", "Construct the SQL query to select the average age from the 'Age' column in the 'artist' table."], "pred_sql": "SELECT AVG(Age) AS Average_Age FROM artist;", "gold_sql": "SELECT avg(Age) FROM artist", "source_tables": ["artist"]}
{"sample_id": 6148, "db_id": "music_4", "question": "Return the average age across all artists.", "rationale": ["Identify the table that contains the age of the artists, which is the 'artist' table.", "To calculate the average age, we will use the AVG() function in SQL.", "The query will select the average of the 'Age' column from the 'artist' table."], "pred_sql": "SELECT AVG(Age) AS Average_Age FROM artist;", "gold_sql": "SELECT avg(Age) FROM artist", "source_tables": ["artist"]}
{"sample_id": 6149, "db_id": "music_4", "question": "What are the famous titles of the artist \"Triumfall\"?", "rationale": ["Identify the table that contains the information about artists, which is the 'artist' table.", "Determine the column that holds the famous titles of the artists, which is 'Famous_Title'.", "Identify the condition needed to filter the results, which is the artist's name being 'Triumfall'.", "Construct the SQL query to select the 'Famous_Title' from the 'artist' table where the 'Artist' column matches 'Triumfall'."], "pred_sql": "SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall';", "gold_sql": "SELECT Famous_Title FROM artist WHERE Artist  =  'Triumfall'", "source_tables": ["artist"]}
{"sample_id": 6150, "db_id": "music_4", "question": "Return the famous titles of the artist called \"Triumfall\".", "rationale": ["Identify the table that contains the information about artists, which is the 'artist' table.", "Determine the column that holds the famous titles of the artists, which is 'Famous_Title'.", "Identify the condition needed to filter the results to only include the artist named 'Triumfall'.", "Construct the SQL query to select the 'Famous_Title' from the 'artist' table where the 'Artist' column matches 'Triumfall'."], "pred_sql": "SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall';", "gold_sql": "SELECT Famous_Title FROM artist WHERE Artist  =  'Triumfall'", "source_tables": ["artist"]}
{"sample_id": 6151, "db_id": "music_4", "question": "What are the distinct Famous release dates?", "rationale": ["Identify the table that contains the 'Famous_Release_date' column, which is the 'artist' table.", "To get distinct values, we will use the DISTINCT keyword in the SQL query.", "Construct the SQL query to select the distinct 'Famous_Release_date' from the 'artist' table."], "pred_sql": "SELECT DISTINCT Famous_Release_date FROM artist;", "gold_sql": "SELECT distinct(Famous_Release_date) FROM artist", "source_tables": ["artist"]}
{"sample_id": 6152, "db_id": "music_4", "question": "Give the distinct famous release dates for all artists.", "rationale": ["Identify the table that contains the required information: the 'artist' table has the 'Famous_Release_date' column.", "We need to retrieve distinct values, so we will use the DISTINCT keyword in the SQL query.", "The final SQL query will select the distinct 'Famous_Release_date' from the 'artist' table."], "pred_sql": "SELECT DISTINCT Famous_Release_date FROM artist;", "gold_sql": "SELECT distinct(Famous_Release_date) FROM artist", "source_tables": ["artist"]}
{"sample_id": 6153, "db_id": "music_4", "question": "Return the dates of ceremony and the results of all music festivals", "rationale": ["Identify the table that contains the required information: music_festival.", "Determine the specific columns needed: Date_of_ceremony and Result.", "Construct the SQL SELECT statement to retrieve these columns from the music_festival table."], "pred_sql": "SELECT Date_of_ceremony, Result FROM music_festival;", "gold_sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival", "source_tables": ["music_festival"]}
{"sample_id": 6154, "db_id": "music_4", "question": "What are the dates of ceremony and results for each music festival?", "rationale": ["Identify the table that contains the required information: The 'music_festival' table contains the 'Date_of_ceremony' and 'Result' columns.", "Formulate the SQL SELECT statement to retrieve the desired columns: We need to select 'Date_of_ceremony' and 'Result'.", "Specify the table from which to select the data: The data will be selected from the 'music_festival' table."], "pred_sql": "SELECT Date_of_ceremony, Result FROM music_festival;", "gold_sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival", "source_tables": ["music_festival"]}
{"sample_id": 6155, "db_id": "music_4", "question": "What are the category of music festivals with result \"Awarded\"?", "rationale": ["Identify the table that contains the information about music festivals, which is the 'music_festival' table.", "Determine the relevant column that contains the category of the music festivals, which is 'Category'.", "Identify the condition needed to filter the results, which is that the 'Result' must be 'Awarded'.", "Construct the SQL query to select distinct categories from the 'music_festival' table where the result is 'Awarded'."], "pred_sql": "SELECT DISTINCT Category FROM music_festival WHERE Result = 'Awarded';", "gold_sql": "SELECT Category FROM music_festival WHERE RESULT  =  'Awarded'", "source_tables": ["music_festival"]}
{"sample_id": 6156, "db_id": "music_4", "question": "Return the categories of music festivals that have the result \"Awarded\".", "rationale": ["Identify the table that contains the relevant information about music festivals, which is the 'music_festival' table.", "Determine the specific column that contains the result of the festival participation, which is the 'Result' column.", "Filter the results to only include those where the 'Result' is 'Awarded'.", "Select the 'Category' column to get the categories of the music festivals that meet the criteria.", "Use DISTINCT to ensure that each category is listed only once in the results."], "pred_sql": "SELECT DISTINCT Category FROM music_festival WHERE Result = 'Awarded';", "gold_sql": "SELECT Category FROM music_festival WHERE RESULT  =  'Awarded'", "source_tables": ["music_festival"]}
{"sample_id": 6157, "db_id": "music_4", "question": "What are the maximum and minimum week on top of all volumes?", "rationale": ["Identify the relevant table: The query is asking about 'weeks on top', which is a column in the 'volume' table.", "Determine the required calculations: We need to find both the maximum and minimum values of the 'Weeks_on_Top' column.", "Construct the SQL query: Use the SELECT statement to retrieve the maximum and minimum values from the 'Weeks_on_Top' column in the 'volume' table."], "pred_sql": "SELECT MAX(Weeks_on_Top) AS Max_Weeks, MIN(Weeks_on_Top) AS Min_Weeks FROM volume;", "gold_sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume", "source_tables": ["volume"]}
{"sample_id": 6158, "db_id": "music_4", "question": "Give the maximum and minimum weeks on top across all volumes.", "rationale": ["Identify the relevant table: The 'volume' table contains the 'Weeks_on_Top' column which is needed for the query.", "Determine the required calculations: We need to find both the maximum and minimum values of 'Weeks_on_Top'.", "Construct the SQL query: Use the SELECT statement to retrieve the maximum and minimum values from the 'Weeks_on_Top' column in the 'volume' table."], "pred_sql": "SELECT MAX(Weeks_on_Top) AS Max_Weeks, MIN(Weeks_on_Top) AS Min_Weeks FROM volume;", "gold_sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume", "source_tables": ["volume"]}
{"sample_id": 6159, "db_id": "music_4", "question": "What are the songs in volumes with more than 1 week on top?", "rationale": ["Identify the relevant table: The 'volume' table contains information about songs and their performance, including the number of weeks they stayed at the top.", "Determine the condition: We need to find songs that have been on top for more than 1 week, which corresponds to the 'Weeks_on_Top' column in the 'volume' table.", "Construct the SQL query: We will select the 'Song' column from the 'volume' table where the 'Weeks_on_Top' is greater than 1."], "pred_sql": "SELECT volume.Song FROM volume WHERE volume.Weeks_on_Top > 1;", "gold_sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "source_tables": ["volume"]}
{"sample_id": 6160, "db_id": "music_4", "question": "Give the songs included in volumes that have more than 1 week on top.", "rationale": ["Identify the relevant table: The 'volume' table contains information about songs and their performance, including the number of weeks they stayed at the top.", "Determine the condition: We need to filter the results to include only those volumes where the 'Weeks_on_Top' is greater than 1.", "Construct the SQL query: We will select the 'Song' column from the 'volume' table where the condition is met."], "pred_sql": "SELECT volume.Song FROM volume WHERE volume.Weeks_on_Top > 1;", "gold_sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "source_tables": ["volume"]}
{"sample_id": 6161, "db_id": "music_4", "question": "Please list all songs in volumes in ascending alphabetical order.", "rationale": ["Identify the table that contains the songs, which is the 'volume' table.", "Determine the column that holds the song names, which is 'Song'.", "Specify that we want to select all songs from the 'volume' table.", "Add an ORDER BY clause to sort the results in ascending alphabetical order."], "pred_sql": "SELECT Song FROM volume ORDER BY Song ASC;", "gold_sql": "SELECT Song FROM volume ORDER BY Song", "source_tables": ["volume"]}
{"sample_id": 6162, "db_id": "music_4", "question": "What are the the songs in volumes, listed in ascending order?", "rationale": ["Identify the table that contains the songs, which is the 'volume' table.", "Determine the column that represents the song, which is 'Song'.", "Since the user wants the songs listed in ascending order, we will use the ORDER BY clause.", "The ORDER BY clause will be applied to the 'Volume_ID' to ensure the songs are sorted based on their volume in ascending order."], "pred_sql": "SELECT Song FROM volume ORDER BY Volume_ID ASC;", "gold_sql": "SELECT Song FROM volume ORDER BY Song", "source_tables": ["volume"]}
{"sample_id": 6163, "db_id": "music_4", "question": "How many distinct artists do the volumes associate to?", "rationale": ["Identify the goal: We need to find the number of distinct artists associated with the volumes.", "Understand the schema: The 'volume' table has a column 'Artist_ID' that links to the 'artist' table.", "To find distinct artists, we can use the COUNT function along with DISTINCT on the 'Artist_ID' column from the 'volume' table.", "Construct the SQL query: We will select the count of distinct 'Artist_ID' from the 'volume' table."], "pred_sql": "SELECT COUNT(DISTINCT Artist_ID) AS distinct_artists FROM volume;", "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}
{"sample_id": 6164, "db_id": "music_4", "question": "Count the number of distinct artists who have volumes.", "rationale": ["Identify the tables involved: 'artist' and 'volume'.", "Determine the relationship between the tables: 'volume' has a foreign key 'Artist_ID' that references 'artist'.", "To count distinct artists, we need to join the 'artist' table with the 'volume' table on 'Artist_ID'.", "Use the COUNT function with DISTINCT to count unique 'Artist_ID' values from the joined result."], "pred_sql": "SELECT COUNT(DISTINCT artist.Artist_ID) AS distinct_artist_count FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID;", "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}
{"sample_id": 6165, "db_id": "music_4", "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.", "rationale": ["Identify the relevant tables: 'music_festival' for the date of the ceremony and 'volume' for the weeks on top.", "We need to join the 'music_festival' table with the 'volume' table using the foreign key relationship where 'music_festival.Volume' matches 'volume.Volume_ID'.", "We need to filter the results to only include volumes that have 'Weeks_on_Top' greater than 2.", "Select the distinct 'Date_of_ceremony' from the resulting joined table to avoid duplicate dates."], "pred_sql": "SELECT DISTINCT mf.Date_of_ceremony \nFROM music_festival mf \nJOIN volume v ON mf.Volume = v.Volume_ID \nWHERE v.Weeks_on_Top > 2;", "gold_sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2", "source_tables": ["music_festival", "volume"]}
{"sample_id": 6166, "db_id": "music_4", "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?", "rationale": ["Identify the relevant tables: music_festival and volume.", "We need to find the dates of ceremonies from the music_festival table.", "We need to filter these based on the condition that the corresponding volumes lasted more than 2 weeks on top.", "To link the music_festival and volume tables, we will use the foreign key relationship where music_festival.Volume corresponds to volume.Volume_ID.", "Construct the SQL query to select the Date_of_ceremony from music_festival where the condition on Weeks_on_Top from volume is met."], "pred_sql": "SELECT mf.Date_of_ceremony \nFROM music_festival mf \nJOIN volume v ON mf.Volume = v.Volume_ID \nWHERE v.Weeks_on_Top > 2;", "gold_sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2", "source_tables": ["music_festival", "volume"]}
{"sample_id": 6167, "db_id": "music_4", "question": "Please show the songs that have result \"nominated\" at music festivals.", "rationale": ["Identify the relevant tables: 'volume' and 'music_festival' are needed to find songs that were nominated.", "Determine the relationship between the tables: 'volume' has a foreign key 'Volume' that links to 'music_festival'.", "Select the 'Song' column from the 'volume' table, as this is the information we want to retrieve.", "Add a condition to filter results where the 'Result' in the 'music_festival' table is 'nominated'.", "Construct the SQL query using a JOIN to combine the two tables based on the foreign key relationship."], "pred_sql": "SELECT volume.Song FROM volume JOIN music_festival ON volume.Volume_ID = music_festival.Volume WHERE music_festival.Result = 'nominated';", "gold_sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  'Nominated'", "source_tables": ["music_festival", "volume"]}
{"sample_id": 6168, "db_id": "music_4", "question": "What are the songs in volumes that have resulted in a nomination at music festivals?", "rationale": ["Identify the relevant tables: 'volume' and 'music_festival' are needed to find songs that have nominations.", "Determine the relationship: 'volume' has a foreign key 'Volume' that links to 'music_festival'.", "Select the 'Song' from the 'volume' table where there is a corresponding entry in 'music_festival' indicating a nomination.", "Use a JOIN clause to combine 'volume' and 'music_festival' on the matching Volume_ID.", "Filter the results to only include those entries in 'music_festival' where the Result is 'Nominated'."], "pred_sql": "SELECT volume.Song FROM volume JOIN music_festival ON volume.Volume_ID = music_festival.Volume WHERE music_festival.Result = 'Nominated';", "gold_sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  'Nominated'", "source_tables": ["music_festival", "volume"]}
{"sample_id": 6169, "db_id": "music_4", "question": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?", "rationale": ["Identify the tables involved: 'volume' and 'artist'.", "Determine the relationship between the tables: 'volume' has a foreign key 'Artist_ID' that links to 'artist'.", "We need to find the 'Issue_Date' from the 'volume' table for a specific artist.", "Filter the results by the artist's name, which is 'Gorgoroth'.", "Construct the SQL query to select 'Issue_Date' from 'volume' where the artist's name matches 'Gorgoroth' using a JOIN on 'Artist_ID'."], "pred_sql": "SELECT volume.Issue_Date FROM volume JOIN artist ON volume.Artist_ID = artist.Artist_ID WHERE artist.Artist = 'Gorgoroth';", "gold_sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  'Gorgoroth'", "source_tables": ["artist", "volume"]}
{"sample_id": 6170, "db_id": "music_4", "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.", "rationale": ["Identify the relevant tables: 'volume' and 'artist'.", "Determine the relationship between the tables: 'volume' has a foreign key 'Artist_ID' that links to 'artist'.", "We need to find the 'Issue_Date' from the 'volume' table for the artist named 'Gorgoroth'.", "Construct the SQL query to join the 'volume' and 'artist' tables on 'Artist_ID'.", "Filter the results where the artist's name matches 'Gorgoroth'.", "Select the 'Issue_Date' from the resulting joined table."], "pred_sql": "SELECT v.Issue_Date FROM volume v JOIN artist a ON v.Artist_ID = a.Artist_ID WHERE a.Artist = 'Gorgoroth';", "gold_sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  'Gorgoroth'", "source_tables": ["artist", "volume"]}
{"sample_id": 6171, "db_id": "music_4", "question": "What are the songs in volumes associated with the artist aged 32 or older?", "rationale": ["Identify the relevant tables: 'artist' and 'volume'.", "Determine the columns needed: 'Song' from 'volume' and 'Age' from 'artist'.", "Establish the relationship between the tables using the foreign key: 'volume.Artist_ID' links to 'artist.Artist_ID'.", "Filter the results to include only artists aged 32 or older by using a WHERE clause: 'artist.Age >= '32''.", "Construct the SQL SELECT statement to retrieve the 'Song' from the 'volume' table based on the specified conditions."], "pred_sql": "SELECT volume.Song FROM volume JOIN artist ON volume.Artist_ID = artist.Artist_ID WHERE artist.Age >= '32';", "gold_sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32", "source_tables": ["artist", "volume"]}
{"sample_id": 6172, "db_id": "music_4", "question": "Return names of songs in volumes that are by artists that are at least 32 years old.", "rationale": ["Identify the tables involved: 'volume' for songs and 'artist' for artist details.", "Determine the relationship between the tables: 'volume' has a foreign key 'Artist_ID' that links to 'artist'.", "Filter the artists based on the age condition: we need artists that are at least 32 years old.", "Select the song names from the 'volume' table where the corresponding artist meets the age condition."], "pred_sql": "SELECT v.Song FROM volume v JOIN artist a ON v.Artist_ID = a.Artist_ID WHERE a.Age >= '32';", "gold_sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32", "source_tables": ["artist", "volume"]}
{"sample_id": 6173, "db_id": "music_4", "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?", "rationale": ["Identify the relevant tables: 'artist' and 'volume' are needed to get the artist's age and the weeks on top.", "We need to calculate the average of 'Weeks_on_Top' from the 'volume' table.", "Join the 'artist' table with the 'volume' table on 'Artist_ID' to link artists with their respective volumes.", "Filter the artists to include only those aged 25 or younger using the condition 'a.Age <= '25'.", "Use the AVG() function to calculate the average of 'Weeks_on_Top' for the filtered results."], "pred_sql": "SELECT AVG(v.Weeks_on_Top) AS Average_Weeks_On_Top\nFROM artist a\nJOIN volume v ON a.Artist_ID = v.Artist_ID\nWHERE a.Age <= '25';", "gold_sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25", "source_tables": ["artist", "volume"]}
{"sample_id": 6174, "db_id": "music_4", "question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.", "rationale": ["Identify the tables involved: 'volume' for weeks on top and 'artist' for artist details.", "We need to calculate the average number of weeks on top, so we will use the AVG() function on the 'Weeks_on_Top' column from the 'volume' table.", "To filter artists that are at most 25 years old, we will use a WHERE clause on the 'Age' column from the 'artist' table.", "We need to join the 'volume' and 'artist' tables on the 'Artist_ID' to link the weeks on top with the corresponding artist's age.", "Construct the SQL query to select the average weeks on top from the joined tables with the specified conditions."], "pred_sql": "SELECT AVG(v.Weeks_on_Top) AS Average_Weeks_On_Top\nFROM volume v\nJOIN artist a ON v.Artist_ID = a.Artist_ID\nWHERE a.Age <= '25';", "gold_sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25", "source_tables": ["artist", "volume"]}
{"sample_id": 6175, "db_id": "music_4", "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?", "rationale": ["Identify the relevant tables: 'artist' and 'volume'.", "Determine the columns needed: 'Famous_Title' from 'artist' and 'Weeks_on_Top' from 'volume'.", "Establish the relationship between the tables using the foreign key 'Artist_ID'.", "Filter the results to include only those records where 'Weeks_on_Top' is greater than 2.", "Construct the SQL SELECT statement to retrieve the 'Famous_Title' based on the specified conditions."], "pred_sql": "SELECT artist.Famous_Title FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID WHERE volume.Weeks_on_Top > 2;", "gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2", "source_tables": ["artist", "volume"]}
{"sample_id": 6176, "db_id": "music_4", "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.", "rationale": ["Identify the relevant tables: 'artist' and 'volume' are needed to get the famous titles and the weeks on top.", "Determine the relationship between the tables: 'artist' is linked to 'volume' through 'Artist_ID'.", "Select the column of interest: we want 'Famous_Title' from the 'artist' table.", "Apply the condition: we need to filter the results where 'Weeks_on_Top' in the 'volume' table is greater than 2.", "Construct the SQL query using a JOIN to combine the two tables based on the Artist_ID and apply the WHERE clause for filtering."], "pred_sql": "SELECT artist.Famous_Title FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID WHERE volume.Weeks_on_Top > 2;", "gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2", "source_tables": ["artist", "volume"]}
{"sample_id": 6177, "db_id": "music_4", "question": "Please list the age and famous title of artists in descending order of age.", "rationale": ["Identify the columns needed: Age and Famous_Title from the artist table.", "Determine the order of the results: we need to sort by Age in descending order.", "Construct the SQL SELECT statement to retrieve the specified columns from the artist table.", "Add the ORDER BY clause to sort the results by Age in descending order."], "pred_sql": "SELECT Age, Famous_Title FROM artist ORDER BY Age DESC;", "gold_sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC", "source_tables": ["artist"]}
{"sample_id": 6178, "db_id": "music_4", "question": "What are the famous titles and ages of each artist, listed in descending order by age?", "rationale": ["Identify the columns needed: 'Famous_Title' and 'Age' from the 'artist' table.", "Determine the table to query: 'artist'.", "Specify the order of results: descending order by 'Age'.", "Construct the SQL SELECT statement to retrieve the required columns and apply the ORDER BY clause."], "pred_sql": "SELECT Famous_Title, Age FROM artist ORDER BY Age DESC;", "gold_sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC", "source_tables": ["artist"]}
{"sample_id": 6179, "db_id": "music_4", "question": "What is the famous release date of the artist with the oldest age?", "rationale": ["Identify the table that contains the information about artists, which is the 'artist' table.", "Determine the column that contains the age of the artists, which is 'Age'.", "To find the artist with the oldest age, we need to find the maximum age from the 'Age' column.", "Use a subquery to select the maximum age from the 'artist' table.", "Once we have the maximum age, we can select the 'Famous_Release_date' of the artist whose age matches this maximum age."], "pred_sql": "SELECT Famous_Release_date FROM artist WHERE Age = (SELECT MAX(Age) FROM artist);", "gold_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "source_tables": ["artist"]}
{"sample_id": 6180, "db_id": "music_4", "question": "Return the famous release date for the oldest artist.", "rationale": ["Identify the table that contains the information about artists, which is the 'artist' table.", "We need to find the oldest artist, so we will sort the artists by their age in ascending order.", "To get the oldest artist, we will limit the results to 1 after sorting.", "The required information is the 'Famous_Release_date', so we will select that column in our query."], "pred_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age ASC LIMIT 1;", "gold_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "source_tables": ["artist"]}
{"sample_id": 6181, "db_id": "music_4", "question": "Please show the categories of the music festivals and the count.", "rationale": ["Identify the table that contains the required information: 'music_festival' has the 'Category' column.", "To get the count of each category, we need to use the COUNT() function.", "We will group the results by 'Category' to get the count for each distinct category.", "The final SQL query will select the 'Category' and the count of occurrences of each category from the 'music_festival' table."], "pred_sql": "SELECT Category, COUNT(*) AS Count FROM music_festival GROUP BY Category;", "gold_sql": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category", "source_tables": ["music_festival"]}
{"sample_id": 6182, "db_id": "music_4", "question": "Return the number of music festivals of each category.", "rationale": ["Identify the table that contains the relevant data: music_festival.", "Determine the columns needed: Category for grouping and a count of entries for each category.", "Use the COUNT() function to count the number of music festivals in each category.", "Group the results by the Category column to get the count for each distinct category."], "pred_sql": "SELECT Category, COUNT(*) AS Number_of_Festivals FROM music_festival GROUP BY Category;", "gold_sql": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category", "source_tables": ["music_festival"]}
{"sample_id": 6183, "db_id": "music_4", "question": "What is the most common result of the music festival?", "rationale": ["Identify the table that contains the results of the music festival, which is the 'music_festival' table.", "To find the most common result, we need to count the occurrences of each result in the 'Result' column.", "We will use the COUNT() function to count how many times each result appears.", "We will group the results by the 'Result' column to aggregate the counts for each unique result.", "To get the most common result, we will order the results by the count in descending order.", "Finally, we will limit the results to 1 to get only the most common result."], "pred_sql": "SELECT Result, COUNT(Result) AS Count FROM music_festival GROUP BY Result ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["music_festival"]}
{"sample_id": 6184, "db_id": "music_4", "question": "Return the result that is most frequent at music festivals.", "rationale": ["Identify the tables involved: music_festival, volume, and artist.", "We need to find the most frequent result at music festivals, which implies counting occurrences of artists in the music_festival table.", "Join the music_festival table with the volume table on the Volume column, and then join the volume table with the artist table on the Artist_ID column to get artist names.", "Use COUNT(*) to count the number of occurrences of each artist in the music_festival table.", "Group the results by artist to aggregate the counts for each artist.", "Order the results by the count in descending order to get the most frequent artist at the top.", "Limit the results to 1 to get only the most frequent artist."], "pred_sql": "SELECT Artist, COUNT(*) as Frequency FROM music_festival mf JOIN volume v ON mf.Volume = v.Volume_ID JOIN artist a ON v.Artist_ID = a.Artist_ID GROUP BY Artist ORDER BY Frequency DESC LIMIT 1;", "gold_sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["music_festival"]}
{"sample_id": 6185, "db_id": "music_4", "question": "Please show the categories of the music festivals with count more than 1.", "rationale": ["Identify the table that contains the relevant data: 'music_festival'.", "Determine the column that contains the categories: 'Category'.", "Use the COUNT function to count occurrences of each category.", "Group the results by 'Category' to aggregate the counts.", "Use the HAVING clause to filter the results to only include categories with a count greater than 1."], "pred_sql": "SELECT Category, COUNT(*) as Count FROM music_festival GROUP BY Category HAVING COUNT(*) > 1;", "gold_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1", "source_tables": ["music_festival"]}
{"sample_id": 6186, "db_id": "music_4", "question": "What are the categories of music festivals for which there have been more than 1 music festival?", "rationale": ["Identify the table that contains the relevant information about music festivals, which is the 'music_festival' table.", "We need to find the 'Category' of music festivals.", "To find categories with more than one festival, we will use the GROUP BY clause on the 'Category' column.", "We will use the COUNT function to count the number of music festivals in each category.", "The HAVING clause will filter the results to only include categories where the count of music festivals is greater than 1."], "pred_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(ID) > 1;", "gold_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1", "source_tables": ["music_festival"]}
{"sample_id": 6187, "db_id": "music_4", "question": "What is the song in the volume with the maximum weeks on top?", "rationale": ["Identify the table that contains the information about songs and their weeks on top, which is the 'volume' table.", "To find the song with the maximum weeks on top, we need to select the 'Song' column from the 'volume' table.", "We need to determine the maximum value of 'Weeks_on_Top' in the 'volume' table, which can be done using a subquery that selects the maximum of 'Weeks_on_Top'.", "The final query will select the 'Song' from the 'volume' table where the 'Weeks_on_Top' is equal to the maximum value obtained from the subquery."], "pred_sql": "SELECT Song FROM volume WHERE Weeks_on_Top = (SELECT MAX(Weeks_on_Top) FROM volume);", "gold_sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "source_tables": ["volume"]}
{"sample_id": 6188, "db_id": "music_4", "question": "Return the song in the volume that has spent the most weeks on top?", "rationale": ["Identify the table that contains the information about songs and their weeks on top, which is the 'volume' table.", "To find the song that has spent the most weeks on top, we need to select the 'Song' column from the 'volume' table.", "We need to determine the maximum value of 'Weeks_on_Top' to find the song that corresponds to this value.", "This can be done using a subquery that selects the maximum 'Weeks_on_Top' from the 'volume' table.", "Finally, we will select the 'Song' where 'Weeks_on_Top' matches the maximum value found in the subquery."], "pred_sql": "SELECT Song FROM volume WHERE Weeks_on_Top = (SELECT MAX(Weeks_on_Top) FROM volume)", "gold_sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "source_tables": ["volume"]}
{"sample_id": 6189, "db_id": "music_4", "question": "Find the famous titles of artists that do not have any volume.", "rationale": ["Identify the relevant tables: 'artist' and 'volume'.", "We need to find artists who do not have any associated volume, which means we need to look for artists whose IDs do not appear in the 'volume' table.", "To achieve this, we can use a LEFT JOIN between the 'artist' table and the 'volume' table on the 'Artist_ID'.", "In the WHERE clause, we will filter for records where 'volume.Artist_ID' is NULL, indicating that there are no matching records in the 'volume' table for those artists.", "Finally, we select the 'Famous_Title' from the 'artist' table for those artists who do not have any volume."], "pred_sql": "SELECT artist.Famous_Title FROM artist LEFT JOIN volume ON artist.Artist_ID = volume.Artist_ID WHERE volume.Artist_ID IS NULL;", "gold_sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)", "source_tables": ["artist", "volume"]}
{"sample_id": 6190, "db_id": "music_4", "question": "What are the famous titles of artists who do not have any volumes?", "rationale": ["Identify the relevant tables: 'artist' and 'volume'.", "We need to find artists who do not have any associated volumes, which means we need to perform a LEFT JOIN between 'artist' and 'volume'.", "In the LEFT JOIN, we will check for cases where the 'Artist_ID' in the 'volume' table is NULL, indicating that there are no volumes for that artist.", "Select the 'Famous_Title' from the 'artist' table for those artists who meet the criteria."], "pred_sql": "SELECT artist.Famous_Title FROM artist LEFT JOIN volume ON artist.Artist_ID = volume.Artist_ID WHERE volume.Artist_ID IS NULL;", "gold_sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)", "source_tables": ["artist", "volume"]}
{"sample_id": 6191, "db_id": "music_4", "question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.", "rationale": ["Identify the relevant tables: 'artist' for artist details and 'volume' for song performance.", "We need to select the 'Famous_Title' from the 'artist' table.", "Join the 'artist' table with the 'volume' table on 'Artist_ID' to link artists with their song performance.", "Filter the results to include only those volumes where 'Weeks_on_Top' is greater than 2 or less than 2."], "pred_sql": "SELECT a.Famous_Title \nFROM artist a \nJOIN volume v ON a.Artist_ID = v.Artist_ID \nWHERE v.Weeks_on_Top > 2 \n   OR v.Weeks_on_Top < 2;", "gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "source_tables": ["artist", "volume"]}
{"sample_id": 6192, "db_id": "music_4", "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?", "rationale": ["Identify the columns needed: We need the 'Famous_Title' from the 'artist' table.", "Join the 'artist' table with the 'volume' table on 'Artist_ID' to access the volume data for each artist.", "We need to filter artists based on their volume performance, specifically those who have volumes that spent more than 2 weeks on top and also those that spent less than 2 weeks on top.", "To achieve this, we can use a subquery that groups by 'Artist_ID' and uses conditional aggregation to count the number of volumes that meet each condition (more than 2 weeks and less than 2 weeks).", "The outer query will select distinct 'Famous_Title' for artists that meet the criteria defined in the subquery."], "pred_sql": "SELECT DISTINCT a.Famous_Title \nFROM artist a \nJOIN volume v ON a.Artist_ID = v.Artist_ID \nWHERE a.Artist_ID IN (\n    SELECT Artist_ID \n    FROM volume \n    GROUP BY Artist_ID \n    HAVING SUM(CASE WHEN Weeks_on_Top > 2 THEN 1 ELSE 0 END) > 0 \n    AND SUM(CASE WHEN Weeks_on_Top < 2 THEN 1 ELSE 0 END) > 0\n)", "gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "source_tables": ["artist", "volume"]}
{"sample_id": 6193, "db_id": "music_4", "question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?", "rationale": ["Identify the table that contains the required information: 'music_festival'.", "Determine the columns needed: 'Date_of_ceremony'.", "Specify the conditions for filtering the results: 'Category' must be 'Best Song' and 'Result' must be 'Awarded'.", "Construct the SQL SELECT statement to retrieve the 'Date_of_ceremony' based on the specified conditions."], "pred_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND Result = 'Awarded';", "gold_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  'Best Song' AND RESULT  =  'Awarded'", "source_tables": ["music_festival"]}
{"sample_id": 6194, "db_id": "music_4", "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".", "rationale": ["Identify the table that contains the required information: music_festival.", "Determine the columns needed: Date_of_ceremony, Category, and Result.", "Filter the results based on the specified conditions: Category must be 'Best Song' and Result must be 'Awarded'.", "Construct the SQL SELECT statement to retrieve the Date_of_ceremony from the music_festival table with the specified conditions."], "pred_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND Result = 'Awarded';", "gold_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  'Best Song' AND RESULT  =  'Awarded'", "source_tables": ["music_festival"]}
{"sample_id": 6195, "db_id": "music_4", "question": "What is the issue date of the volume with the minimum weeks on top?", "rationale": ["Identify the table that contains the 'Weeks_on_Top' and 'Issue_Date' columns, which is the 'volume' table.", "To find the issue date of the volume with the minimum weeks on top, we need to first determine the minimum value of 'Weeks_on_Top'.", "We can achieve this by using a subquery that selects the minimum 'Weeks_on_Top' from the 'volume' table.", "Once we have the minimum weeks on top, we can select the 'Issue_Date' from the 'volume' table where 'Weeks_on_Top' matches this minimum value."], "pred_sql": "SELECT Issue_Date FROM volume WHERE Weeks_on_Top = (SELECT MIN(Weeks_on_Top) FROM volume);", "gold_sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "source_tables": ["volume"]}
{"sample_id": 6196, "db_id": "music_4", "question": "Return the issue date of the volume that has spent the fewest weeks on top.", "rationale": ["Identify the table that contains the issue date and weeks on top, which is the 'volume' table.", "To find the volume that has spent the fewest weeks on top, we need to sort the records in the 'volume' table by the 'Weeks_on_Top' column in ascending order.", "After sorting, we only need the first record, which can be achieved using 'LIMIT 1'.", "Finally, we select the 'Issue_Date' from the resulting record."], "pred_sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1;", "gold_sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "source_tables": ["volume"]}
{"sample_id": 6197, "db_id": "music_4", "question": "How many distinct artists have volumes?", "rationale": ["Identify the need to count distinct artists who have associated volumes.", "Recognize that the 'artist' table contains artist information and the 'volume' table contains volume information linked by 'Artist_ID'.", "Use a JOIN operation to combine the 'artist' and 'volume' tables based on the 'Artist_ID'.", "Select the distinct 'Artist_ID' from the combined result to ensure each artist is counted only once.", "Count the number of distinct artists and return this count as the result."], "pred_sql": "SELECT COUNT(DISTINCT artist.Artist_ID) AS distinct_artists_with_volumes\nFROM artist\nJOIN volume ON artist.Artist_ID = volume.Artist_ID;", "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}
{"sample_id": 6198, "db_id": "music_4", "question": "Count the number of artists who have had volumes.", "rationale": ["Identify the tables involved: 'artist' and 'volume'.", "Determine the relationship between the tables: 'volume' has a foreign key 'Artist_ID' that references 'artist'.", "To count the number of artists who have had volumes, we need to join the 'artist' table with the 'volume' table on 'Artist_ID'.", "Use COUNT(DISTINCT artist.Artist_ID) to ensure we count each artist only once, even if they have multiple volumes."], "pred_sql": "SELECT COUNT(DISTINCT artist.Artist_ID) AS Number_of_Artists FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID;", "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}
{"sample_id": 6199, "db_id": "music_4", "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.", "rationale": ["We need to show the results of music festivals for each artist.", "To do this, we will join the 'artist' table with the 'volume' table using the 'Artist_ID' foreign key.", "Next, we will join the 'volume' table with the 'music_festival' table using the 'Volume' foreign key.", "We will select the artist's name and count the number of music festivals associated with each artist.", "We will group the results by artist to get the count of festivals for each artist.", "Finally, we will order the results by the count of festivals in descending order."], "pred_sql": "SELECT artist.Artist, COUNT(music_festival.ID) AS Festival_Count\nFROM artist\nLEFT JOIN volume ON artist.Artist_ID = volume.Artist_ID\nLEFT JOIN music_festival ON volume.Volume_ID = music_festival.Volume\nGROUP BY artist.Artist\nORDER BY Festival_Count DESC;", "gold_sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "source_tables": ["music_festival"]}
{"sample_id": 6200, "db_id": "music_4", "question": "How many music festivals have had each kind of result, ordered descending by count?", "rationale": ["Identify the table that contains the results of music festivals, which is the 'music_festival' table.", "We need to count the occurrences of each unique result, so we will use the COUNT() function.", "To group the results by their type, we will use the GROUP BY clause on the 'Result' column.", "Finally, to order the results by the count in descending order, we will use the ORDER BY clause with 'Count' in descending order."], "pred_sql": "SELECT Result, COUNT(*) AS Count FROM music_festival GROUP BY Result ORDER BY Count DESC;", "gold_sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "source_tables": ["music_festival"]}
{"sample_id": 6201, "db_id": "music_4", "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?", "rationale": ["Identify the relevant tables: 'artist' and 'volume'.", "We need to find the issue dates of volumes, so we will select 'Issue_Date' from the 'volume' table.", "To filter the volumes associated with artists aged 23 or younger, we need to join the 'artist' table with the 'volume' table on 'Artist_ID'.", "The condition for filtering is that the 'Age' of the artist should be less than or equal to 23.", "Use DISTINCT to ensure that we get unique issue dates in case multiple volumes are associated with the same artist."], "pred_sql": "SELECT DISTINCT v.Issue_Date \nFROM volume v \nJOIN artist a ON v.Artist_ID = a.Artist_ID \nWHERE a.Age <= '23';", "gold_sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "source_tables": ["artist", "volume"]}
{"sample_id": 6202, "db_id": "music_4", "question": "Return the issue dates of volumes by artists who are at most 23 years old?", "rationale": ["Identify the relevant tables: 'volume' for issue dates and 'artist' for age.", "Determine the relationship between the tables: 'volume' has a foreign key 'Artist_ID' that links to 'artist'.", "Select the 'Issue_Date' from the 'volume' table.", "Filter the results to include only those artists whose age is 23 or younger."], "pred_sql": "SELECT v.Issue_Date FROM volume v JOIN artist a ON v.Artist_ID = a.Artist_ID WHERE a.Age <= '23';", "gold_sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "source_tables": ["artist", "volume"]}
{"sample_id": 6203, "db_id": "roller_coaster", "question": "How many roller coasters are there?", "rationale": ["The user wants to know the total number of roller coasters.", "To get this information, we need to count the entries in the 'roller_coaster' table.", "We will use the COUNT() function to count all rows in the 'roller_coaster' table.", "The SQL query will select the count and label it as 'total_roller_coasters'."], "pred_sql": "SELECT COUNT(*) AS total_roller_coasters FROM roller_coaster;", "gold_sql": "SELECT count(*) FROM roller_coaster", "source_tables": ["roller_coaster"]}
{"sample_id": 6204, "db_id": "roller_coaster", "question": "List the names of roller coasters by ascending order of length.", "rationale": ["Identify the table that contains the information about roller coasters, which is the 'roller_coaster' table.", "Determine the specific column needed for the output, which is 'Name' for the names of the roller coasters.", "Since the request is to list the names in ascending order of length, we need to include the 'Length' column for sorting purposes.", "Construct the SQL query to select the 'Name' column from the 'roller_coaster' table and order the results by the 'Length' column in ascending order."], "pred_sql": "SELECT Name FROM roller_coaster ORDER BY Length ASC;", "gold_sql": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC", "source_tables": ["roller_coaster"]}
{"sample_id": 6205, "db_id": "roller_coaster", "question": "What are the lengths and heights of roller coasters?", "rationale": ["Identify the required columns: Length and Height of roller coasters.", "Determine the table that contains this information: the roller_coaster table.", "Construct the SQL SELECT statement to retrieve the Length and Height columns from the roller_coaster table."], "pred_sql": "SELECT Length, Height FROM roller_coaster;", "gold_sql": "SELECT LENGTH ,  Height FROM roller_coaster", "source_tables": ["roller_coaster"]}
{"sample_id": 6206, "db_id": "roller_coaster", "question": "List the names of countries whose language is not \"German\".", "rationale": ["Identify the table that contains the country information, which is the 'country' table.", "Determine the relevant column that contains the language information, which is the 'Languages' column.", "Formulate a SQL query to select the 'Name' of countries where the 'Languages' column is not equal to 'German'."], "pred_sql": "SELECT Name FROM country WHERE Languages != 'German';", "gold_sql": "SELECT Name FROM country WHERE Languages != 'German'", "source_tables": ["country"]}
{"sample_id": 6207, "db_id": "roller_coaster", "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.", "rationale": ["Identify the relevant table: The 'roller_coaster' table contains the information about roller coasters, including their statuses, lengths, and heights.", "Determine the columns needed: We need the 'Status' column to show the statuses of the roller coasters.", "Set the conditions for the query: We want roller coasters that are either longer than 3300 meters or higher than 100 meters.", "Construct the SQL query: Use the SELECT statement to retrieve the 'Status' from the 'roller_coaster' table with the specified conditions using the WHERE clause."], "pred_sql": "SELECT Status FROM roller_coaster WHERE Length > 3300 OR Height > 100;", "gold_sql": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100", "source_tables": ["roller_coaster"]}
{"sample_id": 6208, "db_id": "roller_coaster", "question": "What are the speeds of the longest roller coaster?", "rationale": ["Identify the relevant table: roller_coaster, which contains the information about roller coasters including their speeds and lengths.", "Determine the requirement: We need to find the speeds of the longest roller coaster.", "To find the longest roller coaster, we need to identify the maximum length from the Length column in the roller_coaster table.", "Use a subquery to find the maximum length: (SELECT MAX(Length) FROM roller_coaster).", "Finally, select the Speed of the roller coaster(s) that have this maximum length using a WHERE clause."], "pred_sql": "SELECT Speed FROM roller_coaster WHERE Length = (SELECT MAX(Length) FROM roller_coaster)", "gold_sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1", "source_tables": ["roller_coaster"]}
{"sample_id": 6209, "db_id": "roller_coaster", "question": "What is the average speed of roller coasters?", "rationale": ["Identify the requirement: We need to calculate the average speed of roller coasters.", "Determine the relevant table: The 'roller_coaster' table contains the 'Speed' column which we need for our calculation.", "Use the AVG() function: This SQL function calculates the average of a numeric column.", "Construct the SQL query: We will select the average speed from the 'roller_coaster' table."], "pred_sql": "SELECT AVG(Speed) AS Average_Speed FROM roller_coaster;", "gold_sql": "SELECT avg(Speed) FROM roller_coaster", "source_tables": ["roller_coaster"]}
{"sample_id": 6210, "db_id": "roller_coaster", "question": "Show the different statuses and the numbers of roller coasters for each status.", "rationale": ["Identify the relevant table: The 'roller_coaster' table contains the 'Status' column and is where roller coaster data is stored.", "Determine the required information: We need to show different statuses and count the number of roller coasters for each status.", "Use the COUNT() function: This function will help us count the number of roller coasters for each unique status.", "Group the results: To get the count for each status, we will use the GROUP BY clause on the 'Status' column.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT Status, COUNT(*) AS Number_of_Roller_Coasters FROM roller_coaster GROUP BY Status;", "gold_sql": "SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status", "source_tables": ["roller_coaster"]}
{"sample_id": 6211, "db_id": "roller_coaster", "question": "Please show the most common status of roller coasters.", "rationale": ["Identify the relevant table: The 'roller_coaster' table contains the 'Status' column which we need to analyze.", "We need to count the occurrences of each status, so we will use the COUNT() function.", "To group the results by status, we will use the GROUP BY clause on the 'Status' column.", "To find the most common status, we will order the results in descending order based on the count of each status using ORDER BY Count DESC.", "Finally, we will limit the results to only the top result using LIMIT 1."], "pred_sql": "SELECT Status, COUNT(*) as Count FROM roller_coaster GROUP BY Status ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["roller_coaster"]}
{"sample_id": 6212, "db_id": "roller_coaster", "question": "List the status shared by more than two roller coaster.", "rationale": ["Identify the column of interest: 'Status' from the 'roller_coaster' table.", "We need to find statuses that are shared by more than two roller coasters.", "To achieve this, we will use the GROUP BY clause to group the results by 'Status'.", "We will then use the HAVING clause to filter these groups, keeping only those with a count greater than 2.", "The final SQL query will select the 'Status' from the grouped results where the count of roller coasters is greater than 2."], "pred_sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2;", "gold_sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2", "source_tables": ["roller_coaster"]}
{"sample_id": 6213, "db_id": "roller_coaster", "question": "Show the park of the roller coaster with the highest speed.", "rationale": ["Identify the table that contains the relevant information: the 'roller_coaster' table.", "Determine the column that holds the speed of the roller coasters: the 'Speed' column.", "To find the roller coaster with the highest speed, we need to use an aggregate function: MAX(Speed).", "We will use a subquery to find the maximum speed from the 'roller_coaster' table.", "Once we have the maximum speed, we will select the 'Park' column from the 'roller_coaster' table where the 'Speed' matches the maximum speed found in the subquery."], "pred_sql": "SELECT Park FROM roller_coaster WHERE Speed = (SELECT MAX(Speed) FROM roller_coaster)", "gold_sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1", "source_tables": ["roller_coaster"]}
{"sample_id": 6214, "db_id": "roller_coaster", "question": "Show the names of roller coasters and names of country they are in.", "rationale": ["Identify the tables involved: 'roller_coaster' and 'country'.", "Determine the columns needed: 'Name' from 'roller_coaster' and 'Name' from 'country'.", "Establish the relationship between the two tables using the foreign key 'Country_ID'.", "Construct the SQL SELECT statement to retrieve the desired columns from both tables using a JOIN operation."], "pred_sql": "SELECT roller_coaster.Name AS Roller_Coaster_Name, country.Name AS Country_Name FROM roller_coaster JOIN country ON roller_coaster.Country_ID = country.Country_ID;", "gold_sql": "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID", "source_tables": ["country", "roller_coaster"]}
{"sample_id": 6215, "db_id": "roller_coaster", "question": "Show the names of countries that have more than one roller coaster.", "rationale": ["We need to find countries that have more than one roller coaster.", "To do this, we will join the 'country' table with the 'roller_coaster' table on the 'Country_ID' column.", "Next, we will group the results by 'Country_ID' to aggregate the roller coasters for each country.", "We will use the COUNT function to count the number of roller coasters for each country.", "Finally, we will filter the results using the HAVING clause to only include countries with a count greater than 1."], "pred_sql": "SELECT c.Name FROM country c JOIN roller_coaster r ON c.Country_ID = r.Country_ID GROUP BY c.Country_ID HAVING COUNT(r.Roller_Coaster_ID) > 1;", "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "source_tables": ["country", "roller_coaster"]}
{"sample_id": 6216, "db_id": "roller_coaster", "question": "Show the name and population of the country that has the highest roller coaster.", "rationale": ["Identify the columns needed: 'Name' from the 'country' table and 'Population' from the 'country' table.", "Determine the relationship between the tables: 'roller_coaster' has a foreign key 'Country_ID' that links to 'country'.", "To find the country with the highest roller coaster, we need to find the maximum height from the 'roller_coaster' table.", "Use a subquery to get the maximum height of roller coasters.", "Join the 'country' table with the 'roller_coaster' table on 'Country_ID' to get the corresponding country for the highest roller coaster.", "Select the 'Name' and 'Population' of the country where the height of the roller coaster matches the maximum height found."], "pred_sql": "SELECT country.Name, country.Population \nFROM country \nJOIN roller_coaster ON country.Country_ID = roller_coaster.Country_ID \nWHERE roller_coaster.Height = (SELECT MAX(Height) FROM roller_coaster);", "gold_sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["country", "roller_coaster"]}
{"sample_id": 6217, "db_id": "roller_coaster", "question": "Show the names of countries and the average speed of roller coasters from each country.", "rationale": ["Identify the tables involved: 'roller_coaster' and 'country'.", "Determine the columns needed: 'Name' from 'country' and 'Speed' from 'roller_coaster'.", "To calculate the average speed, use the AVG() function on the 'Speed' column.", "Join the 'roller_coaster' table with the 'country' table using the 'Country_ID' foreign key.", "Group the results by country name to get the average speed for each country."], "pred_sql": "SELECT c.Name AS Country_Name, AVG(r.Speed) AS Average_Speed\nFROM country c\nJOIN roller_coaster r ON c.Country_ID = r.Country_ID\nGROUP BY c.Name;", "gold_sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name", "source_tables": ["country", "roller_coaster"]}
{"sample_id": 6218, "db_id": "roller_coaster", "question": "How many countries do not have an roller coaster longer than 3000?", "rationale": ["Identify the countries from the 'country' table.", "Join the 'roller_coaster' table to the 'country' table on 'Country_ID'.", "Filter the joined results to only include roller coasters longer than 3000 meters.", "Count the distinct countries where there are no roller coasters longer than 3000 meters by checking for NULL values in the roller coaster ID after the join."], "pred_sql": "SELECT COUNT(DISTINCT c.Country_ID) AS Country_Count\nFROM country c\nLEFT JOIN roller_coaster r ON c.Country_ID = r.Country_ID AND r.Length > 3000\nWHERE r.Roller_Coaster_ID IS NULL;", "gold_sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )", "source_tables": ["country", "roller_coaster"]}
{"sample_id": 6219, "db_id": "roller_coaster", "question": "What are the country names, area and population which has both roller coasters with speed higher", "rationale": ["Identify the relevant tables: We need data from both the 'country' and 'roller_coaster' tables.", "Determine the columns to select: We need the country names, area, and population from the 'country' table.", "Establish the relationship between the tables: The 'roller_coaster' table has a foreign key 'Country_ID' that links to the 'country' table.", "Filter the results: We want countries that have roller coasters with a speed higher than a certain threshold. Here, we can use the average speed of all roller coasters as a benchmark.", "Group the results by country to ensure we get unique entries for each country."], "pred_sql": "SELECT c.Name, c.Area, c.Population\nFROM country c\nJOIN roller_coaster r ON c.Country_ID = r.Country_ID\nWHERE r.Speed > (SELECT AVG(Speed) FROM roller_coaster) \nGROUP BY c.Country_ID, c.Name, c.Area, c.Population;", "gold_sql": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55", "source_tables": ["country", "roller_coaster"]}
{"sample_id": 6220, "db_id": "ship_1", "question": "How many different captain ranks are there?", "rationale": ["Identify the relevant table: The query pertains to captain ranks, so we will focus on the 'captain' table.", "Determine the required information: We need to count the distinct ranks of captains.", "Use the COUNT function: To find the number of different ranks, we will use COUNT(DISTINCT Rank).", "Construct the SQL query: We will select the count of distinct ranks from the captain table."], "pred_sql": "SELECT COUNT(DISTINCT Rank) AS Different_Captain_Ranks FROM captain;", "gold_sql": "SELECT count(DISTINCT rank) FROM captain", "source_tables": ["captain"]}
{"sample_id": 6221, "db_id": "ship_1", "question": "Count the number of different ranks of captain.", "rationale": ["Identify the goal: Count the number of different ranks of captain.", "Determine the relevant table: The 'captain' table contains the 'Rank' column.", "Use the COUNT function to count distinct values in the 'Rank' column.", "Construct the SQL query to select the count of distinct ranks from the captain table."], "pred_sql": "SELECT COUNT(DISTINCT Rank) AS Different_Rank_Count FROM captain;", "gold_sql": "SELECT count(DISTINCT rank) FROM captain", "source_tables": ["captain"]}
{"sample_id": 6222, "db_id": "ship_1", "question": "How many captains are in each rank?", "rationale": ["Identify the relevant table: The query pertains to the 'captain' table since it involves captains and their ranks.", "Determine the required information: We need to count the number of captains for each rank.", "Use the COUNT() function: This function will help us count the number of entries (captains) for each rank.", "Group the results: To get the count per rank, we will use the GROUP BY clause on the 'Rank' column.", "Construct the SQL query: Combine the SELECT statement with COUNT(), GROUP BY, and specify the table."], "pred_sql": "SELECT Rank, COUNT(*) AS Captain_Count FROM captain GROUP BY Rank;", "gold_sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "source_tables": ["captain"]}
{"sample_id": 6223, "db_id": "ship_1", "question": "Count the number of captains that have each rank.", "rationale": ["Identify the table that contains the relevant data: the 'captain' table holds information about captains, including their ranks.", "Determine the specific information needed: we need to count the number of captains for each rank.", "Use the COUNT() function to count the number of entries for each rank.", "Group the results by the 'Rank' column to get the count for each distinct rank.", "Construct the SQL query using the SELECT statement to retrieve the rank and the count of captains, along with the GROUP BY clause."], "pred_sql": "SELECT Rank, COUNT(*) AS Captain_Count FROM captain GROUP BY Rank;", "gold_sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "source_tables": ["captain"]}
{"sample_id": 6224, "db_id": "ship_1", "question": "How many captains with younger than 50 are in each rank?", "rationale": ["Identify the relevant table: The 'captain' table contains the information about captains, including their age and rank.", "Determine the condition: We need to filter captains who are younger than 50 years old. This is done using the WHERE clause with the condition 'age < '50'.", "Group the results: To count the number of captains in each rank, we will use the GROUP BY clause on the 'Rank' column.", "Count the captains: We will use the COUNT() function to count the number of captains for each rank that meets the age condition.", "Select the necessary columns: We will select the 'Rank' and the count of captains as 'Captain_Count'."], "pred_sql": "SELECT Rank, COUNT(*) AS Captain_Count FROM captain WHERE age < '50' GROUP BY Rank;", "gold_sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank", "source_tables": ["captain"]}
{"sample_id": 6225, "db_id": "ship_1", "question": "Count the number of captains younger than 50 of each rank.", "rationale": ["Identify the table to query: The 'captain' table contains the relevant information about captains.", "Determine the condition: We need to count captains younger than 50, which means we will filter the results where 'age' is less than '50'.", "Select the columns: We want to count the number of captains, so we will use COUNT(*) and also need to group the results by 'Rank'.", "Construct the SQL query: We will select 'Rank' and the count of captains, apply the WHERE clause for the age condition, and use GROUP BY to aggregate the results by rank."], "pred_sql": "SELECT Rank, COUNT(*) AS Captain_Count FROM captain WHERE age < '50' GROUP BY Rank;", "gold_sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank", "source_tables": ["captain"]}
{"sample_id": 6226, "db_id": "ship_1", "question": "Sort all captain names by their ages from old to young.", "rationale": ["Identify the table that contains the captain names, which is the 'captain' table.", "Determine the column that contains the ages of the captains, which is the 'age' column in the 'captain' table.", "To sort the captain names by age from old to young, we will use the ORDER BY clause with 'age' in descending order.", "Select the 'Name' column from the 'captain' table and apply the ORDER BY clause to sort the results accordingly."], "pred_sql": "SELECT Name FROM captain ORDER BY age DESC;", "gold_sql": "SELECT name FROM captain ORDER BY age DESC", "source_tables": ["captain"]}
{"sample_id": 6227, "db_id": "ship_1", "question": "What are the names of captains, sorted by age descending?", "rationale": ["Identify the table that contains the information about captains, which is the 'captain' table.", "Determine the specific column needed for the output, which is 'Name' for the names of the captains.", "Since the user wants the results sorted by age in descending order, we will use the 'ORDER BY' clause with 'age DESC'.", "Combine these elements to form the complete SQL query."], "pred_sql": "SELECT Name FROM captain ORDER BY age DESC;", "gold_sql": "SELECT name FROM captain ORDER BY age DESC", "source_tables": ["captain"]}
{"sample_id": 6228, "db_id": "ship_1", "question": "Find the name, class and rank of all captains.", "rationale": ["Identify the table that contains the required information, which is the 'captain' table.", "Determine the specific columns needed from the 'captain' table: 'Name', 'Class', and 'Rank'.", "Construct the SQL SELECT statement to retrieve these columns from the 'captain' table."], "pred_sql": "SELECT Name, Class, Rank FROM captain;", "gold_sql": "SELECT name ,  CLASS ,  rank FROM captain", "source_tables": ["captain"]}
{"sample_id": 6229, "db_id": "ship_1", "question": "What are the names, classes, and ranks of all captains?", "rationale": ["Identify the table that contains the required information: the 'captain' table.", "Determine the specific columns needed: 'Name', 'Class', and 'Rank'.", "Construct the SQL SELECT statement to retrieve these columns from the 'captain' table."], "pred_sql": "SELECT Name, Class, Rank FROM captain;", "gold_sql": "SELECT name ,  CLASS ,  rank FROM captain", "source_tables": ["captain"]}
{"sample_id": 6230, "db_id": "ship_1", "question": "Which rank is the most common among captains?", "rationale": ["Identify the column of interest: 'Rank' from the 'captain' table.", "To find the most common rank, we need to count the occurrences of each rank.", "Use the COUNT() function to count the number of captains for each rank.", "Group the results by 'Rank' to aggregate the counts for each rank.", "Order the results in descending order based on the count to get the most common rank at the top.", "Limit the results to 1 to get only the most common rank."], "pred_sql": "SELECT Rank, COUNT(*) as Count FROM captain GROUP BY Rank ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1", "source_tables": ["captain"]}
{"sample_id": 6231, "db_id": "ship_1", "question": "Return the rank for which there are the fewest captains.", "rationale": ["Identify the column of interest, which is 'Rank' from the 'captain' table.", "We need to count the number of captains for each rank, so we will use the COUNT function on 'Captain_ID'.", "Group the results by 'Rank' to get the count of captains for each rank.", "Order the results in ascending order based on the count of captains to find the rank with the fewest captains.", "Limit the results to 1 to get only the rank with the fewest captains."], "pred_sql": "SELECT Rank FROM captain GROUP BY Rank ORDER BY COUNT(Captain_ID) ASC LIMIT 1;", "gold_sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1", "source_tables": ["captain"]}
{"sample_id": 6232, "db_id": "ship_1", "question": "Which classes have more than two captains?", "rationale": ["Identify the relevant table: The query pertains to the 'captain' table since we are interested in the classes of captains.", "Determine the required information: We need to find classes that have more than two captains.", "Use the GROUP BY clause: To group the results by the 'Class' column, which allows us to count the number of captains in each class.", "Count the captains: Use the COUNT function to count the number of 'Captain_ID' entries for each class.", "Filter the results: Use the HAVING clause to filter the groups to only include those where the count of captains is greater than two."], "pred_sql": "SELECT Class FROM captain GROUP BY Class HAVING COUNT(Captain_ID) > 2;", "gold_sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2", "source_tables": ["captain"]}
{"sample_id": 6233, "db_id": "ship_1", "question": "Give the classes that have more than two captains.", "rationale": ["Identify the relevant table: The 'captain' table contains the information about captains and their classes.", "Determine the required information: We need to find classes that have more than two captains.", "Use the GROUP BY clause: This will allow us to group the results by the 'Class' column.", "Count the number of captains in each class: We will use the COUNT function to count the 'Captain_ID' for each class.", "Filter the results: We will use the HAVING clause to filter the groups where the count of captains is greater than two."], "pred_sql": "SELECT Class FROM captain GROUP BY Class HAVING COUNT(Captain_ID) > 2;", "gold_sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2", "source_tables": ["captain"]}
{"sample_id": 6234, "db_id": "ship_1", "question": "Find the name of captains whose rank are either Midshipman or Lieutenant.", "rationale": ["Identify the table to query: The 'captain' table contains the relevant information about captains.", "Determine the columns needed: We need the 'Name' of the captains.", "Identify the condition: We are looking for captains whose 'Rank' is either 'Midshipman' or 'Lieutenant'.", "Use the SQL 'SELECT' statement to retrieve the 'Name' from the 'captain' table.", "Apply the 'WHERE' clause to filter the results based on the specified ranks using the 'IN' operator."], "pred_sql": "SELECT Name FROM captain WHERE Rank IN ('Midshipman', 'Lieutenant');", "gold_sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'", "source_tables": ["captain"]}
{"sample_id": 6235, "db_id": "ship_1", "question": "What are the names of captains that have either the rank Midshipman or Lieutenant?", "rationale": ["Identify the table that contains the information about captains, which is the 'captain' table.", "Determine the relevant column that contains the rank of the captains, which is the 'Rank' column.", "The query requires captains with ranks of either 'Midshipman' or 'Lieutenant'.", "Use the SQL 'SELECT' statement to retrieve the 'Name' of the captains from the 'captain' table.", "Apply a 'WHERE' clause to filter the results based on the 'Rank' column, using the 'IN' operator to specify the two ranks of interest."], "pred_sql": "SELECT Name FROM captain WHERE Rank IN ('Midshipman', 'Lieutenant');", "gold_sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'", "source_tables": ["captain"]}
{"sample_id": 6236, "db_id": "ship_1", "question": "What are the average and minimum age of captains in different class?", "rationale": ["Identify the relevant table: The query pertains to captains, so we will use the 'captain' table.", "Determine the required fields: We need to calculate the average and minimum age of captains, grouped by their class. This means we will select the 'Class' column and apply aggregate functions on the 'age' column.", "Use aggregate functions: We will use AVG() to calculate the average age and MIN() to find the minimum age.", "Group the results: Since we want the results by class, we will use GROUP BY on the 'Class' column."], "pred_sql": "SELECT Class, AVG(age) AS Average_Age, MIN(age) AS Minimum_Age FROM captain GROUP BY Class;", "gold_sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "source_tables": ["captain"]}
{"sample_id": 6237, "db_id": "ship_1", "question": "Return the average and minimum age of captains in each class.", "rationale": ["Identify the columns needed: We need the 'Class' of the captain, the average age, and the minimum age.", "Use the AVG() function to calculate the average age of captains.", "Use the MIN() function to find the minimum age of captains.", "Group the results by 'Class' to get the average and minimum age for each class of captains."], "pred_sql": "SELECT Class, AVG(age) AS Average_Age, MIN(age) AS Minimum_Age FROM captain GROUP BY Class;", "gold_sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "source_tables": ["captain"]}
{"sample_id": 6238, "db_id": "ship_1", "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.", "rationale": ["Identify the relevant tables: 'captain' and 'Ship'.", "We need to find captains who have ships in both 'Cutter' and 'Armed schooner' classes.", "Join the 'captain' table with the 'Ship' table on the Ship_ID to access ship classes for each captain.", "Filter the results to include only those ships that belong to the 'Cutter' or 'Armed schooner' classes.", "Group the results by captain rank to aggregate the data based on rank.", "Use the HAVING clause to ensure that we only select ranks that have captains with ships in both classes, which means we need a count of distinct classes equal to 2."], "pred_sql": "SELECT DISTINCT c.Rank FROM captain c JOIN Ship s ON c.Ship_ID = s.Ship_ID WHERE s.Class IN ('Cutter', 'Armed schooner') GROUP BY c.Rank HAVING COUNT(DISTINCT s.Class) = 2;", "gold_sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'", "source_tables": ["captain"]}
{"sample_id": 6239, "db_id": "ship_1", "question": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?", "rationale": ["Identify the relevant tables: 'captain' and 'Ship'.", "Determine the columns needed: 'Rank' from 'captain' and 'Class' from 'Ship'.", "Establish the relationship between the tables using the foreign key: 'captain.Ship_ID' = 'Ship.Ship_ID'.", "Filter the results to include only those ships that belong to the 'Cutter' and 'Armed schooner' classes.", "Use DISTINCT to ensure that each rank is listed only once."], "pred_sql": "SELECT DISTINCT c.Rank FROM captain c JOIN Ship s ON c.Ship_ID = s.Ship_ID WHERE s.Class IN ('Cutter', 'Armed schooner');", "gold_sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'", "source_tables": ["captain"]}
{"sample_id": 6240, "db_id": "ship_1", "question": "Find the captain rank that has no captain in Third-rate ship of the line class.", "rationale": ["Identify the relevant class of ships, which is 'Third-rate ship of the line'.", "Find all Ship_IDs that belong to this class by querying the Ship table.", "Use the result of the previous step to filter the captain table for ranks that do not have any associated captain in the specified ship class.", "Select distinct ranks from the captain table where the Ship_ID is not in the list of Ship_IDs from the previous query."], "pred_sql": "SELECT DISTINCT Rank FROM captain WHERE Ship_ID NOT IN (SELECT Ship_ID FROM Ship WHERE Class = 'Third-rate ship of the line')", "gold_sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'", "source_tables": ["captain"]}
{"sample_id": 6241, "db_id": "ship_1", "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?", "rationale": ["Identify the relevant tables: 'captain' and 'Ship'.", "We need to find ranks of captains, so we will select the 'Rank' column from the 'captain' table.", "We need to join the 'captain' table with the 'Ship' table on the 'Ship_ID' column to access ship details.", "Filter the results to include only those ships that belong to the 'Third-rate ship of the line' class by checking the 'Class' column in the 'Ship' table.", "We need to ensure that the captains have no other captains, which implies that we should check if the 'Captain_ID' is not present in the list of all 'Captain_ID's in the 'captain' table.", "Use a subquery to find all 'Captain_ID's in the 'captain' table and ensure that the selected 'Captain_ID' is not in that list."], "pred_sql": "SELECT DISTINCT c.Rank FROM captain c JOIN Ship s ON c.Ship_ID = s.Ship_ID WHERE s.Class = 'Third-rate ship of the line' AND c.Captain_ID NOT IN (SELECT Captain_ID FROM captain)", "gold_sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'", "source_tables": ["captain"]}
{"sample_id": 6242, "db_id": "ship_1", "question": "What is the name of the youngest captain?", "rationale": ["Identify the table that contains the information about captains, which is the 'captain' table.", "To find the youngest captain, we need to sort the captains by their age in ascending order.", "We will use the 'ORDER BY' clause to sort the 'age' column.", "To get only the youngest captain, we will limit the results to 1 using 'LIMIT 1'.", "Finally, we will select the 'Name' column to get the name of the youngest captain."], "pred_sql": "SELECT Name FROM captain ORDER BY age ASC LIMIT 1;", "gold_sql": "SELECT name FROM captain ORDER BY age LIMIT 1", "source_tables": ["captain"]}
{"sample_id": 6243, "db_id": "ship_1", "question": "Return the name of the youngest captain.", "rationale": ["Identify the table that contains the captain's information, which is the 'captain' table.", "To find the youngest captain, we need to sort the captains by their age in ascending order.", "We will use the ORDER BY clause to sort the 'age' column.", "To get only the youngest captain, we will limit the results to 1 using the LIMIT clause."], "pred_sql": "SELECT Name FROM captain ORDER BY age ASC LIMIT 1;", "gold_sql": "SELECT name FROM captain ORDER BY age LIMIT 1", "source_tables": ["captain"]}
{"sample_id": 6244, "db_id": "ship_1", "question": "how many ships are there?", "rationale": ["The user wants to know the total number of ships.", "To get the count of ships, we need to use the COUNT() function in SQL.", "We will select from the 'Ship' table since it contains the information about ships.", "The SQL query will be 'SELECT COUNT(*) AS total_ships FROM Ship;' to count all entries in the Ship table."], "pred_sql": "SELECT COUNT(*) AS total_ships FROM Ship;", "gold_sql": "SELECT count(*) FROM ship", "source_tables": ["ship"]}
{"sample_id": 6245, "db_id": "ship_1", "question": "Count the number of ships.", "rationale": ["Identify the requirement to count the number of ships.", "Determine the relevant table, which is 'Ship', for counting the ships.", "Use the COUNT() function to count the total number of entries in the 'Ship' table.", "Construct the SQL query to select the count from the 'Ship' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfShips FROM Ship;", "gold_sql": "SELECT count(*) FROM ship", "source_tables": ["ship"]}
{"sample_id": 6246, "db_id": "ship_1", "question": "Find the name, type, and flag of the ship that is built in the most recent year.", "rationale": ["Identify the columns needed: Name, Type, and Flag from the Ship table.", "Determine the condition to find the most recent ship: it should be the one with the maximum Built_Year.", "Use a subquery to find the maximum Built_Year from the Ship table.", "Select the Name, Type, and Flag from the Ship table where the Built_Year matches the maximum value found in the subquery."], "pred_sql": "SELECT Name, Type, Flag FROM Ship WHERE Built_Year = (SELECT MAX(Built_Year) FROM Ship);", "gold_sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1", "source_tables": ["ship"]}
{"sample_id": 6247, "db_id": "ship_1", "question": "What is the name, type, and flag of the ship that was built in the most recent year?", "rationale": ["Identify the columns needed: Name, Type, and Flag from the Ship table.", "Determine the condition: we need the ship built in the most recent year.", "To find the most recent year, we can use a subquery to get the maximum Built_Year from the Ship table.", "Combine the selection of columns with the condition using a WHERE clause that checks for the Built_Year equal to the maximum year found."], "pred_sql": "SELECT Name, Type, Flag FROM Ship WHERE Built_Year = (SELECT MAX(Built_Year) FROM Ship);", "gold_sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1", "source_tables": ["ship"]}
{"sample_id": 6248, "db_id": "ship_1", "question": "Group by ships by flag, and return number of ships that have each flag.", "rationale": ["Identify the table to query: The request is about ships, so we will use the 'Ship' table.", "Determine the columns needed: We need the 'Flag' column to group by and we need to count the number of ships for each flag.", "Use the COUNT() function to count the number of ships for each flag.", "Group the results by the 'Flag' column using GROUP BY.", "Construct the SQL query to select the 'Flag' and the count of ships, grouping by 'Flag'."], "pred_sql": "SELECT Flag, COUNT(*) AS Number_of_Ships FROM Ship GROUP BY Flag;", "gold_sql": "SELECT count(*) ,  flag FROM ship GROUP BY flag", "source_tables": ["ship"]}
{"sample_id": 6249, "db_id": "ship_1", "question": "What are the different ship flags, and how many ships have each?", "rationale": ["Identify the relevant table: The query is asking about ship flags, which are found in the Ship table under the 'Flag' column.", "Determine the required information: We need to retrieve distinct ship flags and count how many ships correspond to each flag.", "Use the COUNT function: To count the number of ships for each flag, we will use the COUNT(*) function.", "Group the results: To get the count of ships for each flag, we will use the GROUP BY clause on the 'Flag' column.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT Flag, COUNT(*) AS Ship_Count FROM Ship GROUP BY Flag;", "gold_sql": "SELECT count(*) ,  flag FROM ship GROUP BY flag", "source_tables": ["ship"]}
{"sample_id": 6250, "db_id": "ship_1", "question": "Which flag is most widely used among all ships?", "rationale": ["Identify the relevant table: The query is about ships, so we will use the 'Ship' table.", "Determine the required information: We need to find out which flag is most widely used, which implies counting occurrences of each flag.", "Use the COUNT function: We will count the number of ships for each flag using COUNT(*) and group the results by the 'Flag' column.", "Order the results: To find the most widely used flag, we will order the results in descending order based on the count of ships for each flag.", "Limit the results: Since we only need the most widely used flag, we will limit the results to 1."], "pred_sql": "SELECT Flag, COUNT(*) as Flag_Count FROM Ship GROUP BY Flag ORDER BY Flag_Count DESC LIMIT 1;", "gold_sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship"]}
{"sample_id": 6251, "db_id": "ship_1", "question": "Return the flag that is most common among all ships.", "rationale": ["Identify the table that contains the flag information, which is the 'Ship' table.", "To find the most common flag, we need to group the results by the 'Flag' column.", "We will count the occurrences of each flag using COUNT(*) and order the results in descending order to get the most common flag at the top.", "Finally, we will limit the results to just one entry using LIMIT 1 to get the most common flag."], "pred_sql": "SELECT Flag FROM Ship GROUP BY Flag ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship"]}
{"sample_id": 6252, "db_id": "ship_1", "question": "List all ship names in the order of built year and class.", "rationale": ["Identify the table to query: The request is to list ship names, so we will query the 'Ship' table.", "Select the relevant column: We need to select the 'Name' column from the 'Ship' table.", "Determine the order of results: The request specifies to order the results by 'Built_Year' and then by 'Class'.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT Name FROM Ship ORDER BY Built_Year, Class;", "gold_sql": "SELECT name FROM ship ORDER BY built_year ,  CLASS", "source_tables": ["ship"]}
{"sample_id": 6253, "db_id": "ship_1", "question": "What are the names of ships, ordered by year they were built and their class?", "rationale": ["Identify the table to query: The query asks for ship names, which are found in the 'Ship' table.", "Select the relevant column: We need to select the 'Name' column from the 'Ship' table.", "Determine the ordering criteria: The ships should be ordered by 'Built_Year' first and then by 'Class'.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT Name FROM Ship ORDER BY Built_Year, Class;", "gold_sql": "SELECT name FROM ship ORDER BY built_year ,  CLASS", "source_tables": ["ship"]}
{"sample_id": 6254, "db_id": "ship_1", "question": "Find the ship type that are used by both ships with Panama and Malta flags.", "rationale": ["Identify the requirement: We need to find the ship types used by ships registered under both Panama and Malta flags.", "Understand the schema: We have a 'Ship' table with a 'Type' column and a 'Flag' column.", "To find common ship types, we can use a self-join on the 'Ship' table where we compare the types of two different ships.", "The first instance of the Ship table (s1) will filter for ships with the Panama flag, and the second instance (s2) will filter for ships with the Malta flag.", "We will select the distinct types from the first instance where the types match between the two instances."], "pred_sql": "SELECT DISTINCT s1.Type\nFROM Ship s1\nJOIN Ship s2 ON s1.Type = s2.Type\nWHERE s1.Flag = 'Panama' AND s2.Flag = 'Malta';", "gold_sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'", "source_tables": ["ship"]}
{"sample_id": 6255, "db_id": "ship_1", "question": "What types of ships have both ships that have Panama Flags and Malta flags?", "rationale": ["Identify the relevant table: The query involves ships, so we will be working with the 'Ship' table.", "Determine the conditions: We need to find ships that have both Panama and Malta flags.", "Use the 'Flag' column to filter ships: We will filter the ships based on the 'Flag' column for 'Panama' and 'Malta'.", "Group the results by ship type: We will group the results by the 'Type' column to get distinct ship types.", "Count the distinct flags: We will use a HAVING clause to ensure that we only select those ship types that have both flags, which means we need to count distinct flags and ensure it equals 2."], "pred_sql": "SELECT DISTINCT s.Type FROM Ship s WHERE s.Flag = 'Panama' OR s.Flag = 'Malta' GROUP BY s.Type HAVING COUNT(DISTINCT s.Flag) = 2;", "gold_sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'", "source_tables": ["ship"]}
{"sample_id": 6256, "db_id": "ship_1", "question": "In which year were most of ships built?", "rationale": ["Identify the relevant table: The query is about ships, so we will use the 'Ship' table.", "Determine the required information: We need to find out the year in which the most ships were built.", "Count the number of ships built in each year: This can be done using the COUNT() function and grouping by 'Built_Year'.", "Order the results by the count of ships in descending order to find the year with the most ships.", "Limit the results to 1 to get only the year with the highest count."], "pred_sql": "SELECT Built_Year, COUNT(*) as Ship_Count FROM Ship GROUP BY Built_Year ORDER BY Ship_Count DESC LIMIT 1;", "gold_sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship"]}
{"sample_id": 6257, "db_id": "ship_1", "question": "What is the year in which most ships were built?", "rationale": ["Identify the relevant table: The query is about ships, so we will use the 'Ship' table.", "Determine the required information: We need to find the year with the most ships built, which involves counting the number of ships for each built year.", "Group the results by the 'Built_Year' to aggregate the count of ships for each year.", "Use the COUNT function to count the number of ships for each built year.", "Order the results in descending order based on the count of ships to find the year with the maximum count.", "Limit the results to 1 to get only the year with the most ships built."], "pred_sql": "SELECT Built_Year, COUNT(*) as Ship_Count FROM Ship GROUP BY Built_Year ORDER BY Ship_Count DESC LIMIT 1;", "gold_sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship"]}
{"sample_id": 6258, "db_id": "ship_1", "question": "Find the name of the ships that have more than one captain.", "rationale": ["Identify the tables involved: We need data from both the 'Ship' and 'captain' tables.", "Determine the relationship: The 'captain' table has a foreign key 'Ship_ID' that relates to the 'Ship' table's 'Ship_ID'.", "We want to find ships with more than one captain, so we will use a JOIN to combine the two tables based on 'Ship_ID'.", "To find ships with multiple captains, we will group the results by 'Ship_ID' and count the number of distinct 'Captain_ID's for each ship.", "We will use the HAVING clause to filter groups that have a count greater than 1, indicating more than one captain for that ship.", "Finally, we will select the 'Name' of the ships from the 'Ship' table."], "pred_sql": "SELECT Ship.Name FROM Ship JOIN captain ON Ship.Ship_ID = captain.Ship_ID GROUP BY Ship.Ship_ID HAVING COUNT(captain.Captain_ID) > 1;", "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "source_tables": ["captain", "ship"]}
{"sample_id": 6259, "db_id": "ship_1", "question": "What are the names of ships that have more than one captain?", "rationale": ["Identify the relevant tables: We need to look at both the 'Ship' and 'captain' tables to find the names of ships and their associated captains.", "Establish the relationship: The 'captain' table has a foreign key 'Ship_ID' that links to the 'Ship' table's 'Ship_ID'. We will use a JOIN to combine these tables based on this relationship.", "Select the ship names: We want to retrieve the 'Name' column from the 'Ship' table.", "Group by ship: To find ships with more than one captain, we need to group the results by 'Ship_ID' from the 'Ship' table.", "Count the captains: We will use the COUNT function to count the number of captains associated with each ship.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with a count greater than 1."], "pred_sql": "SELECT Ship.Name FROM Ship JOIN captain ON Ship.Ship_ID = captain.Ship_ID GROUP BY Ship.Ship_ID HAVING COUNT(captain.Captain_ID) > 1;", "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "source_tables": ["captain", "ship"]}
{"sample_id": 6260, "db_id": "ship_1", "question": "what are the names and classes of the ships that do not have any captain yet?", "rationale": ["We need to find ships that do not have any captains assigned to them.", "To do this, we will perform a LEFT JOIN between the Ship table and the captain table on the Ship_ID column.", "The LEFT JOIN will include all records from the Ship table and the matching records from the captain table. If there is no match, the result is NULL on the captain side.", "We will filter the results to include only those ships where the captain's Ship_ID is NULL, indicating that there is no captain for that ship.", "Finally, we will select the Name and Class columns from the Ship table for the output."], "pred_sql": "SELECT Ship.Name, Ship.Class FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Ship_ID IS NULL;", "gold_sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "source_tables": ["captain", "ship"]}
{"sample_id": 6261, "db_id": "ship_1", "question": "Return the names and classes of ships that do not have a captain?", "rationale": ["We need to retrieve the names and classes of ships that do not have a captain.", "To find ships without captains, we can use a LEFT JOIN between the Ship table and the captain table on the Ship_ID column.", "The LEFT JOIN will include all records from the Ship table and the matching records from the captain table. If there is no match, the result is NULL on the captain side.", "We can filter the results to only include ships where the captain's Ship_ID is NULL, indicating that there is no captain assigned to that ship.", "Finally, we select the Name and Class columns from the Ship table."], "pred_sql": "SELECT Ship.Name, Ship.Class FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Ship_ID IS NULL;", "gold_sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "source_tables": ["captain", "ship"]}
{"sample_id": 6262, "db_id": "ship_1", "question": "Find the name of the ship that is steered by the youngest captain.", "rationale": ["Identify the relevant tables: 'captain' and 'Ship'.", "We need to find the ship name associated with the youngest captain.", "To do this, we will join the 'captain' table with the 'Ship' table on the 'Ship_ID' column.", "We will order the results by the 'age' column in ascending order to get the youngest captain first.", "Finally, we will limit the results to 1 to get only the youngest captain's ship name."], "pred_sql": "SELECT Ship.Name FROM Ship JOIN captain ON Ship.Ship_ID = captain.Ship_ID ORDER BY captain.age ASC LIMIT 1;", "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "source_tables": ["captain", "ship"]}
{"sample_id": 6263, "db_id": "ship_1", "question": "What is the name of the ship that is commanded by the youngest captain?", "rationale": ["Identify the relevant tables: 'captain' and 'Ship'.", "We need to find the name of the ship commanded by the youngest captain, which requires joining the 'captain' table with the 'Ship' table on the Ship_ID.", "To find the youngest captain, we need to determine the minimum age from the 'captain' table.", "Once we have the youngest captain's age, we can filter the joined results to find the corresponding ship name.", "The final SQL query selects the ship name from the 'Ship' table where the captain's age matches the minimum age found."], "pred_sql": "SELECT Ship.Name FROM Ship JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.age = (SELECT MIN(age) FROM captain);", "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "source_tables": ["captain", "ship"]}
{"sample_id": 6264, "db_id": "ship_1", "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.", "rationale": ["We need to find ships that are not steered by any captain with the rank of 'Midshipman'.", "To achieve this, we will use a LEFT JOIN between the Ship table and the captain table on the Ship_ID column.", "We will select the Name and Flag columns from the Ship table.", "To filter the results, we will use a WHERE clause to check that the Rank of the captain is not 'Midshipman' or that there is no captain associated with the ship (captain.Rank IS NULL)."], "pred_sql": "SELECT Ship.Name, Ship.Flag FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Rank != 'Midshipman' OR captain.Rank IS NULL;", "gold_sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "source_tables": ["captain", "ship"]}
{"sample_id": 6265, "db_id": "ship_1", "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?", "rationale": ["We need to retrieve the names and flags of ships.", "The relevant columns are 'Name' and 'Flag' from the Ship table.", "We need to check for ships that do not have a captain with the rank of 'Midshipman'.", "To do this, we will perform a LEFT JOIN between the Ship table and the captain table on the Ship_ID.", "We will filter the results where the captain's rank is not 'Midshipman' or where there is no captain (captain.Rank IS NULL)."], "pred_sql": "SELECT Ship.Name, Ship.Flag FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Rank != 'Midshipman' OR captain.Rank IS NULL;", "gold_sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "source_tables": ["captain", "ship"]}
{"sample_id": 6266, "db_id": "ship_1", "question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.", "rationale": ["We need to find ships that have captains with two specific ranks: Midshipman and Lieutenant.", "To do this, we will join the 'Ship' table with the 'captain' table twice: once for each rank.", "The first join (c1) will filter for captains with the rank of 'Midshipman'.", "The second join (c2) will filter for captains with the rank of 'Lieutenant'.", "We will use the Ship_ID to connect the two tables, ensuring we are looking at the same ship for both captains.", "Finally, we will select the distinct names of the ships that meet both conditions."], "pred_sql": "SELECT DISTINCT s.Name\nFROM Ship s\nJOIN captain c1 ON s.Ship_ID = c1.Ship_ID\nJOIN captain c2 ON s.Ship_ID = c2.Ship_ID\nWHERE c1.Rank = 'Midshipman' AND c2.Rank = 'Lieutenant';", "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "source_tables": ["captain", "ship"]}
{"sample_id": 6267, "db_id": "ship_1", "question": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?", "rationale": ["Identify the relevant tables: 'captain' and 'Ship'.", "We need to find ships commanded by captains of two specific ranks: 'Midshipman' and 'Lieutenant'.", "Join the 'captain' table with the 'Ship' table on the Ship_ID to access ship names.", "Filter the results to include only those captains whose ranks are either 'Midshipman' or 'Lieutenant'.", "Group the results by ship name to aggregate the captains associated with each ship.", "Use the HAVING clause to ensure that only ships with both ranks represented are included, which means we need to count distinct ranks and check if it equals 2."], "pred_sql": "SELECT DISTINCT Ship.Name\nFROM captain\nJOIN Ship ON captain.Ship_ID = Ship.Ship_ID\nWHERE captain.Rank IN ('Midshipman', 'Lieutenant')\nGROUP BY Ship.Name\nHAVING COUNT(DISTINCT captain.Rank) = 2;", "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "source_tables": ["captain", "ship"]}
{"sample_id": 6268, "db_id": "city_record", "question": "What is id of the city that hosted events in the most recent year?", "rationale": ["Identify the most recent year in which matches were hosted by using a subquery to find the maximum value of the 'Year' column in the 'hosting_city' table.", "Select the 'Host_City' from the 'hosting_city' table where the 'Year' matches the most recent year identified in the previous step."], "pred_sql": "SELECT Host_City FROM hosting_city WHERE Year = (SELECT MAX(Year) FROM hosting_city);", "gold_sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1", "source_tables": ["hosting_city"]}
{"sample_id": 6269, "db_id": "city_record", "question": "Find the city that hosted some events in the most recent year. What is the id of this city?", "rationale": ["Identify the most recent year in which matches were hosted by using a subquery to find the maximum year from the hosting_city table.", "Select the Host_City from the hosting_city table where the Year matches the most recent year identified in the previous step."], "pred_sql": "SELECT Host_City FROM hosting_city WHERE Year = (SELECT MAX(Year) FROM hosting_city)", "gold_sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1", "source_tables": ["hosting_city"]}
{"sample_id": 6270, "db_id": "city_record", "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?", "rationale": ["Identify the relevant tables: 'hosting_city' and 'match'.", "We need to find the Match_IDs from the 'hosting_city' table.", "To do this, we will join the 'hosting_city' table with the 'match' table on the Match_ID column.", "We need to filter the results based on the competition name '1994 FIFA World Cup qualification'.", "To get the correct competition identifier, we can use a subquery to select the Competition from the 'match' table where it matches '1994 FIFA World Cup qualification'.", "Finally, we will select the Match_ID from the joined tables where the competition matches."], "pred_sql": "SELECT hosting_city.Match_ID FROM hosting_city JOIN match ON hosting_city.Match_ID = match.Match_ID WHERE match.Competition = (SELECT Competition FROM match WHERE Competition = '1994 FIFA World Cup qualification')", "gold_sql": "SELECT match_id FROM MATCH WHERE competition = '1994 FIFA World Cup qualification'", "source_tables": ["match"]}
{"sample_id": 6271, "db_id": "city_record", "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?", "rationale": ["Identify the relevant table: The 'match' table contains the 'Match_ID' and 'Competition' columns.", "Determine the competition name: The user is asking for the match ID related to the competition called '1994 FIFA World Cup qualification'.", "Construct a subquery to find the Competition ID associated with the specified competition name.", "Use the result of the subquery to filter the main query to get the Match_ID for that competition."], "pred_sql": "SELECT Match_ID FROM match WHERE Competition = (SELECT Competition FROM match WHERE Result = 'win' AND Match_ID IN (SELECT Match_ID FROM hosting_city WHERE Host_City = (SELECT City_ID FROM city WHERE City = '1994 FIFA World Cup qualification')));", "gold_sql": "SELECT match_id FROM MATCH WHERE competition = '1994 FIFA World Cup qualification'", "source_tables": ["match"]}
{"sample_id": 6272, "db_id": "city_record", "question": "Find the cities which were once a host city after 2010?", "rationale": ["Identify the relevant tables: 'city' for city names and 'hosting_city' for host city information.", "We need to find cities that hosted matches after the year 2010, so we will filter the 'hosting_city' table based on the 'Year' column.", "Join the 'city' table with the 'hosting_city' table on the 'City_ID' and 'Host_City' columns to get the city names associated with the host cities.", "Use the DISTINCT keyword to ensure that each city is listed only once in the results.", "Construct the SQL query to select the city names from the 'city' table where the year in the 'hosting_city' table is greater than 2010."], "pred_sql": "SELECT DISTINCT c.City FROM city c JOIN hosting_city h ON c.City_ID = h.Host_City WHERE h.Year > '2010';", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010", "source_tables": ["hosting_city", "city"]}
{"sample_id": 6273, "db_id": "city_record", "question": "Which cities served as a host city after 2010?", "rationale": ["Identify the relevant table for hosting cities, which is 'hosting_city'.", "We need to filter the results based on the year, specifically looking for years greater than 2010.", "To get the names of the cities, we need to join the 'hosting_city' table with the 'city' table using the 'Host_City' and 'City_ID' columns.", "Select distinct city names to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT c.City FROM hosting_city hc JOIN city c ON hc.Host_City = c.City_ID WHERE hc.Year > '2010';", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010", "source_tables": ["hosting_city", "city"]}
{"sample_id": 6274, "db_id": "city_record", "question": "Which city has hosted the most events?", "rationale": ["Identify the relevant table: The 'hosting_city' table contains information about which city hosted which match.", "Count the number of matches hosted by each city: Use the COUNT() function to count the occurrences of each Host_City.", "Group the results by Host_City: Use GROUP BY to aggregate the counts for each city.", "Order the results by the count in descending order: Use ORDER BY Event_Count DESC to get the city with the most events at the top.", "Limit the results to the top city: Use LIMIT 1 to return only the city that has hosted the most events."], "pred_sql": "SELECT Host_City, COUNT(*) AS Event_Count FROM hosting_city GROUP BY Host_City ORDER BY Event_Count DESC LIMIT 1;", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["hosting_city", "city"]}
{"sample_id": 6275, "db_id": "city_record", "question": "Find the city that hosted the most events.", "rationale": ["Identify the relevant table: The 'hosting_city' table contains information about which city hosted which match.", "Count the number of matches hosted by each city: Use the COUNT function to count the 'Match_ID' for each 'Host_City'.", "Group the results by 'Host_City': This allows us to aggregate the count of matches for each city.", "Order the results by the count of matches in descending order: This will help us find the city with the most events at the top.", "Limit the results to 1: Since we only want the city that hosted the most events, we will limit the output to the top result."], "pred_sql": "SELECT Host_City, COUNT(Match_ID) AS Event_Count FROM hosting_city GROUP BY Host_City ORDER BY Event_Count DESC LIMIT 1;", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["hosting_city", "city"]}
{"sample_id": 6276, "db_id": "city_record", "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?", "rationale": ["Identify the relevant tables: match, hosting_city, and city.", "We need to find the venue of a specific competition, so we will join the match table with the hosting_city table to link matches with their host cities.", "We also need to join the city table to filter by the specific city name 'Nanjing ( Jiangsu )'.", "The competition is specified as '1994 FIFA World Cup qualification', so we will filter the matches based on this competition.", "We also need to ensure that the match was hosted in the year 1994, so we will add a condition for the year in the hosting_city table.", "Finally, we will select the Venue from the match table that meets all these conditions."], "pred_sql": "SELECT match.Venue FROM match JOIN hosting_city ON match.Match_ID = hosting_city.Match_ID JOIN city ON hosting_city.Host_City = city.City_ID WHERE hosting_city.Year = '1994' AND match.Competition = (SELECT Match_ID FROM match WHERE Competition = '1994 FIFA World Cup qualification') AND city.City = 'Nanjing ( Jiangsu )';", "gold_sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu )' AND T3.competition = '1994 FIFA World Cup qualification'", "source_tables": ["hosting_city", "city", "match"]}
{"sample_id": 6277, "db_id": "city_record", "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".", "rationale": ["Identify the tables involved: We need to find the venue of a match, which involves the 'match', 'hosting_city', and 'city' tables.", "Determine the relationship between the tables: The 'hosting_city' table links matches to the cities that hosted them, and the 'city' table provides the city names and their IDs.", "Filter the results based on the host city: We need to find matches hosted by 'Nanjing ( Jiangsu )', so we will filter the 'hosting_city' table for this city.", "Filter the results based on the competition: We need to find matches that are part of the '1994 FIFA World Cup qualification', so we will filter the 'match' table for this competition.", "Select the venue: Finally, we will select the 'Venue' column from the 'match' table for the matches that meet the above criteria."], "pred_sql": "SELECT match.Venue FROM match JOIN hosting_city ON match.Match_ID = hosting_city.Match_ID JOIN city ON hosting_city.Host_City = city.City_ID WHERE hosting_city.Host_City = (SELECT City_ID FROM city WHERE City = 'Nanjing ( Jiangsu )') AND match.Competition = (SELECT Competition FROM match WHERE Competition = '1994 FIFA World Cup qualification');", "gold_sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu )' AND T3.competition = '1994 FIFA World Cup qualification'", "source_tables": ["hosting_city", "city", "match"]}
{"sample_id": 6278, "db_id": "city_record", "question": "Give me the temperature of Shanghai in January.", "rationale": ["Identify the relevant table for temperature data, which is the 'temperature' table.", "Determine the specific column needed for January's temperature, which is 'Jan'.", "Identify the 'city' table to find the city name 'Shanghai'.", "Join the 'temperature' table with the 'city' table on the 'City_ID' to link temperature data with the corresponding city.", "Filter the results to only include the row where the city name is 'Shanghai'."], "pred_sql": "SELECT temperature.Jan FROM temperature JOIN city ON temperature.City_ID = city.City_ID WHERE city.City = 'Shanghai';", "gold_sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = 'Shanghai'", "source_tables": ["city", "temperature"]}
{"sample_id": 6279, "db_id": "city_record", "question": "What is the temperature of \"Shanghai\" city in January?", "rationale": ["Identify the relevant tables: 'temperature' for temperature data and 'city' for city names.", "Determine the columns needed: 'Jan' from the 'temperature' table for January's temperature and 'City' from the 'city' table to filter by city name.", "Establish the relationship between the tables using the foreign key: 'temperature.City_ID' relates to 'city.City_ID'.", "Construct the SQL query to select the January temperature for the city 'Shanghai' by joining the two tables and applying the appropriate filter."], "pred_sql": "SELECT temperature.Jan FROM temperature JOIN city ON temperature.City_ID = city.City_ID WHERE city.City = 'Shanghai';", "gold_sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = 'Shanghai'", "source_tables": ["city", "temperature"]}
{"sample_id": 6280, "db_id": "city_record", "question": "What is the host year of city \"Taizhou ( Zhejiang )\"?", "rationale": ["Identify the relevant table for hosting information, which is 'hosting_city'.", "Determine the column that contains the year of hosting, which is 'Year'.", "Identify the city for which we need to find the hosting year, which is 'Taizhou ( Zhejiang )'.", "To find the corresponding 'Host_City' in the 'hosting_city' table, we need to first get the 'City_ID' from the 'city' table where the city name matches 'Taizhou ( Zhejiang )'.", "Construct a subquery to select 'City_ID' from the 'city' table based on the city name.", "Use this 'City_ID' in the main query to filter the 'hosting_city' table and select the 'Year'."], "pred_sql": "SELECT Year FROM hosting_city WHERE Host_City = (SELECT City_ID FROM city WHERE City = 'Taizhou ( Zhejiang )');", "gold_sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  'Taizhou ( Zhejiang )'", "source_tables": ["hosting_city", "city"]}
{"sample_id": 6281, "db_id": "city_record", "question": "IN which year did city \"Taizhou ( Zhejiang )\" serve as a host city?", "rationale": ["Identify the relevant table for hosting cities, which is 'hosting_city'.", "Determine the column that contains the year information, which is 'Year'.", "Find the corresponding 'Host_City' for 'Taizhou ( Zhejiang )' in the 'city' table to get its 'City_ID'.", "Construct a subquery to select the 'City_ID' from the 'city' table where the city name matches 'Taizhou ( Zhejiang )'.", "Use the retrieved 'City_ID' in the main query to filter the 'hosting_city' table for the corresponding year."], "pred_sql": "SELECT Year FROM hosting_city WHERE Host_City = (SELECT City_ID FROM city WHERE City = 'Taizhou ( Zhejiang )');", "gold_sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  'Taizhou ( Zhejiang )'", "source_tables": ["hosting_city", "city"]}
{"sample_id": 6282, "db_id": "city_record", "question": "Which three cities have the largest regional population?", "rationale": ["Identify the table that contains the relevant data: the 'city' table has the 'City' and 'Regional_Population' columns.", "We need to select the 'City' and 'Regional_Population' columns from the 'city' table.", "To find the cities with the largest regional population, we will order the results by 'Regional_Population' in descending order.", "To limit the results to only the top three cities, we will use the 'LIMIT' clause with a value of 3."], "pred_sql": "SELECT City, Regional_Population FROM city ORDER BY Regional_Population DESC LIMIT 3;", "gold_sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3", "source_tables": ["city"]}
{"sample_id": 6283, "db_id": "city_record", "question": "What are the three largest cities in terms of regional population?", "rationale": ["Identify the relevant table: The 'city' table contains the information about cities and their populations.", "Select the columns needed: We need the 'City' name and 'Regional_Population'.", "Order the results: To find the largest cities, we will order the results by 'Regional_Population' in descending order.", "Limit the results: We only want the top three cities, so we will use 'LIMIT 3' to restrict the output."], "pred_sql": "SELECT City, Regional_Population FROM city ORDER BY Regional_Population DESC LIMIT 3;", "gold_sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3", "source_tables": ["city"]}
{"sample_id": 6284, "db_id": "city_record", "question": "Which city has the lowest GDP? Please list the city name and its GDP.", "rationale": ["Identify the table that contains GDP information, which is the 'city' table.", "Select the columns 'City' and 'GDP' from the 'city' table.", "To find the city with the lowest GDP, we need to order the results by the GDP column in ascending order.", "Limit the results to 1 to get only the city with the lowest GDP."], "pred_sql": "SELECT City, GDP FROM city ORDER BY GDP ASC LIMIT 1;", "gold_sql": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1", "source_tables": ["city"]}
{"sample_id": 6285, "db_id": "city_record", "question": "What is the city with the smallest GDP? Return the city and its GDP.", "rationale": ["Identify the table that contains GDP information, which is the 'city' table.", "Select the columns 'City' and 'GDP' from the 'city' table.", "To find the city with the smallest GDP, we need to order the results by the 'GDP' column in ascending order.", "Limit the results to 1 to get only the city with the smallest GDP."], "pred_sql": "SELECT City, GDP FROM city ORDER BY GDP ASC LIMIT 1;", "gold_sql": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1", "source_tables": ["city"]}
{"sample_id": 6286, "db_id": "city_record", "question": "Which city has the highest temperature in February?", "rationale": ["Identify the relevant tables: 'city' for city names and 'temperature' for temperature data.", "We need to find the city with the highest temperature in February, so we will focus on the 'Feb' column in the 'temperature' table.", "To get the city name along with the temperature, we will join the 'city' table with the 'temperature' table on the 'City_ID' column.", "We will order the results by the February temperature in descending order to get the highest temperature at the top.", "Finally, we will limit the results to 1 to get only the city with the highest temperature."], "pred_sql": "SELECT c.City, t.Feb FROM city c JOIN temperature t ON c.City_ID = t.City_ID ORDER BY t.Feb DESC LIMIT 1;", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1", "source_tables": ["city", "temperature"]}
{"sample_id": 6287, "db_id": "city_record", "question": "In February, which city marks the highest temperature?", "rationale": ["Identify the relevant tables: We need data from the 'city' table for city names and the 'temperature' table for temperature data.", "Determine the specific temperature data needed: The query asks for the highest temperature in February, so we will focus on the 'Feb' column in the 'temperature' table.", "Join the 'city' and 'temperature' tables: We will join these tables on the 'City_ID' to associate each city with its temperature data.", "Sort the results: We will order the results by the February temperature in descending order to get the highest temperature at the top.", "Limit the results: Since we only want the city with the highest temperature, we will limit the results to 1."], "pred_sql": "SELECT c.City, t.Feb FROM city c JOIN temperature t ON c.City_ID = t.City_ID ORDER BY t.Feb DESC LIMIT 1;", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1", "source_tables": ["city", "temperature"]}
{"sample_id": 6288, "db_id": "city_record", "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?", "rationale": ["Identify the relevant tables: We need data from the 'city' and 'temperature' tables.", "Determine the columns needed: We need the city name from the 'city' table and the temperature data for March, July, and October from the 'temperature' table.", "Establish the relationship between tables: The 'temperature' table is linked to the 'city' table via 'City_ID'.", "Formulate the WHERE clause: We need to filter cities where the temperature in March is lower than in July or higher than in October.", "Construct the SELECT statement: We will select the city name and the relevant temperature columns from the joined tables."], "pred_sql": "SELECT c.City, t.Mar, t.Jul, t.Oct \nFROM city c \nJOIN temperature t ON c.City_ID = t.City_ID \nWHERE t.Mar < t.Jul OR t.Mar > t.Oct;", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct", "source_tables": ["city", "temperature"]}
{"sample_id": 6289, "db_id": "city_record", "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?", "rationale": ["Identify the relevant tables: We need data from the 'city' and 'temperature' tables.", "Determine the columns needed: We need the city name from the 'city' table and the average temperatures for March, July, and October from the 'temperature' table.", "Establish the relationship between tables: The 'temperature' table is linked to the 'city' table through the 'City_ID' column.", "Formulate the WHERE clause: We need to filter cities where the temperature in March is lower than in July or higher than in October.", "Construct the SELECT statement: We will select the city name and the relevant temperature columns from the joined tables."], "pred_sql": "SELECT c.City, t.Mar, t.Jul, t.Oct \nFROM city c \nJOIN temperature t ON c.City_ID = t.City_ID \nWHERE t.Mar < t.Jul OR t.Mar > t.Oct;", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct", "source_tables": ["city", "temperature"]}
{"sample_id": 6290, "db_id": "city_record", "question": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?", "rationale": ["Identify the relevant tables: city, temperature, and hosting_city.", "We need to find cities where the temperature in March (Mar) is lower than in July (Jul). This requires joining the city table with the temperature table on City_ID.", "We also need to ensure that these cities have hosted matches, which requires joining with the hosting_city table on the Host_City column.", "The final query will select the City names from the city table where the temperature condition is met and the city has hosted a match."], "pred_sql": "SELECT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID JOIN hosting_city h ON c.City_ID = h.Host_City WHERE t.Mar < t.Jul;", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["hosting_city", "city", "temperature"]}
{"sample_id": 6291, "db_id": "city_record", "question": "Which cities have lower temperature in March than in July and have been once host cities?", "rationale": ["Identify the relevant tables: city, temperature, and hosting_city.", "We need to find cities that have lower temperatures in March than in July, so we will compare the March and July temperature columns in the temperature table.", "We also need to ensure that these cities have hosted matches, which means we need to join the hosting_city table with the city table.", "The join condition for hosting_city will be based on the Host_City being equal to the City_ID in the city table.", "Finally, we will select the city names and their corresponding Chinese characters and Hanyu Pinyin from the city table where the temperature condition is met."], "pred_sql": "SELECT c.City, c.Hanzi, c.Hanyu_Pinyin \nFROM city c \nJOIN temperature t ON c.City_ID = t.City_ID \nJOIN hosting_city h ON c.City_ID = h.Host_City \nWHERE t.Mar < t.Jul;", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["hosting_city", "city", "temperature"]}
{"sample_id": 6292, "db_id": "city_record", "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.", "rationale": ["Identify the relevant tables: 'city' for city details and 'temperature' for temperature data.", "We need to compare the average temperature in March (Mar) and December (Dec) for each city.", "Use a JOIN between 'city' and 'temperature' on 'City_ID' to access both city details and temperature data.", "Add a condition to filter cities where the temperature in March is lower than in December (t.Mar < t.Dec).", "Additionally, we need to ensure that these cities have never hosted a match, which requires checking against the 'hosting_city' table.", "Use a subquery to find all 'Host_City' entries in the 'hosting_city' table and exclude those from our main query using NOT IN."], "pred_sql": "SELECT c.City_ID, c.City, c.Hanzi, c.Hanyu_Pinyin, c.Regional_Population, c.GDP \nFROM city c \nJOIN temperature t ON c.City_ID = t.City_ID \nWHERE t.Mar < t.Dec \nAND c.City_ID NOT IN (SELECT Host_City FROM hosting_city)", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["hosting_city", "city", "temperature"]}
{"sample_id": 6293, "db_id": "city_record", "question": "Which cities have lower temperature in March than in Dec and have never served as host cities?", "rationale": ["Identify the relevant tables: 'city' for city details and 'temperature' for temperature data.", "We need to compare the average temperatures in March and December, so we will join the 'city' table with the 'temperature' table on 'City_ID'.", "The condition requires that the temperature in March is lower than in December, which translates to 't.Mar < t.Dec'.", "Additionally, we need to filter out cities that have served as host cities, which can be done using a subquery that selects 'Host_City' from the 'hosting_city' table.", "The final selection will include the city name and other relevant details from the 'city' table."], "pred_sql": "SELECT c.City, c.Hanzi, c.Hanyu_Pinyin, c.Regional_Population, c.GDP \nFROM city c \nJOIN temperature t ON c.City_ID = t.City_ID \nWHERE t.Mar < t.Dec \nAND c.City_ID NOT IN (SELECT Host_City FROM hosting_city)", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["hosting_city", "city", "temperature"]}
{"sample_id": 6294, "db_id": "city_record", "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?", "rationale": ["Identify the tables needed: 'city' for city names and 'temperature' for temperature data.", "Join the 'city' table with the 'temperature' table on 'City_ID' to access temperature data for each city.", "Filter the results to include only those cities where the temperature in February (Feb) is greater than in June (Jun).", "Use the UNION operator to combine this result with another query that selects cities from the 'hosting_city' table.", "For the second part of the query, join the 'city' table with the 'hosting_city' table on 'Host_City' to get the names of cities that have hosted matches.", "Select distinct city names from both queries to avoid duplicates."], "pred_sql": "SELECT DISTINCT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID WHERE t.Feb > t.Jun UNION SELECT DISTINCT c.City FROM city c JOIN hosting_city h ON c.City_ID = h.Host_City;", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["hosting_city", "city", "temperature"]}
{"sample_id": 6295, "db_id": "city_record", "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?", "rationale": ["Identify the relevant tables: 'city', 'temperature', and 'hosting_city'.", "We need to find cities that have a higher temperature in February than in June, which requires joining the 'city' and 'temperature' tables on 'City_ID'.", "Additionally, we need to check if the city has ever hosted a match, which involves joining the 'city' table with the 'hosting_city' table on 'Host_City'.", "Use a LEFT JOIN for 'hosting_city' to include cities that may not have hosted any matches but still meet the temperature condition.", "The WHERE clause will filter cities based on the temperature condition (Feb > Jun) or if they have hosted a match (checking if 'Host_City' is not NULL).", "Select distinct city names to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT c.City \nFROM city c \nJOIN temperature t ON c.City_ID = t.City_ID \nLEFT JOIN hosting_city h ON c.City_ID = h.Host_City \nWHERE (t.Feb > t.Jun) OR (h.Host_City IS NOT NULL);", "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["hosting_city", "city", "temperature"]}
{"sample_id": 6296, "db_id": "city_record", "question": "Please give me a list of cities whose regional population is over 10000000.", "rationale": ["Identify the table that contains the relevant data: the 'city' table has the 'Regional_Population' column.", "Determine the condition for filtering: we need cities with a 'Regional_Population' greater than 10 million.", "Construct the SQL SELECT statement to retrieve the 'City' names from the 'city' table where the 'Regional_Population' meets the specified condition."], "pred_sql": "SELECT City FROM city WHERE Regional_Population > '10000000';", "gold_sql": "SELECT city FROM city WHERE regional_population  >  10000000", "source_tables": ["city"]}
{"sample_id": 6297, "db_id": "city_record", "question": "Which cities have regional population above 10000000?", "rationale": ["Identify the table that contains the relevant data: the 'city' table has the 'Regional_Population' column.", "Determine the condition for filtering: we need cities with a population greater than 10 million.", "Construct the SQL SELECT statement to retrieve the 'City' names from the 'city' table where the 'Regional_Population' exceeds 10 million."], "pred_sql": "SELECT City FROM city WHERE Regional_Population > '10000000';", "gold_sql": "SELECT city FROM city WHERE regional_population  >  10000000", "source_tables": ["city"]}
{"sample_id": 6298, "db_id": "city_record", "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.", "rationale": ["Identify the table that contains the relevant data: the 'city' table has the 'Regional_Population' column.", "Determine the condition for filtering cities: we need cities with a population greater than 8,000,000 or less than 5,000,000.", "Construct the SQL SELECT statement to retrieve the 'City' names from the 'city' table based on the specified conditions.", "Use the WHERE clause to apply the conditions for 'Regional_Population'.", "Combine the conditions using the OR operator to ensure cities meeting either criterion are included."], "pred_sql": "SELECT City FROM city WHERE Regional_Population > 8000000 OR Regional_Population < 5000000;", "gold_sql": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000", "source_tables": ["city"]}
{"sample_id": 6299, "db_id": "city_record", "question": "Which cities have regional population above 8000000 or below 5000000?", "rationale": ["Identify the table that contains the relevant data: the 'city' table has the 'Regional_Population' column.", "Determine the condition for filtering: we need cities with a population greater than 8,000,000 or less than 5,000,000.", "Construct the SQL SELECT statement to retrieve the 'City' names from the 'city' table based on the specified conditions.", "Use the WHERE clause to apply the conditions for regional population."], "pred_sql": "SELECT City FROM city WHERE Regional_Population > 8000000 OR Regional_Population < 5000000;", "gold_sql": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000", "source_tables": ["city"]}
{"sample_id": 6300, "db_id": "city_record", "question": "Find the number of matches in different competitions.", "rationale": ["Identify the relevant table: The 'match' table contains information about matches and their competitions.", "Determine the required information: We need to count the number of matches for each competition.", "Use the COUNT() function to count matches and GROUP BY clause to group the results by competition.", "Construct the SQL query to select the competition and the count of matches, grouping by competition."], "pred_sql": "SELECT Competition, COUNT(*) AS Number_of_Matches FROM match GROUP BY Competition;", "gold_sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition", "source_tables": ["match"]}
{"sample_id": 6301, "db_id": "city_record", "question": "For each competition, count the number of matches.", "rationale": ["Identify the relevant table: The 'match' table contains information about matches and their associated competitions.", "Determine the required output: We need to count the number of matches for each competition.", "Use the COUNT() function to count the number of Match_IDs for each competition.", "Group the results by the Competition column to get the count for each distinct competition."], "pred_sql": "SELECT Competition, COUNT(Match_ID) AS Match_Count FROM match GROUP BY Competition;", "gold_sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition", "source_tables": ["match"]}
{"sample_id": 6302, "db_id": "city_record", "question": "List venues of all matches in the order of their dates starting from the most recent one.", "rationale": ["Identify the table that contains the venue information, which is the 'match' table.", "Determine the relevant column for venues, which is 'Venue'.", "Identify the requirement to order the results by match dates, which is in the 'Date' column.", "Specify that the ordering should be in descending order to get the most recent matches first.", "Construct the SQL query to select the 'Venue' from the 'match' table and order the results by 'Date' in descending order."], "pred_sql": "SELECT Venue FROM match ORDER BY Date DESC;", "gold_sql": "SELECT venue FROM MATCH ORDER BY date DESC", "source_tables": ["match"]}
{"sample_id": 6303, "db_id": "city_record", "question": "What are the venues of all the matches? Sort them in the descending order of match date.", "rationale": ["Identify the table that contains information about matches, which is the 'match' table.", "Determine the column that contains the venue information, which is the 'Venue' column in the 'match' table.", "To get the venues of all matches, we need to select the 'Venue' column from the 'match' table.", "Since the user requested to sort the results by match date in descending order, we will use the 'ORDER BY' clause on the 'Date' column in descending order."], "pred_sql": "SELECT Venue FROM match ORDER BY Date DESC;", "gold_sql": "SELECT venue FROM MATCH ORDER BY date DESC", "source_tables": ["match"]}
{"sample_id": 6304, "db_id": "city_record", "question": "what is the GDP of the city with the largest population.", "rationale": ["Identify the relevant table: The 'city' table contains the GDP and population data.", "Determine the required information: We need the GDP of the city with the largest population.", "Find the city with the largest population: This can be done using a subquery that selects the maximum value of 'Regional_Population' from the 'city' table.", "Combine the results: Use the result of the subquery to filter the 'city' table and select the corresponding GDP."], "pred_sql": "SELECT GDP FROM city WHERE Regional_Population = (SELECT MAX(Regional_Population) FROM city);", "gold_sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1", "source_tables": ["city"]}
{"sample_id": 6305, "db_id": "city_record", "question": "Find the GDP of the city with the largest regional population.", "rationale": ["Identify the table that contains the GDP and population data, which is the 'city' table.", "To find the city with the largest regional population, we need to use a subquery to get the maximum value of 'Regional_Population' from the 'city' table.", "Once we have the maximum population, we can select the 'GDP' from the 'city' table where the 'Regional_Population' matches this maximum value."], "pred_sql": "SELECT GDP FROM city WHERE Regional_Population = (SELECT MAX(Regional_Population) FROM city);", "gold_sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1", "source_tables": ["city"]}
{"sample_id": 6306, "db_id": "city_record", "question": "What are the GDP and population of the city that already served as a host more than once?", "rationale": ["Identify the relevant tables: 'city' for GDP and population, and 'hosting_city' to find cities that hosted matches.", "Join the 'city' table with the 'hosting_city' table on the 'City_ID' and 'Host_City' columns to get the necessary data.", "Group the results by 'Host_City' to aggregate the data for each city.", "Use the HAVING clause to filter the groups to only include those cities that have hosted more than one match (COUNT(h.Match_ID) > 1).", "Select the GDP and Regional Population from the resulting dataset."], "pred_sql": "SELECT c.GDP, c.Regional_Population \nFROM city c \nJOIN hosting_city h ON c.City_ID = h.Host_City \nGROUP BY h.Host_City \nHAVING COUNT(h.Match_ID) > 1;", "gold_sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1", "source_tables": ["hosting_city", "city"]}
{"sample_id": 6307, "db_id": "city_record", "question": "Which cities have served as host cities more than once? Return me their GDP and population.", "rationale": ["Identify the relevant tables: We need data from the 'city' and 'hosting_city' tables.", "Join the 'city' table with the 'hosting_city' table on the 'Host_City' field to get the cities that hosted matches.", "Group the results by 'Host_City' to count how many times each city has hosted matches.", "Use the HAVING clause to filter the groups to only include those that have hosted more than once (COUNT > 1).", "Select the GDP and Regional Population from the 'city' table for the cities that meet the criteria."], "pred_sql": "SELECT c.GDP, c.Regional_Population \nFROM city c \nJOIN hosting_city h ON c.City_ID = h.Host_City \nGROUP BY h.Host_City \nHAVING COUNT(h.Match_ID) > 1;", "gold_sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1", "source_tables": ["hosting_city", "city"]}
{"sample_id": 6308, "db_id": "e_government", "question": "List every individual's first name, middle name and last name in alphabetical order by last name.", "rationale": ["Identify the table that contains the required information: Individuals.", "Select the columns for first name, middle name, and last name: individual_first_name, individual_middle_name, individual_last_name.", "Specify the order of the results: alphabetical order by last name, which corresponds to individual_last_name.", "Construct the SQL query using SELECT to retrieve the specified columns from the Individuals table and ORDER BY to sort the results."], "pred_sql": "SELECT individual_first_name, individual_middle_name, individual_last_name FROM Individuals ORDER BY individual_last_name ASC;", "gold_sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name", "source_tables": ["individuals"]}
{"sample_id": 6309, "db_id": "e_government", "question": "What are the first, middle, and last names of all individuals, ordered by last name?", "rationale": ["Identify the table that contains the required information: Individuals.", "Select the columns for first name, middle name, and last name: individual_first_name, individual_middle_name, individual_last_name.", "Specify the order in which to sort the results: by individual_last_name in ascending order."], "pred_sql": "SELECT individual_first_name, individual_middle_name, individual_last_name FROM Individuals ORDER BY individual_last_name;", "gold_sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name", "source_tables": ["individuals"]}
{"sample_id": 6310, "db_id": "e_government", "question": "List all the types of forms.", "rationale": ["Identify the table that contains the information about forms, which is the 'Forms' table.", "Determine the relevant column that holds the types of forms, which is 'form_type_code'.", "Use the SELECT statement to retrieve the distinct values of 'form_type_code' to ensure that each type is listed only once."], "pred_sql": "SELECT DISTINCT form_type_code FROM Forms;", "gold_sql": "SELECT DISTINCT form_type_code FROM forms", "source_tables": ["forms"]}
{"sample_id": 6311, "db_id": "e_government", "question": "What are the different types of forms?", "rationale": ["Identify the table that contains the information about forms, which is the 'Forms' table.", "Determine the relevant column that holds the type of forms, which is 'form_type_code'.", "Use the SELECT statement to retrieve the distinct values of 'form_type_code' to get the different types of forms."], "pred_sql": "SELECT DISTINCT form_type_code FROM Forms;", "gold_sql": "SELECT DISTINCT form_type_code FROM forms", "source_tables": ["forms"]}
{"sample_id": 6312, "db_id": "e_government", "question": "Find the name of the most popular party form.", "rationale": ["Identify the relevant tables: Party_Forms and Forms are needed to find the form names associated with party forms.", "Join the Party_Forms table with the Forms table on the form_id to access the form names.", "Group the results by form_id to count how many times each form has been used.", "Order the results by the count of party_id in descending order to find the most popular form.", "Limit the results to 1 to get only the most popular party form."], "pred_sql": "SELECT form_name FROM Party_Forms pf JOIN Forms f ON pf.form_id = f.form_id GROUP BY pf.form_id ORDER BY COUNT(pf.party_id) DESC LIMIT 1;", "gold_sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["forms", "party_forms"]}
{"sample_id": 6313, "db_id": "e_government", "question": "What is the name of the party form that is most common?", "rationale": ["Identify the relevant tables: Party_Forms and Forms are needed to get the form names associated with the parties.", "Join the Party_Forms table with the Forms table on the form_id to access the form names.", "Group the results by form_name to count how many times each form has been used.", "Order the results in descending order based on the count of forms to find the most common one.", "Limit the results to 1 to get only the most common party form."], "pred_sql": "SELECT form_name, COUNT(*) as form_count\nFROM Party_Forms\nJOIN Forms ON Party_Forms.form_id = Forms.form_id\nGROUP BY form_name\nORDER BY form_count DESC\nLIMIT 1;", "gold_sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["forms", "party_forms"]}
{"sample_id": 6314, "db_id": "e_government", "question": "Find the payment method and phone of the party with email \"enrico09@example.com\".", "rationale": ["Identify the table that contains the required information: The 'Parties' table contains the 'payment_method_code' and 'party_phone' columns.", "Determine the condition for filtering the records: We need to find the party with the specific email 'enrico09@example.com'.", "Construct the SQL SELECT statement to retrieve the desired columns from the 'Parties' table, applying the WHERE clause to filter by email."], "pred_sql": "SELECT payment_method_code, party_phone FROM Parties WHERE party_email = 'enrico09@example.com';", "gold_sql": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  'enrico09@example.com'", "source_tables": ["parties"]}
{"sample_id": 6315, "db_id": "e_government", "question": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?", "rationale": ["Identify the relevant table: The query requires information about the party, which is stored in the 'Parties' table.", "Determine the columns needed: The query asks for 'payment_method_code' and 'party_phone', both of which are columns in the 'Parties' table.", "Specify the condition: The query specifies a condition to filter the results based on the party's email address, which is also a column in the 'Parties' table.", "Construct the SQL SELECT statement: Use SELECT to retrieve the specified columns from the 'Parties' table, applying the WHERE clause to filter by the given email address."], "pred_sql": "SELECT payment_method_code, party_phone FROM Parties WHERE party_email = 'enrico09@example.com';", "gold_sql": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  'enrico09@example.com'", "source_tables": ["parties"]}
{"sample_id": 6316, "db_id": "e_government", "question": "Find the emails of parties with the most popular party form.", "rationale": ["Identify the relevant tables: Party_Forms for forms and Parties for party emails.", "We need to find the most popular party form, which can be determined by counting the number of submissions for each form.", "Use a subquery to select the form_id that has the highest count of entries in the Party_Forms table.", "Join the Party_Forms table with the Parties table to get the email addresses of the parties associated with the most popular form.", "Select distinct party_email to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT p.party_email\nFROM Party_Forms pf\nJOIN Parties p ON pf.party_id = p.party_id\nWHERE pf.form_id = (\n    SELECT form_id\n    FROM Party_Forms\n    GROUP BY form_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["parties", "party_forms"]}
{"sample_id": 6317, "db_id": "e_government", "question": "What are the party emails associated with parties that used the party form that is the most common?", "rationale": ["Identify the relevant tables: We need to look at the Parties and Party_Forms tables to find the party emails associated with the forms.", "Determine the relationship: The Party_Forms table links parties to forms through the party_id.", "Find the most common form: We need to group the Party_Forms by form_id and count the occurrences to find the most common one.", "Use a subquery: The subquery will select the form_id that has the highest count of occurrences.", "Select distinct party emails: Finally, we will select the distinct party emails from the Parties table where the party_id matches the one associated with the most common form."], "pred_sql": "SELECT DISTINCT p.party_email\nFROM Parties p\nJOIN Party_Forms pf ON p.party_id = pf.party_id\nWHERE pf.form_id = (\n    SELECT pf2.form_id\n    FROM Party_Forms pf2\n    GROUP BY pf2.form_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["parties", "party_forms"]}
{"sample_id": 6318, "db_id": "e_government", "question": "List all the name of organizations in order of the date formed.", "rationale": ["Identify the table that contains the organization names, which is the Organizations table.", "Determine the column that holds the organization names, which is organization_name.", "Identify the column that contains the date when the organization was formed, which is date_formed.", "Construct the SQL query to select organization_name from the Organizations table and order the results by date_formed in ascending order."], "pred_sql": "SELECT organization_name FROM Organizations ORDER BY date_formed;", "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC", "source_tables": ["organizations"]}
{"sample_id": 6319, "db_id": "e_government", "question": "What are the names of organizations, ordered by the date they were formed, ascending?", "rationale": ["Identify the table that contains the organization names, which is the Organizations table.", "Select the column 'organization_name' from the Organizations table.", "To order the results by the date they were formed, use the 'date_formed' column.", "Specify the order as ascending using 'ORDER BY date_formed ASC'."], "pred_sql": "SELECT organization_name FROM Organizations ORDER BY date_formed ASC;", "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC", "source_tables": ["organizations"]}
{"sample_id": 6320, "db_id": "e_government", "question": "Find the name of the youngest organization.", "rationale": ["Identify the table that contains organization information, which is the 'Organizations' table.", "Determine the relevant column that contains the name of the organization, which is 'organization_name'.", "To find the youngest organization, we need to order the organizations by their formation date, which is in the 'date_formed' column.", "Use the 'ORDER BY' clause to sort the organizations in descending order based on 'date_formed'.", "Limit the result to 1 to get only the youngest organization."], "pred_sql": "SELECT organization_name FROM Organizations ORDER BY date_formed DESC LIMIT 1;", "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1", "source_tables": ["organizations"]}
{"sample_id": 6321, "db_id": "e_government", "question": "What is the name of the organization that was formed most recently?", "rationale": ["Identify the relevant table: Organizations, which contains the organization name and the date formed.", "We need to retrieve the organization name that was formed most recently, so we will sort the results by the date_formed column in descending order.", "To get only the most recent organization, we will limit the results to 1 using LIMIT 1."], "pred_sql": "SELECT organization_name FROM Organizations ORDER BY date_formed DESC LIMIT 1;", "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1", "source_tables": ["organizations"]}
{"sample_id": 6322, "db_id": "e_government", "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".", "rationale": ["Identify the relevant tables: Organization_Contact_Individuals (OCI) for contact individuals, Individuals (I) for individual details, and Organizations (Org) for organization details.", "Join the Organization_Contact_Individuals table with the Individuals table to get the last names of the individuals.", "Join the Organization_Contact_Individuals table with the Organizations table to filter by the organization name 'Labour Party'.", "Order the results by the date_contact_to field in descending order to get the latest contact individual.", "Limit the results to 1 to get only the last name of the latest contact individual."], "pred_sql": "SELECT i.individual_last_name \nFROM Organization_Contact_Individuals oci \nJOIN Individuals i ON oci.individual_id = i.individual_id \nJOIN Organizations org ON oci.organization_id = org.organization_id \nWHERE org.organization_name = 'Labour Party' \nORDER BY oci.date_contact_to DESC \nLIMIT 1;", "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  'Labour Party' ORDER BY t2.date_contact_to DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals", "individuals"]}
{"sample_id": 6323, "db_id": "e_government", "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?", "rationale": ["Identify the relevant tables: Organization_Contact_Individuals (OCI) for contact records, Individuals (I) for individual details, and Organizations (O) for organization names.", "Join the Organization_Contact_Individuals table with the Individuals table to get the last names of the individuals.", "Join the Organization_Contact_Individuals table with the Organizations table to filter for the 'Labour party'.", "Order the results by the date of contact (date_contact_to) in descending order to get the most recent contact first.", "Limit the results to 1 to get only the last name of the most recently contacted individual."], "pred_sql": "SELECT i.individual_last_name \nFROM Organization_Contact_Individuals oci \nJOIN Individuals i ON oci.individual_id = i.individual_id \nJOIN Organizations org ON oci.organization_id = org.organization_id \nWHERE org.organization_name = 'Labour party' \nORDER BY oci.date_contact_to DESC \nLIMIT 1;", "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  'Labour Party' ORDER BY t2.date_contact_to DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals", "individuals"]}
{"sample_id": 6324, "db_id": "e_government", "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.", "rationale": ["Identify the organization with the highest UK VAT number by using a subquery to select the maximum value from the Organizations table.", "Join the Organization_Contact_Individuals table with the Individuals table to get the contact person's last name.", "Join the Organization_Contact_Individuals table with the Organizations table to filter for the organization with the highest UK VAT number.", "Order the results by the date of contact (date_contact_from) in ascending order to get the first contact person.", "Limit the results to 1 to get only the first contact person's last name."], "pred_sql": "SELECT i.individual_last_name \nFROM Organization_Contact_Individuals oci \nJOIN Individuals i ON oci.individual_id = i.individual_id \nJOIN Organizations org ON oci.organization_id = org.organization_id \nWHERE org.uk_vat_number = (SELECT MAX(uk_vat_number) FROM Organizations) \nORDER BY oci.date_contact_from ASC \nLIMIT 1;", "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals", "individuals"]}
{"sample_id": 6325, "db_id": "e_government", "question": "What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?", "rationale": ["Identify the organization with the maximum UK VAT number by using a subquery that selects the maximum value from the Organizations table.", "Join the Organization_Contact_Individuals table with the Individuals table to get the last names of individuals who contacted the organization.", "Join the Organization_Contact_Individuals table with the Organizations table to filter contacts based on the organization with the maximum UK VAT number.", "Select the last name of the individual from the Individuals table.", "Limit the results to only the first individual found."], "pred_sql": "SELECT i.individual_last_name\nFROM Organization_Contact_Individuals oci\nJOIN Individuals i ON oci.individual_id = i.individual_id\nJOIN Organizations org ON oci.organization_id = org.organization_id\nWHERE org.uk_vat_number = (SELECT MAX(uk_vat_number) FROM Organizations)\nLIMIT 1;", "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals", "individuals"]}
{"sample_id": 6326, "db_id": "e_government", "question": "How many services are there?", "rationale": ["Identify the requirement: Count the number of services.", "Determine the relevant table: The 'Services' table contains the information about services.", "Construct the SQL query: Use the COUNT() function to count all entries in the 'Services' table."], "pred_sql": "SELECT COUNT(*) AS total_services FROM Services;", "gold_sql": "SELECT count(*) FROM services", "source_tables": ["services"]}
{"sample_id": 6327, "db_id": "e_government", "question": "Count the number of services.", "rationale": ["Identify the table that contains the services, which is the 'Services' table.", "To count the number of services, we will use the COUNT() function in SQL.", "The query will select the count of all records from the 'Services' table.", "The final SQL query will be 'SELECT COUNT(*) AS service_count FROM Services;' to return the total number of services."], "pred_sql": "SELECT COUNT(*) AS service_count FROM Services;", "gold_sql": "SELECT count(*) FROM services", "source_tables": ["services"]}
{"sample_id": 6328, "db_id": "e_government", "question": "Find name of the services that has never been used.", "rationale": ["Identify the table that contains the service names, which is the Services table.", "We need to find services that have never been used, which means we need to check against the Party_Services table.", "The Party_Services table contains the service_id for services that have been booked.", "We can use a subquery to select all service_ids from Party_Services and then use the NOT IN clause to filter out those from the Services table.", "The final query selects the service_name from the Services table where the service_id is not in the list of used service_ids."], "pred_sql": "SELECT service_name FROM Services WHERE service_id NOT IN (SELECT service_id FROM Party_Services);", "gold_sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id", "source_tables": ["services", "party_services"]}
{"sample_id": 6329, "db_id": "e_government", "question": "What are the names of the services that have never been used?", "rationale": ["Identify the Services table which contains the service names and their identifiers.", "To find services that have never been used, we need to check which service_ids are not present in the Party_Services table.", "The Party_Services table contains records of services that have been booked, so we will use a subquery to select all service_ids from this table.", "The main query will select the service_name from the Services table where the service_id is not in the list of service_ids returned by the subquery."], "pred_sql": "SELECT service_name FROM Services WHERE service_id NOT IN (SELECT service_id FROM Party_Services);", "gold_sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id", "source_tables": ["services", "party_services"]}
{"sample_id": 6330, "db_id": "e_government", "question": "Find the name of all the cities and states.", "rationale": ["Identify the relevant table: The 'Addresses' table contains the columns for city and state.", "Determine the columns needed: We need 'town_city' for the city names and 'state_province_county' for the states.", "Use SELECT DISTINCT to ensure we get unique combinations of city and state.", "Construct the SQL query to select the distinct city and state from the Addresses table."], "pred_sql": "SELECT DISTINCT town_city, state_province_county FROM Addresses;", "gold_sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "source_tables": ["addresses"]}
{"sample_id": 6331, "db_id": "e_government", "question": "What are the names of all cities and states?", "rationale": ["Identify the relevant table: The 'Addresses' table contains the columns for city and state.", "Select the columns needed: We need 'town_city' for the city names and 'state_province_county' for the states.", "Use DISTINCT to ensure unique combinations of city and state are returned.", "Construct the SQL query to select the distinct city and state from the Addresses table."], "pred_sql": "SELECT DISTINCT town_city, state_province_county FROM Addresses;", "gold_sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "source_tables": ["addresses"]}
{"sample_id": 6332, "db_id": "e_government", "question": "How many cities are there in state \"Colorado\"?", "rationale": ["Identify the relevant table: The 'Addresses' table contains the information about cities and states.", "Determine the specific column needed: The 'town_city' column will provide the names of the cities, and 'state_province_county' will filter the results to only those in Colorado.", "Use COUNT(DISTINCT) to count unique cities: This ensures that we only count each city once, even if it appears multiple times in the dataset.", "Construct the SQL query: The query selects the count of distinct town cities from the Addresses table where the state is 'Colorado'."], "pred_sql": "SELECT COUNT(DISTINCT town_city) AS city_count FROM Addresses WHERE state_province_county = 'Colorado';", "gold_sql": "SELECT count(*) FROM addresses WHERE state_province_county  =  'Colorado'", "source_tables": ["addresses"]}
{"sample_id": 6333, "db_id": "e_government", "question": "Count the number of cities in the state of Colorado.", "rationale": ["Identify the table that contains city information, which is the 'Addresses' table.", "Determine the relevant column for the city name, which is 'town_city'.", "Identify the column that specifies the state, which is 'state_province_county'.", "Formulate a query to count distinct cities in the specified state (Colorado).", "Use the COUNT function to count the unique values in the 'town_city' column where 'state_province_county' is 'Colorado'."], "pred_sql": "SELECT COUNT(DISTINCT town_city) AS city_count FROM Addresses WHERE state_province_county = 'Colorado';", "gold_sql": "SELECT count(*) FROM addresses WHERE state_province_county  =  'Colorado'", "source_tables": ["addresses"]}
{"sample_id": 6334, "db_id": "e_government", "question": "Find the payment method code used by more than 3 parties.", "rationale": ["Identify the relevant table: The query is about payment methods, which are stored in the Parties table.", "Select the payment method code: We need to retrieve the 'payment_method_code' from the Parties table.", "Group by payment method code: To count how many parties used each payment method, we will group the results by 'payment_method_code'.", "Count the number of parties: We will use the COUNT function to count the number of 'party_id' for each 'payment_method_code'.", "Filter the results: We want only those payment methods that have been used by more than 3 parties, so we will use the HAVING clause to filter the groups based on the count."], "pred_sql": "SELECT payment_method_code FROM Parties GROUP BY payment_method_code HAVING COUNT(party_id) > 3;", "gold_sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3", "source_tables": ["parties"]}
{"sample_id": 6335, "db_id": "e_government", "question": "What are the payment method codes that have been used by more than 3 parties?", "rationale": ["Identify the relevant table: The query is about payment method codes, which are found in the Parties table.", "Select the payment method code: We need to retrieve the 'payment_method_code' from the Parties table.", "Group by payment method code: To count how many parties have used each payment method, we will group the results by 'payment_method_code'.", "Count the number of parties: We will use the COUNT function to count the number of 'party_id' for each 'payment_method_code'.", "Filter the results: We want only those payment method codes that have been used by more than 3 parties, so we will use the HAVING clause to filter the results based on the count."], "pred_sql": "SELECT payment_method_code FROM Parties GROUP BY payment_method_code HAVING COUNT(party_id) > 3;", "gold_sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3", "source_tables": ["parties"]}
{"sample_id": 6336, "db_id": "e_government", "question": "Find the name of organizations whose names contain \"Party\".", "rationale": ["Identify the table that contains the organization names, which is the Organizations table.", "Determine the column that holds the organization names, which is organization_name.", "Formulate a SQL SELECT statement to retrieve the organization_name.", "Add a WHERE clause to filter the results to only those organization names that contain the word 'Party'.", "Use the LIKE operator with wildcards '%' to match any organization names that include 'Party' anywhere in the name."], "pred_sql": "SELECT organization_name FROM Organizations WHERE organization_name LIKE '%Party%';", "gold_sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE '%Party%'", "source_tables": ["organizations"]}
{"sample_id": 6337, "db_id": "e_government", "question": "What are the names of organizations that contain the word \"Party\"?", "rationale": ["Identify the table that contains the organization names, which is the Organizations table.", "Determine the column that holds the organization names, which is organization_name.", "Formulate a SQL query to select organization_name from the Organizations table.", "Use the LIKE operator to filter organization names that contain the word 'Party', using wildcards (%) to match any characters before or after 'Party'."], "pred_sql": "SELECT organization_name FROM Organizations WHERE organization_name LIKE '%Party%';", "gold_sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE '%Party%'", "source_tables": ["organizations"]}
{"sample_id": 6338, "db_id": "e_government", "question": "How many distinct payment methods are used by parties?", "rationale": ["Identify the table that contains payment method information, which is the Parties table.", "To find the number of distinct payment methods, we need to use the COUNT function along with DISTINCT.", "The SQL query will select the count of distinct payment_method_code from the Parties table."], "pred_sql": "SELECT COUNT(DISTINCT payment_method_code) AS distinct_payment_methods FROM Parties;", "gold_sql": "SELECT count(DISTINCT payment_method_code) FROM parties", "source_tables": ["parties"]}
{"sample_id": 6339, "db_id": "e_government", "question": "Count the number of different payment method codes used by parties.", "rationale": ["Identify the table that contains the payment method codes, which is the 'Parties' table.", "To count the number of different payment method codes, we need to use the COUNT function along with DISTINCT to ensure we only count unique codes.", "Construct the SQL query to select the count of distinct payment_method_code from the Parties table."], "pred_sql": "SELECT COUNT(DISTINCT payment_method_code) AS unique_payment_methods FROM Parties;", "gold_sql": "SELECT count(DISTINCT payment_method_code) FROM parties", "source_tables": ["parties"]}
{"sample_id": 6340, "db_id": "e_government", "question": "Which is the email of the party that has used the services the most number of times?", "rationale": ["Identify the relevant tables: We need to find the email of the party, which is in the Parties table, and we need to count the number of times services have been used, which is in the Party_Services table.", "Join the Parties table with the Party_Services table on the party_id and customer_id fields to link parties with their service usage.", "Group the results by party_id to count the number of services used by each party.", "Use COUNT() to count the number of bookings for each party.", "Order the results in descending order based on the count of bookings to find the party that has used services the most.", "Limit the results to 1 to get only the top party with the most service usage."], "pred_sql": "SELECT p.party_email\nFROM Parties p\nJOIN Party_Services ps ON p.party_id = ps.customer_id\nGROUP BY p.party_id\nORDER BY COUNT(ps.booking_id) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party_services", "parties"]}
{"sample_id": 6341, "db_id": "e_government", "question": "Return the party email that has used party services the greatest number of times.", "rationale": ["Identify the relevant tables: Party_Services for service usage and Parties for party email.", "Join the Party_Services table with the Parties table on the customer_id and party_id to access party emails.", "Group the results by party_email to count the number of services used by each party.", "Order the results in descending order based on the count of services used.", "Limit the results to 1 to get the party email with the greatest number of service usages."], "pred_sql": "SELECT p.party_email\nFROM Party_Services ps\nJOIN Parties p ON ps.customer_id = p.party_id\nGROUP BY p.party_email\nORDER BY COUNT(ps.booking_id) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party_services", "parties"]}
{"sample_id": 6342, "db_id": "e_government", "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?", "rationale": ["Identify the relevant table: The query is about addresses, so we will use the 'Addresses' table.", "Determine the column to filter: We need to filter by the 'line_1_number_building' column to find the specific address.", "Select the state information: We want to retrieve the 'state_province_county' column to find out which state the address is in.", "Use DISTINCT to avoid duplicate states: Since an address might be associated with multiple states, we will use DISTINCT to get unique results.", "Construct the SQL query: Combine all the elements into a SQL SELECT statement that filters by the specified address."], "pred_sql": "SELECT DISTINCT state_province_county FROM Addresses WHERE line_1_number_building = '6862 Kaitlyn Knolls';", "gold_sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'", "source_tables": ["addresses"]}
{"sample_id": 6343, "db_id": "e_government", "question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".", "rationale": ["Identify the table that contains the required information: The 'Addresses' table contains the 'state_province_county' and 'line_1_number_building' columns.", "Determine the specific column to retrieve: We need to get the 'state_province_county' corresponding to the specified address.", "Formulate the SQL SELECT statement: We will select 'state_province_county' from the 'Addresses' table.", "Add a WHERE clause to filter the results: We will filter the results to only include the row where 'line_1_number_building' equals '6862 Kaitlyn Knolls'."], "pred_sql": "SELECT state_province_county FROM Addresses WHERE line_1_number_building = '6862 Kaitlyn Knolls';", "gold_sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'", "source_tables": ["addresses"]}
{"sample_id": 6344, "db_id": "e_government", "question": "What is the name of organization that has the greatest number of contact individuals?", "rationale": ["Identify the relevant tables: Organizations and Organization_Contact_Individuals.", "We need to find the organization with the greatest number of contact individuals, so we will join these two tables on the organization_id.", "Group the results by organization_id to count the number of contact individuals for each organization.", "Order the results by the count of contact individuals in descending order to get the organization with the most contacts at the top.", "Limit the results to 1 to get only the organization with the greatest number of contact individuals."], "pred_sql": "SELECT o.organization_name\nFROM Organizations o\nJOIN Organization_Contact_Individuals oci ON o.organization_id = oci.organization_id\nGROUP BY o.organization_id\nORDER BY COUNT(oci.individual_id) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals"]}
{"sample_id": 6345, "db_id": "e_government", "question": "Return the name of the organization which has the most contact individuals.", "rationale": ["Identify the relevant tables: Organizations and Organization_Contact_Individuals.", "We need to count the number of contact individuals for each organization, so we will join the Organizations table with the Organization_Contact_Individuals table on the organization_id.", "Group the results by organization_id to aggregate the count of contact individuals for each organization.", "Order the results by the count of contact individuals in descending order to get the organization with the most contact individuals at the top.", "Limit the results to 1 to return only the organization with the highest count."], "pred_sql": "SELECT o.organization_name\nFROM Organizations o\nJOIN Organization_Contact_Individuals oci ON o.organization_id = oci.organization_id\nGROUP BY o.organization_id\nORDER BY COUNT(oci.individual_id) DESC\nLIMIT 1;", "gold_sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals"]}
{"sample_id": 6346, "db_id": "e_government", "question": "Find the last name of the individuals that have been contact individuals of an organization.", "rationale": ["Identify the relevant tables: We need to find individuals who are contact individuals for organizations, so we will use the Organization_Contact_Individuals and Individuals tables.", "Determine the relationship: The Organization_Contact_Individuals table has a foreign key 'individual_id' that links to the Individuals table.", "Select the required field: We need the last names of the individuals, which is in the Individuals table under 'individual_last_name'.", "Construct the SQL query: We will use a JOIN to combine the Organization_Contact_Individuals and Individuals tables on the 'individual_id' field and select the 'individual_last_name' from the Individuals table."], "pred_sql": "SELECT Individuals.individual_last_name \nFROM Organization_Contact_Individuals \nJOIN Individuals ON Organization_Contact_Individuals.individual_id = Individuals.individual_id;", "gold_sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id", "source_tables": ["organization_contact_individuals", "individuals"]}
{"sample_id": 6347, "db_id": "e_government", "question": "What are the last names of individuals who have been contact individuals for an organization?", "rationale": ["Identify the relevant tables: We need to find individuals who are contact individuals for organizations, which involves the 'Individuals' and 'Organization_Contact_Individuals' tables.", "Determine the relationship: The 'Organization_Contact_Individuals' table has a foreign key 'individual_id' that links to the 'Individuals' table.", "Select the required field: We need the last names of the individuals, which is found in the 'individual_last_name' column of the 'Individuals' table.", "Use DISTINCT to avoid duplicate last names: Since an individual may be a contact for multiple organizations, we use DISTINCT to get unique last names.", "Construct the SQL query: We will join the 'Organization_Contact_Individuals' table with the 'Individuals' table on the 'individual_id' and select the distinct last names."], "pred_sql": "SELECT DISTINCT Individuals.individual_last_name \nFROM Organization_Contact_Individuals \nJOIN Individuals ON Organization_Contact_Individuals.individual_id = Individuals.individual_id;", "gold_sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id", "source_tables": ["organization_contact_individuals", "individuals"]}
{"sample_id": 6348, "db_id": "school_bus", "question": "How many drivers are there?", "rationale": ["Identify the table that contains the information about drivers, which is the 'driver' table.", "To find out how many drivers there are, we need to count the number of entries in the 'driver' table.", "Use the COUNT() function to count the total number of rows in the 'driver' table.", "Construct the SQL query to select the count from the 'driver' table."], "pred_sql": "SELECT COUNT(*) AS Number_of_Drivers FROM driver;", "gold_sql": "SELECT count(*) FROM driver", "source_tables": ["driver"]}
{"sample_id": 6349, "db_id": "school_bus", "question": "Show the name, home city, and age for all drivers.", "rationale": ["Identify the table that contains the required information: the 'driver' table.", "Determine the specific columns needed: 'Name', 'Home_city', and 'Age'.", "Construct the SQL SELECT statement to retrieve these columns from the 'driver' table."], "pred_sql": "SELECT Name, Home_city, Age FROM driver;", "gold_sql": "SELECT name ,  home_city ,  age FROM driver", "source_tables": ["driver"]}
{"sample_id": 6350, "db_id": "school_bus", "question": "Show the party and the number of drivers in each party.", "rationale": ["Identify the relevant table: The 'driver' table contains the information about drivers and their political party affiliations.", "Determine the required columns: We need the 'Party' column to show the party affiliation and a count of drivers for each party.", "Use the COUNT() function: This function will help us count the number of drivers associated with each party.", "Group the results: To get the count of drivers per party, we need to group the results by the 'Party' column using GROUP BY.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT Party, COUNT(Driver_ID) AS Number_of_Drivers FROM driver GROUP BY Party;", "gold_sql": "SELECT party ,  count(*) FROM driver GROUP BY party", "source_tables": ["driver"]}
{"sample_id": 6351, "db_id": "school_bus", "question": "Show the name of drivers in descending order of age.", "rationale": ["Identify the table that contains the required information: the 'driver' table has the 'Name' and 'Age' columns.", "Select the 'Name' column from the 'driver' table.", "Order the results by the 'Age' column in descending order to show the oldest drivers first."], "pred_sql": "SELECT Name FROM driver ORDER BY Age DESC;", "gold_sql": "SELECT name FROM driver ORDER BY age DESC", "source_tables": ["driver"]}
{"sample_id": 6352, "db_id": "school_bus", "question": "Show all different home cities.", "rationale": ["Identify the table that contains the information about home cities, which is the 'driver' table.", "To get all different home cities, we need to select the 'Home_city' column from the 'driver' table.", "Since we want only unique home cities, we will use the DISTINCT keyword in the SQL query."], "pred_sql": "SELECT DISTINCT Home_city FROM driver;", "gold_sql": "SELECT DISTINCT home_city FROM driver", "source_tables": ["driver"]}
{"sample_id": 6353, "db_id": "school_bus", "question": "Show the home city with the most number of drivers.", "rationale": ["Identify the relevant table: The 'driver' table contains the 'Home_city' and 'Driver_ID' columns.", "Count the number of drivers for each home city: Use the COUNT() function to count 'Driver_ID' for each 'Home_city'.", "Group the results by 'Home_city': Use GROUP BY to aggregate the counts for each city.", "Order the results by the count of drivers in descending order: Use ORDER BY with DESC to get the city with the most drivers at the top.", "Limit the results to only the top entry: Use LIMIT 1 to get only the city with the highest count."], "pred_sql": "SELECT Home_city, COUNT(Driver_ID) AS Driver_Count FROM driver GROUP BY Home_city ORDER BY Driver_Count DESC LIMIT 1;", "gold_sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["driver"]}
{"sample_id": 6354, "db_id": "school_bus", "question": "Show the party with drivers from Hartford and drivers older than 40.", "rationale": ["Identify the relevant table: The 'driver' table contains the necessary information about drivers, including their party affiliation, home city, and age.", "Filter the drivers based on the specified conditions: We need drivers who reside in 'Hartford' and are older than 40.", "Select the distinct political parties of the filtered drivers: We want to show the unique political parties of these drivers.", "Construct the SQL query using the SELECT statement to retrieve the distinct party names from the driver table with the specified conditions."], "pred_sql": "SELECT DISTINCT driver.Party FROM driver WHERE driver.Home_city = 'Hartford' AND driver.Age > '40';", "gold_sql": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40", "source_tables": ["driver"]}
{"sample_id": 6355, "db_id": "school_bus", "question": "Show home city where at least two drivers older than 40 are from.", "rationale": ["Identify the relevant table: The 'driver' table contains the information about drivers, including their age and home city.", "Filter the drivers: We need to find drivers who are older than 40 years. This is done using the condition 'Age > 40'.", "Group the results: To find home cities with at least two drivers, we will group the results by 'Home_city'.", "Count the drivers: We will use the COUNT function to count the number of drivers in each home city.", "Apply the HAVING clause: To filter the grouped results to only include home cities with two or more drivers, we will use the HAVING clause with the condition 'COUNT(Driver_ID) >= 2'."], "pred_sql": "SELECT Home_city FROM driver WHERE Age > 40 GROUP BY Home_city HAVING COUNT(Driver_ID) >= 2;", "gold_sql": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2", "source_tables": ["driver"]}
{"sample_id": 6356, "db_id": "school_bus", "question": "Show all home cities except for those having a driver older than 40.", "rationale": ["Identify the main requirement: Show all home cities of drivers, excluding those with drivers older than 40.", "To achieve this, we need to first find the drivers who are older than 40.", "We can do this by selecting Driver_IDs from the driver table where Age is greater than 40.", "Next, we need to select distinct home cities from the driver table, but we want to exclude the cities of the drivers identified in the previous step.", "We can use a subquery to filter out the Driver_IDs of drivers older than 40 from our main query that selects Home_city."], "pred_sql": "SELECT DISTINCT Home_city FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM driver WHERE Age > '40')", "gold_sql": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age  >  40", "source_tables": ["driver"]}
{"sample_id": 6357, "db_id": "school_bus", "question": "Show the names of the drivers without a school bus.", "rationale": ["Identify the table that contains driver information, which is the 'driver' table.", "We need to find drivers who do not have a school bus assigned to them.", "To do this, we will use a subquery to select all Driver_IDs from the 'school_bus' table.", "We will then use the NOT IN clause to filter out those Driver_IDs from the 'driver' table.", "Finally, we will select the 'Name' column from the filtered results."], "pred_sql": "SELECT Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM school_bus);", "gold_sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)", "source_tables": ["school_bus", "driver"]}
{"sample_id": 6358, "db_id": "school_bus", "question": "Show the types of schools that have two schools.", "rationale": ["Identify the relevant table: The query is about schools, so we will use the 'school' table.", "We need to find the types of schools that have exactly two schools associated with them.", "To do this, we will use the COUNT function to count the number of schools for each type.", "We will group the results by the 'Type' column to aggregate the counts for each type of school.", "Finally, we will use the HAVING clause to filter the groups to only include those with a count of 2."], "pred_sql": "SELECT DISTINCT Type FROM school GROUP BY Type HAVING COUNT(School_ID) = 2;", "gold_sql": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2", "source_tables": ["school"]}
{"sample_id": 6359, "db_id": "school_bus", "question": "Show the school name and driver name for all school buses.", "rationale": ["Identify the tables involved: school, driver, and school_bus.", "Determine the columns needed: school name from the school table and driver name from the driver table.", "Establish the relationships between the tables using JOINs: school_bus links to school via School_ID and to driver via Driver_ID.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT school.School, driver.Name FROM school_bus JOIN school ON school_bus.School_ID = school.School_ID JOIN driver ON school_bus.Driver_ID = driver.Driver_ID;", "gold_sql": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id", "source_tables": ["school", "driver", "school_bus"]}
{"sample_id": 6360, "db_id": "school_bus", "question": "What is the maximum, minimum and average years spent working on a school bus?", "rationale": ["Identify the relevant table: The 'school_bus' table contains the 'Years_Working' column which is needed for the query.", "Determine the required calculations: We need to find the maximum, minimum, and average of the 'Years_Working' column.", "Construct the SQL query: Use the SELECT statement to retrieve the maximum, minimum, and average values from the 'Years_Working' column in the 'school_bus' table."], "pred_sql": "SELECT MAX(Years_Working) AS Max_Years, MIN(Years_Working) AS Min_Years, AVG(Years_Working) AS Avg_Years FROM school_bus;", "gold_sql": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus", "source_tables": ["school_bus"]}
{"sample_id": 6361, "db_id": "school_bus", "question": "Show the school name and type for schools without a school bus.", "rationale": ["We need to retrieve the school name and type for schools that do not have a school bus.", "To find schools without a school bus, we can use a LEFT JOIN between the 'school' table and the 'school_bus' table on the 'School_ID' column.", "The LEFT JOIN will include all records from the 'school' table and the matching records from the 'school_bus' table. If there is no match, the result is NULL on the side of the 'school_bus' table.", "To filter for schools without a school bus, we can add a WHERE clause that checks for NULL values in the 'school_bus.School_ID' column."], "pred_sql": "SELECT school.School, school.Type FROM school LEFT JOIN school_bus ON school.School_ID = school_bus.School_ID WHERE school_bus.School_ID IS NULL;", "gold_sql": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)", "source_tables": ["school", "school_bus"]}
{"sample_id": 6362, "db_id": "school_bus", "question": "Show the type of school and the number of buses for each type.", "rationale": ["Identify the relevant tables: We need to gather information from the 'school' table for the type of school and the 'school_bus' table to count the number of buses.", "Determine the relationship: The 'school' table is linked to the 'school_bus' table through the 'School_ID'.", "Use a LEFT JOIN to include all school types even if they have no associated buses.", "Count the number of buses for each type of school using COUNT() function and group the results by the school type using GROUP BY clause."], "pred_sql": "SELECT s.Type, COUNT(sb.School_ID) AS Number_of_Buses\nFROM school s\nLEFT JOIN school_bus sb ON s.School_ID = sb.School_ID\nGROUP BY s.Type;", "gold_sql": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type", "source_tables": ["school", "school_bus"]}
{"sample_id": 6363, "db_id": "school_bus", "question": "How many drivers are from Hartford city or younger than 40?", "rationale": ["Identify the table that contains the relevant information about drivers, which is the 'driver' table.", "Determine the conditions specified in the query: drivers from 'Hartford' city and drivers younger than 40.", "Use the COUNT() function to count the number of drivers that meet either of the conditions.", "Construct the SQL query to select the count of drivers from the 'driver' table where the Home_city is 'Hartford' or the Age is less than 40."], "pred_sql": "SELECT COUNT(*) AS Driver_Count FROM driver WHERE Home_city = 'Hartford' OR Age < '40';", "gold_sql": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40", "source_tables": ["driver"]}
{"sample_id": 6364, "db_id": "school_bus", "question": "List names for drivers from Hartford city and younger than 40.", "rationale": ["Identify the table that contains the driver information, which is the 'driver' table.", "Determine the columns needed for the query: we need the 'Name' of the drivers.", "Set the conditions for the query: we want drivers from 'Hartford' city and those who are younger than 40.", "Construct the SQL SELECT statement to retrieve the 'Name' from the 'driver' table where the 'Home_city' is 'Hartford' and 'Age' is less than 40."], "pred_sql": "SELECT Name FROM driver WHERE Home_city = 'Hartford' AND Age < '40';", "gold_sql": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40", "source_tables": ["driver"]}
{"sample_id": 6365, "db_id": "school_bus", "question": "find the name of driver who is driving the school bus with the longest working history.", "rationale": ["Identify the relevant tables: 'driver' and 'school_bus' are needed to find the driver's name and their working history.", "Join the 'driver' table with the 'school_bus' table on the 'Driver_ID' to associate drivers with their respective school buses.", "Order the results by 'Years_Working' in descending order to get the driver with the longest working history at the top.", "Limit the results to 1 to get only the name of the driver with the longest working history."], "pred_sql": "SELECT d.Name FROM driver d JOIN school_bus sb ON d.Driver_ID = sb.Driver_ID ORDER BY sb.Years_Working DESC LIMIT 1;", "gold_sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1", "source_tables": ["school_bus", "driver"]}
{"sample_id": 6366, "db_id": "flight_company", "question": "How many flights have a velocity larger than 200?", "rationale": ["Identify the table that contains flight information, which is the 'flight' table.", "Determine the column that contains the velocity of the flights, which is 'Velocity'.", "Formulate a condition to filter flights with a velocity greater than 200.", "Use the COUNT() function to count the number of flights that meet the condition.", "Construct the SQL query to select the count from the 'flight' table where the velocity is greater than 200."], "pred_sql": "SELECT COUNT(*) AS flight_count FROM flight WHERE Velocity > 200;", "gold_sql": "SELECT count(*) FROM flight WHERE velocity  >  200", "source_tables": ["flight"]}
{"sample_id": 6367, "db_id": "flight_company", "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.", "rationale": ["Identify the columns needed: Vehicle_Flight_number, Date, and Pilot from the flight table.", "Determine the table to query: the flight table contains all the necessary information about the flights.", "Specify the order of the results: the results should be ordered by the Altitude column.", "Construct the SQL SELECT statement to retrieve the specified columns from the flight table and apply the ORDER BY clause."], "pred_sql": "SELECT Vehicle_Flight_number, Date, Pilot FROM flight ORDER BY Altitude;", "gold_sql": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC", "source_tables": ["flight"]}
{"sample_id": 6368, "db_id": "flight_company", "question": "List the id, country, city and name of the airports ordered alphabetically by the name.", "rationale": ["Identify the required columns: id, Country, City, and name from the airport table.", "Specify the table to select from, which is the airport table.", "Use the ORDER BY clause to sort the results alphabetically by the name column.", "Specify the sorting order as ascending (ASC)."], "pred_sql": "SELECT id, Country, City, name FROM airport ORDER BY name ASC;", "gold_sql": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name", "source_tables": ["airport"]}
{"sample_id": 6369, "db_id": "flight_company", "question": "What is maximum group equity shareholding of the companies?", "rationale": ["Identify the table that contains the relevant data, which is 'operate_company'.", "Determine the column that holds the group equity shareholding information, which is 'Group_Equity_Shareholding'.", "Use the SQL aggregate function MAX() to find the maximum value in the 'Group_Equity_Shareholding' column.", "Construct the SQL query to select the maximum group equity shareholding from the 'operate_company' table."], "pred_sql": "SELECT MAX(Group_Equity_Shareholding) AS max_equity_shareholding FROM operate_company;", "gold_sql": "SELECT max(group_equity_shareholding) FROM operate_company", "source_tables": ["operate_company"]}
{"sample_id": 6370, "db_id": "flight_company", "question": "What is the velocity of the pilot named 'Thompson'?", "rationale": ["Identify the relevant table: The query is asking for the velocity of a pilot, which relates to the 'flight' table.", "Determine the specific column needed: The 'Velocity' column contains the information about the speed of the flight.", "Filter the results: We need to find the velocity for the pilot named 'Thompson', so we will add a WHERE clause to filter by the 'Pilot' column."], "pred_sql": "SELECT Velocity FROM flight WHERE Pilot = 'Thompson';", "gold_sql": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'", "source_tables": ["flight"]}
{"sample_id": 6371, "db_id": "flight_company", "question": "What are the names and types of the companies that have ever operated a flight?", "rationale": ["Identify the relevant tables: We need to retrieve information from the 'operate_company' table for company names and types, and we need to link it to the 'flight' table to find companies that have operated flights.", "Determine the necessary columns: We need the 'name' and 'Type' columns from the 'operate_company' table.", "Establish the relationship: The 'flight' table has a foreign key 'company_id' that links to the 'id' in the 'operate_company' table.", "Use a JOIN operation: We will perform an INNER JOIN between 'operate_company' and 'flight' on the condition that 'operate_company.id' matches 'flight.company_id'.", "Select distinct results: Since we want to avoid duplicate entries for companies that have operated flights, we will use DISTINCT in our SELECT statement."], "pred_sql": "SELECT DISTINCT operate_company.name, operate_company.Type FROM operate_company JOIN flight ON operate_company.id = flight.company_id;", "gold_sql": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id", "source_tables": ["flight", "operate_company"]}
{"sample_id": 6372, "db_id": "flight_company", "question": "What are the names of the airports which are not in the country 'Iceland'?", "rationale": ["Identify the table that contains the airport information, which is the 'airport' table.", "Determine the column that contains the country information, which is 'Country'.", "Formulate a query to select the 'name' of the airports where the 'Country' is not equal to 'Iceland'.", "Use the SQL syntax for selecting data with a condition, specifically using the '!=' operator to filter out airports in Iceland."], "pred_sql": "SELECT name FROM airport WHERE Country != 'Iceland';", "gold_sql": "SELECT name FROM airport WHERE country != 'Iceland'", "source_tables": ["airport"]}
{"sample_id": 6373, "db_id": "flight_company", "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?", "rationale": ["Identify the relevant tables: We need to look at the 'operate_company' table for company types and the 'flight' table for flight details.", "Determine the condition: We are interested in flights with a velocity less than 200.", "Join the tables: We need to join 'operate_company' and 'flight' on the company ID to link companies with their flights.", "Select distinct types: We want to select distinct types of companies that meet the velocity condition."], "pred_sql": "SELECT DISTINCT o.Type FROM operate_company o JOIN flight f ON o.id = f.company_id WHERE f.Velocity < 200;", "gold_sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200", "source_tables": ["flight", "operate_company"]}
{"sample_id": 6374, "db_id": "flight_company", "question": "What are the ids and names of the companies that operated more than one flight?", "rationale": ["Identify the relevant tables: We need to retrieve data from the 'operate_company' table for company ids and names, and the 'flight' table to count the number of flights operated by each company.", "Join the 'operate_company' table with the 'flight' table on the company_id to associate each flight with its operating company.", "Group the results by the company id and name to aggregate the flight counts for each company.", "Use the HAVING clause to filter the groups to only include those companies that have more than one flight (COUNT(f.id) > 1).", "Select the company id and name from the filtered results."], "pred_sql": "SELECT oc.id, oc.name FROM operate_company oc JOIN flight f ON oc.id = f.company_id GROUP BY oc.id, oc.name HAVING COUNT(f.id) > 1;", "gold_sql": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1", "source_tables": ["flight", "operate_company"]}
{"sample_id": 6375, "db_id": "flight_company", "question": "What is the id, name and IATA code of the airport that had most number of flights?", "rationale": ["Identify the relevant tables: 'airport' and 'flight' are needed to get airport details and flight counts.", "We need to select the 'id', 'name', and 'IATA' code from the 'airport' table.", "To find the airport with the most flights, we need to join the 'airport' table with the 'flight' table on the airport ID.", "We will group the results by airport ID, name, and IATA code to count the number of flights for each airport.", "We will order the results by the count of flights in descending order to get the airport with the most flights at the top.", "Finally, we will limit the results to 1 to get only the airport with the highest flight count."], "pred_sql": "SELECT airport.id, airport.name, airport.IATA \nFROM airport \nJOIN flight ON airport.id = flight.airport_id \nGROUP BY airport.id, airport.name, airport.IATA \nORDER BY COUNT(flight.id) DESC \nLIMIT 1;", "gold_sql": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airport", "flight"]}
{"sample_id": 6376, "db_id": "flight_company", "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?", "rationale": ["Identify the relevant tables: We need to look at the 'flight' table for pilot names and the 'airport' table to filter by country and airport name.", "Determine the necessary columns: We need the distinct names of pilots, which is in the 'Pilot' column of the 'flight' table.", "Establish the relationship between tables: The 'flight' table has a foreign key 'airport_id' that links to the 'airport' table's 'id'.", "Formulate the WHERE clause: We need to filter results where the airport's country is 'United States' or the airport's name is 'Billund Airport'.", "Use DISTINCT to ensure we only get unique pilot names."], "pred_sql": "SELECT DISTINCT f.Pilot \nFROM flight f \nJOIN airport a ON f.airport_id = a.id \nWHERE a.Country = 'United States' OR a.name = 'Billund Airport';", "gold_sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'", "source_tables": ["airport", "flight"]}
{"sample_id": 6377, "db_id": "flight_company", "question": "What is the most common company type, and how many are there?", "rationale": ["Identify the relevant table: The query pertains to the 'operate_company' table since it asks about company types.", "Determine the required information: We need to find the most common company type and the count of companies of that type.", "Use the COUNT() function: This function will help us count the number of companies for each type.", "Group the results: We will use GROUP BY to group the results by the 'Type' column.", "Order the results: To find the most common type, we will order the results by the count in descending order.", "Limit the results: We will use LIMIT 1 to get only the most common company type."], "pred_sql": "SELECT Type, COUNT(*) as count FROM operate_company GROUP BY Type ORDER BY count DESC LIMIT 1;", "gold_sql": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["operate_company"]}
{"sample_id": 6378, "db_id": "flight_company", "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?", "rationale": ["Identify the main goal: Count the number of airports where the pilot 'Thompson' has not operated any flights.", "To achieve this, we need to find all airports and exclude those where 'Thompson' has flown.", "First, we will create a subquery to select all distinct airport IDs from the flight table where the pilot is 'Thompson'.", "Next, we will use the main query to count all airports whose IDs are not in the list generated by the subquery.", "The final SQL query will count the airports that are not associated with any flights operated by 'Thompson'."], "pred_sql": "SELECT COUNT(*) AS airport_count FROM airport WHERE id NOT IN (SELECT DISTINCT airport_id FROM flight WHERE Pilot = 'Thompson');", "gold_sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );", "source_tables": ["airport", "flight"]}
{"sample_id": 6379, "db_id": "flight_company", "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.", "rationale": ["Identify the relevant tables: We need to look at the 'flight' table for pilots and the 'operate_company' table for company activities.", "We need to find pilots who have flown for companies that provide both 'Cargo' and 'Catering' services.", "To achieve this, we will join the 'flight' table with the 'operate_company' table twice: once for the 'Cargo' services and once for the 'Catering' services.", "Use a WHERE clause to filter the companies based on their 'Principal_activities' for both types of services.", "Select distinct pilot names to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT f1.Pilot\nFROM flight f1\nJOIN operate_company oc1 ON f1.company_id = oc1.id\nJOIN operate_company oc2 ON f1.company_id = oc2.id\nWHERE oc1.Principal_activities LIKE '%Cargo%'\nAND oc2.Principal_activities LIKE '%Catering%';", "gold_sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'", "source_tables": ["flight", "operate_company"]}
{"sample_id": 6380, "db_id": "flight_company", "question": "Which of the airport names contains the word 'international'?", "rationale": ["Identify the table that contains the airport names, which is the 'airport' table.", "Determine the column that holds the airport names, which is the 'name' column.", "Formulate a query to select the 'name' column from the 'airport' table.", "Use the LIKE operator to filter the results for names that contain the word 'international', using wildcards (%) to match any characters before or after the word."], "pred_sql": "SELECT name FROM airport WHERE name LIKE '%international%';", "gold_sql": "SELECT name FROM airport WHERE name LIKE '%international%'", "source_tables": ["airport"]}
{"sample_id": 6381, "db_id": "flight_company", "question": "How many companies operates airlines in each airport?", "rationale": ["Identify the tables involved: We need data from the 'airport', 'operate_company', and 'flight' tables.", "Determine the relationship: The 'flight' table links 'airport' and 'operate_company' through foreign keys.", "Filter for airlines: We need to count only those companies that operate as airlines, so we will filter by 'operate_company.Type'.", "Group by airport: We want the count of airlines for each airport, so we will group the results by the airport name.", "Select the relevant columns: We will select the airport name and the count of airlines for the final output."], "pred_sql": "SELECT airport.name AS Airport_Name, COUNT(operate_company.id) AS Number_of_Airlines\nFROM airport\nJOIN flight ON airport.id = flight.airport_id\nJOIN operate_company ON flight.company_id = operate_company.id\nWHERE operate_company.Type = 'airline'\nGROUP BY airport.name;", "gold_sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id", "source_tables": ["airport", "flight", "operate_company"]}
{"sample_id": 6382, "db_id": "flight_company", "question": "how many airports are there in each country?", "rationale": ["Identify the relevant table: The 'airport' table contains information about airports, including their country.", "Determine the required information: We need to count the number of airports in each country.", "Use the COUNT() function to count the number of airports for each country.", "Group the results by country using GROUP BY clause to get the count for each country."], "pred_sql": "SELECT Country, COUNT(*) AS airport_count FROM airport GROUP BY Country;", "gold_sql": "SELECT count(*) ,  country FROM airport GROUP BY country", "source_tables": ["airport"]}
{"sample_id": 6383, "db_id": "flight_company", "question": "which countries have more than 2 airports?", "rationale": ["Identify the relevant table: The query requires information about countries and their airports, so we will use the 'airport' table.", "Determine the necessary columns: We need the 'Country' column to group by and count the number of airports.", "Group the results: We will group the results by 'Country' to aggregate the number of airports in each country.", "Count the airports: We will use the COUNT function to count the number of airports for each country.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with more than 2 airports."], "pred_sql": "SELECT Country FROM airport GROUP BY Country HAVING COUNT(*) > 2;", "gold_sql": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2", "source_tables": ["airport"]}
{"sample_id": 6384, "db_id": "flight_company", "question": "which pilot is in charge of the most number of flights?", "rationale": ["Identify the relevant table: The 'flight' table contains information about pilots and their respective flights.", "Determine the required information: We need to find out which pilot is in charge of the most flights, which involves counting the number of flights per pilot.", "Use the COUNT() function: This function will help us count the number of flights for each pilot.", "Group the results: We will use GROUP BY to group the results by the 'Pilot' column so that we can count flights for each individual pilot.", "Order the results: To find the pilot with the most flights, we will order the results in descending order based on the flight count.", "Limit the results: We will use LIMIT 1 to get only the pilot with the highest count."], "pred_sql": "SELECT Pilot, COUNT(*) AS flight_count FROM flight GROUP BY Pilot ORDER BY flight_count DESC LIMIT 1;", "gold_sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flight"]}
{"sample_id": 6385, "db_id": "cre_Docs_and_Epenses", "question": "How many accounts do we have?", "rationale": ["The user wants to know the total number of accounts.", "To get the count of accounts, we will use the COUNT() function in SQL.", "We will select from the Accounts table, which contains the account information.", "The final SQL query will count all entries in the Accounts table."], "pred_sql": "SELECT COUNT(*) AS Total_Accounts FROM Accounts;", "gold_sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 6386, "db_id": "cre_Docs_and_Epenses", "question": "Count the number of accounts.", "rationale": ["Identify the table that contains the data needed for the query, which is the 'Accounts' table.", "Determine the requirement of the query, which is to count the number of accounts.", "Use the COUNT() function to count all entries in the 'Accounts' table.", "Construct the SQL query to select the count from the 'Accounts' table."], "pred_sql": "SELECT COUNT(*) AS Account_Count FROM Accounts;", "gold_sql": "SELECT count(*) FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 6387, "db_id": "cre_Docs_and_Epenses", "question": "Show all account ids and account details.", "rationale": ["Identify the table that contains the required information: Accounts.", "Determine the specific columns needed: Account_ID and Account_Details.", "Construct the SQL SELECT statement to retrieve these columns from the Accounts table."], "pred_sql": "SELECT Account_ID, Account_Details FROM Accounts;", "gold_sql": "SELECT account_id ,  account_details FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 6388, "db_id": "cre_Docs_and_Epenses", "question": "What are the ids and details of all accounts?", "rationale": ["Identify the table that contains account information, which is the 'Accounts' table.", "Determine the specific columns needed from the 'Accounts' table, which are 'Account_ID' and 'Account_Details'.", "Construct the SQL query to select the specified columns from the 'Accounts' table."], "pred_sql": "SELECT Account_ID, Account_Details FROM Accounts;", "gold_sql": "SELECT account_id ,  account_details FROM Accounts", "source_tables": ["accounts"]}
{"sample_id": 6389, "db_id": "cre_Docs_and_Epenses", "question": "How many statements do we have?", "rationale": ["Identify the requirement to count the number of statements.", "Determine the relevant table, which is 'Statements'.", "Use the COUNT() function to count all entries in the 'Statements' table.", "Construct the SQL query to select the count from the 'Statements' table."], "pred_sql": "SELECT COUNT(*) AS Total_Statements FROM Statements;", "gold_sql": "SELECT count(*) FROM Statements", "source_tables": ["statements"]}
{"sample_id": 6390, "db_id": "cre_Docs_and_Epenses", "question": "Count the number of statements.", "rationale": ["Identify the table that contains the statements, which is the 'Statements' table.", "To count the number of statements, we will use the COUNT() function in SQL.", "The SQL query will select the count of all records from the 'Statements' table.", "We will alias the count result as 'Statement_Count' for clarity."], "pred_sql": "SELECT COUNT(*) AS Statement_Count FROM Statements;", "gold_sql": "SELECT count(*) FROM Statements", "source_tables": ["statements"]}
{"sample_id": 6391, "db_id": "cre_Docs_and_Epenses", "question": "List all statement ids and statement details.", "rationale": ["Identify the table that contains the required information: the Statements table.", "Determine the specific columns needed: Statement_ID and Statement_Details.", "Construct the SQL query to select these columns from the Statements table."], "pred_sql": "SELECT Statement_ID, Statement_Details FROM Statements;", "gold_sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements", "source_tables": ["statements"]}
{"sample_id": 6392, "db_id": "cre_Docs_and_Epenses", "question": "What are the ids and details of all statements?", "rationale": ["Identify the table that contains the information about statements, which is the 'Statements' table.", "Determine the columns needed from the 'Statements' table, which are 'Statement_ID' and 'Statement_Details'.", "Construct the SQL query to select the specified columns from the 'Statements' table."], "pred_sql": "SELECT Statement_ID, Statement_Details FROM Statements;", "gold_sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements", "source_tables": ["statements"]}
{"sample_id": 6393, "db_id": "cre_Docs_and_Epenses", "question": "Show statement id, statement detail, account detail for accounts.", "rationale": ["Identify the required columns: Statement_ID, Statement_Details from the Statements table and Account_Details from the Accounts table.", "Determine the relationship between the tables: Accounts is linked to Statements through the Statement_ID foreign key.", "Construct the SQL SELECT statement to retrieve the specified columns from the appropriate tables using a JOIN to connect them based on the foreign key relationship."], "pred_sql": "SELECT Statements.Statement_ID, Statements.Statement_Details, Accounts.Account_Details \nFROM Statements \nJOIN Accounts ON Statements.Statement_ID = Accounts.Statement_ID;", "gold_sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id", "source_tables": ["accounts", "statements"]}
{"sample_id": 6394, "db_id": "cre_Docs_and_Epenses", "question": "What are the statement ids, statement details, and account details, for all accounts?", "rationale": ["Identify the required columns: Statement_ID, Statement_Details from the Statements table and Account_Details from the Accounts table.", "Determine the relationship between the tables: Accounts are linked to Statements through the Statement_ID foreign key.", "Construct the SQL query using a JOIN to combine data from the Accounts and Statements tables based on the matching Statement_ID."], "pred_sql": "SELECT Statements.Statement_ID, Statements.Statement_Details, Accounts.Account_Details \nFROM Accounts \nJOIN Statements ON Accounts.Statement_ID = Statements.Statement_ID;", "gold_sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id", "source_tables": ["accounts", "statements"]}
{"sample_id": 6395, "db_id": "cre_Docs_and_Epenses", "question": "Show all statement id and the number of accounts for each statement.", "rationale": ["We need to retrieve the statement IDs and the count of accounts associated with each statement.", "The relevant table for statement IDs is the 'Statements' table, and the 'Accounts' table contains the account information linked to statements.", "To count the number of accounts for each statement, we will use a LEFT JOIN to connect the 'Statements' table with the 'Accounts' table on the 'Statement_ID'.", "Using COUNT(a.Account_ID) will allow us to count the number of accounts for each statement, even if there are statements with no associated accounts (hence the LEFT JOIN).", "Finally, we will group the results by 's.Statement_ID' to ensure we get a count for each unique statement."], "pred_sql": "SELECT s.Statement_ID, COUNT(a.Account_ID) AS Number_of_Accounts\nFROM Statements s\nLEFT JOIN Accounts a ON s.Statement_ID = a.Statement_ID\nGROUP BY s.Statement_ID;", "gold_sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID", "source_tables": ["accounts"]}
{"sample_id": 6396, "db_id": "cre_Docs_and_Epenses", "question": "What are the different statement ids on accounts, and the number of accounts for each?", "rationale": ["Identify the relevant table: The query is asking for information related to accounts, so we will focus on the Accounts table.", "Determine the required fields: We need the Statement_ID from the Accounts table and a count of Account_IDs to get the number of accounts for each statement.", "Use the COUNT function: To count the number of accounts associated with each Statement_ID, we will use the COUNT() function.", "Group the results: Since we want the count of accounts for each Statement_ID, we will use the GROUP BY clause on Statement_ID."], "pred_sql": "SELECT a.Statement_ID, COUNT(a.Account_ID) AS Number_of_Accounts\nFROM Accounts a\nGROUP BY a.Statement_ID;", "gold_sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID", "source_tables": ["accounts"]}
{"sample_id": 6397, "db_id": "cre_Docs_and_Epenses", "question": "Show the statement id and the statement detail for the statement with most number of accounts.", "rationale": ["We need to retrieve the Statement_ID and Statement_Details from the Statements table.", "To find the statement with the most accounts, we will join the Statements table with the Accounts table on the Statement_ID.", "We will group the results by Statement_ID and Statement_Details to count the number of accounts associated with each statement.", "We will order the results in descending order based on the count of accounts to get the statement with the most accounts at the top.", "Finally, we will limit the results to 1 to get only the statement with the highest number of accounts."], "pred_sql": "SELECT s.Statement_ID, s.Statement_Details\nFROM Statements s\nJOIN Accounts a ON s.Statement_ID = a.Statement_ID\nGROUP BY s.Statement_ID, s.Statement_Details\nORDER BY COUNT(a.Account_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts", "statements"]}
{"sample_id": 6398, "db_id": "cre_Docs_and_Epenses", "question": "What are the statement id and statement detail for the statement that has the most corresponding accounts?", "rationale": ["Identify the relevant tables: Statements and Accounts.", "Determine the relationship between the two tables: Accounts are linked to Statements via Statement_ID.", "To find the statement with the most accounts, we need to count the number of accounts for each statement.", "Use a JOIN to combine the Statements and Accounts tables on Statement_ID.", "Group the results by Statement_ID and Statement_Details to aggregate the account counts.", "Order the results by the count of accounts in descending order to get the statement with the most accounts at the top.", "Limit the results to 1 to get only the statement with the highest count."], "pred_sql": "SELECT s.Statement_ID, s.Statement_Details\nFROM Statements s\nJOIN Accounts a ON s.Statement_ID = a.Statement_ID\nGROUP BY s.Statement_ID, s.Statement_Details\nORDER BY COUNT(a.Account_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["accounts", "statements"]}
{"sample_id": 6399, "db_id": "cre_Docs_and_Epenses", "question": "Show the number of documents.", "rationale": ["Identify the requirement to count the number of documents.", "Determine the relevant table which contains the documents, which is the 'Documents' table.", "Use the COUNT() function to count all entries in the 'Documents' table.", "Construct the SQL query to select the count and alias it as 'Number_of_Documents'."], "pred_sql": "SELECT COUNT(*) AS Number_of_Documents FROM Documents;", "gold_sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}
{"sample_id": 6400, "db_id": "cre_Docs_and_Epenses", "question": "Count the number of documents.", "rationale": ["Identify the requirement to count the number of documents.", "Determine the relevant table which contains the documents, which is the 'Documents' table.", "Use the COUNT() function to count all entries in the 'Documents' table.", "Construct the SQL query to select the count from the 'Documents' table."], "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents;", "gold_sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}
{"sample_id": 6401, "db_id": "cre_Docs_and_Epenses", "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.", "rationale": ["Identify the required columns: Document_Type_Code, Document_Name, and Document_Description from the Documents table.", "Determine the filtering condition: we need documents where the Document_Name is either 'Noel CV' or 'King Book'.", "Construct the SQL SELECT statement to retrieve the specified columns from the Documents table with the appropriate WHERE clause."], "pred_sql": "SELECT Document_Type_Code, Document_Name, Document_Description FROM Documents WHERE Document_Name = 'Noel CV' OR Document_Name = 'King Book';", "gold_sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'", "source_tables": ["documents"]}
{"sample_id": 6402, "db_id": "cre_Docs_and_Epenses", "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?", "rationale": ["Identify the relevant tables: We need to retrieve information from the Ref_Document_Types table based on the document names from the Documents table.", "Determine the columns to select: We need to select Document_Type_Code, Document_Type_Name, and Document_Type_Description from the Ref_Document_Types table.", "Establish the condition: We need to filter the documents based on their names, specifically 'Noel CV' or 'King Book'.", "Create a subquery: The subquery will select the Document_Type_Code from the Documents table where the Document_Name matches either 'Noel CV' or 'King Book'.", "Combine the main query and subquery: The main query will select the required fields from Ref_Document_Types where the Document_Type_Code is in the results of the subquery."], "pred_sql": "SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description FROM Ref_Document_Types WHERE Document_Type_Code IN (SELECT Document_Type_Code FROM Documents WHERE Document_Name IN ('Noel CV', 'King Book'));", "gold_sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'", "source_tables": ["documents"]}
{"sample_id": 6403, "db_id": "cre_Docs_and_Epenses", "question": "Show the ids and names of all documents.", "rationale": ["Identify the table that contains the required information: The 'Documents' table contains the 'Document_ID' and 'Document_Name'.", "Determine the specific columns needed: We need to select 'Document_ID' and 'Document_Name'.", "Construct the SQL SELECT statement: Use SELECT to specify the columns and FROM to specify the table.", "Combine the elements to form the complete SQL query."], "pred_sql": "SELECT Document_ID, Document_Name FROM Documents;", "gold_sql": "SELECT document_id ,  document_name FROM Documents", "source_tables": ["documents"]}
{"sample_id": 6404, "db_id": "cre_Docs_and_Epenses", "question": "What are the ids and names for each of the documents?", "rationale": ["Identify the table that contains the required information about documents, which is the 'Documents' table.", "Determine the specific columns needed for the output: 'Document_ID' and 'Document_Name'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Documents' table."], "pred_sql": "SELECT Document_ID, Document_Name FROM Documents;", "gold_sql": "SELECT document_id ,  document_name FROM Documents", "source_tables": ["documents"]}
{"sample_id": 6405, "db_id": "cre_Docs_and_Epenses", "question": "Find names and ids of all documents with document type code BK.", "rationale": ["Identify the table that contains the required information: the 'Documents' table holds the document IDs and names.", "Determine the columns needed: 'Document_ID' and 'Document_Name' are required as per the request.", "Specify the condition: we need to filter the results where 'Document_Type_Code' is equal to 'BK'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Documents' table with the given condition."], "pred_sql": "SELECT Document_ID, Document_Name FROM Documents WHERE Document_Type_Code = 'BK';", "gold_sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  'BK'", "source_tables": ["documents"]}
{"sample_id": 6406, "db_id": "cre_Docs_and_Epenses", "question": "What are the names and ids of documents that have the type code BK?", "rationale": ["Identify the relevant table: The query is asking for information about documents, so we will use the 'Documents' table.", "Determine the required columns: The user wants the names and ids of the documents, which correspond to 'Document_ID' and 'Document_Name' in the 'Documents' table.", "Apply the filter: The user specified a document type code of 'BK', so we will add a WHERE clause to filter the results based on 'Document_Type_Code'.", "Construct the SQL query: Combine the selected columns, the table name, and the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT Document_ID, Document_Name FROM Documents WHERE Document_Type_Code = 'BK';", "gold_sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  'BK'", "source_tables": ["documents"]}
{"sample_id": 6407, "db_id": "cre_Docs_and_Epenses", "question": "How many documents are with document type code BK for each product id?", "rationale": ["Identify the relevant table: The query requires information about documents, so we will use the 'Documents' table.", "Filter by Document Type Code: We need to filter the documents to only include those with the Document_Type_Code 'BK'.", "Count the documents: We need to count the number of documents for each Project_ID that meet the criteria.", "Group by Project_ID: To get the count for each Project_ID, we will group the results by Project_ID."], "pred_sql": "SELECT Project_ID, COUNT(Document_ID) AS Document_Count FROM Documents WHERE Document_Type_Code = 'BK' GROUP BY Project_ID;", "gold_sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  'BK' GROUP BY project_id", "source_tables": ["documents"]}
{"sample_id": 6408, "db_id": "cre_Docs_and_Epenses", "question": "Count the number of documents with the type code BK that correspond to each product id.", "rationale": ["Identify the relevant table: The query involves counting documents, so we will use the 'Documents' table.", "Determine the filtering condition: We need to filter documents by the type code 'BK'.", "Count the documents: We will use the COUNT() function to count the number of documents that meet the criteria.", "Group the results: Since we want the count for each project ID, we will use GROUP BY on 'Project_ID'.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT Documents.Project_ID, COUNT(Documents.Document_ID) AS Document_Count\nFROM Documents\nWHERE Documents.Document_Type_Code = 'BK'\nGROUP BY Documents.Project_ID;", "gold_sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  'BK' GROUP BY project_id", "source_tables": ["documents"]}
{"sample_id": 6409, "db_id": "cre_Docs_and_Epenses", "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'.", "rationale": ["Identify the required fields: Document_Name and Document_Date from the Documents table.", "Determine the relationship between Documents and Projects tables using the Project_ID.", "Use a JOIN clause to combine the Documents and Projects tables based on the Project_ID.", "Filter the results to include only those documents associated with the project that has the details 'Graph Database project' using a WHERE clause."], "pred_sql": "SELECT Documents.Document_Name, Documents.Document_Date \nFROM Documents \nJOIN Projects ON Documents.Project_ID = Projects.Project_ID \nWHERE Projects.Project_Details = 'Graph Database project';", "gold_sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'", "source_tables": ["projects", "documents"]}
{"sample_id": 6410, "db_id": "cre_Docs_and_Epenses", "question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?", "rationale": ["Identify the relevant table for documents, which is the 'Documents' table.", "Determine the columns needed: 'Document_Name' and 'Document_Date'.", "To find the documents related to a specific project, we need to filter the 'Documents' table based on the 'Project_ID'.", "The 'Project_ID' can be found by querying the 'Projects' table where 'Project_Details' matches 'Graph Database project'.", "Construct a subquery to select 'Project_ID' from 'Projects' where 'Project_Details' is 'Graph Database project'.", "Use this subquery in the main query to filter the 'Documents' table for the corresponding 'Project_ID'."], "pred_sql": "SELECT Document_Name, Document_Date FROM Documents WHERE Project_ID IN (SELECT Project_ID FROM Projects WHERE Project_Details = 'Graph Database project');", "gold_sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'", "source_tables": ["projects", "documents"]}
{"sample_id": 6411, "db_id": "cre_Docs_and_Epenses", "question": "Show project ids and the number of documents in each project.", "rationale": ["Identify the relevant table: The 'Documents' table contains the 'Project_ID' and 'Document_ID' which are needed for the query.", "Use the COUNT function to count the number of documents for each project.", "Group the results by 'Project_ID' to get the count of documents per project."], "pred_sql": "SELECT Project_ID, COUNT(Document_ID) AS Number_of_Documents\nFROM Documents\nGROUP BY Project_ID;", "gold_sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id", "source_tables": ["documents"]}
{"sample_id": 6412, "db_id": "cre_Docs_and_Epenses", "question": "How many documents correspond with each project id?", "rationale": ["Identify the relevant table: The 'Documents' table contains the 'Project_ID' and 'Document_ID' which are needed for the query.", "We need to count the number of documents for each project, so we will use the COUNT() function on 'Document_ID'.", "To group the results by each project, we will use the GROUP BY clause on 'Project_ID'.", "The final SQL query will select 'Project_ID' and the count of 'Document_ID' as 'Document_Count' from the 'Documents' table, grouping by 'Project_ID'."], "pred_sql": "SELECT Project_ID, COUNT(Document_ID) AS Document_Count FROM Documents GROUP BY Project_ID;", "gold_sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id", "source_tables": ["documents"]}
{"sample_id": 6413, "db_id": "cre_Docs_and_Epenses", "question": "What is the id of the project with least number of documents?", "rationale": ["Identify the relevant table: The query requires information about projects and their associated documents, so we will use the 'Documents' table and the 'Projects' table.", "Count the number of documents for each project: We will use the COUNT() function to count the number of Document_IDs for each Project_ID.", "Group the results by Project_ID: To get the count of documents per project, we will use the GROUP BY clause on Project_ID.", "Order the results by the count of documents: We will order the results in ascending order using ORDER BY COUNT(Document_ID) ASC to find the project with the least number of documents.", "Limit the results to one: Since we only need the project with the least number of documents, we will use LIMIT 1 to get the top result."], "pred_sql": "SELECT Project_ID FROM Documents GROUP BY Project_ID ORDER BY COUNT(Document_ID) ASC LIMIT 1;", "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}
{"sample_id": 6414, "db_id": "cre_Docs_and_Epenses", "question": "Return the id of the project that has the fewest corresponding documents.", "rationale": ["Identify the relevant table: The query requires information about projects and their corresponding documents, so we will use the 'Documents' table and the 'Projects' table.", "Group the documents by Project_ID: We need to count the number of documents for each project, which can be done using the GROUP BY clause on the Project_ID column in the Documents table.", "Count the documents: Use the COUNT() function to count the number of Document_IDs for each Project_ID.", "Order the results: To find the project with the fewest documents, we will order the results in ascending order based on the count of documents.", "Limit the results: Since we only want the project with the fewest documents, we will use LIMIT 1 to return only the top result."], "pred_sql": "SELECT Project_ID FROM Documents GROUP BY Project_ID ORDER BY COUNT(Document_ID) ASC LIMIT 1;", "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}
{"sample_id": 6415, "db_id": "cre_Docs_and_Epenses", "question": "Show the ids for projects with at least 2 documents.", "rationale": ["Identify the table that contains project information, which is the 'Documents' table.", "We need to group the results by 'Project_ID' to count the number of documents associated with each project.", "Use the COUNT function to count the number of 'Document_ID' entries for each 'Project_ID'.", "Apply the HAVING clause to filter the groups, ensuring we only include projects that have 2 or more documents."], "pred_sql": "SELECT Project_ID FROM Documents GROUP BY Project_ID HAVING COUNT(Document_ID) >= 2;", "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2", "source_tables": ["documents"]}
{"sample_id": 6416, "db_id": "cre_Docs_and_Epenses", "question": "What are project ids of projects that have 2 or more corresponding documents?", "rationale": ["Identify the relevant table: The query is concerned with projects and their corresponding documents, so we will focus on the 'Documents' table and its relationship with the 'Projects' table.", "Determine the required information: We need to retrieve the 'Project_ID' from the 'Documents' table.", "Group the results: Since we want to find projects with 2 or more documents, we will group the results by 'Project_ID'.", "Count the documents: We will use the COUNT function to count the number of documents for each project.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with a count of 2 or more documents."], "pred_sql": "SELECT Project_ID FROM Documents GROUP BY Project_ID HAVING COUNT(Document_ID) >= 2;", "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2", "source_tables": ["documents"]}
{"sample_id": 6417, "db_id": "cre_Docs_and_Epenses", "question": "List document type codes and the number of documents in each code.", "rationale": ["Identify the relevant table: The query requires information about document types and their counts, which can be found in the 'Documents' table.", "Select the necessary columns: We need 'Document_Type_Code' from the 'Documents' table and a count of 'Document_ID' to get the number of documents for each type.", "Use the COUNT() function: This function will count the number of documents associated with each document type code.", "Group the results: To get the count for each document type code, we need to group the results by 'Document_Type_Code'.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT Document_Type_Code, COUNT(Document_ID) AS Document_Count\nFROM Documents\nGROUP BY Document_Type_Code;", "gold_sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code", "source_tables": ["documents"]}
{"sample_id": 6418, "db_id": "cre_Docs_and_Epenses", "question": "How many documents are there of each type?", "rationale": ["Identify the tables involved: We need to count documents by type, so we will use the 'Documents' table and the 'Ref_Document_Types' table.", "Determine the relationship: The 'Documents' table has a foreign key 'Document_Type_Code' that links to 'Ref_Document_Types.Document_Type_Code'.", "Select the necessary columns: We need the document type name from 'Ref_Document_Types' and the count of document IDs from 'Documents'.", "Use COUNT() function: To count the number of documents for each type, we will use the COUNT() function on 'Document_ID'.", "Group the results: We need to group the results by 'Document_Type_Name' to get the count for each document type.", "Construct the SQL query: Combine all the elements into a SQL SELECT statement that joins the two tables, counts the documents, and groups by document type name."], "pred_sql": "SELECT Ref_Document_Types.Document_Type_Name, COUNT(Documents.Document_ID) AS Document_Count\nFROM Documents\nJOIN Ref_Document_Types ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code\nGROUP BY Ref_Document_Types.Document_Type_Name;", "gold_sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code", "source_tables": ["documents"]}
{"sample_id": 6419, "db_id": "cre_Docs_and_Epenses", "question": "What is the document type code with most number of documents?", "rationale": ["Identify the relevant table: The query is asking for information about document types, which are stored in the 'Documents' table.", "Determine the aggregation needed: We need to count the number of documents for each document type code.", "Group the results: Use GROUP BY to group the results by 'Document_Type_Code'.", "Order the results: Use ORDER BY to sort the grouped results by the count of documents in descending order.", "Limit the results: Use LIMIT 1 to get only the document type code with the highest count."], "pred_sql": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents"]}
{"sample_id": 6420, "db_id": "cre_Docs_and_Epenses", "question": "Return the code of the document type that is most common.", "rationale": ["Identify the table that contains the document type code, which is the 'Documents' table.", "To find the most common document type, we need to group the results by 'Document_Type_Code'.", "We will count the occurrences of each document type using COUNT(*) and order the results in descending order to get the most common one first.", "Finally, we limit the results to 1 to get only the most common document type code."], "pred_sql": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents"]}
{"sample_id": 6421, "db_id": "cre_Docs_and_Epenses", "question": "Show the document type code with fewer than 3 documents.", "rationale": ["Identify the relevant table: The query requires information about document types, which are stored in the 'Documents' table.", "We need to count the number of documents for each document type. This requires grouping the results by 'Document_Type_Code'.", "Use the COUNT() function to count the number of documents (Document_ID) for each document type.", "To filter the results to only include document types with fewer than 3 documents, use the HAVING clause with the condition COUNT(Document_ID) < 3."], "pred_sql": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code HAVING COUNT(Document_ID) < 3;", "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3", "source_tables": ["documents"]}
{"sample_id": 6422, "db_id": "cre_Docs_and_Epenses", "question": "What are the codes corresponding to document types for which there are less than 3 documents?", "rationale": ["Identify the relevant table: We need to look at the 'Documents' table to find the document types.", "Group the results: We will group the results by 'Document_Type_Code' to count the number of documents for each type.", "Count the documents: Use the COUNT function to count the number of documents for each document type.", "Filter the results: Use the HAVING clause to filter the groups where the count of documents is less than 3."], "pred_sql": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code HAVING COUNT(Document_ID) < 3;", "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3", "source_tables": ["documents"]}
{"sample_id": 6423, "db_id": "cre_Docs_and_Epenses", "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.", "rationale": ["Identify the tables involved: Statements and Documents.", "Determine the columns needed: Statement_Details from Statements and Document_Name from Documents.", "Establish the relationship between the tables: Statements.Statement_ID is linked to Documents.Document_ID.", "Formulate the SQL SELECT statement to retrieve the required columns from the joined tables.", "Add a WHERE clause to filter results for the specific statement detail 'Private Project'."], "pred_sql": "SELECT Statements.Statement_Details, Documents.Document_Name \nFROM Statements \nJOIN Documents ON Statements.Statement_ID = Documents.Document_ID \nWHERE Statements.Statement_Details = 'Private Project';", "gold_sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'", "source_tables": ["statements", "documents"]}
{"sample_id": 6424, "db_id": "cre_Docs_and_Epenses", "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?", "rationale": ["Identify the tables involved: Statements and Documents.", "Determine the columns needed: Statement_Details from Statements and Document_Name from Documents.", "Establish the relationship between the tables: Statements are linked to Documents via Statement_ID and Document_ID.", "Formulate the SQL query to select the required columns from the joined tables, applying the condition for Statement_Details."], "pred_sql": "SELECT s.Statement_Details, d.Document_Name FROM Statements s JOIN Documents d ON s.Statement_ID = d.Document_ID WHERE s.Statement_Details = 'Private Project';", "gold_sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'", "source_tables": ["statements", "documents"]}
{"sample_id": 6425, "db_id": "cre_Docs_and_Epenses", "question": "Show all document type codes, document type names, document type descriptions.", "rationale": ["Identify the table that contains the required information: Ref_Document_Types.", "Determine the specific columns needed: Document_Type_Code, Document_Type_Name, Document_Type_Description.", "Construct the SQL SELECT statement to retrieve these columns from the Ref_Document_Types table."], "pred_sql": "SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description FROM Ref_Document_Types;", "gold_sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types", "source_tables": ["ref_document_types"]}
{"sample_id": 6426, "db_id": "cre_Docs_and_Epenses", "question": "What are the codes, names, and descriptions of the different document types?", "rationale": ["Identify the table that contains the required information about document types, which is 'Ref_Document_Types'.", "Determine the specific columns needed: 'Document_Type_Code', 'Document_Type_Name', and 'Document_Type_Description'.", "Construct the SQL SELECT statement to retrieve these columns from the 'Ref_Document_Types' table."], "pred_sql": "SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description FROM Ref_Document_Types;", "gold_sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types", "source_tables": ["ref_document_types"]}
{"sample_id": 6427, "db_id": "cre_Docs_and_Epenses", "question": "What is the document type description for document type named Film?", "rationale": ["Identify the table that contains the document type descriptions, which is 'Ref_Document_Types'.", "Determine the column that holds the document type description, which is 'Document_Type_Description'.", "Identify the column that contains the document type name, which is 'Document_Type_Name'.", "Formulate a SQL query to select 'Document_Type_Description' from 'Ref_Document_Types' where 'Document_Type_Name' equals 'Film'."], "pred_sql": "SELECT Document_Type_Description FROM Ref_Document_Types WHERE Document_Type_Name = 'Film';", "gold_sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  'Film'", "source_tables": ["ref_document_types"]}
{"sample_id": 6428, "db_id": "cre_Docs_and_Epenses", "question": "Return the description of the document type name 'Film'.", "rationale": ["Identify the table that contains the document type information, which is 'Ref_Document_Types'.", "Determine the column that holds the name of the document type, which is 'Document_Type_Name'.", "Identify the column that contains the description of the document type, which is 'Document_Type_Description'.", "Formulate the SQL query to select 'Document_Type_Description' from 'Ref_Document_Types' where 'Document_Type_Name' equals 'Film'."], "pred_sql": "SELECT Document_Type_Description FROM Ref_Document_Types WHERE Document_Type_Name = 'Film';", "gold_sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  'Film'", "source_tables": ["ref_document_types"]}
{"sample_id": 6429, "db_id": "cre_Docs_and_Epenses", "question": "What is the document type name and the document type description and creation date for all the documents?", "rationale": ["Identify the required fields: Document_Type_Name, Document_Type_Description from Ref_Document_Types and Document_Date from Documents.", "Determine the relationship between the tables: Documents table has a foreign key Document_Type_Code that links to Ref_Document_Types table.", "Use a JOIN operation to combine the Documents table with the Ref_Document_Types table based on the Document_Type_Code.", "Select the required fields from the combined result set."], "pred_sql": "SELECT Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description, Documents.Document_Date FROM Documents JOIN Ref_Document_Types ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code;", "gold_sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code", "source_tables": ["ref_document_types", "documents"]}
{"sample_id": 6430, "db_id": "cre_Docs_and_Epenses", "question": "Return the type name, type description, and date of creation for each document.", "rationale": ["Identify the required fields: Document_Type_Name, Document_Type_Description from Ref_Document_Types and Document_Date from Documents.", "Determine the relationship between the tables: Documents table has a foreign key Document_Type_Code that links to Ref_Document_Types.", "Use a JOIN operation to combine the Documents table with the Ref_Document_Types table based on the Document_Type_Code.", "Select the required fields from the combined result set."], "pred_sql": "SELECT Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description, Documents.Document_Date \nFROM Documents \nJOIN Ref_Document_Types ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code;", "gold_sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code", "source_tables": ["ref_document_types", "documents"]}
{"sample_id": 6431, "db_id": "cre_Docs_and_Epenses", "question": "Show the number of projects.", "rationale": ["Identify the requirement to count the number of projects.", "Determine the relevant table, which is 'Projects'.", "Use the COUNT() function to count the total number of entries in the 'Projects' table.", "Construct the SQL query to select the count from the 'Projects' table."], "pred_sql": "SELECT COUNT(*) AS Number_of_Projects FROM Projects;", "gold_sql": "SELECT count(*) FROM Projects", "source_tables": ["projects"]}
{"sample_id": 6432, "db_id": "cre_Docs_and_Epenses", "question": "How many projects are there?", "rationale": ["The user wants to know the number of projects.", "To get the count of projects, we need to use the COUNT() function in SQL.", "We will select from the 'Projects' table, which contains all the project records.", "The final SQL query will count all entries in the 'Projects' table."], "pred_sql": "SELECT COUNT(*) AS Project_Count FROM Projects;", "gold_sql": "SELECT count(*) FROM Projects", "source_tables": ["projects"]}
{"sample_id": 6433, "db_id": "cre_Docs_and_Epenses", "question": "List ids and details for all projects.", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "Determine the columns needed for the output, which are 'Project_ID' and 'Project_Details'.", "Construct the SQL query to select the specified columns from the 'Projects' table."], "pred_sql": "SELECT Project_ID, Project_Details FROM Projects;", "gold_sql": "SELECT project_id ,  project_details FROM Projects", "source_tables": ["projects"]}
{"sample_id": 6434, "db_id": "cre_Docs_and_Epenses", "question": "What are the ids and details for each project?", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "Determine the columns needed for the output, which are 'Project_ID' and 'Project_Details'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Projects' table."], "pred_sql": "SELECT Project_ID, Project_Details FROM Projects;", "gold_sql": "SELECT project_id ,  project_details FROM Projects", "source_tables": ["projects"]}
{"sample_id": 6435, "db_id": "cre_Docs_and_Epenses", "question": "What is the project id and detail for the project with at least two documents?", "rationale": ["Identify the relevant tables: Projects and Documents.", "We need to retrieve the Project_ID and Project_Details from the Projects table.", "To find projects with at least two documents, we will join the Projects table with the Documents table on the Project_ID.", "We will group the results by Project_ID and Project_Details to aggregate the documents for each project.", "Using the HAVING clause, we will filter the groups to include only those with a count of Document_IDs that is 2 or more."], "pred_sql": "SELECT Projects.Project_ID, Projects.Project_Details \nFROM Projects \nJOIN Documents ON Projects.Project_ID = Documents.Project_ID \nGROUP BY Projects.Project_ID, Projects.Project_Details \nHAVING COUNT(Documents.Document_ID) >= 2;", "gold_sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2", "source_tables": ["projects", "documents"]}
{"sample_id": 6436, "db_id": "cre_Docs_and_Epenses", "question": "Return the ids and details corresponding to projects for which there are more than two documents.", "rationale": ["We need to retrieve project IDs and their details for projects that have more than two associated documents.", "To do this, we will select the 'Project_ID' and 'Project_Details' from the 'Projects' table.", "We will join the 'Documents' table on the 'Project_ID' to link projects with their documents.", "Next, we will group the results by 'Project_ID' to count the number of documents associated with each project.", "Finally, we will use the HAVING clause to filter the groups to only include those with a count of documents greater than two."], "pred_sql": "SELECT Projects.Project_ID, Projects.Project_Details \nFROM Projects \nJOIN Documents ON Projects.Project_ID = Documents.Project_ID \nGROUP BY Projects.Project_ID \nHAVING COUNT(Documents.Document_ID) > 2;", "gold_sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2", "source_tables": ["projects", "documents"]}
{"sample_id": 6437, "db_id": "cre_Docs_and_Epenses", "question": "What is the project detail for the project with document \"King Book\"?", "rationale": ["Identify the relevant tables: Projects and Documents are needed to get project details based on the document name.", "Determine the relationship: The Documents table has a foreign key (Project_ID) that links to the Projects table.", "Formulate the SELECT statement: We want to select the Project_Details from the Projects table.", "Add the JOIN clause: We need to join the Projects table with the Documents table on the Project_ID.", "Specify the condition: We need to filter the results where the Document_Name in the Documents table is 'King Book'."], "pred_sql": "SELECT Projects.Project_Details FROM Projects JOIN Documents ON Projects.Project_ID = Documents.Project_ID WHERE Documents.Document_Name = 'King Book';", "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  'King Book'", "source_tables": ["projects", "documents"]}
{"sample_id": 6438, "db_id": "cre_Docs_and_Epenses", "question": "Give the details of the project with the document name 'King Book'.", "rationale": ["Identify the relevant tables: Projects and Documents are needed to get project details and document details respectively.", "Determine the columns to select: We need Project_ID and Project_Details from Projects, and Document_Name, Document_Description, Document_Date, and Other_Details from Documents.", "Establish the relationship between tables: Projects and Documents are linked through Project_ID.", "Formulate the WHERE clause: We need to filter the results to only include documents with the name 'King Book'.", "Combine all parts to create the SQL query."], "pred_sql": "SELECT Projects.Project_ID, Projects.Project_Details, Documents.Document_Name, Documents.Document_Description, Documents.Document_Date, Documents.Other_Details \nFROM Projects \nJOIN Documents ON Projects.Project_ID = Documents.Project_ID \nWHERE Documents.Document_Name = 'King Book';", "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  'King Book'", "source_tables": ["projects", "documents"]}
{"sample_id": 6439, "db_id": "cre_Docs_and_Epenses", "question": "How many budget types do we have?", "rationale": ["Identify the table that contains budget types, which is 'Ref_Budget_Codes'.", "To find out how many budget types exist, we need to count the number of entries in the 'Ref_Budget_Codes' table.", "Use the COUNT() function to get the total number of budget types.", "Construct the SQL query to select the count from 'Ref_Budget_Codes' and alias it as 'Budget_Type_Count'."], "pred_sql": "SELECT COUNT(*) AS Budget_Type_Count FROM Ref_Budget_Codes;", "gold_sql": "SELECT count(*) FROM Ref_budget_codes", "source_tables": ["ref_budget_codes"]}
{"sample_id": 6440, "db_id": "cre_Docs_and_Epenses", "question": "Count the number of budget codes.", "rationale": ["Identify the requirement to count the number of budget codes.", "Determine the relevant table, which is 'Ref_Budget_Codes'.", "Use the COUNT() function to count the total number of entries in the 'Ref_Budget_Codes' table.", "Construct the SQL query to select the count from the specified table."], "pred_sql": "SELECT COUNT(*) AS Budget_Code_Count FROM Ref_Budget_Codes;", "gold_sql": "SELECT count(*) FROM Ref_budget_codes", "source_tables": ["ref_budget_codes"]}
{"sample_id": 6441, "db_id": "cre_Docs_and_Epenses", "question": "List all budget type codes and descriptions.", "rationale": ["Identify the table that contains budget type codes and descriptions, which is 'Ref_Budget_Codes'.", "Determine the specific columns needed for the output: 'Budget_Type_Code' and 'Budget_Type_Description'.", "Construct the SQL SELECT statement to retrieve the specified columns from the identified table."], "pred_sql": "SELECT Budget_Type_Code, Budget_Type_Description FROM Ref_Budget_Codes;", "gold_sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes", "source_tables": ["ref_budget_codes"]}
{"sample_id": 6442, "db_id": "cre_Docs_and_Epenses", "question": "What are the type codes and descriptions of each budget type?", "rationale": ["Identify the table that contains budget type information, which is 'Ref_Budget_Codes'.", "Determine the columns needed for the output, which are 'Budget_Type_Code' and 'Budget_Type_Description'.", "Construct the SQL SELECT statement to retrieve the specified columns from the identified table."], "pred_sql": "SELECT Budget_Type_Code, Budget_Type_Description FROM Ref_Budget_Codes;", "gold_sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes", "source_tables": ["ref_budget_codes"]}
{"sample_id": 6443, "db_id": "cre_Docs_and_Epenses", "question": "What is the description for the budget type with code ORG?", "rationale": ["Identify the table that contains budget type descriptions, which is 'Ref_Budget_Codes'.", "Determine the column that holds the budget type description, which is 'Budget_Type_Description'.", "Identify the column that contains the unique budget type code, which is 'Budget_Type_Code'.", "Formulate a SQL query to select the 'Budget_Type_Description' from 'Ref_Budget_Codes' where 'Budget_Type_Code' equals 'ORG'."], "pred_sql": "SELECT Budget_Type_Description FROM Ref_Budget_Codes WHERE Budget_Type_Code = 'ORG';", "gold_sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  'ORG'", "source_tables": ["ref_budget_codes"]}
{"sample_id": 6444, "db_id": "cre_Docs_and_Epenses", "question": "Return the description of the budget type that has the code ORG.", "rationale": ["Identify the table that contains budget type descriptions, which is 'Ref_Budget_Codes'.", "Determine the column that holds the budget type description, which is 'Budget_Type_Description'.", "Identify the column that contains the unique budget type code, which is 'Budget_Type_Code'.", "Formulate a SQL query to select 'Budget_Type_Description' from 'Ref_Budget_Codes' where 'Budget_Type_Code' equals 'ORG'."], "pred_sql": "SELECT Budget_Type_Description FROM Ref_Budget_Codes WHERE Budget_Type_Code = 'ORG';", "gold_sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  'ORG'", "source_tables": ["ref_budget_codes"]}
{"sample_id": 6445, "db_id": "cre_Docs_and_Epenses", "question": "How many documents have expenses?", "rationale": ["Identify the requirement: We need to count the number of documents that have associated expenses.", "Determine the relevant table: The table that contains documents with expenses is 'Documents_with_Expenses'.", "Use the COUNT() function to count the number of entries in the 'Documents_with_Expenses' table.", "Construct the SQL query to select the count from the 'Documents_with_Expenses' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfDocumentsWithExpenses FROM Documents_with_Expenses;", "gold_sql": "SELECT count(*) FROM Documents_with_expenses", "source_tables": ["documents_with_expenses"]}
{"sample_id": 6446, "db_id": "cre_Docs_and_Epenses", "question": "Count the number of documents with expenses.", "rationale": ["Identify the requirement to count documents with expenses.", "Determine the relevant table, which is 'Documents_with_Expenses', as it contains the documents associated with expenses.", "Use the COUNT() function to count the number of entries in the 'Documents_with_Expenses' table.", "Construct the SQL query to select the count from the 'Documents_with_Expenses' table."], "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents_with_Expenses;", "gold_sql": "SELECT count(*) FROM Documents_with_expenses", "source_tables": ["documents_with_expenses"]}
{"sample_id": 6447, "db_id": "cre_Docs_and_Epenses", "question": "What are the document ids for the budget type code 'SF'?", "rationale": ["Identify the relevant table: The query is asking for document IDs related to a specific budget type code, which indicates that the 'Documents_with_Expenses' table is relevant since it contains the 'Budget_Type_Code' and 'Document_ID'.", "Determine the specific condition: The user specified the budget type code 'SF', so we need to filter the results based on this condition.", "Construct the SQL query: We will select the 'Document_ID' from the 'Documents_with_Expenses' table where the 'Budget_Type_Code' matches 'SF'."], "pred_sql": "SELECT Document_ID FROM Documents_with_Expenses WHERE Budget_Type_Code = 'SF';", "gold_sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses"]}
{"sample_id": 6448, "db_id": "cre_Docs_and_Epenses", "question": "Give the ids of documents with expenses that have the budget code 'SF'.", "rationale": ["Identify the table that contains the information about documents with expenses, which is 'Documents_with_Expenses'.", "Determine the relevant column that holds the budget type code, which is 'Budget_Type_Code'.", "Specify the condition to filter the results to only include documents with the budget code 'SF'.", "Construct the SQL query to select the 'Document_ID' from 'Documents_with_Expenses' where 'Budget_Type_Code' equals 'SF'."], "pred_sql": "SELECT Document_ID FROM Documents_with_Expenses WHERE Budget_Type_Code = 'SF';", "gold_sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses"]}
{"sample_id": 6449, "db_id": "cre_Docs_and_Epenses", "question": "Show the budget type code and description and the corresponding document id.", "rationale": ["Identify the required fields: Budget_Type_Code, Budget_Type_Description, and Document_ID.", "Determine the tables that contain these fields: 'Documents_with_Expenses' for Budget_Type_Code and Document_ID, and 'Ref_Budget_Codes' for Budget_Type_Description.", "Establish the relationships between the tables: 'Documents_with_Expenses' is linked to 'Ref_Budget_Codes' through Budget_Type_Code, and 'Documents_with_Expenses' is linked to 'Documents' through Document_ID.", "Construct the SQL query using JOINs to combine the necessary tables and select the required fields."], "pred_sql": "SELECT dw.Budget_Type_Code, bc.Budget_Type_Description, d.Document_ID \nFROM Documents_with_Expenses dw \nJOIN Ref_Budget_Codes bc ON dw.Budget_Type_Code = bc.Budget_Type_Code \nJOIN Documents d ON dw.Document_ID = d.Document_ID;", "gold_sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code", "source_tables": ["ref_budget_codes", "documents_with_expenses"]}
{"sample_id": 6450, "db_id": "cre_Docs_and_Epenses", "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.", "rationale": ["Identify the required columns: Budget_Type_Code, Budget_Type_Description, and Document_ID.", "Budget_Type_Code and Budget_Type_Description are from the Ref_Budget_Codes table, while Document_ID is from the Documents_with_Expenses table.", "To get the Budget_Type_Description corresponding to each Budget_Type_Code, a JOIN operation is needed between Documents_with_Expenses and Ref_Budget_Codes on the Budget_Type_Code column.", "Construct the SQL SELECT statement to retrieve the specified columns from the joined tables."], "pred_sql": "SELECT dw.Budget_Type_Code, bc.Budget_Type_Description, dw.Document_ID \nFROM Documents_with_Expenses dw \nJOIN Ref_Budget_Codes bc ON dw.Budget_Type_Code = bc.Budget_Type_Code;", "gold_sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code", "source_tables": ["ref_budget_codes", "documents_with_expenses"]}
{"sample_id": 6451, "db_id": "cre_Docs_and_Epenses", "question": "Show ids for all documents with budget types described as 'Government'.", "rationale": ["Identify the relevant tables: Documents, Documents_with_Expenses, and Ref_Budget_Codes.", "We need to retrieve Document_IDs from the Documents table.", "To find the budget types, we need to join Documents with Documents_with_Expenses on Document_ID.", "Next, we join Documents_with_Expenses with Ref_Budget_Codes on Budget_Type_Code to access the budget type descriptions.", "Finally, we filter the results where the Budget_Type_Description is 'Government'."], "pred_sql": "SELECT Documents.Document_ID \nFROM Documents \nJOIN Documents_with_Expenses ON Documents.Document_ID = Documents_with_Expenses.Document_ID \nJOIN Ref_Budget_Codes ON Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code \nWHERE Ref_Budget_Codes.Budget_Type_Description = 'Government';", "gold_sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  'Government'", "source_tables": ["ref_budget_codes", "documents_with_expenses"]}
{"sample_id": 6452, "db_id": "cre_Docs_and_Epenses", "question": "Give the ids for documents that have the budget description 'Government'.", "rationale": ["Identify the relevant tables: We need to look at the Documents table to get the Document_IDs and the Documents_with_Expenses table to link documents with their budget types.", "Join the Documents table with the Documents_with_Expenses table on Document_ID to associate documents with their budget types.", "Next, join the resulting table with the Ref_Budget_Codes table to access the budget descriptions.", "Filter the results where the Budget_Type_Description is 'Government' to get only those documents that match this criteria."], "pred_sql": "SELECT Documents.Document_ID \nFROM Documents \nJOIN Documents_with_Expenses ON Documents.Document_ID = Documents_with_Expenses.Document_ID \nJOIN Ref_Budget_Codes ON Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code \nWHERE Ref_Budget_Codes.Budget_Type_Description = 'Government';", "gold_sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  'Government'", "source_tables": ["ref_budget_codes", "documents_with_expenses"]}
{"sample_id": 6453, "db_id": "cre_Docs_and_Epenses", "question": "Show budget type codes and the number of documents in each budget type.", "rationale": ["Identify the relevant tables: We need to get budget type codes and the number of documents associated with each budget type, so we will use the 'Documents_with_Expenses' table for budget type codes and the 'Documents' table for document counts.", "Determine the relationship: The 'Documents_with_Expenses' table has a foreign key 'Document_ID' that links to the 'Documents' table. We will perform a LEFT JOIN on these two tables using 'Document_ID'.", "Select the required fields: We need to select 'Budget_Type_Code' from 'Documents_with_Expenses' and count the 'Document_ID' from 'Documents' to get the number of documents for each budget type.", "Group the results: To get the count of documents per budget type, we will group the results by 'Budget_Type_Code'.", "Construct the SQL query: Combine all the above steps into a single SQL query."], "pred_sql": "SELECT dw.Budget_Type_Code, COUNT(d.Document_ID) AS Document_Count\nFROM Documents_with_Expenses dw\nLEFT JOIN Documents d ON dw.Document_ID = d.Document_ID\nGROUP BY dw.Budget_Type_Code;", "gold_sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "source_tables": ["documents_with_expenses"]}
{"sample_id": 6454, "db_id": "cre_Docs_and_Epenses", "question": "What are the different budget type codes, and how many documents are there for each?", "rationale": ["Identify the relevant tables: We need to look at the 'Documents_with_Expenses' table for budget type codes and the 'Documents' table to count the documents.", "We need to join these two tables on the 'Document_ID' to relate budget types to their respective documents.", "Use a LEFT JOIN to ensure we get all budget type codes even if there are no associated documents.", "Count the number of documents for each budget type code using COUNT() function.", "Group the results by 'Budget_Type_Code' to get the count for each type."], "pred_sql": "SELECT dw.Budget_Type_Code, COUNT(d.Document_ID) AS Document_Count\nFROM Documents_with_Expenses dw\nLEFT JOIN Documents d ON dw.Document_ID = d.Document_ID\nGROUP BY dw.Budget_Type_Code;", "gold_sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "source_tables": ["documents_with_expenses"]}
{"sample_id": 6455, "db_id": "cre_Docs_and_Epenses", "question": "What is the budget type code with most number of documents.", "rationale": ["Identify the relevant table that contains the budget type code and document information, which is 'Documents_with_Expenses'.", "We need to count the number of documents associated with each budget type code, so we will use the COUNT() function on 'Document_ID'.", "To group the results by budget type code, we will use the GROUP BY clause on 'Budget_Type_Code'.", "To find the budget type code with the most documents, we will order the results in descending order based on the count of documents using ORDER BY Document_Count DESC.", "Finally, we will limit the results to only the top entry using LIMIT 1."], "pred_sql": "SELECT Budget_Type_Code, COUNT(Document_ID) AS Document_Count\nFROM Documents_with_Expenses\nGROUP BY Budget_Type_Code\nORDER BY Document_Count DESC\nLIMIT 1;", "gold_sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents_with_expenses"]}
{"sample_id": 6456, "db_id": "cre_Docs_and_Epenses", "question": "Give the budget type code that is most common among documents with expenses.", "rationale": ["Identify the table that contains the budget type codes related to documents with expenses, which is 'Documents_with_Expenses'.", "We need to count the occurrences of each 'Budget_Type_Code' in the 'Documents_with_Expenses' table to determine which one is the most common.", "Use the COUNT function to count the number of documents for each budget type code.", "Group the results by 'Budget_Type_Code' to aggregate the counts for each type.", "Order the results in descending order based on the count to get the most common budget type code at the top.", "Limit the results to 1 to get only the most common budget type code."], "pred_sql": "SELECT Budget_Type_Code, COUNT(*) as Count\nFROM Documents_with_Expenses\nGROUP BY Budget_Type_Code\nORDER BY Count DESC\nLIMIT 1;", "gold_sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents_with_expenses"]}
{"sample_id": 6457, "db_id": "cre_Docs_and_Epenses", "question": "What are the ids of documents which don't have expense budgets?", "rationale": ["Identify the main table of interest, which is 'Documents', as we need to find document IDs.", "We need to find documents that do not have associated expenses, which means we need to check against the 'Documents_with_Expenses' table.", "To find documents without expenses, we can use a subquery that selects all Document_IDs from 'Documents_with_Expenses'.", "The main query will select Document_IDs from 'Documents' where the Document_ID is not in the list of Document_IDs returned by the subquery."], "pred_sql": "SELECT Document_ID FROM Documents WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses)", "gold_sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6458, "db_id": "cre_Docs_and_Epenses", "question": "Return the ids of documents that do not have expenses.", "rationale": ["Identify the main table to query from, which is 'Documents' since we need document IDs.", "We need to find documents that do not have associated expenses, which means we need to check against the 'Documents_with_Expenses' table.", "To find documents without expenses, we can use a subquery that selects all Document_IDs from 'Documents_with_Expenses'.", "The main query will select Document_IDs from 'Documents' where the Document_ID is not in the list returned by the subquery."], "pred_sql": "SELECT Document_ID FROM Documents WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses)", "gold_sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6459, "db_id": "cre_Docs_and_Epenses", "question": "Show ids for all documents in type CV without expense budgets.", "rationale": ["Identify the relevant tables: We need to retrieve document IDs from the Documents table and filter by document type from the Ref_Document_Types table.", "Join the Documents table with the Ref_Document_Types table on the Document_Type_Code to access the document type name.", "Use a LEFT JOIN with the Documents_with_Expenses table to check for documents that do not have associated expenses.", "Filter the results to include only those documents where the Document_Type_Name is 'CV'.", "Additionally, ensure that the Budget_Type_Code in the Documents_with_Expenses table is NULL, indicating that there are no associated expense budgets."], "pred_sql": "SELECT Documents.Document_ID \nFROM Documents \nJOIN Ref_Document_Types ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code \nLEFT JOIN Documents_with_Expenses ON Documents.Document_ID = Documents_with_Expenses.Document_ID \nWHERE Ref_Document_Types.Document_Type_Name = 'CV' \nAND Documents_with_Expenses.Budget_Type_Code IS NULL;", "gold_sql": "SELECT document_id FROM Documents WHERE document_type_code  =  'CV' EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6460, "db_id": "cre_Docs_and_Epenses", "question": "What are the ids of documents with the type code CV that do not have expenses.", "rationale": ["Identify the relevant table: The query is about documents, so we will primarily work with the 'Documents' table.", "We need to filter documents by a specific type code, which is 'CV'. This means we will include a WHERE clause to filter on 'Document_Type_Code'.", "The query also specifies that we want documents that do not have expenses. To find this, we will use a LEFT JOIN between the 'Documents' table and the 'Documents_with_Expenses' table on 'Document_ID'.", "After the LEFT JOIN, we can check for documents that do not have corresponding entries in the 'Documents_with_Expenses' table by checking for NULL values in the 'Document_ID' from that table.", "Finally, we will select the 'Document_ID' from the 'Documents' table that meet both conditions."], "pred_sql": "SELECT d.Document_ID \nFROM Documents d \nLEFT JOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID \nWHERE d.Document_Type_Code = 'CV' AND de.Document_ID IS NULL;", "gold_sql": "SELECT document_id FROM Documents WHERE document_type_code  =  'CV' EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6461, "db_id": "cre_Docs_and_Epenses", "question": "What are the ids of documents with letter 's' in the name with any expense budgets.", "rationale": ["Identify the relevant tables: We need to look at the 'Documents' table for document names and the 'Documents_with_Expenses' table for expense budgets.", "We need to find documents that have the letter 's' in their name. This can be done using the LIKE operator with a wildcard.", "We also need to ensure that these documents are associated with any expense budgets, which means we need to join the 'Documents' table with the 'Documents_with_Expenses' table on the 'Document_ID'.", "The final query will select the 'Document_ID' from the 'Documents' table where the document name contains 's' and is linked to the 'Documents_with_Expenses' table."], "pred_sql": "SELECT d.Document_ID \nFROM Documents d \nJOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID \nWHERE d.Document_Name LIKE '%s%';", "gold_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6462, "db_id": "cre_Docs_and_Epenses", "question": "Give the ids of documents that have expenses and contain the letter s in their names.", "rationale": ["Identify the table that contains the documents with expenses, which is 'Documents_with_Expenses'.", "We need to select the 'Document_ID' from 'Documents_with_Expenses'.", "Next, we need to filter these documents based on their names, which are stored in the 'Documents' table.", "To do this, we will use a subquery to select 'Document_ID' from 'Documents' where 'Document_Name' contains the letter 's'.", "The condition for the name containing 's' can be expressed using the LIKE operator with wildcards: '%s%'.", "Finally, we combine the two queries using an IN clause to get the 'Document_ID' from 'Documents_with_Expenses' that match the criteria."], "pred_sql": "SELECT Document_ID FROM Documents_with_Expenses WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name LIKE '%s%');", "gold_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6463, "db_id": "cre_Docs_and_Epenses", "question": "How many documents do not have any expense?", "rationale": ["Identify the table that contains the documents, which is the 'Documents' table.", "To find documents without expenses, we need to check the 'Documents_with_Expenses' table, which links documents to their expenses.", "We will perform a LEFT JOIN between 'Documents' and 'Documents_with_Expenses' on the 'Document_ID' column.", "The LEFT JOIN will allow us to include all documents from the 'Documents' table and match them with any corresponding entries in the 'Documents_with_Expenses' table.", "To find documents without expenses, we will filter the results where the 'Document_ID' from 'Documents_with_Expenses' is NULL, indicating no expenses are associated with those documents.", "Finally, we will use COUNT(*) to count the number of documents that meet this criteria."], "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents d LEFT JOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID WHERE de.Document_ID IS NULL;", "gold_sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6464, "db_id": "cre_Docs_and_Epenses", "question": "Count the number of documents that do not have expenses.", "rationale": ["We need to count the number of documents without expenses.", "To find documents without expenses, we can use a LEFT JOIN between the Documents table and the Documents_with_Expenses table.", "The LEFT JOIN will include all records from the Documents table and the matching records from the Documents_with_Expenses table. If there is no match, the result is NULL.", "We will filter the results where the Document_ID from the Documents_with_Expenses table is NULL, indicating that there are no associated expenses for those documents.", "Finally, we will use COUNT(*) to count the number of such documents."], "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents d LEFT JOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID WHERE de.Document_ID IS NULL;", "gold_sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6465, "db_id": "cre_Docs_and_Epenses", "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?", "rationale": ["Identify the relevant tables: We need to look at the Documents table for document dates and the Documents_with_Expenses table for expense types.", "Join the Documents table with the Documents_with_Expenses table on Document_ID to link documents with their respective expenses.", "Filter the results to include only those documents that have expenses of type 'GV' and 'SF'.", "To ensure we get documents that have both types of expenses, we can use a GROUP BY clause on Document_Date and a HAVING clause to count distinct Budget_Type_Code, ensuring it equals 2 (indicating both types are present).", "Select the distinct Document_Date from the filtered results."], "pred_sql": "SELECT DISTINCT d.Document_Date \nFROM Documents d \nJOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID \nWHERE de.Budget_Type_Code IN ('GV', 'SF') \nGROUP BY d.Document_Date \nHAVING COUNT(DISTINCT de.Budget_Type_Code) = 2;", "gold_sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6466, "db_id": "cre_Docs_and_Epenses", "question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.", "rationale": ["Identify the relevant tables: We need to look at the 'Documents' table for document creation dates and the 'Documents_with_Expenses' table to filter by budget type codes.", "Join the 'Documents' table with the 'Documents_with_Expenses' table on 'Document_ID' to link documents with their associated budget types.", "Filter the results to include only those documents that have budget type codes 'GV' and 'SF'.", "Use the 'IN' clause to specify the budget type codes we are interested in.", "Group the results by 'Document_ID' to ensure we are counting unique documents.", "Use the 'HAVING' clause to ensure that we only select documents that have both budget type codes by counting distinct budget type codes and checking that the count equals 2."], "pred_sql": "SELECT DISTINCT d.Document_Date \nFROM Documents d \nJOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID \nWHERE de.Budget_Type_Code IN ('GV', 'SF') \nGROUP BY d.Document_ID \nHAVING COUNT(DISTINCT de.Budget_Type_Code) = 2;", "gold_sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses", "documents"]}
{"sample_id": 6467, "db_id": "cre_Docs_and_Epenses", "question": "What are the account details with the largest value or with value having char '5' in it?", "rationale": ["Identify the table that contains account details, which is the 'Accounts' table.", "To find account details with the largest value, we can use the MAX function on 'Account_ID' as a proxy for value since no specific value column is mentioned.", "To find account details that contain the character '5', we can use the LIKE operator with a wildcard.", "Combine both conditions using the OR operator in the WHERE clause."], "pred_sql": "SELECT * FROM Accounts WHERE Account_Details LIKE '%5%' OR Account_ID = (SELECT MAX(Account_ID) FROM Accounts)", "gold_sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE '%5%'", "source_tables": ["accounts"]}
{"sample_id": 6468, "db_id": "cre_Docs_and_Epenses", "question": "Return the account details with the greatest value, as well as those that include the character 5.", "rationale": ["Identify the Accounts table as the source of account details.", "To find the account with the greatest value, use the MAX function on Account_ID.", "To include accounts that have the character '5' in their details, use the LIKE operator with a wildcard.", "Combine both conditions using an OR operator in the WHERE clause."], "pred_sql": "SELECT * FROM Accounts WHERE Account_Details LIKE '%5%' OR Account_ID = (SELECT MAX(Account_ID) FROM Accounts)", "gold_sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE '%5%'", "source_tables": ["accounts"]}
{"sample_id": 6469, "db_id": "scientist_1", "question": "Find the total number of scientists.", "rationale": ["Identify the table that contains the information about scientists, which is the 'Scientists' table.", "To find the total number of scientists, we need to count the number of entries in the 'Scientists' table.", "Use the COUNT() function to count all rows in the 'Scientists' table.", "Construct the SQL query to select the count and label it as 'total_scientists'."], "pred_sql": "SELECT COUNT(*) AS total_scientists FROM Scientists;", "gold_sql": "SELECT count(*) FROM scientists", "source_tables": ["scientists"]}
{"sample_id": 6470, "db_id": "scientist_1", "question": "How many scientists are there?", "rationale": ["Identify the table that contains the information about scientists, which is the 'Scientists' table.", "To find out how many scientists there are, we need to count the number of entries in the 'Scientists' table.", "Use the COUNT() function to count the total number of rows in the 'Scientists' table.", "Construct the SQL query to select the count from the 'Scientists' table."], "pred_sql": "SELECT COUNT(*) AS ScientistCount FROM Scientists;", "gold_sql": "SELECT count(*) FROM scientists", "source_tables": ["scientists"]}
{"sample_id": 6471, "db_id": "scientist_1", "question": "Find the total hours of all projects.", "rationale": ["Identify the table that contains the hours allocated for projects, which is the 'Projects' table.", "To find the total hours of all projects, we need to sum the 'Hours' column in the 'Projects' table.", "Use the SQL SUM() function to calculate the total hours.", "Construct the SQL query to select the sum of the 'Hours' column from the 'Projects' table."], "pred_sql": "SELECT SUM(Hours) AS Total_Hours FROM Projects;", "gold_sql": "SELECT sum(hours) FROM projects", "source_tables": ["projects"]}
{"sample_id": 6472, "db_id": "scientist_1", "question": "What is the total number of hours for all projects?", "rationale": ["Identify the table that contains the relevant data: The 'Projects' table contains the 'Hours' column which we need to sum up.", "Determine the operation needed: We need to calculate the total number of hours, which requires the SUM function.", "Construct the SQL query: We will select the sum of the 'Hours' column from the 'Projects' table."], "pred_sql": "SELECT SUM(Hours) AS Total_Hours FROM Projects;", "gold_sql": "SELECT sum(hours) FROM projects", "source_tables": ["projects"]}
{"sample_id": 6473, "db_id": "scientist_1", "question": "How many different scientists are assigned to any project?", "rationale": ["Identify the goal: We need to count the number of different scientists assigned to any project.", "The relevant table for this information is 'AssignedTo', which links scientists to projects.", "To count distinct scientists, we will use the COUNT function with the DISTINCT keyword to ensure we only count unique SSNs.", "The SQL query will select the count of distinct 'Scientist' from the 'AssignedTo' table."], "pred_sql": "SELECT COUNT(DISTINCT Scientist) AS DifferentScientists FROM AssignedTo;", "gold_sql": "SELECT count(DISTINCT scientist) FROM assignedto", "source_tables": ["assignedto"]}
{"sample_id": 6474, "db_id": "scientist_1", "question": "Count the number of different scientists assigned to any project.", "rationale": ["Identify the goal: We need to count the number of different scientists assigned to any project.", "Determine the relevant table: The 'AssignedTo' table contains the information about which scientists are assigned to which projects.", "Use the COUNT function: To count the unique scientists, we will use COUNT(DISTINCT Scientist) to ensure we only count each scientist once.", "Construct the SQL query: The query will select the count of distinct scientists from the AssignedTo table."], "pred_sql": "SELECT COUNT(DISTINCT Scientist) AS NumberOfScientists FROM AssignedTo;", "gold_sql": "SELECT count(DISTINCT scientist) FROM assignedto", "source_tables": ["assignedto"]}
{"sample_id": 6475, "db_id": "scientist_1", "question": "Find the number of distinct projects.", "rationale": ["Identify the requirement: We need to find the number of distinct projects.", "Determine the relevant table: The 'Projects' table contains the project information.", "Use the COUNT function to count distinct entries: We will use COUNT(DISTINCT Code) to count unique project codes.", "Construct the SQL query: The final SQL query will select the count of distinct project codes from the Projects table."], "pred_sql": "SELECT COUNT(DISTINCT Code) AS distinct_project_count FROM Projects;", "gold_sql": "SELECT count(DISTINCT name) FROM projects", "source_tables": ["projects"]}
{"sample_id": 6476, "db_id": "scientist_1", "question": "How many different projects are there?", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "To find the number of different projects, we need to count the unique project codes.", "Use the COUNT function along with DISTINCT to ensure we only count unique project codes.", "The final SQL query will select the count of distinct project codes from the Projects table."], "pred_sql": "SELECT COUNT(DISTINCT Code) AS NumberOfProjects FROM Projects;", "gold_sql": "SELECT count(DISTINCT name) FROM projects", "source_tables": ["projects"]}
{"sample_id": 6477, "db_id": "scientist_1", "question": "Find the average hours of all projects.", "rationale": ["Identify the requirement: Calculate the average hours of all projects.", "Determine the relevant table: The 'Projects' table contains the 'Hours' column which we need to average.", "Use the AVG() function to compute the average of the 'Hours' column.", "Construct the SQL query to select the average hours from the 'Projects' table."], "pred_sql": "SELECT AVG(Hours) AS Average_Hours FROM Projects;", "gold_sql": "SELECT avg(hours) FROM projects", "source_tables": ["projects"]}
{"sample_id": 6478, "db_id": "scientist_1", "question": "What is the average hours across all projects?", "rationale": ["Identify the requirement: Calculate the average hours across all projects.", "Determine the relevant table: The 'Projects' table contains the 'Hours' column which we need to average.", "Use the AVG() function to compute the average of the 'Hours' column.", "Construct the SQL query to select the average hours from the 'Projects' table."], "pred_sql": "SELECT AVG(Hours) AS Average_Hours FROM Projects;", "gold_sql": "SELECT avg(hours) FROM projects", "source_tables": ["projects"]}
{"sample_id": 6479, "db_id": "scientist_1", "question": "Find the name of project that continues for the longest time.", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "Determine the relevant column that indicates the duration of the project, which is 'Hours'.", "To find the project that continues for the longest time, we need to sort the projects by the 'Hours' column in descending order.", "Finally, we select the 'Name' of the project and limit the results to 1 to get the project with the maximum hours."], "pred_sql": "SELECT Name FROM Projects ORDER BY Hours DESC LIMIT 1;", "gold_sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "source_tables": ["projects"]}
{"sample_id": 6480, "db_id": "scientist_1", "question": "What is the name of the project with the most hours?", "rationale": ["Identify the table that contains the project information, which is the 'Projects' table.", "We need to find the project with the most hours, so we will sort the projects by the 'Hours' column in descending order.", "To get only the project with the most hours, we will limit the results to 1 using 'LIMIT 1'.", "Finally, we will select the 'Name' column to get the name of the project."], "pred_sql": "SELECT Name FROM Projects ORDER BY Hours DESC LIMIT 1;", "gold_sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "source_tables": ["projects"]}
{"sample_id": 6481, "db_id": "scientist_1", "question": "List the name of all projects that are operated longer than the average working hours of all projects.", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "Determine the relevant column that contains the hours allocated for each project, which is the 'Hours' column in the 'Projects' table.", "Calculate the average working hours across all projects using the AVG() function on the 'Hours' column.", "Formulate a query to select the names of projects where the hours allocated are greater than the calculated average working hours."], "pred_sql": "SELECT Name FROM Projects WHERE Hours > (SELECT AVG(Hours) FROM Projects);", "gold_sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)", "source_tables": ["projects"]}
{"sample_id": 6482, "db_id": "scientist_1", "question": "What are the names of projects that have taken longer than the average number of hours for all projects?", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "Determine the relevant columns needed for the query: we need the 'Name' of the project and the 'Hours' allocated to it.", "Calculate the average number of hours across all projects using the AVG() function on the 'Hours' column in the 'Projects' table.", "Formulate a condition to filter projects where the 'Hours' allocated is greater than the calculated average.", "Combine the selection of project names with the condition to create the final SQL query."], "pred_sql": "SELECT Name FROM Projects WHERE Hours > (SELECT AVG(Hours) FROM Projects);", "gold_sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)", "source_tables": ["projects"]}
{"sample_id": 6483, "db_id": "scientist_1", "question": "Find the name and hours of project that has the most number of scientists.", "rationale": ["Identify the tables involved: Projects and AssignedTo.", "We need to find the project with the most number of scientists, which means we will need to count the number of scientists assigned to each project.", "Join the Projects table with the AssignedTo table on the project code to link projects with their assigned scientists.", "Group the results by project code to count the number of scientists for each project.", "Order the results by the count of scientists in descending order to get the project with the most scientists at the top.", "Limit the results to 1 to get only the project with the highest count."], "pred_sql": "SELECT P.Name, P.Hours\nFROM Projects P\nJOIN AssignedTo A ON P.Code = A.Project\nGROUP BY P.Code\nORDER BY COUNT(A.Scientist) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "assignedto"]}
{"sample_id": 6484, "db_id": "scientist_1", "question": "What is the name and hours for the project which has the most scientists assigned to it?", "rationale": ["Identify the relevant tables: Projects and AssignedTo.", "We need to find the project with the most scientists assigned, so we will join the Projects table with the AssignedTo table on the project code.", "We will group the results by the project code to count the number of scientists assigned to each project.", "We will order the results in descending order based on the count of scientists to get the project with the most assignments at the top.", "Finally, we will limit the results to just one entry to get the project with the most scientists assigned.", "Select the project name and hours from the Projects table for the project identified."], "pred_sql": "SELECT p.Name, p.Hours FROM Projects p JOIN AssignedTo a ON p.Code = a.Project GROUP BY p.Code ORDER BY COUNT(a.Scientist) DESC LIMIT 1;", "gold_sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "assignedto"]}
{"sample_id": 6485, "db_id": "scientist_1", "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.", "rationale": ["Identify the tables involved: We need to retrieve project names, so we will use the 'Projects' table. We also need to check which scientists are assigned to these projects, so we will use the 'AssignedTo' table. Finally, we need to filter scientists by their names, so we will also use the 'Scientists' table.", "Determine the relationships: The 'AssignedTo' table links scientists to projects through foreign keys. We will join 'Projects' and 'AssignedTo' on the 'Code' and 'Project' columns, and 'AssignedTo' and 'Scientists' on the 'Scientist' and 'SSN' columns.", "Construct the SELECT statement: We want to select the 'Name' column from the 'Projects' table.", "Add the WHERE clause: We need to filter the results to include only those scientists whose names contain 'Smith'. This will be done using the LIKE operator with wildcards."], "pred_sql": "SELECT Projects.Name FROM Projects JOIN AssignedTo ON Projects.Code = AssignedTo.Project JOIN Scientists ON AssignedTo.Scientist = Scientists.SSN WHERE Scientists.Name LIKE '%Smith%';", "gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6486, "db_id": "scientist_1", "question": "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?", "rationale": ["Identify the tables involved: Projects, AssignedTo, and Scientists.", "Determine the relationship between the tables: AssignedTo links Scientists to Projects.", "We need to find projects that have scientists assigned to them, specifically those whose names contain 'Smith'.", "Use a JOIN to combine the Projects table with the AssignedTo table on the project code, and then join with the Scientists table on the scientist's SSN.", "Filter the results using a WHERE clause to check if the scientist's name contains 'Smith' using the LIKE operator."], "pred_sql": "SELECT Projects.Name FROM Projects JOIN AssignedTo ON Projects.Code = AssignedTo.Project JOIN Scientists ON AssignedTo.Scientist = Scientists.SSN WHERE Scientists.Name LIKE '%Smith%';", "gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6487, "db_id": "scientist_1", "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.", "rationale": ["Identify the tables involved: Scientists, Projects, and AssignedTo.", "Determine the relationship between the tables: AssignedTo links Scientists to Projects.", "We need to find the total hours for projects assigned to specific scientists, so we will use a JOIN to combine the tables based on their relationships.", "Filter the results to include only the scientists named 'Michael Rogers' or 'Carol Smith'.", "Use the SUM function to calculate the total hours from the Projects table for the filtered results."], "pred_sql": "SELECT SUM(Projects.Hours) AS Total_Hours\nFROM AssignedTo\nJOIN Scientists ON AssignedTo.Scientist = Scientists.SSN\nJOIN Projects ON AssignedTo.Project = Projects.Code\nWHERE Scientists.Name IN ('Michael Rogers', 'Carol Smith');", "gold_sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6488, "db_id": "scientist_1", "question": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?", "rationale": ["Identify the tables involved: Scientists, Projects, and AssignedTo.", "Determine the relationship between the tables: AssignedTo links Scientists to Projects.", "We need to sum the hours from the Projects table for specific scientists.", "Filter the results to include only those scientists with the names 'Michael Rogers' or 'Carol Smith'.", "Construct the SQL query using JOINs to connect the tables and apply the SUM function to the Hours column."], "pred_sql": "SELECT SUM(Projects.Hours) AS Total_Hours\nFROM Projects\nJOIN AssignedTo ON Projects.Code = AssignedTo.Project\nJOIN Scientists ON AssignedTo.Scientist = Scientists.SSN\nWHERE Scientists.Name IN ('Michael Rogers', 'Carol Smith');", "gold_sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6489, "db_id": "scientist_1", "question": "Find the name of projects that require between 100 and 300 hours of work.", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "Determine the relevant column that contains the hours allocated for each project, which is the 'Hours' column.", "Formulate a query to select the 'Name' of the projects from the 'Projects' table.", "Apply a condition to filter projects where the 'Hours' are between 100 and 300 using the BETWEEN clause."], "pred_sql": "SELECT Name FROM Projects WHERE Hours BETWEEN 100 AND 300;", "gold_sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "source_tables": ["projects"]}
{"sample_id": 6490, "db_id": "scientist_1", "question": "What are the names of projects that require between 100 and 300 hours?", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "Determine the relevant column that contains the hours allocated for each project, which is the 'Hours' column.", "Formulate a query to select the 'Name' of the projects from the 'Projects' table.", "Apply a condition to filter projects where the 'Hours' are between 100 and 300 using the BETWEEN clause."], "pred_sql": "SELECT Name FROM Projects WHERE Hours BETWEEN 100 AND 300;", "gold_sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "source_tables": ["projects"]}
{"sample_id": 6491, "db_id": "scientist_1", "question": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.", "rationale": ["Identify the tables involved: Scientists, Projects, and AssignedTo.", "We need to find scientists who are assigned to two specific projects, so we will join the AssignedTo table with the Scientists and Projects tables.", "To find scientists who worked on both projects, we will need to join the AssignedTo table twice (aliased as a1 and a2) to link the same scientist to two different projects.", "Use the WHERE clause to filter for the specific project names: 'Matter of Time' and 'A Puzzling Parallax'.", "Select the distinct names of the scientists who meet these criteria."], "pred_sql": "SELECT DISTINCT s.Name \nFROM Scientists s \nJOIN AssignedTo a1 ON s.SSN = a1.Scientist \nJOIN Projects p1 ON a1.Project = p1.Code \nJOIN AssignedTo a2 ON s.SSN = a2.Scientist \nJOIN Projects p2 ON a2.Project = p2.Code \nWHERE p1.Name = 'Matter of Time' AND p2.Name = 'A Puzzling Parallax';", "gold_sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6492, "db_id": "scientist_1", "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?", "rationale": ["Identify the tables involved: Scientists, Projects, and AssignedTo.", "We need to find scientists who worked on specific projects, so we will join the Scientists table with the AssignedTo table on the SSN and the AssignedTo table with the Projects table on the project code.", "We will filter the projects by their names using a WHERE clause with the IN operator to specify the two project names: 'Matter of Time' and 'A Puzzling Pattern'.", "Since we want scientists who worked on both projects, we will group the results by the scientist's SSN and use the HAVING clause to ensure that the count of distinct project names is equal to 2. This ensures that only scientists who worked on both projects are included."], "pred_sql": "SELECT DISTINCT Scientists.Name \nFROM Scientists \nJOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist \nJOIN Projects ON AssignedTo.Project = Projects.Code \nWHERE Projects.Name IN ('Matter of Time', 'A Puzzling Pattern') \nGROUP BY Scientists.SSN \nHAVING COUNT(DISTINCT Projects.Name) = 2;", "gold_sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6493, "db_id": "scientist_1", "question": "List the names of all scientists sorted in alphabetical order.", "rationale": ["Identify the table that contains the names of scientists, which is the 'Scientists' table.", "Determine the column that holds the names, which is 'Name'.", "Specify that we want to select the 'Name' column from the 'Scientists' table.", "Add an ORDER BY clause to sort the results in alphabetical order by the 'Name' column."], "pred_sql": "SELECT Name FROM Scientists ORDER BY Name ASC;", "gold_sql": "SELECT name FROM scientists ORDER BY name", "source_tables": ["scientists"]}
{"sample_id": 6494, "db_id": "scientist_1", "question": "What are the names of all the scientists in alphabetical order?", "rationale": ["Identify the table that contains the names of scientists, which is the 'Scientists' table.", "Determine the column that holds the names, which is 'Name'.", "Specify that we want to select the 'Name' column from the 'Scientists' table.", "To get the names in alphabetical order, use the ORDER BY clause with 'Name' and specify ASC for ascending order."], "pred_sql": "SELECT Name FROM Scientists ORDER BY Name ASC;", "gold_sql": "SELECT name FROM scientists ORDER BY name", "source_tables": ["scientists"]}
{"sample_id": 6495, "db_id": "scientist_1", "question": "Find the number of scientists involved for each project name.", "rationale": ["Identify the tables involved: We need data from the 'Projects' table for project names and the 'AssignedTo' table to count the scientists assigned to each project.", "We need to count the number of scientists for each project, which requires a join between the 'Projects' and 'AssignedTo' tables based on the project code.", "Use a LEFT JOIN to ensure we include projects even if no scientists are assigned to them.", "Use COUNT() to count the number of scientists for each project and GROUP BY the project name to aggregate the results accordingly."], "pred_sql": "SELECT P.Name, COUNT(A.Scientist) AS NumberOfScientists\nFROM Projects P\nLEFT JOIN AssignedTo A ON P.Code = A.Project\nGROUP BY P.Name;", "gold_sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name", "source_tables": ["projects", "assignedto"]}
{"sample_id": 6496, "db_id": "scientist_1", "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?", "rationale": ["Identify the tables needed: We need data from the Projects table for project names and the AssignedTo table to count the number of scientists assigned to each project.", "Determine the relationship: The AssignedTo table links scientists to projects through the Project code, which is a foreign key in AssignedTo referencing the Projects table.", "Use a LEFT JOIN: This will allow us to include all projects even if no scientists are assigned to them, ensuring we get a complete list of projects.", "Count the number of scientists: We will use the COUNT function to count the number of unique scientists assigned to each project.", "Group the results: We will group the results by project code and name to get the count of scientists for each project."], "pred_sql": "SELECT Projects.Name, COUNT(AssignedTo.Scientist) AS ScientistCount\nFROM Projects\nLEFT JOIN AssignedTo ON Projects.Code = AssignedTo.Project\nGROUP BY Projects.Code, Projects.Name;", "gold_sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name", "source_tables": ["projects", "assignedto"]}
{"sample_id": 6497, "db_id": "scientist_1", "question": "Find the number of scientists involved for the projects that require more than 300 hours.", "rationale": ["Identify the tables involved: We need to find information from the 'Scientists', 'Projects', and 'AssignedTo' tables.", "Determine the relationship: The 'AssignedTo' table links scientists to projects, and the 'Projects' table contains the hours for each project.", "Filter the projects: We need to focus on projects that require more than 300 hours, which will be done using a WHERE clause on the 'Projects' table.", "Count the unique scientists: We need to count the number of distinct scientists involved in these projects, which can be done using COUNT(DISTINCT ...) in the SELECT statement."], "pred_sql": "SELECT COUNT(DISTINCT AssignedTo.Scientist) AS NumberOfScientists\nFROM AssignedTo\nJOIN Projects ON AssignedTo.Project = Projects.Code\nWHERE Projects.Hours > 300;", "gold_sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name", "source_tables": ["projects", "assignedto"]}
{"sample_id": 6498, "db_id": "scientist_1", "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?", "rationale": ["Identify the relevant tables: Projects and AssignedTo.", "We need to select project names from the Projects table and count the number of scientists assigned to each project from the AssignedTo table.", "Join the Projects table with the AssignedTo table on the project code to link projects with their assigned scientists.", "Filter the results to include only those projects that require more than 300 hours by using a WHERE clause.", "Group the results by project name to count the number of scientists assigned to each project."], "pred_sql": "SELECT P.Name, COUNT(A.Scientist) AS ScientistCount\nFROM Projects P\nLEFT JOIN AssignedTo A ON P.Code = A.Project\nWHERE P.Hours > 300\nGROUP BY P.Name;", "gold_sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name", "source_tables": ["projects", "assignedto"]}
{"sample_id": 6499, "db_id": "scientist_1", "question": "Find the number of projects which each scientist is working on and scientist's name.", "rationale": ["Identify the tables needed: Scientists and AssignedTo, since we need scientist names and their project assignments.", "We need to count the number of projects each scientist is working on, which requires a COUNT function on the AssignedTo.Project column.", "To get the scientist's name, we will select the Name column from the Scientists table.", "We will perform a LEFT JOIN between Scientists and AssignedTo on the SSN and Scientist columns to ensure we include all scientists, even those not assigned to any projects.", "Finally, we will group the results by the scientist's SSN to get the count of projects for each scientist."], "pred_sql": "SELECT Scientists.Name, COUNT(AssignedTo.Project) AS NumberOfProjects\nFROM Scientists\nLEFT JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist\nGROUP BY Scientists.SSN;", "gold_sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name", "source_tables": ["assignedto", "scientists"]}
