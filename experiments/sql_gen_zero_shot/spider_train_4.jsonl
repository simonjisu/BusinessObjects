{"sample_id": 2000, "db_id": "gas_company", "question": "What are the names and headquarters of all companies ordered by descending market value?", "rationale": ["Identify the columns needed: 'Company' and 'Headquarters' from the 'company' table.", "Determine the ordering requirement: the results should be ordered by 'Market_Value' in descending order.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'company' table.", "Add the ORDER BY clause to sort the results by 'Market_Value' in descending order."], "pred_sql": "SELECT Company, Headquarters FROM company ORDER BY Market_Value DESC;", "gold_sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC", "source_tables": ["company"]}
{"sample_id": 2001, "db_id": "gas_company", "question": "Show minimum, maximum, and average market value for all companies.", "rationale": ["Identify the required calculations: minimum, maximum, and average of the market value.", "Determine the relevant table: the 'company' table contains the 'Market_Value' column.", "Use aggregate functions in SQL: MIN(), MAX(), and AVG() to compute the required values.", "Construct the SQL SELECT statement to retrieve the minimum, maximum, and average market value from the 'company' table."], "pred_sql": "SELECT MIN(Market_Value) AS Minimum_Market_Value, MAX(Market_Value) AS Maximum_Market_Value, AVG(Market_Value) AS Average_Market_Value FROM company;", "gold_sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "source_tables": ["company"]}
{"sample_id": 2002, "db_id": "gas_company", "question": "What is the minimum, maximum, and average market value for every company?", "rationale": ["Identify the table that contains the market value data, which is the 'company' table.", "Determine the required calculations: minimum, maximum, and average of the 'Market_Value' column.", "Use the SQL aggregate functions MIN(), MAX(), and AVG() to compute these values.", "Construct the SQL SELECT statement to retrieve the minimum, maximum, and average market value from the 'company' table."], "pred_sql": "SELECT MIN(Market_Value) AS Min_Market_Value, MAX(Market_Value) AS Max_Market_Value, AVG(Market_Value) AS Avg_Market_Value FROM company;", "gold_sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "source_tables": ["company"]}
{"sample_id": 2003, "db_id": "gas_company", "question": "Show all main industry for all companies.", "rationale": ["Identify the table that contains the information about companies, which is the 'company' table.", "Determine the specific column that holds the main industry information, which is 'Main_Industry'.", "Since the request is to show all main industries, we need to use the SELECT statement to retrieve this column.", "To avoid duplicate entries of industries, we will use the DISTINCT keyword to ensure each industry is listed only once."], "pred_sql": "SELECT DISTINCT Main_Industry FROM company;", "gold_sql": "SELECT DISTINCT main_industry FROM company", "source_tables": ["company"]}
{"sample_id": 2004, "db_id": "gas_company", "question": "What are the different main industries for all companies?", "rationale": ["Identify the table that contains the information about companies, which is the 'company' table.", "Determine the column that holds the information about the main industries, which is 'Main_Industry'.", "Since we want to find different main industries, we will use the DISTINCT keyword to ensure that we only get unique values.", "Construct the SQL query to select distinct main industries from the company table."], "pred_sql": "SELECT DISTINCT Main_Industry FROM company;", "gold_sql": "SELECT DISTINCT main_industry FROM company", "source_tables": ["company"]}
{"sample_id": 2005, "db_id": "gas_company", "question": "List all headquarters and the number of companies in each headquarter.", "rationale": ["Identify the relevant table: The 'company' table contains the 'Headquarters' and 'Company_ID' columns needed for this query.", "Select the columns: We need to select 'Headquarters' and count the number of companies, which can be done using COUNT(Company_ID).", "Group the results: To get the number of companies per headquarters, we need to group the results by 'Headquarters'.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT Headquarters, COUNT(Company_ID) AS Number_of_Companies FROM company GROUP BY Headquarters;", "gold_sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "source_tables": ["company"]}
{"sample_id": 2006, "db_id": "gas_company", "question": "For each headquarter, what are the headquarter and how many companies are centered there?", "rationale": ["Identify the relevant table: The 'company' table contains the headquarters information and company identifiers.", "Select the columns needed: We need 'Headquarters' and a count of companies, so we will select 'Headquarters' and use COUNT() on 'Company_ID'.", "Group the results: To get the count of companies per headquarters, we will use GROUP BY on the 'Headquarters' column."], "pred_sql": "SELECT Headquarters, COUNT(Company_ID) AS Company_Count FROM company GROUP BY Headquarters;", "gold_sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "source_tables": ["company"]}
{"sample_id": 2007, "db_id": "gas_company", "question": "Show all main industry and total market value in each industry.", "rationale": ["Identify the columns needed: Main_Industry and Market_Value.", "Use the SUM function to calculate the total market value for each industry.", "Group the results by Main_Industry to aggregate the market values accordingly."], "pred_sql": "SELECT Main_Industry, SUM(Market_Value) AS Total_Market_Value FROM company GROUP BY Main_Industry;", "gold_sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "source_tables": ["company"]}
{"sample_id": 2008, "db_id": "gas_company", "question": "What are the main indstries and total market value for each industry?", "rationale": ["Identify the relevant table: The 'company' table contains the 'Main_Industry' and 'Market_Value' columns needed for the query.", "Select the columns: We need to select 'Main_Industry' and the total market value for each industry, which requires an aggregation function.", "Use SUM() function: To calculate the total market value for each industry, we will use the SUM() function on the 'Market_Value' column.", "Group by industry: To get the total market value for each industry, we will group the results by 'Main_Industry'.", "Construct the SQL query: Combine the selected columns, aggregation function, and grouping into a complete SQL query."], "pred_sql": "SELECT Main_Industry, SUM(Market_Value) AS Total_Market_Value FROM company GROUP BY Main_Industry;", "gold_sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "source_tables": ["company"]}
{"sample_id": 2009, "db_id": "gas_company", "question": "List the main industry with highest total market value and its number of companies.", "rationale": ["Identify the relevant table: The 'company' table contains the 'Main_Industry' and 'Market_Value' columns.", "Group the results by 'Main_Industry' to aggregate the data for each industry.", "Count the number of companies in each industry using COUNT(Company_ID).", "Order the results by the total market value in descending order using SUM(Market_Value).", "Limit the results to the top entry to get the industry with the highest total market value."], "pred_sql": "SELECT Main_Industry, COUNT(Company_ID) AS Number_of_Companies\nFROM company\nGROUP BY Main_Industry\nORDER BY SUM(Market_Value) DESC\nLIMIT 1;", "gold_sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "source_tables": ["company"]}
{"sample_id": 2010, "db_id": "gas_company", "question": "For each main industry, what is the total number of companies for the industry with the highest total market value?", "rationale": ["Identify the relevant table: The 'company' table contains the necessary information about companies and their market values.", "Determine the highest total market value: Use a subquery to find the maximum market value from the 'company' table.", "Group by main industry: We need to count the number of companies in each main industry that has the highest market value.", "Count the companies: Use COUNT(Company_ID) to get the total number of companies for each main industry."], "pred_sql": "SELECT Main_Industry, COUNT(Company_ID) AS Total_Companies\nFROM company\nWHERE Market_Value = (SELECT MAX(Market_Value) FROM company)\nGROUP BY Main_Industry;", "gold_sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1", "source_tables": ["company"]}
{"sample_id": 2011, "db_id": "gas_company", "question": "Show headquarters with at least two companies in the banking industry.", "rationale": ["Identify the relevant table: The 'company' table contains information about companies, including their headquarters and industry.", "Filter for the banking industry: We need to select companies where the 'Main_Industry' is 'Banking'.", "Group by headquarters: To find headquarters that have at least two companies, we will group the results by the 'Headquarters' column.", "Count the companies: We will use the COUNT function to count the number of companies for each headquarters.", "Set the condition: We will use the HAVING clause to filter groups that have a count of at least 2."], "pred_sql": "SELECT Headquarters FROM company WHERE Main_Industry = 'Banking' GROUP BY Headquarters HAVING COUNT(Company_ID) >= 2;", "gold_sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "source_tables": ["company"]}
{"sample_id": 2012, "db_id": "gas_company", "question": "What are the headquarters with at least two companies in the banking industry?", "rationale": ["Identify the relevant table: The 'company' table contains information about companies, including their headquarters and industry.", "Filter for the banking industry: We need to select companies where the 'Main_Industry' is 'Banking'.", "Group by headquarters: To find headquarters with at least two companies, we will group the results by the 'Headquarters' column.", "Count the companies: We will use the COUNT function to count the number of companies in each headquarters group.", "Apply the HAVING clause: We will filter the groups to include only those with a count of 2 or more companies."], "pred_sql": "SELECT Headquarters FROM company WHERE Main_Industry = 'Banking' GROUP BY Headquarters HAVING COUNT(Company_ID) >= 2;", "gold_sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2", "source_tables": ["company"]}
{"sample_id": 2013, "db_id": "gas_company", "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.", "rationale": ["Identify the required columns: Station_ID, Location, and Manager_Name from the gas_station table.", "Determine the order of the results: the gas stations should be ordered by the Open_Year column.", "Construct the SQL SELECT statement to retrieve the specified columns from the gas_station table.", "Add the ORDER BY clause to sort the results by Open_Year."], "pred_sql": "SELECT Station_ID, Location, Manager_Name FROM gas_station ORDER BY Open_Year;", "gold_sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}
{"sample_id": 2014, "db_id": "gas_company", "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?", "rationale": ["Identify the required columns: Station_ID, Location, and Manager_Name from the gas_station table.", "Determine the order in which the results should be sorted, which is by the Open_Year column.", "Construct the SQL SELECT statement to retrieve the specified columns from the gas_station table.", "Add the ORDER BY clause to sort the results by Open_Year."], "pred_sql": "SELECT Station_ID, Location, Manager_Name FROM gas_station ORDER BY Open_Year;", "gold_sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}
{"sample_id": 2015, "db_id": "gas_company", "question": "How many gas station are opened between 2000 and 2005?", "rationale": ["Identify the relevant table: The query pertains to gas stations, so we will use the 'gas_station' table.", "Determine the condition: We need to find gas stations that were opened between the years 2000 and 2005.", "Use the COUNT function: To get the total number of gas stations that meet the criteria, we will use the COUNT(*) function.", "Construct the SQL query: We will select the count of gas stations from the 'gas_station' table where the 'Open_Year' is between 2000 and 2005."], "pred_sql": "SELECT COUNT(*) AS Number_of_Gas_Stations FROM gas_station WHERE Open_Year BETWEEN 2000 AND 2005;", "gold_sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "source_tables": ["gas_station"]}
{"sample_id": 2016, "db_id": "gas_company", "question": "What is the total number of gas stations that opened between 2000 and 2005?", "rationale": ["Identify the relevant table: The query pertains to gas stations, so we will use the 'gas_station' table.", "Determine the condition for counting: We need to count the number of gas stations that opened between the years 2000 and 2005.", "Use the COUNT() function: This function will help us get the total number of records that meet our criteria.", "Construct the SQL query: We will select the count of gas stations from the 'gas_station' table where the 'Open_Year' is between 2000 and 2005."], "pred_sql": "SELECT COUNT(*) AS Total_Gas_Stations FROM gas_station WHERE Open_Year BETWEEN 2000 AND 2005;", "gold_sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "source_tables": ["gas_station"]}
{"sample_id": 2017, "db_id": "gas_company", "question": "Show all locations and the number of gas stations in each location ordered by the count.", "rationale": ["Identify the relevant table: The query requires information about gas stations, so we will use the 'gas_station' table.", "Select the required columns: We need to show the 'Location' of each gas station and the count of gas stations in each location.", "Use the COUNT() function: To count the number of gas stations in each location, we will use the COUNT() function.", "Group the results: We need to group the results by 'Location' to get the count for each unique location.", "Order the results: Finally, we will order the results by the count of gas stations in ascending order."], "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Stations FROM gas_station GROUP BY Location ORDER BY Number_of_Stations;", "gold_sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "source_tables": ["gas_station"]}
{"sample_id": 2018, "db_id": "gas_company", "question": "For each location, how many gas stations are there in order?", "rationale": ["Identify the table that contains the information about gas stations, which is the 'gas_station' table.", "To find out how many gas stations are there for each location, we need to count the number of entries for each unique location.", "Use the COUNT() function to count the number of gas stations for each location.", "Group the results by the 'Location' column to get the count for each unique location.", "Finally, order the results by the count of gas stations in ascending order."], "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Stations FROM gas_station GROUP BY Location ORDER BY Number_of_Stations;", "gold_sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)", "source_tables": ["gas_station"]}
{"sample_id": 2019, "db_id": "gas_company", "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.", "rationale": ["Identify the relevant table: The 'company' table contains information about companies, including their headquarters and industry.", "Determine the industries of interest: The query specifies two industries: 'Banking' and 'Oil and Gas'.", "Construct a SELECT statement to retrieve distinct headquarters from the 'company' table.", "Use a WHERE clause to filter companies that belong to either the 'Banking' or 'Oil and Gas' industries.", "Group the results by headquarters to aggregate companies by their location.", "Use HAVING to ensure that only headquarters with companies from both industries are included, which requires counting distinct industries and ensuring the count is 2."], "pred_sql": "SELECT DISTINCT c.Headquarters \nFROM company c \nWHERE c.Main_Industry IN ('Banking', 'Oil and Gas') \nGROUP BY c.Headquarters \nHAVING COUNT(DISTINCT c.Main_Industry) = 2;", "gold_sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "source_tables": ["company"]}
{"sample_id": 2020, "db_id": "gas_company", "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", "rationale": ["Identify the relevant industries: banking and oil and gas.", "Select the headquarters from the company table where the main industry is either banking or oil and gas.", "Use a subquery to ensure that the companies selected have associated gas stations, by checking the station_company table.", "Use DISTINCT to avoid duplicate headquarters in the result."], "pred_sql": "SELECT DISTINCT c.Headquarters \nFROM company c \nWHERE c.Main_Industry IN ('banking', 'oil and gas') \nAND c.Company_ID IN (\n    SELECT sc.Company_ID \n    FROM station_company sc \n    JOIN gas_station gs ON sc.Station_ID = gs.Station_ID\n)", "gold_sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "source_tables": ["company"]}
{"sample_id": 2021, "db_id": "gas_company", "question": "Show all headquarters without a company in banking industry.", "rationale": ["We need to show all headquarters (locations of gas stations) that do not have a company in the banking industry.", "To achieve this, we will use a LEFT JOIN to combine the gas_station table with the station_company table and then with the company table. This will allow us to see all gas stations, even those that do not have an associated company.", "We will select the distinct locations from the gas_station table to avoid duplicates.", "The condition to filter out companies in the banking industry will be applied in the WHERE clause. We want to include locations where the associated company is either not in the banking industry or there is no associated company at all (NULL)."], "pred_sql": "SELECT DISTINCT gas_station.Location FROM gas_station LEFT JOIN station_company ON gas_station.Station_ID = station_company.Station_ID LEFT JOIN company ON station_company.Company_ID = company.Company_ID WHERE company.Main_Industry != 'banking' OR company.Main_Industry IS NULL;", "gold_sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "source_tables": ["company"]}
{"sample_id": 2022, "db_id": "gas_company", "question": "What are the headquarters without companies that are in the banking industry?", "rationale": ["Identify the relevant tables: gas_station and company, as we need information about gas stations and their associated companies.", "We need to find gas stations that do not have companies in the banking industry. This requires a LEFT JOIN between gas_station and station_company to link gas stations to their companies.", "Next, we perform another LEFT JOIN with the company table to access the Main_Industry of each company associated with the gas stations.", "We need to filter the results to include only those gas stations where the associated company is either not in the banking industry or there is no associated company (i.e., the company ID is NULL).", "Finally, we select the distinct locations of these gas stations."], "pred_sql": "SELECT DISTINCT gas_station.Location FROM gas_station LEFT JOIN station_company ON gas_station.Station_ID = station_company.Station_ID LEFT JOIN company ON station_company.Company_ID = company.Company_ID WHERE company.Main_Industry != 'Banking' OR company.Company_ID IS NULL;", "gold_sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "source_tables": ["company"]}
{"sample_id": 2023, "db_id": "gas_company", "question": "Show the company name with the number of gas station.", "rationale": ["Identify the relevant tables: 'company' for company names and 'station_company' for gas station associations.", "We need to count the number of gas stations associated with each company, which requires a join between 'company' and 'station_company'.", "Use the COUNT() function to count the number of gas stations (Station_ID) for each company.", "Group the results by company name to get the count for each company."], "pred_sql": "SELECT c.Company, COUNT(sc.Station_ID) AS Number_of_Gas_Stations\nFROM company c\nJOIN station_company sc ON c.Company_ID = sc.Company_ID\nGROUP BY c.Company;", "gold_sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "source_tables": ["station_company", "company"]}
{"sample_id": 2024, "db_id": "gas_company", "question": "For each company id, what are the companies and how many gas stations does each one operate?", "rationale": ["We need to retrieve the company ID and name from the 'company' table.", "We also need to count the number of gas stations each company operates, which is represented by the 'Station_ID' in the 'station_company' table.", "To get the count of gas stations per company, we will use a LEFT JOIN between the 'company' table and the 'station_company' table on the 'Company_ID'.", "We will group the results by 'Company_ID' and 'Company' to ensure we get a count for each company.", "Finally, we will select the company ID, company name, and the count of gas stations as 'Number_of_Gas_Stations'."], "pred_sql": "SELECT c.Company_ID, c.Company, COUNT(sc.Station_ID) AS Number_of_Gas_Stations\nFROM company c\nLEFT JOIN station_company sc ON c.Company_ID = sc.Company_ID\nGROUP BY c.Company_ID, c.Company;", "gold_sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "source_tables": ["station_company", "company"]}
{"sample_id": 2025, "db_id": "gas_company", "question": "Show company name and main industry without a gas station.", "rationale": ["Identify the columns needed: 'Company' and 'Main_Industry' from the 'company' table.", "Determine the condition: we want companies that do not have any associated gas stations.", "To find companies without gas stations, we can use a subquery to select 'Company_ID' from the 'station_company' table.", "The main query will select 'Company' and 'Main_Industry' from the 'company' table where 'Company_ID' is not in the list of 'Company_ID's from the subquery."], "pred_sql": "SELECT Company, Main_Industry FROM company WHERE Company_ID NOT IN (SELECT Company_ID FROM station_company);", "gold_sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "source_tables": ["station_company", "company"]}
{"sample_id": 2026, "db_id": "gas_company", "question": "What are the main industries of the companies without gas stations and what are the companies?", "rationale": ["Identify the relevant tables: 'company' for company details and 'station_company' for the association between companies and gas stations.", "We need to find companies that do not have any associated gas stations, which means we need to look for companies that do not appear in the 'station_company' table.", "To achieve this, we can use a LEFT JOIN between the 'company' table and the 'station_company' table on 'Company_ID'.", "We will filter the results where 'Station_ID' from the 'station_company' table is NULL, indicating that there are no gas stations associated with those companies.", "Finally, we select the distinct 'Main_Industry' and 'Company' columns from the 'company' table to get the required information."], "pred_sql": "SELECT DISTINCT c.Main_Industry, c.Company FROM company c LEFT JOIN station_company sc ON c.Company_ID = sc.Company_ID WHERE sc.Station_ID IS NULL;", "gold_sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "source_tables": ["station_company", "company"]}
{"sample_id": 2027, "db_id": "gas_company", "question": "Show the manager name for gas stations belonging to the ExxonMobil company.", "rationale": ["Identify the relevant tables: gas_station, station_company, and company.", "Determine the columns needed: we need the Manager_Name from the gas_station table.", "Establish the relationships between the tables using JOINs: gas_station is linked to station_company via Station_ID, and station_company is linked to company via Company_ID.", "Filter the results to only include gas stations that belong to the company 'ExxonMobil' by using a WHERE clause."], "pred_sql": "SELECT gs.Manager_Name \nFROM gas_station gs \nJOIN station_company sc ON gs.Station_ID = sc.Station_ID \nJOIN company c ON sc.Company_ID = c.Company_ID \nWHERE c.Company = 'ExxonMobil';", "gold_sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "source_tables": ["gas_station", "station_company", "company"]}
{"sample_id": 2028, "db_id": "gas_company", "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?", "rationale": ["Identify the relevant tables: gas_station, station_company, and company.", "We need to find the names of managers from the gas_station table.", "To link gas stations to companies, we will use the station_company table which connects gas stations to companies.", "We will filter the results to only include gas stations operated by 'ExxonMobil' by joining the company table and applying a WHERE clause.", "Select the Manager_Name from the gas_station table after performing the necessary joins."], "pred_sql": "SELECT gs.Manager_Name FROM gas_station gs JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil';", "gold_sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'", "source_tables": ["gas_station", "station_company", "company"]}
{"sample_id": 2029, "db_id": "gas_company", "question": "Show all locations where a gas station for company with market value greater than 100 is located.", "rationale": ["Identify the relevant tables: gas_station, station_company, and company.", "Determine the relationship between the tables: gas_station is linked to station_company via Station_ID, and station_company is linked to company via Company_ID.", "Select the Location from the gas_station table.", "Apply a filter to only include companies with a Market_Value greater than 100."], "pred_sql": "SELECT gas_station.Location \nFROM gas_station \nJOIN station_company ON gas_station.Station_ID = station_company.Station_ID \nJOIN company ON station_company.Company_ID = company.Company_ID \nWHERE company.Market_Value > 100;", "gold_sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "source_tables": ["gas_station", "station_company", "company"]}
{"sample_id": 2030, "db_id": "gas_company", "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "rationale": ["Identify the relevant tables: gas_station, station_company, and company.", "Determine the columns needed: we need the Location from gas_station and the Market_Value from company.", "Establish the relationships between the tables using JOINs: gas_station is linked to station_company via Station_ID, and station_company is linked to company via Company_ID.", "Filter the results to only include companies with a Market_Value greater than 100.", "Select distinct locations to avoid duplicates."], "pred_sql": "SELECT DISTINCT gs.Location \nFROM gas_station gs \nJOIN station_company sc ON gs.Station_ID = sc.Station_ID \nJOIN company c ON sc.Company_ID = c.Company_ID \nWHERE c.Market_Value > 100;", "gold_sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "source_tables": ["gas_station", "station_company", "company"]}
{"sample_id": 2031, "db_id": "gas_company", "question": "Show the manager name with most number of gas stations opened after 2000.", "rationale": ["Identify the relevant table: The 'gas_station' table contains information about gas stations, including the manager's name and the year they were opened.", "Filter the records: We need to filter the gas stations that were opened after the year 2000. This is done using the WHERE clause: 'Open_Year > 2000'.", "Group the results: To find the manager with the most gas stations, we need to group the results by 'Manager_Name'. This allows us to count the number of gas stations each manager oversees.", "Count the gas stations: Use the COUNT function to count the number of gas stations for each manager. This will be aliased as 'NumberOfStations'.", "Order the results: To find the manager with the most gas stations, we will order the results in descending order based on 'NumberOfStations'.", "Limit the results: Since we only want the manager with the most gas stations, we will limit the results to 1 using 'LIMIT 1'."], "pred_sql": "SELECT Manager_Name, COUNT(*) AS NumberOfStations\nFROM gas_station\nWHERE Open_Year > 2000\nGROUP BY Manager_Name\nORDER BY NumberOfStations DESC\nLIMIT 1;", "gold_sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["gas_station"]}
{"sample_id": 2032, "db_id": "gas_company", "question": "What is the name of the manager with the most gas stations that opened after 2000?", "rationale": ["Identify the relevant table: The 'gas_station' table contains information about gas stations and their managers.", "Filter the gas stations: We need to find gas stations that opened after the year 2000, so we will use a WHERE clause to filter by 'Open_Year'.", "Group the results: To find the manager with the most gas stations, we will group the results by 'Manager_Name' and count the number of stations for each manager using COUNT(*).", "Order the results: We will order the results in descending order based on the count of stations to get the manager with the most stations at the top.", "Limit the results: Since we only need the manager with the most gas stations, we will limit the results to 1."], "pred_sql": "SELECT Manager_Name, COUNT(*) AS Station_Count\nFROM gas_station\nWHERE Open_Year > 2000\nGROUP BY Manager_Name\nORDER BY Station_Count DESC\nLIMIT 1;", "gold_sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["gas_station"]}
{"sample_id": 2033, "db_id": "gas_company", "question": "order all gas station locations by the opening year.", "rationale": ["Identify the table that contains the relevant data: the 'gas_station' table holds information about gas stations, including their locations and opening years.", "Determine the columns needed for the query: we need the 'Location' column to display the locations of the gas stations and the 'Open_Year' column to order them.", "Construct the SQL query to select the 'Location' from the 'gas_station' table and order the results by 'Open_Year' in ascending order."], "pred_sql": "SELECT Location FROM gas_station ORDER BY Open_Year;", "gold_sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}
{"sample_id": 2034, "db_id": "gas_company", "question": "What are the locations of all the gas stations ordered by opening year?", "rationale": ["Identify the table that contains the information about gas stations, which is the 'gas_station' table.", "Determine the column that holds the location of the gas stations, which is 'Location'.", "Identify the column that will be used to order the results, which is 'Open_Year'.", "Construct the SQL query to select the 'Location' from the 'gas_station' table and order the results by 'Open_Year'."], "pred_sql": "SELECT Location FROM gas_station ORDER BY Open_Year;", "gold_sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}
{"sample_id": 2035, "db_id": "gas_company", "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "rationale": ["Identify the relevant table: The 'company' table contains the necessary information about companies, including their rank, name, market value, and industry.", "Filter the companies: We need to filter the companies to only include those in the 'Banking' industry. This is done using a WHERE clause.", "Select the required columns: We need to select the 'Rank', 'Company', and 'Market_Value' columns from the 'company' table.", "Order the results: The results should be ordered by 'Sales_billion' and 'Profits_billion'. This is done using the ORDER BY clause."], "pred_sql": "SELECT c.Rank, c.Company, c.Market_Value FROM company c WHERE c.Main_Industry = 'Banking' ORDER BY c.Sales_billion, c.Profits_billion;", "gold_sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "source_tables": ["company"]}
{"sample_id": 2036, "db_id": "gas_company", "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "rationale": ["Identify the relevant table: The 'company' table contains the necessary columns: Rank, Company, Market_Value, and Main_Industry.", "Filter the results: We need to filter the companies to only include those in the 'Banking' industry, which is done using a WHERE clause.", "Select the required columns: We need to select Rank, Company, and Market_Value from the filtered results.", "Order the results: The results should be ordered by Sales_billion and Profits_billion in descending order, which is done using the ORDER BY clause."], "pred_sql": "SELECT Rank, Company, Market_Value FROM company WHERE Main_Industry = 'Banking' ORDER BY Sales_billion DESC, Profits_billion DESC;", "gold_sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "source_tables": ["company"]}
{"sample_id": 2037, "db_id": "gas_company", "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "rationale": ["Identify the relevant tables: gas_station, station_company, and company.", "Determine the columns needed: Location and Representative_Name from gas_station, and Assets_billion from company.", "Join the tables on their foreign key relationships: gas_station to station_company on Station_ID, and station_company to company on Company_ID.", "Sort the results by Assets_billion in descending order to get the companies with the highest asset amounts.", "Limit the results to the top 3 companies based on asset amounts."], "pred_sql": "SELECT gs.Location, gs.Representative_Name \nFROM gas_station gs \nJOIN station_company sc ON gs.Station_ID = sc.Station_ID \nJOIN company c ON sc.Company_ID = c.Company_ID \nORDER BY c.Assets_billion DESC \nLIMIT 3;", "gold_sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "source_tables": ["gas_station", "station_company", "company"]}
{"sample_id": 2038, "db_id": "gas_company", "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "rationale": ["Identify the relevant tables: gas_station, station_company, and company.", "Determine the columns needed: Location and Representative_Name from gas_station, and filter by companies with the largest assets.", "Use a subquery to find the Company_IDs of the top 3 companies based on Assets_billion.", "Join the gas_station and station_company tables to link gas stations to their respective companies.", "Join the resulting table with the company table to filter by the top 3 companies based on assets."], "pred_sql": "SELECT gs.Location, gs.Representative_Name \nFROM gas_station gs \nJOIN station_company sc ON gs.Station_ID = sc.Station_ID \nJOIN company c ON sc.Company_ID = c.Company_ID \nWHERE c.Company_ID IN (\n    SELECT Company_ID \n    FROM company \n    ORDER BY Assets_billion DESC \n    LIMIT 3\n)", "gold_sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "source_tables": ["gas_station", "station_company", "company"]}
{"sample_id": 2039, "db_id": "party_people", "question": "How many regions do we have?", "rationale": ["Identify the table that contains the information about regions, which is the 'region' table.", "To find out how many regions there are, we need to count the number of entries in the 'region' table.", "Use the COUNT() function to count all rows in the 'region' table.", "Select the count with an alias 'total_regions' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_regions FROM region;", "gold_sql": "SELECT count(*) FROM region", "source_tables": ["region"]}
{"sample_id": 2040, "db_id": "party_people", "question": "Count the number of regions.", "rationale": ["Identify the table that contains the data we want to count, which is the 'region' table.", "To count the number of regions, we use the COUNT() function in SQL.", "We select the count of all records in the 'region' table and alias it as 'region_count' for clarity."], "pred_sql": "SELECT COUNT(*) AS region_count FROM region;", "gold_sql": "SELECT count(*) FROM region", "source_tables": ["region"]}
{"sample_id": 2041, "db_id": "party_people", "question": "Show all distinct region names ordered by their labels.", "rationale": ["Identify the table that contains the region names, which is the 'region' table.", "To get distinct region names, use the DISTINCT keyword in the SELECT statement.", "We need to order the results by the 'Label' column, so we will include an ORDER BY clause with 'Label'.", "Combine these elements to form the complete SQL query."], "pred_sql": "SELECT DISTINCT Region_name FROM region ORDER BY Label;", "gold_sql": "SELECT DISTINCT region_name FROM region ORDER BY Label", "source_tables": ["region"]}
{"sample_id": 2042, "db_id": "party_people", "question": "What are the different region names, ordered by labels?", "rationale": ["Identify the table that contains the region names, which is the 'region' table.", "To get the different region names, we will use the SELECT statement with DISTINCT to avoid duplicates.", "We need to order the results by the 'Label' column, so we will include an ORDER BY clause in the query."], "pred_sql": "SELECT DISTINCT Region_name FROM region ORDER BY Label;", "gold_sql": "SELECT DISTINCT region_name FROM region ORDER BY Label", "source_tables": ["region"]}
{"sample_id": 2043, "db_id": "party_people", "question": "How many parties do we have?", "rationale": ["Identify the table that contains information about political parties, which is the 'party' table.", "To find out how many parties there are, we need to count the number of entries in the 'party' table.", "Use the COUNT() function to count the total number of rows in the 'party' table.", "Construct the SQL query to select the count from the 'party' table."], "pred_sql": "SELECT COUNT(*) AS total_parties FROM party;", "gold_sql": "SELECT count(DISTINCT party_name) FROM party", "source_tables": ["party"]}
{"sample_id": 2044, "db_id": "party_people", "question": "Count the number of different parties.", "rationale": ["Identify the table that contains the information about parties, which is the 'party' table.", "To count the number of different parties, we need to use the COUNT function in SQL.", "Using COUNT(DISTINCT Party_ID) will ensure that we only count unique Party_IDs, thus giving us the number of different parties.", "The final SQL query selects the count of distinct Party_IDs from the 'party' table."], "pred_sql": "SELECT COUNT(DISTINCT Party_ID) AS Number_of_Parties FROM party;", "gold_sql": "SELECT count(DISTINCT party_name) FROM party", "source_tables": ["party"]}
{"sample_id": 2045, "db_id": "party_people", "question": "Show the ministers and the time they took and left office, listed by the time they left office.", "rationale": ["Identify the relevant table: The 'party' table contains information about ministers and their office terms.", "Select the required columns: We need to retrieve the 'Minister', 'Took_office', and 'Left_office' columns.", "Order the results: The results should be ordered by the 'Left_office' date to meet the requirement of listing by the time they left office."], "pred_sql": "SELECT Minister, Took_office, Left_office FROM party ORDER BY Left_office;", "gold_sql": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "source_tables": ["party"]}
{"sample_id": 2046, "db_id": "party_people", "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?", "rationale": ["Identify the relevant table: The 'party' table contains information about ministers, including when they took office and when they left office.", "Select the required columns: We need to select 'Minister', 'Took_office', and 'Left_office' from the 'party' table.", "Order the results: The query should be ordered by the 'Left_office' column to meet the requirement of ordering by when they left office."], "pred_sql": "SELECT Minister, Took_office, Left_office FROM party ORDER BY Left_office;", "gold_sql": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "source_tables": ["party"]}
{"sample_id": 2047, "db_id": "party_people", "question": "Show the minister who took office after 1961 or before 1959.", "rationale": ["Identify the relevant table: The 'party' table contains the 'Minister' and 'Took_office' columns.", "Determine the conditions: We need to find ministers who took office after 1961 or before 1959.", "Construct the SQL SELECT statement: We will select the 'Minister' column from the 'party' table.", "Add the WHERE clause to filter the results based on the conditions specified: 'Took_office > 1961 OR Took_office < 1959'.", "Combine all parts to form the complete SQL query."], "pred_sql": "SELECT Minister FROM party WHERE Took_office > 1961 OR Took_office < 1959;", "gold_sql": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959", "source_tables": ["party"]}
{"sample_id": 2048, "db_id": "party_people", "question": "Who are the ministers who took office after 1961 or before 1959?", "rationale": ["Identify the relevant table: The 'party' table contains information about ministers and their office dates.", "Determine the columns needed: We need the 'Minister' column to identify the ministers and the 'Took_office' column to filter by the date they took office.", "Formulate the condition: We want ministers who took office after 1961 or before 1959, which translates to the SQL conditions 'Took_office > 1961' OR 'Took_office < 1959'.", "Use DISTINCT to ensure that we get unique ministers in case of duplicates.", "Construct the SQL SELECT statement to retrieve the required data."], "pred_sql": "SELECT DISTINCT Minister FROM party WHERE Took_office > 1961 OR Took_office < 1959;", "gold_sql": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959", "source_tables": ["party"]}
{"sample_id": 2049, "db_id": "party_people", "question": "Show all ministers who do not belong to Progress Party.", "rationale": ["Identify the relevant table: The 'party' table contains information about political parties and their ministers.", "Determine the required columns: We need the 'Minister' column from the 'party' table.", "Specify the condition: We want to exclude ministers belonging to the 'Progress Party'.", "Construct the SQL query: Use a SELECT statement to retrieve distinct ministers from the 'party' table where the 'Party_name' is not 'Progress Party'."], "pred_sql": "SELECT DISTINCT p.Minister FROM party p WHERE p.Party_name != 'Progress Party';", "gold_sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'", "source_tables": ["party"]}
{"sample_id": 2050, "db_id": "party_people", "question": "Which ministers are not a part of the Progress Party?", "rationale": ["Identify the relevant tables: We need to look at the 'member' table to find ministers and the 'party' table to identify the party they belong to.", "We need to join the 'member' table with the 'party' table on the 'Party_ID' to access the party names associated with each member.", "We want to select the names of members (ministers) who are not part of the 'Progress Party'.", "Use a WHERE clause to filter out members whose associated party name is 'Progress Party'.", "Select distinct member names to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT m.Member_Name \nFROM member m \nJOIN party p ON m.Party_ID = p.Party_ID \nWHERE p.Party_name != 'Progress Party'", "gold_sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'", "source_tables": ["party"]}
{"sample_id": 2051, "db_id": "party_people", "question": "Show all ministers and parties they belong to in descending order of the time they took office.", "rationale": ["Identify the relevant tables: We need to retrieve information about ministers and the parties they belong to, which are found in the 'party' table.", "Select the necessary columns: We need the 'Minister' and 'Party_name' columns from the 'party' table.", "Order the results: The results should be ordered by the 'Took_office' column in descending order to show the most recent ministers first."], "pred_sql": "SELECT p.Minister, p.Party_name FROM party p ORDER BY p.Took_office DESC;", "gold_sql": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "source_tables": ["party"]}
{"sample_id": 2052, "db_id": "party_people", "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "rationale": ["Identify the relevant tables: We need information about ministers and their associated parties, which can be found in the 'party' table.", "Select the columns: We need to select the 'Minister' and 'Party_name' columns from the 'party' table.", "Order the results: The results should be ordered by the 'Took_office' column in descending order to list ministers by the times they took office."], "pred_sql": "SELECT p.Minister, p.Party_name FROM party p ORDER BY p.Took_office DESC;", "gold_sql": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "source_tables": ["party"]}
{"sample_id": 2053, "db_id": "party_people", "question": "Return the minister who left office at the latest time.", "rationale": ["Identify the relevant table: The 'party' table contains information about ministers and their office dates.", "Determine the required information: We need to find the minister who left office at the latest time, which means we need to look for the maximum value in the 'Left_office' column.", "Construct a subquery to find the maximum 'Left_office' date: This will help us identify the latest date when a minister left office.", "Use the result of the subquery to filter the main query: We will select the 'Minister' from the 'party' table where the 'Left_office' matches the maximum date found in the subquery."], "pred_sql": "SELECT Minister FROM party WHERE Left_office = (SELECT MAX(Left_office) FROM party);", "gold_sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "source_tables": ["party"]}
{"sample_id": 2054, "db_id": "party_people", "question": "Which minister left office the latest?", "rationale": ["Identify the relevant table: The 'party' table contains information about ministers and their office dates.", "Determine the required information: We need to find the minister who left office the latest, which corresponds to the maximum date in the 'Left_office' column.", "Construct the SQL query: We will select the 'Minister' column from the 'party' table, order the results by 'Left_office' in descending order to get the latest date first, and limit the results to 1 to get only the latest minister."], "pred_sql": "SELECT Minister FROM party ORDER BY Left_office DESC LIMIT 1;", "gold_sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "source_tables": ["party"]}
{"sample_id": 2055, "db_id": "party_people", "question": "List member names and their party names.", "rationale": ["Identify the tables needed: 'member' for member names and 'party' for party names.", "Determine the relationship between the tables: 'member' has a foreign key 'Party_ID' that references 'party'.", "Use a JOIN operation to combine data from both tables based on the matching 'Party_ID'.", "Select the desired columns: 'Member_Name' from 'member' and 'Party_name' from 'party'."], "pred_sql": "SELECT member.Member_Name, party.Party_name FROM member JOIN party ON member.Party_ID = party.Party_ID;", "gold_sql": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id", "source_tables": ["party", "member"]}
{"sample_id": 2056, "db_id": "party_people", "question": "What are the names of members and their corresponding parties?", "rationale": ["Identify the tables needed: We need data from the 'member' table for member names and the 'party' table for party names.", "Determine the relationship: The 'member' table has a foreign key 'Party_ID' that links to the 'Party_ID' in the 'party' table.", "Formulate the SQL query: Use a JOIN operation to combine the 'member' and 'party' tables on the 'Party_ID' field, and select the desired columns (Member_Name and Party_name)."], "pred_sql": "SELECT member.Member_Name, party.Party_name FROM member JOIN party ON member.Party_ID = party.Party_ID;", "gold_sql": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id", "source_tables": ["party", "member"]}
{"sample_id": 2057, "db_id": "party_people", "question": "Show all party names and the number of members in each party.", "rationale": ["Identify the tables needed: We need data from the 'party' table for party names and the 'member' table for counting members.", "Determine the relationship: The 'party' table is related to the 'member' table through the 'Party_ID' column.", "Use a LEFT JOIN to include all parties even if they have no members, ensuring we count members correctly.", "Select the party name and count the members: Use COUNT() to count the 'Member_ID' from the 'member' table and group the results by 'Party_name'."], "pred_sql": "SELECT party.Party_name, COUNT(member.Member_ID) AS Number_of_Members\nFROM party\nLEFT JOIN member ON party.Party_ID = member.Party_ID\nGROUP BY party.Party_name;", "gold_sql": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "source_tables": ["party", "member"]}
{"sample_id": 2058, "db_id": "party_people", "question": "How many members are in each party?", "rationale": ["Identify the relevant tables: We need to use the 'party' table to get the party names and the 'member' table to count the members associated with each party.", "Determine the relationship: The 'member' table has a foreign key 'Party_ID' that links to the 'Party_ID' in the 'party' table, allowing us to join these tables.", "Use a LEFT JOIN: This will ensure that we include all parties even if they have no members, counting them as zero.", "Count the members: We will use the COUNT() function to count the number of members for each party.", "Group the results: We will group the results by 'Party_name' to get the count of members for each party."], "pred_sql": "SELECT party.Party_name, COUNT(member.Member_ID) AS Member_Count\nFROM party\nLEFT JOIN member ON party.Party_ID = member.Party_ID\nGROUP BY party.Party_name;", "gold_sql": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "source_tables": ["party", "member"]}
{"sample_id": 2059, "db_id": "party_people", "question": "What is the name of party with most number of members?", "rationale": ["Identify the relevant tables: 'party' for party names and 'member' for member details.", "Join the 'party' table with the 'member' table on the Party_ID to associate members with their respective parties.", "Group the results by Party_ID to aggregate the number of members for each party.", "Count the number of members in each party using COUNT(m.Member_ID).", "Order the results in descending order to get the party with the most members at the top.", "Limit the results to 1 to get only the party with the most members."], "pred_sql": "SELECT p.Party_name FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_ID ORDER BY COUNT(m.Member_ID) DESC LIMIT 1;", "gold_sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party", "member"]}
{"sample_id": 2060, "db_id": "party_people", "question": "Return the name of the party with the most members.", "rationale": ["Identify the relevant tables: 'party' and 'member'.", "We need to count the number of members associated with each party, so we will join the 'party' table with the 'member' table on the 'Party_ID'.", "Use the COUNT() function to count the number of members for each party.", "Group the results by 'Party_ID' to aggregate the counts for each party.", "Order the results in descending order based on the count of members to find the party with the most members.", "Limit the results to 1 to get only the party with the highest count."], "pred_sql": "SELECT p.Party_name FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_ID ORDER BY COUNT(m.Member_ID) DESC LIMIT 1;", "gold_sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party", "member"]}
{"sample_id": 2061, "db_id": "party_people", "question": "Show all party names and their region names.", "rationale": ["Identify the tables involved: 'party' and 'region'.", "Determine the columns needed: 'Party_name' from 'party' and 'Region_name' from 'region'.", "Establish the relationship between the tables using the foreign key: 'party.Region_ID' relates to 'region.Region_ID'.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT party.Party_name, region.Region_name FROM party JOIN region ON party.Region_ID = region.Region_ID;", "gold_sql": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id", "source_tables": ["party", "region"]}
{"sample_id": 2062, "db_id": "party_people", "question": "What are the names of parties and their respective regions?", "rationale": ["Identify the tables needed: 'party' for party names and 'region' for region names.", "Determine the relationship between the tables: 'party' has a foreign key 'Region_ID' that links to 'region'.", "Select the relevant columns: 'Party_name' from 'party' and 'Region_name' from 'region'.", "Use a JOIN clause to combine the two tables based on the 'Region_ID'.", "Construct the SQL query to retrieve the desired information."], "pred_sql": "SELECT party.Party_name, region.Region_name FROM party JOIN region ON party.Region_ID = region.Region_ID;", "gold_sql": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id", "source_tables": ["party", "region"]}
{"sample_id": 2063, "db_id": "party_people", "question": "Show names of parties that does not have any members.", "rationale": ["Identify the table that contains party information, which is the 'party' table.", "We need to find parties that do not have any members, so we will look for Party_IDs in the 'party' table that are not present in the 'member' table.", "To achieve this, we can use a subquery that selects distinct Party_IDs from the 'member' table.", "The main query will select Party_name from the 'party' table where the Party_ID is not in the list of Party_IDs returned by the subquery."], "pred_sql": "SELECT Party_name FROM party WHERE Party_ID NOT IN (SELECT DISTINCT Party_ID FROM member);", "gold_sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "source_tables": ["party", "member"]}
{"sample_id": 2064, "db_id": "party_people", "question": "What are the names of parties that have no members?", "rationale": ["Identify the table that contains party information, which is the 'party' table.", "We need to find parties that have no members, so we will look for Party_IDs in the 'party' table that do not exist in the 'member' table.", "To achieve this, we can use a subquery that selects distinct Party_IDs from the 'member' table.", "The main query will select Party_name from the 'party' table where the Party_ID is not in the list of Party_IDs returned by the subquery."], "pred_sql": "SELECT Party_name FROM party WHERE Party_ID NOT IN (SELECT DISTINCT Party_ID FROM member);", "gold_sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "source_tables": ["party", "member"]}
{"sample_id": 2065, "db_id": "party_people", "question": "Show the member names which are in both the party with id 3 and the party with id 1.", "rationale": ["Identify the tables involved: We need to retrieve member names, so we will use the 'member' table. We also need to filter members based on their party affiliations, which requires the 'party' table.", "Determine the relationships: The 'member' table has a foreign key 'Party_ID' that links to the 'party' table. This means we can join these two tables on 'Party_ID'.", "We need to find members who are in both party 3 and party 1. This requires joining the 'party' table twice (once for each party) and filtering based on the party IDs.", "Construct the SQL query: We will select the member names from the 'member' table, joining it with the 'party' table twice to filter for the specific party IDs (3 and 1)."], "pred_sql": "SELECT m.Member_Name \nFROM member m \nJOIN party p1 ON m.Party_ID = p1.Party_ID \nJOIN party p2 ON m.Party_ID = p2.Party_ID \nWHERE p1.Party_ID = 3 AND p2.Party_ID = 1;", "gold_sql": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1", "source_tables": ["member"]}
{"sample_id": 2066, "db_id": "party_people", "question": "Which member names are shared among members in the party with the id 3 and the party with the id 1?", "rationale": ["Identify the members belonging to party with ID 3.", "Identify the members belonging to party with ID 1.", "Find the intersection of member names from both parties.", "Use a self-join on the member table to compare member names from both parties."], "pred_sql": "SELECT m1.Member_Name \nFROM member m1 \nJOIN member m2 ON m1.Member_Name = m2.Member_Name \nWHERE m1.Party_ID = '3' AND m2.Party_ID = '1';", "gold_sql": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1", "source_tables": ["member"]}
{"sample_id": 2067, "db_id": "party_people", "question": "Show member names that are not in the Progress Party.", "rationale": ["Identify the table that contains member names, which is the 'member' table.", "Determine the condition to filter out members of the 'Progress Party'. This requires finding the Party_ID associated with the 'Progress Party' from the 'party' table.", "Use a subquery to select the Party_ID of the 'Progress Party'.", "Construct the main query to select Member_Name from the 'member' table where the Party_ID is not in the list of Party_IDs returned by the subquery."], "pred_sql": "SELECT Member_Name FROM member WHERE Party_ID NOT IN (SELECT Party_ID FROM party WHERE Party_name = 'Progress Party');", "gold_sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != 'Progress Party'", "source_tables": ["party", "member"]}
{"sample_id": 2068, "db_id": "party_people", "question": "Which member names corresponding to members who are not in the Progress Party?", "rationale": ["Identify the relevant tables: 'member' and 'party'.", "We need to find member names, so we will select 'Member_Name' from the 'member' table.", "To filter out members who are not in the Progress Party, we need to join the 'member' table with the 'party' table on 'Party_ID'.", "Use a WHERE clause to specify that we want only those members whose associated party name is not 'Progress Party'."], "pred_sql": "SELECT member.Member_Name FROM member JOIN party ON member.Party_ID = party.Party_ID WHERE party.Party_name != 'Progress Party';", "gold_sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != 'Progress Party'", "source_tables": ["party", "member"]}
{"sample_id": 2069, "db_id": "party_people", "question": "How many party events do we have?", "rationale": ["Identify the table that contains the relevant data for party events, which is the 'party_events' table.", "To find out how many party events there are, we need to count the number of records in the 'party_events' table.", "Use the COUNT() function to count all entries in the 'party_events' table.", "Construct the SQL query to select the count of all events from the 'party_events' table."], "pred_sql": "SELECT COUNT(*) AS total_events FROM party_events;", "gold_sql": "SELECT count(*) FROM party_events", "source_tables": ["party_events"]}
{"sample_id": 2070, "db_id": "party_people", "question": "Count the number of party events.", "rationale": ["Identify the table that contains the relevant data: The 'party_events' table contains information about party events.", "Determine the required operation: We need to count the number of events, which can be done using the COUNT() function.", "Construct the SQL query: Use SELECT COUNT(*) to count all records in the 'party_events' table and give it an alias for clarity."], "pred_sql": "SELECT COUNT(*) AS Number_of_Party_Events FROM party_events;", "gold_sql": "SELECT count(*) FROM party_events", "source_tables": ["party_events"]}
{"sample_id": 2071, "db_id": "party_people", "question": "Show party names and the number of events for each party.", "rationale": ["Identify the tables needed: We need data from the 'party' table for party names and the 'party_events' table to count the events.", "Determine the relationship: The 'party' table is related to the 'party_events' table through the 'Party_ID' column.", "Use a LEFT JOIN to include all parties even if they have no events, ensuring we count events correctly.", "Select the party name and count the number of events for each party using COUNT() function.", "Group the results by party name to get the count of events for each party."], "pred_sql": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS Number_of_Events\nFROM party\nLEFT JOIN party_events ON party.Party_ID = party_events.Party_ID\nGROUP BY party.Party_name;", "gold_sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "source_tables": ["party", "party_events"]}
{"sample_id": 2072, "db_id": "party_people", "question": "How many events are there for each party?", "rationale": ["Identify the tables involved: We need data from the 'party' and 'party_events' tables.", "Determine the relationship: The 'party' table has a unique identifier 'Party_ID' which is referenced in the 'party_events' table.", "We want to count the number of events for each party, so we will use the COUNT() function on 'Event_ID' from the 'party_events' table.", "To get the party names along with their event counts, we will select 'Party_name' from the 'party' table and count the events from the 'party_events' table.", "Since not all parties may have events, we will use a LEFT JOIN to include all parties even if they have zero events.", "Finally, we will group the results by 'Party_name' to get the count of events for each party."], "pred_sql": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS Event_Count\nFROM party\nLEFT JOIN party_events ON party.Party_ID = party_events.Party_ID\nGROUP BY party.Party_name;", "gold_sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "source_tables": ["party", "party_events"]}
{"sample_id": 2073, "db_id": "party_people", "question": "Show all member names who are not in charge of any event.", "rationale": ["Identify the table that contains member names, which is the 'member' table.", "We need to find members who are not in charge of any event, so we will look for members whose IDs are not present in the 'party_events' table under the 'Member_in_charge_ID' column.", "To achieve this, we will use a subquery that selects all 'Member_in_charge_ID' from the 'party_events' table.", "The main query will select 'Member_Name' from the 'member' table where 'Member_ID' is not in the list of IDs returned by the subquery."], "pred_sql": "SELECT Member_Name FROM member WHERE Member_ID NOT IN (SELECT Member_in_charge_ID FROM party_events)", "gold_sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id", "source_tables": ["member", "party_events"]}
{"sample_id": 2074, "db_id": "party_people", "question": "What are the names of members who are not in charge of any events?", "rationale": ["Identify the table that contains member information, which is the 'member' table.", "We need to find members who are not in charge of any events, so we will look for members whose IDs are not present in the 'Member_in_charge_ID' column of the 'party_events' table.", "To achieve this, we can use a subquery that selects all 'Member_in_charge_ID' from the 'party_events' table.", "The main query will select 'Member_Name' from the 'member' table where 'Member_ID' is not in the list of IDs returned by the subquery."], "pred_sql": "SELECT Member_Name FROM member WHERE Member_ID NOT IN (SELECT Member_in_charge_ID FROM party_events)", "gold_sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id", "source_tables": ["member", "party_events"]}
{"sample_id": 2075, "db_id": "party_people", "question": "What are the names of parties with at least 2 events?", "rationale": ["Identify the relevant tables: We need to look at the 'party' table for party names and the 'party_events' table to count the events.", "Join the 'party' table with the 'party_events' table on the Party_ID to associate each party with its events.", "Group the results by Party_ID to aggregate the events for each party.", "Use the HAVING clause to filter the groups to only include those with a count of events greater than or equal to 2."], "pred_sql": "SELECT p.Party_name\nFROM party p\nJOIN party_events pe ON p.Party_ID = pe.Party_ID\nGROUP BY p.Party_ID\nHAVING COUNT(pe.Event_ID) >= 2;", "gold_sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "source_tables": ["party", "party_events"]}
{"sample_id": 2076, "db_id": "party_people", "question": "Return the names of parties that have two or more events.", "rationale": ["Identify the relevant tables: We need to look at the 'party' table for party names and the 'party_events' table for events associated with those parties.", "Join the 'party' table with the 'party_events' table on the Party_ID to link parties with their events.", "Group the results by Party_ID to aggregate the events for each party.", "Use the HAVING clause to filter the groups to only include those with two or more events, using COUNT(pe.Event_ID) to count the number of events per party."], "pred_sql": "SELECT p.Party_name\nFROM party p\nJOIN party_events pe ON p.Party_ID = pe.Party_ID\nGROUP BY p.Party_ID\nHAVING COUNT(pe.Event_ID) >= 2;", "gold_sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "source_tables": ["party", "party_events"]}
{"sample_id": 2077, "db_id": "party_people", "question": "What is the name of member in charge of greatest number of events?", "rationale": ["Identify the relevant tables: We need to find the member in charge of events, so we will use the 'member' and 'party_events' tables.", "Join the tables: We will join the 'member' table with the 'party_events' table on the 'Member_ID' and 'Member_in_charge_ID' columns to link members with the events they are in charge of.", "Group the results: We will group the results by 'Member_ID' to count the number of events each member is in charge of.", "Count the events: We will use COUNT(pe.Event_ID) to count the number of events for each member.", "Order the results: We will order the results in descending order based on the count of events to find the member with the greatest number of events.", "Limit the results: We will limit the results to 1 to get only the member with the highest count."], "pred_sql": "SELECT m.Member_Name\nFROM member m\nJOIN party_events pe ON m.Member_ID = pe.Member_in_charge_ID\nGROUP BY m.Member_ID\nORDER BY COUNT(pe.Event_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member", "party_events"]}
{"sample_id": 2078, "db_id": "party_people", "question": "Return the name of the member who is in charge of the most events.", "rationale": ["We need to find the member who is in charge of the most events.", "To do this, we will join the 'member' table with the 'party_events' table on the 'Member_in_charge_ID' column.", "We will group the results by 'Member_ID' to count the number of events each member is in charge of.", "We will order the results in descending order based on the count of events to get the member with the most events at the top.", "Finally, we will limit the results to 1 to get only the top member."], "pred_sql": "SELECT m.Member_Name\nFROM member m\nJOIN party_events pe ON m.Member_ID = pe.Member_in_charge_ID\nGROUP BY m.Member_ID\nORDER BY COUNT(pe.Event_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member", "party_events"]}
{"sample_id": 2079, "db_id": "party_people", "question": "find the event names that have more than 2 records.", "rationale": ["Identify the table that contains the event names, which is the 'party_events' table.", "To find event names with more than 2 records, we need to group the results by 'Event_Name'.", "Use the COUNT function to count the number of records for each event name.", "Apply the HAVING clause to filter the groups where the count of records is greater than 2."], "pred_sql": "SELECT Event_Name FROM party_events GROUP BY Event_Name HAVING COUNT(Event_ID) > 2;", "gold_sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "source_tables": ["party_events"]}
{"sample_id": 2080, "db_id": "party_people", "question": "Which event names were used more than twice for party events?", "rationale": ["Identify the table that contains the event names, which is the 'party_events' table.", "We need to count how many times each event name appears, so we will use the COUNT() function.", "To group the results by event name, we will use the GROUP BY clause on the 'Event_Name' column.", "To filter the results to only include event names that appear more than twice, we will use the HAVING clause with a condition that counts greater than 2."], "pred_sql": "SELECT Event_Name FROM party_events GROUP BY Event_Name HAVING COUNT(Event_Name) > 2;", "gold_sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "source_tables": ["party_events"]}
{"sample_id": 2081, "db_id": "party_people", "question": "How many Annual Meeting events happened in the United Kingdom region?", "rationale": ["Identify the relevant tables: party_events, party, and region are needed to answer the query.", "We need to count the number of events, so we will use the COUNT() function.", "The event we are interested in is 'Annual Meeting', so we will filter the results based on this event name.", "We need to join the party_events table with the party table on Party_ID to get the region information.", "Next, we join the party table with the region table on Region_ID to filter by the United Kingdom region.", "Finally, we will filter the results to only include events that match the criteria and count them."], "pred_sql": "SELECT COUNT(*) AS Annual_Meeting_Count \nFROM party_events pe \nJOIN party p ON pe.Party_ID = p.Party_ID \nJOIN region r ON p.Region_ID = r.Region_ID \nWHERE pe.Event_Name = 'Annual Meeting' \nAND r.Region_name = 'United Kingdom';", "gold_sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  'United Kingdom' AND t3.Event_Name  =  'Annaual Meeting'", "source_tables": ["party", "party_events", "region"]}
{"sample_id": 2082, "db_id": "party_people", "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "rationale": ["Identify the relevant tables: party_events, party, and region.", "We need to count the number of events, so we will use the COUNT() function.", "The event we are interested in is 'Annual Meeting', so we will filter on the Event_Name column in the party_events table.", "We need to join the party_events table with the party table on Party_ID to get the region information.", "Next, we join the party table with the region table on Region_ID to filter by the region name 'United Kingdom'.", "Finally, we will select the count of events that match the criteria."], "pred_sql": "SELECT COUNT(*) AS Annual_Meeting_Count \nFROM party_events pe \nJOIN party p ON pe.Party_ID = p.Party_ID \nJOIN region r ON p.Region_ID = r.Region_ID \nWHERE pe.Event_Name = 'Annual Meeting' \nAND r.Region_name = 'United Kingdom';", "gold_sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  'United Kingdom' AND t3.Event_Name  =  'Annaual Meeting'", "source_tables": ["party", "party_events", "region"]}
{"sample_id": 2083, "db_id": "pilot_record", "question": "How many pilots are there?", "rationale": ["Identify the table that contains the information about pilots, which is the 'pilot' table.", "To find out how many pilots there are, we need to count the number of entries in the 'pilot' table.", "Use the COUNT() function to count the total number of pilots and select it as 'Total_Pilots'.", "Construct the SQL query to select the count from the 'pilot' table."], "pred_sql": "SELECT COUNT(*) AS Total_Pilots FROM pilot;", "gold_sql": "SELECT count(*) FROM pilot", "source_tables": ["pilot"]}
{"sample_id": 2084, "db_id": "pilot_record", "question": "List the names of pilots in ascending order of rank.", "rationale": ["Identify the table that contains pilot information, which is the 'pilot' table.", "Determine the column that contains the names of the pilots, which is 'Pilot_name'.", "Specify that we want to order the results by the rank of the pilots, which is in the 'Rank' column.", "Use the SQL SELECT statement to retrieve the 'Pilot_name' from the 'pilot' table and order the results by 'Rank' in ascending order."], "pred_sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC;", "gold_sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC", "source_tables": ["pilot"]}
{"sample_id": 2085, "db_id": "pilot_record", "question": "What are the positions and teams of pilots?", "rationale": ["Identify the relevant table: The query is asking for information about pilots, which is found in the 'pilot' table.", "Determine the required columns: The user wants to know the 'Position' and 'Team' of each pilot.", "Construct the SQL SELECT statement: We will select the 'Position' and 'Team' columns from the 'pilot' table."], "pred_sql": "SELECT Position, Team FROM pilot;", "gold_sql": "SELECT POSITION ,  Team FROM pilot", "source_tables": ["pilot"]}
{"sample_id": 2086, "db_id": "pilot_record", "question": "List the distinct positions of pilots older than 30.", "rationale": ["Identify the table that contains the relevant data: the 'pilot' table holds information about pilots, including their age and position.", "Determine the condition: we need to filter pilots who are older than 30 years.", "Use the DISTINCT keyword to ensure that we only get unique positions.", "Construct the SQL query to select the distinct positions from the 'pilot' table where the age is greater than 30."], "pred_sql": "SELECT DISTINCT Position FROM pilot WHERE Age > 30;", "gold_sql": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30", "source_tables": ["pilot"]}
{"sample_id": 2087, "db_id": "pilot_record", "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".", "rationale": ["Identify the table that contains the pilot names, which is the 'pilot' table.", "Determine the column that holds the pilot names, which is 'Pilot_name'.", "Identify the condition for filtering the pilots, which is based on the 'Team' column.", "The teams specified in the request are 'Bradley' and 'Fordham'.", "Use the SQL 'SELECT' statement to retrieve the 'Pilot_name' from the 'pilot' table where the 'Team' is either 'Bradley' or 'Fordham'.", "Utilize the 'IN' clause to specify multiple values for the 'Team' column."], "pred_sql": "SELECT Pilot_name FROM pilot WHERE Team IN ('Bradley', 'Fordham');", "gold_sql": "SELECT Pilot_name FROM pilot WHERE Team  =  'Bradley' OR Team  =  'Fordham'", "source_tables": ["pilot"]}
{"sample_id": 2088, "db_id": "pilot_record", "question": "What is the joined year of the pilot of the highest rank?", "rationale": ["Identify the relevant table: The query involves information about pilots, so we will use the 'pilot' table.", "Determine the required information: We need the 'Join_Year' of the pilot with the highest rank.", "Find the highest rank: We will use a subquery to find the maximum rank from the 'pilot' table.", "Join the results: We will select the 'Join_Year' from the 'pilot' table where the 'Rank' matches the maximum rank found in the subquery."], "pred_sql": "SELECT Join_Year FROM pilot WHERE Rank = (SELECT MAX(Rank) FROM pilot);", "gold_sql": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1", "source_tables": ["pilot"]}
{"sample_id": 2089, "db_id": "pilot_record", "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.", "rationale": ["Identify the relevant table: The query requires information about pilots, so we will use the 'pilot' table.", "Determine the columns needed: We need the 'Nationality' column to show each nationality and the 'Pilot_ID' column to count the number of pilots.", "Use the COUNT function: To count the number of pilots for each nationality, we will use the COUNT function on 'Pilot_ID'.", "Group the results: To get the count of pilots for each nationality, we will use the GROUP BY clause on the 'Nationality' column."], "pred_sql": "SELECT Nationality, COUNT(Pilot_ID) AS Number_of_Pilots FROM pilot GROUP BY Nationality;", "gold_sql": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality", "source_tables": ["pilot"]}
{"sample_id": 2090, "db_id": "pilot_record", "question": "Show the most common nationality of pilots.", "rationale": ["Identify the relevant table: The 'pilot' table contains the nationality of pilots.", "Determine the required information: We need to find the most common nationality, which involves counting occurrences of each nationality.", "Use the COUNT function to count the number of pilots for each nationality.", "Group the results by nationality using GROUP BY to aggregate the counts for each nationality.", "Order the results in descending order based on the count to get the most common nationality at the top.", "Limit the results to 1 to get only the most common nationality."], "pred_sql": "SELECT Nationality, COUNT(*) as Count FROM pilot GROUP BY Nationality ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["pilot"]}
{"sample_id": 2091, "db_id": "pilot_record", "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.", "rationale": ["Identify the relevant table: The query involves pilot positions, so we will use the 'pilot' table.", "Determine the conditions: We need pilots who joined after 2005 and those who joined before 2000.", "Use the 'Join_Year' column to filter the pilots based on the specified years.", "We need to select distinct positions to avoid duplicates in the results.", "Construct the SQL query using the SELECT statement to retrieve the distinct positions based on the conditions."], "pred_sql": "SELECT DISTINCT Position FROM pilot WHERE Join_Year > 2005 OR Join_Year < 2000;", "gold_sql": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005", "source_tables": ["pilot"]}
{"sample_id": 2092, "db_id": "pilot_record", "question": "Show the names of pilots and models of aircrafts they have flied with.", "rationale": ["Identify the tables involved: We need data from the 'pilot' table for pilot names and the 'aircraft' table for aircraft models.", "Determine the relationship between the tables: The 'pilot' table is linked to the 'pilot_record' table through 'Pilot_ID', and the 'pilot_record' table is linked to the 'aircraft' table through 'Aircraft_ID'.", "Construct the SQL query: We will use a JOIN operation to combine these tables based on their relationships, selecting the 'Pilot_name' from the 'pilot' table and 'Model' from the 'aircraft' table."], "pred_sql": "SELECT pilot.Pilot_name, aircraft.Model \nFROM pilot \nJOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID \nJOIN aircraft ON pilot_record.Aircraft_ID = aircraft.Aircraft_ID;", "gold_sql": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID", "source_tables": ["aircraft", "pilot", "pilot_record"]}
{"sample_id": 2093, "db_id": "pilot_record", "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.", "rationale": ["Identify the tables involved: pilot, pilot_record, and aircraft.", "Determine the columns needed: Pilot_name from pilot and Fleet_Series from aircraft.", "Establish the relationships between the tables using JOINs: pilot_record links pilot and aircraft.", "Construct the SELECT statement to retrieve the desired columns.", "Add the ORDER BY clause to sort the results by the Rank of the pilot in ascending order."], "pred_sql": "SELECT pilot.Pilot_name, aircraft.Fleet_Series \nFROM pilot \nJOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID \nJOIN aircraft ON pilot_record.Aircraft_ID = aircraft.Aircraft_ID \nORDER BY pilot.Rank ASC;", "gold_sql": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank", "source_tables": ["aircraft", "pilot", "pilot_record"]}
{"sample_id": 2094, "db_id": "pilot_record", "question": "Show the fleet series of the aircrafts flied by pilots younger than 34", "rationale": ["Identify the tables involved: 'aircraft', 'pilot_record', and 'pilot'.", "Determine the columns needed: 'Fleet_Series' from 'aircraft' and 'Age' from 'pilot'.", "Establish the relationships between the tables using JOINs: 'pilot_record' links 'aircraft' and 'pilot'.", "Filter the results to include only pilots younger than 34 using a WHERE clause.", "Select distinct fleet series to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT aircraft.Fleet_Series \nFROM aircraft \nJOIN pilot_record ON aircraft.Aircraft_ID = pilot_record.Aircraft_ID \nJOIN pilot ON pilot_record.Pilot_ID = pilot.Pilot_ID \nWHERE pilot.Age < 34;", "gold_sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34", "source_tables": ["aircraft", "pilot", "pilot_record"]}
{"sample_id": 2095, "db_id": "pilot_record", "question": "Show the names of pilots and the number of records they have.", "rationale": ["Identify the tables involved: We need data from the 'pilot' table for pilot names and the 'pilot_record' table for counting records.", "Determine the columns needed: We need 'Pilot_name' from the 'pilot' table and a count of records from the 'pilot_record' table.", "Establish the relationship: The 'pilot' table is linked to the 'pilot_record' table through 'Pilot_ID'.", "Use a LEFT JOIN to include all pilots even if they have no records.", "Group the results by 'Pilot_ID' to count the number of records for each pilot.", "Select the pilot names and the count of their records in the final output."], "pred_sql": "SELECT pilot.Pilot_name, COUNT(pilot_record.Record_ID) AS Record_Count\nFROM pilot\nLEFT JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID\nGROUP BY pilot.Pilot_ID;", "gold_sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name", "source_tables": ["pilot", "pilot_record"]}
{"sample_id": 2096, "db_id": "pilot_record", "question": "Show names of pilots that have more than one record.", "rationale": ["Identify the relevant tables: We need to retrieve pilot names, which are in the 'pilot' table, and we need to count their records, which are in the 'pilot_record' table.", "Join the tables: We will join the 'pilot' table with the 'pilot_record' table on the 'Pilot_ID' to link pilots with their flight records.", "Group the results: We will group the results by 'Pilot_ID' to aggregate the records for each pilot.", "Count the records: We will use the COUNT function to count the number of records for each pilot.", "Filter the results: We will use the HAVING clause to filter out pilots who have more than one record."], "pred_sql": "SELECT p.Pilot_name \nFROM pilot p \nJOIN pilot_record pr ON p.Pilot_ID = pr.Pilot_ID \nGROUP BY p.Pilot_ID \nHAVING COUNT(pr.Record_ID) > 1;", "gold_sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1", "source_tables": ["pilot", "pilot_record"]}
{"sample_id": 2097, "db_id": "pilot_record", "question": "List the names of pilots that do not have any record.", "rationale": ["Identify the table that contains pilot information, which is the 'pilot' table.", "Determine the relevant column to retrieve, which is 'Pilot_name'.", "To find pilots without any records, we need to check which Pilot_IDs are not present in the 'pilot_record' table.", "Use a subquery to select all Pilot_IDs from the 'pilot_record' table.", "Use the NOT IN clause to filter out those Pilot_IDs from the main query on the 'pilot' table."], "pred_sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record);", "gold_sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)", "source_tables": ["pilot", "pilot_record"]}
{"sample_id": 2098, "db_id": "cre_Doc_Control_Systems", "question": "What document status codes do we have?", "rationale": ["Identify the table that contains document status codes, which is 'Ref_Document_Status'.", "Determine the specific column that holds the status codes, which is 'document_status_code'.", "Construct a SQL query to select the 'document_status_code' from the 'Ref_Document_Status' table."], "pred_sql": "SELECT document_status_code FROM Ref_Document_Status;", "gold_sql": "SELECT document_status_code FROM Ref_Document_Status;", "source_tables": ["ref_document_status"]}
{"sample_id": 2099, "db_id": "cre_Doc_Control_Systems", "question": "What is the description of document status code 'working'?", "rationale": ["Identify the table that contains the document status descriptions, which is 'Ref_Document_Status'.", "Determine the relevant column that holds the description of the document status, which is 'document_status_description'.", "Identify the condition needed to filter the results, which is the document status code 'working'.", "Construct the SQL query to select the 'document_status_description' from 'Ref_Document_Status' where 'document_status_code' equals 'working'."], "pred_sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = 'working';", "gold_sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = 'working';", "source_tables": ["ref_document_status"]}
{"sample_id": 2100, "db_id": "cre_Doc_Control_Systems", "question": "What document type codes do we have?", "rationale": ["Identify the table that contains document type codes, which is 'Ref_Document_Types'.", "Determine the specific column that holds the document type codes, which is 'document_type_code'.", "Construct a SQL query to select the 'document_type_code' from the 'Ref_Document_Types' table."], "pred_sql": "SELECT document_type_code FROM Ref_Document_Types;", "gold_sql": "SELECT document_type_code FROM Ref_Document_Types;", "source_tables": ["ref_document_types"]}
{"sample_id": 2101, "db_id": "cre_Doc_Control_Systems", "question": "What is the description of document type 'Paper'?", "rationale": ["Identify the table that contains the document type descriptions, which is 'Ref_Document_Types'.", "Determine the column that holds the description of the document type, which is 'document_type_description'.", "Identify the condition needed to filter the results, which is the document type code being 'Paper'.", "Construct the SQL query to select the 'document_type_description' from 'Ref_Document_Types' where 'document_type_code' equals 'Paper'."], "pred_sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = 'Paper';", "gold_sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = 'Paper';", "source_tables": ["ref_document_types"]}
{"sample_id": 2102, "db_id": "cre_Doc_Control_Systems", "question": "What are the shipping agent names?", "rationale": ["Identify the table that contains the information about shipping agents, which is 'Ref_Shipping_Agents'.", "Determine the specific column that holds the names of the shipping agents, which is 'shipping_agent_name'.", "Construct a SQL query to select the 'shipping_agent_name' from the 'Ref_Shipping_Agents' table."], "pred_sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;", "gold_sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;", "source_tables": ["ref_shipping_agents"]}
{"sample_id": 2103, "db_id": "cre_Doc_Control_Systems", "question": "What is the shipping agent code of shipping agent UPS?", "rationale": ["Identify the table that contains the shipping agent information, which is 'Ref_Shipping_Agents'.", "Determine the column that holds the shipping agent's name, which is 'shipping_agent_name'.", "Identify the column that holds the shipping agent code, which is 'shipping_agent_code'.", "Construct a SQL query to select the 'shipping_agent_code' from 'Ref_Shipping_Agents' where 'shipping_agent_name' is equal to 'UPS'."], "pred_sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'UPS';", "gold_sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'UPS';", "source_tables": ["ref_shipping_agents"]}
{"sample_id": 2104, "db_id": "cre_Doc_Control_Systems", "question": "What are all role codes?", "rationale": ["Identify the table that contains role codes, which is the 'Roles' table.", "Determine the specific column that holds the role codes, which is 'role_code'.", "Construct a SQL query to select all entries from the 'role_code' column in the 'Roles' table."], "pred_sql": "SELECT role_code FROM Roles;", "gold_sql": "SELECT role_code FROM ROLES;", "source_tables": ["roles"]}
{"sample_id": 2105, "db_id": "cre_Doc_Control_Systems", "question": "What is the description of role code ED?", "rationale": ["Identify the table that contains the information about roles, which is the 'Roles' table.", "Determine the specific column that holds the description of the role, which is 'role_description'.", "Formulate a SQL query to select 'role_description' from the 'Roles' table where 'role_code' matches the input 'ED'."], "pred_sql": "SELECT role_description FROM Roles WHERE role_code = 'ED';", "gold_sql": "SELECT role_description FROM ROLES WHERE role_code = 'ED';", "source_tables": ["roles"]}
{"sample_id": 2106, "db_id": "cre_Doc_Control_Systems", "question": "How many employees do we have?", "rationale": ["Identify the table that contains employee information, which is the 'Employees' table.", "To find out how many employees there are, we need to count the number of records in the 'Employees' table.", "Use the COUNT() function to count the total number of employees and select it as 'employee_count'."], "pred_sql": "SELECT COUNT(*) AS employee_count FROM Employees;", "gold_sql": "SELECT count(*) FROM Employees;", "source_tables": ["employees"]}
{"sample_id": 2107, "db_id": "cre_Doc_Control_Systems", "question": "What is the role of the employee named Koby?", "rationale": ["Identify the relevant tables: Employees and Roles.", "Determine the relationship between Employees and Roles through the role_code.", "Select the role_description from the Roles table.", "Filter the Employees table to find the employee named 'Koby'.", "Construct the SQL query using a JOIN to connect Employees and Roles based on role_code."], "pred_sql": "SELECT r.role_description FROM Employees e JOIN Roles r ON e.role_code = r.role_code WHERE e.employee_name = 'Koby';", "gold_sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = 'Koby';", "source_tables": ["roles", "employees"]}
{"sample_id": 2108, "db_id": "cre_Doc_Control_Systems", "question": "List all document ids and receipt dates of documents.", "rationale": ["Identify the required information: document ids and receipt dates.", "Locate the appropriate table: the Documents table contains both document_id and receipt_date.", "Construct the SQL SELECT statement to retrieve the specified columns from the Documents table."], "pred_sql": "SELECT document_id, receipt_date FROM Documents;", "gold_sql": "SELECT document_id ,  receipt_date FROM Documents;", "source_tables": ["documents"]}
{"sample_id": 2109, "db_id": "cre_Doc_Control_Systems", "question": "How many employees does each role have? List role description, id and number of employees.", "rationale": ["Identify the tables involved: Roles and Employees.", "We need to count the number of employees for each role, so we will use a COUNT function on Employees.employee_id.", "To get the role description and role code, we will select these columns from the Roles table.", "We will perform a LEFT JOIN between Roles and Employees on the role_code to ensure we include roles even if they have no employees.", "Group the results by role_code and role_description to get the count of employees for each role."], "pred_sql": "SELECT Roles.role_description, Roles.role_code, COUNT(Employees.employee_id) AS number_of_employees\nFROM Roles\nLEFT JOIN Employees ON Roles.role_code = Employees.role_code\nGROUP BY Roles.role_code, Roles.role_description;", "gold_sql": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;", "source_tables": ["roles", "employees"]}
{"sample_id": 2110, "db_id": "cre_Doc_Control_Systems", "question": "List roles that have more than one employee. List the role description and number of employees.", "rationale": ["We need to list roles that have more than one employee, which means we will be counting the number of employees for each role.", "To achieve this, we will join the 'Roles' table with the 'Employees' table on the 'role_code' column, as this is the common key between the two tables.", "We will select the 'role_description' from the 'Roles' table and count the 'employee_id' from the 'Employees' table to get the number of employees for each role.", "We will group the results by 'role_description' to aggregate the employee counts for each role.", "Finally, we will use the HAVING clause to filter the results to only include roles that have more than one employee."], "pred_sql": "SELECT r.role_description, COUNT(e.employee_id) AS number_of_employees\nFROM Roles r\nJOIN Employees e ON r.role_code = e.role_code\nGROUP BY r.role_description\nHAVING COUNT(e.employee_id) > 1;", "gold_sql": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;", "source_tables": ["roles", "employees"]}
{"sample_id": 2111, "db_id": "cre_Doc_Control_Systems", "question": "What is the document status description of the document with id 1?", "rationale": ["Identify the relevant tables: We need to retrieve the document status description, which is found in the Ref_Document_Status table, and we need to relate it to the Documents table to find the specific document by its ID.", "Determine the relationship: The Documents table has a foreign key 'document_status_code' that links to 'document_status_code' in the Ref_Document_Status table. This relationship will allow us to access the status description for a specific document.", "Formulate the SELECT statement: We will select 'document_status_description' from the Ref_Document_Status table.", "Add the JOIN clause: We will join the Documents table with the Ref_Document_Status table on the 'document_status_code' to get the corresponding status description for the document.", "Add the WHERE clause: We will filter the results to only include the document with 'document_id' equal to 1."], "pred_sql": "SELECT Ref_Document_Status.document_status_description FROM Documents JOIN Ref_Document_Status ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;", "gold_sql": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;", "source_tables": ["ref_document_status", "documents"]}
{"sample_id": 2112, "db_id": "cre_Doc_Control_Systems", "question": "How many documents have the status code done?", "rationale": ["Identify the table that contains the status of documents, which is the 'Documents' table.", "Determine the column that holds the status code, which is 'document_status_code'.", "The user wants to count the number of documents with a specific status code, 'done'.", "Use the COUNT() function to count the number of rows that match the condition.", "Construct the SQL query to select the count of documents from the 'Documents' table where the 'document_status_code' is 'done'."], "pred_sql": "SELECT COUNT(*) AS document_count FROM Documents WHERE document_status_code = 'done';", "gold_sql": "SELECT count(*) FROM Documents WHERE document_status_code = 'done';", "source_tables": ["documents"]}
{"sample_id": 2113, "db_id": "cre_Doc_Control_Systems", "question": "List the document type code for the document with the id 2.", "rationale": ["Identify the table that contains the document ID and document type code, which is the 'Documents' table.", "Determine the specific document we are interested in by filtering with the condition 'document_id = 2'.", "Select the 'document_type_code' from the 'Documents' table where the document ID matches the specified value."], "pred_sql": "SELECT document_type_code FROM Documents WHERE document_id = 2;", "gold_sql": "SELECT document_type_code FROM Documents WHERE document_id = 2;", "source_tables": ["documents"]}
{"sample_id": 2114, "db_id": "cre_Doc_Control_Systems", "question": "List the document ids for any documents with the status code done and the type code paper.", "rationale": ["Identify the relevant tables: We need to query the 'Documents' table for document IDs, and we need to filter based on document status and document type.", "Determine the filtering criteria: The document status should be 'done' and the document type should be 'paper'.", "To get the status code for 'done', we will perform a subquery on the 'Ref_Document_Status' table to find the corresponding 'document_status_code'.", "Similarly, to get the type code for 'paper', we will perform a subquery on the 'Ref_Document_Types' table to find the corresponding 'document_type_code'.", "Construct the SQL query: We will select 'document_id' from the 'Documents' table where the 'document_status_code' matches the result of the first subquery and the 'document_type_code' matches the result of the second subquery."], "pred_sql": "SELECT document_id FROM Documents WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_description = 'done') AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_description = 'paper');", "gold_sql": "SELECT document_id FROM Documents WHERE document_status_code = 'done' AND document_type_code = 'Paper';", "source_tables": ["documents"]}
{"sample_id": 2115, "db_id": "cre_Doc_Control_Systems", "question": "What is the name of the shipping agent of the document with id 2?", "rationale": ["Identify the relevant tables: We need to retrieve the shipping agent's name associated with a specific document, so we will use the 'Documents' table and the 'Ref_Shipping_Agents' table.", "Determine the relationship: The 'Documents' table has a foreign key 'shipping_agent_code' that links to 'Ref_Shipping_Agents.shipping_agent_code'.", "Specify the selection: We want to select the 'shipping_agent_name' from the 'Ref_Shipping_Agents' table.", "Add the condition: We need to filter the results to only include the document with 'document_id' equal to 2.", "Construct the SQL query: Combine the SELECT statement with the JOIN and WHERE clause to form the complete SQL query."], "pred_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;", "gold_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;", "source_tables": ["ref_shipping_agents", "documents"]}
{"sample_id": 2116, "db_id": "cre_Doc_Control_Systems", "question": "How many documents were shipped by USPS?", "rationale": ["Identify the relevant table: The 'Documents' table contains information about the documents and their associated shipping agents.", "Determine the condition: We need to filter the documents based on the shipping agent, which is 'USPS'.", "Find the shipping agent code for USPS: This requires a subquery to the 'Ref_Shipping_Agents' table to get the 'shipping_agent_code' where 'shipping_agent_name' is 'USPS'.", "Count the documents: Use the COUNT() function to count the number of documents that match the condition in the 'Documents' table."], "pred_sql": "SELECT COUNT(*) AS total_documents FROM Documents WHERE shipping_agent_code = (SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'USPS');", "gold_sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS';", "source_tables": ["ref_shipping_agents", "documents"]}
{"sample_id": 2117, "db_id": "cre_Doc_Control_Systems", "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.", "rationale": ["Identify the relevant tables: Ref_Shipping_Agents and Documents.", "We need to count the number of documents shipped by each shipping agent, so we will join the Documents table with the Ref_Shipping_Agents table on the shipping_agent_code.", "Use the COUNT() function to count the number of documents for each shipping agent.", "Group the results by shipping agent name to aggregate the document counts.", "Order the results in descending order based on the document count to find the shipping agent with the most documents.", "Limit the results to 1 to get only the top shipping agent."], "pred_sql": "SELECT sa.shipping_agent_name, COUNT(d.document_id) AS document_count\nFROM Ref_Shipping_Agents sa\nJOIN Documents d ON sa.shipping_agent_code = d.shipping_agent_code\nGROUP BY sa.shipping_agent_name\nORDER BY document_count DESC\nLIMIT 1;", "gold_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;", "source_tables": ["ref_shipping_agents", "documents"]}
{"sample_id": 2118, "db_id": "cre_Doc_Control_Systems", "question": "What is the receipt date of the document with id 3?", "rationale": ["Identify the table that contains the receipt date information, which is the 'Documents' table.", "Determine the specific column that holds the receipt date, which is 'receipt_date'.", "Specify the condition to filter the results to only include the document with the id of 3, using the 'document_id' column.", "Construct the SQL query to select the 'receipt_date' from the 'Documents' table where 'document_id' equals 3."], "pred_sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;", "gold_sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;", "source_tables": ["documents"]}
{"sample_id": 2119, "db_id": "cre_Doc_Control_Systems", "question": "What address was the document with id 4 mailed to?", "rationale": ["Identify the relevant tables: We need to find out where the mailing information is stored, which is in the Documents_Mailed table, and we also need the address details from the Addresses table.", "Determine the relationship: The Documents_Mailed table has a foreign key relationship with the Addresses table through the 'mailed_to_address_id' and 'address_id' columns.", "Specify the selection criteria: We are looking for the address related to a specific document, which is identified by the document_id '4'.", "Construct the SQL query: We will select the address details from the Addresses table, joining it with the Documents_Mailed table on the appropriate foreign key, and filter the results to only include the document with id 4."], "pred_sql": "SELECT Addresses.address_details \nFROM Documents_Mailed \nJOIN Addresses ON Documents_Mailed.mailed_to_address_id = Addresses.address_id \nWHERE Documents_Mailed.document_id = '4';", "gold_sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;", "source_tables": ["addresses", "documents_mailed"]}
{"sample_id": 2120, "db_id": "cre_Doc_Control_Systems", "question": "What is the mail date of the document with id 7?", "rationale": ["Identify the relevant table: The query is asking for the mailing date of a document, which is stored in the Documents_Mailed table.", "Determine the specific column needed: The mailing_date column contains the information requested.", "Specify the condition: We need to filter the results to only include the document with the id of 7, which corresponds to the document_id column in the Documents_Mailed table.", "Construct the SQL query: Using the SELECT statement to retrieve the mailing_date from the Documents_Mailed table where the document_id is 7."], "pred_sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = '7';", "gold_sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;", "source_tables": ["documents_mailed"]}
{"sample_id": 2121, "db_id": "cre_Doc_Control_Systems", "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.", "rationale": ["Identify the relevant tables: Documents, Ref_Document_Status, Ref_Document_Types, and Ref_Shipping_Agents.", "We need to select the document ids from the Documents table.", "Join the Documents table with Ref_Document_Status to filter by the status 'done'.", "Join the Documents table with Ref_Document_Types to filter by the type 'Paper'.", "Join the Documents table with Ref_Shipping_Agents to exclude documents shipped by USPS.", "Use a WHERE clause to specify the conditions for document status, type, and shipping agent.", "Construct the SQL query to select the document_id based on the specified conditions."], "pred_sql": "SELECT d.document_id \nFROM Documents d \nJOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code \nJOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code \nJOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code \nWHERE ds.document_status_description = 'done' \nAND dt.document_type_description = 'Paper' \nAND sa.shipping_agent_name != 'USPS';", "gold_sql": "SELECT document_id FROM Documents WHERE document_status_code  =  'done' AND document_type_code = 'Paper' EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS';", "source_tables": ["ref_shipping_agents", "documents"]}
{"sample_id": 2122, "db_id": "cre_Doc_Control_Systems", "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.", "rationale": ["Identify the relevant tables: Documents, Ref_Document_Status, Ref_Document_Types, and Ref_Shipping_Agents.", "We need to select the document_id from the Documents table.", "Join the Documents table with Ref_Document_Status to filter by document status.", "Join the Documents table with Ref_Document_Types to filter by document type.", "Join the Documents table with Ref_Shipping_Agents to filter by shipping agent name.", "Apply the WHERE clause to filter for documents with status 'done', type 'Paper', and shipped by 'USPS'."], "pred_sql": "SELECT d.document_id \nFROM Documents d \nJOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code \nJOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code \nJOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code \nWHERE ds.document_status_description = 'done' \nAND dt.document_type_description = 'Paper' \nAND sa.shipping_agent_name = 'USPS';", "gold_sql": "SELECT document_id FROM Documents WHERE document_status_code  =  'done' AND document_type_code = 'Paper' INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS';", "source_tables": ["ref_shipping_agents", "documents"]}
{"sample_id": 2123, "db_id": "cre_Doc_Control_Systems", "question": "What is draft detail of the document with id 7?", "rationale": ["Identify the table that contains the draft details, which is the Document_Drafts table.", "Determine the column that holds the draft details, which is draft_details.", "Specify the condition to filter the results to only include the document with id 7, using the document_id column."], "pred_sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = '7';", "gold_sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;", "source_tables": ["document_drafts"]}
{"sample_id": 2124, "db_id": "cre_Doc_Control_Systems", "question": "How many draft copies does the document with id 2 have?", "rationale": ["Identify the table that contains the information about draft copies, which is the Draft_Copies table.", "Determine the relevant column that identifies the document, which is document_id.", "Formulate a query to count the number of entries in the Draft_Copies table where the document_id is equal to 2."], "pred_sql": "SELECT COUNT(*) AS draft_copy_count FROM Draft_Copies WHERE document_id = '2';", "gold_sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;", "source_tables": ["draft_copies"]}
{"sample_id": 2125, "db_id": "cre_Doc_Control_Systems", "question": "Which document has the most draft copies? List its document id and number of draft copies.", "rationale": ["Identify the relevant table: Draft_Copies, which contains the document_id and copy_number.", "Use COUNT() function to count the number of draft copies for each document_id.", "Group the results by document_id to aggregate the count of draft copies for each document.", "Order the results in descending order based on the count of draft copies to find the document with the most copies.", "Limit the results to 1 to get only the document with the highest number of draft copies."], "pred_sql": "SELECT dc.document_id, COUNT(dc.copy_number) AS number_of_draft_copies\nFROM Draft_Copies dc\nGROUP BY dc.document_id\nORDER BY number_of_draft_copies DESC\nLIMIT 1;", "gold_sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;", "source_tables": ["draft_copies"]}
{"sample_id": 2126, "db_id": "cre_Doc_Control_Systems", "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.", "rationale": ["We need to find documents that have more than one draft copy.", "The relevant table for draft copies is 'Draft_Copies'.", "We will select the 'document_id' and count the 'copy_number' for each document.", "To get the count of draft copies for each document, we will use the COUNT() function and group the results by 'document_id'.", "To filter the results to only include documents with more than one draft copy, we will use the HAVING clause with COUNT(copy_number) > 1."], "pred_sql": "SELECT document_id, COUNT(copy_number) AS number_of_draft_copies\nFROM Draft_Copies\nGROUP BY document_id\nHAVING COUNT(copy_number) > 1;", "gold_sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;", "source_tables": ["draft_copies"]}
{"sample_id": 2127, "db_id": "cre_Doc_Control_Systems", "question": "List all employees in the circulation history of the document with id 1. List the employee's name.", "rationale": ["Identify the relevant tables: Circulation_History and Employees.", "Determine the columns needed: employee_name from Employees.", "Establish the relationship between the tables: Circulation_History has employee_id that links to Employees.", "Filter the results to only include records for the document with id 1."], "pred_sql": "SELECT Employees.employee_name \nFROM Circulation_History \nJOIN Employees ON Circulation_History.employee_id = Employees.employee_id \nWHERE Circulation_History.document_id = '1';", "gold_sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;", "source_tables": ["employees", "circulation_history"]}
{"sample_id": 2128, "db_id": "cre_Doc_Control_Systems", "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.", "rationale": ["Identify the main table to query: Employees.", "Determine the condition: Employees who have not appeared in the Circulation_History table.", "Use a subquery to find employee_ids that exist in the Circulation_History table.", "Select employee_name from Employees where employee_id is not in the list of employee_ids from the subquery."], "pred_sql": "SELECT employee_name FROM Employees WHERE employee_id NOT IN (SELECT employee_id FROM Circulation_History)", "gold_sql": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id", "source_tables": ["employees", "circulation_history"]}
{"sample_id": 2129, "db_id": "cre_Doc_Control_Systems", "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.", "rationale": ["Identify the relevant tables: Employees and Circulation_History.", "We need to join these tables on the employee_id to link employees with their circulation history.", "Count the number of drafts and copies for each employee using COUNT() on draft_number in the Circulation_History table.", "Group the results by employee_id to aggregate the counts for each employee.", "Order the results in descending order to find the employee with the highest count.", "Limit the results to 1 to get only the top employee."], "pred_sql": "SELECT e.employee_name, COUNT(ch.draft_number) AS total_drafts_and_copies\nFROM Employees e\nJOIN Circulation_History ch ON e.employee_id = ch.employee_id\nGROUP BY e.employee_id\nORDER BY total_drafts_and_copies DESC\nLIMIT 1;", "gold_sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["employees", "circulation_history"]}
{"sample_id": 2130, "db_id": "cre_Doc_Control_Systems", "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.", "rationale": ["We need to retrieve the document IDs and count the number of distinct employees associated with each document in the circulation history.", "The relevant table for this information is the Circulation_History table, which contains the document_id and employee_id.", "To count the number of employees for each document, we will use the COUNT function and group the results by document_id.", "Using DISTINCT within the COUNT function ensures that we only count unique employees for each document.", "Finally, we will select the document_id and the count of employees, grouping the results by document_id."], "pred_sql": "SELECT ch.document_id, COUNT(DISTINCT ch.employee_id) AS employee_count\nFROM Circulation_History ch\nGROUP BY ch.document_id;", "gold_sql": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;", "source_tables": ["circulation_history"]}
{"sample_id": 2131, "db_id": "company_1", "question": "List all department names ordered by their starting date.", "rationale": ["Identify the table that contains department names, which is the 'department' table.", "Select the 'Dname' column from the 'department' table to get the names of the departments.", "To order the results by their starting date, use the 'Mgr_start_date' column from the same table.", "Construct the SQL query to select 'Dname' and order the results by 'Mgr_start_date'."], "pred_sql": "SELECT Dname FROM department ORDER BY Mgr_start_date;", "gold_sql": "SELECT dname FROM department ORDER BY mgr_start_date", "source_tables": ["department"]}
{"sample_id": 2132, "db_id": "company_1", "question": "find all dependent names who have a spouse relation with some employee.", "rationale": ["Identify the table that contains the information about dependents, which is the 'dependent' table.", "Determine the relevant column that contains the relationship type, which is 'Relationship'.", "Filter the records to find those where the relationship is specifically 'spouse'.", "Select the 'Dependent_name' column to retrieve the names of the dependents who have a spouse relationship."], "pred_sql": "SELECT Dependent_name FROM dependent WHERE Relationship = 'spouse';", "gold_sql": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'", "source_tables": ["dependent"]}
{"sample_id": 2133, "db_id": "company_1", "question": "how many female dependents are there?", "rationale": ["Identify the relevant table: The 'dependent' table contains information about dependents, including their gender.", "Determine the condition: We need to count only the female dependents, which is indicated by the 'Sex' column being 'F'.", "Construct the SQL query: Use the COUNT() function to count the number of rows that meet the condition, and select from the 'dependent' table."], "pred_sql": "SELECT COUNT(*) AS Female_Dependents_Count FROM dependent WHERE Sex = 'F';", "gold_sql": "SELECT count(*) FROM dependent WHERE sex  =  'F'", "source_tables": ["dependent"]}
{"sample_id": 2134, "db_id": "company_1", "question": "Find the names of departments that are located in Houston.", "rationale": ["Identify the relevant tables: We need to find department names and their locations, so we will use the 'department' and 'dept_locations' tables.", "Determine the relationship between the tables: The 'department' table has a unique department number (Dnumber) that corresponds to the department number in the 'dept_locations' table.", "Formulate the SQL query: We will select the department names (Dname) from the 'department' table where the corresponding location in the 'dept_locations' table is 'Houston'.", "Use a JOIN clause to combine the two tables based on the department number, and apply a WHERE clause to filter for locations in Houston."], "pred_sql": "SELECT Dname FROM department d JOIN dept_locations dl ON d.Dnumber = dl.Dnumber WHERE dl.Dlocation = 'Houston';", "gold_sql": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'", "source_tables": ["department", "dept_locations"]}
{"sample_id": 2135, "db_id": "company_1", "question": "Return the first names and last names of employees who earn more than 30000 in salary.", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the columns needed for the output, which are 'Fname' and 'Lname'.", "Identify the condition for filtering the results, which is that the 'Salary' must be greater than 30000.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'employee' table with the given condition."], "pred_sql": "SELECT Fname, Lname FROM employee WHERE Salary > 30000;", "gold_sql": "SELECT fname ,  lname FROM employee WHERE salary  >  30000", "source_tables": ["employee"]}
{"sample_id": 2136, "db_id": "company_1", "question": "Find the number of employees of each gender whose salary is lower than 50000.", "rationale": ["Identify the relevant table: The 'employee' table contains information about employees, including their gender and salary.", "Determine the columns needed: We need the 'Sex' column to group by gender and the 'Salary' column to filter employees with a salary lower than 50000.", "Use the COUNT function to count the number of employees for each gender.", "Apply a WHERE clause to filter employees with a salary less than 50000.", "Group the results by the 'Sex' column to get the count of employees for each gender."], "pred_sql": "SELECT Sex, COUNT(*) AS Number_of_Employees FROM employee WHERE Salary < 50000 GROUP BY Sex;", "gold_sql": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex", "source_tables": ["employee"]}
{"sample_id": 2137, "db_id": "company_1", "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.", "rationale": ["Identify the columns needed: first name (Fname), last name (Lname), and address (Address) from the employee table.", "Determine the table to query: the employee table contains all the necessary information.", "Specify the order of results: we need to order the results by birth date (Bdate) in ascending order.", "Construct the SQL SELECT statement to retrieve the specified columns and apply the ORDER BY clause."], "pred_sql": "SELECT Fname, Lname, Address FROM employee ORDER BY Bdate ASC;", "gold_sql": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate", "source_tables": ["employee"]}
{"sample_id": 2138, "db_id": "local_govt_in_alabama", "question": "what are the event details of the services that have the type code 'Marriage'?", "rationale": ["Identify the relevant tables: Events and Services.", "Determine the relationship between the tables: Events has a foreign key Service_ID that links to Services.", "Select the Event_Details from the Events table.", "Filter the results based on the Service_Type_Code from the Services table, specifically for 'Marriage'.", "Construct the SQL query using a JOIN to combine the two tables based on the Service_ID."], "pred_sql": "SELECT Events.Event_Details FROM Events JOIN Services ON Events.Service_ID = Services.Service_ID WHERE Services.Service_Type_Code = 'Marriage';", "gold_sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'", "source_tables": ["services", "events"]}
{"sample_id": 2139, "db_id": "local_govt_in_alabama", "question": "What are the ids and details of events that have more than one participants?", "rationale": ["Identify the relevant tables: Events and Participants_in_Events are needed to get event details and participant counts.", "Join the Events table with the Participants_in_Events table on the Event_ID to link events with their participants.", "Group the results by Event_ID to aggregate participant counts for each event.", "Use the HAVING clause to filter groups where the count of Participant_IDs is greater than 1, indicating more than one participant."], "pred_sql": "SELECT Events.Event_ID, Events.Event_Details \nFROM Events \nJOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID \nGROUP BY Events.Event_ID \nHAVING COUNT(Participants_in_Events.Participant_ID) > 1;", "gold_sql": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1", "source_tables": ["participants_in_events", "events"]}
{"sample_id": 2140, "db_id": "local_govt_in_alabama", "question": "How many events have each participants attended? List the participant id, type and the number.", "rationale": ["We need to count the number of events each participant has attended.", "To do this, we will select the Participant_ID and Participant_Type_Code from the Participants table.", "We will also need to count the Event_ID from the Participants_in_Events table to get the number of events attended by each participant.", "To link the Participants table with the Participants_in_Events table, we will use a LEFT JOIN on Participant_ID.", "Finally, we will group the results by Participant_ID and Participant_Type_Code to get the count for each participant."], "pred_sql": "SELECT p.Participant_ID, p.Participant_Type_Code, COUNT(pie.Event_ID) AS Event_Count\nFROM Participants p\nLEFT JOIN Participants_in_Events pie ON p.Participant_ID = pie.Participant_ID\nGROUP BY p.Participant_ID, p.Participant_Type_Code;", "gold_sql": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID", "source_tables": ["participants", "participants_in_events"]}
{"sample_id": 2141, "db_id": "local_govt_in_alabama", "question": "What are all the the participant ids, type code and details?", "rationale": ["Identify the table that contains participant information, which is the 'Participants' table.", "Determine the specific columns needed from the 'Participants' table: 'Participant_ID', 'Participant_Type_Code', and 'Participant_Details'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Participants' table."], "pred_sql": "SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants;", "gold_sql": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants", "source_tables": ["participants"]}
{"sample_id": 2142, "db_id": "local_govt_in_alabama", "question": "How many participants belong to the type 'Organizer'?", "rationale": ["Identify the table that contains participant information, which is the 'Participants' table.", "Determine the column that specifies the type of participant, which is 'Participant_Type_Code'.", "Filter the results to only include participants of the type 'Organizer'.", "Use the COUNT() function to count the number of participants that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS Participant_Count FROM Participants WHERE Participant_Type_Code = 'Organizer';", "gold_sql": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'", "source_tables": ["participants"]}
{"sample_id": 2143, "db_id": "local_govt_in_alabama", "question": "List the type of the services in alphabetical order.", "rationale": ["Identify the table that contains the service types, which is the 'Services' table.", "Select the 'Service_Type_Code' column from the 'Services' table to get the types of services.", "Use DISTINCT to ensure that each service type is listed only once.", "Order the results in alphabetical order using ORDER BY clause with ASC for ascending order."], "pred_sql": "SELECT DISTINCT Service_Type_Code FROM Services ORDER BY Service_Type_Code ASC;", "gold_sql": "SELECT service_type_code FROM services ORDER BY service_type_code", "source_tables": ["services"]}
{"sample_id": 2144, "db_id": "local_govt_in_alabama", "question": "List the service id and details for the events.", "rationale": ["Identify the tables involved: We need to retrieve data from the Events table.", "Determine the required columns: We need the Service_ID and Event_Details from the Events table.", "Construct the SQL SELECT statement: We will select the specified columns from the Events table."], "pred_sql": "SELECT Events.Service_ID, Events.Event_Details FROM Events;", "gold_sql": "SELECT service_id ,  event_details FROM EVENTS", "source_tables": ["events"]}
{"sample_id": 2145, "db_id": "local_govt_in_alabama", "question": "How many events had participants whose details had the substring 'Dr.'", "rationale": ["We need to count the number of events that had participants with specific details.", "The relevant tables are Events, Participants_in_Events, and Participants.", "We will join these tables based on their relationships: Events to Participants_in_Events on Event_ID, and Participants_in_Events to Participants on Participant_ID.", "We need to filter the participants whose details contain the substring 'Dr.'.", "To count the distinct events, we will use COUNT(DISTINCT Events.Event_ID) in the SELECT statement."], "pred_sql": "SELECT COUNT(DISTINCT Events.Event_ID) AS Event_Count\nFROM Events\nJOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID\nJOIN Participants ON Participants_in_Events.Participant_ID = Participants.Participant_ID\nWHERE Participants.Participant_Details LIKE '%Dr.%';", "gold_sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'", "source_tables": ["participants", "participants_in_events"]}
{"sample_id": 2146, "db_id": "local_govt_in_alabama", "question": "What is the most common participant type?", "rationale": ["Identify the relevant table: Participants, as we need information about participant types.", "We need to count the occurrences of each Participant_Type_Code to determine the most common type.", "Use the COUNT() function to count the number of participants for each type.", "Group the results by Participant_Type_Code to aggregate the counts for each type.", "Order the results in descending order based on the count to get the most common type at the top.", "Limit the results to 1 to get only the most common participant type."], "pred_sql": "SELECT Participant_Type_Code, COUNT(*) as Count FROM Participants GROUP BY Participant_Type_Code ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["participants"]}
{"sample_id": 2147, "db_id": "local_govt_in_alabama", "question": "Which service id and type has the least number of participants?", "rationale": ["We need to find the service ID and type that has the least number of participants.", "To do this, we will join the Services table with the Events table on Service_ID to link services to their events.", "Next, we will join the Participants_in_Events table to count the number of participants for each event.", "We will group the results by Service_ID and Service_Type_Code to aggregate the participant counts for each service.", "Finally, we will order the results by the count of participants in ascending order and limit the results to 1 to get the service with the least participants."], "pred_sql": "SELECT S.Service_ID, S.Service_Type_Code FROM Services S LEFT JOIN Events E ON S.Service_ID = E.Service_ID LEFT JOIN Participants_in_Events P ON E.Event_ID = P.Event_ID GROUP BY S.Service_ID, S.Service_Type_Code ORDER BY COUNT(P.Participant_ID) ASC LIMIT 1;", "gold_sql": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["services", "participants", "events", "participants_in_events"]}
{"sample_id": 2148, "db_id": "local_govt_in_alabama", "question": "What is the id of the event with the most participants?", "rationale": ["Identify the table that contains participant information for events, which is 'Participants_in_Events'.", "We need to count the number of participants for each event, so we will use the COUNT() function on 'Participant_ID'.", "To group the results by each event, we will use the GROUP BY clause on 'Event_ID'.", "To find the event with the most participants, we will order the results in descending order using ORDER BY COUNT(Participant_ID) DESC.", "Finally, we will limit the results to only the top event using LIMIT 1."], "pred_sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY COUNT(Participant_ID) DESC LIMIT 1;", "gold_sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["participants_in_events"]}
{"sample_id": 2149, "db_id": "local_govt_in_alabama", "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?", "rationale": ["Identify the relevant tables: Events, Participants_in_Events, and Participants.", "We need to find events that do not have any participants with the detail 'Kenyatta Kuhn'.", "Use a LEFT JOIN to connect Events with Participants_in_Events and then with Participants to ensure we get all events, even those without participants.", "Filter the results to exclude participants with the detail 'Kenyatta Kuhn'.", "Use GROUP BY to group the results by Event_ID and HAVING to ensure that we only select events that have a count of participants equal to zero."], "pred_sql": "SELECT Events.Event_ID \nFROM Events \nLEFT JOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID \nLEFT JOIN Participants ON Participants_in_Events.Participant_ID = Participants.Participant_ID \nWHERE Participants.Participant_Details != 'Kenyatta Kuhn' OR Participants.Participant_ID IS NULL \nGROUP BY Events.Event_ID \nHAVING COUNT(Participants.Participant_ID) = 0;", "gold_sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'", "source_tables": ["participants_in_events", "participants", "events"]}
{"sample_id": 2150, "db_id": "local_govt_in_alabama", "question": "Which services type had both successful and failure event details?", "rationale": ["Identify the relevant tables: Services and Events are needed to find service types and their associated event details.", "Join the Services table with the Events table on the Service_ID to link services with their events.", "Filter the events to include only those with 'successful' and 'failure' in their Event_Details.", "Group the results by Service_Type_Code to aggregate the event details for each service type.", "Use the HAVING clause to ensure that only service types with both 'successful' and 'failure' event details are included, which means counting distinct event details should equal 2."], "pred_sql": "SELECT DISTINCT S.Service_Type_Code \nFROM Services S \nJOIN Events E ON S.Service_ID = E.Service_ID \nWHERE E.Event_Details IN ('successful', 'failure') \nGROUP BY S.Service_Type_Code \nHAVING COUNT(DISTINCT E.Event_Details) = 2;", "gold_sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'", "source_tables": ["services", "events"]}
{"sample_id": 2151, "db_id": "local_govt_in_alabama", "question": "How many events did not have any participants?", "rationale": ["Identify the Events table, which contains all events.", "To find events without participants, we need to check which Event_IDs are not present in the Participants_in_Events table.", "Use a subquery to select all Event_IDs from Participants_in_Events.", "Count the total number of Event_IDs in the Events table that are not in the list obtained from the subquery."], "pred_sql": "SELECT COUNT(*) AS No_Participants FROM Events WHERE Event_ID NOT IN (SELECT Event_ID FROM Participants_in_Events);", "gold_sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)", "source_tables": ["participants_in_events", "events"]}
{"sample_id": 2152, "db_id": "local_govt_in_alabama", "question": "What are all the distinct participant ids who attended any events?", "rationale": ["Identify the requirement: We need to find all distinct participant IDs who attended any events.", "Determine the relevant table: The 'Participants_in_Events' table contains the participant IDs associated with events.", "Use the SELECT statement to retrieve the 'Participant_ID' from the 'Participants_in_Events' table.", "Since we need distinct participant IDs, we will use the DISTINCT keyword to ensure that each ID is unique in the result set."], "pred_sql": "SELECT DISTINCT Participant_ID FROM Participants_in_Events;", "gold_sql": "SELECT count(DISTINCT participant_id) FROM participants_in_Events", "source_tables": ["participants_in_events"]}
{"sample_id": 2153, "db_id": "formula_1", "question": "What is the name of the race held most recently?", "rationale": ["Identify the table that contains race information, which is the 'races' table.", "Determine the column that holds the name of the race, which is 'name'.", "To find the most recent race, we need to order the results by the 'date' column in descending order.", "Limit the results to 1 to get only the most recent race."], "pred_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1;", "gold_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"]}
{"sample_id": 2154, "db_id": "formula_1", "question": "What is the name of the race that occurred most recently?", "rationale": ["Identify the relevant table: The 'races' table contains information about races, including their names and dates.", "Determine the required information: We need the name of the race that occurred most recently, which implies we need to sort the races by date.", "Sort the races by date in descending order: This will allow us to get the most recent race at the top of the list.", "Limit the results to 1: Since we only want the most recent race, we will limit our query to return only one result."], "pred_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1;", "gold_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"]}
{"sample_id": 2155, "db_id": "formula_1", "question": "What is the name and date of the most recent race?", "rationale": ["Identify the relevant table: The 'races' table contains the information about races, including their names and dates.", "Select the required columns: We need to retrieve the 'name' and 'date' of the races.", "Order the results: To find the most recent race, we will order the results by the 'date' column in descending order.", "Limit the results: Since we only want the most recent race, we will limit the results to 1."], "pred_sql": "SELECT name, date FROM races ORDER BY date DESC LIMIT 1;", "gold_sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"]}
{"sample_id": 2156, "db_id": "formula_1", "question": "What is the name and date of the race that occurred most recently?", "rationale": ["Identify the relevant table: The 'races' table contains the information about races, including their names and dates.", "Select the required columns: We need to retrieve the 'name' and 'date' of the races.", "Order the results: To find the most recent race, we will order the results by the 'date' column in descending order.", "Limit the results: Since we only want the most recent race, we will limit the results to 1."], "pred_sql": "SELECT name, date FROM races ORDER BY date DESC LIMIT 1;", "gold_sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"]}
{"sample_id": 2157, "db_id": "formula_1", "question": "Find the names of all races held in 2017.", "rationale": ["Identify the table that contains race information, which is the 'races' table.", "Determine the relevant column that contains the names of the races, which is the 'name' column.", "Specify the condition to filter the races by the year 2017, using the 'year' column.", "Construct the SQL query to select the 'name' column from the 'races' table where the 'year' is 2017."], "pred_sql": "SELECT name FROM races WHERE year = 2017;", "gold_sql": "SELECT name FROM races WHERE YEAR = 2017", "source_tables": ["races"]}
{"sample_id": 2158, "db_id": "formula_1", "question": "What are the names of all the races that occurred in the year 2017?", "rationale": ["Identify the table that contains race information, which is the 'races' table.", "Determine the relevant column that contains the names of the races, which is the 'name' column.", "Filter the results to only include races that occurred in the year 2017 by using a WHERE clause on the 'year' column."], "pred_sql": "SELECT name FROM races WHERE year = 2017;", "gold_sql": "SELECT name FROM races WHERE YEAR = 2017", "source_tables": ["races"]}
{"sample_id": 2159, "db_id": "formula_1", "question": "Find the distinct names of all races held between 2014 and 2017?", "rationale": ["Identify the table that contains race information, which is the 'races' table.", "Determine the relevant column for the race names, which is 'name'.", "Identify the condition for the years, which is between 2014 and 2017.", "Use the DISTINCT keyword to ensure that only unique race names are returned.", "Construct the SQL query using the SELECT statement to retrieve the distinct names from the races table with the specified year condition."], "pred_sql": "SELECT DISTINCT name FROM races WHERE year BETWEEN 2014 AND 2017;", "gold_sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "source_tables": ["races"]}
{"sample_id": 2160, "db_id": "formula_1", "question": "What are the unique names of all race held between 2014 and 2017?", "rationale": ["Identify the table that contains race information, which is the 'races' table.", "Determine the relevant column that contains the names of the races, which is the 'name' column.", "To get unique names, use the DISTINCT keyword in the SQL query.", "Filter the results to include only races held between the years 2014 and 2017 using the WHERE clause with the BETWEEN operator."], "pred_sql": "SELECT DISTINCT name FROM races WHERE year BETWEEN 2014 AND 2017;", "gold_sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "source_tables": ["races"]}
{"sample_id": 2161, "db_id": "formula_1", "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?", "rationale": ["We need to select the forename and surname of drivers.", "The relevant table for driver information is 'drivers', which contains the columns 'forename' and 'surname'.", "We also need to check lap times, which are stored in the 'lapTimes' table.", "To find drivers with lap times less than 93000 milliseconds, we will join the 'drivers' table with the 'lapTimes' table on the 'driverId' column.", "The condition for the lap time is specified in the WHERE clause as 'lt.time < 93000'.", "We use DISTINCT to ensure that we only get unique combinations of forename and surname."], "pred_sql": "SELECT DISTINCT d.forename, d.surname \nFROM drivers d \nJOIN lapTimes lt ON d.driverId = lt.driverId \nWHERE lt.time < 93000;", "gold_sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2162, "db_id": "formula_1", "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?", "rationale": ["Identify the relevant tables: 'drivers' for driver information and 'lapTimes' for lap time records.", "We need to select the forenames and surnames of drivers, which are in the 'drivers' table.", "To find drivers with lap times less than 93000 milliseconds, we will join the 'drivers' table with the 'lapTimes' table on the 'driverId' column.", "Use the WHERE clause to filter lap times that are less than 93000 milliseconds.", "Since we want unique drivers, we will use the DISTINCT keyword to ensure no duplicate entries in the results."], "pred_sql": "SELECT DISTINCT d.forename, d.surname FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE l.time < 93000;", "gold_sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2163, "db_id": "formula_1", "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?", "rationale": ["We need to find distinct driver IDs and their nationalities.", "The relevant tables are 'drivers' for driver information and 'lapTimes' for lap time records.", "We will join the 'drivers' table with the 'lapTimes' table on the driverId column to get the necessary information.", "We need to filter the results to include only those lap times that are greater than 100000 milliseconds.", "Finally, we will select the distinct driverId and nationality from the results."], "pred_sql": "SELECT DISTINCT drivers.driverId, drivers.nationality FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time > 100000;", "gold_sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2164, "db_id": "formula_1", "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?", "rationale": ["Identify the relevant tables: 'drivers' for driver information and 'lapTimes' for lap time records.", "We need to find drivers who had a lap time greater than 100000 milliseconds, so we will filter the 'lapTimes' table based on the 'time' column.", "To get the driver ids and their nationalities, we will select 'driverId' and 'nationality' from the 'drivers' table.", "We will join the 'drivers' table with the 'lapTimes' table on the 'driverId' to correlate the drivers with their lap times.", "Use DISTINCT to ensure that we only get unique combinations of driver ids and nationalities."], "pred_sql": "SELECT DISTINCT drivers.driverId, drivers.nationality FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time > 100000;", "gold_sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2165, "db_id": "formula_1", "question": "What are the forename and surname of the driver who has the smallest laptime?", "rationale": ["Identify the relevant tables: 'drivers' for driver information and 'lapTimes' for lap times.", "We need to select the 'forename' and 'surname' from the 'drivers' table.", "To find the driver with the smallest lap time, we need to join the 'drivers' table with the 'lapTimes' table on 'driverId'.", "We will order the results by the 'time' column in the 'lapTimes' table in ascending order to get the smallest lap time first.", "Finally, we limit the results to 1 to get only the driver with the smallest lap time."], "pred_sql": "SELECT d.forename, d.surname \nFROM drivers d \nJOIN lapTimes lt ON d.driverId = lt.driverId \nORDER BY lt.time ASC \nLIMIT 1;", "gold_sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2166, "db_id": "formula_1", "question": "What is the forename and surname of the driver with the shortest laptime?", "rationale": ["Identify the relevant tables: 'drivers' for driver information and 'lapTimes' for lap time data.", "We need to join the 'drivers' table with the 'lapTimes' table on the 'driverId' to access both driver names and their lap times.", "To find the driver with the shortest lap time, we need to find the minimum lap time from the 'lapTimes' table.", "Use a subquery to select the minimum lap time from 'lapTimes'.", "Select the 'forename' and 'surname' of the driver whose lap time matches the minimum lap time found in the subquery."], "pred_sql": "SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes)", "gold_sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2167, "db_id": "formula_1", "question": "What is the id and family name of the driver who has the longest laptime?", "rationale": ["Identify the relevant tables: 'results' for lap times and 'drivers' for driver information.", "We need to find the driver with the longest lap time, which is stored in the 'time' column of the 'results' table.", "Join the 'results' table with the 'drivers' table on the 'driverId' to get the driver's surname.", "Order the results by the 'time' column in descending order to get the longest lap time at the top.", "Limit the results to 1 to get only the driver with the longest lap time."], "pred_sql": "SELECT driverId, surname FROM results JOIN drivers ON results.driverId = drivers.driverId ORDER BY time DESC LIMIT 1;", "gold_sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2168, "db_id": "formula_1", "question": "What is the id and last name of the driver with the longest laptime?", "rationale": ["Identify the relevant tables: 'results' for lap times and 'drivers' for driver information.", "We need to find the driver with the longest lap time, which is stored in the 'time' column of the 'results' table.", "Join the 'results' table with the 'drivers' table on the 'driverId' to get the driver's last name.", "Sort the results by the 'time' column in descending order to get the longest lap time at the top.", "Limit the results to 1 to get only the driver with the longest lap time."], "pred_sql": "SELECT driverId, surname FROM results JOIN drivers ON results.driverId = drivers.driverId ORDER BY time DESC LIMIT 1;", "gold_sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2169, "db_id": "formula_1", "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "rationale": ["Identify the relevant tables: drivers and lapTimes.", "We need to find drivers who finished in the first position based on lap times, so we will join the drivers table with the lapTimes table on driverId.", "We will filter the lapTimes to only include those where the position is 1 (indicating first place).", "Next, we will group the results by driverId and count how many times each driver has finished in first position.", "We will use the HAVING clause to filter for drivers who have finished in first position at least twice.", "Finally, we will select the driverId, forename, and surname from the drivers table for those drivers who meet the criteria."], "pred_sql": "SELECT d.driverId, d.forename, d.surname\nFROM drivers d\nJOIN lapTimes lt ON d.driverId = lt.driverId\nJOIN (\n    SELECT driverId, COUNT(*) as lapCount\n    FROM lapTimes\n    WHERE position = 1\n    GROUP BY driverId\n    HAVING lapCount >= 2\n) as firstPositionDrivers ON d.driverId = firstPositionDrivers.driverId;", "gold_sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2170, "db_id": "formula_1", "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "rationale": ["Identify the relevant tables: We need data from the 'drivers' table for driver information and the 'lapTimes' table for lap time records.", "Join the 'drivers' table with the 'lapTimes' table on the driverId to associate drivers with their lap times.", "Filter the results to only include laps where the driver was in the first position (lt.position = 1).", "Group the results by driverId to aggregate the lap times for each driver.", "Use the HAVING clause to filter the grouped results to only include drivers who have been in the first position at least twice (COUNT(lt.lap) >= 2).", "Select the required fields: driverId, forename, and surname from the drivers table."], "pred_sql": "SELECT d.driverId, d.forename, d.surname \nFROM drivers d \nJOIN lapTimes lt ON d.driverId = lt.driverId \nWHERE lt.position = 1 \nGROUP BY d.driverId \nHAVING COUNT(lt.lap) >= 2;", "gold_sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["laptimes", "drivers"]}
{"sample_id": 2171, "db_id": "formula_1", "question": "How many drivers participated in the race Australian Grand Prix held in 2009?", "rationale": ["Identify the race by its name and year: 'Australian Grand Prix' in 2009.", "Join the 'results' table with the 'races' table using the raceId to link results to the specific race.", "Count the distinct driverId entries in the results for that race to determine how many drivers participated."], "pred_sql": "SELECT COUNT(DISTINCT results.driverId) AS driver_count\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE races.name = 'Australian Grand Prix' AND races.year = 2009;", "gold_sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Australian Grand Prix' AND YEAR = 2009", "source_tables": ["results", "races"]}
{"sample_id": 2172, "db_id": "formula_1", "question": "How many drivers were in the Australian Grand Prix held in 2009?", "rationale": ["Identify the relevant tables: 'races' for race details and 'results' for driver results.", "We need to count the number of distinct drivers who participated in the race, so we will use COUNT(DISTINCT results.driverId).", "Filter the races table to find the Australian Grand Prix held in the year 2009.", "Join the 'races' table with the 'results' table on raceId to link drivers to the specific race.", "Construct the SQL query to select the count of distinct driver IDs from the results of the specified race."], "pred_sql": "SELECT COUNT(DISTINCT results.driverId) AS driver_count\nFROM races\nJOIN results ON races.raceId = results.raceId\nWHERE races.year = 2009 AND races.name = 'Australian Grand Prix';", "gold_sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Australian Grand Prix' AND YEAR = 2009", "source_tables": ["results", "races"]}
{"sample_id": 2173, "db_id": "formula_1", "question": "How many drivers did not participate in the races held in 2009?", "rationale": ["Identify the main goal: Count the number of drivers who did not participate in any races in 2009.", "To find this, we need to first identify all drivers from the 'drivers' table.", "Next, we need to find all drivers who participated in races in 2009. This requires joining the 'results' table with the 'races' table on 'raceId' and filtering for the year 2009.", "We will use a subquery to get the list of driverIds who participated in races in 2009.", "Finally, we will count the distinct driverIds from the 'drivers' table that are not in the list of driverIds from the subquery."], "pred_sql": "SELECT COUNT(DISTINCT d.driverId) AS drivers_not_participated FROM drivers d WHERE d.driverId NOT IN (SELECT r.driverId FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2009);", "gold_sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "source_tables": ["results", "races"]}
{"sample_id": 2174, "db_id": "formula_1", "question": "How many drivers did not race in 2009?", "rationale": ["Identify the drivers from the 'drivers' table.", "Determine which drivers participated in races during the year 2009 by checking the 'results' table.", "Find the race IDs for the year 2009 from the 'races' table.", "Use a subquery to get the list of driver IDs that raced in 2009.", "Count the distinct driver IDs from the 'drivers' table that are not in the list of drivers who raced in 2009."], "pred_sql": "SELECT COUNT(DISTINCT driverId) AS drivers_not_raced_in_2009 FROM drivers WHERE driverId NOT IN (SELECT DISTINCT driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009));", "gold_sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "source_tables": ["results", "races"]}
{"sample_id": 2175, "db_id": "formula_1", "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?", "rationale": ["Identify the tables needed: races, results, and drivers.", "We need to get the names and years of races, so we will select 'races.name' and 'races.year'.", "To find races with drivers named Lewis, we need to join the 'races' table with the 'results' table on 'raceId', and then join the 'results' table with the 'drivers' table on 'driverId'.", "Add a WHERE clause to filter drivers with the forename 'Lewis'.", "Construct the SQL query using the selected columns and the necessary joins."], "pred_sql": "SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis';", "gold_sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = 'Lewis'", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2176, "db_id": "formula_1", "question": "What are the names and years of all races that had a driver with the last name Lewis?", "rationale": ["Identify the tables needed: races, results, and drivers.", "We need to retrieve the names and years of races, so we will select 'races.name' and 'races.year'.", "To find races with a driver named Lewis, we need to join the 'races' table with the 'results' table on 'raceId', and then join the 'results' table with the 'drivers' table on 'driverId'.", "Add a WHERE clause to filter results where the driver's surname is 'Lewis'."], "pred_sql": "SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Lewis';", "gold_sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = 'Lewis'", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2177, "db_id": "formula_1", "question": "Find the forename and surname of drivers whose nationality is German?", "rationale": ["Identify the table that contains driver information, which is the 'drivers' table.", "Determine the columns needed for the output, which are 'forename' and 'surname'.", "Specify the condition to filter the results, which is that the 'nationality' must be 'German'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'drivers' table with the given condition."], "pred_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'German';", "gold_sql": "SELECT forename ,  surname FROM drivers WHERE nationality = 'German'", "source_tables": ["drivers"]}
{"sample_id": 2178, "db_id": "formula_1", "question": "What is the first and last name of all the German drivers?", "rationale": ["Identify the table that contains driver information, which is the 'drivers' table.", "Determine the columns needed for the output, which are 'forename' and 'surname'.", "Filter the results to include only German drivers by using the 'nationality' column with the condition 'nationality = 'German''.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'drivers' table with the appropriate WHERE clause."], "pred_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'German';", "gold_sql": "SELECT forename ,  surname FROM drivers WHERE nationality = 'German'", "source_tables": ["drivers"]}
{"sample_id": 2179, "db_id": "formula_1", "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?", "rationale": ["Identify the tables needed: drivers, results, and races.", "We need to find drivers who participated in both the Australian Grand Prix and the Chinese Grand Prix.", "Start by selecting the driverId and forename from the drivers table.", "Join the results table to link drivers to their race results.", "Join the races table to filter results for the Australian Grand Prix.", "Use a subquery to find driverIds from the results of the Chinese Grand Prix.", "Combine the conditions to ensure the driver participated in both races."], "pred_sql": "SELECT d.driverId, d.forename \nFROM drivers d \nJOIN results r1 ON d.driverId = r1.driverId \nJOIN races ra ON r1.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId IN (\n    SELECT r2.driverId \n    FROM results r2 \n    JOIN races rb ON r2.raceId = rb.raceId \n    WHERE rb.name = 'Chinese Grand Prix'\n)", "gold_sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = 'Australian Grand Prix' INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = 'Chinese Grand Prix'", "source_tables": ["races", "drivers", "results"]}
{"sample_id": 2180, "db_id": "formula_1", "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?", "rationale": ["Identify the tables needed: drivers, results, and races.", "We need to select the driverId and forename from the drivers table.", "To find out which drivers participated in the Australian Grand Prix and the Chinese Grand Prix, we need to join the results table with the drivers table on driverId.", "Next, we join the races table with the results table on raceId to filter the races by name.", "Use a WHERE clause to filter the races to only include 'Australian Grand Prix' and 'Chinese Grand Prix'.", "Finally, we group the results by driverId and forename to ensure we get unique entries for each driver."], "pred_sql": "SELECT d.driverId, d.forename \nFROM drivers d \nJOIN results r ON d.driverId = r.driverId \nJOIN races ra ON r.raceId = ra.raceId \nWHERE ra.name IN ('Australian Grand Prix', 'Chinese Grand Prix') \nGROUP BY d.driverId, d.forename;", "gold_sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = 'Australian Grand Prix' INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = 'Chinese Grand Prix'", "source_tables": ["races", "drivers", "results"]}
{"sample_id": 2181, "db_id": "formula_1", "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?", "rationale": ["Identify the relevant tables: drivers, results, and races.", "We need to select the forenames and surnames of drivers, so we will select 'forename' and 'surname' from the drivers table.", "Drivers are linked to races through the results table, so we will join the drivers table with the results table on 'driverId'.", "Next, we will join the results table with the races table on 'raceId' to filter races by name.", "We want drivers who participated in the 'Australian Grand Prix', so we will add a WHERE clause to filter races by this name.", "Additionally, we need to exclude drivers who participated in the 'Chinese Grand Prix'. To do this, we will use a subquery that selects driverIds from results where the race name is 'Chinese Grand Prix'.", "The final SQL query will select the forenames and surnames of drivers who meet the criteria."], "pred_sql": "SELECT d.forename, d.surname \nFROM drivers d \nJOIN results r ON d.driverId = r.driverId \nJOIN races ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT r2.driverId \n    FROM results r2 \n    JOIN races rb ON r2.raceId = rb.raceId \n    WHERE rb.name = 'Chinese Grand Prix'\n);", "gold_sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Chinese Grand Prix'", "source_tables": ["races", "drivers", "results"]}
{"sample_id": 2182, "db_id": "formula_1", "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?", "rationale": ["Identify the tables needed: drivers, results, and races.", "We need to find drivers who participated in the Australian Grand Prix, so we will join the drivers table with the results table and then with the races table to filter by the race name.", "We will use a subquery to find drivers who participated in the Chinese Grand Prix and exclude them from the main query.", "The main query will select the first and last names of drivers who participated in the Australian Grand Prix and are not in the list of drivers from the Chinese Grand Prix."], "pred_sql": "SELECT d.forename, d.surname \nFROM drivers d \nJOIN results r1 ON d.driverId = r1.driverId \nJOIN races ra ON r1.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT d2.driverId \n    FROM drivers d2 \n    JOIN results r2 ON d2.driverId = r2.driverId \n    JOIN races rb ON r2.raceId = rb.raceId \n    WHERE rb.name = 'Chinese Grand Prix'\n)", "gold_sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Chinese Grand Prix'", "source_tables": ["races", "drivers", "results"]}
{"sample_id": 2183, "db_id": "formula_1", "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?", "rationale": ["We need to find distinct drivers who were in position 1 in the standings and also have wins.", "To do this, we will join the 'drivers' table with the 'driverStandings' table on the 'driverId' column.", "We will filter the results where the 'position' in 'driverStandings' is 1 and the 'wins' is greater than 0.", "Finally, we will select the distinct 'forename' of the drivers that meet these criteria."], "pred_sql": "SELECT DISTINCT d.forename FROM drivers d\nJOIN driverStandings ds ON d.driverId = ds.driverId\nWHERE ds.position = 1 AND ds.wins > 0;", "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "source_tables": ["drivers", "driverstandings"]}
{"sample_id": 2184, "db_id": "formula_1", "question": "What are all the different first names of the drivers who are in position as standing and won?", "rationale": ["Identify the relevant tables: drivers and driverStandings.", "We need the first names of drivers, so we will select the 'forename' column from the drivers table.", "To find drivers who are in position 1 (won), we will join the driverStandings table on the driverId.", "We will filter the results where the position in driverStandings is 1.", "Using DISTINCT ensures that we only get unique first names."], "pred_sql": "SELECT DISTINCT d.forename FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.position = 1;", "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "source_tables": ["drivers", "driverstandings"]}
{"sample_id": 2185, "db_id": "formula_1", "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?", "rationale": ["We need to find distinct drivers who won in position 1 as driver standing and had more than 20 points.", "To do this, we will select the 'forename' from the 'drivers' table.", "We will join the 'drivers' table with the 'driverStandings' table on the 'driverId' to get the standings of each driver.", "We will filter the results where the 'position' in 'driverStandings' is 1 (indicating a win) and the 'points' are greater than 20.", "Finally, we will use DISTINCT to ensure that we only get unique forenames."], "pred_sql": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;", "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "source_tables": ["drivers", "driverstandings"]}
{"sample_id": 2186, "db_id": "formula_1", "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?", "rationale": ["Identify the relevant tables: drivers and driverStandings.", "We need the first names of drivers, so we will select the 'forename' column from the drivers table.", "We need to join the drivers table with the driverStandings table on the driverId to access the standings information.", "We are interested in drivers who finished in position 1, so we will filter on 'ds.position = 1'.", "Additionally, we want drivers who have more than 20 points, so we will add a condition 'ds.points > 20'.", "Finally, we will use DISTINCT to ensure we only get unique first names of the drivers."], "pred_sql": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;", "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "source_tables": ["drivers", "driverstandings"]}
{"sample_id": 2187, "db_id": "formula_1", "question": "What are the numbers of constructors for different nationalities?", "rationale": ["Identify the relevant table: The 'constructors' table contains information about constructors and their nationalities.", "Select the columns needed: We need the 'nationality' column to group by and the 'constructorId' to count the number of constructors.", "Use the COUNT() function to count the number of constructors for each nationality.", "Group the results by 'nationality' to get the count for each nationality."], "pred_sql": "SELECT nationality, COUNT(constructorId) AS constructor_count FROM constructors GROUP BY nationality;", "gold_sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "source_tables": ["constructors"]}
{"sample_id": 2188, "db_id": "formula_1", "question": "For each nationality, how many different constructors are there?", "rationale": ["Identify the relevant table: The 'constructors' table contains the nationality and constructorId.", "Select the nationality column and count distinct constructorId: We need to count how many different constructors exist for each nationality.", "Group the results by nationality: This will allow us to get the count of constructors for each nationality."], "pred_sql": "SELECT nationality, COUNT(DISTINCT constructorId) AS constructor_count FROM constructors GROUP BY nationality;", "gold_sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "source_tables": ["constructors"]}
{"sample_id": 2189, "db_id": "formula_1", "question": "What are the numbers of races for each constructor id?", "rationale": ["Identify the relevant table: The 'constructorResults' table contains the relationship between constructors and races.", "Determine the required information: We need the constructor ID and the count of races associated with each constructor.", "Use the COUNT() function to count the number of races for each constructor ID.", "Group the results by constructor ID using GROUP BY to aggregate the counts for each constructor."], "pred_sql": "SELECT constructorId, COUNT(raceId) AS number_of_races FROM constructorResults GROUP BY constructorId;", "gold_sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "source_tables": ["constructorstandings"]}
{"sample_id": 2190, "db_id": "formula_1", "question": "For each constructor id, how many races are there?", "rationale": ["Identify the relevant table: The 'constructorResults' table contains the constructorId and raceId, which are needed to count the number of races for each constructor.", "Use the COUNT() function: This function will count the number of raceId entries for each constructorId.", "Group the results: Use GROUP BY constructorId to aggregate the counts for each constructor.", "Select the constructorId and the count of races: The final output should include the constructorId and the corresponding count of races."], "pred_sql": "SELECT constructorId, COUNT(raceId) AS race_count FROM constructorResults GROUP BY constructorId;", "gold_sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "source_tables": ["constructorstandings"]}
{"sample_id": 2191, "db_id": "formula_1", "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "rationale": ["Identify the relevant tables: 'races' for race information and 'circuits' for circuit information.", "We need to select the names of races, so we will select the 'name' column from the 'races' table.", "To filter races held after 2017, we will use a WHERE clause with 'races.year > 2017'.", "To filter circuits located in Spain, we will add another condition in the WHERE clause: 'circuits.country = 'Spain'.", "Since the 'races' table has a foreign key 'circuitId' that links to the 'circuits' table, we will perform a JOIN between 'races' and 'circuits' on 'races.circuitId = circuits.circuitId'.", "Combine all these elements to form the final SQL query."], "pred_sql": "SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year > 2017 AND circuits.country = 'Spain';", "gold_sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2017", "source_tables": ["races", "circuits"]}
{"sample_id": 2192, "db_id": "formula_1", "question": "What are the names of the races held after 2017 in Spain?", "rationale": ["Identify the relevant tables: 'races' for race information and 'circuits' for circuit location.", "We need to filter races based on the year, specifically those held after 2017.", "We also need to filter the races based on the country, which is Spain in this case.", "To get the names of the races, we will select the 'name' column from the 'races' table.", "Since the 'races' table has a foreign key relationship with the 'circuits' table through 'circuitId', we will join these two tables on 'circuitId'.", "The final SQL query will select the race names from the 'races' table where the year is greater than 2017 and the country from the 'circuits' table is Spain."], "pred_sql": "SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year > 2017 AND circuits.country = 'Spain';", "gold_sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2017", "source_tables": ["races", "circuits"]}
{"sample_id": 2193, "db_id": "formula_1", "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?", "rationale": ["Identify the tables needed: 'races' for race names and 'circuits' for circuit locations.", "We need to filter races that occurred after the year 2000, so we will use the 'year' column from the 'races' table.", "We also need to filter circuits that are located in Spain, so we will use the 'country' column from the 'circuits' table.", "To get the unique names of races, we will use the DISTINCT keyword on the 'name' column from the 'races' table.", "We will join the 'races' table with the 'circuits' table on the 'circuitId' to link races with their respective circuits.", "Construct the SQL query using the SELECT statement with the necessary conditions."], "pred_sql": "SELECT DISTINCT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year > 2000 AND circuits.country = 'Spain';", "gold_sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2000", "source_tables": ["races", "circuits"]}
{"sample_id": 2194, "db_id": "formula_1", "question": "What are the names of all races held after 2000 in Spain?", "rationale": ["Identify the relevant tables: 'races' for race information and 'circuits' for circuit location.", "We need to filter races based on the year, specifically those held after 2000.", "We also need to filter based on the country, which is Spain in this case.", "To get the names of the races, we will select the 'name' column from the 'races' table.", "Since the 'races' table has a foreign key relationship with the 'circuits' table through 'circuitId', we will perform a JOIN between these two tables.", "The final SQL query will select the race names where the year is greater than 2000 and the country is Spain."], "pred_sql": "SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year > 2000 AND circuits.country = 'Spain';", "gold_sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2000", "source_tables": ["races", "circuits"]}
{"sample_id": 2195, "db_id": "formula_1", "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "rationale": ["Identify the relevant table: The 'pitStops' table contains the information about pit stops, including driver IDs and stop durations.", "We need to find drivers with a shorter pit stop duration than some drivers in a specific race (race ID 841).", "To do this, we will use a subquery to find the minimum pit stop duration for race ID 841.", "The main query will select distinct driver IDs and stop numbers from the 'pitStops' table where the duration is less than the minimum duration found in the subquery."], "pred_sql": "SELECT DISTINCT p.driverId, p.stop \nFROM pitStops p \nWHERE p.duration < (\n    SELECT MIN(p2.duration) \n    FROM pitStops p2 \n    WHERE p2.raceId = 841\n)", "gold_sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "source_tables": ["pitstops"]}
{"sample_id": 2196, "db_id": "formula_1", "question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "rationale": ["Identify the relevant table: The 'pitStops' table contains information about pit stops, including driver IDs and stop numbers.", "Determine the specific race: The query specifies race ID 841, so we need to filter the pit stops for this race.", "Find the minimum pit stop duration for each driver in race 841: We can use a subquery to select the driver IDs and their minimum pit stop duration from the 'pitStops' table for race ID 841.", "Join the main query with the subquery: We will join the 'pitStops' table with the subquery on driver ID to compare each driver's pit stop duration with the minimum duration from the subquery.", "Filter the results: We want to select only those drivers whose pit stop duration is shorter than the minimum duration found in the subquery."], "pred_sql": "SELECT p.driverId, p.stop \nFROM pitStops p \nJOIN (SELECT driverId, MIN(duration) AS min_duration \n      FROM pitStops \n      WHERE raceId = 841 \n      GROUP BY driverId) AS ref \nON p.driverId = ref.driverId \nWHERE p.duration < ref.min_duration;", "gold_sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "source_tables": ["pitstops"]}
{"sample_id": 2197, "db_id": "formula_1", "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "rationale": ["Identify the table that contains the driver stop durations, which is the 'pitStops' table.", "We need to find distinct driver IDs, so we will use SELECT DISTINCT on the 'driverId' column from the 'pitStops' table.", "We need to filter the results to only include drivers whose stop duration is longer than some drivers in the race with ID 841.", "To do this, we will use a subquery that selects the maximum stop duration from the 'pitStops' table for race ID 841.", "The main query will compare each driver's stop duration to the maximum duration obtained from the subquery."], "pred_sql": "SELECT DISTINCT p1.driverId\nFROM pitStops p1\nWHERE p1.duration > (\n    SELECT MAX(p2.duration)\n    FROM pitStops p2\n    WHERE p2.raceId = 841\n)", "gold_sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "source_tables": ["pitstops"]}
{"sample_id": 2198, "db_id": "formula_1", "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "rationale": ["Identify the relevant table: The query involves driver pit stop durations, so we will use the 'pitStops' table.", "Determine the condition: We need to find drivers whose stop duration is longer than the duration of the stop in the race with id 841.", "Create a subquery: We will create a subquery to select the duration of the pit stop for the race with id 841.", "Construct the main query: We will select the driverId and duration from the 'pitStops' table where the duration is greater than the result of the subquery."], "pred_sql": "SELECT p.driverId, p.duration \nFROM pitStops p \nWHERE p.duration > (SELECT duration \n                    FROM pitStops \n                    WHERE raceId = 841)", "gold_sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "source_tables": ["pitstops"]}
{"sample_id": 2199, "db_id": "formula_1", "question": "List the forenames of all distinct drivers in alphabetical order?", "rationale": ["Identify the table that contains driver information, which is the 'drivers' table.", "Determine the column that contains the first names of the drivers, which is 'forename'.", "Use the DISTINCT keyword to ensure that only unique forenames are selected.", "Sort the results in alphabetical order using the ORDER BY clause with 'forename' in ascending order."], "pred_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC;", "gold_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "source_tables": ["drivers"]}
{"sample_id": 2200, "db_id": "formula_1", "question": "What are the first names of all the different drivers in alphabetical order?", "rationale": ["Identify the table that contains driver information, which is the 'drivers' table.", "We need to select the first names of the drivers, which corresponds to the 'forename' column in the 'drivers' table.", "To ensure we get only unique first names, we will use the DISTINCT keyword.", "Finally, to present the results in alphabetical order, we will use the ORDER BY clause on the 'forename' column in ascending order."], "pred_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC;", "gold_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "source_tables": ["drivers"]}
{"sample_id": 2201, "db_id": "formula_1", "question": "List the names of all distinct races in reversed  lexicographic order?", "rationale": ["Identify the table that contains race names, which is the 'races' table.", "To get distinct race names, use the DISTINCT keyword in the SELECT statement.", "Order the results in reversed lexicographic order, which can be achieved using ORDER BY with DESC (descending) option.", "Construct the final SQL query to select distinct names from the races table and order them accordingly."], "pred_sql": "SELECT DISTINCT name FROM races ORDER BY name DESC;", "gold_sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "source_tables": ["races"]}
{"sample_id": 2202, "db_id": "formula_1", "question": "What are the different names of all the races in reverse alphabetical order?", "rationale": ["Identify the table that contains race names, which is the 'races' table.", "Select the 'name' column from the 'races' table to get the names of all races.", "Use the ORDER BY clause to sort the results in descending order (reverse alphabetical order)."], "pred_sql": "SELECT name FROM races ORDER BY name DESC;", "gold_sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "source_tables": ["races"]}
{"sample_id": 2203, "db_id": "formula_1", "question": "What are the names of races held between 2009 and 2011?", "rationale": ["Identify the table that contains race information, which is the 'races' table.", "Determine the relevant column that contains the names of the races, which is the 'name' column.", "Specify the condition to filter races held between the years 2009 and 2011 using the 'year' column.", "Construct the SQL query to select the 'name' of races from the 'races' table where the 'year' is between 2009 and 2011."], "pred_sql": "SELECT name FROM races WHERE year BETWEEN 2009 AND 2011;", "gold_sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "source_tables": ["races"]}
{"sample_id": 2204, "db_id": "formula_1", "question": "What are the names of all races held between 2009 and 2011?", "rationale": ["Identify the relevant table: The races table contains information about the races, including their names and years.", "Determine the columns needed: We need the 'name' column for the race names and the 'year' column to filter the races by year.", "Formulate the condition: We want races held between 2009 and 2011, which can be expressed using the BETWEEN operator in SQL.", "Construct the SQL query: The query will select the 'name' from the 'races' table where the 'year' is between 2009 and 2011."], "pred_sql": "SELECT name FROM races WHERE year BETWEEN 2009 AND 2011;", "gold_sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "source_tables": ["races"]}
{"sample_id": 2205, "db_id": "formula_1", "question": "What are the names of races held after 12:00:00 or before 09:00:00?", "rationale": ["Identify the table that contains race information, which is the 'races' table.", "Determine the relevant columns needed for the query: we need the 'name' of the races and the 'time' when they occurred.", "Formulate the condition to filter races based on the time: we want races that occurred after 12:00:00 or before 09:00:00.", "Construct the SQL SELECT statement to retrieve the 'name' of the races that meet the time condition."], "pred_sql": "SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00';", "gold_sql": "SELECT name FROM races WHERE TIME > '12:00:00' OR TIME < '09:00:00'", "source_tables": ["races"]}
{"sample_id": 2206, "db_id": "formula_1", "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "rationale": ["Identify the table that contains race information, which is the 'races' table.", "Determine the relevant column for race names, which is 'name'.", "Identify the column that contains the time of the races, which is 'time'.", "Formulate the condition to filter races that occurred after 12:00:00 or before 09:00:00.", "Construct the SQL SELECT statement to retrieve the names of the races based on the specified conditions."], "pred_sql": "SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00';", "gold_sql": "SELECT name FROM races WHERE TIME > '12:00:00' OR TIME < '09:00:00'", "source_tables": ["races"]}
{"sample_id": 2207, "db_id": "formula_1", "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?", "rationale": ["Identify the relevant tables: drivers, pitStops, and results.", "We need to select the driver's first name, last name, and ID, so we will select 'forename', 'surname', and 'driverId' from the drivers table.", "To find drivers with more than 8 pit stops, we will join the drivers table with the pitStops table on 'driverId' and count the distinct stops for each driver.", "To find drivers who participated in more than 5 race results, we will also join the drivers table with the results table on 'driverId' and count the distinct results for each driver.", "We will use GROUP BY on 'driverId' to aggregate the counts for each driver.", "Finally, we will use HAVING to filter the results to include only those drivers who have more than 8 pit stops or more than 5 race results."], "pred_sql": "SELECT DISTINCT d.driverId, d.forename, d.surname \nFROM drivers d \nLEFT JOIN pitStops p ON d.driverId = p.driverId \nLEFT JOIN results r ON d.driverId = r.driverId \nGROUP BY d.driverId \nHAVING COUNT(DISTINCT p.stop) > 8 OR COUNT(DISTINCT r.resultId) > 5;", "gold_sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "source_tables": ["results", "drivers", "pitstops"]}
{"sample_id": 2208, "db_id": "formula_1", "question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?", "rationale": ["Identify the relevant columns needed: drivers' first names, last names, and ids.", "Determine the conditions: more than 8 stops or more than 5 races.", "To find drivers with more than 8 stops, use the pitStops table, group by driverId, and count the stops, applying a HAVING clause.", "To find drivers who participated in more than 5 races, use the results table, group by driverId, and count the raceId, applying a HAVING clause.", "Use a JOIN to connect the drivers table with the results of the subqueries for both conditions.", "Since we want drivers who meet either condition, use a UNION to combine the results from both subqueries."], "pred_sql": "SELECT d.forename, d.surname, d.driverId \nFROM drivers d \nJOIN ( \n    SELECT p.driverId \n    FROM pitStops p \n    GROUP BY p.driverId \n    HAVING COUNT(p.stop) > 8 \n) AS stops ON d.driverId = stops.driverId \nUNION \nSELECT d.forename, d.surname, d.driverId \nFROM drivers d \nJOIN ( \n    SELECT r.driverId \n    FROM results r \n    GROUP BY r.driverId \n    HAVING COUNT(r.raceId) > 5 \n) AS races ON d.driverId = races.driverId;", "gold_sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "source_tables": ["results", "drivers", "pitstops"]}
{"sample_id": 2209, "db_id": "formula_1", "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?", "rationale": ["We need to find drivers' last names and IDs who had exactly 11 pit stops and participated in more than 5 race results.", "To achieve this, we will join the 'drivers' table with the 'pitStops' table on 'driverId' to count the number of pit stops for each driver.", "We will also join the 'drivers' table with the 'results' table on 'driverId' to count the number of race results for each driver.", "We will group the results by 'driverId' to aggregate the counts of pit stops and race results for each driver.", "We will use the HAVING clause to filter the results to only include drivers who had exactly 11 pit stops and participated in more than 5 race results."], "pred_sql": "SELECT d.surname, d.driverId \nFROM drivers d \nJOIN pitStops p ON d.driverId = p.driverId \nJOIN results r ON d.driverId = r.driverId \nGROUP BY d.driverId \nHAVING COUNT(DISTINCT p.stop) = 11 AND COUNT(DISTINCT r.raceId) > 5;", "gold_sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "source_tables": ["results", "drivers", "pitstops"]}
{"sample_id": 2210, "db_id": "formula_1", "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?", "rationale": ["We need to find drivers who had exactly 11 pit stops and participated in more than 5 races.", "To do this, we will join the 'drivers' table with the 'pitStops' table to count the number of pit stops for each driver.", "We will also join the 'results' table to count the number of races each driver participated in.", "We will group the results by driver ID to aggregate the counts of pit stops and races.", "Finally, we will use the HAVING clause to filter for drivers with exactly 11 pit stops and more than 5 races."], "pred_sql": "SELECT d.surname, d.driverId \nFROM drivers d \nJOIN pitStops p ON d.driverId = p.driverId \nJOIN results r ON d.driverId = r.driverId \nGROUP BY d.driverId \nHAVING COUNT(DISTINCT p.raceId) = 11 AND COUNT(DISTINCT r.raceId) > 5;", "gold_sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "source_tables": ["results", "drivers", "pitstops"]}
{"sample_id": 2211, "db_id": "formula_1", "question": "What is the id and last name of the driver who participated in the most races after 2010?", "rationale": ["Identify the relevant tables: drivers, results, and races are needed to get the driver's information and their race participation.", "Join the drivers table with the results table on driverId to link drivers to their race results.", "Join the results table with the races table on raceId to filter races that occurred after 2010.", "Use a WHERE clause to filter races by year, specifically those after 2010.", "Group the results by driverId to count the number of races each driver participated in.", "Order the results by the count of races in descending order to find the driver with the most participation.", "Limit the results to 1 to get only the top driver."], "pred_sql": "SELECT d.driverId, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year > 2010\nGROUP BY d.driverId\nORDER BY COUNT(r.raceId) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2212, "db_id": "formula_1", "question": "What is the id and last name of the driver who participated in the most races after 2010?", "rationale": ["Identify the relevant tables: drivers, results, and races are needed to get the driver's information and their race participation.", "Join the drivers table with the results table on driverId to link drivers to their race results.", "Join the results table with the races table on raceId to filter races that occurred after 2010.", "Use a WHERE clause to filter races by year, specifically those after 2010.", "Group the results by driverId to count the number of races each driver participated in.", "Order the results by the count of races in descending order to find the driver with the most participation.", "Limit the results to 1 to get only the top driver."], "pred_sql": "SELECT d.driverId, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year > 2010\nGROUP BY d.driverId\nORDER BY COUNT(r.raceId) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2213, "db_id": "formula_1", "question": "What are the names of circuits that belong to UK or Malaysia?", "rationale": ["Identify the table that contains circuit information, which is the 'circuits' table.", "Determine the relevant column that contains the names of the circuits, which is the 'name' column.", "Identify the column that specifies the country of each circuit, which is the 'country' column.", "Formulate a SQL query to select the 'name' of circuits where the 'country' is either 'UK' or 'Malaysia'.", "Use the SQL 'IN' clause to specify multiple values for the 'country' filter."], "pred_sql": "SELECT name FROM circuits WHERE country IN ('UK', 'Malaysia');", "gold_sql": "SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia'", "source_tables": ["circuits"]}
{"sample_id": 2214, "db_id": "formula_1", "question": "What are the names of all the circuits that are in the UK or Malaysia?", "rationale": ["Identify the table that contains circuit information, which is the 'circuits' table.", "Determine the relevant column that contains the names of the circuits, which is the 'name' column.", "Identify the column that specifies the country of each circuit, which is the 'country' column.", "Formulate a SQL query to select the 'name' of circuits where the 'country' is either 'UK' or 'Malaysia'."], "pred_sql": "SELECT name FROM circuits WHERE country IN ('UK', 'Malaysia');", "gold_sql": "SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia'", "source_tables": ["circuits"]}
{"sample_id": 2215, "db_id": "formula_1", "question": "Find the id and location of circuits that belong to France or Belgium?", "rationale": ["Identify the relevant table: The query requires information about circuits, so we will use the 'circuits' table.", "Determine the columns needed: We need the 'circuitId' and 'location' columns from the 'circuits' table.", "Specify the filtering condition: We want circuits that are located in either France or Belgium, which means we will use a WHERE clause with the IN operator to filter by the 'country' column."], "pred_sql": "SELECT circuitId, location FROM circuits WHERE country IN ('France', 'Belgium');", "gold_sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = 'France' OR country = 'Belgium'", "source_tables": ["circuits"]}
{"sample_id": 2216, "db_id": "formula_1", "question": "What are the ids and locations of all circuits in France or Belgium?", "rationale": ["Identify the relevant table: The query requires information about circuits, so we will use the 'circuits' table.", "Determine the required columns: The user wants the 'circuitId' and 'location' of the circuits.", "Filter the results: The user specified circuits located in 'France' or 'Belgium', so we will use a WHERE clause with the IN operator to filter by country."], "pred_sql": "SELECT circuitId, location FROM circuits WHERE country IN ('France', 'Belgium');", "gold_sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = 'France' OR country = 'Belgium'", "source_tables": ["circuits"]}
{"sample_id": 2217, "db_id": "formula_1", "question": "Find the names of Japanese constructors that have once earned more than 5 points?", "rationale": ["Identify the relevant table: We need to find constructors, so we will use the 'constructors' table.", "Join with the 'constructorResults' table: To find out the points earned by constructors, we need to join the 'constructors' table with the 'constructorResults' table using the 'constructorId'.", "Filter for Japanese constructors: We will add a condition to filter constructors based on their nationality, specifically looking for those that are 'Japanese'.", "Set the points condition: We need to find constructors that have earned more than 5 points, so we will add a condition for 'points' in the 'constructorResults' table to be greater than 5.", "Select the distinct names: Finally, we will select the distinct names of the constructors that meet the above criteria."], "pred_sql": "SELECT DISTINCT c.name \nFROM constructors c \nJOIN constructorResults cr ON c.constructorId = cr.constructorId \nWHERE c.nationality = 'Japanese' \nAND cr.points > 5;", "gold_sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5", "source_tables": ["constructorstandings", "constructors"]}
{"sample_id": 2218, "db_id": "formula_1", "question": "What are the names of all the Japanese constructors that have earned more than 5 points?", "rationale": ["Identify the relevant table: We need to query the 'constructors' table to get the names of constructors.", "Filter by nationality: We need to filter the constructors to only include those from Japan, which is indicated by the 'nationality' column.", "Aggregate points: To find constructors that have earned more than 5 points, we need to look at the 'constructorResults' table, which contains the points earned by each constructor in each race.", "Group by constructorId: We will group the results by 'constructorId' to sum the points for each constructor.", "Apply the HAVING clause: We will use the HAVING clause to filter the grouped results to only include those with a total points sum greater than 5.", "Join the results: Finally, we will join the results from the 'constructorResults' back to the 'constructors' table to get the names of the qualifying constructors."], "pred_sql": "SELECT name FROM constructors WHERE nationality = 'Japanese' AND constructorId IN (SELECT constructorId FROM constructorResults GROUP BY constructorId HAVING SUM(points) > 5);", "gold_sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5", "source_tables": ["constructorstandings", "constructors"]}
{"sample_id": 2219, "db_id": "formula_1", "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "rationale": ["Identify the relevant tables: 'races' for race information and 'lapTimes' for lap speed data.", "We need to find the race named 'Monaco Grand Prix' in the year 2008, so we will filter the 'races' table using these criteria.", "Join the 'races' table with the 'lapTimes' table on the 'raceId' to access the fastest lap speed for the specified race.", "Calculate the average of the 'fastestLapSpeed' from the 'lapTimes' table for the filtered race."], "pred_sql": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nWHERE races.name = 'Monaco Grand Prix' AND races.year = 2008;", "gold_sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["races", "results"]}
{"sample_id": 2220, "db_id": "formula_1", "question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "rationale": ["Identify the relevant tables: races, lapTimes, and circuits are needed to get the average fastest lap speed for a specific race.", "We need to filter the races table for the Monaco Grand Prix in the year 2008.", "Join the races table with the lapTimes table on raceId to access the fastest lap speeds.", "Join the races table with the circuits table on circuitId to filter by the circuit name 'Monaco Grand Prix'.", "Use the AVG() function to calculate the average of the fastest lap speeds from the lapTimes table."], "pred_sql": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008;", "gold_sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["races", "results"]}
{"sample_id": 2221, "db_id": "formula_1", "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "rationale": ["Identify the relevant tables: 'races' for race information and 'lapTimes' for lap speed data.", "We need to find the maximum fastest lap speed, so we will use the MAX() function on the 'fastestLapSpeed' column from the 'lapTimes' table.", "To link the races to their lap times, we will join the 'races' table with the 'lapTimes' table on the 'raceId' column.", "We need to filter the results to only include the race named 'Monaco Grand Prix' that took place in the year 2008.", "Construct the SQL query to select the maximum fastest lap speed with the appropriate joins and conditions."], "pred_sql": "SELECT MAX(lapTimes.fastestLapSpeed) AS max_fastest_lap_speed\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nWHERE races.name = 'Monaco Grand Prix' AND races.year = 2008;", "gold_sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["races", "results"]}
{"sample_id": 2222, "db_id": "formula_1", "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "rationale": ["Identify the relevant tables: lapTimes, races, and circuits are needed to find the fastest lap speed for the Monaco Grand Prix in 2008.", "We need to find the maximum fastest lap speed, so we will use the MAX() function on the fastestLapSpeed column from the lapTimes table.", "To filter the results for the Monaco Grand Prix, we will join the races table with the lapTimes table on raceId and the circuits table on circuitId.", "We will add a WHERE clause to filter for the specific circuit name 'Monaco Grand Prix' and the year 2008."], "pred_sql": "SELECT MAX(fastestLapSpeed) AS max_fastest_lap_speed \nFROM lapTimes \nJOIN races ON lapTimes.raceId = races.raceId \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008;", "gold_sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["races", "results"]}
{"sample_id": 2223, "db_id": "formula_1", "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "rationale": ["Identify the relevant tables: 'races' for race information and 'lapTimes' for fastest lap speeds.", "We need to select the race name and the maximum fastest lap speed.", "Join the 'races' table with the 'lapTimes' table on the raceId to correlate races with their lap times.", "Filter the results to include only races held after the year 2004.", "Group the results by race name to get the maximum fastest lap speed for each race.", "Order the final results by year to see the races in chronological order."], "pred_sql": "SELECT r.name AS race_name, MAX(l.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races r \nJOIN lapTimes l ON r.raceId = l.raceId \nWHERE r.year > 2004 \nGROUP BY r.name \nORDER BY r.year;", "gold_sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["races", "results"]}
{"sample_id": 2224, "db_id": "formula_1", "question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "rationale": ["Identify the relevant tables: races, results, and lapTimes.", "We need to select the race name and the maximum fastest lap speed.", "Join the races table with the results table on raceId to get the results for each race.", "Join the results table with the lapTimes table on raceId and driverId to get the fastest lap speeds.", "Filter the results to include only races after the year 2004.", "Group the results by race name to calculate the maximum fastest lap speed for each race.", "Order the final results by year to meet the requirement."], "pred_sql": "SELECT r.name AS race_name, MAX(l.fastestLapSpeed) AS max_fastest_lap_speed\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nJOIN lapTimes l ON res.raceId = l.raceId AND res.driverId = l.driverId\nWHERE r.year > 2004\nGROUP BY r.name\nORDER BY r.year;", "gold_sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["races", "results"]}
{"sample_id": 2225, "db_id": "formula_1", "question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "rationale": ["Identify the relevant tables: 'races' for race information and 'lapTimes' for fastest lap speeds.", "We need to calculate the average fastest lap speed, so we will use the AVG() function on the 'fastestLapSpeed' column from the 'lapTimes' table.", "To link the races with their lap times, we will join the 'races' table with the 'lapTimes' table on the 'raceId' column.", "We need to filter the races to only include those held after the year 2004, so we will add a WHERE clause for 'year > 2004'.", "We want to group the results by race name, so we will use GROUP BY on the 'name' column from the 'races' table.", "Finally, we will order the results by year, which requires including the 'year' column in the ORDER BY clause."], "pred_sql": "SELECT r.name AS race_name, AVG(l.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races r\nJOIN lapTimes l ON r.raceId = l.raceId\nWHERE r.year > 2004\nGROUP BY r.name\nORDER BY r.year;", "gold_sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["races", "results"]}
{"sample_id": 2226, "db_id": "formula_1", "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "rationale": ["Identify the relevant tables: 'races' for race years and 'lapTimes' for fastest lap speeds.", "We need to calculate the average fastest lap speed, so we will use the AVG() function on the 'fastestLapSpeed' column from the 'lapTimes' table.", "To link the races with their lap times, we will join the 'races' table with the 'lapTimes' table on the 'raceId' column.", "We need to filter the results to include only races held after the year 2004, which will be done using a WHERE clause.", "We will group the results by year to get the average for each year, using GROUP BY.", "Finally, we will order the results by year in ascending order using ORDER BY."], "pred_sql": "SELECT r.year, AVG(l.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races r\nJOIN lapTimes l ON r.raceId = l.raceId\nWHERE r.year > 2004\nGROUP BY r.year\nORDER BY r.year;", "gold_sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["races", "results"]}
{"sample_id": 2227, "db_id": "formula_1", "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?", "rationale": ["We need to find drivers who have participated in at least two races.", "To do this, we will join the 'drivers' table with the 'results' table on 'driverId' to get the race results for each driver.", "Next, we will join the 'results' table with the 'races' table on 'raceId' to ensure we are counting races correctly.", "We will group the results by 'driverId' and 'forename' to count the number of races each driver has participated in.", "Finally, we will use the HAVING clause to filter out drivers who have participated in less than two races."], "pred_sql": "SELECT d.driverId, d.forename, COUNT(r.raceId) AS number_of_races\nFROM drivers d\nJOIN results res ON d.driverId = res.driverId\nJOIN races r ON res.raceId = r.raceId\nGROUP BY d.driverId, d.forename\nHAVING COUNT(r.raceId) >= 2;", "gold_sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2228, "db_id": "formula_1", "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "rationale": ["We need to select the driver ID and forename from the drivers table.", "We also need to count the number of races each driver has participated in, which requires joining the results table to the drivers table.", "To get the race count, we will join the races table to the results table as well.", "We will group the results by driver ID and forename to aggregate the race counts.", "Finally, we will filter the results to include only those drivers who have participated in at least 2 races using the HAVING clause."], "pred_sql": "SELECT d.driverId, d.forename, COUNT(r.raceId) AS number_of_races\nFROM drivers d\nJOIN results res ON d.driverId = res.driverId\nJOIN races r ON res.raceId = r.raceId\nGROUP BY d.driverId, d.forename\nHAVING COUNT(r.raceId) >= 2;", "gold_sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2229, "db_id": "formula_1", "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?", "rationale": ["We need to find the driver id and the number of races for each driver.", "The relevant table for this information is the 'results' table, which contains the 'driverId' and 'raceId'.", "To count the number of races each driver has participated in, we will use the COUNT() function on 'raceId'.", "We will group the results by 'driverId' to get the count for each driver.", "Finally, we will use the HAVING clause to filter the results to include only those drivers who have participated in 30 or fewer races."], "pred_sql": "SELECT driverId, COUNT(raceId) AS number_of_races \nFROM results \nGROUP BY driverId \nHAVING COUNT(raceId) <= 30;", "gold_sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2230, "db_id": "formula_1", "question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?", "rationale": ["We need to find drivers who participated in at most 30 races.", "To do this, we will use the 'results' table, which contains the 'driverId' and 'raceId'.", "We will group the results by 'driverId' to count the number of races each driver participated in.", "We will use the COUNT() function to count the number of 'raceId' entries for each 'driverId'.", "Finally, we will use the HAVING clause to filter the results to only include drivers with 30 or fewer races."], "pred_sql": "SELECT driverId, COUNT(raceId) AS race_count \nFROM results \nGROUP BY driverId \nHAVING COUNT(raceId) <= 30;", "gold_sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2231, "db_id": "formula_1", "question": "Find the id and surname of the driver who participated the most number of races?", "rationale": ["Identify the relevant table: The 'results' table contains information about the races that drivers participated in.", "Count the number of races each driver participated in: Use GROUP BY on 'driverId' and COUNT on 'raceId' to get the number of races per driver.", "Order the results by the count of races in descending order to find the driver with the most races: Use ORDER BY COUNT(raceId) DESC.", "Limit the results to 1 to get only the top driver: Use LIMIT 1 in the subquery.", "Select the driver's id and surname from the 'drivers' table: Use a SELECT statement to get 'driverId' and 'surname' where the 'driverId' matches the one from the subquery."], "pred_sql": "SELECT driverId, surname FROM drivers WHERE driverId = (SELECT driverId FROM results GROUP BY driverId ORDER BY COUNT(raceId) DESC LIMIT 1)", "gold_sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2232, "db_id": "formula_1", "question": "What are the ids and last names of all drivers who participated in the most races?", "rationale": ["Identify the relevant table: The 'results' table contains information about the races that drivers participated in.", "Count the number of races each driver participated in: Use GROUP BY on 'driverId' and COUNT on 'raceId' to get the number of races per driver.", "Order the results by the count of races in descending order to find the driver(s) with the most races.", "Limit the results to 1 to get the driver with the most races.", "Select the 'driverId' and 'surname' from the 'drivers' table for the driver(s) who participated in the most races."], "pred_sql": "SELECT driverId, surname FROM drivers WHERE driverId IN (SELECT driverId FROM results GROUP BY driverId ORDER BY COUNT(raceId) DESC LIMIT 1)", "gold_sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"]}
{"sample_id": 2233, "db_id": "machine_repair", "question": "How many technicians are there?", "rationale": ["Identify the table that contains information about technicians, which is the 'technician' table.", "To find out how many technicians there are, we need to count the number of records in the 'technician' table.", "Use the COUNT() function to count the total number of rows in the 'technician' table.", "Construct the SQL query to select the count from the 'technician' table."], "pred_sql": "SELECT COUNT(*) AS technician_count FROM technician;", "gold_sql": "SELECT count(*) FROM technician", "source_tables": ["technician"]}
{"sample_id": 2234, "db_id": "machine_repair", "question": "What is the number of technicians?", "rationale": ["Identify the requirement: We need to find the number of technicians.", "Determine the relevant table: The 'technician' table contains the information about technicians.", "Use the COUNT() function to count the number of entries in the 'technician' table.", "Construct the SQL query to select the count from the 'technician' table."], "pred_sql": "SELECT COUNT(*) AS number_of_technicians FROM technician;", "gold_sql": "SELECT count(*) FROM technician", "source_tables": ["technician"]}
{"sample_id": 2235, "db_id": "machine_repair", "question": "List the names of technicians in ascending order of age.", "rationale": ["Identify the table that contains the information about technicians, which is the 'technician' table.", "Determine the column that holds the names of the technicians, which is 'Name'.", "Since the request is to list the names in ascending order of age, we need to order the results by the 'Age' column.", "Construct the SQL query to select the 'Name' from the 'technician' table and order the results by 'Age' in ascending order."], "pred_sql": "SELECT Name FROM technician ORDER BY Age ASC;", "gold_sql": "SELECT Name FROM technician ORDER BY Age ASC", "source_tables": ["technician"]}
{"sample_id": 2236, "db_id": "machine_repair", "question": "What are the names of the technicians by ascending order of age?", "rationale": ["Identify the table that contains technician information, which is the 'technician' table.", "Determine the column that contains the names of the technicians, which is 'Name'.", "Since the user wants the names ordered by age, we need to sort the results based on the 'Age' column.", "Use the SQL SELECT statement to retrieve the 'Name' column from the 'technician' table.", "Add an ORDER BY clause to sort the results in ascending order based on the 'Age' column."], "pred_sql": "SELECT Name FROM technician ORDER BY Age ASC;", "gold_sql": "SELECT Name FROM technician ORDER BY Age ASC", "source_tables": ["technician"]}
{"sample_id": 2237, "db_id": "machine_repair", "question": "What are the team and starting year of technicians?", "rationale": ["Identify the relevant table: The query is asking for information about technicians, so we will use the 'technician' table.", "Determine the required columns: The user wants to know the 'Team' and 'Starting_Year' of technicians.", "Construct the SQL SELECT statement: We will select the 'Team' and 'Starting_Year' columns from the 'technician' table."], "pred_sql": "SELECT Team, Starting_Year FROM technician;", "gold_sql": "SELECT Team ,  Starting_Year FROM technician", "source_tables": ["technician"]}
{"sample_id": 2238, "db_id": "machine_repair", "question": "What is the team and starting year for each technician?", "rationale": ["Identify the relevant table: The query is asking for information about technicians, so we will use the 'technician' table.", "Determine the required columns: The query specifically asks for the 'Team' and 'Starting_Year' of each technician.", "Construct the SQL SELECT statement: We will select the 'Team' and 'Starting_Year' columns from the 'technician' table."], "pred_sql": "SELECT Team, Starting_Year FROM technician;", "gold_sql": "SELECT Team ,  Starting_Year FROM technician", "source_tables": ["technician"]}
{"sample_id": 2239, "db_id": "machine_repair", "question": "List the name of technicians whose team is not \"NYY\".", "rationale": ["Identify the table that contains technician information, which is the 'technician' table.", "Determine the column that contains the team information, which is the 'Team' column in the 'technician' table.", "Formulate a query to select the 'Name' column from the 'technician' table.", "Add a condition to filter out technicians whose team is 'NYY' using the WHERE clause with the condition 'Team != 'NYY'."], "pred_sql": "SELECT Name FROM technician WHERE Team != 'NYY';", "gold_sql": "SELECT Name FROM technician WHERE Team != 'NYY'", "source_tables": ["technician"]}
{"sample_id": 2240, "db_id": "machine_repair", "question": "What is the name of the technician whose team is not 'NYY'?", "rationale": ["Identify the table that contains technician information, which is the 'technician' table.", "Determine the column that contains the technician's name, which is 'Name'.", "Identify the column that indicates the team of the technician, which is 'Team'.", "Formulate a SQL query to select the 'Name' from the 'technician' table where the 'Team' is not equal to 'NYY'."], "pred_sql": "SELECT Name FROM technician WHERE Team != 'NYY';", "gold_sql": "SELECT Name FROM technician WHERE Team != 'NYY'", "source_tables": ["technician"]}
{"sample_id": 2241, "db_id": "machine_repair", "question": "Show the name of technicians aged either 36 or 37", "rationale": ["Identify the table that contains technician information, which is the 'technician' table.", "Determine the relevant column for technician names, which is 'Name'.", "Identify the column that contains the age of the technicians, which is 'Age'.", "Formulate a query to select the 'Name' of technicians where 'Age' is either 36 or 37 using the IN clause."], "pred_sql": "SELECT Name FROM technician WHERE Age IN ('36', '37');", "gold_sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "source_tables": ["technician"]}
{"sample_id": 2242, "db_id": "machine_repair", "question": "What are the names of the technicians aged either 36 or 37?", "rationale": ["Identify the table that contains technician information, which is the 'technician' table.", "Determine the relevant column for technician names, which is 'Name'.", "Identify the column that contains the age of the technicians, which is 'Age'.", "Formulate a query to select the 'Name' of technicians where 'Age' is either '36' or '37'.", "Use the SQL 'IN' clause to specify the ages of interest."], "pred_sql": "SELECT Name FROM technician WHERE Age IN ('36', '37');", "gold_sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "source_tables": ["technician"]}
{"sample_id": 2243, "db_id": "machine_repair", "question": "What is the starting year of the oldest technicians?", "rationale": ["Identify the relevant table: The query is about technicians, so we will use the 'technician' table.", "Determine the required information: We need the starting year of the oldest technician.", "Use the MIN function: To find the oldest starting year, we can use the MIN function on the 'Starting_Year' column.", "Construct the SQL query: We will select the minimum starting year from the 'technician' table."], "pred_sql": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;", "gold_sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "source_tables": ["technician"]}
{"sample_id": 2244, "db_id": "machine_repair", "question": "What is the starting year for the oldest technician?", "rationale": ["Identify the relevant table: The query is asking about technicians, so we will use the 'technician' table.", "Determine the required information: We need the starting year of the oldest technician.", "To find the oldest technician, we can use the MIN function on the 'Starting_Year' column.", "Construct the SQL query to select the minimum starting year from the 'technician' table."], "pred_sql": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;", "gold_sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "source_tables": ["technician"]}
{"sample_id": 2245, "db_id": "machine_repair", "question": "Show different teams of technicians and the number of technicians in each team.", "rationale": ["Identify the table that contains information about technicians, which is the 'technician' table.", "Determine the relevant columns needed: 'Team' to group by and a count of technicians.", "Use the COUNT() function to count the number of technicians in each team.", "Group the results by the 'Team' column to get the count for each team."], "pred_sql": "SELECT Team, COUNT(*) AS Number_of_Technicians FROM technician GROUP BY Team;", "gold_sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "source_tables": ["technician"]}
{"sample_id": 2246, "db_id": "machine_repair", "question": "For each team, how many technicians are there?", "rationale": ["Identify the relevant table: The 'technician' table contains information about technicians and their teams.", "Determine the required information: We need to count the number of technicians for each team.", "Use the COUNT() function to count technicians: This function will help us get the number of technicians per team.", "Group the results by team: The GROUP BY clause will allow us to aggregate the count of technicians for each distinct team."], "pred_sql": "SELECT Team, COUNT(technician_id) AS technician_count FROM technician GROUP BY Team;", "gold_sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "source_tables": ["technician"]}
{"sample_id": 2247, "db_id": "machine_repair", "question": "Please show the team that has the most number of technicians.", "rationale": ["Identify the relevant table: The 'technician' table contains information about technicians and their teams.", "Count the number of technicians in each team: Use the COUNT() function to count the number of technicians grouped by their team.", "Group the results by team: Use GROUP BY clause to group the results based on the 'Team' column.", "Order the results to find the team with the most technicians: Use ORDER BY clause to sort the results in descending order based on the count of technicians.", "Limit the results to only the top team: Use LIMIT 1 to get only the team with the highest count."], "pred_sql": "SELECT Team, COUNT(*) as technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC LIMIT 1;", "gold_sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["technician"]}
{"sample_id": 2248, "db_id": "machine_repair", "question": "What are the teams with the most technicians?", "rationale": ["Identify the relevant table: The 'technician' table contains information about technicians and their associated teams.", "Determine the required information: We need to count the number of technicians in each team.", "Use the COUNT() function to count technicians grouped by their team.", "Group the results by the 'Team' column to aggregate the counts for each team.", "Order the results in descending order to show the teams with the most technicians at the top."], "pred_sql": "SELECT Team, COUNT(technician_id) AS technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC;", "gold_sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["technician"]}
{"sample_id": 2249, "db_id": "machine_repair", "question": "Show the team that have at least two technicians.", "rationale": ["Identify the table that contains technician information, which is the 'technician' table.", "We need to find teams that have at least two technicians, so we will use the GROUP BY clause to group the results by the 'Team' column.", "To filter the groups to only those with at least two technicians, we will use the HAVING clause with COUNT(technician_id) to count the number of technicians in each team and check if it is greater than or equal to 2."], "pred_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(technician_id) >= 2;", "gold_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "source_tables": ["technician"]}
{"sample_id": 2250, "db_id": "machine_repair", "question": "What is the team with at least 2 technicians?", "rationale": ["Identify the relevant table: The query pertains to the 'technician' table since it contains information about technicians and their teams.", "Determine the required information: We need to find teams that have at least 2 technicians.", "Use the GROUP BY clause: To group the results by the 'Team' column, allowing us to count the number of technicians in each team.", "Use the COUNT function: To count the number of technicians in each team.", "Apply the HAVING clause: To filter the groups to only include those with a count of technicians greater than or equal to 2."], "pred_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(technician_id) >= 2;", "gold_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "source_tables": ["technician"]}
{"sample_id": 2251, "db_id": "machine_repair", "question": "Show names of technicians and series of machines they are assigned to repair.", "rationale": ["Identify the tables involved: technician, repair_assignment, and machine.", "Determine the columns needed: technician's name from the technician table and machine series from the machine table.", "Establish relationships between the tables using JOINs: technician is linked to repair_assignment through technician_id, and repair_assignment is linked to machine through Machine_ID.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT technician.Name, machine.Machine_series \nFROM technician \nJOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nJOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID;", "gold_sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "source_tables": ["machine", "repair_assignment", "technician"]}
{"sample_id": 2252, "db_id": "machine_repair", "question": "What are the names of technicians and the machine series that they repair?", "rationale": ["Identify the relevant tables: technician, repair_assignment, and machine are needed to get the names of technicians and the machine series they repair.", "Select the columns of interest: We need the technician's name from the technician table and the machine series from the machine table.", "Establish relationships between the tables: Use JOINs to connect the technician table to the repair_assignment table (on technician_id) and the repair_assignment table to the machine table (on Machine_ID).", "Construct the SQL SELECT statement to retrieve the desired data."], "pred_sql": "SELECT technician.Name, machine.Machine_series \nFROM technician \nJOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nJOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID;", "gold_sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "source_tables": ["machine", "repair_assignment", "technician"]}
{"sample_id": 2253, "db_id": "machine_repair", "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.", "rationale": ["We need to retrieve the names of technicians, which are stored in the 'technician' table under the 'Name' column.", "To find out which technicians are assigned to which machines, we will join the 'technician' table with the 'repair_assignment' table on the technician's ID.", "Next, we need to access the quality rank of the machines, which is stored in the 'machine' table. Therefore, we will join the 'repair_assignment' table with the 'machine' table on the machine's ID.", "Finally, we will order the results by the 'quality_rank' column in ascending order to meet the requirement of the query."], "pred_sql": "SELECT technician.Name \nFROM technician \nJOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nJOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID \nORDER BY machine.quality_rank ASC;", "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "source_tables": ["machine", "repair_assignment", "technician"]}
{"sample_id": 2254, "db_id": "machine_repair", "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "rationale": ["Identify the relevant tables: technician, repair_assignment, and machine.", "We need to retrieve the names of technicians, so we will select the 'Name' column from the technician table.", "To link technicians with their assigned repairs, we will join the technician table with the repair_assignment table on the technician_id column.", "Next, we need to connect the repair_assignment table with the machine table to access the quality rank of the machines, so we will join on the Machine_ID column.", "Finally, we will order the results by the quality rank of the machines in ascending order."], "pred_sql": "SELECT technician.Name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID ORDER BY machine.quality_rank ASC;", "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "source_tables": ["machine", "repair_assignment", "technician"]}
{"sample_id": 2255, "db_id": "machine_repair", "question": "Show names of technicians who are assigned to repair machines with value point more than 70.", "rationale": ["Identify the tables involved: technician, repair_assignment, and machine.", "Determine the relationship between the tables: technician is linked to repair_assignment through technician_id, and repair_assignment is linked to machine through Machine_ID.", "We need to select the names of technicians, so we will select technician.Name.", "We need to filter the machines based on their value points, specifically those with value points greater than 70.", "Construct the SQL query using JOINs to connect the tables and apply the WHERE clause for filtering."], "pred_sql": "SELECT technician.Name FROM technician\nJOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id\nJOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID\nWHERE machine.value_points > 70;", "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "source_tables": ["machine", "repair_assignment", "technician"]}
{"sample_id": 2256, "db_id": "machine_repair", "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?", "rationale": ["Identify the relevant tables: technician, repair_assignment, and machine.", "We need to find technicians assigned to repairs of machines with value_points greater than 70.", "Join the technician table with the repair_assignment table on technician_id to get the technician details for each repair assignment.", "Join the resulting table with the machine table on Machine_ID to access the value_points of the machines.", "Filter the results to include only those machines where value_points is greater than 70.", "Select the distinct names of the technicians from the filtered results."], "pred_sql": "SELECT DISTINCT technician.Name \nFROM technician \nJOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nJOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID \nWHERE machine.value_points > 70;", "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "source_tables": ["machine", "repair_assignment", "technician"]}
{"sample_id": 2257, "db_id": "machine_repair", "question": "Show names of technicians and the number of machines they are assigned to repair.", "rationale": ["We need to retrieve the names of technicians and the count of machines they are assigned to repair.", "The relevant table for technician information is the 'technician' table, which contains the 'Name' column.", "The 'repair_assignment' table links technicians to machines through the 'technician_id' and 'Machine_ID' columns.", "To count the number of machines assigned to each technician, we will use a LEFT JOIN between the 'technician' and 'repair_assignment' tables on the 'technician_id'.", "We will use the COUNT() function to count the number of machines for each technician.", "Finally, we will group the results by 'technician.technician_id' to ensure we get a count for each technician."], "pred_sql": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count\nFROM technician\nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id\nGROUP BY technician.technician_id;", "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "source_tables": ["repair_assignment", "technician"]}
{"sample_id": 2258, "db_id": "machine_repair", "question": "What are the names of the technicians  and how many machines are they assigned to repair?", "rationale": ["Identify the relevant tables: technician and repair_assignment.", "We need to retrieve the names of technicians, which is in the technician table.", "We also need to count the number of machines assigned to each technician, which can be found in the repair_assignment table.", "To get the count of machines per technician, we will use a LEFT JOIN between technician and repair_assignment on the technician_id.", "We will use COUNT() to count the number of Machine_IDs associated with each technician.", "Finally, we will group the results by technician name to get the count for each technician."], "pred_sql": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count\nFROM technician\nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id\nGROUP BY technician.Name;", "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "source_tables": ["repair_assignment", "technician"]}
{"sample_id": 2259, "db_id": "machine_repair", "question": "List the names of technicians who have not been assigned to repair machines.", "rationale": ["Identify the table that contains technician information, which is the 'technician' table.", "We need to find technicians who have not been assigned to any repairs, so we will look at the 'repair_assignment' table to find all technician_ids that have assignments.", "We will use a subquery to select all technician_ids from the 'repair_assignment' table.", "The main query will select the names of technicians from the 'technician' table where their technician_id is not in the list of technician_ids returned by the subquery."], "pred_sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment);", "gold_sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "source_tables": ["technician", "repair_assignment"]}
{"sample_id": 2260, "db_id": "machine_repair", "question": "What are the names of the technicians that have not been assigned to repair machines?", "rationale": ["Identify the table that contains technician information, which is the 'technician' table.", "We need to find technicians who have not been assigned to any repairs, so we will look for technicians whose IDs are not present in the 'repair_assignment' table.", "The 'repair_assignment' table links technicians to repairs, so we will use a subquery to select all technician IDs from this table.", "The main query will select the names of technicians from the 'technician' table where their IDs are not in the list obtained from the subquery."], "pred_sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment);", "gold_sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "source_tables": ["technician", "repair_assignment"]}
{"sample_id": 2261, "db_id": "machine_repair", "question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".", "rationale": ["Identify the relevant table: The 'technician' table contains the information about technicians, including their starting years and team affiliations.", "Determine the columns needed: We need the 'Starting_Year' column from the 'technician' table.", "Establish the condition: We want to find starting years that are shared by technicians from two specific teams: 'CLE' and 'CWS'.", "Use a self-join on the 'technician' table: This allows us to compare technicians from both teams while checking for matching starting years.", "Apply the WHERE clause to filter technicians by their respective teams: One technician (t1) from team 'CLE' and another technician (t2) from team 'CWS'.", "Select distinct starting years to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT t1.Starting_Year\nFROM technician t1\nJOIN technician t2 ON t1.Starting_Year = t2.Starting_Year\nWHERE t1.Team = 'CLE' AND t2.Team = 'CWS';", "gold_sql": "SELECT Starting_Year FROM technician WHERE Team  =  'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  'CWS'", "source_tables": ["technician"]}
{"sample_id": 2262, "db_id": "machine_repair", "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?", "rationale": ["Identify the relevant table: The query is asking about technicians, so we will use the 'technician' table.", "Determine the columns needed: We need the 'Starting_Year' of the technicians.", "Filter the results: We need to include only those technicians who belong to the teams 'CLE' or 'CWS'.", "Use the DISTINCT keyword: Since we want to find shared starting years, we will use DISTINCT to avoid duplicate years in the results.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT DISTINCT Starting_Year FROM technician WHERE Team IN ('CLE', 'CWS');", "gold_sql": "SELECT Starting_Year FROM technician WHERE Team  =  'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  'CWS'", "source_tables": ["technician"]}
{"sample_id": 2263, "db_id": "entrepreneur", "question": "How many entrepreneurs are there?", "rationale": ["Identify the goal of the query, which is to count the number of entrepreneurs.", "Determine the relevant table, which is 'entrepreneur' since it contains the data about entrepreneurs.", "Use the COUNT() function to count the number of rows in the 'entrepreneur' table.", "Construct the SQL query to select the count and give it an alias 'Entrepreneur_Count'."], "pred_sql": "SELECT COUNT(*) AS Entrepreneur_Count FROM entrepreneur;", "gold_sql": "SELECT count(*) FROM entrepreneur", "source_tables": ["entrepreneur"]}
{"sample_id": 2264, "db_id": "entrepreneur", "question": "Count the number of entrepreneurs.", "rationale": ["Identify the goal: Count the number of entrepreneurs.", "Determine the relevant table: The 'entrepreneur' table contains the data about entrepreneurs.", "Use the COUNT() function to count the number of rows in the 'entrepreneur' table.", "Construct the SQL query to select the count from the 'entrepreneur' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfEntrepreneurs FROM entrepreneur;", "gold_sql": "SELECT count(*) FROM entrepreneur", "source_tables": ["entrepreneur"]}
{"sample_id": 2265, "db_id": "entrepreneur", "question": "List the companies of entrepreneurs in descending order of money requested.", "rationale": ["Identify the table that contains the company information, which is the 'entrepreneur' table.", "Determine the column that holds the company names, which is 'Company'.", "Identify the column that holds the money requested by entrepreneurs, which is 'Money_Requested'.", "To list the companies in descending order of money requested, use the ORDER BY clause with 'Money_Requested' and specify DESC for descending order.", "Construct the SQL query to select the 'Company' from the 'entrepreneur' table and order the results by 'Money_Requested' in descending order."], "pred_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC;", "gold_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "source_tables": ["entrepreneur"]}
{"sample_id": 2266, "db_id": "entrepreneur", "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?", "rationale": ["Identify the table that contains the company information, which is the 'entrepreneur' table.", "Determine the column that contains the company names, which is 'Company'.", "Identify the column that contains the amount of money requested, which is 'Money_Requested'.", "Construct a SQL SELECT statement to retrieve the 'Company' column from the 'entrepreneur' table.", "Add an ORDER BY clause to sort the results by 'Money_Requested' in descending order."], "pred_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC;", "gold_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "source_tables": ["entrepreneur"]}
{"sample_id": 2267, "db_id": "entrepreneur", "question": "List the companies and the investors of entrepreneurs.", "rationale": ["Identify the required information: companies and investors of entrepreneurs.", "Determine the relevant table: the 'entrepreneur' table contains both 'Company' and 'Investor' columns.", "Construct the SQL SELECT statement to retrieve 'Company' and 'Investor' from the 'entrepreneur' table."], "pred_sql": "SELECT Company, Investor FROM entrepreneur;", "gold_sql": "SELECT Company ,  Investor FROM entrepreneur", "source_tables": ["entrepreneur"]}
{"sample_id": 2268, "db_id": "entrepreneur", "question": "What are the companies and investors that correspond to each entrepreneur?", "rationale": ["Identify the relevant table: The query is asking for information about companies and investors related to entrepreneurs, which is found in the 'entrepreneur' table.", "Select the required columns: The query specifically asks for 'companies' and 'investors', which correspond to the 'Company' and 'Investor' columns in the 'entrepreneur' table.", "Construct the SQL query: Using the SELECT statement to retrieve the 'Company' and 'Investor' columns from the 'entrepreneur' table."], "pred_sql": "SELECT Company, Investor FROM entrepreneur;", "gold_sql": "SELECT Company ,  Investor FROM entrepreneur", "source_tables": ["entrepreneur"]}
{"sample_id": 2269, "db_id": "entrepreneur", "question": "What is the average money requested by all entrepreneurs?", "rationale": ["Identify the table that contains the relevant data: the 'entrepreneur' table holds the 'Money_Requested' column.", "To find the average, use the AVG() function which calculates the average of a numeric column.", "Construct the SQL query to select the average of 'Money_Requested' from the 'entrepreneur' table."], "pred_sql": "SELECT AVG(Money_Requested) AS Average_Money_Requested FROM entrepreneur;", "gold_sql": "SELECT avg(Money_Requested) FROM entrepreneur", "source_tables": ["entrepreneur"]}
{"sample_id": 2270, "db_id": "entrepreneur", "question": "Return the average money requested across all entrepreneurs.", "rationale": ["Identify the requirement to calculate the average money requested by entrepreneurs.", "Recognize that the relevant data is stored in the 'entrepreneur' table under the 'Money_Requested' column.", "Use the AVG() function to compute the average of the 'Money_Requested' values.", "Construct the SQL query to select the average from the 'entrepreneur' table."], "pred_sql": "SELECT AVG(Money_Requested) AS Average_Money_Requested FROM entrepreneur;", "gold_sql": "SELECT avg(Money_Requested) FROM entrepreneur", "source_tables": ["entrepreneur"]}
{"sample_id": 2271, "db_id": "entrepreneur", "question": "What are the names of people in ascending order of weight?", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "Determine the column that holds the names, which is 'Name'.", "Specify that we want to order the results by weight, which is in the 'Weight' column.", "Since the request is for ascending order, use 'ASC' in the ORDER BY clause."], "pred_sql": "SELECT Name FROM people ORDER BY Weight ASC;", "gold_sql": "SELECT Name FROM People ORDER BY Weight ASC", "source_tables": ["people"]}
{"sample_id": 2272, "db_id": "entrepreneur", "question": "Return the names of people, ordered by weight ascending.", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "Determine the column that contains the names, which is 'Name'.", "Identify the column that needs to be used for ordering, which is 'Weight'.", "Construct the SQL query to select the 'Name' from the 'people' table and order the results by 'Weight' in ascending order."], "pred_sql": "SELECT Name FROM people ORDER BY Weight ASC;", "gold_sql": "SELECT Name FROM People ORDER BY Weight ASC", "source_tables": ["people"]}
{"sample_id": 2273, "db_id": "entrepreneur", "question": "What are the names of entrepreneurs?", "rationale": ["Identify the relevant table that contains the names of entrepreneurs, which is the 'people' table.", "The 'entrepreneur' table contains a foreign key 'People_ID' that links to the 'people' table.", "To get the names of entrepreneurs, we need to join the 'people' table with the 'entrepreneur' table on the 'People_ID' column.", "Select the 'Name' column from the 'people' table after performing the join."], "pred_sql": "SELECT Name FROM people INNER JOIN entrepreneur ON people.People_ID = entrepreneur.People_ID;", "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2274, "db_id": "entrepreneur", "question": "Return the names of entrepreneurs.", "rationale": ["Identify the required data: We need the names of entrepreneurs.", "Understand the schema: The names are stored in the 'people' table, and we need to link it to the 'entrepreneur' table using the 'People_ID'.", "Formulate the SQL query: We will use a SELECT statement to get the 'Name' from the 'people' table and join it with the 'entrepreneur' table on 'People_ID'."], "pred_sql": "SELECT Name FROM people INNER JOIN entrepreneur ON people.People_ID = entrepreneur.People_ID;", "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2275, "db_id": "entrepreneur", "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?", "rationale": ["Identify the relevant tables: 'entrepreneur' for investor information and 'people' for names.", "We need to select the names of entrepreneurs, which are stored in the 'people' table.", "To get the names of entrepreneurs, we need to join the 'entrepreneur' table with the 'people' table on the 'People_ID' column.", "We need to filter the results to exclude those entrepreneurs whose investor is 'Rachel Elnaugh'.", "Construct the SQL query using SELECT to get the names from the 'people' table, joining with the 'entrepreneur' table, and applying the WHERE clause for the investor condition."], "pred_sql": "SELECT p.Name FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE e.Investor != 'Rachel Elnaugh';", "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != 'Rachel Elnaugh'", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2276, "db_id": "entrepreneur", "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "rationale": ["Identify the relevant tables: 'entrepreneur' and 'people'.", "We need to retrieve the names of entrepreneurs, which are stored in the 'people' table under the 'Name' column.", "To find the entrepreneurs who do not have the investor Rachel Elnaugh, we need to join the 'entrepreneur' table with the 'people' table using the 'People_ID' foreign key.", "The condition to filter out the entrepreneurs with the investor Rachel Elnaugh is specified using the WHERE clause: e.Investor != 'Rachel Elnaugh'.", "Construct the SQL query to select the names from the 'people' table where the corresponding entrepreneur does not have Rachel Elnaugh as an investor."], "pred_sql": "SELECT p.Name FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID WHERE e.Investor != 'Rachel Elnaugh';", "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != 'Rachel Elnaugh'", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2277, "db_id": "entrepreneur", "question": "What is the weight of the shortest person?", "rationale": ["Identify the table that contains the weight information, which is the 'people' table.", "To find the shortest person, we need to determine the minimum height from the 'people' table.", "Use a subquery to find the minimum height: SELECT MIN(Height) FROM people.", "Once we have the minimum height, we can select the weight of the person(s) who have that height.", "The final query combines these steps to select the weight of the shortest person."], "pred_sql": "SELECT Weight FROM people WHERE Height = (SELECT MIN(Height) FROM people);", "gold_sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "source_tables": ["people"]}
{"sample_id": 2278, "db_id": "entrepreneur", "question": "Return the weight of the shortest person.", "rationale": ["Identify the table that contains the weight information, which is the 'people' table.", "To find the shortest person, we need to order the records by height in ascending order.", "We will select the 'Weight' column from the 'people' table.", "To get only the shortest person, we will limit the results to 1 using 'LIMIT 1'."], "pred_sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1;", "gold_sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "source_tables": ["people"]}
{"sample_id": 2279, "db_id": "entrepreneur", "question": "What is the name of the entrepreneur with the greatest weight?", "rationale": ["Identify the relevant tables: 'entrepreneur' and 'people'.", "We need to find the entrepreneur with the greatest weight, which is stored in the 'people' table.", "Join the 'entrepreneur' table with the 'people' table on the 'People_ID' column to access both entrepreneur and person details.", "Select the 'Name' from the 'people' table and the 'Company' from the 'entrepreneur' table.", "Order the results by 'Weight' in descending order to get the heaviest person first.", "Limit the results to 1 to get only the entrepreneur with the greatest weight."], "pred_sql": "SELECT e.Company, p.Name FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY p.Weight DESC LIMIT 1;", "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2280, "db_id": "entrepreneur", "question": "Return the name of the heaviest entrepreneur.", "rationale": ["Identify the relevant tables: 'entrepreneur' and 'people'.", "We need to retrieve the name of the entrepreneur, which is stored in the 'people' table under the 'Name' column.", "To find the heaviest entrepreneur, we need to access the 'Weight' column from the 'people' table.", "We will join the 'entrepreneur' table with the 'people' table using the 'People_ID' foreign key to link the two tables.", "We will order the results by 'Weight' in descending order to get the heaviest person at the top.", "Finally, we will limit the results to 1 to get only the heaviest entrepreneur."], "pred_sql": "SELECT p.Name FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID ORDER BY p.Weight DESC LIMIT 1;", "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2281, "db_id": "entrepreneur", "question": "What is the total money requested by entrepreneurs with height more than 1.85?", "rationale": ["Identify the relevant tables: 'entrepreneur' and 'people'.", "Determine the columns needed: 'Money_Requested' from 'entrepreneur' and 'Height' from 'people'.", "Use an INNER JOIN to combine 'entrepreneur' and 'people' on the common column 'People_ID'.", "Apply a WHERE clause to filter for entrepreneurs whose height is greater than 1.85 meters (185 centimeters).", "Use the SUM() function to calculate the total money requested by the filtered entrepreneurs."], "pred_sql": "SELECT SUM(Money_Requested) AS Total_Money_Requested FROM entrepreneur INNER JOIN people ON entrepreneur.People_ID = people.People_ID WHERE Height > 185;", "gold_sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2282, "db_id": "entrepreneur", "question": "Give the total money requested by entrepreneurs who are taller than 1.85.", "rationale": ["Identify the relevant tables: 'entrepreneur' and 'people'.", "Determine the columns needed: 'Money_Requested' from 'entrepreneur' and 'Height' from 'people'.", "Establish the relationship between the tables using the foreign key 'People_ID'.", "Filter the results to include only those entrepreneurs whose height is greater than 1.85 meters (185 cm).", "Use the SUM function to calculate the total money requested by the filtered entrepreneurs."], "pred_sql": "SELECT SUM(Money_Requested) AS Total_Money_Requested FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID WHERE Height > 185;", "gold_sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2283, "db_id": "entrepreneur", "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?", "rationale": ["Identify the relevant tables: 'entrepreneur' and 'people'.", "Determine the columns needed: 'Date_of_Birth' from the 'people' table.", "Establish the relationship between the tables using the foreign key: 'entrepreneur.People_ID' links to 'people.People_ID'.", "Filter the results based on the investor names provided: 'Simon Woodroffe' and 'Peter Jones'.", "Construct the SQL query to select the 'Date_of_Birth' from the 'people' table, joining it with the 'entrepreneur' table and applying the filter for investors."], "pred_sql": "SELECT p.Date_of_Birth FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID WHERE e.Investor IN ('Simon Woodroffe', 'Peter Jones');", "gold_sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  'Simon Woodroffe' OR T1.Investor  =  'Peter Jones'", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2284, "db_id": "entrepreneur", "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "rationale": ["Identify the relevant tables: 'entrepreneur' and 'people'.", "We need to retrieve the 'Date_of_Birth' from the 'people' table.", "To find the entrepreneurs associated with specific investors, we will join the 'entrepreneur' table with the 'people' table on the 'People_ID'.", "The condition for the query is that the 'Investor' in the 'entrepreneur' table should be either 'Simon Woodroffe' or 'Peter Jones'.", "Construct the SQL query using SELECT to get the 'Date_of_Birth' and apply the JOIN and WHERE clauses accordingly."], "pred_sql": "SELECT p.Date_of_Birth FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID WHERE e.Investor IN ('Simon Woodroffe', 'Peter Jones');", "gold_sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  'Simon Woodroffe' OR T1.Investor  =  'Peter Jones'", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2285, "db_id": "entrepreneur", "question": "What are the weights of entrepreneurs in descending order of money requested?", "rationale": ["Identify the relevant tables: 'entrepreneur' for money requested and 'people' for weights.", "Determine the columns needed: 'Weight' from 'people' and 'Money_Requested' from 'entrepreneur'.", "Establish the relationship between the tables using the foreign key 'People_ID'.", "Construct the SQL query to select 'Weight' from 'people' while joining with 'entrepreneur' on 'People_ID'.", "Add an ORDER BY clause to sort the results by 'Money_Requested' in descending order."], "pred_sql": "SELECT p.Weight FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC;", "gold_sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2286, "db_id": "entrepreneur", "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.", "rationale": ["Identify the tables involved: 'entrepreneur' and 'people'.", "Determine the columns needed: 'Weight' from 'people' and 'Money_Requested' from 'entrepreneur'.", "Establish the relationship between the tables using the foreign key 'People_ID'.", "Formulate the SQL SELECT statement to retrieve the 'Weight' from the 'people' table.", "Use a JOIN clause to combine 'entrepreneur' and 'people' on 'People_ID'.", "Add an ORDER BY clause to sort the results by 'Money_Requested' in descending order."], "pred_sql": "SELECT p.Weight FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC;", "gold_sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2287, "db_id": "entrepreneur", "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?", "rationale": ["Identify the relevant table: The 'entrepreneur' table contains information about investors and entrepreneurs.", "Determine the required fields: We need the 'Investor' field and a count of 'Entrepreneur_ID' to get the number of entrepreneurs for each investor.", "Use the COUNT() function to count the number of entrepreneurs associated with each investor.", "Group the results by 'Investor' to aggregate the counts for each investor."], "pred_sql": "SELECT Investor, COUNT(Entrepreneur_ID) AS Number_of_Entrepreneurs FROM entrepreneur GROUP BY Investor;", "gold_sql": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "source_tables": ["entrepreneur"]}
{"sample_id": 2288, "db_id": "entrepreneur", "question": "How many entrepreneurs correspond to each investor?", "rationale": ["Identify the relevant table: The 'entrepreneur' table contains information about entrepreneurs and their corresponding investors.", "Determine the required information: We need to count the number of entrepreneurs for each investor.", "Use the COUNT() function: This function will help us count the number of Entrepreneur_IDs for each investor.", "Group the results: We will use GROUP BY to group the results by the Investor column, which allows us to count the entrepreneurs for each investor."], "pred_sql": "SELECT Investor, COUNT(Entrepreneur_ID) AS Entrepreneur_Count FROM entrepreneur GROUP BY Investor;", "gold_sql": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "source_tables": ["entrepreneur"]}
{"sample_id": 2289, "db_id": "entrepreneur", "question": "What is the investor that has invested in the most number of entrepreneurs?", "rationale": ["Identify the relevant table: The 'entrepreneur' table contains information about investors and entrepreneurs.", "Determine the required information: We need to find the investor who has invested in the most entrepreneurs.", "Group the results by the 'Investor' column to count the number of entrepreneurs associated with each investor.", "Use the COUNT function to count the number of unique 'Entrepreneur_ID' for each investor.", "Order the results in descending order based on the count to get the investor with the highest number of investments.", "Limit the results to 1 to get only the top investor."], "pred_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Entrepreneur_ID) DESC LIMIT 1;", "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["entrepreneur"]}
{"sample_id": 2290, "db_id": "entrepreneur", "question": "Return the investor who have invested in the greatest number of entrepreneurs.", "rationale": ["Identify the relevant table: The 'entrepreneur' table contains information about investors and entrepreneurs.", "Determine the goal: We want to find the investor who has invested in the greatest number of entrepreneurs.", "Use the COUNT function: We will count the number of unique Entrepreneur_IDs for each investor.", "Group the results: We will group the results by the Investor to aggregate the counts.", "Order the results: We will order the results in descending order based on the count of Entrepreneur_IDs.", "Limit the results: We will limit the output to 1 to get the investor with the highest count."], "pred_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Entrepreneur_ID) DESC LIMIT 1;", "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["entrepreneur"]}
{"sample_id": 2291, "db_id": "entrepreneur", "question": "What are the investors that have invested in at least two entrepreneurs?", "rationale": ["Identify the relevant table: The 'entrepreneur' table contains information about investors and entrepreneurs.", "Determine the required information: We need to find investors who have invested in at least two entrepreneurs.", "Group the results by investor: Use GROUP BY to aggregate results based on the 'Investor' column.", "Count the distinct entrepreneurs for each investor: Use COUNT(DISTINCT Entrepreneur_ID) to count unique entrepreneurs for each investor.", "Filter the results: Use HAVING to filter groups where the count of distinct entrepreneurs is 2 or more."], "pred_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(DISTINCT Entrepreneur_ID) >= 2;", "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "source_tables": ["entrepreneur"]}
{"sample_id": 2292, "db_id": "entrepreneur", "question": "Return the investors who have invested in two or more entrepreneurs.", "rationale": ["Identify the relevant table: The 'entrepreneur' table contains information about investors and entrepreneurs.", "Determine the required information: We need to find investors who have invested in two or more entrepreneurs.", "Use the GROUP BY clause: This will allow us to group the results by the 'Investor' column.", "Count the number of distinct entrepreneurs for each investor: We will use COUNT(DISTINCT Entrepreneur_ID) to count unique entrepreneurs for each investor.", "Filter the results: We will use the HAVING clause to filter out investors who have invested in fewer than two entrepreneurs."], "pred_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(DISTINCT Entrepreneur_ID) >= 2;", "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "source_tables": ["entrepreneur"]}
{"sample_id": 2293, "db_id": "entrepreneur", "question": "List the names of entrepreneurs and their companies in descending order of money requested?", "rationale": ["Identify the tables involved: 'entrepreneur' for company and money requested, and 'people' for names.", "Determine the columns needed: 'Name' from 'people' and 'Company' from 'entrepreneur'.", "Establish the relationship between the tables using the foreign key 'People_ID'.", "Formulate the SELECT statement to retrieve the required columns.", "Add the JOIN clause to combine data from both tables based on the foreign key relationship.", "Include the ORDER BY clause to sort the results by 'Money_Requested' in descending order."], "pred_sql": "SELECT p.Name, e.Company FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC;", "gold_sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2294, "db_id": "entrepreneur", "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?", "rationale": ["Identify the required information: names of entrepreneurs and their corresponding investors.", "Determine the tables involved: 'entrepreneur' for entrepreneurs and 'people' for their names.", "Establish the relationship between the tables using the foreign key 'People_ID'.", "Select the relevant columns: 'Name' from 'people' and 'Investor' from 'entrepreneur'.", "Use a JOIN clause to combine data from both tables based on 'People_ID'.", "Add an ORDER BY clause to sort the results by 'Money_Requested' in descending order."], "pred_sql": "SELECT p.Name AS Entrepreneur_Name, e.Investor \nFROM entrepreneur e \nJOIN people p ON e.People_ID = p.People_ID \nORDER BY e.Money_Requested DESC;", "gold_sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2295, "db_id": "entrepreneur", "question": "List the names of people that are not entrepreneurs.", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "To find people who are not entrepreneurs, we need to exclude those whose People_ID exists in the 'entrepreneur' table.", "We can achieve this by using a subquery that selects People_ID from the 'entrepreneur' table.", "The main query will select the Name from the 'people' table where the People_ID is not in the list returned by the subquery."], "pred_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2296, "db_id": "entrepreneur", "question": "What are the names of people who are not entrepreneurs?", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "We need to find people who are not entrepreneurs, so we will look for those whose 'People_ID' is not present in the 'entrepreneur' table.", "To achieve this, we can use a subquery that selects 'People_ID' from the 'entrepreneur' table.", "The main query will select 'Name' from the 'people' table where 'People_ID' is not in the result of the subquery."], "pred_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur);", "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2297, "db_id": "entrepreneur", "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.", "rationale": ["Identify the table to query: The 'entrepreneur' table contains the relevant information about entrepreneurs and their investors.", "Determine the condition for filtering: We need to find investors associated with entrepreneurs who requested more than 140000 and those who requested less than 120000.", "Use a self-join on the 'entrepreneur' table: This allows us to compare the same column (Investor) across different rows of the same table.", "Select distinct investors: We want to ensure that each investor is listed only once in the result, even if they meet the criteria for multiple entrepreneurs.", "Construct the SQL query: Combine the selected columns, join conditions, and where clauses to form the complete SQL statement."], "pred_sql": "SELECT DISTINCT e1.Investor \nFROM entrepreneur e1 \nJOIN entrepreneur e2 ON e1.Investor = e2.Investor \nWHERE e1.Money_Requested > '140000' \nAND e2.Money_Requested < '120000';", "gold_sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "source_tables": ["entrepreneur"]}
{"sample_id": 2298, "db_id": "entrepreneur", "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "rationale": ["Identify the entrepreneurs who requested more than 140000 and those who requested less than 120000.", "Use a self-join on the entrepreneur table to find investors who appear in both groups.", "Select distinct investors from the results to avoid duplicates."], "pred_sql": "SELECT DISTINCT e1.Investor\nFROM entrepreneur e1\nJOIN entrepreneur e2 ON e1.Investor = e2.Investor\nWHERE e1.Money_Requested > '140000' AND e2.Money_Requested < '120000';", "gold_sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "source_tables": ["entrepreneur"]}
{"sample_id": 2299, "db_id": "entrepreneur", "question": "How many distinct companies are there?", "rationale": ["Identify the table that contains the company information, which is the 'entrepreneur' table.", "To find the number of distinct companies, we need to use the COUNT function along with DISTINCT to count unique entries in the 'Company' column.", "Construct the SQL query to select the count of distinct companies from the 'entrepreneur' table."], "pred_sql": "SELECT COUNT(DISTINCT Company) AS Distinct_Companies FROM entrepreneur;", "gold_sql": "SELECT count(DISTINCT Company) FROM entrepreneur", "source_tables": ["entrepreneur"]}
{"sample_id": 2300, "db_id": "entrepreneur", "question": "Count the number of different companies.", "rationale": ["Identify the goal: Count the number of different companies founded by entrepreneurs.", "Determine the relevant table: The 'entrepreneur' table contains the 'Company' column which we need to count distinct values from.", "Use the COUNT function to count the distinct companies: COUNT(DISTINCT Company) will give the number of unique companies.", "Construct the SQL query: SELECT COUNT(DISTINCT Company) AS NumberOfDifferentCompanies FROM entrepreneur;"], "pred_sql": "SELECT COUNT(DISTINCT Company) AS NumberOfDifferentCompanies FROM entrepreneur;", "gold_sql": "SELECT count(DISTINCT Company) FROM entrepreneur", "source_tables": ["entrepreneur"]}
{"sample_id": 2301, "db_id": "entrepreneur", "question": "Show the company of the tallest entrepreneur.", "rationale": ["Identify the relevant tables: 'entrepreneur' and 'people'.", "Determine the columns needed: 'Company' from 'entrepreneur' and 'Height' from 'people'.", "Join the 'entrepreneur' table with the 'people' table on the 'People_ID' column to access the height of each entrepreneur.", "Sort the results by 'Height' in descending order to get the tallest entrepreneur at the top.", "Limit the results to 1 to get only the tallest entrepreneur's company."], "pred_sql": "SELECT Company FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1;", "gold_sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2302, "db_id": "entrepreneur", "question": "Which company was started by the entrepreneur with the greatest height?", "rationale": ["Identify the relevant tables: 'entrepreneur' and 'people'.", "We need to find the entrepreneur with the greatest height, so we will focus on the 'Height' column in the 'people' table.", "To find the company started by this entrepreneur, we will join the 'entrepreneur' table with the 'people' table on the 'People_ID' column.", "We will use a subquery to find the maximum height from the 'people' table.", "Finally, we will select the 'Company' from the 'entrepreneur' table where the height matches the maximum height found."], "pred_sql": "SELECT e.Company FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people);", "gold_sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["entrepreneur", "people"]}
{"sample_id": 2303, "db_id": "perpetrator", "question": "How many perpetrators are there?", "rationale": ["Identify the goal of the query, which is to count the number of perpetrators.", "Determine the appropriate table to query, which is the 'perpetrator' table.", "Use the COUNT() function to count the total number of entries in the 'perpetrator' table.", "Construct the SQL query to select the count from the 'perpetrator' table."], "pred_sql": "SELECT COUNT(*) AS Total_Perpetrators FROM perpetrator;", "gold_sql": "SELECT count(*) FROM perpetrator", "source_tables": ["perpetrator"]}
{"sample_id": 2304, "db_id": "perpetrator", "question": "List the date of perpetrators in descending order of the number of people killed.", "rationale": ["Identify the table that contains the relevant data: the 'perpetrator' table has the 'Date' and 'Killed' columns.", "We need to select the 'Date' column from the 'perpetrator' table.", "To meet the requirement of listing the dates in descending order based on the number of people killed, we will use the ORDER BY clause on the 'Killed' column in descending order.", "Combine these elements to form the complete SQL query."], "pred_sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC;", "gold_sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "source_tables": ["perpetrator"]}
{"sample_id": 2305, "db_id": "perpetrator", "question": "List the number of people injured by perpetrators in ascending order.", "rationale": ["Identify the relevant table: The 'perpetrator' table contains the 'Injured' column which we need to sum up.", "We need to calculate the total number of people injured by each perpetrator, so we will use the SUM function on the 'Injured' column.", "To group the results by each perpetrator, we will use the GROUP BY clause on 'People_ID'.", "Finally, to list the results in ascending order, we will use the ORDER BY clause on the summed total of injuries."], "pred_sql": "SELECT SUM(Injured) AS Total_Injured FROM perpetrator GROUP BY People_ID ORDER BY Total_Injured ASC;", "gold_sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC", "source_tables": ["perpetrator"]}
{"sample_id": 2306, "db_id": "perpetrator", "question": "What is the average number of people injured by all perpetrators?", "rationale": ["Identify the relevant table: The 'perpetrator' table contains the 'Injured' column which is needed to calculate the average number of people injured.", "Determine the operation needed: We need to calculate the average, which can be done using the AVG() function in SQL.", "Ensure the data type is correct: Since 'Injured' is stored as text, we need to cast it to an integer to perform the average calculation.", "Construct the SQL query: The query will select the average of the 'Injured' column from the 'perpetrator' table."], "pred_sql": "SELECT AVG(CAST(Injured AS INTEGER)) AS Average_Injured FROM perpetrator;", "gold_sql": "SELECT avg(Injured) FROM perpetrator", "source_tables": ["perpetrator"]}
{"sample_id": 2307, "db_id": "perpetrator", "question": "What is the location of the perpetrator with the largest kills.", "rationale": ["Identify the relevant table: The 'perpetrator' table contains the 'Location' and 'Killed' columns.", "Determine the requirement: We need to find the location of the perpetrator with the largest number of kills.", "Use the ORDER BY clause: To find the perpetrator with the largest kills, we will order the results by the 'Killed' column in descending order.", "Limit the results: Since we only need the location of the perpetrator with the largest kills, we will use LIMIT 1 to get the top result."], "pred_sql": "SELECT Location FROM perpetrator ORDER BY Killed DESC LIMIT 1;", "gold_sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1", "source_tables": ["perpetrator"]}
{"sample_id": 2308, "db_id": "perpetrator", "question": "What are the names of people in ascending order of height?", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "Determine the column that holds the names, which is 'Name'.", "Since the request is to order the results by height, identify the 'Height' column in the 'people' table.", "Construct the SQL query to select the 'Name' column from the 'people' table and order the results by 'Height' in ascending order."], "pred_sql": "SELECT Name FROM people ORDER BY Height ASC;", "gold_sql": "SELECT Name FROM People ORDER BY Height ASC", "source_tables": ["people"]}
{"sample_id": 2309, "db_id": "perpetrator", "question": "What are the names of perpetrators?", "rationale": ["Identify the information needed: We need the names of perpetrators.", "Understand the relationship between tables: The 'perpetrator' table has a foreign key 'People_ID' that links to the 'people' table.", "Select the relevant columns: We need to select the 'Name' column from the 'people' table.", "Use a JOIN clause: We will join the 'perpetrator' table with the 'people' table on the 'People_ID' column to get the names of the perpetrators.", "Use DISTINCT to avoid duplicate names: Since a perpetrator may be involved in multiple incidents, we use DISTINCT to get unique names."], "pred_sql": "SELECT DISTINCT people.Name FROM perpetrator JOIN people ON perpetrator.People_ID = people.People_ID;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["perpetrator", "people"]}
{"sample_id": 2310, "db_id": "perpetrator", "question": "What are the names of perpetrators whose country is not \"China\"?", "rationale": ["Identify the relevant tables: 'perpetrator' and 'people'.", "We need to retrieve names of perpetrators, which are stored in the 'people' table under the 'Name' column.", "To find the perpetrators, we need to join the 'perpetrator' table with the 'people' table using the foreign key 'People_ID'.", "The condition specifies that the country should not be 'China', so we will use a WHERE clause to filter out those records.", "We will use DISTINCT to ensure that we get unique names in case there are multiple records for the same perpetrator."], "pred_sql": "SELECT DISTINCT people.Name FROM perpetrator JOIN people ON perpetrator.People_ID = people.People_ID WHERE perpetrator.Country != 'China';", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != 'China'", "source_tables": ["perpetrator", "people"]}
{"sample_id": 2311, "db_id": "perpetrator", "question": "What is the name of the perpetrator with the biggest weight.", "rationale": ["Identify the relevant tables: 'people' for names and 'perpetrator' for linking to the perpetrator's incidents.", "We need to find the perpetrator with the biggest weight, which is stored in the 'people' table under the 'Weight' column.", "To get the name of the perpetrator, we will join the 'people' table with the 'perpetrator' table on the 'People_ID' column.", "We will order the results by 'Weight' in descending order to get the heaviest perpetrator at the top.", "Finally, we will limit the results to 1 to get only the name of the perpetrator with the biggest weight."], "pred_sql": "SELECT p.Name FROM people p JOIN perpetrator pr ON p.People_ID = pr.People_ID ORDER BY p.Weight DESC LIMIT 1;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1", "source_tables": ["perpetrator", "people"]}
{"sample_id": 2312, "db_id": "perpetrator", "question": "What is the total kills of the perpetrators with height more than 1.84.", "rationale": ["Identify the relevant tables: 'perpetrator' and 'people'.", "We need to sum the 'Killed' column from the 'perpetrator' table.", "To filter the perpetrators based on height, we need to join the 'people' table using the 'People_ID' foreign key.", "The condition specifies that we want perpetrators with a height greater than 1.84 meters, which is equivalent to 184 centimeters.", "Construct the SQL query to select the sum of 'Killed' where the height condition is met."], "pred_sql": "SELECT SUM(Killed) AS Total_Kills FROM perpetrator JOIN people ON perpetrator.People_ID = people.People_ID WHERE Height > 184;", "gold_sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84", "source_tables": ["perpetrator", "people"]}
{"sample_id": 2313, "db_id": "perpetrator", "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?", "rationale": ["Identify the relevant tables: 'perpetrator' and 'people'.", "We need to retrieve names of perpetrators, which are stored in the 'people' table under the 'Name' column.", "To find the perpetrators in specific countries, we will filter the 'perpetrator' table by the 'Country' column.", "The countries of interest are 'China' and 'Japan', so we will use the IN clause to filter for these two countries.", "Since the 'People_ID' in the 'perpetrator' table links to the 'People_ID' in the 'people' table, we will perform a JOIN operation on these two tables.", "We will select distinct names to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT p.Name FROM perpetrator pr JOIN people p ON pr.People_ID = p.People_ID WHERE pr.Country IN ('China', 'Japan');", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  'China' OR T2.Country  =  'Japan'", "source_tables": ["perpetrator", "people"]}
{"sample_id": 2314, "db_id": "perpetrator", "question": "What are the heights of perpetrators in descending order of the number of people they injured?", "rationale": ["Identify the relevant tables: 'perpetrator' and 'people'.", "We need to retrieve the 'Height' from the 'people' table.", "To link the perpetrator to their height, we will join the 'perpetrator' table with the 'people' table on the 'People_ID' column.", "We need to order the results by the number of people injured, which is in the 'perpetrator' table under the 'Injured' column, in descending order.", "Construct the SQL query to select the height and order by the number of injured."], "pred_sql": "SELECT p.Height FROM perpetrator pr JOIN people p ON pr.People_ID = p.People_ID ORDER BY pr.Injured DESC;", "gold_sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC", "source_tables": ["perpetrator", "people"]}
{"sample_id": 2315, "db_id": "perpetrator", "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "rationale": ["Identify the relevant table: The 'perpetrator' table contains information about the perpetrators and their associated countries.", "Determine the required columns: We need the 'Country' column to show the countries and a count of 'Perpetrator_ID' to get the number of perpetrators in each country.", "Use the COUNT() function: This function will count the number of unique 'Perpetrator_ID's for each country.", "Group the results: Use GROUP BY to aggregate the results by 'Country' so that we can get the count of perpetrators for each country."], "pred_sql": "SELECT Country, COUNT(Perpetrator_ID) AS Number_of_Perpetrators FROM perpetrator GROUP BY Country;", "gold_sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country", "source_tables": ["perpetrator"]}
{"sample_id": 2316, "db_id": "perpetrator", "question": "What is the country that has the most perpetrators?", "rationale": ["Identify the relevant table: The 'perpetrator' table contains the 'Country' column and is where we can find the information about perpetrators.", "Count the number of perpetrators for each country: We will use the COUNT() function to count the number of entries (perpetrators) for each country.", "Group the results by country: We will use the GROUP BY clause to aggregate the counts by the 'Country' column.", "Order the results to find the country with the most perpetrators: We will use the ORDER BY clause to sort the counts in descending order.", "Limit the results to the top entry: We will use the LIMIT clause to return only the country with the highest count of perpetrators."], "pred_sql": "SELECT Country, COUNT(*) AS Perpetrator_Count FROM perpetrator GROUP BY Country ORDER BY Perpetrator_Count DESC LIMIT 1;", "gold_sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["perpetrator"]}
{"sample_id": 2317, "db_id": "perpetrator", "question": "What are the countries that have at least two perpetrators?", "rationale": ["Identify the relevant table: The query requires information about countries with perpetrators, so we will use the 'perpetrator' table.", "We need to group the results by country to count the number of perpetrators in each country.", "Use the COUNT function to count the number of unique 'Perpetrator_ID' entries for each country.", "Apply the HAVING clause to filter the groups, ensuring we only include countries with two or more perpetrators."], "pred_sql": "SELECT Country FROM perpetrator GROUP BY Country HAVING COUNT(Perpetrator_ID) >= 2;", "gold_sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2", "source_tables": ["perpetrator"]}
{"sample_id": 2318, "db_id": "perpetrator", "question": "List the names of perpetrators in descending order of the year.", "rationale": ["Identify the tables involved: 'perpetrator' and 'people'.", "Determine the columns needed: we need the 'Name' from the 'people' table.", "Establish the relationship between the tables: 'perpetrator.People_ID' links to 'people.People_ID'.", "Specify the sorting requirement: we need to order the results by 'Year' in descending order.", "Construct the SQL query using SELECT to get the names, JOIN to combine the tables, and ORDER BY to sort the results."], "pred_sql": "SELECT people.Name FROM perpetrator JOIN people ON perpetrator.People_ID = people.People_ID ORDER BY perpetrator.Year DESC;", "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC", "source_tables": ["perpetrator", "people"]}
{"sample_id": 2319, "db_id": "perpetrator", "question": "List the names of people that are not perpetrators.", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "We need to find names of people who are not in the 'perpetrator' table.", "To do this, we can use a subquery that selects 'People_ID' from the 'perpetrator' table.", "We will use the NOT IN clause to filter out those 'People_ID' from the 'people' table.", "Finally, we select the 'Name' column from the 'people' table where the 'People_ID' is not in the list of 'People_ID' from the 'perpetrator' table."], "pred_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator);", "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)", "source_tables": ["perpetrator", "people"]}
{"sample_id": 2320, "db_id": "perpetrator", "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.", "rationale": ["Identify the requirement to find countries with two types of perpetrators: those with injuries greater than 50 and those with injuries less than 20.", "Use a subquery to first find the countries where there are perpetrators with injuries less than 20.", "In the main query, select distinct countries from the perpetrator table where the number of injured is greater than 50 and the country is in the result of the subquery."], "pred_sql": "SELECT DISTINCT p.Country\nFROM perpetrator p\nWHERE p.Injured > 50\nAND p.Country IN (\n    SELECT p2.Country\n    FROM perpetrator p2\n    WHERE p2.Injured < 20\n)", "gold_sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20", "source_tables": ["perpetrator"]}
{"sample_id": 2321, "db_id": "perpetrator", "question": "How many distinct locations of perpetrators are there?", "rationale": ["Identify the requirement to count distinct locations from the perpetrator table.", "Use the COUNT function to count the number of unique entries in the Location column.", "Utilize the DISTINCT keyword to ensure only unique locations are counted.", "Formulate the SQL query to select the count of distinct locations from the perpetrator table."], "pred_sql": "SELECT COUNT(DISTINCT Location) AS distinct_locations FROM perpetrator;", "gold_sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator", "source_tables": ["perpetrator"]}
{"sample_id": 2322, "db_id": "perpetrator", "question": "Show the date of the tallest perpetrator.", "rationale": ["Identify the relevant tables: 'perpetrator' for the incident date and 'people' for the height of the perpetrator.", "We need to join the 'perpetrator' table with the 'people' table on the 'People_ID' column to access both the date and height.", "To find the tallest perpetrator, we will order the results by height in descending order.", "We only need the date of the tallest perpetrator, so we will select the 'Date' column from the 'perpetrator' table.", "Since we only want the tallest perpetrator, we will limit the results to 1."], "pred_sql": "SELECT p.Date FROM perpetrator p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY pe.Height DESC LIMIT 1;", "gold_sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "source_tables": ["perpetrator", "people"]}
{"sample_id": 2323, "db_id": "perpetrator", "question": "In which year did the most recent crime happen?", "rationale": ["Identify the relevant table: The 'perpetrator' table contains the 'Date' and 'Year' columns which are necessary for this query.", "Determine the requirement: We need to find the most recent crime, which means we need to sort the incidents by date.", "Use the ORDER BY clause: We will order the results by the 'Date' column in descending order to get the most recent date first.", "Limit the results: Since we only need the most recent year, we will use LIMIT 1 to get just one result.", "Select the Year: Finally, we will select the 'Year' column from the ordered results."], "pred_sql": "SELECT Year FROM perpetrator ORDER BY Date DESC LIMIT 1;", "gold_sql": "SELECT max(YEAR) FROM perpetrator;", "source_tables": ["perpetrator"]}
{"sample_id": 2324, "db_id": "csu_1", "question": "Report the name of all campuses in Los Angeles county.", "rationale": ["Identify the table that contains the campus names, which is the 'Campuses' table.", "Determine the column that holds the campus names, which is 'Campus'.", "Identify the column that specifies the county, which is 'County'.", "Formulate the SQL query to select the 'Campus' column from the 'Campuses' table where the 'County' is 'Los Angeles'."], "pred_sql": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles';", "gold_sql": "SELECT campus FROM campuses WHERE county  =  'Los Angeles'", "source_tables": ["campuses"]}
{"sample_id": 2325, "db_id": "csu_1", "question": "What campuses are located in the county of Los Angeles?", "rationale": ["Identify the relevant table: The query is asking about campuses, which corresponds to the 'Campuses' table.", "Determine the condition: The query specifies a location condition, specifically the county of 'Los Angeles'.", "Construct the SQL query: Use a SELECT statement to retrieve all columns from the 'Campuses' table where the 'County' column matches 'Los Angeles'."], "pred_sql": "SELECT * FROM Campuses WHERE County = 'Los Angeles';", "gold_sql": "SELECT campus FROM campuses WHERE county  =  'Los Angeles'", "source_tables": ["campuses"]}
{"sample_id": 2326, "db_id": "csu_1", "question": "What are the names of all campuses located at Chico?", "rationale": ["Identify the relevant table: The query is asking for campus names, which are found in the 'Campuses' table.", "Determine the condition: The query specifies campuses located at 'Chico', which means we need to filter by the 'Location' column.", "Construct the SQL query: We will select the 'Campus' column from the 'Campuses' table where the 'Location' matches 'Chico'."], "pred_sql": "SELECT Campus FROM Campuses WHERE Location = 'Chico';", "gold_sql": "SELECT campus FROM campuses WHERE LOCATION  =  'Chico'", "source_tables": ["campuses"]}
{"sample_id": 2327, "db_id": "csu_1", "question": "What campuses are located in Chico?", "rationale": ["Identify the relevant table: Campuses.", "Determine the column that contains the location information: Location.", "Formulate the SQL query to select all columns from the Campuses table where the Location is 'Chico'."], "pred_sql": "SELECT * FROM Campuses WHERE Location = 'Chico';", "gold_sql": "SELECT campus FROM campuses WHERE LOCATION  =  'Chico'", "source_tables": ["campuses"]}
{"sample_id": 2328, "db_id": "csu_1", "question": "Find all the campuses opened in 1958.", "rationale": ["Identify the table that contains information about campuses, which is the 'Campuses' table.", "Determine the relevant column that indicates the year a campus was opened, which is the 'Year' column.", "Formulate a SQL query to select all columns from the 'Campuses' table where the 'Year' is equal to '1958'."], "pred_sql": "SELECT * FROM Campuses WHERE Year = '1958';", "gold_sql": "SELECT campus FROM campuses WHERE YEAR  =  1958", "source_tables": ["campuses"]}
{"sample_id": 2329, "db_id": "csu_1", "question": "What are the campuses that opened in 1958?", "rationale": ["Identify the relevant table: Campuses.", "Determine the column that indicates the year the campus opened: Year.", "Formulate the SQL query to select the Campus names where the Year is '1958'."], "pred_sql": "SELECT Campus FROM Campuses WHERE Year = '1958';", "gold_sql": "SELECT campus FROM campuses WHERE YEAR  =  1958", "source_tables": ["campuses"]}
{"sample_id": 2330, "db_id": "csu_1", "question": "Find the name of the campuses opened before 1800.", "rationale": ["Identify the relevant table: The 'Campuses' table contains information about the campuses, including their names and the year they were opened.", "Determine the condition: We need to find campuses that were opened before the year 1800, which means we will filter the records where the 'Year' column is less than '1800'.", "Construct the SQL query: We will select the 'Campus' column from the 'Campuses' table where the 'Year' is less than '1800'."], "pred_sql": "SELECT Campus FROM Campuses WHERE Year < '1800';", "gold_sql": "SELECT campus FROM campuses WHERE YEAR  <  1800", "source_tables": ["campuses"]}
{"sample_id": 2331, "db_id": "csu_1", "question": "What campuses opened before 1800?", "rationale": ["Identify the relevant table: Campuses, as it contains information about the campuses and their opening years.", "Determine the column that indicates the year a campus opened: Year.", "Formulate the condition to filter campuses that opened before 1800: Year < '1800'.", "Construct the SQL SELECT statement to retrieve the Campus names that meet the condition."], "pred_sql": "SELECT Campus FROM Campuses WHERE Year < '1800';", "gold_sql": "SELECT campus FROM campuses WHERE YEAR  <  1800", "source_tables": ["campuses"]}
{"sample_id": 2332, "db_id": "csu_1", "question": "Which campus was opened between 1935 and 1939?", "rationale": ["Identify the relevant table: Campuses, as it contains information about the campuses including their opening year.", "Determine the column that indicates the year the campus was opened, which is 'Year'.", "Formulate a SQL query to select the 'Campus' names from the Campuses table where the 'Year' is between 1935 and 1939."], "pred_sql": "SELECT Campus FROM Campuses WHERE Year BETWEEN '1935' AND '1939';", "gold_sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "source_tables": ["campuses"]}
{"sample_id": 2333, "db_id": "csu_1", "question": "What campuses opened between 1935 and 1939?", "rationale": ["Identify the relevant table: Campuses, as it contains information about the campuses.", "Determine the columns needed: We need the 'Campus' column to list the names of the campuses.", "Filter the records based on the opening year: Use the 'Year' column to find campuses that opened between 1935 and 1939.", "Construct the SQL query using a SELECT statement with a WHERE clause to filter the years."], "pred_sql": "SELECT Campus FROM Campuses WHERE Year BETWEEN '1935' AND '1939';", "gold_sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "source_tables": ["campuses"]}
{"sample_id": 2334, "db_id": "csu_1", "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.", "rationale": ["Identify the table that contains the campus names, which is the 'Campuses' table.", "Determine the relevant column for campus names, which is 'Campus'.", "Identify the column that contains the location information, which is 'Location'.", "Formulate the WHERE clause to filter campuses based on the specified locations: 'Northridge, Los Angeles' and 'San Francisco, San Francisco'.", "Combine the conditions using the OR operator to ensure campuses from either location are included."], "pred_sql": "SELECT Campus FROM Campuses WHERE (Location = 'Northridge, Los Angeles' OR Location = 'San Francisco, San Francisco')", "gold_sql": "SELECT campus FROM campuses WHERE LOCATION  =  'Northridge' AND county  =  'Los Angeles' UNION SELECT campus FROM campuses WHERE LOCATION  =  'San Francisco' AND county  =  'San Francisco'", "source_tables": ["campuses"]}
{"sample_id": 2335, "db_id": "csu_1", "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?", "rationale": ["Identify the table that contains campus location information, which is the 'Campuses' table.", "Determine the relevant column for location, which is 'Location'.", "Formulate a query to select all columns from the 'Campuses' table where the 'Location' matches either 'Northridge, Los Angeles' or 'San Francisco, San Francisco'.", "Use the SQL 'IN' clause to specify multiple values for the 'Location' column."], "pred_sql": "SELECT * FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco')", "gold_sql": "SELECT campus FROM campuses WHERE LOCATION  =  'Northridge' AND county  =  'Los Angeles' UNION SELECT campus FROM campuses WHERE LOCATION  =  'San Francisco' AND county  =  'San Francisco'", "source_tables": ["campuses"]}
{"sample_id": 2336, "db_id": "csu_1", "question": "What is the campus fee of \"San Jose State University\" in year 1996?", "rationale": ["Identify the relevant tables: 'csu_fees' for campus fees and 'Campuses' for campus names.", "We need to join the 'csu_fees' table with the 'Campuses' table on the campus identifier.", "Filter the results to find the specific campus 'San Jose State University'.", "Also, filter the results for the year 1996 to get the correct fee for that year.", "Select the 'CampusFee' from the 'csu_fees' table as the final output."], "pred_sql": "SELECT csu_fees.CampusFee FROM csu_fees JOIN Campuses ON csu_fees.Campus = Campuses.Id WHERE Campuses.Campus = 'San Jose State University' AND csu_fees.Year = 1996;", "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  'San Jose State University' AND T2.year  =  1996", "source_tables": ["csu_fees", "campuses"]}
{"sample_id": 2337, "db_id": "csu_1", "question": "What is the campus fee for San Jose State University in 1996?", "rationale": ["Identify the relevant table for campus fees, which is 'csu_fees'.", "Determine the specific campus of interest, which is 'San Jose State University'.", "Find the unique identifier for 'San Jose State University' in the 'Campuses' table by using a subquery to select the 'Id' where 'Campus' matches 'San Jose State University'.", "Specify the year of interest, which is 1996.", "Construct the SQL query to select the 'CampusFee' from 'csu_fees' where the 'Campus' matches the identified 'Id' and the 'Year' is 1996."], "pred_sql": "SELECT CampusFee FROM csu_fees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = 1996;", "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  'San Jose State University' AND T2.year  =  1996", "source_tables": ["csu_fees", "campuses"]}
{"sample_id": 2338, "db_id": "csu_1", "question": "What is the campus fee of \"San Francisco State University\" in year 1996?", "rationale": ["Identify the relevant tables: 'csu_fees' for campus fees and 'Campuses' for campus names.", "We need to join the 'csu_fees' table with the 'Campuses' table on the campus identifier to link the fee data with the campus name.", "Filter the results to find the specific campus 'San Francisco State University'.", "Also, filter the results to only include the year 1996 for the campus fee.", "Select the 'CampusFee' from the 'csu_fees' table as the final output."], "pred_sql": "SELECT csu_fees.CampusFee FROM csu_fees JOIN Campuses ON csu_fees.Campus = Campuses.Id WHERE Campuses.Campus = 'San Francisco State University' AND csu_fees.Year = 1996;", "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  'San Francisco State University' AND T2.year  =  1996", "source_tables": ["csu_fees", "campuses"]}
{"sample_id": 2339, "db_id": "csu_1", "question": "What is the campus fee for San Francisco State University in 1996?", "rationale": ["Identify the campus fee data from the 'csu_fees' table.", "To find the fee for a specific campus, we need to match the campus name 'San Francisco State University' with its corresponding Id in the 'Campuses' table.", "Use a subquery to select the Id of 'San Francisco State University' from the 'Campuses' table.", "Filter the results by the year 1996 in the 'csu_fees' table.", "Construct the final SQL query to select the CampusFee based on the identified campus Id and the specified year."], "pred_sql": "SELECT CampusFee FROM csu_fees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 1996;", "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  'San Francisco State University' AND T2.year  =  1996", "source_tables": ["csu_fees", "campuses"]}
{"sample_id": 2340, "db_id": "csu_1", "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "rationale": ["Identify the tables involved: 'Campuses' for university information and 'csu_fees' for campus fees.", "We need to count the distinct universities (campuses) whose fees are greater than the average fee.", "Join the 'Campuses' table with the 'csu_fees' table on the campus identifier.", "Use a subquery to calculate the average campus fee from the 'csu_fees' table.", "Filter the results to include only those campuses where the campus fee is greater than the calculated average.", "Finally, count the distinct campuses that meet the criteria."], "pred_sql": "SELECT COUNT(DISTINCT c.Id) AS UniversityCount\nFROM Campuses c\nJOIN csu_fees f ON c.Id = f.Campus\nWHERE f.CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);", "gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "source_tables": ["csu_fees"]}
{"sample_id": 2341, "db_id": "csu_1", "question": "How many universities have a campus fee higher than average?", "rationale": ["Identify the relevant tables: 'Campuses' for university information and 'csu_fees' for campus fees.", "We need to count the number of universities (campuses) that have a fee higher than the average fee.", "First, calculate the average campus fee using a subquery: SELECT AVG(CampusFee) FROM csu_fees.", "Join the 'Campuses' table with the 'csu_fees' table on the campus identifier.", "Filter the results to include only those campuses where the campus fee is greater than the average fee calculated in the subquery.", "Count the distinct campuses that meet the criteria to avoid duplicates."], "pred_sql": "SELECT COUNT(DISTINCT c.Id) AS UniversityCount\nFROM Campuses c\nJOIN csu_fees f ON c.Id = f.Campus\nWHERE f.CampusFee > (SELECT AVG(CampusFee) FROM csu_fees)", "gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "source_tables": ["csu_fees"]}
{"sample_id": 2342, "db_id": "csu_1", "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "rationale": ["Identify the tables involved: 'Campuses' for university information and 'csu_fees' for campus fees.", "We need to count the number of universities (campuses) where the campus fee is greater than the average campus fee.", "To find the average campus fee, we will use a subquery: SELECT AVG(CampusFee) FROM csu_fees.", "Join the 'Campuses' table with the 'csu_fees' table on the campus identifier (Id).", "Filter the results to include only those campuses where the campus fee is greater than the average campus fee calculated in the subquery.", "Use COUNT(DISTINCT c.Id) to count the unique campuses that meet the criteria."], "pred_sql": "SELECT COUNT(DISTINCT c.Id) AS UniversityCount\nFROM Campuses c\nJOIN csu_fees f ON c.Id = f.Campus\nWHERE f.CampusFee > (SELECT AVG(CampusFee) FROM csu_fees)", "gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "source_tables": ["csu_fees"]}
{"sample_id": 2343, "db_id": "csu_1", "question": "How many universities have a campus fee greater than the average?", "rationale": ["Identify the table that contains campus fee information, which is the 'csu_fees' table.", "To find universities with a campus fee greater than the average, we need to calculate the average campus fee using a subquery.", "The subquery will select the average of 'CampusFee' from the 'csu_fees' table.", "The main query will count the distinct campuses where the 'CampusFee' is greater than the average calculated in the subquery.", "Use COUNT(DISTINCT Campus) to ensure we are counting unique campuses."], "pred_sql": "SELECT COUNT(DISTINCT Campus) AS UniversityCount\nFROM csu_fees\nWHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);", "gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "source_tables": ["csu_fees"]}
{"sample_id": 2344, "db_id": "csu_1", "question": "Which university is in Los Angeles county and opened after 1950?", "rationale": ["Identify the relevant table: Campuses, as it contains information about universities and their locations.", "Filter the results based on the county: 'Los Angeles'.", "Add a condition to check the year the university opened, specifically looking for those opened after 1950."], "pred_sql": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles' AND Year > '1950';", "gold_sql": "SELECT campus FROM campuses WHERE county  =  'Los Angeles' AND YEAR  >  1950", "source_tables": ["campuses"]}
{"sample_id": 2345, "db_id": "csu_1", "question": "What campuses are located in Los Angeles county and opened after 1950?", "rationale": ["Identify the relevant table: Campuses.", "Determine the columns needed: Campus, County, Year.", "Filter the results based on the County being 'Los Angeles'.", "Add a condition to check that the Year is greater than '1950'.", "Construct the SQL SELECT statement to retrieve the Campus names that meet these criteria."], "pred_sql": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles' AND Year > '1950';", "gold_sql": "SELECT campus FROM campuses WHERE county  =  'Los Angeles' AND YEAR  >  1950", "source_tables": ["campuses"]}
{"sample_id": 2346, "db_id": "csu_1", "question": "Which year has the most degrees conferred?", "rationale": ["Identify the relevant table: The 'degrees' table contains information about the years when degrees were awarded.", "Determine the necessary columns: We need the 'Year' column to group the data and the 'Degrees' column to count the number of degrees conferred.", "Use the COUNT function to count the number of degrees for each year.", "Group the results by 'Year' to aggregate the counts for each year.", "Order the results in descending order based on the count of degrees to find the year with the most degrees conferred.", "Limit the results to 1 to get only the year with the highest count."], "pred_sql": "SELECT Year, COUNT(Degrees) AS DegreesCount FROM degrees GROUP BY Year ORDER BY DegreesCount DESC LIMIT 1;", "gold_sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "source_tables": ["degrees"]}
{"sample_id": 2347, "db_id": "csu_1", "question": "In what year was the most degrees conferred?", "rationale": ["Identify the relevant table: degrees, as it contains information about the years when degrees were awarded.", "We need to find the year with the most degrees conferred, which means we need to count the number of degrees awarded per year.", "Use the COUNT function to count the number of degrees for each year.", "Group the results by Year to aggregate the counts for each year.", "Order the results in descending order based on the count of degrees to get the year with the most degrees at the top.", "Limit the results to 1 to get only the year with the highest count."], "pred_sql": "SELECT Year FROM degrees GROUP BY Year ORDER BY COUNT(Degrees) DESC LIMIT 1;", "gold_sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "source_tables": ["degrees"]}
{"sample_id": 2348, "db_id": "csu_1", "question": "Which campus has the most degrees conferred in all times?", "rationale": ["Identify the relevant table: The 'degrees' table contains information about degrees awarded by campus.", "Determine the required information: We need to count the total number of degrees conferred for each campus.", "Group the results by campus: Use GROUP BY to aggregate the count of degrees for each campus.", "Order the results: Use ORDER BY to sort the campuses by the total number of degrees in descending order.", "Limit the results: Use LIMIT 1 to get only the campus with the highest number of degrees conferred."], "pred_sql": "SELECT Campus, COUNT(Degrees) AS TotalDegrees FROM degrees GROUP BY Campus ORDER BY TotalDegrees DESC LIMIT 1;", "gold_sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "source_tables": ["degrees"]}
{"sample_id": 2349, "db_id": "csu_1", "question": "What campus has the most degrees  conferrred over its entire existence?", "rationale": ["Identify the relevant table: The 'degrees' table contains information about degrees awarded by each campus.", "Count the number of degrees awarded for each campus: Use COUNT(Degrees) to get the total number of degrees conferred per campus.", "Group the results by campus: Use GROUP BY Campus to aggregate the counts for each campus.", "Order the results to find the campus with the most degrees: Use ORDER BY TotalDegrees DESC to sort the campuses by the total number of degrees in descending order.", "Limit the results to the top campus: Use LIMIT 1 to get only the campus with the highest count of degrees."], "pred_sql": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;", "gold_sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "source_tables": ["degrees"]}
{"sample_id": 2350, "db_id": "csu_1", "question": "Which campus has the most faculties in year 2003?", "rationale": ["Identify the relevant table: The 'faculty' table contains information about the number of faculty members at each campus.", "Determine the filtering criteria: We need to filter the records for the year 2003.", "Select the necessary columns: We want to retrieve the 'Campus' and the number of 'Faculty' members.", "Sort the results: To find the campus with the most faculty, we will sort the results in descending order based on the 'Faculty' column.", "Limit the results: Since we only need the campus with the most faculty, we will limit the results to 1."], "pred_sql": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;", "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2351, "db_id": "csu_1", "question": "What campus has the most faculties in 2003?", "rationale": ["Identify the relevant table: The 'faculty' table contains information about the number of faculty members at each campus.", "Filter the data for the year 2003: We need to include a condition to only consider records from the year 2003.", "Select the campus and faculty count: We want to retrieve the campus name and the number of faculty members.", "Order the results by the number of faculty in descending order: This will allow us to find the campus with the most faculty members.", "Limit the results to 1: Since we only want the campus with the most faculty, we will limit the output to one record."], "pred_sql": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;", "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2352, "db_id": "csu_1", "question": "Find the average fee on a CSU campus in 1996", "rationale": ["Identify the table that contains fee information, which is the 'csu_fees' table.", "Determine the relevant column for the fee amount, which is 'CampusFee'.", "Identify the column that specifies the year, which is 'Year'.", "Filter the records to only include those from the year 1996.", "Use the AVG() function to calculate the average of the 'CampusFee' for the filtered records."], "pred_sql": "SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 1996;", "gold_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "source_tables": ["csu_fees"]}
{"sample_id": 2353, "db_id": "csu_1", "question": "What is the average fee for a CSU campus in the year of 1996?", "rationale": ["Identify the table that contains fee information, which is 'csu_fees'.", "Determine the relevant column for the fee amount, which is 'CampusFee'.", "Identify the column that specifies the year, which is 'Year'.", "Formulate a query to calculate the average of 'CampusFee' for the year 1996 using the AVG() function.", "Construct the SQL query to select the average fee from 'csu_fees' where the year is 1996."], "pred_sql": "SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 1996;", "gold_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "source_tables": ["csu_fees"]}
{"sample_id": 2354, "db_id": "csu_1", "question": "What is the average fee on a CSU campus in 2005?", "rationale": ["Identify the table that contains fee information, which is 'csu_fees'.", "Determine the relevant column for the fee amount, which is 'CampusFee'.", "Identify the year for which we need to calculate the average fee, which is 2005.", "Use the AVG() function to calculate the average of 'CampusFee' for the year 2005.", "Construct the SQL query to select the average fee from 'csu_fees' where the year is 2005."], "pred_sql": "SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 2005;", "gold_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "source_tables": ["csu_fees"]}
{"sample_id": 2355, "db_id": "csu_1", "question": "What is the average fee for a CSU campus in the year of 2005?", "rationale": ["Identify the table that contains fee information, which is 'csu_fees'.", "Determine the relevant column for the fee amount, which is 'CampusFee'.", "Identify the column that specifies the year, which is 'Year'.", "Formulate a query to calculate the average of 'CampusFee' for the year 2005 using the AVG() function.", "Construct the SQL query to select the average fee from the 'csu_fees' table where the year is 2005."], "pred_sql": "SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 2005;", "gold_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "source_tables": ["csu_fees"]}
{"sample_id": 2356, "db_id": "csu_1", "question": "report the total number of degrees granted between 1998 and 2002.", "rationale": ["Identify the relevant table: The 'degrees' table contains information about degrees awarded.", "Determine the relevant columns: We need to count the total number of degrees, so we will use COUNT(*) to get the total.", "Set the condition for the years: We need degrees awarded between 1998 and 2002, which can be specified using the WHERE clause with a BETWEEN condition.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and the WHERE clause to filter the years."], "pred_sql": "SELECT COUNT(*) AS TotalDegrees FROM degrees WHERE Year BETWEEN '1998' AND '2002';", "gold_sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "source_tables": ["degrees", "campuses"]}
{"sample_id": 2357, "db_id": "csu_1", "question": "how many degrees were conferred between 1998 and 2002?", "rationale": ["Identify the relevant table: The 'degrees' table contains information about degrees awarded.", "Determine the relevant columns: We need to count the number of degrees, so we will use the COUNT() function.", "Set the condition for the year: We want degrees conferred between 1998 and 2002, so we will use a WHERE clause with a BETWEEN condition.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and the WHERE clause to filter the years."], "pred_sql": "SELECT COUNT(*) AS TotalDegrees FROM degrees WHERE Year BETWEEN '1998' AND '2002';", "gold_sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "source_tables": ["degrees", "campuses"]}
{"sample_id": 2358, "db_id": "csu_1", "question": "For each Orange county campus, report the number of degrees granted after 2000.", "rationale": ["Identify the relevant tables: Campuses and degrees.", "We need to join these tables on the campus identifier (Id in Campuses and Campus in degrees).", "Filter the results to include only campuses located in Orange County.", "Further filter the degrees to include only those awarded after the year 2000.", "Count the number of degrees granted for each campus that meets the criteria.", "Group the results by campus to get the count of degrees for each individual campus."], "pred_sql": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS DegreesGranted\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;", "gold_sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  'Orange' AND T2.year  >=  2000 GROUP BY T1.campus", "source_tables": ["degrees", "campuses"]}
{"sample_id": 2359, "db_id": "csu_1", "question": "What is the total number of degrees granted after 2000 for each Orange county campus?", "rationale": ["Identify the relevant tables: Campuses and degrees.", "We need to count the total number of degrees granted, so we will use the COUNT function on the Degrees column from the degrees table.", "We need to filter the results to only include campuses in Orange county, so we will add a WHERE clause to check if Campuses.County is 'Orange'.", "We also need to filter the degrees awarded after the year 2000, so we will add another condition in the WHERE clause to check if degrees.Year is greater than '2000'.", "To get the total number of degrees for each campus, we will group the results by the campus name using GROUP BY Campuses.Campus."], "pred_sql": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS TotalDegrees\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;", "gold_sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  'Orange' AND T2.year  >=  2000 GROUP BY T1.campus", "source_tables": ["degrees", "campuses"]}
{"sample_id": 2360, "db_id": "csu_1", "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "rationale": ["Identify the main table to query for campus names, which is the 'Campuses' table.", "Join the 'Campuses' table with the 'faculty' table to access the number of faculty members associated with each campus.", "Filter the results to only include records from the year 2002.", "Use a subquery to find the maximum number of faculty members at any campus in Orange County for the year 2002.", "Compare the number of faculty members at each campus to the maximum found in the subquery, ensuring it is greater than that value."], "pred_sql": "SELECT c.Campus\nFROM Campuses c\nJOIN faculty f ON c.Id = f.Campus\nWHERE f.Year = 2002 AND f.Faculty > (\n    SELECT MAX(f2.Faculty)\n    FROM Campuses c2\n    JOIN faculty f2 ON c2.Id = f2.Campus\n    WHERE c2.County = 'Orange' AND f2.Year = 2002\n)", "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  'Orange')", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2361, "db_id": "csu_1", "question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "rationale": ["Identify the relevant tables: Campuses and faculty.", "We need to find campuses with faculty data for the year 2002, so we will join the Campuses table with the faculty table on the Campus identifier.", "We will filter the faculty records to only include those from the year 2002.", "Next, we need to compare the number of faculty members at each campus in 2002 to the maximum number of faculty members in Orange County.", "To find the maximum number of faculty in Orange County, we will create a subquery that selects the maximum faculty count from the faculty table, joining it with the Campuses table to filter by county.", "Finally, we will select the names of campuses where the faculty count in 2002 is greater than the maximum faculty count found in Orange County."], "pred_sql": "SELECT c.Campus \nFROM Campuses c \nJOIN faculty f ON c.Id = f.Campus \nWHERE f.Year = 2002 AND f.Faculty > \n(SELECT MAX(f2.Faculty) \n FROM faculty f2 \n JOIN Campuses c2 ON f2.Campus = c2.Id \n WHERE c2.County = 'Orange')", "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  'Orange')", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2362, "db_id": "csu_1", "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "rationale": ["Identify the relevant tables: 'enrollments' for total enrollment and 'faculty' for full-time equivalent enrollments.", "Determine the conditions: total enrollment must be greater than 400 and full-time enrollment must be greater than 200 for the year 1956.", "Join the 'enrollments' and 'faculty' tables on the 'Campus' column to combine the relevant data.", "Select the 'Campus' column from the joined tables where the specified conditions are met."], "pred_sql": "SELECT Campus FROM enrollments JOIN faculty ON enrollments.Campus = faculty.Campus WHERE enrollments.Year = '1956' AND enrollments.TotalEnrollment_AY > '400' AND faculty.FTE_AY > '200';", "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "source_tables": ["enrollments", "campuses"]}
{"sample_id": 2363, "db_id": "csu_1", "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "rationale": ["Identify the relevant tables: Campuses and enrollments.", "We need to filter campuses based on the year they started, which is in the Campuses table.", "We also need to check for the number of full-time students and total enrollments, which are in the enrollments table.", "Join the Campuses table with the enrollments table on the campus identifier.", "Apply the filters: year = 1956, FTE_AY > 200, and TotalEnrollment_AY > 400."], "pred_sql": "SELECT Campus FROM Campuses c JOIN enrollments e ON c.Id = e.Campus WHERE c.Year = '1956' AND e.FTE_AY > '200' AND e.TotalEnrollment_AY > '400';", "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "source_tables": ["enrollments", "campuses"]}
{"sample_id": 2364, "db_id": "csu_1", "question": "How many campuses are there in Los Angeles county?", "rationale": ["Identify the table that contains information about campuses, which is the 'Campuses' table.", "Determine the relevant column for the county, which is 'County'.", "Formulate a query to count the number of campuses where the 'County' is 'Los Angeles'.", "Use the COUNT() function to get the total number of campuses that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS CampusCount FROM Campuses WHERE County = 'Los Angeles';", "gold_sql": "SELECT count(*) FROM campuses WHERE county  =  'Los Angeles'", "source_tables": ["campuses"]}
{"sample_id": 2365, "db_id": "csu_1", "question": "How many campuses exist are in the county of LA?", "rationale": ["Identify the table that contains information about campuses, which is the 'Campuses' table.", "Determine the relevant column for filtering by county, which is 'County'.", "Specify the county of interest, which is 'LA'.", "Use the COUNT() function to count the number of campuses that meet the criteria.", "Construct the SQL query to select the count of campuses from the 'Campuses' table where the county is 'LA'."], "pred_sql": "SELECT COUNT(*) AS CampusCount FROM Campuses WHERE County = 'LA';", "gold_sql": "SELECT count(*) FROM campuses WHERE county  =  'Los Angeles'", "source_tables": ["campuses"]}
{"sample_id": 2366, "db_id": "csu_1", "question": "List the campuses in Los Angeles county.", "rationale": ["Identify the table that contains the information about campuses, which is the 'Campuses' table.", "Determine the column that specifies the county, which is the 'County' column in the 'Campuses' table.", "Formulate a SQL query to select all columns from the 'Campuses' table where the 'County' is 'Los Angeles'."], "pred_sql": "SELECT * FROM Campuses WHERE County = 'Los Angeles';", "gold_sql": "SELECT campus FROM campuses WHERE county  =  'Los Angeles'", "source_tables": ["campuses"]}
{"sample_id": 2367, "db_id": "csu_1", "question": "What campuses are in Los Angeles county?", "rationale": ["Identify the relevant table: The query is asking about campuses, which are stored in the 'Campuses' table.", "Determine the condition: The user is interested in campuses located in 'Los Angeles county'.", "Formulate the SQL query: We need to select all columns from the 'Campuses' table where the 'County' column matches 'Los Angeles'."], "pred_sql": "SELECT * FROM Campuses WHERE County = 'Los Angeles';", "gold_sql": "SELECT campus FROM campuses WHERE county  =  'Los Angeles'", "source_tables": ["campuses"]}
{"sample_id": 2368, "db_id": "csu_1", "question": "How many degrees were conferred in \"San Jose State University\" in 2000?", "rationale": ["Identify the relevant table for degrees conferred, which is the 'degrees' table.", "Determine the specific campus by querying the 'Campuses' table for the Id of 'San Jose State University'.", "Filter the degrees awarded in the year 2000.", "Count the total number of degrees conferred for the specified campus and year."], "pred_sql": "SELECT COUNT(Degrees) AS TotalDegrees FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = '2000';", "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  'San Jose State University' AND t2.year  =  2000", "source_tables": ["degrees", "campuses"]}
{"sample_id": 2369, "db_id": "csu_1", "question": "How many degrees were conferred at San Jose State University in 2000?", "rationale": ["Identify the relevant table for degrees awarded, which is the 'degrees' table.", "We need to filter the records for the year 2000.", "We need to filter the records for the campus 'San Jose State University'.", "To find the campus ID for 'San Jose State University', we will use a subquery on the 'Campuses' table.", "We will sum the degrees awarded by type (Bachelor, Master, Doctorate) using conditional aggregation.", "Construct the SQL query to select the sums of degrees for the specified campus and year."], "pred_sql": "SELECT SUM(CASE WHEN Degrees = 'Bachelor' THEN 1 ELSE 0 END) AS BachelorDegrees, SUM(CASE WHEN Degrees = 'Master' THEN 1 ELSE 0 END) AS MasterDegrees, SUM(CASE WHEN Degrees = 'Doctorate' THEN 1 ELSE 0 END) AS DoctorateDegrees FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = '2000';", "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  'San Jose State University' AND t2.year  =  2000", "source_tables": ["degrees", "campuses"]}
{"sample_id": 2370, "db_id": "csu_1", "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.", "rationale": ["Identify the relevant table for degrees conferred, which is the 'degrees' table.", "Determine the specific campus by querying the 'Campuses' table to get the Id for 'San Francisco State University'.", "Filter the results in the 'degrees' table for the year 2001.", "Construct the SQL query to select the Degrees from the 'degrees' table where the Campus matches the Id obtained from the 'Campuses' table and the Year is 2001."], "pred_sql": "SELECT Degrees FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = '2001';", "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  'San Francisco State University' AND t2.year  =  2001", "source_tables": ["degrees", "campuses"]}
{"sample_id": 2371, "db_id": "csu_1", "question": "What degrees were conferred in San Francisco State University in the year 2001?", "rationale": ["Identify the relevant table for degrees conferred, which is the 'degrees' table.", "Determine the specific campus of interest, which is 'San Francisco State University'.", "Find the unique identifier (Id) for 'San Francisco State University' from the 'Campuses' table.", "Filter the 'degrees' table for records where the Campus matches the Id of 'San Francisco State University' and the Year is '2001'.", "Construct the SQL query to select the Degrees from the 'degrees' table based on the identified conditions."], "pred_sql": "SELECT Degrees FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = '2001';", "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  'San Francisco State University' AND t2.year  =  2001", "source_tables": ["degrees", "campuses"]}
{"sample_id": 2372, "db_id": "csu_1", "question": "How many faculty is there in total in the year of 2002?", "rationale": ["Identify the relevant table: The 'faculty' table contains the number of faculty members and the year of the data record.", "Determine the specific year of interest: The user is asking for data from the year 2002.", "Construct the SQL query: We need to sum the 'Faculty' column for the year 2002.", "Use the SUM function to calculate the total number of faculty members for that year."], "pred_sql": "SELECT SUM(Faculty) AS TotalFaculty FROM faculty WHERE Year = 2002;", "gold_sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "source_tables": ["faculty"]}
{"sample_id": 2373, "db_id": "csu_1", "question": "How many faculty, in total, are there in the year 2002?", "rationale": ["Identify the relevant table: The 'faculty' table contains the data about faculty members.", "Determine the required information: We need the total number of faculty members for the year 2002.", "Use the SUM function to calculate the total number of faculty members for the specified year.", "Construct the SQL query to select the sum of the 'Faculty' column from the 'faculty' table where the 'Year' is 2002."], "pred_sql": "SELECT SUM(Faculty) AS TotalFaculty FROM faculty WHERE Year = 2002;", "gold_sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "source_tables": ["faculty"]}
{"sample_id": 2374, "db_id": "csu_1", "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?", "rationale": ["Identify the relevant table: The 'faculty' table contains the information about faculty members.", "Determine the filtering criteria: We need to filter by the campus name 'Long Beach State University' and the year 2002.", "Find the campus ID: Use a subquery to select the 'Id' from the 'Campuses' table where the 'Campus' name matches 'Long Beach State University'.", "Count the number of faculty lines: Use the COUNT function to count the number of records in the 'faculty' table that match the campus ID and year."], "pred_sql": "SELECT COUNT(*) FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'Long Beach State University') AND Year = 2002;", "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  'Long Beach State University'", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2375, "db_id": "csu_1", "question": "What is the number of faculty at Long Beach State University in 2002?", "rationale": ["Identify the relevant table for faculty data, which is the 'faculty' table.", "Determine the specific campus of interest, which is 'Long Beach State University'.", "Find the unique identifier (Id) for 'Long Beach State University' from the 'Campuses' table.", "Filter the faculty data for the year 2002.", "Construct the SQL query to select the number of faculty members from the 'faculty' table based on the identified campus Id and year."], "pred_sql": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'Long Beach State University') AND Year = 2002;", "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  'Long Beach State University'", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2376, "db_id": "csu_1", "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?", "rationale": ["Identify the campus name from the Campuses table that matches 'San Francisco State University'.", "Use a subquery to find the Id of 'San Francisco State University'.", "Count the number of faculty lines in the faculty table where the Campus matches the Id found in the previous step and the Year is 2004."], "pred_sql": "SELECT COUNT(*) FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2004;", "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  'San Francisco State University'", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2377, "db_id": "csu_1", "question": "How many faculty lines are there at San Francisco State University in 2004?", "rationale": ["Identify the relevant table: The 'faculty' table contains the data about faculty members.", "Determine the specific campus: The query asks for data related to 'San Francisco State University'.", "Find the unique identifier for the campus: Use a subquery to select the 'Id' from the 'Campuses' table where the 'Campus' name matches 'San Francisco State University'.", "Specify the year: The query specifies the year 2004, which needs to be included in the WHERE clause.", "Count the number of faculty lines: Use the COUNT function to count the number of records in the 'faculty' table that match the specified campus and year."], "pred_sql": "SELECT COUNT(*) AS FacultyLines FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2004;", "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  'San Francisco State University'", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2378, "db_id": "csu_1", "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.", "rationale": ["Identify the relevant tables: Campuses and faculty.", "Determine the columns needed: Campus name from Campuses and Faculty count from faculty.", "Establish the condition for the year: faculty.Year = 2004.", "Set the condition for the number of faculty: faculty.Faculty BETWEEN 600 AND 1000.", "Join the Campuses table with the faculty table on the Campus identifier.", "Construct the SQL SELECT statement to retrieve the Campus names that meet the criteria."], "pred_sql": "SELECT Campuses.Campus FROM Campuses JOIN faculty ON Campuses.Id = faculty.Campus WHERE faculty.Year = 2004 AND faculty.Faculty BETWEEN 600 AND 1000;", "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2379, "db_id": "csu_1", "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?", "rationale": ["Identify the relevant tables: We need data from the 'Campuses' table to get campus names and from the 'faculty' table to get the number of faculty members.", "Determine the filtering criteria: We are interested in campuses with faculty members between 600 and 1000 for the year 2004.", "Construct the SQL query: We will use a SELECT statement to retrieve the campus names from the 'Campuses' table, joining it with the 'faculty' table on the campus identifier.", "Apply the WHERE clause to filter results for the year 2004 and the specified range of faculty members."], "pred_sql": "SELECT Campuses.Campus \nFROM Campuses \nJOIN faculty ON Campuses.Id = faculty.Campus \nWHERE faculty.Year = 2004 AND faculty.Faculty BETWEEN 600 AND 1000;", "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "source_tables": ["faculty", "campuses"]}
{"sample_id": 2380, "db_id": "csu_1", "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "rationale": ["Identify the year of interest, which is 2002.", "Determine which campus conferred the most degrees in 2002 by grouping the degrees table by campus and counting the number of degrees awarded.", "Order the results by the count of degrees in descending order and limit the results to the top campus.", "Use the identified campus to count the number of faculty lines in the faculty table for that campus."], "pred_sql": "SELECT COUNT(*) AS FacultyCount\nFROM faculty\nWHERE Campus = (\n    SELECT Campus\n    FROM degrees\n    WHERE Year = '2002'\n    GROUP BY Campus\n    ORDER BY COUNT(Degrees) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "source_tables": ["faculty", "degrees", "campuses"]}
{"sample_id": 2381, "db_id": "csu_1", "question": "How many faculty members did the university that conferred the most degrees in 2002 have?", "rationale": ["Identify the year of interest, which is 2002.", "Determine which campus conferred the most degrees in 2002 by counting the number of degrees awarded per campus.", "Use a subquery to find the campus with the maximum count of degrees awarded in 2002.", "Join the 'faculty' table with the 'degrees' table on the campus identifier to get the faculty count for the identified campus.", "Select the faculty count for the campus that conferred the most degrees in 2002."], "pred_sql": "SELECT f.Faculty FROM faculty f JOIN degrees d ON f.Campus = d.Campus WHERE d.Year = '2002' AND d.Campus = (SELECT Campus FROM degrees WHERE Year = '2002' GROUP BY Campus ORDER BY COUNT(Degrees) DESC LIMIT 1)", "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "source_tables": ["faculty", "degrees", "campuses"]}
{"sample_id": 2382, "db_id": "csu_1", "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "rationale": ["Identify the year of interest, which is 2001.", "Determine which campus conferred the least number of degrees in 2001 by grouping the degrees table by campus and counting the degrees awarded, ordering the result in ascending order, and limiting the result to the first campus.", "Use the identified campus from the previous step to count the number of faculty lines in the faculty table for that specific campus."], "pred_sql": "SELECT COUNT(*) AS FacultyCount \nFROM faculty \nWHERE Campus = (SELECT Campus \n                 FROM degrees \n                 WHERE Year = '2001' \n                 GROUP BY Campus \n                 ORDER BY COUNT(Degrees) ASC \n                 LIMIT 1)", "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "source_tables": ["faculty", "degrees", "campuses"]}
{"sample_id": 2383, "db_id": "csu_1", "question": "How many faculty members are at the university that gave the least number of degrees in 2001?", "rationale": ["Identify the year of interest, which is 2001, to filter the degrees awarded.", "Join the 'faculty' table with the 'degrees' table on the 'Campus' identifier to correlate faculty members with the number of degrees awarded.", "Use an aggregate function to count the number of degrees awarded per campus for the year 2001.", "Order the results by the count of degrees in ascending order to find the campus with the least number of degrees awarded.", "Select the faculty count for that campus."], "pred_sql": "SELECT f.Faculty FROM faculty f JOIN degrees d ON f.Campus = d.Campus WHERE d.Year = '2001' ORDER BY d.Campus LIMIT 1;", "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "source_tables": ["faculty", "degrees", "campuses"]}
{"sample_id": 2384, "db_id": "csu_1", "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?", "rationale": ["Identify the relevant table for undergraduate enrollments, which is 'discipline_enrollments'.", "Determine the specific campus by querying the 'Campuses' table to get the Id for 'San Jose State University'.", "Filter the results for the year 2004.", "Use the SUM function to calculate the total number of undergraduate enrollments for the specified campus and year."], "pred_sql": "SELECT SUM(Undergraduate) AS TotalUndergraduates FROM discipline_enrollments WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = '2004';", "gold_sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Jose State University'", "source_tables": ["discipline_enrollments", "campuses"]}
{"sample_id": 2385, "db_id": "csu_1", "question": "How many undergraduates are there at San Jose State", "rationale": ["Identify the relevant table for undergraduate enrollments, which is 'discipline_enrollments'.", "Determine the specific campus of interest, which is 'San Jose State'.", "Find the unique identifier for 'San Jose State' in the 'Campuses' table using a subquery.", "Use the SUM function to aggregate the total number of undergraduate enrollments for the identified campus."], "pred_sql": "SELECT SUM(Undergraduate) AS TotalUndergraduates FROM discipline_enrollments WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State');", "gold_sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Jose State University'", "source_tables": ["discipline_enrollments", "campuses"]}
{"sample_id": 2386, "db_id": "csu_1", "question": "What is the number of graduates in \"San Francisco State University\" in year 2004?", "rationale": ["Identify the relevant table for graduate enrollment data, which is 'discipline_enrollments'.", "Determine the specific campus by querying the 'Campuses' table to get the Id for 'San Francisco State University'.", "Filter the results for the year 2004.", "Use the SUM function to calculate the total number of graduates for the specified campus and year."], "pred_sql": "SELECT SUM(Graduate) AS TotalGraduates FROM discipline_enrollments WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = '2004';", "gold_sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Francisco State University'", "source_tables": ["discipline_enrollments", "campuses"]}
{"sample_id": 2387, "db_id": "csu_1", "question": "How many people graduated from San Francisco State University in 2004?", "rationale": ["Identify the relevant table for graduation data, which is the 'degrees' table.", "Determine the specific campus of interest, which is 'San Francisco State University'.", "Find the unique identifier (Id) for 'San Francisco State University' from the 'Campuses' table.", "Filter the 'degrees' table for records where the Year is '2004' and the Campus matches the Id obtained from the previous step.", "Count the number of records that meet these criteria to get the total number of graduates."], "pred_sql": "SELECT COUNT(*) AS Graduates FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = '2004';", "gold_sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Francisco State University'", "source_tables": ["discipline_enrollments", "campuses"]}
{"sample_id": 2388, "db_id": "csu_1", "question": "What is the campus fee of \"San Francisco State University\" in year 2000?", "rationale": ["Identify the relevant tables: 'csu_fees' for campus fees and 'Campuses' for campus names.", "We need to join the 'csu_fees' table with the 'Campuses' table on the campus identifier to link the fee data with the campus name.", "Filter the results to find the specific campus 'San Francisco State University'.", "Also, filter the results to only include the year 2000 for the campus fee.", "Select the 'CampusFee' from the 'csu_fees' table as the final output."], "pred_sql": "SELECT csu_fees.CampusFee FROM csu_fees JOIN Campuses ON csu_fees.Campus = Campuses.Id WHERE Campuses.Campus = 'San Francisco State University' AND csu_fees.Year = 2000;", "gold_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Francisco State University' AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}
{"sample_id": 2389, "db_id": "csu_1", "question": "In the year 2000, what is the campus fee for San Francisco State University?", "rationale": ["Identify the relevant tables: We need to look at the 'csu_fees' table for campus fees and the 'Campuses' table to find the campus ID for San Francisco State University.", "Find the campus ID: Use a subquery to select the 'Id' from the 'Campuses' table where the 'Campus' name matches 'San Francisco State University'.", "Filter by year: We need to specify that we are looking for the fee applicable in the year 2000.", "Construct the final query: Combine the above steps to create a SQL query that selects the 'CampusFee' from 'csu_fees' where the 'Campus' matches the ID from the subquery and the 'Year' is 2000."], "pred_sql": "SELECT CampusFee FROM csu_fees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2000;", "gold_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Francisco State University' AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}
{"sample_id": 2390, "db_id": "csu_1", "question": "Find the campus fee of \"San Jose State University\" in year 2000.", "rationale": ["Identify the relevant tables: 'csu_fees' for campus fees and 'Campuses' for campus names.", "We need to find the fee for a specific campus, so we will join 'csu_fees' with 'Campuses' on the campus identifier.", "Filter the results to only include the campus named 'San Jose State University'.", "Also, filter the results to only include the year 2000 for the fees.", "Select the 'CampusFee' from the 'csu_fees' table as the final output."], "pred_sql": "SELECT csu_fees.CampusFee FROM csu_fees JOIN Campuses ON csu_fees.Campus = Campuses.Id WHERE Campuses.Campus = 'San Jose State University' AND csu_fees.Year = 2000;", "gold_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Jose State University' AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}
{"sample_id": 2391, "db_id": "csu_1", "question": "What is the campus fee in the year 2000 for San Jose State University?", "rationale": ["Identify the relevant table for campus fees, which is 'csu_fees'.", "Determine the specific campus by querying the 'Campuses' table to find the Id for 'San Jose State University'.", "Filter the 'csu_fees' table for the year 2000.", "Combine these conditions to form the SQL query that retrieves the CampusFee for the specified campus and year."], "pred_sql": "SELECT CampusFee FROM csu_fees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = 2000;", "gold_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Jose State University' AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}
{"sample_id": 2392, "db_id": "csu_1", "question": "How many CSU campuses are there?", "rationale": ["Identify the table that contains information about campuses, which is the 'Campuses' table.", "To find out how many CSU campuses there are, we need to count the number of entries in the 'Campuses' table.", "Use the COUNT() function to count the total number of rows in the 'Campuses' table.", "Construct the SQL query to select the count from the 'Campuses' table."], "pred_sql": "SELECT COUNT(*) AS CampusCount FROM Campuses;", "gold_sql": "SELECT count(*) FROM campuses", "source_tables": ["campuses"]}
{"sample_id": 2393, "db_id": "csu_1", "question": "What is the total number of campuses?", "rationale": ["Identify the requirement: We need to find the total number of campuses.", "Determine the relevant table: The 'Campuses' table contains the information about campuses.", "Use the COUNT() function to count the number of entries in the 'Campuses' table.", "Construct the SQL query to select the count from the 'Campuses' table."], "pred_sql": "SELECT COUNT(*) AS TotalCampuses FROM Campuses;", "gold_sql": "SELECT count(*) FROM campuses", "source_tables": ["campuses"]}
{"sample_id": 2394, "db_id": "candidate_poll", "question": "How many candidates are there?", "rationale": ["The user wants to know the total number of candidates.", "To get the count of candidates, we can use the COUNT() function in SQL.", "We will select from the 'candidate' table, which contains all the candidates.", "The SQL query will be 'SELECT COUNT(*) AS candidate_count FROM candidate;' to return the total number of candidates."], "pred_sql": "SELECT COUNT(*) AS candidate_count FROM candidate;", "gold_sql": "SELECT count(*) FROM candidate", "source_tables": ["candidate"]}
{"sample_id": 2395, "db_id": "candidate_poll", "question": "Count the number of candidates.", "rationale": ["Identify the requirement to count the number of candidates.", "Determine the relevant table, which is 'candidate'.", "Use the COUNT() function to count all entries in the 'candidate' table.", "Construct the SQL query to select the count from the 'candidate' table."], "pred_sql": "SELECT COUNT(*) AS candidate_count FROM candidate;", "gold_sql": "SELECT count(*) FROM candidate", "source_tables": ["candidate"]}
{"sample_id": 2396, "db_id": "candidate_poll", "question": "Which poll resource provided the most number of candidate information?", "rationale": ["Identify the relevant table: The 'candidate' table contains the 'Poll_Source' and candidate information.", "Count the number of candidates for each poll source: Use COUNT(*) to count the number of candidates grouped by 'Poll_Source'.", "Group the results by 'Poll_Source': This will aggregate the candidate counts for each source.", "Order the results by the count in descending order: This will allow us to see which poll source has the most candidates at the top.", "Limit the results to 1: We only need the poll source with the highest count, so we use LIMIT 1."], "pred_sql": "SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1;", "gold_sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1", "source_tables": ["candidate"]}
{"sample_id": 2397, "db_id": "candidate_poll", "question": "Return the poll resource associated with the most candidates.", "rationale": ["Identify the relevant table: The 'candidate' table contains the 'Poll_Source' and 'Candidate_ID' columns, which are needed for this query.", "Count the number of candidates associated with each poll source: Use the COUNT function to count the number of candidates for each 'Poll_Source'.", "Group the results by 'Poll_Source': This is necessary to aggregate the candidate counts for each source.", "Order the results by the count of candidates in descending order: This will allow us to find the poll source with the most candidates.", "Limit the results to 1: Since we only want the poll source associated with the most candidates, we use LIMIT 1."], "pred_sql": "SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1;", "gold_sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1", "source_tables": ["candidate"]}
{"sample_id": 2398, "db_id": "candidate_poll", "question": "what are the top 3 highest support rates?", "rationale": ["Identify the relevant table: The 'candidate' table contains the 'Support_rate' column which we need to query.", "Determine the required data: We need to select the 'Candidate_ID' and 'Support_rate' for the candidates.", "Sort the results: To find the top 3 highest support rates, we need to order the results by 'Support_rate' in descending order.", "Limit the results: We only want the top 3 entries, so we will use the LIMIT clause."], "pred_sql": "SELECT Candidate_ID, Support_rate FROM candidate ORDER BY Support_rate DESC LIMIT 3;", "gold_sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "source_tables": ["candidate"]}
{"sample_id": 2399, "db_id": "candidate_poll", "question": "Return the top 3 greatest support rates.", "rationale": ["Identify the relevant table: The 'candidate' table contains the 'Support_rate' column.", "Determine the requirement: We need to return the top 3 greatest support rates.", "Use the SELECT statement to specify that we want the 'Support_rate' column.", "Order the results in descending order to get the greatest support rates first using ORDER BY Support_rate DESC.", "Limit the results to the top 3 using LIMIT 3."], "pred_sql": "SELECT Support_rate FROM candidate ORDER BY Support_rate DESC LIMIT 3;", "gold_sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "source_tables": ["candidate"]}
{"sample_id": 2400, "db_id": "candidate_poll", "question": "Find the id of the candidate who got the lowest oppose rate.", "rationale": ["Identify the relevant table: The 'candidate' table contains the 'Oppose_rate' column which we need to analyze.", "Determine the operation: We need to find the candidate with the lowest oppose rate, which requires sorting the data based on the 'Oppose_rate' column.", "Construct the SQL query: Use the SELECT statement to retrieve the 'Candidate_ID' from the 'candidate' table.", "Order the results: Use ORDER BY to sort the results in ascending order based on 'Oppose_rate'.", "Limit the results: Use LIMIT 1 to ensure that only the candidate with the lowest oppose rate is returned."], "pred_sql": "SELECT Candidate_ID FROM candidate ORDER BY Oppose_rate ASC LIMIT 1;", "gold_sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "source_tables": ["candidate"]}
{"sample_id": 2401, "db_id": "candidate_poll", "question": "What is the id of the candidate with the lowest oppose rate?", "rationale": ["Identify the relevant table: The 'candidate' table contains the 'Oppose_rate' and 'Candidate_ID' columns.", "Determine the requirement: We need to find the candidate with the lowest oppose rate.", "Use the ORDER BY clause to sort the candidates by 'Oppose_rate' in ascending order.", "Limit the results to 1 to get only the candidate with the lowest oppose rate."], "pred_sql": "SELECT Candidate_ID FROM candidate ORDER BY Oppose_rate ASC LIMIT 1;", "gold_sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "source_tables": ["candidate"]}
{"sample_id": 2402, "db_id": "candidate_poll", "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.", "rationale": ["Identify the required columns: Support_rate, Consider_rate, Oppose_rate, and Unsure_rate from the candidate table.", "Determine the order of the results: we need to sort the results in ascending order based on the Unsure_rate.", "Construct the SQL SELECT statement to retrieve the specified columns from the candidate table.", "Add the ORDER BY clause to sort the results by Unsure_rate in ascending order."], "pred_sql": "SELECT c.Support_rate, c.Consider_rate, c.Oppose_rate, c.Unsure_rate FROM candidate c ORDER BY c.Unsure_rate ASC;", "gold_sql": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate", "source_tables": ["candidate"]}
{"sample_id": 2403, "db_id": "candidate_poll", "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?", "rationale": ["Identify the required columns: Support_rate, Consider_rate, Oppose_rate, and Unsure_rate from the candidate table.", "Include Candidate_ID to identify each candidate in the results.", "Use the SELECT statement to retrieve the specified columns from the candidate table.", "To order the results by the unsure rate, use the ORDER BY clause with Unsure_rate in ascending order (ASC)."], "pred_sql": "SELECT Candidate_ID, Support_rate, Consider_rate, Oppose_rate, Unsure_rate FROM candidate ORDER BY Unsure_rate ASC;", "gold_sql": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate", "source_tables": ["candidate"]}
{"sample_id": 2404, "db_id": "candidate_poll", "question": "which poll source does the highest oppose rate come from?", "rationale": ["Identify the relevant table: The 'candidate' table contains the 'Poll_Source' and 'Oppose_rate' columns.", "Determine the goal: We want to find the poll source with the highest oppose rate.", "Use the ORDER BY clause to sort the results by 'Oppose_rate' in descending order, so the highest value comes first.", "Limit the results to 1 using LIMIT 1 to get only the top result."], "pred_sql": "SELECT Poll_Source FROM candidate ORDER BY Oppose_rate DESC LIMIT 1;", "gold_sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1", "source_tables": ["candidate"]}
{"sample_id": 2405, "db_id": "candidate_poll", "question": "Return the poll source corresponding to the candidate who has the oppose rate.", "rationale": ["Identify the table that contains the relevant data: the 'candidate' table has the 'Poll_Source' and 'Oppose_rate' columns.", "We need to select the 'Poll_Source' for candidates who have an 'Oppose_rate'.", "The condition to check is that 'Oppose_rate' should not be NULL, indicating that there is a value present for the oppose rate.", "Construct the SQL query to select 'Poll_Source' from the 'candidate' table where 'Oppose_rate' is not NULL."], "pred_sql": "SELECT Poll_Source FROM candidate WHERE Oppose_rate IS NOT NULL;", "gold_sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1", "source_tables": ["candidate"]}
{"sample_id": 2406, "db_id": "candidate_poll", "question": "List all people names in the order of their date of birth from old to young.", "rationale": ["Identify the table that contains the names of the people, which is the 'people' table.", "Determine the column that holds the names, which is 'Name'.", "Identify the column that holds the date of birth, which is 'Date_of_Birth'.", "To list the names in the order of their date of birth from old to young, we need to sort the results by 'Date_of_Birth' in ascending order.", "Construct the SQL query to select the 'Name' from the 'people' table and order the results by 'Date_of_Birth' in ascending order."], "pred_sql": "SELECT Name FROM people ORDER BY Date_of_Birth ASC;", "gold_sql": "SELECT name FROM people ORDER BY date_of_birth", "source_tables": ["people"]}
{"sample_id": 2407, "db_id": "candidate_poll", "question": "What are the names of all people, ordered by their date of birth?", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "Determine the column that holds the names, which is 'Name'.", "Identify the column that will be used for ordering the results, which is 'Date_of_Birth'.", "Construct the SQL query to select the 'Name' from the 'people' table and order the results by 'Date_of_Birth'."], "pred_sql": "SELECT Name FROM people ORDER BY Date_of_Birth;", "gold_sql": "SELECT name FROM people ORDER BY date_of_birth", "source_tables": ["people"]}
{"sample_id": 2408, "db_id": "candidate_poll", "question": "Find the average height and weight for all males (sex is M).", "rationale": ["Identify the required data: average height and weight for males.", "Determine the relevant table: 'people' contains the height and weight information.", "Use the AVG() function to calculate the average for both height and weight.", "Filter the results to include only males by using a WHERE clause with Sex = 'M'.", "Construct the SQL query to select the average height and weight from the 'people' table with the specified condition."], "pred_sql": "SELECT AVG(Height) AS Average_Height, AVG(Weight) AS Average_Weight FROM people WHERE Sex = 'M';", "gold_sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'", "source_tables": ["people"]}
{"sample_id": 2409, "db_id": "candidate_poll", "question": "What are the average height and weight across males (sex is M)?", "rationale": ["Identify the required data: average height and weight of males.", "Determine the relevant table: 'people' contains the height and weight information.", "Use the AVG() function to calculate the average height and weight.", "Filter the results to include only males by using a WHERE clause with Sex = 'M'."], "pred_sql": "SELECT AVG(Height) AS Average_Height, AVG(Weight) AS Average_Weight FROM people WHERE Sex = 'M';", "gold_sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'", "source_tables": ["people"]}
{"sample_id": 2410, "db_id": "candidate_poll", "question": "find the names of people who are taller than 200 or lower than 190.", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "Determine the relevant column for height, which is 'Height' in the 'people' table.", "Formulate the condition to filter people based on height: taller than 200 cm or shorter than 190 cm.", "Construct the SQL SELECT statement to retrieve the 'Name' column from the 'people' table where the height conditions are met."], "pred_sql": "SELECT Name FROM people WHERE Height > 200 OR Height < 190;", "gold_sql": "SELECT name FROM people WHERE height  >  200 OR height  <  190", "source_tables": ["people"]}
{"sample_id": 2411, "db_id": "candidate_poll", "question": "What are the names of people who have a height greater than 200 or less than 190?", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "Determine the column that stores the height of the people, which is the 'Height' column in the 'people' table.", "Formulate the condition to filter people based on height: greater than 200 or less than 190.", "Construct the SQL SELECT statement to retrieve the 'Name' column from the 'people' table where the height conditions are met."], "pred_sql": "SELECT Name FROM people WHERE Height > 200 OR Height < 190;", "gold_sql": "SELECT name FROM people WHERE height  >  200 OR height  <  190", "source_tables": ["people"]}
{"sample_id": 2412, "db_id": "candidate_poll", "question": "Find the average and minimum weight for each gender.", "rationale": ["Identify the relevant table: The 'people' table contains the 'Weight' and 'Sex' columns needed for the query.", "Determine the required calculations: We need to calculate the average and minimum weight for each gender.", "Use aggregate functions: Use AVG() to calculate the average weight and MIN() to find the minimum weight.", "Group the results: Use GROUP BY to group the results by gender (Sex).", "Construct the SQL query: Combine the SELECT statement with the aggregate functions and GROUP BY clause."], "pred_sql": "SELECT p.Sex, AVG(p.Weight) AS Average_Weight, MIN(p.Weight) AS Minimum_Weight FROM people p GROUP BY p.Sex;", "gold_sql": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex", "source_tables": ["people"]}
{"sample_id": 2413, "db_id": "candidate_poll", "question": "What are the average and minimum weights for people of each sex?", "rationale": ["Identify the relevant table: The 'people' table contains the 'Sex' and 'Weight' columns needed for the query.", "Determine the required calculations: We need to calculate the average and minimum weights, which can be done using the AVG() and MIN() aggregate functions.", "Group the results by sex: To get the average and minimum weights for each sex, we will use the GROUP BY clause on the 'Sex' column.", "Construct the SQL query: Combine the SELECT statement with the aggregate functions and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT Sex, AVG(Weight) AS Average_Weight, MIN(Weight) AS Minimum_Weight FROM people GROUP BY Sex;", "gold_sql": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex", "source_tables": ["people"]}
{"sample_id": 2414, "db_id": "candidate_poll", "question": "Find the name and gender of the candidate who got the highest support rate.", "rationale": ["Identify the columns needed: We need the candidate's name and gender, which are in the 'people' table.", "Determine the highest support rate: We will need to order the candidates by their support rate in descending order to find the highest.", "Join the tables: Since the candidate's details are in the 'candidate' table and the personal details (name and gender) are in the 'people' table, we will perform a JOIN operation on the 'People_ID' column.", "Limit the results: To get only the candidate with the highest support rate, we will use LIMIT 1."], "pred_sql": "SELECT p.Name, p.Sex FROM candidate c JOIN people p ON c.People_ID = p.People_ID ORDER BY c.Support_rate DESC LIMIT 1;", "gold_sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "source_tables": ["candidate", "people"]}
{"sample_id": 2415, "db_id": "candidate_poll", "question": "What is the name and sex of the candidate with the highest support rate?", "rationale": ["Identify the columns needed: 'Name' and 'Sex' from the 'people' table.", "The 'Support_rate' is in the 'candidate' table, so we need to join the 'candidate' and 'people' tables on 'People_ID'.", "To find the candidate with the highest support rate, we will order the results by 'Support_rate' in descending order.", "We will limit the results to 1 to get only the candidate with the highest support rate."], "pred_sql": "SELECT p.Name, p.Sex FROM candidate c JOIN people p ON c.People_ID = p.People_ID ORDER BY c.Support_rate DESC LIMIT 1;", "gold_sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "source_tables": ["candidate", "people"]}
{"sample_id": 2416, "db_id": "candidate_poll", "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.", "rationale": ["Identify the relevant tables: 'candidate' for candidate data and 'people' for personal details.", "We need to find the candidates with the lowest oppose percentage, so we will focus on the 'Oppose_rate' column in the 'candidate' table.", "We also need the candidates' names, which are in the 'people' table under the 'Name' column.", "To get the candidates' names along with their oppose rates, we will perform a JOIN operation between the 'candidate' and 'people' tables using the 'People_ID' foreign key.", "We will use the MIN() function to find the lowest oppose rate for each sex.", "Finally, we will group the results by 'Sex' to ensure we get the lowest oppose rate for each gender."], "pred_sql": "SELECT p.Name, MIN(c.Oppose_rate) AS Lowest_Oppose_Rate, p.Sex \nFROM candidate c \nJOIN people p ON c.People_ID = p.People_ID \nGROUP BY p.Sex;", "gold_sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex", "source_tables": ["candidate", "people"]}
{"sample_id": 2417, "db_id": "candidate_poll", "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?", "rationale": ["Identify the columns needed: Name and Sex from the people table, and Oppose_rate from the candidate table.", "Join the candidate table with the people table on the People_ID to access the candidate's name and sex.", "Use a subquery to find the maximum oppose rate for each sex.", "Filter the results to only include candidates whose oppose rate matches the maximum oppose rate for their respective sex."], "pred_sql": "SELECT p.Name, p.Sex, c.Oppose_rate \nFROM candidate c \nJOIN people p ON c.People_ID = p.People_ID \nWHERE c.Oppose_rate = (SELECT MAX(Oppose_rate) \n                       FROM candidate c2 \n                       JOIN people p2 ON c2.People_ID = p2.People_ID \n                       WHERE p2.Sex = p.Sex)", "gold_sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex", "source_tables": ["candidate", "people"]}
{"sample_id": 2418, "db_id": "candidate_poll", "question": "which gender got the highest average uncertain ratio.", "rationale": ["Identify the relevant tables: 'candidate' for poll data and 'people' for gender information.", "We need to calculate the average of the 'Unsure_rate' from the 'candidate' table, grouped by gender from the 'people' table.", "Join the 'candidate' table with the 'people' table on the 'People_ID' column to access gender information.", "Use the AVG() function to compute the average 'Unsure_rate' for each gender.", "Group the results by 'Sex' to get the average for each gender category.", "Order the results in descending order to find the gender with the highest average 'Unsure_rate'.", "Limit the results to 1 to get only the top result."], "pred_sql": "SELECT p.Sex, AVG(c.Unsure_rate) AS Average_Unsure_Rate\nFROM candidate c\nJOIN people p ON c.People_ID = p.People_ID\nGROUP BY p.Sex\nORDER BY Average_Unsure_Rate DESC\nLIMIT 1;", "gold_sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1", "source_tables": ["candidate", "people"]}
{"sample_id": 2419, "db_id": "candidate_poll", "question": "What is the sex of the candidate who had the highest unsure rate?", "rationale": ["Identify the relevant tables: 'candidate' for poll data and 'people' for candidate details.", "We need to find the candidate with the highest 'Unsure_rate'.", "To do this, we will use a subquery to find the maximum 'Unsure_rate' from the 'candidate' table.", "Once we have the maximum 'Unsure_rate', we will join the 'candidate' table with the 'people' table on 'People_ID' to get the corresponding sex of that candidate.", "Finally, we will select the 'Sex' of the candidate who has the highest 'Unsure_rate'."], "pred_sql": "SELECT p.Sex FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Unsure_rate = (SELECT MAX(Unsure_rate) FROM candidate);", "gold_sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1", "source_tables": ["candidate", "people"]}
{"sample_id": 2420, "db_id": "candidate_poll", "question": "what are the names of people who did not participate in the candidate election.", "rationale": ["Identify the relevant table: We need to retrieve names from the 'people' table.", "Determine the condition: We want to find people who did not participate in the candidate election, which means their People_ID should not be present in the 'candidate' table.", "Construct the subquery: We will create a subquery that selects People_IDs from the 'candidate' table to identify those who participated.", "Combine the main query with the subquery: We will select names from the 'people' table where the People_ID is not in the list of People_IDs returned by the subquery."], "pred_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM candidate)", "gold_sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)", "source_tables": ["candidate", "people"]}
{"sample_id": 2421, "db_id": "candidate_poll", "question": "Give the names of people who did not participate in the candidate election.", "rationale": ["Identify the table that contains the names of people, which is the 'people' table.", "We need to find people who did not participate in the candidate election, which means we need to look for people whose IDs are not present in the 'candidate' table.", "To achieve this, we can use a subquery that selects all 'People_ID' from the 'candidate' table.", "We will then use the NOT IN clause to filter out those 'People_ID' from the 'people' table, allowing us to select only those who are not in the candidate list."], "pred_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM candidate)", "gold_sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)", "source_tables": ["candidate", "people"]}
{"sample_id": 2422, "db_id": "candidate_poll", "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.", "rationale": ["Identify the relevant tables: 'candidate' for support and oppose rates, and 'people' for candidate names.", "Determine the columns needed: 'Name' from 'people' and 'Support_rate', 'Oppose_rate' from 'candidate'.", "Establish the condition: Support_rate should be less than Oppose_rate.", "Use a JOIN to connect 'candidate' and 'people' on the common column 'People_ID'.", "Construct the SQL SELECT statement to retrieve the names of candidates meeting the condition."], "pred_sql": "SELECT p.Name FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Support_rate < c.Oppose_rate;", "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate", "source_tables": ["candidate", "people"]}
{"sample_id": 2423, "db_id": "candidate_poll", "question": "What are the names of candidates who have a lower support rate than oppose rate?", "rationale": ["Identify the relevant tables: 'candidate' for support and oppose rates, and 'people' for candidate names.", "Determine the condition: we need candidates where the support rate is less than the oppose rate.", "Join the 'candidate' table with the 'people' table on the 'People_ID' to access candidate names.", "Select the 'Name' from the 'people' table where the condition of support rate being less than oppose rate is met."], "pred_sql": "SELECT p.Name FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Support_rate < c.Oppose_rate;", "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate", "source_tables": ["candidate", "people"]}
{"sample_id": 2424, "db_id": "candidate_poll", "question": "how many people are there whose weight is higher than 85 for each gender?", "rationale": ["Identify the relevant table: The 'people' table contains the information about individuals, including their weight and gender.", "Determine the condition: We need to filter the records where the weight is greater than 85.", "Group the results: Since we want the count of people for each gender, we will group the results by the 'Sex' column.", "Count the number of people: Use the COUNT() function to count the number of individuals that meet the weight condition for each gender."], "pred_sql": "SELECT Sex, COUNT(*) AS Number_of_People FROM people WHERE Weight > 85 GROUP BY Sex;", "gold_sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex", "source_tables": ["people"]}
{"sample_id": 2425, "db_id": "candidate_poll", "question": "Count the number of people of each sex who have a weight higher than 85.", "rationale": ["Identify the relevant table: The 'people' table contains the 'Sex' and 'Weight' columns needed for this query.", "Determine the condition: We need to filter for people with a weight greater than 85.", "Count the number of people: We will use the COUNT() function to count the number of entries that meet the condition.", "Group the results by sex: We will use GROUP BY to aggregate the counts by the 'Sex' column."], "pred_sql": "SELECT Sex, COUNT(*) AS Number_of_People FROM people WHERE Weight > 85 GROUP BY Sex;", "gold_sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex", "source_tables": ["people"]}
{"sample_id": 2426, "db_id": "candidate_poll", "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.", "rationale": ["Identify the columns needed: Support_rate, Consider_rate, and Oppose_rate from the candidate table.", "To find the highest support percentage, use the MAX() function on the Support_rate column.", "To find the lowest consider rate, use the MIN() function on the Consider_rate column.", "To find the lowest oppose rate, use the MIN() function on the Oppose_rate column.", "Combine these functions in a single SELECT statement to retrieve the desired values."], "pred_sql": "SELECT MAX(Support_rate) AS Highest_Support, MIN(Consider_rate) AS Lowest_Consider, MIN(Oppose_rate) AS Lowest_Oppose FROM candidate;", "gold_sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "source_tables": ["candidate"]}
{"sample_id": 2427, "db_id": "candidate_poll", "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?", "rationale": ["Identify the columns needed: Support_rate, Consider_rate, and Oppose_rate from the candidate table.", "Use aggregate functions to find the maximum support rate (MAX), minimum consider rate (MIN), and minimum oppose rate (MIN).", "Construct the SQL SELECT statement to retrieve these values from the candidate table."], "pred_sql": "SELECT MAX(Support_rate) AS Max_Support_Rate, MIN(Consider_rate) AS Min_Consider_Rate, MIN(Oppose_rate) AS Min_Oppose_Rate FROM candidate;", "gold_sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "source_tables": ["candidate"]}
{"sample_id": 2428, "db_id": "candidate_poll", "question": "list all female (sex is F) candidate names in the alphabetical order.", "rationale": ["Identify the tables involved: 'people' for candidate names and 'candidate' for filtering candidates.", "We need to join the 'people' table with the 'candidate' table on the 'People_ID' column to get the names of candidates.", "Filter the results to include only female candidates by specifying 'p.Sex = 'F' in the WHERE clause.", "Select the 'Name' column from the 'people' table to get the names of the female candidates.", "Order the results alphabetically by the 'Name' column using ORDER BY p.Name ASC."], "pred_sql": "SELECT p.Name FROM people p JOIN candidate c ON p.People_ID = c.People_ID WHERE p.Sex = 'F' ORDER BY p.Name ASC;", "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "source_tables": ["candidate", "people"]}
{"sample_id": 2429, "db_id": "candidate_poll", "question": "What are the names of all female candidates in alphabetical order (sex is F)?", "rationale": ["Identify the relevant tables: 'people' for candidate names and 'candidate' for filtering by gender.", "We need to select the 'Name' column from the 'people' table.", "To find female candidates, we will filter the results where 'Sex' is 'F'.", "We need to join the 'people' table with the 'candidate' table on the 'People_ID' column to link candidates with their details.", "Finally, we will order the results alphabetically by the 'Name' column."], "pred_sql": "SELECT p.Name FROM people p JOIN candidate c ON p.People_ID = c.People_ID WHERE p.Sex = 'F' ORDER BY p.Name ASC;", "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "source_tables": ["candidate", "people"]}
{"sample_id": 2430, "db_id": "candidate_poll", "question": "find the name of people whose height is lower than the average.", "rationale": ["Identify the table that contains the relevant data: the 'people' table has the 'Height' and 'Name' columns.", "To find people whose height is lower than the average, we need to calculate the average height using the AVG() function.", "The subquery (SELECT AVG(Height) FROM people) calculates the average height of all individuals in the 'people' table.", "The main query selects the 'Name' of individuals from the 'people' table where their 'Height' is less than the calculated average height."], "pred_sql": "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people);", "gold_sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "source_tables": ["people"]}
{"sample_id": 2431, "db_id": "candidate_poll", "question": "What are the names of people who are shorter than average?", "rationale": ["Identify the relevant table: 'people' contains the information about individuals including their height and names.", "Determine the condition: We need to find people who are shorter than the average height.", "Calculate the average height: Use the AVG() function to compute the average height from the 'people' table.", "Formulate the SQL query: Select the 'Name' from 'people' where 'Height' is less than the average height calculated in the subquery."], "pred_sql": "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people);", "gold_sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "source_tables": ["people"]}
{"sample_id": 2432, "db_id": "candidate_poll", "question": "List all info about all people.", "rationale": ["The user wants to list all information about all people.", "To achieve this, we need to select all columns from the 'people' table.", "The SQL command to select all columns is 'SELECT *'.", "We specify the table we are selecting from, which is 'people'.", "Combining these elements, the full SQL query becomes 'SELECT * FROM people;'."], "pred_sql": "SELECT * FROM people;", "gold_sql": "SELECT * FROM people", "source_tables": ["people"]}
{"sample_id": 2433, "db_id": "candidate_poll", "question": "What is all the information about all people?", "rationale": ["The user wants to retrieve all information about all people.", "To get all information from a table, we use the SELECT statement with an asterisk (*) to denote all columns.", "The table containing the information about people is named 'people'.", "Thus, the SQL query to retrieve all information about all people is 'SELECT * FROM people'."], "pred_sql": "SELECT * FROM people;", "gold_sql": "SELECT * FROM people", "source_tables": ["people"]}
{"sample_id": 2434, "db_id": "movie_1", "question": "Find the titles of all movies directed by steven spielberg.", "rationale": ["Identify the table that contains the movie titles and directors, which is the 'Movie' table.", "Determine the specific columns needed for the query: we need 'title' for the movie titles and 'director' to filter the results.", "Formulate the SQL SELECT statement to retrieve the 'title' column from the 'Movie' table.", "Add a WHERE clause to filter the results to only include movies directed by 'steven spielberg'."], "pred_sql": "SELECT title FROM Movie WHERE director = 'steven spielberg';", "gold_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "source_tables": ["movie"]}
{"sample_id": 2435, "db_id": "movie_1", "question": "What are the names of all movies directed by Steven Spielberg?", "rationale": ["Identify the table that contains the movie information, which is the 'Movie' table.", "Determine the relevant column that contains the director's name, which is 'director'.", "Specify the condition to filter the results to only include movies directed by 'Steven Spielberg'.", "Select the 'title' column to retrieve the names of the movies directed by him."], "pred_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg';", "gold_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "source_tables": ["movie"]}
{"sample_id": 2436, "db_id": "movie_1", "question": "What is the name of the movie produced after 2000 and directed by James Cameron?", "rationale": ["Identify the relevant table: The query is about movies, so we will use the 'Movie' table.", "Determine the conditions: We need movies produced after the year 2000 and directed by James Cameron.", "Translate the conditions into SQL: Use the WHERE clause to filter movies based on the year and director.", "Select the title of the movies that meet the criteria: Use SELECT to get the 'title' column from the 'Movie' table."], "pred_sql": "SELECT title FROM Movie WHERE year > '2000' AND director = 'James Cameron';", "gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "source_tables": ["movie"]}
{"sample_id": 2437, "db_id": "movie_1", "question": "What are the titles of all movies that James Cameron directed after 2000?", "rationale": ["Identify the table that contains the movie information, which is the 'Movie' table.", "We need to select the 'title' column from the 'Movie' table.", "We need to filter the results to only include movies directed by 'James Cameron'.", "Additionally, we need to filter the results to include only movies released after the year 2000.", "Combine these conditions using the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND year > '2000';", "gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "source_tables": ["movie"]}
{"sample_id": 2438, "db_id": "movie_1", "question": "How many movies were made before 2000?", "rationale": ["Identify the table that contains the relevant data: the 'Movie' table.", "Determine the condition for the query: we need movies made before the year 2000.", "Use the COUNT() function to count the number of movies that meet the condition.", "Construct the SQL query to select the count of movies from the 'Movie' table where the year is less than 2000."], "pred_sql": "SELECT COUNT(*) AS movie_count FROM Movie WHERE year < '2000';", "gold_sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "source_tables": ["movie"]}
{"sample_id": 2439, "db_id": "movie_1", "question": "How many movies were made before 2000?", "rationale": ["Identify the table that contains the relevant data: the 'Movie' table.", "Determine the condition for the query: we need movies made before the year 2000.", "Use the COUNT() function to count the number of movies that meet the condition.", "Construct the SQL query to select the count of movies from the 'Movie' table where the 'year' is less than '2000'."], "pred_sql": "SELECT COUNT(*) AS movie_count FROM Movie WHERE year < '2000';", "gold_sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "source_tables": ["movie"]}
{"sample_id": 2440, "db_id": "movie_1", "question": "Who is the director of movie Avatar?", "rationale": ["Identify the table that contains the information about movies, which is the 'Movie' table.", "Determine the column that contains the title of the movie, which is 'title'.", "Determine the column that contains the director's name, which is 'director'.", "Formulate a SQL query to select the 'director' from the 'Movie' table where the 'title' is 'Avatar'."], "pred_sql": "SELECT director FROM Movie WHERE title = 'Avatar';", "gold_sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "source_tables": ["movie"]}
{"sample_id": 2441, "db_id": "movie_1", "question": "Who directed Avatar?", "rationale": ["Identify the table that contains the information about movies, which is the 'Movie' table.", "Determine the column that holds the title of the movie, which is 'title'.", "Identify the column that contains the director's name, which is 'director'.", "Formulate a SQL query to select the 'director' from the 'Movie' table where the 'title' is 'Avatar'."], "pred_sql": "SELECT director FROM Movie WHERE title = 'Avatar';", "gold_sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "source_tables": ["movie"]}
{"sample_id": 2442, "db_id": "movie_1", "question": "How many reviewers listed?", "rationale": ["Identify the table that contains the information about reviewers, which is the 'Reviewer' table.", "To find out how many reviewers are listed, we need to count the number of entries in the 'Reviewer' table.", "Use the COUNT() function to count the total number of rows in the 'Reviewer' table.", "Construct the SQL query to select the count of reviewers and give it an alias 'reviewer_count'."], "pred_sql": "SELECT COUNT(*) AS reviewer_count FROM Reviewer;", "gold_sql": "SELECT count(*) FROM Reviewer", "source_tables": ["reviewer"]}
{"sample_id": 2443, "db_id": "movie_1", "question": "How many reviewers are there?", "rationale": ["Identify the table that contains the information about reviewers, which is the 'Reviewer' table.", "To find out how many reviewers there are, we need to count the number of entries in the 'Reviewer' table.", "Use the COUNT() function to count the total number of rows in the 'Reviewer' table.", "Select the count and label it as 'reviewer_count' for clarity."], "pred_sql": "SELECT COUNT(*) AS reviewer_count FROM Reviewer;", "gold_sql": "SELECT count(*) FROM Reviewer", "source_tables": ["reviewer"]}
{"sample_id": 2444, "db_id": "movie_1", "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?", "rationale": ["Identify the table that contains the reviewer information, which is the 'Reviewer' table.", "Determine the column that holds the reviewer's name, which is 'name'.", "To find a reviewer whose name contains the substring 'Mike', use the SQL 'LIKE' operator with wildcards.", "Construct the SQL query to select the 'rID' from the 'Reviewer' table where the 'name' matches the condition."], "pred_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%';", "gold_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%'", "source_tables": ["reviewer"]}
{"sample_id": 2445, "db_id": "movie_1", "question": "What is the id of the reviewer whose name includes the word \"Mike\"?", "rationale": ["Identify the table that contains reviewer information, which is the 'Reviewer' table.", "Determine the column that contains the reviewer's name, which is 'name'.", "Use the SQL 'SELECT' statement to retrieve the 'rID' of the reviewer.", "Apply a 'WHERE' clause to filter the results to only those reviewers whose name includes the word 'Mike'.", "Use the 'LIKE' operator with wildcards '%' to match any characters before and after 'Mike'."], "pred_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%';", "gold_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%'", "source_tables": ["reviewer"]}
{"sample_id": 2446, "db_id": "movie_1", "question": "What is the reviewer id of Daniel Lewis?", "rationale": ["Identify the table that contains the reviewer's information, which is the Reviewer table.", "Determine the column that holds the reviewer's name, which is the 'name' column in the Reviewer table.", "Formulate a SQL query to select the 'rID' from the Reviewer table where the 'name' matches 'Daniel Lewis'."], "pred_sql": "SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis';", "gold_sql": "SELECT rID FROM Reviewer WHERE name  =  'Daniel Lewis'", "source_tables": ["reviewer"]}
{"sample_id": 2447, "db_id": "movie_1", "question": "What is the id of the reviewer named Daniel Lewis?", "rationale": ["Identify the table that contains the reviewer information, which is the 'Reviewer' table.", "Determine the column that holds the reviewer's name, which is 'name'.", "Formulate a query to select the 'rID' from the 'Reviewer' table where the 'name' matches 'Daniel Lewis'."], "pred_sql": "SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis';", "gold_sql": "SELECT rID FROM Reviewer WHERE name  =  'Daniel Lewis'", "source_tables": ["reviewer"]}
{"sample_id": 2448, "db_id": "movie_1", "question": "What is the total number of ratings that has more than 3 stars?", "rationale": ["Identify the table that contains the ratings, which is the 'Rating' table.", "Determine the condition for filtering ratings, which is ratings greater than 3 stars.", "Use the COUNT() function to count the total number of ratings that meet the condition.", "Construct the SQL query to select the count of ratings from the 'Rating' table where the stars are greater than 3."], "pred_sql": "SELECT COUNT(*) AS total_ratings FROM Rating WHERE stars > '3';", "gold_sql": "SELECT count(*) FROM Rating WHERE stars  >  3", "source_tables": ["rating"]}
{"sample_id": 2449, "db_id": "movie_1", "question": "How many movie ratings have more than 3 stars?", "rationale": ["Identify the table that contains the ratings, which is the Rating table.", "We need to count the number of ratings that have more than 3 stars.", "Use the COUNT() function to count the number of rows that meet the condition.", "The condition is specified in the WHERE clause, where we check if the stars column is greater than '3'.", "The final SQL query selects the count of ratings that satisfy this condition."], "pred_sql": "SELECT COUNT(*) AS rating_count FROM Rating WHERE stars > '3';", "gold_sql": "SELECT count(*) FROM Rating WHERE stars  >  3", "source_tables": ["rating"]}
{"sample_id": 2450, "db_id": "movie_1", "question": "What is the lowest and highest rating star?", "rationale": ["Identify the requirement to find the lowest and highest rating stars.", "Determine that the relevant table for ratings is the 'Rating' table.", "Use the aggregate functions MIN() and MAX() to find the lowest and highest values in the 'stars' column.", "Construct the SQL query to select the minimum and maximum stars from the Rating table."], "pred_sql": "SELECT MIN(stars) AS lowest_rating, MAX(stars) AS highest_rating FROM Rating;", "gold_sql": "SELECT max(stars) ,  min(stars) FROM Rating", "source_tables": ["rating"]}
{"sample_id": 2451, "db_id": "movie_1", "question": "What is the maximum and mininum number of stars a rating can receive?", "rationale": ["Identify the columns needed to find the maximum and minimum stars from the ratings.", "The relevant table for ratings is the 'Rating' table, which contains the 'stars' column.", "Use the SQL aggregate functions MAX() and MIN() to find the highest and lowest values in the 'stars' column.", "Construct the SQL query to select the maximum and minimum stars from the 'Rating' table."], "pred_sql": "SELECT MAX(stars) AS max_stars, MIN(stars) AS min_stars FROM Rating;", "gold_sql": "SELECT max(stars) ,  min(stars) FROM Rating", "source_tables": ["rating"]}
{"sample_id": 2452, "db_id": "movie_1", "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "rationale": ["We need to find all years that have movies rated 4 or 5 stars.", "To do this, we will join the Movie table with the Rating table on the movie ID (mID).", "We will filter the results to include only those ratings that are either 4 or 5 stars.", "We will select the distinct years from the Movie table to avoid duplicates.", "Finally, we will sort the results in increasing order of year."], "pred_sql": "SELECT DISTINCT Movie.year FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars IN ('4', '5') ORDER BY Movie.year ASC;", "gold_sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "source_tables": ["rating", "movie"]}
{"sample_id": 2453, "db_id": "movie_1", "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "rationale": ["We need to find the years in which movies received a rating of 4 or 5 stars.", "To do this, we will join the Movie table with the Rating table on the movie ID (mID).", "We will filter the results to include only those ratings that are either 4 or 5 stars.", "Finally, we will select the distinct years from the Movie table and order them from oldest to most recent."], "pred_sql": "SELECT DISTINCT Movie.year \nFROM Movie \nJOIN Rating ON Movie.mID = Rating.mID \nWHERE Rating.stars IN ('4', '5') \nORDER BY Movie.year ASC;", "gold_sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "source_tables": ["rating", "movie"]}
{"sample_id": 2454, "db_id": "movie_1", "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.", "rationale": ["Identify the tables involved: Movie and Rating.", "We need to retrieve the director's name and the movie title, so we will select 'Movie.director' and 'Movie.title'.", "To find the movies with a 5-star rating, we need to filter the results based on the 'stars' column in the Rating table.", "We will join the Movie and Rating tables on the 'mID' column to link movies with their ratings.", "Use a WHERE clause to filter the ratings to only include those that are equal to '5'.", "Use DISTINCT to ensure that we do not have duplicate entries for directors and movie titles."], "pred_sql": "SELECT DISTINCT Movie.director, Movie.title \nFROM Movie \nJOIN Rating ON Movie.mID = Rating.mID \nWHERE Rating.stars = '5';", "gold_sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "source_tables": ["rating", "movie"]}
{"sample_id": 2455, "db_id": "movie_1", "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?", "rationale": ["Identify the tables involved: Movie and Rating.", "We need to find directors of movies that received a 5-star rating, so we will join the Movie table with the Rating table on the movie ID (mID).", "We will filter the results to only include ratings where the stars are equal to '5'.", "Finally, we will select the distinct director names and movie titles from the results."], "pred_sql": "SELECT DISTINCT Movie.director, Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars = '5';", "gold_sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "source_tables": ["rating", "movie"]}
{"sample_id": 2456, "db_id": "movie_1", "question": "What is the average rating star for each reviewer?", "rationale": ["Identify the tables involved: We need data from the Reviewer and Rating tables.", "Determine the required information: We need the reviewer's name and the average rating stars.", "Join the tables: We will join the Reviewer table with the Rating table on the reviewer ID (rID).", "Calculate the average rating: Use the AVG() function to calculate the average of the stars given by each reviewer.", "Group the results: Use GROUP BY to group the results by reviewer ID to get the average rating for each reviewer."], "pred_sql": "SELECT Reviewer.name, AVG(CAST(Rating.stars AS REAL)) AS average_rating FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID GROUP BY Reviewer.rID;", "gold_sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "source_tables": ["rating", "reviewer"]}
{"sample_id": 2457, "db_id": "movie_1", "question": "What is the average number of stars that each reviewer awards for a movie?", "rationale": ["Identify the tables involved: We need data from the Rating and Reviewer tables.", "Determine the required information: We want the average number of stars awarded by each reviewer.", "Use the AVG() function to calculate the average stars for each reviewer.", "Join the Rating table with the Reviewer table on the rID to get the reviewer's name along with their ratings.", "Group the results by the reviewer's ID to ensure we get the average stars for each individual reviewer."], "pred_sql": "SELECT Reviewer.name, AVG(Rating.stars) AS average_stars\nFROM Rating\nJOIN Reviewer ON Rating.rID = Reviewer.rID\nGROUP BY Reviewer.rID;", "gold_sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "source_tables": ["rating", "reviewer"]}
{"sample_id": 2458, "db_id": "movie_1", "question": "Find the titles of all movies that have no ratings.", "rationale": ["Identify the main requirement: We need to find titles of movies with no ratings.", "To find movies with no ratings, we can use a subquery to get all movie IDs (mID) that have ratings from the Rating table.", "We will select the titles from the Movie table where the mID is not in the list of mIDs returned by the subquery.", "The subquery will select all mIDs from the Rating table, which represents movies that have been rated.", "The final SQL query will select the title from the Movie table where the mID is not present in the list of rated mIDs."], "pred_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating);", "gold_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "source_tables": ["rating", "movie"]}
{"sample_id": 2459, "db_id": "movie_1", "question": "What are the titles of all movies that have not been rated?", "rationale": ["Identify the main requirement: We need the titles of movies that have not been rated.", "To find movies that have not been rated, we can use a subquery to get all movie IDs (mID) that have ratings.", "We will select the titles from the Movie table where the mID is not in the list of rated movie IDs from the Rating table."], "pred_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating);", "gold_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "source_tables": ["rating", "movie"]}
{"sample_id": 2460, "db_id": "movie_1", "question": "Find the names of all reviewers who have ratings with a NULL value for the date.", "rationale": ["Identify the tables involved: Reviewer and Rating.", "Determine the relationship between the tables: Reviewer is linked to Rating through rID.", "We need to find reviewers with ratings that have a NULL value for the ratingDate.", "Construct the SQL query to select the names of reviewers from the Reviewer table where there is a corresponding entry in the Rating table with a NULL ratingDate."], "pred_sql": "SELECT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.ratingDate IS NULL;", "gold_sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  'null'", "source_tables": ["rating", "reviewer"]}
{"sample_id": 2461, "db_id": "movie_1", "question": "What are the different names of all reviewers whose ratings do not have a date field?", "rationale": ["Identify the tables involved: Reviewer and Rating.", "We need to find reviewers whose ratings do not have a date field, which means we are looking for records in the Rating table where the ratingDate is NULL.", "To get the names of the reviewers, we will join the Reviewer table with the Rating table on the rID field.", "We will select distinct names from the Reviewer table where the corresponding rating in the Rating table has a NULL ratingDate."], "pred_sql": "SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.ratingDate IS NULL;", "gold_sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  'null'", "source_tables": ["rating", "reviewer"]}
{"sample_id": 2462, "db_id": "movie_1", "question": "What is the average rating stars and title for the oldest movie?", "rationale": ["Identify the oldest movie by finding the minimum year in the Movie table.", "Join the Movie table with the Rating table on the movie ID (mID) to access the ratings for the movies.", "Calculate the average rating stars using the AVG function on the stars column from the Rating table.", "Select the title of the movie along with the calculated average rating.", "Group the results by title to ensure we get the average rating for the specific movie."], "pred_sql": "SELECT title, AVG(stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE year = (SELECT MIN(year) FROM Movie) GROUP BY title;", "gold_sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "source_tables": ["rating", "movie"]}
{"sample_id": 2463, "db_id": "movie_1", "question": "For the oldest movie listed, what is its average rating and title?", "rationale": ["Identify the oldest movie by finding the minimum year in the Movie table.", "Join the Movie table with the Rating table on the movie ID (mID) to access ratings for each movie.", "Calculate the average rating for the oldest movie using the AVG function on the stars column.", "Select the title of the movie and the calculated average rating in the final output."], "pred_sql": "SELECT title, AVG(stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE year = (SELECT MIN(year) FROM Movie) GROUP BY title;", "gold_sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "source_tables": ["rating", "movie"]}
{"sample_id": 2464, "db_id": "movie_1", "question": "What is the name of the most recent movie?", "rationale": ["Identify the table that contains the movie information, which is the 'Movie' table.", "To find the most recent movie, we need to sort the movies by the 'year' column in descending order.", "We will limit the results to 1 to get only the most recent movie.", "Finally, we will select the 'title' of that movie."], "pred_sql": "SELECT title FROM Movie ORDER BY year DESC LIMIT 1;", "gold_sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "source_tables": ["movie"]}
{"sample_id": 2465, "db_id": "movie_1", "question": "What is the title of the newest movie?", "rationale": ["Identify the table that contains the movie titles, which is the 'Movie' table.", "To find the newest movie, we need to sort the movies by the 'year' column in descending order.", "We will limit the results to 1 to get only the newest movie.", "The final SQL query selects the 'title' of the movie from the 'Movie' table, orders the results by 'year' in descending order, and limits the output to 1."], "pred_sql": "SELECT title FROM Movie ORDER BY year DESC LIMIT 1;", "gold_sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "source_tables": ["movie"]}
{"sample_id": 2466, "db_id": "movie_1", "question": "What is the maximum stars and year for the most recent movie?", "rationale": ["Identify the relevant tables: Movie and Rating.", "We need to find the maximum stars given in ratings, so we will use the MAX() function on the stars column from the Rating table.", "To find the most recent movie, we need to determine the maximum year from the Movie table.", "We will join the Movie and Rating tables on the mID column to correlate movies with their ratings.", "The final query will select the maximum stars and the year of the most recent movie by filtering the results based on the maximum year found."], "pred_sql": "SELECT MAX(R.stars) AS max_stars, M.year FROM Movie M JOIN Rating R ON M.mID = R.mID WHERE M.year = (SELECT MAX(year) FROM Movie)", "gold_sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "source_tables": ["rating", "movie"]}
{"sample_id": 2467, "db_id": "movie_1", "question": "What is highest rating for the most recent movie and when was it released?", "rationale": ["Identify the most recent movie by finding the maximum year in the Movie table.", "Join the Movie table with the Rating table on the movie ID (mID) to access the ratings for the most recent movie.", "Use the MAX function to find the highest rating (stars) for the most recent movie.", "Select the year of the most recent movie along with the highest rating."], "pred_sql": "SELECT MAX(R.stars) AS highest_rating, M.year FROM Movie M JOIN Rating R ON M.mID = R.mID WHERE M.year = (SELECT MAX(year) FROM Movie)", "gold_sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "source_tables": ["rating", "movie"]}
{"sample_id": 2468, "db_id": "movie_1", "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "rationale": ["Identify the requirement: We need to find the names of movies released after the year of all movies directed by Steven Spielberg.", "Determine the relevant tables: The 'Movie' table contains the necessary information about movie titles and their release years.", "Formulate a subquery to find the maximum year of movies directed by Steven Spielberg: This will help us establish the cutoff year for our main query.", "Use the result of the subquery to filter the main query: We want movies whose release year is greater than the year obtained from the subquery."], "pred_sql": "SELECT title FROM Movie WHERE year > (SELECT MAX(year) FROM Movie WHERE director = 'Steven Spielberg')", "gold_sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  'Steven Spielberg')", "source_tables": ["movie"]}
{"sample_id": 2469, "db_id": "movie_1", "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?", "rationale": ["Identify the requirement to find movies created after the most recent film by Steven Spielberg.", "To find the most recent film by Steven Spielberg, we need to select the maximum year from the Movie table where the director is 'Steven Spielberg'.", "Once we have the year of the most recent Spielberg film, we can then select all movie titles from the Movie table where the year is greater than this value.", "Construct the SQL query to first find the maximum year for Spielberg's films and then use that in a WHERE clause to filter the movies created after that year."], "pred_sql": "SELECT title FROM Movie WHERE year > (SELECT MAX(year) FROM Movie WHERE director = 'Steven Spielberg');", "gold_sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  'Steven Spielberg')", "source_tables": ["movie"]}
{"sample_id": 2470, "db_id": "movie_1", "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "rationale": ["Identify the movies directed by James Cameron to find their average rating.", "Calculate the average stars for the movies directed by James Cameron using a subquery.", "Select the titles and directors of movies that have a star rating greater than this average.", "Use a subquery to filter the movies based on the calculated average stars."], "pred_sql": "SELECT title, director FROM Movie WHERE mID IN (SELECT mID FROM Rating WHERE stars > (SELECT AVG(stars) FROM Rating WHERE mID IN (SELECT mID FROM Movie WHERE director = 'James Cameron')));", "gold_sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  'James Cameron')", "source_tables": ["rating", "movie"]}
{"sample_id": 2471, "db_id": "movie_1", "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?", "rationale": ["Identify the requirement: We need to find titles and directors of movies with ratings higher than the average rating of James Cameron's films.", "To find the average rating of James Cameron's films, we need to join the Rating and Movie tables on mID, filtering for movies directed by 'James Cameron'.", "Calculate the average stars using the AVG() function on the stars column from the Rating table.", "Next, we need to find all movies that have a rating higher than this average. This requires a subquery that selects mID from the Rating table where stars exceed the calculated average.", "Finally, we select the title and director from the Movie table where the mID is in the list of mIDs from the previous subquery."], "pred_sql": "SELECT title, director FROM Movie WHERE mID IN (SELECT mID FROM Rating WHERE stars > (SELECT AVG(stars) FROM Rating JOIN Movie ON Rating.mID = Movie.mID WHERE director = 'James Cameron'))", "gold_sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  'James Cameron')", "source_tables": ["rating", "movie"]}
{"sample_id": 2472, "db_id": "movie_1", "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.", "rationale": ["Identify the columns needed: reviewer name, movie title, stars, and rating date.", "Determine the tables involved: Rating, Reviewer, and Movie.", "Establish the relationships between the tables using JOINs: Rating links to Reviewer via rID and to Movie via mID.", "Construct the SELECT statement to retrieve the required columns from the joined tables.", "Add an ORDER BY clause to sort the results first by reviewer name, then by movie title, and finally by the number of stars."], "pred_sql": "SELECT Reviewer.name, Movie.title, Rating.stars, Rating.ratingDate \nFROM Rating \nJOIN Reviewer ON Rating.rID = Reviewer.rID \nJOIN Movie ON Rating.mID = Movie.mID \nORDER BY Reviewer.name, Movie.title, Rating.stars;", "gold_sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2473, "db_id": "movie_1", "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?", "rationale": ["Identify the columns needed: reviewer name, film title, movie rating, and rating date.", "Determine the tables involved: Reviewer, Movie, and Rating.", "Establish the relationships between the tables using JOINs: Rating links to Reviewer and Movie through their respective IDs.", "Construct the SELECT statement to retrieve the required columns from the joined tables.", "Add an ORDER BY clause to sort the results first by reviewer name, then by movie title, and finally by rating."], "pred_sql": "SELECT Reviewer.name, Movie.title, Rating.stars, Rating.ratingDate \nFROM Rating \nJOIN Reviewer ON Rating.rID = Reviewer.rID \nJOIN Movie ON Rating.mID = Movie.mID \nORDER BY Reviewer.name, Movie.title, Rating.stars;", "gold_sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2474, "db_id": "movie_1", "question": "Find the names of all reviewers who have contributed three or more ratings.", "rationale": ["We need to find reviewers who have contributed three or more ratings.", "To do this, we will join the Reviewer table with the Rating table on the reviewer ID (rID).", "Next, we will group the results by the reviewer ID to aggregate the ratings for each reviewer.", "We will use the COUNT function to count the number of ratings each reviewer has given.", "Finally, we will filter the groups using the HAVING clause to include only those reviewers who have three or more ratings."], "pred_sql": "SELECT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID GROUP BY Reviewer.rID HAVING COUNT(Rating.mID) >= 3;", "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "source_tables": ["rating", "reviewer"]}
{"sample_id": 2475, "db_id": "movie_1", "question": "What are the names of all reviewers that have rated 3 or more movies?", "rationale": ["We need to find the names of reviewers who have rated 3 or more movies.", "To do this, we will join the Reviewer table with the Rating table on the reviewer ID (rID).", "After joining, we will group the results by the reviewer ID to count the number of ratings each reviewer has given.", "We will use the HAVING clause to filter the groups to only include those where the count of rated movies (Rating.mID) is 3 or more."], "pred_sql": "SELECT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID GROUP BY Reviewer.rID HAVING COUNT(Rating.mID) >= 3;", "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "source_tables": ["rating", "reviewer"]}
{"sample_id": 2476, "db_id": "movie_1", "question": "Find the names of all reviewers who rated Gone with the Wind.", "rationale": ["Identify the tables involved: Reviewer, Rating, and Movie.", "We need to find the names of reviewers, so we will select the 'name' column from the Reviewer table.", "To link reviewers to their ratings, we will join the Rating table on the rID column.", "Next, we need to link the ratings to the movies, so we will join the Movie table on the mID column.", "We need to filter the results to only include ratings for the movie titled 'Gone with the Wind', so we will add a WHERE clause for the Movie.title."], "pred_sql": "SELECT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID WHERE Movie.title = 'Gone with the Wind';", "gold_sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2477, "db_id": "movie_1", "question": "What are the names of all the different reviewers who rates Gone with the Wind?", "rationale": ["Identify the tables involved: Reviewer, Rating, and Movie.", "We need to find reviewers who rated a specific movie, so we will join the Reviewer and Rating tables on the rID column.", "Next, we will join the Rating table with the Movie table on the mID column to filter by the movie title.", "We will use a WHERE clause to specify that we are looking for ratings of the movie titled 'Gone with the Wind'.", "To get only unique reviewer names, we will use the DISTINCT keyword in our SELECT statement."], "pred_sql": "SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID WHERE Movie.title = 'Gone with the Wind';", "gold_sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2478, "db_id": "movie_1", "question": "Find the names of all directors whose movies are rated by Sarah Martinez.", "rationale": ["Identify the tables involved: Movie, Reviewer, and Rating.", "We need to find directors of movies that have been rated by a specific reviewer, Sarah Martinez.", "To do this, we will join the Movie table with the Rating table on the movie ID (mID) and then join the Rating table with the Reviewer table on the reviewer ID (rID).", "We will filter the results to only include ratings made by Sarah Martinez using a WHERE clause.", "Finally, we will select the distinct names of the directors from the Movie table to avoid duplicates."], "pred_sql": "SELECT DISTINCT Movie.director FROM Movie JOIN Rating ON Movie.mID = Rating.mID JOIN Reviewer ON Rating.rID = Reviewer.rID WHERE Reviewer.name = 'Sarah Martinez';", "gold_sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2479, "db_id": "movie_1", "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?", "rationale": ["Identify the relevant tables: Movie, Rating, and Reviewer.", "We need to find directors of movies that have been reviewed by a specific reviewer, Sarah Martinez.", "Join the Movie table with the Rating table on the movie ID (mID) to link movies with their ratings.", "Join the Rating table with the Reviewer table on the reviewer ID (rID) to link ratings with reviewers.", "Filter the results to only include ratings made by Sarah Martinez.", "Select the distinct directors from the resulting dataset to avoid duplicates."], "pred_sql": "SELECT DISTINCT Movie.director FROM Movie JOIN Rating ON Movie.mID = Rating.mID JOIN Reviewer ON Rating.rID = Reviewer.rID WHERE Reviewer.name = 'Sarah Martinez';", "gold_sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2480, "db_id": "movie_1", "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.", "rationale": ["Identify the tables involved: Rating, Reviewer, and Movie.", "Determine the columns to be selected: Reviewer.name, Movie.title, and Rating.stars.", "Establish the relationships between the tables using JOINs: Rating is linked to Reviewer via rID and to Movie via mID.", "Apply a condition to filter the results where the reviewer's name matches the movie's director."], "pred_sql": "SELECT Reviewer.name, Movie.title, Rating.stars \nFROM Rating \nJOIN Reviewer ON Rating.rID = Reviewer.rID \nJOIN Movie ON Rating.mID = Movie.mID \nWHERE Reviewer.name = Movie.director;", "gold_sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2481, "db_id": "movie_1", "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?", "rationale": ["Identify the tables involved: Reviewer, Movie, and Rating.", "Determine the columns needed: Reviewer.name, Movie.title, and Rating.stars.", "Establish the relationships between the tables using JOINs: Rating links to Reviewer and Movie.", "Set the condition to filter results where the reviewer's name matches the director's name."], "pred_sql": "SELECT Reviewer.name, Movie.title, Rating.stars \nFROM Reviewer \nJOIN Rating ON Reviewer.rID = Rating.rID \nJOIN Movie ON Rating.mID = Movie.mID \nWHERE Reviewer.name = Movie.director;", "gold_sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2482, "db_id": "movie_1", "question": "Return all reviewer names and movie names together in a single list.", "rationale": ["We need to return reviewer names and movie names together in a single list.", "To achieve this, we will use a SQL JOIN to combine data from the Reviewer, Rating, and Movie tables.", "First, we will join the Reviewer table with the Rating table on the reviewer ID (rID).", "Next, we will join the resulting table with the Movie table on the movie ID (mID).", "Finally, we will select the 'name' from the Reviewer table and the 'title' from the Movie table to get the desired output."], "pred_sql": "SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID;", "gold_sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "source_tables": ["movie", "reviewer"]}
{"sample_id": 2483, "db_id": "movie_1", "question": "What are the names of all the reviewers and movie names?", "rationale": ["Identify the tables involved: Reviewer, Movie, and Rating.", "We need to retrieve names of reviewers and movie titles, so we will select 'Reviewer.name' and 'Movie.title'.", "To connect the reviewers with the movies they rated, we need to join the Reviewer table with the Rating table on 'Reviewer.rID = Rating.rID'.", "Next, we join the Rating table with the Movie table on 'Rating.mID = Movie.mID' to get the movie titles associated with each rating.", "Finally, we construct the SQL query to select the required fields from the joined tables."], "pred_sql": "SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID;", "gold_sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "source_tables": ["movie", "reviewer"]}
{"sample_id": 2484, "db_id": "movie_1", "question": "Find the titles of all movies not reviewed by Chris Jackson.", "rationale": ["Identify the main goal: We need to find the titles of movies that have not been reviewed by a specific reviewer, Chris Jackson.", "To achieve this, we first need to find the unique identifier (rID) of Chris Jackson from the Reviewer table.", "Next, we will find all movie identifiers (mID) that have been reviewed by Chris Jackson by querying the Rating table using the rID obtained in the previous step.", "Finally, we will select the titles from the Movie table where the mID is not in the list of mIDs obtained from the previous step, ensuring we only get movies that have not been reviewed by Chris Jackson."], "pred_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating WHERE rID IN (SELECT rID FROM Reviewer WHERE name = 'Chris Jackson'));", "gold_sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2485, "db_id": "movie_1", "question": "What are the titles of all movies that were not reviewed by Chris Jackson?", "rationale": ["Identify the titles of all movies from the Movie table.", "We need to find movies that were not reviewed by a specific reviewer, Chris Jackson.", "First, we need to find the rID of Chris Jackson from the Reviewer table.", "Next, we will find all mIDs from the Rating table that correspond to Chris Jackson's rID.", "Finally, we will select titles from the Movie table where the mID is not in the list of mIDs obtained from the previous step."], "pred_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating WHERE rID = (SELECT rID FROM Reviewer WHERE name = 'Chris Jackson'));", "gold_sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "source_tables": ["rating", "movie", "reviewer"]}
{"sample_id": 2486, "db_id": "movie_1", "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "rationale": ["Identify the requirement to find directors who directed more than one movie.", "To achieve this, we need to group the movies by director and count the number of movies for each director.", "We will use a subquery to select directors with a count greater than one.", "Next, we will select the titles of all movies directed by these directors from the Movie table.", "Finally, we will sort the results first by director name and then by movie title."], "pred_sql": "SELECT M.title, M.director \nFROM Movie M \nWHERE M.director IN (\n    SELECT director \n    FROM Movie \n    GROUP BY director \n    HAVING COUNT(mID) > 1\n) \nORDER BY M.director, M.title;", "gold_sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "source_tables": ["movie"]}
{"sample_id": 2487, "db_id": "movie_1", "question": "For all directors who have directed more than one movie, what movies have they directed and what are their names?", "rationale": ["Identify the requirement to find directors who have directed more than one movie.", "To achieve this, I need to group the movies by their director and count the number of movies for each director.", "Using the HAVING clause, I can filter out directors who have directed only one movie, keeping those with a count greater than one.", "Next, I will select the titles of the movies directed by these directors.", "The final SQL query will involve a subquery to find the directors and a main query to select the movie titles and directors from the Movie table."], "pred_sql": "SELECT Movie.title, Movie.director \nFROM Movie \nWHERE Movie.director IN (\n    SELECT director \n    FROM Movie \n    GROUP BY director \n    HAVING COUNT(mID) > 1\n)", "gold_sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "source_tables": ["movie"]}
{"sample_id": 2488, "db_id": "movie_1", "question": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.", "rationale": ["Identify the requirement: We need to find directors who have directed more than one movie.", "To do this, we will first create a subquery that selects directors from the Movie table, groups them by their name, and counts the number of movies they directed.", "We will use the HAVING clause to filter these directors to only include those with a count greater than one.", "Next, we will use this subquery in the main query to select the titles and years of all movies directed by these directors.", "The final SQL query will select the title and year from the Movie table where the director is in the list of directors returned by the subquery."], "pred_sql": "SELECT title, year FROM Movie WHERE director IN (SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) > 1)", "gold_sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "source_tables": ["movie"]}
{"sample_id": 2489, "db_id": "movie_1", "question": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?", "rationale": ["Identify the requirement: We need to find directors who have directed more than one movie.", "To do this, we will use a subquery to group the movies by director and count the number of movies for each director.", "The subquery will select directors from the Movie table where the count of mID (movies) is greater than 1.", "Next, we will use this subquery in the main query to select the titles and years of movies directed by these directors.", "The final SQL query will select the title and year from the Movie table where the director is in the list of directors returned by the subquery."], "pred_sql": "SELECT title, year FROM Movie WHERE director IN (SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) > 1)", "gold_sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "source_tables": ["movie"]}
{"sample_id": 2490, "db_id": "movie_1", "question": "What are the names of the directors who made exactly one movie?", "rationale": ["Identify the relevant table: The 'Movie' table contains the information about movies and their directors.", "Determine the requirement: We need to find directors who have made exactly one movie.", "Use the GROUP BY clause: This will allow us to group the results by the director's name.", "Count the number of movies per director: We will use the COUNT function to count the number of movies (mID) for each director.", "Filter the results: We will use the HAVING clause to filter the groups to only include those where the count of movies is equal to one."], "pred_sql": "SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) = 1;", "gold_sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "source_tables": ["movie"]}
{"sample_id": 2491, "db_id": "movie_1", "question": "What are the names of all directors who made one movie?", "rationale": ["Identify the table that contains the director information, which is the 'Movie' table.", "We need to find directors who made only one movie, so we will group the results by the 'director' column.", "To count the number of movies each director has made, we will use the COUNT() function on the 'mID' column.", "We will use the HAVING clause to filter the groups to only include those where the count of 'mID' is equal to 1."], "pred_sql": "SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) = 1;", "gold_sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "source_tables": ["movie"]}
{"sample_id": 2492, "db_id": "movie_1", "question": "What are the names of the directors who made exactly one movie excluding director NULL?", "rationale": ["Identify the requirement: We need to find directors who have made exactly one movie.", "Exclude directors with NULL values: We will add a condition to filter out NULL directors.", "Group the results by director: This allows us to count the number of movies each director has made.", "Use the HAVING clause: This will filter the grouped results to only include directors with exactly one movie."], "pred_sql": "SELECT director FROM Movie WHERE director IS NOT NULL GROUP BY director HAVING COUNT(mID) = 1;", "gold_sql": "SELECT director FROM Movie WHERE director != 'null' GROUP BY director HAVING count(*)  =  1", "source_tables": ["movie"]}
{"sample_id": 2493, "db_id": "movie_1", "question": "What are the names of all directors who have made one movie except for the director named NULL?", "rationale": ["Identify the requirement to find directors who have made only one movie.", "Use the Movie table to access the director information.", "Group the results by director to count the number of movies each director has made.", "Use the HAVING clause to filter groups where the count of movies (mID) is exactly 1.", "Exclude directors with a NULL name by adding a condition in the HAVING clause to check that director IS NOT NULL."], "pred_sql": "SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) = 1 AND director IS NOT NULL;", "gold_sql": "SELECT director FROM Movie WHERE director != 'null' GROUP BY director HAVING count(*)  =  1", "source_tables": ["movie"]}
{"sample_id": 2494, "db_id": "movie_1", "question": "How many movie reviews does each director get?", "rationale": ["We need to count the number of reviews for each director.", "To do this, we will join the Movie table with the Rating table on the movie ID (mID).", "We will use a LEFT JOIN to ensure that we include directors who may not have any reviews.", "We will group the results by the director's name to get the count of reviews for each director.", "Finally, we will select the director's name and the count of reviews, which we will alias as 'review_count'."], "pred_sql": "SELECT Movie.director, COUNT(Rating.mID) AS review_count\nFROM Movie\nLEFT JOIN Rating ON Movie.mID = Rating.mID\nGROUP BY Movie.director;", "gold_sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "source_tables": ["rating", "movie"]}
{"sample_id": 2495, "db_id": "movie_1", "question": "For each director, how many reviews have they received?", "rationale": ["We need to count the number of reviews for each director.", "The relevant tables are Movie and Rating, as we need to link movies to their reviews.", "We will use a LEFT JOIN to connect the Movie table with the Rating table on the movie ID (mID).", "We will group the results by the director's name to get the count of reviews for each director.", "Finally, we will select the director's name and the count of reviews, which we will alias as review_count."], "pred_sql": "SELECT Movie.director, COUNT(Rating.rID) AS review_count\nFROM Movie\nLEFT JOIN Rating ON Movie.mID = Rating.mID\nGROUP BY Movie.director;", "gold_sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "source_tables": ["rating", "movie"]}
{"sample_id": 2496, "db_id": "movie_1", "question": "Find the movies with the highest average rating. Return the movie titles and average rating.", "rationale": ["Identify the tables involved: Movie and Rating.", "We need to calculate the average rating for each movie, so we will use the AVG() function on the stars column from the Rating table.", "To get the movie titles along with their average ratings, we will select the title from the Movie table and the average rating from the Rating table.", "We need to join the Movie and Rating tables on the movie ID (mID) to link ratings to their respective movies.", "We will group the results by the movie ID to ensure we get one average rating per movie.", "Finally, we will order the results by average rating in descending order to get the movies with the highest average rating at the top."], "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating \nFROM Movie \nJOIN Rating ON Movie.mID = Rating.mID \nGROUP BY Movie.mID \nORDER BY average_rating DESC;", "gold_sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "source_tables": ["rating", "movie"]}
{"sample_id": 2497, "db_id": "movie_1", "question": "What are the movie titles with the highest average rating and what are those ratings?", "rationale": ["We need to find the movie titles with the highest average rating.", "To do this, we will join the Movie table with the Rating table on the movie ID (mID).", "We will calculate the average rating for each movie using the AVG() function on the stars column from the Rating table.", "We will group the results by the movie ID to ensure we get one average rating per movie.", "Finally, we will order the results in descending order based on the average rating to get the highest ratings at the top."], "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating \nFROM Movie \nJOIN Rating ON Movie.mID = Rating.mID \nGROUP BY Movie.mID \nORDER BY average_rating DESC;", "gold_sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "source_tables": ["rating", "movie"]}
{"sample_id": 2498, "db_id": "movie_1", "question": "What are the movie titles and average rating of the movies with the lowest average rating?", "rationale": ["We need to find the movie titles and their average ratings.", "To do this, we will join the Movie table with the Rating table on the movie ID (mID).", "We will calculate the average rating for each movie using the AVG() function on the stars column from the Rating table.", "We will group the results by the movie ID to ensure we get the average rating for each movie.", "Next, we will order the results by the average rating in ascending order to find the movie with the lowest average rating.", "Finally, we will limit the results to 1 to get only the movie with the lowest average rating."], "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating\nFROM Movie\nJOIN Rating ON Movie.mID = Rating.mID\nGROUP BY Movie.mID\nORDER BY average_rating ASC\nLIMIT 1;", "gold_sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "source_tables": ["rating", "movie"]}
{"sample_id": 2499, "db_id": "movie_1", "question": "What are the titles and average ratings for all movies that have the lowest average rating?", "rationale": ["Identify the required data: We need the titles of movies and their average ratings.", "To get the average ratings, we need to join the Movie and Rating tables on the movie ID (mID).", "We will use the AVG() function to calculate the average rating for each movie.", "We need to group the results by movie ID to get the average rating for each movie.", "To find the movies with the lowest average rating, we will use a subquery that calculates the minimum average rating from the average ratings of all movies.", "Finally, we will filter the results to only include movies that have an average rating equal to the lowest average rating found in the subquery."], "pred_sql": "SELECT title, AVG(stars) AS average_rating\nFROM Movie\nJOIN Rating ON Movie.mID = Rating.mID\nGROUP BY Movie.mID\nHAVING AVG(stars) = (\n    SELECT MIN(avg_rating)\n    FROM (\n        SELECT AVG(stars) AS avg_rating\n        FROM Rating\n        GROUP BY mID\n    ) AS avg_ratings\n);", "gold_sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "source_tables": ["rating", "movie"]}
