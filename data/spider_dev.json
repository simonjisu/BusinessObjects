{"sample_id": 15, "db_id": "department_management", "final": {"question": "Which head's name has the substring 'Ha'? List the id and name.", "sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'", "source_tables": ["head"]}}
{"sample_id": 4, "db_id": "department_management", "final": {"question": "What is the average number of employees of the departments whose rank is between 10 and 15?", "sql": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15", "source_tables": ["department"]}}
{"sample_id": 7, "db_id": "department_management", "final": {"question": "What are the names of the states where at least 3 heads were born?", "sql": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3", "source_tables": ["head"]}}
{"sample_id": 31, "db_id": "farm", "final": {"question": "What are the official names of cities, ordered descending by population?", "sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "source_tables": ["city"]}}
{"sample_id": 25, "db_id": "farm", "final": {"question": "Give the average number of working horses on farms with more than 5000 total horses.", "sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "source_tables": ["farm"]}}
{"sample_id": 43, "db_id": "farm", "final": {"question": "What are the statuses and average populations of each city?", "sql": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "source_tables": ["city"]}}
{"sample_id": 42, "db_id": "farm", "final": {"question": "Please show the different statuses of cities and the average population of cities with each status.", "sql": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "source_tables": ["city"]}}
{"sample_id": 32, "db_id": "farm", "final": {"question": "List the official name and status of the city with the largest population.", "sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 40, "db_id": "farm", "final": {"question": "Please show the themes of competitions with host cities having populations larger than 1000.", "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 49, "db_id": "farm", "final": {"question": "What are the official names of cities that have not hosted a farm competition?", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 44, "db_id": "farm", "final": {"question": "Please show the different statuses, ordered by the number of cities that have each.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "source_tables": ["city"]}}
{"sample_id": 106, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who registered course statistics by order of registration date?", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date", "source_tables": ["courses", "student_course_registrations"]}}
{"sample_id": 70, "db_id": "student_assessment", "final": {"question": "How many students are attending English courses?", "sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"", "source_tables": ["courses", "student_course_attendance"]}}
{"sample_id": 86, "db_id": "student_assessment", "final": {"question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?", "sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"", "source_tables": ["people", "candidate_assessments", "candidates"]}}
{"sample_id": 103, "db_id": "student_assessment", "final": {"question": "What are all info of students who registered courses but not attended courses?", "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["student_course_attendance", "student_course_registrations"]}}
{"sample_id": 65, "db_id": "student_assessment", "final": {"question": "What are the ids of all students who have attended at least one course?", "sql": "SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_attendance"]}}
{"sample_id": 89, "db_id": "student_assessment", "final": {"question": "What is the id of the student who most recently registered course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "source_tables": ["student_course_attendance"]}}
{"sample_id": 81, "db_id": "student_assessment", "final": {"question": "How many registed students do each course have? List course name and the number of their registered students?", "sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "source_tables": ["courses", "students", "student_course_registrations"]}}
{"sample_id": 73, "db_id": "student_assessment", "final": {"question": "Find id of the candidate whose email is stanley.monahan@example.org?", "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"", "source_tables": ["people", "candidates"]}}
{"sample_id": 84, "db_id": "student_assessment", "final": {"question": "What are the ids of the candidates that have an outcome code of Pass?", "sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"", "source_tables": ["candidate_assessments"]}}
{"sample_id": 107, "db_id": "student_assessment", "final": {"question": "List the id of students who attended  statistics courses in the order of attendance date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance", "source_tables": ["courses", "student_course_attendance"]}}
{"sample_id": 167, "db_id": "bike_1", "final": {"question": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "source_tables": ["weather"]}}
{"sample_id": 208, "db_id": "bike_1", "final": {"question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "source_tables": ["trip", "station"]}}
{"sample_id": 140, "db_id": "bike_1", "final": {"question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "source_tables": ["trip", "station"]}}
{"sample_id": 121, "db_id": "bike_1", "final": {"question": "What is the total and maximum duration of trips with bike id 636?", "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "source_tables": ["trip"]}}
{"sample_id": 144, "db_id": "bike_1", "final": {"question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?", "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "source_tables": ["station", "status"]}}
{"sample_id": 137, "db_id": "bike_1", "final": {"question": "How many days had both mean humidity above 50 and mean visibility above 8?", "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "source_tables": ["weather"]}}
{"sample_id": 151, "db_id": "bike_1", "final": {"question": "What is the average longitude of stations that never had bike availability more than 10?", "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "source_tables": ["station", "status"]}}
{"sample_id": 185, "db_id": "bike_1", "final": {"question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "source_tables": ["weather"]}}
{"sample_id": 201, "db_id": "bike_1", "final": {"question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "source_tables": ["weather"]}}
{"sample_id": 112, "db_id": "bike_1", "final": {"question": "What are the names of all stations with a latitude smaller than 37.5?", "sql": "SELECT name FROM station WHERE lat  <  37.5", "source_tables": ["station"]}}
{"sample_id": 160, "db_id": "bike_1", "final": {"question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "source_tables": ["weather"]}}
{"sample_id": 171, "db_id": "bike_1", "final": {"question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?", "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "source_tables": ["station", "status"]}}
{"sample_id": 159, "db_id": "bike_1", "final": {"question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "source_tables": ["weather"]}}
{"sample_id": 150, "db_id": "bike_1", "final": {"question": "What is the average bike availablility for stations not in Palo Alto?", "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "source_tables": ["station", "status"]}}
{"sample_id": 123, "db_id": "bike_1", "final": {"question": "For each zip code, return the average mean temperature of August there.", "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "source_tables": ["weather"]}}
{"sample_id": 117, "db_id": "bike_1", "final": {"question": "What is the average latitude and longitude of stations located in San Jose city?", "sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "source_tables": ["station"]}}
{"sample_id": 135, "db_id": "bike_1", "final": {"question": "Which bike traveled the most often in zip code 94002?", "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"]}}
{"sample_id": 122, "db_id": "bike_1", "final": {"question": "What is the total and maximum duration for all trips with the bike id 636?", "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "source_tables": ["trip"]}}
{"sample_id": 211, "db_id": "bike_1", "final": {"question": "What is the average latitude and longitude of the starting points of all trips?", "sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "source_tables": ["trip", "station"]}}
{"sample_id": 109, "db_id": "bike_1", "final": {"question": "Give me the dates when the max temperature was higher than 85.", "sql": "SELECT date FROM weather WHERE max_temperature_f  >  85", "source_tables": ["weather"]}}
{"sample_id": 217, "db_id": "book_2", "final": {"question": "What are the title and issues of the books?", "sql": "SELECT Title ,  Issues FROM book", "source_tables": ["book"]}}
{"sample_id": 220, "db_id": "book_2", "final": {"question": "List the publisher of the publication with the highest price.", "sql": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1", "source_tables": ["publication"]}}
{"sample_id": 232, "db_id": "book_2", "final": {"question": "How many distinct publication dates are there in our record?", "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "source_tables": ["publication"]}}
{"sample_id": 227, "db_id": "book_2", "final": {"question": "Please show the most common publication date.", "sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["publication"]}}
{"sample_id": 241, "db_id": "musical", "final": {"question": "What are the names of actors who are not 20 years old?", "sql": "SELECT Name FROM actor WHERE Age != 20", "source_tables": ["actor"]}}
{"sample_id": 234, "db_id": "musical", "final": {"question": "How many actors are there?", "sql": "SELECT count(*) FROM actor", "source_tables": ["actor"]}}
{"sample_id": 242, "db_id": "musical", "final": {"question": "What are the characters of actors in descending order of age?", "sql": "SELECT Character FROM actor ORDER BY age DESC", "source_tables": ["actor"]}}
{"sample_id": 263, "db_id": "musical", "final": {"question": "Who is the nominee who has been nominated for the most musicals?", "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["musical"]}}
{"sample_id": 240, "db_id": "musical", "final": {"question": "List the name of actors whose age is not 20.", "sql": "SELECT Name FROM actor WHERE Age != 20", "source_tables": ["actor"]}}
{"sample_id": 270, "db_id": "musical", "final": {"question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".", "sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"", "source_tables": ["musical"]}}
{"sample_id": 268, "db_id": "musical", "final": {"question": "List the name of musicals that do not have actors.", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "source_tables": ["musical", "actor"]}}
{"sample_id": 264, "db_id": "musical", "final": {"question": "List the most common result of the musicals.", "sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["musical"]}}
{"sample_id": 290, "db_id": "twitter_1", "final": {"question": "Find the name of the user who has the largest number of followers.", "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1", "source_tables": ["user_profiles"]}}
{"sample_id": 284, "db_id": "twitter_1", "final": {"question": "Find the name and email of the users who have more than 1000 followers.", "sql": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000", "source_tables": ["user_profiles"]}}
{"sample_id": 274, "db_id": "twitter_1", "final": {"question": "Find the emails of the user named \"Mary\".", "sql": "SELECT email FROM user_profiles WHERE name  =  'Mary'", "source_tables": ["user_profiles"]}}
{"sample_id": 293, "db_id": "twitter_1", "final": {"question": "List the names of 5 users followed by the largest number of other users.", "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5", "source_tables": ["user_profiles"]}}
{"sample_id": 298, "db_id": "twitter_1", "final": {"question": "Find the average number of followers for the users who do not have any tweet.", "sql": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 319, "db_id": "product_catalog", "final": {"question": "What is the level name of the cheapest catalog (in USD)?", "sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "source_tables": ["catalog_contents", "catalog_structure"]}}
{"sample_id": 312, "db_id": "product_catalog", "final": {"question": "Find the catalog publisher that has the most catalogs.", "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "source_tables": ["catalogs"]}}
{"sample_id": 342, "db_id": "product_catalog", "final": {"question": "What are the catalog entry names of the products with next entry ID above 8?", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "source_tables": ["catalog_contents"]}}
{"sample_id": 301, "db_id": "product_catalog", "final": {"question": "Find the names of all the catalog entries.", "sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "source_tables": ["catalog_contents"]}}
{"sample_id": 317, "db_id": "product_catalog", "final": {"question": "What is the entry name of the most expensive catalog (in USD)?", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "source_tables": ["catalog_contents"]}}
{"sample_id": 303, "db_id": "product_catalog", "final": {"question": "Find the list of attribute data types possessed by more than 3 attribute definitions.", "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "source_tables": ["attribute_definitions"]}}
{"sample_id": 307, "db_id": "product_catalog", "final": {"question": "Find the name and level of catalog structure with level between 5 and 10.", "sql": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "source_tables": ["catalog_structure"]}}
{"sample_id": 308, "db_id": "product_catalog", "final": {"question": "What are the name and level of catalog structure with level number between 5 and 10", "sql": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "source_tables": ["catalog_structure"]}}
{"sample_id": 355, "db_id": "flight_1", "final": {"question": "Show the id and name of the aircraft with the maximum distance.", "sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "source_tables": ["aircraft"]}}
{"sample_id": 420, "db_id": "flight_1", "final": {"question": "What is the count of distinct employees with certificates?", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "source_tables": ["certificate"]}}
{"sample_id": 425, "db_id": "flight_1", "final": {"question": "Show names for all employees who have certificate of Boeing 737-800.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 392, "db_id": "flight_1", "final": {"question": "What are the numbers of all flights that can cover a distance of more than 2000?", "sql": "SELECT flno FROM Flight WHERE distance  >  2000", "source_tables": ["flight"]}}
{"sample_id": 377, "db_id": "flight_1", "final": {"question": "Show names for all employees with salary more than the average.", "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "source_tables": ["employee"]}}
{"sample_id": 368, "db_id": "flight_1", "final": {"question": "What is the number of employees that have a salary between 100000 and 200000?", "sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "source_tables": ["employee"]}}
{"sample_id": 397, "db_id": "flight_1", "final": {"question": "Show the flight number and distance of the flight with maximum price.", "sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "source_tables": ["flight"]}}
{"sample_id": 384, "db_id": "flight_1", "final": {"question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?", "sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "source_tables": ["flight"]}}
{"sample_id": 381, "db_id": "flight_1", "final": {"question": "How many flights do we have?", "sql": "SELECT count(*) FROM Flight", "source_tables": ["flight"]}}
{"sample_id": 390, "db_id": "flight_1", "final": {"question": "What are the departure and arrival dates of all flights from LA to Honolulu?", "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "source_tables": ["flight"]}}
{"sample_id": 385, "db_id": "flight_1", "final": {"question": "Show all flight number from Los Angeles.", "sql": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"", "source_tables": ["flight"]}}
{"sample_id": 351, "db_id": "flight_1", "final": {"question": "What is the name and distance for aircraft with id 12?", "sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "source_tables": ["aircraft"]}}
{"sample_id": 428, "db_id": "flight_1", "final": {"question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"", "source_tables": ["aircraft", "employee", "certificate"]}}
{"sample_id": 359, "db_id": "flight_1", "final": {"question": "Show names for all aircrafts with distances more than the average.", "sql": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "source_tables": ["aircraft"]}}
{"sample_id": 344, "db_id": "flight_1", "final": {"question": "How many aircrafts exist in the database?", "sql": "SELECT count(*) FROM Aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 369, "db_id": "flight_1", "final": {"question": "What is the name and salary for employee with id 242518965?", "sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "source_tables": ["employee"]}}
{"sample_id": 408, "db_id": "flight_1", "final": {"question": "What place has the most flights coming from there?", "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flight"]}}
{"sample_id": 365, "db_id": "flight_1", "final": {"question": "Show ids for all employees with at least 100000 salary.", "sql": "SELECT eid FROM Employee WHERE salary  >  100000", "source_tables": ["employee"]}}
{"sample_id": 389, "db_id": "flight_1", "final": {"question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.", "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "source_tables": ["flight"]}}
{"sample_id": 483, "db_id": "allergy_1", "final": {"question": "Show the minimum, average, and maximum age of all students.", "sql": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student", "source_tables": ["student"]}}
{"sample_id": 443, "db_id": "allergy_1", "final": {"question": "Show all allergy types.", "sql": "SELECT DISTINCT allergytype FROM Allergy_type", "source_tables": ["allergy_type"]}}
{"sample_id": 494, "db_id": "allergy_1", "final": {"question": "How old is each student and how many students are each age?", "sql": "SELECT age ,  count(*) FROM Student GROUP BY age", "source_tables": ["student"]}}
{"sample_id": 531, "db_id": "allergy_1", "final": {"question": "Find the different first names and cities of the students who have allergy to milk or cat.", "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 470, "db_id": "allergy_1", "final": {"question": "What are the full names and ages for all female students whose sex is F?", "sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "source_tables": ["student"]}}
{"sample_id": 536, "db_id": "allergy_1", "final": {"question": "What are the first name and major of the students who are able to consume soy?", "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 457, "db_id": "allergy_1", "final": {"question": "Which allergy type has least number of allergies?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "source_tables": ["allergy_type"]}}
{"sample_id": 513, "db_id": "allergy_1", "final": {"question": "Which allergy has most number of students affected?", "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "source_tables": ["has_allergy"]}}
{"sample_id": 490, "db_id": "allergy_1", "final": {"question": "How many students are there for each major?", "sql": "SELECT major ,  count(*) FROM Student GROUP BY major", "source_tables": ["student"]}}
{"sample_id": 534, "db_id": "allergy_1", "final": {"question": "How many students are over 18 and do not have allergy to food type or animal type?", "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 448, "db_id": "allergy_1", "final": {"question": "What are all the different food allergies?", "sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"", "source_tables": ["allergy_type"]}}
{"sample_id": 461, "db_id": "allergy_1", "final": {"question": "Show first name and last name for all students.", "sql": "SELECT Fname ,  Lname FROM Student", "source_tables": ["student"]}}
{"sample_id": 471, "db_id": "allergy_1", "final": {"question": "Show student ids for all male students.", "sql": "SELECT StuID FROM Student WHERE Sex  =  'M'", "source_tables": ["student"]}}
{"sample_id": 477, "db_id": "allergy_1", "final": {"question": "Which city does the student whose last name is \"Kim\" live in?", "sql": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"", "source_tables": ["student"]}}
{"sample_id": 533, "db_id": "allergy_1", "final": {"question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.", "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 521, "db_id": "allergy_1", "final": {"question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy", "source_tables": ["has_allergy", "allergy_type", "student"]}}
{"sample_id": 517, "db_id": "allergy_1", "final": {"question": "Show all allergy type with number of students affected.", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "source_tables": ["has_allergy", "allergy_type"]}}
{"sample_id": 500, "db_id": "allergy_1", "final": {"question": "How many students does each advisor have?", "sql": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "source_tables": ["student"]}}
{"sample_id": 485, "db_id": "allergy_1", "final": {"question": "What is the last name of the youngest student?", "sql": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "source_tables": ["student"]}}
{"sample_id": 578, "db_id": "store_1", "final": {"question": "How many customers live in the city of Prague?", "sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "source_tables": ["customers"]}}
{"sample_id": 609, "db_id": "store_1", "final": {"question": "What is the total amount of money spent by Lucas Mancini?", "sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "source_tables": ["customers", "invoices"]}}
{"sample_id": 575, "db_id": "store_1", "final": {"question": "What is Astrid Gruber's email and phone number?", "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "source_tables": ["customers"]}}
{"sample_id": 593, "db_id": "store_1", "final": {"question": "Find the full name of employee who supported the most number of customers.", "sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "employees"]}}
{"sample_id": 616, "db_id": "store_1", "final": {"question": "What are the names of all the playlists?", "sql": "SELECT name FROM playlists;", "source_tables": ["playlists"]}}
{"sample_id": 636, "db_id": "store_1", "final": {"question": "What are the names of all tracks that are on playlists titled Movies?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";", "source_tables": ["playlist_tracks", "playlists", "tracks"]}}
{"sample_id": 589, "db_id": "store_1", "final": {"question": "find the full name of employees who report to Nancy Edwards?", "sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";", "source_tables": ["employees"]}}
{"sample_id": 615, "db_id": "store_1", "final": {"question": "List the name of all playlist.", "sql": "SELECT name FROM playlists;", "source_tables": ["playlists"]}}
{"sample_id": 561, "db_id": "store_1", "final": {"question": "List the number of invoices from Chicago, IL.", "sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "source_tables": ["invoices"]}}
{"sample_id": 624, "db_id": "store_1", "final": {"question": "What is the name of the album that has the track Ball to the Wall?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";", "source_tables": ["albums", "tracks"]}}
{"sample_id": 605, "db_id": "store_1", "final": {"question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.", "sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "source_tables": ["employees"]}}
{"sample_id": 552, "db_id": "store_1", "final": {"question": "What are the titles of all the albums?", "sql": "SELECT title FROM albums;", "source_tables": ["albums"]}}
{"sample_id": 588, "db_id": "store_1", "final": {"question": "What is the title, phone number and hire date for the employee named Nancy Edwards?", "sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "source_tables": ["employees"]}}
{"sample_id": 614, "db_id": "store_1", "final": {"question": "What are the different names of the genres?", "sql": "SELECT DISTINCT name FROM genres;", "source_tables": ["genres"]}}
{"sample_id": 564, "db_id": "store_1", "final": {"question": "How many invoices were billed from each state?", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;", "source_tables": ["invoices"]}}
{"sample_id": 607, "db_id": "store_1", "final": {"question": "How many orders does Lucas Mancini has?", "sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "source_tables": ["customers", "invoices"]}}
{"sample_id": 545, "db_id": "store_1", "final": {"question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.", "sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "source_tables": ["customers", "invoices"]}}
{"sample_id": 612, "db_id": "store_1", "final": {"question": "What are the names of all the media types?", "sql": "SELECT name FROM media_types;", "source_tables": ["media_types"]}}
{"sample_id": 630, "db_id": "store_1", "final": {"question": "What are the names of all Rock tracks that are stored on MPEG audio files?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";", "source_tables": ["media_types", "genres", "tracks"]}}
{"sample_id": 597, "db_id": "store_1", "final": {"question": "What is employee Nancy Edwards's phone number?", "sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "source_tables": ["employees"]}}
{"sample_id": 639, "db_id": "store_1", "final": {"question": "List all tracks bought by customer Daan Peeters.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";", "source_tables": ["customers", "tracks", "invoices", "invoice_lines"]}}
{"sample_id": 585, "db_id": "store_1", "final": {"question": "How many customers does Steve Johnson support?", "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";", "source_tables": ["customers", "employees"]}}
{"sample_id": 663, "db_id": "journal_committee", "final": {"question": "Show the names of editors that are on at least two journal committees.", "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2", "source_tables": ["editor", "journal_committee"]}}
{"sample_id": 660, "db_id": "journal_committee", "final": {"question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.", "sql": "SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC", "source_tables": ["journal_committee", "editor", "journal"]}}
{"sample_id": 658, "db_id": "journal_committee", "final": {"question": "Show the names of editors and the theme of journals for which they serve on committees.", "sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID", "source_tables": ["journal_committee", "editor", "journal"]}}
{"sample_id": 675, "db_id": "customers_card_transactions", "final": {"question": "How many accounts does the customer with first name Art and last name Turcotte have?", "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "source_tables": ["accounts", "customers"]}}
{"sample_id": 683, "db_id": "customers_card_transactions", "final": {"question": "Show the number of all customers without an account.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "source_tables": ["customers", "accounts"]}}
{"sample_id": 693, "db_id": "customers_card_transactions", "final": {"question": "Show ids, first names, last names, and phones for all customers.", "sql": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 726, "db_id": "customers_card_transactions", "final": {"question": "What are the different card type codes, and how many different customers hold each type?", "sql": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "source_tables": ["customers_cards"]}}
{"sample_id": 707, "db_id": "customers_card_transactions", "final": {"question": "How many debit cards do we have?", "sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"", "source_tables": ["customers_cards"]}}
{"sample_id": 703, "db_id": "customers_card_transactions", "final": {"question": "What is the first name, last name, and phone of the customer with card 4560596484842.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 722, "db_id": "customers_card_transactions", "final": {"question": "Return the code of the card type that is most common.", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers_cards"]}}
{"sample_id": 727, "db_id": "customers_card_transactions", "final": {"question": "Show the customer ids and firstname without a credit card.", "sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 716, "db_id": "customers_card_transactions", "final": {"question": "What are the ids and full names of customers who hold two or more cards?", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "source_tables": ["customers", "customers_cards"]}}
{"sample_id": 729, "db_id": "customers_card_transactions", "final": {"question": "Show all card type codes.", "sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "source_tables": ["customers_cards"]}}
{"sample_id": 692, "db_id": "customers_card_transactions", "final": {"question": "Count the number of customers.", "sql": "SELECT count(*) FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 702, "db_id": "customers_card_transactions", "final": {"question": "What are the valid from and valid to dates for the card with the number 4560596484842?", "sql": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"", "source_tables": ["customers_cards"]}}
{"sample_id": 731, "db_id": "customers_card_transactions", "final": {"question": "Show the number of card types.", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "source_tables": ["customers_cards"]}}
{"sample_id": 724, "db_id": "customers_card_transactions", "final": {"question": "What are the codes of card types that have 5 or more cards?", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "source_tables": ["customers_cards"]}}
{"sample_id": 674, "db_id": "customers_card_transactions", "final": {"question": "Give the full name and phone of the customer who has the account name 162.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"", "source_tables": ["accounts", "customers"]}}
{"sample_id": 719, "db_id": "customers_card_transactions", "final": {"question": "Show all card type codes and the number of cards in each type.", "sql": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "source_tables": ["customers_cards"]}}
{"sample_id": 779, "db_id": "race_track", "final": {"question": "Show the name of track and the number of races in each track.", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "source_tables": ["track", "race"]}}
{"sample_id": 777, "db_id": "race_track", "final": {"question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.", "sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "source_tables": ["track"]}}
{"sample_id": 772, "db_id": "race_track", "final": {"question": "What are the classes of races that have two or more corresponding races?", "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "source_tables": ["race"]}}
{"sample_id": 753, "db_id": "race_track", "final": {"question": "What is the name, location and seating for the most recently opened track?", "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "source_tables": ["track"]}}
{"sample_id": 754, "db_id": "race_track", "final": {"question": "Return the name, location, and seating of the track that was opened in the most recent year.", "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "source_tables": ["track"]}}
{"sample_id": 774, "db_id": "race_track", "final": {"question": "Give the names of tracks that do not have a race in the class 'GT'.", "sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "source_tables": ["track", "race"]}}
{"sample_id": 748, "db_id": "race_track", "final": {"question": "Count the number of tracks.", "sql": "SELECT count(*) FROM track", "source_tables": ["track"]}}
{"sample_id": 778, "db_id": "race_track", "final": {"question": "What are the years of opening for tracks with seating between 4000 and 5000?", "sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "source_tables": ["track"]}}
{"sample_id": 795, "db_id": "coffee_shop", "final": {"question": "Which address has both members younger than 30 and members older than 40?", "sql": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40", "source_tables": ["member"]}}
{"sample_id": 796, "db_id": "coffee_shop", "final": {"question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?", "sql": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'", "source_tables": ["member"]}}
{"sample_id": 789, "db_id": "coffee_shop", "final": {"question": "How many members have the black membership card?", "sql": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'", "source_tables": ["member"]}}
{"sample_id": 807, "db_id": "chinook_1", "final": {"question": "How many albums are there?", "sql": "SELECT count(*) FROM ALBUM", "source_tables": ["album"]}}
{"sample_id": 887, "db_id": "chinook_1", "final": {"question": "How many artists do not have any album?", "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "source_tables": ["artist", "album"]}}
{"sample_id": 865, "db_id": "chinook_1", "final": {"question": "How many tracks are in the AAC audio file media type?", "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"", "source_tables": ["mediatype", "track"]}}
{"sample_id": 828, "db_id": "chinook_1", "final": {"question": "What are the names of tracks that contain the the word you in them?", "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "source_tables": ["track"]}}
{"sample_id": 848, "db_id": "chinook_1", "final": {"question": "Count the number of customers that have an email containing \"gmail.com\".", "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"", "source_tables": ["customer"]}}
{"sample_id": 834, "db_id": "chinook_1", "final": {"question": "What are the names and ids of the different albums, and how many tracks are on each?", "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "source_tables": ["album", "track"]}}
{"sample_id": 824, "db_id": "chinook_1", "final": {"question": "Find the name of the artist who made the album \"Balls to the Wall\".", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"", "source_tables": ["album", "artist"]}}
{"sample_id": 811, "db_id": "chinook_1", "final": {"question": "Find all the customer information in state NY.", "sql": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"", "source_tables": ["customer"]}}
{"sample_id": 827, "db_id": "chinook_1", "final": {"question": "Find the names of all the tracks that contain the word \"you\".", "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "source_tables": ["track"]}}
{"sample_id": 825, "db_id": "chinook_1", "final": {"question": "Which artist has the most albums?", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["album", "artist"]}}
{"sample_id": 857, "db_id": "chinook_1", "final": {"question": "Find all the customer last names that do not have invoice totals larger than 20.", "sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20", "source_tables": ["customer", "invoice"]}}
{"sample_id": 864, "db_id": "chinook_1", "final": {"question": "What are the phone numbers for each employee?", "sql": "SELECT Phone FROM EMPLOYEE", "source_tables": ["employee"]}}
{"sample_id": 867, "db_id": "chinook_1", "final": {"question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?", "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"", "source_tables": ["track", "genre"]}}
{"sample_id": 856, "db_id": "chinook_1", "final": {"question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?", "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"", "source_tables": ["customer", "invoice"]}}
{"sample_id": 838, "db_id": "chinook_1", "final": {"question": "What is the name of the media type that is least common across all tracks?", "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["mediatype", "track"]}}
{"sample_id": 833, "db_id": "chinook_1", "final": {"question": "Show the album names, ids and the number of tracks for each album.", "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "source_tables": ["album", "track"]}}
{"sample_id": 923, "db_id": "insurance_fnol", "final": {"question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"", "source_tables": ["customers", "first_notification_of_loss", "services"]}}
{"sample_id": 905, "db_id": "insurance_fnol", "final": {"question": "What is the effective date of the claim that has the largest amount of total settlement?", "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "source_tables": ["settlements", "claims"]}}
{"sample_id": 908, "db_id": "insurance_fnol", "final": {"question": "Count the total number of policies used by the customer named \"Dayana Robel\".", "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "source_tables": ["customers", "customers_policies"]}}
{"sample_id": 926, "db_id": "insurance_fnol", "final": {"question": "What are the IDs of customers who have \"Diana\" in part of their names?", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "source_tables": ["customers"]}}
{"sample_id": 899, "db_id": "insurance_fnol", "final": {"question": "Find the policy type used by more than 4 customers.", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "source_tables": ["available_policies"]}}
{"sample_id": 893, "db_id": "insurance_fnol", "final": {"question": "What are the customer phone numbers under the policy \"Life Insurance\"?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "source_tables": ["available_policies"]}}
{"sample_id": 900, "db_id": "insurance_fnol", "final": {"question": "Find the policy types more than 4 customers use. Show their type code.", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "source_tables": ["available_policies"]}}
{"sample_id": 894, "db_id": "insurance_fnol", "final": {"question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "source_tables": ["available_policies"]}}
{"sample_id": 975, "db_id": "medicine_enzyme_interaction", "final": {"question": "find the number of medicines offered by each trade.", "sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "source_tables": ["medicine"]}}
{"sample_id": 973, "db_id": "medicine_enzyme_interaction", "final": {"question": "Which enzyme names have the substring \"ALA\"?", "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"", "source_tables": ["enzyme"]}}
{"sample_id": 960, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many medicines were not approved by the FDA?", "sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "source_tables": ["medicine"]}}
{"sample_id": 952, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?", "sql": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "source_tables": ["medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 934, "db_id": "medicine_enzyme_interaction", "final": {"question": "What is the total count of enzymes?", "sql": "SELECT count(*) FROM enzyme", "source_tables": ["enzyme"]}}
{"sample_id": 976, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many medicines are offered by each trade name?", "sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "source_tables": ["medicine"]}}
{"sample_id": 967, "db_id": "medicine_enzyme_interaction", "final": {"question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.", "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", "source_tables": ["medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 970, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "source_tables": ["enzyme", "medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 984, "db_id": "university_basketball", "final": {"question": "What is the founded year of the non public school that was founded most recently?", "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "source_tables": ["university"]}}
{"sample_id": 1015, "db_id": "university_basketball", "final": {"question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 978, "db_id": "university_basketball", "final": {"question": "What are the different schools and their nicknames, ordered by their founding years?", "sql": "SELECT school ,  nickname FROM university ORDER BY founded", "source_tables": ["university"]}}
{"sample_id": 988, "db_id": "university_basketball", "final": {"question": "Return the highest acc percent across all basketball matches.", "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "source_tables": ["basketball_match"]}}
{"sample_id": 1011, "db_id": "university_basketball", "final": {"question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "source_tables": ["university", "basketball_match"]}}
{"sample_id": 999, "db_id": "university_basketball", "final": {"question": "What is the total and minimum enrollment of all schools?", "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "source_tables": ["university"]}}
{"sample_id": 981, "db_id": "university_basketball", "final": {"question": "When was the school with the largest enrollment founded?", "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "source_tables": ["university"]}}
{"sample_id": 986, "db_id": "university_basketball", "final": {"question": "Count the number of schools that have had basketball matches.", "sql": "SELECT count(DISTINCT school_id) FROM basketball_match", "source_tables": ["basketball_match"]}}
{"sample_id": 982, "db_id": "university_basketball", "final": {"question": "Return the founded year for the school with the largest enrollment.", "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "source_tables": ["university"]}}
{"sample_id": 1045, "db_id": "phone_1", "final": {"question": "Find the details for all chip models.", "sql": "SELECT * FROM chip_model", "source_tables": ["chip_model"]}}
{"sample_id": 1042, "db_id": "phone_1", "final": {"question": "Find the number of phones for each accreditation type.", "sql": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "source_tables": ["phone"]}}
{"sample_id": 1046, "db_id": "phone_1", "final": {"question": "How many models do not have the wifi function?", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "source_tables": ["chip_model"]}}
{"sample_id": 1043, "db_id": "phone_1", "final": {"question": "How many phones belongs to each accreditation type?", "sql": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "source_tables": ["phone"]}}
{"sample_id": 1025, "db_id": "phone_1", "final": {"question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?", "sql": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\";", "source_tables": ["phone"]}}
{"sample_id": 1100, "db_id": "match_season", "final": {"question": "Show the name of colleges that have at least two players.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "source_tables": ["match_season"]}}
{"sample_id": 1087, "db_id": "match_season", "final": {"question": "Count the number of different colleges that players who play for Columbus Crew are from.", "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "source_tables": ["team", "match_season"]}}
{"sample_id": 1078, "db_id": "match_season", "final": {"question": "What are the official languages of the countries of players from Maryland or Duke college?", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1081, "db_id": "match_season", "final": {"question": "Count the number of different official languages corresponding to countries that players who play Defender are from.", "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1105, "db_id": "match_season", "final": {"question": "Return the names of teams that have no match season record.", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "source_tables": ["team", "match_season"]}}
{"sample_id": 1080, "db_id": "match_season", "final": {"question": "How many distinct official languages are there among countries of players whose positions are defenders.", "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "source_tables": ["match_season", "country"]}}
{"sample_id": 1109, "db_id": "match_season", "final": {"question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "source_tables": ["match_season"]}}
{"sample_id": 1093, "db_id": "match_season", "final": {"question": "How many players are from each country?", "sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "source_tables": ["match_season", "country"]}}
{"sample_id": 1059, "db_id": "match_season", "final": {"question": "What are the different positions for match season?", "sql": "SELECT DISTINCT POSITION FROM match_season", "source_tables": ["match_season"]}}
{"sample_id": 1058, "db_id": "match_season", "final": {"question": "Show all distinct positions of matches.", "sql": "SELECT DISTINCT POSITION FROM match_season", "source_tables": ["match_season"]}}
{"sample_id": 1054, "db_id": "match_season", "final": {"question": "Show the country name and capital of all countries.", "sql": "SELECT Country_name ,  Capital FROM country", "source_tables": ["country"]}}
{"sample_id": 1143, "db_id": "climbing", "final": {"question": "What are the names of countains that no climber has climbed?", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1122, "db_id": "climbing", "final": {"question": "What are the countries of mountains with height bigger than 5000?", "sql": "SELECT Country FROM mountain WHERE Height  >  5000", "source_tables": ["mountain"]}}
{"sample_id": 1140, "db_id": "climbing", "final": {"question": "List the countries that have more than one mountain.", "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "source_tables": ["mountain"]}}
{"sample_id": 1121, "db_id": "climbing", "final": {"question": "Give the names of mountains in alphabetical order.", "sql": "SELECT Name FROM mountain ORDER BY Name ASC", "source_tables": ["mountain"]}}
{"sample_id": 1146, "db_id": "climbing", "final": {"question": "Show the range that has the most number of mountains.", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["mountain"]}}
{"sample_id": 1123, "db_id": "climbing", "final": {"question": "Return the countries of the mountains that have a height larger than 5000.", "sql": "SELECT Country FROM mountain WHERE Height  >  5000", "source_tables": ["mountain"]}}
{"sample_id": 1135, "db_id": "climbing", "final": {"question": "What are the different names of mountains ascended by climbers from the country of West Germany?", "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"", "source_tables": ["climber", "mountain"]}}
{"sample_id": 1124, "db_id": "climbing", "final": {"question": "What is the name of the highest mountain?", "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"]}}
{"sample_id": 1155, "db_id": "body_builder", "final": {"question": "What are the birthdays of people in ascending order of height?", "sql": "SELECT Birth_Date FROM People ORDER BY Height ASC", "source_tables": ["people"]}}
{"sample_id": 1153, "db_id": "body_builder", "final": {"question": "What is the average snatch score of body builders?", "sql": "SELECT avg(Snatch) FROM body_builder", "source_tables": ["body_builder"]}}
{"sample_id": 1168, "db_id": "body_builder", "final": {"question": "List the names and origins of people who are not body builders.", "sql": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id", "source_tables": ["body_builder", "people"]}}
{"sample_id": 1154, "db_id": "body_builder", "final": {"question": "What are the clean and jerk score of the body builder with the highest total score?", "sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1", "source_tables": ["body_builder"]}}
{"sample_id": 1188, "db_id": "election_representative", "final": {"question": "What is the party that has the largest number of representatives?", "sql": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["representative"]}}
{"sample_id": 1180, "db_id": "election_representative", "final": {"question": "What are the life spans of representatives from New York state or Indiana state?", "sql": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"", "source_tables": ["representative"]}}
{"sample_id": 1175, "db_id": "election_representative", "final": {"question": "List the votes of elections in descending order.", "sql": "SELECT Votes FROM election ORDER BY Votes DESC", "source_tables": ["election"]}}
{"sample_id": 1179, "db_id": "election_representative", "final": {"question": "What are the names of representatives whose party is not \"Republican\"?", "sql": "SELECT Name FROM Representative WHERE Party != \"Republican\"", "source_tables": ["representative"]}}
{"sample_id": 1240, "db_id": "apartment_rentals", "final": {"question": "Show the total number of rooms of all apartments with facility code \"Gym\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"", "source_tables": ["apartments", "apartment_facilities"]}}
{"sample_id": 1207, "db_id": "apartment_rentals", "final": {"question": "Give me the minimum and maximum bathroom count among all the apartments.", "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "source_tables": ["apartments"]}}
{"sample_id": 1261, "db_id": "apartment_rentals", "final": {"question": "Which apartment type code appears the most often?", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1211, "db_id": "apartment_rentals", "final": {"question": "What are the apartment number and the room count of each apartment?", "sql": "SELECT apt_number ,  room_count FROM Apartments", "source_tables": ["apartments"]}}
{"sample_id": 1257, "db_id": "apartment_rentals", "final": {"question": "What are the top three apartment types in terms of the average room count? Give me the", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "source_tables": ["apartments"]}}
{"sample_id": 1233, "db_id": "apartment_rentals", "final": {"question": "What are the guest first name, start date, and end date of each apartment booking?", "sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "source_tables": ["apartment_bookings", "guests"]}}
{"sample_id": 1209, "db_id": "apartment_rentals", "final": {"question": "Find the average number of bedrooms of all the apartments.", "sql": "SELECT avg(bedroom_count) FROM Apartments", "source_tables": ["apartments"]}}
{"sample_id": 1263, "db_id": "apartment_rentals", "final": {"question": "Which apartment type code is the most common among apartments with more than one bathroom?", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1253, "db_id": "apartment_rentals", "final": {"question": "What is the apartment number of the apartment with the most beds?", "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1238, "db_id": "apartment_rentals", "final": {"question": "Show the facility codes of apartments with more than 4 bedrooms.", "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "source_tables": ["apartments", "apartment_facilities"]}}
{"sample_id": 1262, "db_id": "apartment_rentals", "final": {"question": "Show the most common apartment type code among apartments with more than 1 bathroom.", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1273, "db_id": "apartment_rentals", "final": {"question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.", "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "source_tables": ["apartments", "view_unit_status"]}}
{"sample_id": 1223, "db_id": "apartment_rentals", "final": {"question": "Return the booking start date and end date for the apartments that have type code \"Duplex\".", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1225, "db_id": "apartment_rentals", "final": {"question": "Find the booking start date and end date for the apartments that have more than two bedrooms.", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1255, "db_id": "apartment_rentals", "final": {"question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.", "sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "source_tables": ["apartments"]}}
{"sample_id": 1212, "db_id": "apartment_rentals", "final": {"question": "What is the average number of rooms of apartments with type code \"Studio\"?", "sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"", "source_tables": ["apartments"]}}
{"sample_id": 1292, "db_id": "game_injury", "final": {"question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC", "source_tables": ["injury_accident", "game"]}}
{"sample_id": 1287, "db_id": "game_injury", "final": {"question": "How many distinct kinds of injuries happened after season 2010?", "sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010", "source_tables": ["injury_accident", "game"]}}
{"sample_id": 1275, "db_id": "game_injury", "final": {"question": "List the dates of games by the home team name in descending order.", "sql": "SELECT Date FROM game ORDER BY home_team DESC", "source_tables": ["game"]}}
{"sample_id": 1296, "db_id": "soccer_1", "final": {"question": "What is the maximum and minimum height of all players?", "sql": "SELECT max(weight) ,  min(weight) FROM Player", "source_tables": ["player"]}}
{"sample_id": 1295, "db_id": "soccer_1", "final": {"question": "What is the average weight of all players?", "sql": "SELECT avg(weight) FROM Player", "source_tables": ["player"]}}
{"sample_id": 1309, "db_id": "performance_attendance", "final": {"question": "What are the dates and locations of performances?", "sql": "SELECT Date ,  LOCATION FROM performance", "source_tables": ["performance"]}}
{"sample_id": 1308, "db_id": "performance_attendance", "final": {"question": "List the hosts of performances in ascending order of attendance.", "sql": "SELECT HOST FROM performance ORDER BY Attendance ASC", "source_tables": ["performance"]}}
{"sample_id": 1307, "db_id": "performance_attendance", "final": {"question": "How many performances are there?", "sql": "SELECT count(*) FROM performance", "source_tables": ["performance"]}}
{"sample_id": 1383, "db_id": "college_2", "final": {"question": "Give all information regarding instructors, in order of salary from least to greatest.", "sql": "SELECT * FROM instructor ORDER BY salary", "source_tables": ["instructor"]}}
{"sample_id": 1402, "db_id": "college_2", "final": {"question": "Find the number of courses provided in each semester and year.", "sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "source_tables": ["section"]}}
{"sample_id": 1439, "db_id": "college_2", "final": {"question": "What is the name of the instructor who advises the student with the greatest number of total credits?", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "source_tables": ["student", "instructor", "advisor"]}}
{"sample_id": 1404, "db_id": "college_2", "final": {"question": "Find the year which offers the largest number of courses.", "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["section"]}}
{"sample_id": 1341, "db_id": "college_2", "final": {"question": "Count the number of courses in the Physics department.", "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "source_tables": ["course"]}}
{"sample_id": 1444, "db_id": "college_2", "final": {"question": "Find the names of instructors who didn't each any courses in any Spring semester.", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1354, "db_id": "college_2", "final": {"question": "Find the department name of the instructor whose name contains 'Soisalon'.", "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "source_tables": ["instructor"]}}
{"sample_id": 1377, "db_id": "college_2", "final": {"question": "Give the name of the department with the lowest budget.", "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "source_tables": ["department"]}}
{"sample_id": 1390, "db_id": "college_2", "final": {"question": "Find the name of the students who have more than one advisor?", "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "source_tables": ["student", "advisor"]}}
{"sample_id": 1491, "db_id": "college_2", "final": {"question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}}
{"sample_id": 1345, "db_id": "college_2", "final": {"question": "What is the title, credit value, and department name for courses with more than one prerequisite?", "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "source_tables": ["course", "prereq"]}}
{"sample_id": 1432, "db_id": "college_2", "final": {"question": "Find the name and salary of instructors who are advisors of the students from the Math department.", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "source_tables": ["student", "instructor", "advisor"]}}
{"sample_id": 1376, "db_id": "college_2", "final": {"question": "Which department has the lowest budget?", "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "source_tables": ["department"]}}
{"sample_id": 1463, "db_id": "college_2", "final": {"question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "source_tables": ["course", "section"]}}
{"sample_id": 1464, "db_id": "college_2", "final": {"question": "Find the names of all instructors in computer science department", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "source_tables": ["instructor"]}}
{"sample_id": 1420, "db_id": "college_2", "final": {"question": "Find the name of the courses that do not have any prerequisite?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}}
{"sample_id": 1425, "db_id": "college_2", "final": {"question": "What is the title of the course with Differential Geometry as a prerequisite?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "source_tables": ["course", "prereq"]}}
{"sample_id": 1360, "db_id": "college_2", "final": {"question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "source_tables": ["instructor"]}}
{"sample_id": 1380, "db_id": "college_2", "final": {"question": "Who is the instructor with the highest salary?", "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "source_tables": ["instructor"]}}
{"sample_id": 1434, "db_id": "college_2", "final": {"question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "source_tables": ["student", "instructor", "advisor"]}}
{"sample_id": 1452, "db_id": "college_2", "final": {"question": "Find the name of students who didn't take any course from Biology department.", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "source_tables": ["student", "course", "takes"]}}
{"sample_id": 1447, "db_id": "college_2", "final": {"question": "Which department has the highest average instructor salary?", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "source_tables": ["instructor"]}}
{"sample_id": 1361, "db_id": "college_2", "final": {"question": "Give the name of the lowest earning instructor in the Statistics department.", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "source_tables": ["instructor"]}}
{"sample_id": 1332, "db_id": "college_2", "final": {"question": "What is the name of the student who has the highest total credits in the History department.", "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 1342, "db_id": "college_2", "final": {"question": "Find the title of courses that have two prerequisites?", "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "source_tables": ["course", "prereq"]}}
{"sample_id": 1488, "db_id": "college_2", "final": {"question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}}
{"sample_id": 1347, "db_id": "college_2", "final": {"question": "Count the number of courses without prerequisites.", "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"]}}
{"sample_id": 1436, "db_id": "college_2", "final": {"question": "What is the course title of the prerequisite of course Mobile Computing?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "source_tables": ["course", "prereq"]}}
{"sample_id": 1357, "db_id": "college_2", "final": {"question": "Count the number of rooms in Lamberton with capacity lower than 50.", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "source_tables": ["classroom"]}}
{"sample_id": 1372, "db_id": "college_2", "final": {"question": "Find the name of the department that offers the highest total credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "source_tables": ["course"]}}
{"sample_id": 1428, "db_id": "college_2", "final": {"question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "source_tables": ["course", "section"]}}
{"sample_id": 1375, "db_id": "college_2", "final": {"question": "Given the titles of all courses, in order of titles and credits.", "sql": "SELECT title FROM course ORDER BY title ,  credits", "source_tables": ["course"]}}
{"sample_id": 1451, "db_id": "college_2", "final": {"question": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.", "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "source_tables": ["course", "classroom", "section"]}}
{"sample_id": 1385, "db_id": "college_2", "final": {"question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "source_tables": ["student"]}}
{"sample_id": 1492, "db_id": "debate", "final": {"question": "How many debates are there?", "sql": "SELECT count(*) FROM debate", "source_tables": ["debate"]}}
{"sample_id": 1495, "db_id": "debate", "final": {"question": "List the dates of debates with number of audience bigger than 150", "sql": "SELECT Date FROM debate WHERE Num_of_Audience  >  150", "source_tables": ["debate"]}}
{"sample_id": 1498, "db_id": "debate", "final": {"question": "Show different parties of people along with the number of people in each party.", "sql": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party", "source_tables": ["people"]}}
{"sample_id": 1527, "db_id": "insurance_and_eClaims", "final": {"question": "What is the name of the claim processing stage that most of the claims are on?", "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["claims_processing_stages", "claims_processing"]}}
{"sample_id": 1543, "db_id": "insurance_and_eClaims", "final": {"question": "How many distinct claim outcome codes are there?", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "source_tables": ["claims_processing"]}}
{"sample_id": 1522, "db_id": "insurance_and_eClaims", "final": {"question": "Which customer made the smallest amount of claim in one claim? Return the customer details.", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "source_tables": ["customers", "policies", "claim_headers"]}}
{"sample_id": 1531, "db_id": "insurance_and_eClaims", "final": {"question": "Find the names of the customers who have an deputy policy.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"", "source_tables": ["customers", "policies"]}}
{"sample_id": 1544, "db_id": "insurance_and_eClaims", "final": {"question": "Count the number of distinct claim outcome codes.", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "source_tables": ["claims_processing"]}}
{"sample_id": 1538, "db_id": "insurance_and_eClaims", "final": {"question": "For each policy type, return its type code and its count in the record.", "sql": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "source_tables": ["policies"]}}
{"sample_id": 1510, "db_id": "insurance_and_eClaims", "final": {"question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?", "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "source_tables": ["customers", "policies"]}}
{"sample_id": 1524, "db_id": "insurance_and_eClaims", "final": {"question": "What are the names of customers who do not have any policies?", "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "policies"]}}
{"sample_id": 1559, "db_id": "customers_and_invoices", "final": {"question": "How many customers don't have an account?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "source_tables": ["customers", "accounts"]}}
{"sample_id": 1584, "db_id": "customers_and_invoices", "final": {"question": "Return the average, minimum, maximum, and total transaction amounts.", "sql": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 1608, "db_id": "customers_and_invoices", "final": {"question": "How many invoices correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id", "source_tables": ["invoices"]}}
{"sample_id": 1578, "db_id": "customers_and_invoices", "final": {"question": "Count the number of transactions.", "sql": "SELECT count(*) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 1619, "db_id": "customers_and_invoices", "final": {"question": "Show the product ids and the number of unique orders containing each product.", "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "source_tables": ["order_items"]}}
{"sample_id": 1570, "db_id": "customers_and_invoices", "final": {"question": "What are the the full names and ids for all customers, and how many accounts does each have?", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "source_tables": ["accounts", "customers"]}}
{"sample_id": 1563, "db_id": "customers_and_invoices", "final": {"question": "Show customer ids who don't have an account.", "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts", "source_tables": ["customers", "accounts"]}}
{"sample_id": 1564, "db_id": "customers_and_invoices", "final": {"question": "What are the customer ids for customers who do not have an account?", "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts", "source_tables": ["customers", "accounts"]}}
{"sample_id": 1596, "db_id": "customers_and_invoices", "final": {"question": "What are the different product sizes?", "sql": "SELECT DISTINCT product_size FROM Products", "source_tables": ["products"]}}
{"sample_id": 1581, "db_id": "customers_and_invoices", "final": {"question": "How many transaction does account with name 337 have?", "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"", "source_tables": ["accounts", "financial_transactions"]}}
{"sample_id": 1588, "db_id": "customers_and_invoices", "final": {"question": "What are total transaction amounts for each transaction type?", "sql": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"]}}
{"sample_id": 1627, "db_id": "customers_and_invoices", "final": {"question": "How many products were not included in any order?", "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "source_tables": ["order_items", "products"]}}
{"sample_id": 1607, "db_id": "customers_and_invoices", "final": {"question": "Show the order ids and the number of invoices for each order.", "sql": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id", "source_tables": ["invoices"]}}
{"sample_id": 1613, "db_id": "customers_and_invoices", "final": {"question": "Show all product names without an order.", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "source_tables": ["order_items", "products"]}}
{"sample_id": 1604, "db_id": "customers_and_invoices", "final": {"question": "Count the number of invoices.", "sql": "SELECT count(*) FROM Invoices", "source_tables": ["invoices"]}}
{"sample_id": 1625, "db_id": "customers_and_invoices", "final": {"question": "Show order ids and the total quantity in each order.", "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1646, "db_id": "wedding", "final": {"question": "Show the church names for the weddings of all people older than 30.", "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30", "source_tables": ["wedding", "people", "church"]}}
{"sample_id": 1634, "db_id": "wedding", "final": {"question": "Show all opening years and the number of churches that opened in that year.", "sql": "SELECT open_date ,  count(*) FROM church GROUP BY open_date", "source_tables": ["church"]}}
{"sample_id": 1629, "db_id": "wedding", "final": {"question": "How many churches opened before 1850 are there?", "sql": "SELECT count(*) FROM Church WHERE Open_Date  <  1850", "source_tables": ["church"]}}
{"sample_id": 1645, "db_id": "wedding", "final": {"question": "How many weddings are there in year 2016?", "sql": "SELECT count(*) FROM wedding WHERE YEAR  =  2016", "source_tables": ["wedding"]}}
{"sample_id": 1662, "db_id": "theme_gallery", "final": {"question": "Return the name of the artist who has the latest join year.", "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "source_tables": ["artist"]}}
{"sample_id": 1650, "db_id": "theme_gallery", "final": {"question": "Count the number of artists.", "sql": "SELECT count(*) FROM artist", "source_tables": ["artist"]}}
{"sample_id": 1652, "db_id": "theme_gallery", "final": {"question": "What are the names, ages, and countries of artists, sorted by the year they joined?", "sql": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "source_tables": ["artist"]}}
{"sample_id": 1666, "db_id": "theme_gallery", "final": {"question": "What are the theme and year for all exhibitions that have a ticket price under 15?", "sql": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "source_tables": ["exhibition"]}}
{"sample_id": 1687, "db_id": "theme_gallery", "final": {"question": "Show all artist names with an average exhibition attendance over 200.", "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "source_tables": ["exhibition", "artist", "exhibition_record"]}}
{"sample_id": 1678, "db_id": "theme_gallery", "final": {"question": "What are the themes and years for exhibitions, sorted by ticket price descending?", "sql": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "source_tables": ["exhibition"]}}
{"sample_id": 1669, "db_id": "theme_gallery", "final": {"question": "What is the name and country for the artist with most number of exhibitions?", "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["exhibition", "artist"]}}
{"sample_id": 1659, "db_id": "theme_gallery", "final": {"question": "What is the average and minimum age of all artists from United States.", "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "source_tables": ["artist"]}}
{"sample_id": 1700, "db_id": "epinions_1", "final": {"question": "Find the titles of items whose rating is higher than the average review rating of all items.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)", "source_tables": ["item", "review"]}}
{"sample_id": 1705, "db_id": "epinions_1", "final": {"question": "List the titles of all items in alphabetic order .", "sql": "SELECT title FROM item ORDER BY title", "source_tables": ["item"]}}
{"sample_id": 1711, "db_id": "epinions_1", "final": {"question": "Find the name of the user who gave the highest rating.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1", "source_tables": ["review", "useracct"]}}
{"sample_id": 1706, "db_id": "epinions_1", "final": {"question": "Find the name of the user who gives the most reviews.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["review", "useracct"]}}
{"sample_id": 1713, "db_id": "epinions_1", "final": {"question": "Find each target user's name and average trust score.", "sql": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id", "source_tables": ["trust", "useracct"]}}
{"sample_id": 1708, "db_id": "epinions_1", "final": {"question": "Find the name and id of the good with the highest average rank.", "sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1", "source_tables": ["item", "review"]}}
{"sample_id": 1721, "db_id": "riding_club", "final": {"question": "What are the gender and occupation of players?", "sql": "SELECT Gender ,  Occupation FROM player", "source_tables": ["player"]}}
{"sample_id": 1724, "db_id": "riding_club", "final": {"question": "What is the name of the player with the largest number of votes?", "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1", "source_tables": ["player"]}}
{"sample_id": 1719, "db_id": "riding_club", "final": {"question": "How many players are there?", "sql": "SELECT count(*) FROM player", "source_tables": ["player"]}}
{"sample_id": 1752, "db_id": "gymnast", "final": {"question": "List the names of the top 5 oldest people.", "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "source_tables": ["people"]}}
{"sample_id": 1738, "db_id": "gymnast", "final": {"question": "List the total points of gymnasts in descending order.", "sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "source_tables": ["gymnast"]}}
{"sample_id": 1762, "db_id": "gymnast", "final": {"question": "What is the most common hometown of gymnasts?", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1770, "db_id": "gymnast", "final": {"question": "Show the hometowns shared by people older than 23 and younger than 20.", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "source_tables": ["people"]}}
{"sample_id": 1757, "db_id": "gymnast", "final": {"question": "Return the average age across all gymnasts.", "sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1755, "db_id": "gymnast", "final": {"question": "Return the total points of the gymnast with the lowest age.", "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1749, "db_id": "gymnast", "final": {"question": "Return the names of gymnasts who did not grow up in Santo Domingo.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1773, "db_id": "gymnast", "final": {"question": "Count the number of different hometowns of these people.", "sql": "SELECT count(DISTINCT Hometown) FROM people", "source_tables": ["people"]}}
{"sample_id": 1810, "db_id": "small_bank_1", "final": {"question": "Find the saving balance of the account with the highest checking balance.", "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1823, "db_id": "small_bank_1", "final": {"question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1818, "db_id": "small_bank_1", "final": {"question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1789, "db_id": "small_bank_1", "final": {"question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "source_tables": ["accounts", "checking"]}}
{"sample_id": 1805, "db_id": "small_bank_1", "final": {"question": "What are the names of customers with accounts, and how many checking accounts do each of them have?", "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "source_tables": ["accounts", "checking"]}}
{"sample_id": 1824, "db_id": "small_bank_1", "final": {"question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "source_tables": ["accounts", "savings"]}}
{"sample_id": 1820, "db_id": "small_bank_1", "final": {"question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1795, "db_id": "small_bank_1", "final": {"question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1817, "db_id": "small_bank_1", "final": {"question": "What are the names, checking balances, and savings balances for all customers?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1799, "db_id": "small_bank_1", "final": {"question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "source_tables": ["accounts", "savings", "checking"]}}
{"sample_id": 1829, "db_id": "browser_web", "final": {"question": "What is the maximum, minimum and average market share of the listed browsers?", "sql": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser", "source_tables": ["browser"]}}
{"sample_id": 1838, "db_id": "browser_web", "final": {"question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?", "sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;", "source_tables": ["accelerator_compatible_browser", "browser", "web_client_accelerator"]}}
{"sample_id": 1831, "db_id": "browser_web", "final": {"question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?", "sql": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'", "source_tables": ["web_client_accelerator"]}}
{"sample_id": 1855, "db_id": "wrestler", "final": {"question": "Return the elimination movies of wrestlers on Team Orton.", "sql": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "source_tables": ["elimination"]}}
{"sample_id": 1866, "db_id": "wrestler", "final": {"question": "Show teams that have suffered more than three eliminations.", "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "source_tables": ["elimination"]}}
{"sample_id": 1853, "db_id": "wrestler", "final": {"question": "Give the names and locations of all wrestlers.", "sql": "SELECT Name ,  LOCATION FROM wrestler", "source_tables": ["wrestler"]}}
{"sample_id": 1877, "db_id": "wrestler", "final": {"question": "What are the names of wrestlers who have never been eliminated?", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1858, "db_id": "wrestler", "final": {"question": "List the names of wrestlers and the teams in elimination in descending order of days held.", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1861, "db_id": "wrestler", "final": {"question": "What is the time of elimination for the wrestler with the most days held?", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1881, "db_id": "wrestler", "final": {"question": "How many different teams have had eliminated wrestlers?", "sql": "SELECT COUNT (DISTINCT team) FROM elimination", "source_tables": ["elimination"]}}
{"sample_id": 1857, "db_id": "wrestler", "final": {"question": "Give the names of wrestlers and their elimination moves.", "sql": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1885, "db_id": "school_finance", "final": {"question": "Count the number of schools.", "sql": "SELECT count(*) FROM school", "source_tables": ["school"]}}
{"sample_id": 1894, "db_id": "school_finance", "final": {"question": "List each donator name and the amount of endowment in descending order of the amount of endowment.", "sql": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC", "source_tables": ["endowment"]}}
{"sample_id": 1897, "db_id": "school_finance", "final": {"question": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"", "sql": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Triton'", "source_tables": ["endowment", "school"]}}
{"sample_id": 1893, "db_id": "school_finance", "final": {"question": "How many donors have endowment for school named \"Glenn\"?", "sql": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"", "source_tables": ["endowment", "school"]}}
{"sample_id": 1892, "db_id": "school_finance", "final": {"question": "Show each county along with the number of schools and total enrollment in each county.", "sql": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county", "source_tables": ["school"]}}
{"sample_id": 1914, "db_id": "protein_institute", "final": {"question": "Show the number of buildings with a height above the average or a number of floors above the average.", "sql": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)", "source_tables": ["building"]}}
{"sample_id": 1926, "db_id": "protein_institute", "final": {"question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'", "source_tables": ["protein", "institution"]}}
{"sample_id": 1912, "db_id": "protein_institute", "final": {"question": "What is the name of the tallest building?", "sql": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1", "source_tables": ["building"]}}
{"sample_id": 1911, "db_id": "protein_institute", "final": {"question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.", "sql": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors", "source_tables": ["building"]}}
{"sample_id": 1938, "db_id": "cinema", "final": {"question": "Show all the cinema names and opening years in descending order of opening year.", "sql": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC", "source_tables": ["cinema"]}}
{"sample_id": 1948, "db_id": "cinema", "final": {"question": "Who are all the directors?", "sql": "SELECT DISTINCT directed_by FROM film", "source_tables": ["film"]}}
{"sample_id": 1946, "db_id": "cinema", "final": {"question": "What are the title and director of each film?", "sql": "SELECT title ,  directed_by FROM film", "source_tables": ["film"]}}
{"sample_id": 1947, "db_id": "cinema", "final": {"question": "Show all directors.", "sql": "SELECT DISTINCT directed_by FROM film", "source_tables": ["film"]}}
{"sample_id": 1956, "db_id": "cinema", "final": {"question": "Find the locations that have more than one movie theater with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "source_tables": ["cinema"]}}
{"sample_id": 1941, "db_id": "cinema", "final": {"question": "Show each location and the number of cinemas there.", "sql": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION", "source_tables": ["cinema"]}}
{"sample_id": 1976, "db_id": "products_for_hire", "final": {"question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'", "sql": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'", "source_tables": ["payments"]}}
{"sample_id": 1969, "db_id": "products_for_hire", "final": {"question": "What are the first name, last name, and gender of all the good customers? Order by their last name.", "sql": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name", "source_tables": ["customers"]}}
{"sample_id": 1962, "db_id": "products_for_hire", "final": {"question": "What is the maximum total amount paid by a customer? List the customer id and amount.", "sql": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1", "source_tables": ["payments"]}}
{"sample_id": 1984, "db_id": "phone_market", "final": {"question": "Show different carriers of phones together with the number of phones with each carrier.", "sql": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier", "source_tables": ["phone"]}}
{"sample_id": 1985, "db_id": "phone_market", "final": {"question": "Show the most frequently used carrier of the phones.", "sql": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["phone"]}}
{"sample_id": 1992, "db_id": "phone_market", "final": {"question": "List the names of phones that are not on any market.", "sql": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)", "source_tables": ["phone_market", "phone"]}}
{"sample_id": 2021, "db_id": "gas_company", "final": {"question": "Show all headquarters without a company in banking industry.", "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "source_tables": ["company"]}}
{"sample_id": 2026, "db_id": "gas_company", "final": {"question": "What are the main industries of the companies without gas stations and what are the companies?", "sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)", "source_tables": ["company", "station_company"]}}
{"sample_id": 2008, "db_id": "gas_company", "final": {"question": "What are the main indstries and total market value for each industry?", "sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "source_tables": ["company"]}}
{"sample_id": 2006, "db_id": "gas_company", "final": {"question": "For each headquarter, what are the headquarter and how many companies are centered there?", "sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters", "source_tables": ["company"]}}
{"sample_id": 2014, "db_id": "gas_company", "final": {"question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?", "sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}}
{"sample_id": 1995, "db_id": "gas_company", "final": {"question": "List the company name and rank for all companies in the decreasing order of their sales.", "sql": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC", "source_tables": ["company"]}}
{"sample_id": 2002, "db_id": "gas_company", "final": {"question": "What is the minimum, maximum, and average market value for every company?", "sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company", "source_tables": ["company"]}}
{"sample_id": 2003, "db_id": "gas_company", "final": {"question": "Show all main industry for all companies.", "sql": "SELECT DISTINCT main_industry FROM company", "source_tables": ["company"]}}
{"sample_id": 2023, "db_id": "gas_company", "final": {"question": "Show the company name with the number of gas station.", "sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "source_tables": ["company", "station_company"]}}
{"sample_id": 2078, "db_id": "party_people", "final": {"question": "Return the name of the member who is in charge of the most events.", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party_events", "member"]}}
{"sample_id": 2048, "db_id": "party_people", "final": {"question": "Who are the ministers who took office after 1961 or before 1959?", "sql": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959", "source_tables": ["party"]}}
{"sample_id": 2050, "db_id": "party_people", "final": {"question": "Which ministers are not a part of the Progress Party?", "sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'", "source_tables": ["party"]}}
{"sample_id": 2082, "db_id": "party_people", "final": {"question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"", "source_tables": ["party", "party_events", "region"]}}
{"sample_id": 2057, "db_id": "party_people", "final": {"question": "Show all party names and the number of members in each party.", "sql": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "source_tables": ["member", "party"]}}
{"sample_id": 2055, "db_id": "party_people", "final": {"question": "List member names and their party names.", "sql": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id", "source_tables": ["member", "party"]}}
{"sample_id": 2071, "db_id": "party_people", "final": {"question": "Show party names and the number of events for each party.", "sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "source_tables": ["party_events", "party"]}}
{"sample_id": 2043, "db_id": "party_people", "final": {"question": "How many parties do we have?", "sql": "SELECT count(DISTINCT party_name) FROM party", "source_tables": ["party"]}}
{"sample_id": 2089, "db_id": "pilot_record", "final": {"question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.", "sql": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality", "source_tables": ["pilot"]}}
{"sample_id": 2083, "db_id": "pilot_record", "final": {"question": "How many pilots are there?", "sql": "SELECT count(*) FROM pilot", "source_tables": ["pilot"]}}
{"sample_id": 2084, "db_id": "pilot_record", "final": {"question": "List the names of pilots in ascending order of rank.", "sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC", "source_tables": ["pilot"]}}
{"sample_id": 2113, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List the document type code for the document with the id 2.", "sql": "SELECT document_type_code FROM Documents WHERE document_id = 2;", "source_tables": ["documents"]}}
{"sample_id": 2116, "db_id": "cre_Doc_Control_Systems", "final": {"question": "How many documents were shipped by USPS?", "sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";", "source_tables": ["ref_shipping_agents", "documents"]}}
{"sample_id": 2120, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is the mail date of the document with id 7?", "sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;", "source_tables": ["documents_mailed"]}}
{"sample_id": 2098, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What document status codes do we have?", "sql": "SELECT document_status_code FROM Ref_Document_Status;", "source_tables": ["ref_document_status"]}}
{"sample_id": 2101, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is the description of document type 'Paper'?", "sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";", "source_tables": ["ref_document_types"]}}
{"sample_id": 2111, "db_id": "cre_Doc_Control_Systems", "final": {"question": "What is the document status description of the document with id 1?", "sql": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;", "source_tables": ["ref_document_status", "documents"]}}
{"sample_id": 2136, "db_id": "local_govt_in_alabama", "final": {"question": "List the type of the services in alphabetical order.", "sql": "SELECT service_type_code FROM services ORDER BY service_type_code", "source_tables": ["services"]}}
{"sample_id": 2132, "db_id": "local_govt_in_alabama", "final": {"question": "What are the ids and details of events that have more than one participants?", "sql": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1", "source_tables": ["participants_in_events", "events"]}}
{"sample_id": 2134, "db_id": "local_govt_in_alabama", "final": {"question": "What are all the the participant ids, type code and details?", "sql": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants", "source_tables": ["participants"]}}
{"sample_id": 2193, "db_id": "formula_1", "final": {"question": "What are the first names of all the different drivers in alphabetical order?", "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "source_tables": ["drivers"]}}
{"sample_id": 2214, "db_id": "formula_1", "final": {"question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "source_tables": ["results", "races"]}}
{"sample_id": 2208, "db_id": "formula_1", "final": {"question": "Find the id and location of circuits that belong to France or Belgium?", "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"", "source_tables": ["circuits"]}}
{"sample_id": 2218, "db_id": "formula_1", "final": {"question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["results", "races"]}}
{"sample_id": 2148, "db_id": "formula_1", "final": {"question": "What is the name and date of the most recent race?", "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"]}}
{"sample_id": 2154, "db_id": "formula_1", "final": {"question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?", "sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2204, "db_id": "formula_1", "final": {"question": "What is the id and last name of the driver who participated in the most races after 2010?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"]}}
{"sample_id": 2147, "db_id": "formula_1", "final": {"question": "What is the name of the race that occurred most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"]}}
{"sample_id": 2155, "db_id": "formula_1", "final": {"question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?", "sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2159, "db_id": "formula_1", "final": {"question": "What is the forename and surname of the driver with the shortest laptime?", "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2191, "db_id": "formula_1", "final": {"question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "source_tables": ["pitstops"]}}
{"sample_id": 2153, "db_id": "formula_1", "final": {"question": "What are the unique names of all race held between 2014 and 2017?", "sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "source_tables": ["races"]}}
{"sample_id": 2211, "db_id": "formula_1", "final": {"question": "What are the names of all the Japanese constructors that have earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "source_tables": ["constructors", "constructorstandings"]}}
{"sample_id": 2156, "db_id": "formula_1", "final": {"question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?", "sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "source_tables": ["drivers", "laptimes"]}}
{"sample_id": 2171, "db_id": "formula_1", "final": {"question": "What is the first and last name of all the German drivers?", "sql": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"", "source_tables": ["drivers"]}}
{"sample_id": 2183, "db_id": "formula_1", "final": {"question": "For each constructor id, how many races are there?", "sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "source_tables": ["constructorstandings"]}}
{"sample_id": 2229, "db_id": "machine_repair", "final": {"question": "What are the names of the technicians by ascending order of age?", "sql": "SELECT Name FROM technician ORDER BY Age ASC", "source_tables": ["technician"]}}
{"sample_id": 2246, "db_id": "machine_repair", "final": {"question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "source_tables": ["machine", "technician", "repair_assignment"]}}
{"sample_id": 2251, "db_id": "machine_repair", "final": {"question": "What are the names of the technicians  and how many machines are they assigned to repair?", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2242, "db_id": "machine_repair", "final": {"question": "Show the team that have at least two technicians.", "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "source_tables": ["technician"]}}
{"sample_id": 2250, "db_id": "machine_repair", "final": {"question": "Show names of technicians and the number of machines they are assigned to repair.", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2238, "db_id": "machine_repair", "final": {"question": "Show different teams of technicians and the number of technicians in each team.", "sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "source_tables": ["technician"]}}
{"sample_id": 2294, "db_id": "entrepreneur", "final": {"question": "Show the company of the tallest entrepreneur.", "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2262, "db_id": "entrepreneur", "final": {"question": "What is the average money requested by all entrepreneurs?", "sql": "SELECT avg(Money_Requested) FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2286, "db_id": "entrepreneur", "final": {"question": "List the names of entrepreneurs and their companies in descending order of money requested?", "sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2274, "db_id": "entrepreneur", "final": {"question": "What is the total money requested by entrepreneurs with height more than 1.85?", "sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2291, "db_id": "entrepreneur", "final": {"question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "source_tables": ["entrepreneur"]}}
{"sample_id": 2273, "db_id": "entrepreneur", "final": {"question": "Return the name of the heaviest entrepreneur.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2259, "db_id": "entrepreneur", "final": {"question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?", "sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "source_tables": ["entrepreneur"]}}
{"sample_id": 2260, "db_id": "entrepreneur", "final": {"question": "List the companies and the investors of entrepreneurs.", "sql": "SELECT Company ,  Investor FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2312, "db_id": "perpetrator", "final": {"question": "List the names of people that are not perpetrators.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2313, "db_id": "perpetrator", "final": {"question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.", "sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20", "source_tables": ["perpetrator"]}}
{"sample_id": 2300, "db_id": "perpetrator", "final": {"question": "What is the location of the perpetrator with the largest kills.", "sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1", "source_tables": ["perpetrator"]}}
{"sample_id": 2302, "db_id": "perpetrator", "final": {"question": "What are the names of perpetrators?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2361, "db_id": "csu_1", "final": {"question": "How many degrees were conferred in \"San Jose State University\" in 2000?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000", "source_tables": ["degrees", "campuses"]}}
{"sample_id": 2368, "db_id": "csu_1", "final": {"question": "What is the number of faculty at Long Beach State University in 2002?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2381, "db_id": "csu_1", "final": {"question": "What is the campus fee of \"San Francisco State University\" in year 2000?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2364, "db_id": "csu_1", "final": {"question": "What degrees were conferred in San Francisco State University in the year 2001?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001", "source_tables": ["degrees", "campuses"]}}
{"sample_id": 2354, "db_id": "csu_1", "final": {"question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2379, "db_id": "csu_1", "final": {"question": "What is the number of graduates in \"San Francisco State University\" in year 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2337, "db_id": "csu_1", "final": {"question": "Which university is in Los Angeles county and opened after 1950?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950", "source_tables": ["campuses"]}}
{"sample_id": 2385, "db_id": "csu_1", "final": {"question": "How many CSU campuses are there?", "sql": "SELECT count(*) FROM campuses", "source_tables": ["campuses"]}}
{"sample_id": 2343, "db_id": "csu_1", "final": {"question": "Which campus has the most faculties in year 2003?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "source_tables": ["faculty", "campuses"]}}
{"sample_id": 2360, "db_id": "csu_1", "final": {"question": "What campuses are in Los Angeles county?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "source_tables": ["campuses"]}}
{"sample_id": 2321, "db_id": "csu_1", "final": {"question": "Find all the campuses opened in 1958.", "sql": "SELECT campus FROM campuses WHERE YEAR  =  1958", "source_tables": ["campuses"]}}
{"sample_id": 2318, "db_id": "csu_1", "final": {"question": "What campuses are located in the county of Los Angeles?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "source_tables": ["campuses"]}}
{"sample_id": 2365, "db_id": "csu_1", "final": {"question": "How many faculty is there in total in the year of 2002?", "sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "source_tables": ["faculty"]}}
{"sample_id": 2329, "db_id": "csu_1", "final": {"question": "What is the campus fee of \"San Jose State University\" in year 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2409, "db_id": "candidate_poll", "final": {"question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.", "sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex", "source_tables": ["people", "candidate"]}}
{"sample_id": 2387, "db_id": "candidate_poll", "final": {"question": "How many candidates are there?", "sql": "SELECT count(*) FROM candidate", "source_tables": ["candidate"]}}
{"sample_id": 2390, "db_id": "candidate_poll", "final": {"question": "Return the poll resource associated with the most candidates.", "sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1", "source_tables": ["candidate"]}}
{"sample_id": 2400, "db_id": "candidate_poll", "final": {"question": "What are the names of all people, ordered by their date of birth?", "sql": "SELECT name FROM people ORDER BY date_of_birth", "source_tables": ["people"]}}
{"sample_id": 2388, "db_id": "candidate_poll", "final": {"question": "Count the number of candidates.", "sql": "SELECT count(*) FROM candidate", "source_tables": ["candidate"]}}
{"sample_id": 2426, "db_id": "candidate_poll", "final": {"question": "What is all the information about all people?", "sql": "SELECT * FROM people", "source_tables": ["people"]}}
{"sample_id": 2425, "db_id": "candidate_poll", "final": {"question": "List all info about all people.", "sql": "SELECT * FROM people", "source_tables": ["people"]}}
{"sample_id": 2398, "db_id": "candidate_poll", "final": {"question": "Return the poll source corresponding to the candidate who has the oppose rate.", "sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1", "source_tables": ["candidate"]}}
{"sample_id": 2429, "db_id": "movie_1", "final": {"question": "What is the name of the movie produced after 2000 and directed by James Cameron?", "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "source_tables": ["movie"]}}
{"sample_id": 2509, "db_id": "movie_1", "final": {"question": "What are the ids of the movies that are not reviewed by Brittany Harris.", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2490, "db_id": "movie_1", "final": {"question": "What are the movie titles with the highest average rating and what are those ratings?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "source_tables": ["rating", "movie"]}}
{"sample_id": 2495, "db_id": "movie_1", "final": {"question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "source_tables": ["rating", "movie"]}}
{"sample_id": 2442, "db_id": "movie_1", "final": {"question": "How many movie ratings have more than 3 stars?", "sql": "SELECT count(*) FROM Rating WHERE stars  >  3", "source_tables": ["rating"]}}
{"sample_id": 2472, "db_id": "movie_1", "final": {"question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?", "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "source_tables": ["rating", "movie", "reviewer"]}}
{"sample_id": 2491, "db_id": "movie_1", "final": {"question": "What are the movie titles and average rating of the movies with the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "source_tables": ["rating", "movie"]}}
{"sample_id": 2520, "db_id": "movie_1", "final": {"question": "What are the names of all movies made before 1980 or had James Cameron as the director?", "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "source_tables": ["movie"]}}
{"sample_id": 2462, "db_id": "movie_1", "final": {"question": "What are the names of all movies that were created after the most recent Steven Spielberg film?", "sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "source_tables": ["movie"]}}
{"sample_id": 2459, "db_id": "movie_1", "final": {"question": "What is the maximum stars and year for the most recent movie?", "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "source_tables": ["rating", "movie"]}}
{"sample_id": 2480, "db_id": "movie_1", "final": {"question": "For all directors who have directed more than one movie, what movies have they directed and what are their names?", "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "source_tables": ["movie"]}}
{"sample_id": 2498, "db_id": "movie_1", "final": {"question": "For each reviewer id, what is the title and rating for the movie with the smallest rating?", "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "source_tables": ["rating", "movie"]}}
{"sample_id": 2503, "db_id": "movie_1", "final": {"question": "What are the titles of all movies that have rating star is between 3 and 5?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "source_tables": ["rating", "movie"]}}
{"sample_id": 2451, "db_id": "movie_1", "final": {"question": "Find the titles of all movies that have no ratings.", "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "source_tables": ["rating", "movie"]}}
{"sample_id": 2436, "db_id": "movie_1", "final": {"question": "How many reviewers are there?", "sql": "SELECT count(*) FROM Reviewer", "source_tables": ["reviewer"]}}
{"sample_id": 2446, "db_id": "movie_1", "final": {"question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "source_tables": ["rating", "movie"]}}
{"sample_id": 2516, "db_id": "movie_1", "final": {"question": "What are the ids of all reviewers who have not given 4 stars at least once?", "sql": "SELECT rID FROM Rating WHERE stars != 4", "source_tables": ["rating"]}}
{"sample_id": 2428, "db_id": "movie_1", "final": {"question": "What are the names of all movies directed by Steven Spielberg?", "sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "source_tables": ["movie"]}}
{"sample_id": 2492, "db_id": "movie_1", "final": {"question": "What are the titles and average ratings for all movies that have the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "source_tables": ["rating", "movie"]}}
{"sample_id": 2526, "db_id": "county_public_safety", "final": {"question": "Count the number of countries.", "sql": "SELECT count(*) FROM county_public_safety", "source_tables": ["county_public_safety"]}}
{"sample_id": 2547, "db_id": "county_public_safety", "final": {"question": "Show the name of cities in the county that has the largest number of police officers.", "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2562, "db_id": "county_public_safety", "final": {"question": "What are the names of cities that are in counties that have a crime rate below 100?", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2556, "db_id": "county_public_safety", "final": {"question": "Which location has the most corresponding counties?", "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["county_public_safety"]}}
{"sample_id": 2529, "db_id": "county_public_safety", "final": {"question": "List the distinct police forces of counties whose location is not on east side.", "sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "source_tables": ["county_public_safety"]}}
{"sample_id": 2563, "db_id": "county_public_safety", "final": {"question": "Show the case burden of counties in descending order of population.", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "source_tables": ["county_public_safety"]}}
{"sample_id": 2538, "db_id": "county_public_safety", "final": {"question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.", "sql": "SELECT Hispanic FROM city WHERE Black  >  10", "source_tables": ["city"]}}
{"sample_id": 2546, "db_id": "county_public_safety", "final": {"question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?", "sql": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2575, "db_id": "inn_1", "final": {"question": "Which room has the highest rate? List the room's full name, rate, check in and check out date.", "sql": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2592, "db_id": "inn_1", "final": {"question": "How many people in total can stay in the modern rooms of this inn?", "sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "source_tables": ["rooms"]}}
{"sample_id": 2627, "db_id": "inn_1", "final": {"question": "Find the name of rooms whose price is higher than the average price.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "source_tables": ["rooms"]}}
{"sample_id": 2604, "db_id": "inn_1", "final": {"question": "What are the number of rooms for each bed type?", "sql": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;", "source_tables": ["rooms"]}}
{"sample_id": 2574, "db_id": "inn_1", "final": {"question": "Find the number of times ROY SWEAZY has reserved a room.", "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "source_tables": ["reservations"]}}
{"sample_id": 2597, "db_id": "inn_1", "final": {"question": "Find the first and last names of people who payed more than the rooms' base prices.", "sql": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2630, "db_id": "inn_1", "final": {"question": "How many rooms have not had any reservation yet?", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2612, "db_id": "inn_1", "final": {"question": "How many rooms have king beds? Report the number for each decor type.", "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;", "source_tables": ["rooms"]}}
{"sample_id": 2566, "db_id": "inn_1", "final": {"question": "What are the names of modern rooms that have a base price lower than $160 and two beds.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "source_tables": ["rooms"]}}
{"sample_id": 2565, "db_id": "inn_1", "final": {"question": "Find the names of all modern rooms with a base price below $160 and two beds.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "source_tables": ["rooms"]}}
{"sample_id": 2623, "db_id": "inn_1", "final": {"question": "How many different types of beds are there?", "sql": "SELECT count(DISTINCT bedType) FROM Rooms;", "source_tables": ["rooms"]}}
{"sample_id": 2573, "db_id": "inn_1", "final": {"question": "How many times does ROY SWEAZY has reserved a room.", "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "source_tables": ["reservations"]}}
{"sample_id": 2620, "db_id": "inn_1", "final": {"question": "What is the average base price of rooms, for each bed type?", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "source_tables": ["rooms"]}}
{"sample_id": 2581, "db_id": "inn_1", "final": {"question": "How many king beds are there?", "sql": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "source_tables": ["rooms"]}}
{"sample_id": 2648, "db_id": "local_govt_mdm", "final": {"question": "List the council tax ids and their related cmi cross references of all the parking fines.", "sql": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines", "source_tables": ["parking_fines"]}}
{"sample_id": 2647, "db_id": "local_govt_mdm", "final": {"question": "List all information about customer master index, and sort them by details in descending order.", "sql": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC", "source_tables": ["customer_master_index"]}}
{"sample_id": 2660, "db_id": "party_host", "final": {"question": "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?", "sql": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\"", "source_tables": ["party"]}}
{"sample_id": 2664, "db_id": "party_host", "final": {"question": "Which party had the most hosts? Give me the party location.", "sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2656, "db_id": "party_host", "final": {"question": "What are the themes of parties ordered by the number of hosts in ascending manner?", "sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "source_tables": ["party"]}}
{"sample_id": 2673, "db_id": "party_host", "final": {"question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.", "sql": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age", "source_tables": ["party", "host", "party_host"]}}
{"sample_id": 2662, "db_id": "party_host", "final": {"question": "Compute the average number of hosts for parties.", "sql": "SELECT avg(Number_of_hosts) FROM party", "source_tables": ["party"]}}
{"sample_id": 2670, "db_id": "party_host", "final": {"question": "Which nations have both hosts of age above 45 and hosts of age below 35?", "sql": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35", "source_tables": ["host"]}}
{"sample_id": 2696, "db_id": "storm_record", "final": {"question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?", "sql": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000", "source_tables": ["storm"]}}
{"sample_id": 2690, "db_id": "storm_record", "final": {"question": "Return the names of all regions other than Denmark.", "sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "source_tables": ["region"]}}
{"sample_id": 2718, "db_id": "storm_record", "final": {"question": "Return the names of the regions affected by storms that had a death count of at least 10.", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "source_tables": ["affected_region", "storm", "region"]}}
{"sample_id": 2719, "db_id": "storm_record", "final": {"question": "Show all storm names affecting region \"Denmark\".", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "source_tables": ["affected_region", "storm", "region"]}}
{"sample_id": 2695, "db_id": "storm_record", "final": {"question": "Show the average and maximum damage for all storms with max speed higher than 1000.", "sql": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000", "source_tables": ["storm"]}}
{"sample_id": 2720, "db_id": "storm_record", "final": {"question": "What are the names of the storms that affected Denmark?", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "source_tables": ["affected_region", "storm", "region"]}}
{"sample_id": 2700, "db_id": "storm_record", "final": {"question": "What are the names and damage in millions for storms, ordered by their max speeds descending?", "sql": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "source_tables": ["storm"]}}
{"sample_id": 2694, "db_id": "storm_record", "final": {"question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?", "sql": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1", "source_tables": ["storm"]}}
{"sample_id": 2760, "db_id": "election", "final": {"question": "For each delegate, find the names of the party they are part of.", "sql": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID", "source_tables": ["election", "party"]}}
{"sample_id": 2780, "db_id": "election", "final": {"question": "Which counties have two or more delegates? Give me the county names.", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2", "source_tables": ["election", "county"]}}
{"sample_id": 2758, "db_id": "election", "final": {"question": "Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names.", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"", "source_tables": ["election", "county"]}}
{"sample_id": 2761, "db_id": "election", "final": {"question": "Who were the governors of the parties associated with delegates from district 1?", "sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1", "source_tables": ["election", "party"]}}
{"sample_id": 2766, "db_id": "election", "final": {"question": "Which committees have delegates from the Democratic party?", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"", "source_tables": ["election", "party"]}}
{"sample_id": 2730, "db_id": "election", "final": {"question": "What are the name and population of each county?", "sql": "SELECT County_name ,  Population FROM county", "source_tables": ["county"]}}
{"sample_id": 2777, "db_id": "election", "final": {"question": "Show the 3 counties with the smallest population.", "sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3", "source_tables": ["county"]}}
{"sample_id": 2793, "db_id": "election", "final": {"question": "Which committees have delegates from both democratic party and liberal party?", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"", "source_tables": ["election", "party"]}}
{"sample_id": 2731, "db_id": "election", "final": {"question": "Show the average population of all counties.", "sql": "SELECT avg(Population) FROM county", "source_tables": ["county"]}}
{"sample_id": 2786, "db_id": "election", "final": {"question": "Which people severed as governor most frequently?", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2727, "db_id": "election", "final": {"question": "How many counties are there in total?", "sql": "SELECT count(*) FROM county", "source_tables": ["county"]}}
{"sample_id": 2781, "db_id": "election", "final": {"question": "Show the name of the party that has at least two records.", "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2", "source_tables": ["party"]}}
{"sample_id": 2742, "db_id": "election", "final": {"question": "What are the delegate and committee information for each election record?", "sql": "SELECT Delegate ,  Committee FROM election", "source_tables": ["election"]}}
{"sample_id": 2803, "db_id": "news_report", "final": {"question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.", "sql": "SELECT Nationality FROM journalist WHERE Years_working  >  10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working  <  3", "source_tables": ["journalist"]}}
{"sample_id": 2806, "db_id": "news_report", "final": {"question": "Show the names of journalists and the names of the events they reported in ascending order", "sql": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC", "source_tables": ["journalist", "news_report", "event"]}}
{"sample_id": 2798, "db_id": "news_report", "final": {"question": "Show the names of journalists from \"England\" or \"Wales\".", "sql": "SELECT Name FROM journalist WHERE Nationality  =  \"England\" OR Nationality  =  \"Wales\"", "source_tables": ["journalist"]}}
{"sample_id": 2815, "db_id": "restaurant_1", "final": {"question": "What is the rating of the restaurant Subway?", "sql": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";", "source_tables": ["restaurant"]}}
{"sample_id": 2826, "db_id": "restaurant_1", "final": {"question": "Which major has between 2 and 30 number of students? List major and the number of students.", "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;", "source_tables": ["student"]}}
{"sample_id": 2827, "db_id": "restaurant_1", "final": {"question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.", "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;", "source_tables": ["student"]}}
{"sample_id": 2829, "db_id": "restaurant_1", "final": {"question": "How many restaurant is the Sandwich type restaurant?", "sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'", "source_tables": ["type_of_restaurant", "restaurant_type", "restaurant"]}}
{"sample_id": 2843, "db_id": "customer_deliveries", "final": {"question": "Find the names and phone numbers of customers living in California state.", "sql": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'", "source_tables": ["customers", "addresses", "customer_addresses"]}}
{"sample_id": 2848, "db_id": "customer_deliveries", "final": {"question": "List the names of all routes in alphabetic order.", "sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name", "source_tables": ["delivery_routes"]}}
{"sample_id": 2838, "db_id": "customer_deliveries", "final": {"question": "How many different payment methods are there?", "sql": "SELECT count(DISTINCT payment_method) FROM customers", "source_tables": ["customers"]}}
{"sample_id": 2907, "db_id": "icfp_1", "final": {"question": "What is the first name of the author with last name \"Ueno\"?", "sql": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"", "source_tables": ["authors"]}}
{"sample_id": 2909, "db_id": "icfp_1", "final": {"question": "Find the last name of the author with first name \"Amal\".", "sql": "SELECT lname FROM authors WHERE fname  =  \"Amal\"", "source_tables": ["authors"]}}
{"sample_id": 2885, "db_id": "icfp_1", "final": {"question": "Which papers have \"Stephanie Weirich\" as an author?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2892, "db_id": "icfp_1", "final": {"question": "Which author has written the most papers? Find his or her last name.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["papers", "authorship", "authors"]}}
{"sample_id": 2869, "db_id": "icfp_1", "final": {"question": "Which authors belong to the institution \"Google\"? Show the first names and last names.", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "source_tables": ["inst", "authorship", "authors"]}}
{"sample_id": 2898, "db_id": "icfp_1", "final": {"question": "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.", "sql": "SELECT title FROM papers WHERE title LIKE \"%ML%\"", "source_tables": ["papers"]}}
{"sample_id": 2867, "db_id": "icfp_1", "final": {"question": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"", "source_tables": ["inst", "authorship", "authors"]}}
{"sample_id": 2856, "db_id": "icfp_1", "final": {"question": "Count the number of total papers.", "sql": "SELECT count(*) FROM papers", "source_tables": ["papers"]}}
{"sample_id": 2895, "db_id": "icfp_1", "final": {"question": "Find the name of the organization that has published the largest number of papers.", "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inst", "papers", "authorship"]}}
{"sample_id": 2880, "db_id": "icfp_1", "final": {"question": "Find the number of papers published by authors from the institution \"Tokohu University\".", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"", "source_tables": ["inst", "authorship", "papers"]}}
{"sample_id": 2899, "db_id": "icfp_1", "final": {"question": "Which paper's title contains the word \"Database\"?", "sql": "SELECT title FROM papers WHERE title LIKE \"%Database%\"", "source_tables": ["papers"]}}
{"sample_id": 2893, "db_id": "icfp_1", "final": {"question": "Retrieve the country that has published the most papers.", "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inst", "papers", "authorship"]}}
{"sample_id": 2863, "db_id": "icfp_1", "final": {"question": "What is the name of the institution that \"Matthias Blume\" belongs to?", "sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"", "source_tables": ["inst", "authorship", "authors"]}}
{"sample_id": 2965, "db_id": "sakila_1", "final": {"question": "What are all the movies rated as R? List the titles.", "sql": "SELECT title FROM film WHERE rating  =  'R'", "source_tables": ["film"]}}
{"sample_id": 2940, "db_id": "sakila_1", "final": {"question": "Count the number of customers who are active.", "sql": "SELECT count(*) FROM customer WHERE active = '1'", "source_tables": ["customer"]}}
{"sample_id": 2976, "db_id": "sakila_1", "final": {"question": "Count the number of different film ratings.", "sql": "SELECT count(DISTINCT rating) FROM film", "source_tables": ["film"]}}
{"sample_id": 2981, "db_id": "sakila_1", "final": {"question": "When did the first payment happen?", "sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "source_tables": ["payment"]}}
{"sample_id": 2939, "db_id": "sakila_1", "final": {"question": "How many customers have an active value of 1?", "sql": "SELECT count(*) FROM customer WHERE active = '1'", "source_tables": ["customer"]}}
{"sample_id": 2919, "db_id": "sakila_1", "final": {"question": "What is the most popular first name of the actors?", "sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["actor"]}}
{"sample_id": 2921, "db_id": "sakila_1", "final": {"question": "What is the most popular full name of the actors?", "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["actor"]}}
{"sample_id": 2934, "db_id": "sakila_1", "final": {"question": "Count the number of cities in Australia.", "sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'", "source_tables": ["city", "country"]}}
{"sample_id": 2983, "db_id": "sakila_1", "final": {"question": "Where does the customer with the first name Linda live? And what is her email?", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "source_tables": ["customer", "address"]}}
{"sample_id": 2974, "db_id": "sakila_1", "final": {"question": "Count the number of stores.", "sql": "SELECT count(*) FROM store", "source_tables": ["store"]}}
{"sample_id": 2953, "db_id": "sakila_1", "final": {"question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1", "source_tables": ["customer", "payment"]}}
{"sample_id": 2995, "db_id": "sakila_1", "final": {"question": "Where does the staff member with the first name Elsa live?", "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", "source_tables": ["staff", "address"]}}
{"sample_id": 2930, "db_id": "sakila_1", "final": {"question": "Count the number of addressed in the California district.", "sql": "SELECT count(*) FROM address WHERE district  =  'California'", "source_tables": ["address"]}}
{"sample_id": 2996, "db_id": "sakila_1", "final": {"question": "Give the address of the staff member who has the first name Elsa.", "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", "source_tables": ["staff", "address"]}}
{"sample_id": 2960, "db_id": "sakila_1", "final": {"question": "What is the title and id of the film that has the greatest number of copies in inventory?", "sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["inventory", "film"]}}
{"sample_id": 2942, "db_id": "sakila_1", "final": {"question": "What are the title and rental rate of the film with the highest rental rate?", "sql": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "source_tables": ["film"]}}
{"sample_id": 3041, "db_id": "loan_1", "final": {"question": "Find the name of customer who has the lowest credit score.", "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "source_tables": ["customer"]}}
{"sample_id": 3063, "db_id": "loan_1", "final": {"question": "Find the name of bank branches that provided some loans.", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "source_tables": ["bank", "loan"]}}
{"sample_id": 3021, "db_id": "loan_1", "final": {"question": "Find the number of different states which banks are located at.", "sql": "SELECT count(DISTINCT state) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3060, "db_id": "loan_1", "final": {"question": "What is the name of the bank branch that has lent the greatest amount?", "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "source_tables": ["bank", "loan"]}}
{"sample_id": 3037, "db_id": "loan_1", "final": {"question": "Find the name of customers whose credit score is below the average credit scores of all customers.", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "source_tables": ["customer"]}}
{"sample_id": 3004, "db_id": "loan_1", "final": {"question": "What is the total number of customers who use banks in New York City?", "sql": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "source_tables": ["bank"]}}
{"sample_id": 3033, "db_id": "loan_1", "final": {"question": "Find the name of customers who do not have a loan with a type of Mortgages.", "sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "source_tables": ["customer", "loan"]}}
{"sample_id": 3050, "db_id": "loan_1", "final": {"question": "What is the average account balance of customers with credit score below 50 for the different account types?", "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "source_tables": ["customer"]}}
{"sample_id": 3040, "db_id": "loan_1", "final": {"question": "What is the name of the bank branch with the greatest number of customers?", "sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "source_tables": ["bank"]}}
{"sample_id": 3031, "db_id": "loan_1", "final": {"question": "Find the name of customers who do not have an saving account.", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "source_tables": ["customer"]}}
{"sample_id": 3042, "db_id": "loan_1", "final": {"question": "What is the name of the customer with the worst credit score?", "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "source_tables": ["customer"]}}
{"sample_id": 3006, "db_id": "loan_1", "final": {"question": "What is the average number of customers across banks in the state of Utah?", "sql": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'", "source_tables": ["bank"]}}
{"sample_id": 3001, "db_id": "loan_1", "final": {"question": "How many customers are there?", "sql": "SELECT sum(no_of_customers) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3054, "db_id": "loan_1", "final": {"question": "What are the names of the different bank branches, and what are their total loan amounts?", "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "source_tables": ["bank", "loan"]}}
{"sample_id": 3023, "db_id": "loan_1", "final": {"question": "How many distinct types of accounts are there?", "sql": "SELECT count(DISTINCT acc_type) FROM customer", "source_tables": ["customer"]}}
{"sample_id": 3000, "db_id": "loan_1", "final": {"question": "Count the number of bank branches.", "sql": "SELECT count(*) FROM bank", "source_tables": ["bank"]}}
{"sample_id": 3113, "db_id": "behavior_monitoring", "final": {"question": "What are the line 1 and average monthly rentals of all student addresses?", "sql": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id", "source_tables": ["addresses", "student_addresses"]}}
{"sample_id": 3118, "db_id": "behavior_monitoring", "final": {"question": "What are the line 1 of addresses shared by some students and some teachers?", "sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id", "source_tables": ["teachers", "students", "addresses"]}}
{"sample_id": 3081, "db_id": "behavior_monitoring", "final": {"question": "How many addresses have zip code 197?", "sql": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"", "source_tables": ["addresses"]}}
{"sample_id": 3103, "db_id": "behavior_monitoring", "final": {"question": "What are the code and description of the most frequent behavior incident type?", "sql": "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["behavior_incident", "ref_incident_type"]}}
{"sample_id": 3083, "db_id": "behavior_monitoring", "final": {"question": "Return all distinct detention type codes.", "sql": "SELECT DISTINCT detention_type_code FROM Detention", "source_tables": ["detention"]}}
{"sample_id": 3110, "db_id": "behavior_monitoring", "final": {"question": "What is the cell phone number of the student whose address has the lowest monthly rental?", "sql": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1", "source_tables": ["students", "student_addresses"]}}
{"sample_id": 3101, "db_id": "behavior_monitoring", "final": {"question": "What are the id and first name of the student whose addresses have the highest average monthly rental?", "sql": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "source_tables": ["students", "student_addresses"]}}
{"sample_id": 3105, "db_id": "behavior_monitoring", "final": {"question": "Find the dates of assessment notes for students with first name \"Fanny\".", "sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\"", "source_tables": ["students", "assessment_notes"]}}
{"sample_id": 3133, "db_id": "assets_maintenance", "final": {"question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.", "sql": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)", "source_tables": ["maintenance_engineers", "engineer_visits"]}}
{"sample_id": 3137, "db_id": "assets_maintenance", "final": {"question": "Which kind of part has the least number of faults? List the part name.", "sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1", "source_tables": ["parts", "part_faults"]}}
{"sample_id": 3127, "db_id": "assets_maintenance", "final": {"question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.", "sql": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "source_tables": ["skills_required_to_fix", "part_faults", "skills"]}}
{"sample_id": 3120, "db_id": "assets_maintenance", "final": {"question": "How many assets does each maintenance contract contain? List the number and the contract id.", "sql": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id", "source_tables": ["assets", "maintenance_contracts"]}}
{"sample_id": 3138, "db_id": "assets_maintenance", "final": {"question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.", "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["maintenance_engineers", "engineer_visits"]}}
{"sample_id": 3121, "db_id": "assets_maintenance", "final": {"question": "How many assets does each third party company supply? List the count and the company id.", "sql": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id", "source_tables": ["third_party_companies", "assets"]}}
{"sample_id": 3156, "db_id": "station_weather", "final": {"question": "Find the name of the train whose route runs through greatest number of stations.", "sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["train", "route"]}}
{"sample_id": 3157, "db_id": "station_weather", "final": {"question": "Find the number of trains for each station, as well as the station network name and services.", "sql": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id", "source_tables": ["route", "station"]}}
{"sample_id": 3150, "db_id": "station_weather", "final": {"question": "list the local authorities and services provided by all stations.", "sql": "SELECT local_authority ,  services FROM station", "source_tables": ["station"]}}
{"sample_id": 3290, "db_id": "college_1", "final": {"question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "source_tables": ["student"]}}
{"sample_id": 3224, "db_id": "college_1", "final": {"question": "How many departments does the college has?", "sql": "SELECT count(DISTINCT dept_name) FROM department", "source_tables": ["department"]}}
{"sample_id": 3319, "db_id": "college_1", "final": {"question": "What is the last name of the student who received an A in the class with the code 10018?", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "source_tables": ["student", "enroll"]}}
{"sample_id": 3317, "db_id": "college_1", "final": {"question": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?", "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "source_tables": ["class", "employee", "department", "professor"]}}
{"sample_id": 3240, "db_id": "college_1", "final": {"question": "Find the total number of employees.", "sql": "SELECT count(*) FROM employee", "source_tables": ["employee"]}}
{"sample_id": 3325, "db_id": "college_1", "final": {"question": "What are the first names of student who only took one course?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "source_tables": ["student", "enroll"]}}
{"sample_id": 3254, "db_id": "college_1", "final": {"question": "Find the first names and offices of all professors sorted by alphabetical order of their first name.", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname", "source_tables": ["professor", "employee"]}}
{"sample_id": 3217, "db_id": "college_1", "final": {"question": "Which department has the highest average student GPA, and what is the average gpa?", "sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "source_tables": ["student", "department"]}}
{"sample_id": 3198, "db_id": "college_1", "final": {"question": "Find the number of classes in each department.", "sql": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code", "source_tables": ["class", "course"]}}
{"sample_id": 3229, "db_id": "college_1", "final": {"question": "What is the number of different class sections offered in the course ACCT-211?", "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "source_tables": ["class"]}}
{"sample_id": 3174, "db_id": "college_1", "final": {"question": "How many classes are professor whose last name is Graztevski has?", "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "source_tables": ["class", "employee"]}}
{"sample_id": 3306, "db_id": "college_1", "final": {"question": "Find the first names and offices of all instructors who have taught some course and also find the course description.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "source_tables": ["class", "course", "employee", "professor"]}}
{"sample_id": 3246, "db_id": "college_1", "final": {"question": "What is the name of the department that has the largest number of students enrolled?", "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["class", "course", "department", "enroll"]}}
{"sample_id": 3205, "db_id": "college_1", "final": {"question": "What is the count and code of the job with the most employee?", "sql": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee"]}}
{"sample_id": 3201, "db_id": "college_1", "final": {"question": "How many classes exist for each school?", "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code", "source_tables": ["class", "course", "department"]}}
{"sample_id": 3226, "db_id": "college_1", "final": {"question": "How many courses are offered by the Computer Info. Systems department?", "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"", "source_tables": ["course", "department"]}}
{"sample_id": 3218, "db_id": "college_1", "final": {"question": "how many schools exist in total?", "sql": "SELECT count(DISTINCT school_code) FROM department", "source_tables": ["department"]}}
{"sample_id": 3311, "db_id": "college_1", "final": {"question": "What are the names of all students who took a class and the corresponding course descriptions?", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "source_tables": ["student", "enroll", "class", "course"]}}
{"sample_id": 3300, "db_id": "college_1", "final": {"question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "source_tables": ["employee", "department", "professor"]}}
{"sample_id": 3281, "db_id": "college_1", "final": {"question": "How many professors attained either Ph.D. or Masters degrees?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'", "source_tables": ["professor"]}}
{"sample_id": 3212, "db_id": "college_1", "final": {"question": "Find the total number of hours have done for all students in each department.", "sql": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "source_tables": ["student"]}}
{"sample_id": 3295, "db_id": "college_1", "final": {"question": "What is the first name and GPA of every student that has a GPA lower than average?", "sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "source_tables": ["student"]}}
{"sample_id": 3286, "db_id": "college_1", "final": {"question": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "source_tables": ["class", "department", "enroll", "course", "student"]}}
{"sample_id": 3284, "db_id": "college_1", "final": {"question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'", "source_tables": ["class", "employee"]}}
{"sample_id": 3238, "db_id": "college_1", "final": {"question": "What is the first name of students enrolled in class ACCT-211 and got grade C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "source_tables": ["student", "class", "enroll"]}}
{"sample_id": 3228, "db_id": "college_1", "final": {"question": "How many sections does course ACCT-211 has?", "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "source_tables": ["class"]}}
{"sample_id": 3305, "db_id": "college_1", "final": {"question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "source_tables": ["class", "course", "employee"]}}
{"sample_id": 3236, "db_id": "college_1", "final": {"question": "What is the first name of each student enrolled in class ACCT-211?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "source_tables": ["student", "class", "enroll"]}}
{"sample_id": 3210, "db_id": "college_1", "final": {"question": "Find the number of students for each department.", "sql": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "source_tables": ["student"]}}
{"sample_id": 3304, "db_id": "college_1", "final": {"question": "Find the first names of all instructors who have taught some course and the course description.", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "source_tables": ["class", "course", "employee"]}}
{"sample_id": 3193, "db_id": "college_1", "final": {"question": "How many sections does each course have?", "sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "source_tables": ["class"]}}
{"sample_id": 3184, "db_id": "college_1", "final": {"question": "How many different locations does each school have?", "sql": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code", "source_tables": ["department"]}}
{"sample_id": 3337, "db_id": "sports_competition", "final": {"question": "What are the types of every competition and in which countries are they located?", "sql": "SELECT Competition_type ,  Country FROM competition", "source_tables": ["competition"]}}
{"sample_id": 3330, "db_id": "sports_competition", "final": {"question": "How many clubs are there?", "sql": "SELECT count(*) FROM club", "source_tables": ["club"]}}
{"sample_id": 3367, "db_id": "sports_competition", "final": {"question": "What are the positions of both players that have more than 20 20 points and less than 10 points?", "sql": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10", "source_tables": ["player"]}}
{"sample_id": 3373, "db_id": "sports_competition", "final": {"question": "What are the names of all players that got more than the average number of points?", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "source_tables": ["player"]}}
{"sample_id": 3348, "db_id": "sports_competition", "final": {"question": "Please show the names and the players of clubs.", "sql": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "source_tables": ["player", "club"]}}
{"sample_id": 3340, "db_id": "sports_competition", "final": {"question": "What are the maximum and minimum number of silver medals for clubs.", "sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "source_tables": ["club_rank"]}}
{"sample_id": 3342, "db_id": "sports_competition", "final": {"question": "How many clubs have total medals less than 10?", "sql": "SELECT count(*) FROM club_rank WHERE Total  <  10", "source_tables": ["club_rank"]}}
{"sample_id": 3381, "db_id": "sports_competition", "final": {"question": "What are the countries that have never participated in any friendly-type competitions?", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "source_tables": ["competition"]}}
{"sample_id": 3380, "db_id": "sports_competition", "final": {"question": "Find the countries that have never participated in any competition with Friendly type.", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "source_tables": ["competition"]}}
{"sample_id": 3374, "db_id": "sports_competition", "final": {"question": "find the number of players whose points are lower than 30 in each position.", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "source_tables": ["player"]}}
{"sample_id": 3392, "db_id": "manufacturer", "final": {"question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.", "sql": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990", "source_tables": ["manufacturer"]}}
{"sample_id": 3382, "db_id": "manufacturer", "final": {"question": "How many furniture components are there in total?", "sql": "SELECT sum(num_of_component) FROM furniture", "source_tables": ["furniture"]}}
{"sample_id": 3385, "db_id": "manufacturer", "final": {"question": "Find the component amounts and names of all furnitures that have more than 10 components.", "sql": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10", "source_tables": ["furniture"]}}
{"sample_id": 3464, "db_id": "hr_1", "final": {"question": "return the smallest salary for every departments.", "sql": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3429, "db_id": "hr_1", "final": {"question": "What is all the information about employees hired before June 21, 2002?", "sql": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'", "source_tables": ["employees"]}}
{"sample_id": 3457, "db_id": "hr_1", "final": {"question": "Give the name of each department and the number of employees in each.", "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name", "source_tables": ["departments", "employees"]}}
{"sample_id": 3427, "db_id": "hr_1", "final": {"question": "What are the salaries and manager ids for employees who have managers?", "sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"", "source_tables": ["employees"]}}
{"sample_id": 3450, "db_id": "hr_1", "final": {"question": "display job ID for those jobs that were done by two or more for more than 300 days.", "sql": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2", "source_tables": ["job_history"]}}
{"sample_id": 3514, "db_id": "hr_1", "final": {"question": "display the department name, city, and state province for each department.", "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id", "source_tables": ["locations", "departments"]}}
{"sample_id": 3493, "db_id": "hr_1", "final": {"question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?", "sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")", "source_tables": ["employees"]}}
{"sample_id": 3433, "db_id": "hr_1", "final": {"question": "Which employees were hired after September 7th, 1987?", "sql": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'", "source_tables": ["employees"]}}
{"sample_id": 3415, "db_id": "hr_1", "final": {"question": "Return the phone numbers of employees with salaries between 8000 and 12000.", "sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000", "source_tables": ["employees"]}}
{"sample_id": 3451, "db_id": "hr_1", "final": {"question": "What are the job ids for jobs done more than once for a period of more than 300 days?", "sql": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2", "source_tables": ["job_history"]}}
{"sample_id": 3418, "db_id": "hr_1", "final": {"question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?", "sql": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"", "source_tables": ["employees"]}}
{"sample_id": 3512, "db_id": "hr_1", "final": {"question": "display those employees who contain a letter z to their first name and also display their last name, city.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'", "source_tables": ["locations", "departments", "employees"]}}
{"sample_id": 3505, "db_id": "hr_1", "final": {"question": "What are total salaries and department id for each department that has more than 2 employees?", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "source_tables": ["employees"]}}
{"sample_id": 3421, "db_id": "hr_1", "final": {"question": "Return the full names and salaries for employees with first names that end with the letter m.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'", "source_tables": ["employees"]}}
{"sample_id": 3420, "db_id": "hr_1", "final": {"question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'", "source_tables": ["employees"]}}
{"sample_id": 3422, "db_id": "hr_1", "final": {"question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.", "sql": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'", "source_tables": ["employees"]}}
{"sample_id": 3446, "db_id": "hr_1", "final": {"question": "display the average salary of employees for each department who gets a commission percentage.", "sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3459, "db_id": "hr_1", "final": {"question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?", "sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000", "source_tables": ["job_history", "employees"]}}
{"sample_id": 3482, "db_id": "hr_1", "final": {"question": "Find the job ID for those jobs which average salary is above 8000.", "sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000", "source_tables": ["employees"]}}
{"sample_id": 3487, "db_id": "hr_1", "final": {"question": "Give the first name and job id for all employees in the Finance department.", "sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'", "source_tables": ["departments", "employees"]}}
{"sample_id": 3476, "db_id": "hr_1", "final": {"question": "display all the information about the department Marketing.", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "source_tables": ["departments"]}}
{"sample_id": 3442, "db_id": "hr_1", "final": {"question": "display those departments where more than ten employees work who got a commission percentage.", "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10", "source_tables": ["employees"]}}
{"sample_id": 3452, "db_id": "hr_1", "final": {"question": "display the ID for those employees who did two or more jobs in the past.", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "source_tables": ["job_history"]}}
{"sample_id": 3462, "db_id": "hr_1", "final": {"question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?", "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )", "source_tables": ["employees"]}}
{"sample_id": 3557, "db_id": "music_1", "final": {"question": "What is the average song rating for each language?", "sql": "SELECT avg(rating) ,  languages FROM song GROUP BY languages", "source_tables": ["song"]}}
{"sample_id": 3588, "db_id": "music_1", "final": {"question": "Return the names of singers who are from UK and released an English song.", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3591, "db_id": "music_1", "final": {"question": "What is the average rating and resolution of all bangla songs?", "sql": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"", "source_tables": ["song"]}}
{"sample_id": 3526, "db_id": "music_1", "final": {"question": "Find the names of all English songs.", "sql": "SELECT song_name FROM song WHERE languages  =  \"english\"", "source_tables": ["song"]}}
{"sample_id": 3549, "db_id": "music_1", "final": {"question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000", "source_tables": ["files", "song"]}}
{"sample_id": 3529, "db_id": "music_1", "final": {"question": "What are the id of all the files in mp3 format?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp3\"", "source_tables": ["files"]}}
{"sample_id": 3613, "db_id": "music_1", "final": {"question": "What are the top 3 artists with the largest number of songs in the language Bangla?", "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["artist", "song"]}}
{"sample_id": 3540, "db_id": "music_1", "final": {"question": "How many artists are from Bangladesh?", "sql": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"", "source_tables": ["artist"]}}
{"sample_id": 3595, "db_id": "music_1", "final": {"question": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?", "sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages", "source_tables": ["files", "song"]}}
{"sample_id": 3617, "db_id": "music_1", "final": {"question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?", "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name", "source_tables": ["files", "song"]}}
{"sample_id": 3603, "db_id": "music_1", "final": {"question": "What are the names of the three artists who have produced the most songs, and how many works did they produce?", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["artist", "song"]}}
{"sample_id": 3599, "db_id": "music_1", "final": {"question": "What are the names and number of works for all artists who have sung at least one song in English?", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1", "source_tables": ["artist", "song"]}}
{"sample_id": 3611, "db_id": "music_1", "final": {"question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")", "source_tables": ["song"]}}
{"sample_id": 3545, "db_id": "music_1", "final": {"question": "Find the file format that is used by the most files.", "sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1", "source_tables": ["files"]}}
{"sample_id": 3584, "db_id": "music_1", "final": {"question": "Find the names of songs whose genre is modern or language is English.", "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"", "source_tables": ["song"]}}
{"sample_id": 3522, "db_id": "music_1", "final": {"question": "What is the name of the song that was released in the most recent year?", "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1", "source_tables": ["song"]}}
{"sample_id": 3615, "db_id": "music_1", "final": {"question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?", "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating", "source_tables": ["song"]}}
{"sample_id": 3532, "db_id": "music_1", "final": {"question": "List the file size and format for all songs that have resolution lower than 800.", "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800", "source_tables": ["files", "song"]}}
{"sample_id": 3565, "db_id": "music_1", "final": {"question": "What are the names of the songs that have a lower rating than at least one blues song?", "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")", "source_tables": ["song"]}}
{"sample_id": 3542, "db_id": "music_1", "final": {"question": "What is the average rating of songs produced by female artists?", "sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"", "source_tables": ["artist", "song"]}}
{"sample_id": 3657, "db_id": "baseball_1", "final": {"question": "What are the first name and last name of the players who have weight above 220 or height below 75?", "sql": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75", "source_tables": ["player"]}}
{"sample_id": 3622, "db_id": "baseball_1", "final": {"question": "what is the full name and id of the college with the largest number of baseball players?", "sql": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["college", "player_college"]}}
{"sample_id": 3624, "db_id": "baseball_1", "final": {"question": "What is average salary of the players in the team named 'Boston Red Stockings' ?", "sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'", "source_tables": ["team", "salary"]}}
{"sample_id": 3676, "db_id": "baseball_1", "final": {"question": "What were all the salary values of players in 2010 and 2001?", "sql": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001", "source_tables": ["salary"]}}
{"sample_id": 3694, "db_id": "baseball_1", "final": {"question": "Which team had the least number of attendances in home games in 1980?", "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3628, "db_id": "baseball_1", "final": {"question": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.", "sql": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["player", "all_star"]}}
{"sample_id": 3661, "db_id": "baseball_1", "final": {"question": "Count the number of times the team \"Boston Red Stockings\" lost in 2009 postseason.", "sql": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;", "source_tables": ["team", "postseason"]}}
{"sample_id": 3670, "db_id": "baseball_1", "final": {"question": "What is the total salary paid by team Boston Red Stockings in 2010?", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010", "source_tables": ["team", "salary"]}}
{"sample_id": 3647, "db_id": "baseball_1", "final": {"question": "Count the number of players who were born in USA and have bats information 'R'.", "sql": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';", "source_tables": ["player"]}}
{"sample_id": 3629, "db_id": "baseball_1", "final": {"question": "Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.", "sql": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["player", "all_star"]}}
{"sample_id": 3671, "db_id": "baseball_1", "final": {"question": "What is the total salary expenses of team Boston Red Stockings in 2010?", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010", "source_tables": ["team", "salary"]}}
{"sample_id": 3640, "db_id": "baseball_1", "final": {"question": "Which 3 players won the most player awards? List their full name and id.", "sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;", "source_tables": ["player", "player_award"]}}
{"sample_id": 3689, "db_id": "baseball_1", "final": {"question": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;", "source_tables": ["salary", "player"]}}
{"sample_id": 3703, "db_id": "baseball_1", "final": {"question": "Which park did the most people attend in 2008?", "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;", "source_tables": ["park", "home_game"]}}
{"sample_id": 3692, "db_id": "baseball_1", "final": {"question": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?", "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3678, "db_id": "baseball_1", "final": {"question": "In which year did the least people enter hall of fame?", "sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["hall_of_fame"]}}
{"sample_id": 3709, "db_id": "mountain_photos", "final": {"question": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?", "sql": "SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'", "source_tables": ["mountain"]}}
{"sample_id": 3714, "db_id": "mountain_photos", "final": {"question": "How many different kinds of lens brands are there?", "sql": "SELECT count(DISTINCT brand) FROM camera_lens", "source_tables": ["camera_lens"]}}
{"sample_id": 3719, "db_id": "mountain_photos", "final": {"question": "List the camera lens names containing substring \"Digital\".", "sql": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"", "source_tables": ["camera_lens"]}}
{"sample_id": 3740, "db_id": "program_share", "final": {"question": "Which channels broadcast both in the morning and at night? Give me the channel names.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "source_tables": ["channel", "broadcast"]}}
{"sample_id": 3756, "db_id": "program_share", "final": {"question": "List the names of all the channels owned by either CCTV or HBS", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "source_tables": ["channel"]}}
{"sample_id": 3728, "db_id": "program_share", "final": {"question": "Count the number of programs.", "sql": "SELECT count(*) FROM program", "source_tables": ["program"]}}
{"sample_id": 3724, "db_id": "program_share", "final": {"question": "Give me a list of all the channel names sorted by the channel rating in descending order.", "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "source_tables": ["channel"]}}
{"sample_id": 3755, "db_id": "program_share", "final": {"question": "What are the names of the channels owned by CCTV or HBS?", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "source_tables": ["channel"]}}
{"sample_id": 3730, "db_id": "program_share", "final": {"question": "What is the list of program names, sorted by the order of launch date?", "sql": "SELECT name FROM program ORDER BY launch", "source_tables": ["program"]}}
{"sample_id": 3750, "db_id": "program_share", "final": {"question": "What is the list of program origins ordered alphabetically?", "sql": "SELECT origin FROM program ORDER BY origin", "source_tables": ["program"]}}
{"sample_id": 3752, "db_id": "program_share", "final": {"question": "Count the number of distinct channel owners.", "sql": "SELECT count(DISTINCT OWNER) FROM channel", "source_tables": ["channel"]}}
{"sample_id": 3797, "db_id": "e_learning", "final": {"question": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".", "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3818, "db_id": "e_learning", "final": {"question": "Return the descriptions and names of the courses that have more than two students enrolled in.", "sql": "SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3772, "db_id": "e_learning", "final": {"question": "What are all the dates of enrollment and completion in record?", "sql": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"]}}
{"sample_id": 3808, "db_id": "e_learning", "final": {"question": "What are the subject ID, subject name, and the number of available courses for each subject?", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id", "source_tables": ["courses", "subjects"]}}
{"sample_id": 3835, "db_id": "e_learning", "final": {"question": "Find the personal names of students not enrolled in any course.", "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3809, "db_id": "e_learning", "final": {"question": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "source_tables": ["courses", "subjects"]}}
{"sample_id": 3827, "db_id": "e_learning", "final": {"question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3773, "db_id": "e_learning", "final": {"question": "How many distinct students are enrolled in courses?", "sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"]}}
{"sample_id": 3811, "db_id": "e_learning", "final": {"question": "What is the date of enrollment of the course named \"Spanish\"?", "sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"", "source_tables": ["courses", "student_course_enrolment"]}}
{"sample_id": 3775, "db_id": "e_learning", "final": {"question": "How many distinct courses are enrolled in by students?", "sql": "SELECT count(course_id) FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"]}}
{"sample_id": 3840, "db_id": "e_learning", "final": {"question": "What are the login names used both by some course authors and some students?", "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "source_tables": ["students", "course_authors_and_tutors"]}}
{"sample_id": 3796, "db_id": "e_learning", "final": {"question": "Which course author teaches the \"advanced database\" course? Give me his or her login name.", "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"", "source_tables": ["courses", "course_authors_and_tutors"]}}
{"sample_id": 3764, "db_id": "e_learning", "final": {"question": "Return the description for the courses named \"database\".", "sql": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"", "source_tables": ["courses"]}}
{"sample_id": 3833, "db_id": "e_learning", "final": {"question": "Find the student ID and middle name for all the students with at most two enrollments.", "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3794, "db_id": "e_learning", "final": {"question": "For each distinct test result, find the number of students who got the result.", "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC", "source_tables": ["student_tests_taken"]}}
{"sample_id": 3787, "db_id": "e_learning", "final": {"question": "List all the subject names.", "sql": "SELECT subject_name FROM SUBJECTS", "source_tables": ["subjects"]}}
{"sample_id": 3872, "db_id": "insurance_policies", "final": {"question": "Which payment method is used the most often?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["payments"]}}
{"sample_id": 3854, "db_id": "insurance_policies", "final": {"question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "source_tables": ["claims"]}}
{"sample_id": 3848, "db_id": "insurance_policies", "final": {"question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.", "sql": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "source_tables": ["payments"]}}
{"sample_id": 3870, "db_id": "insurance_policies", "final": {"question": "Tell me the the claim date and settlement date for each settlement case.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3845, "db_id": "insurance_policies", "final": {"question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "source_tables": ["customers", "claims", "customer_policies"]}}
{"sample_id": 3860, "db_id": "insurance_policies", "final": {"question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["settlements", "claims"]}}
{"sample_id": 3849, "db_id": "insurance_policies", "final": {"question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "source_tables": ["claims"]}}
{"sample_id": 3850, "db_id": "insurance_policies", "final": {"question": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "source_tables": ["claims"]}}
{"sample_id": 3866, "db_id": "insurance_policies", "final": {"question": "Compute the total amount of settlement across all the settlements.", "sql": "SELECT sum(Amount_Settled) FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3899, "db_id": "hospital_1", "final": {"question": "what are name and phone number of patients who had more than one appointment?", "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1", "source_tables": ["appointment", "patient"]}}
{"sample_id": 3941, "db_id": "hospital_1", "final": {"question": "Find the patient who has the most recent undergoing treatment?", "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "source_tables": ["undergoes"]}}
{"sample_id": 3969, "db_id": "hospital_1", "final": {"question": "What is the average cost of procedures that physician John Wen was trained in?", "sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "physician", "procedures"]}}
{"sample_id": 3926, "db_id": "hospital_1", "final": {"question": "How many rooms does each block floor have?", "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "source_tables": ["block", "room"]}}
{"sample_id": 3960, "db_id": "hospital_1", "final": {"question": "Tell me the highest, lowest, and average cost of procedures.", "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "source_tables": ["procedures"]}}
{"sample_id": 3985, "db_id": "hospital_1", "final": {"question": "Find the number of patients who are not using the medication of Procrastin-X.", "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "source_tables": ["prescribes", "medication", "patient"]}}
{"sample_id": 3978, "db_id": "hospital_1", "final": {"question": "What procedures cost less than 5000 and have John Wen as a trained physician?", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3989, "db_id": "hospital_1", "final": {"question": "Find the names of nurses who are on call.", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "source_tables": ["nurse", "on_call"]}}
{"sample_id": 3947, "db_id": "hospital_1", "final": {"question": "Find the names of nurses who are nursing an undergoing treatment.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "source_tables": ["undergoes", "nurse"]}}
{"sample_id": 3965, "db_id": "hospital_1", "final": {"question": "Find the physicians who are trained in a procedure that costs more than 5000.", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "source_tables": ["trained_in", "physician", "procedures"]}}
{"sample_id": 3975, "db_id": "hospital_1", "final": {"question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3945, "db_id": "hospital_1", "final": {"question": "List the names of all distinct nurses ordered by alphabetical order?", "sql": "SELECT DISTINCT name FROM nurse ORDER BY name", "source_tables": ["nurse"]}}
{"sample_id": 3923, "db_id": "hospital_1", "final": {"question": "Find the name of physicians who are in charge of more than one patient.", "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1", "source_tables": ["physician", "patient"]}}
{"sample_id": 3984, "db_id": "hospital_1", "final": {"question": "What are the names of patients who are not taking the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "source_tables": ["prescribes", "medication", "patient"]}}
{"sample_id": 3897, "db_id": "hospital_1", "final": {"question": "What are names of patients who made an appointment?", "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn", "source_tables": ["appointment", "patient"]}}
{"sample_id": 3896, "db_id": "hospital_1", "final": {"question": "Find the name and position of the head of the department with the least employees.", "sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "source_tables": ["physician", "department"]}}
{"sample_id": 3927, "db_id": "hospital_1", "final": {"question": "Find the number of rooms for different block code?", "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "source_tables": ["block", "room"]}}
{"sample_id": 3924, "db_id": "hospital_1", "final": {"question": "Which physicians are in charge of more than one patient? Give me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1", "source_tables": ["physician", "patient"]}}
{"sample_id": 3977, "db_id": "hospital_1", "final": {"question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3949, "db_id": "hospital_1", "final": {"question": "List the names of all distinct medications, ordered in an alphabetical order.", "sql": "SELECT DISTINCT name FROM medication ORDER BY name", "source_tables": ["medication"]}}
{"sample_id": 4018, "db_id": "ship_mission", "final": {"question": "What are the names of the ships that are not involved in any missions?", "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)", "source_tables": ["mission", "ship"]}}
{"sample_id": 3991, "db_id": "ship_mission", "final": {"question": "How many ships are there?", "sql": "SELECT count(*) FROM ship", "source_tables": ["ship"]}}
{"sample_id": 4001, "db_id": "ship_mission", "final": {"question": "What is the name of the ship with the largest tonnage?", "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1", "source_tables": ["ship"]}}
{"sample_id": 3999, "db_id": "ship_mission", "final": {"question": "Show the name of ships whose nationality is either United States or United Kingdom.", "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"", "source_tables": ["ship"]}}
{"sample_id": 4014, "db_id": "ship_mission", "final": {"question": "What are the names of ships that were involved in a mission launched after 1928?", "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928", "source_tables": ["mission", "ship"]}}
{"sample_id": 4010, "db_id": "ship_mission", "final": {"question": "For each type, what is the average tonnage?", "sql": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE", "source_tables": ["ship"]}}
{"sample_id": 4038, "db_id": "student_1", "final": {"question": "Show me the classrooms grade 5 is using.", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  5", "source_tables": ["list"]}}
{"sample_id": 4045, "db_id": "student_1", "final": {"question": "Find the last names of teachers teaching in classroom 109.", "sql": "SELECT lastname FROM teachers WHERE classroom  =  109", "source_tables": ["teachers"]}}
{"sample_id": 4057, "db_id": "student_1", "final": {"question": "Find the last names of all the teachers that teach GELL TAMI.", "sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4075, "db_id": "student_1", "final": {"question": "For each classroom, report the classroom number and the number of grades using it.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4032, "db_id": "student_1", "final": {"question": "Find the grade taught in classroom 103.", "sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  103", "source_tables": ["list"]}}
{"sample_id": 4046, "db_id": "student_1", "final": {"question": "Which teachers teach in classroom 109? Give me their last names.", "sql": "SELECT lastname FROM teachers WHERE classroom  =  109", "source_tables": ["teachers"]}}
{"sample_id": 4055, "db_id": "student_1", "final": {"question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4024, "db_id": "student_1", "final": {"question": "What are the last names of students in room 111?", "sql": "SELECT lastname FROM list WHERE classroom  =  111", "source_tables": ["list"]}}
{"sample_id": 4036, "db_id": "student_1", "final": {"question": "Find the classrooms in which grade 4 is studying.", "sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  4", "source_tables": ["list"]}}
{"sample_id": 4061, "db_id": "student_1", "final": {"question": "How many students does KAWA GORDON teaches?", "sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"", "source_tables": ["list", "teachers"]}}
{"sample_id": 4087, "db_id": "student_1", "final": {"question": "Find the number of students in one classroom.", "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4082, "db_id": "student_1", "final": {"question": "For each grade 0 classroom, return the classroom number and the count of students.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4048, "db_id": "student_1", "final": {"question": "What are the first name and last name of all the teachers?", "sql": "SELECT DISTINCT firstname ,  lastname FROM teachers", "source_tables": ["teachers"]}}
{"sample_id": 4103, "db_id": "company_employee", "final": {"question": "List the names of people that are not employed by any company", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)", "source_tables": ["people", "employment"]}}
{"sample_id": 4099, "db_id": "company_employee", "final": {"question": "Show the names of companies and of employees.", "sql": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID", "source_tables": ["company", "employment", "people"]}}
{"sample_id": 4098, "db_id": "company_employee", "final": {"question": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.", "sql": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"", "source_tables": ["company"]}}
{"sample_id": 4144, "db_id": "film_rank", "final": {"question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "source_tables": ["film"]}}
{"sample_id": 4134, "db_id": "film_rank", "final": {"question": "How films are produced by each studio?", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "source_tables": ["film"]}}
{"sample_id": 4125, "db_id": "film_rank", "final": {"question": "Show the distinct director of films with market estimation in the year of 1995.", "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4137, "db_id": "film_rank", "final": {"question": "List the names of studios that have at least two films.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "source_tables": ["film"]}}
{"sample_id": 4124, "db_id": "film_rank", "final": {"question": "What are the titles of films and corresponding types of market estimations?", "sql": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4151, "db_id": "film_rank", "final": {"question": "What are the titles and directors of the films were never presented in China?", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "source_tables": ["market", "film_market_estimation", "film"]}}
{"sample_id": 4111, "db_id": "film_rank", "final": {"question": "What are the low and high estimates of film markets?", "sql": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "source_tables": ["film_market_estimation"]}}
{"sample_id": 4152, "db_id": "film_rank", "final": {"question": "Return the titles and directors of films that were never in the market of China.", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "source_tables": ["market", "film_market_estimation", "film"]}}
{"sample_id": 4129, "db_id": "film_rank", "final": {"question": "Please list the countries and years of film market estimations.", "sql": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "source_tables": ["market", "film_market_estimation"]}}
{"sample_id": 4155, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show all calendar dates and day Numbers.", "sql": "SELECT calendar_date ,  day_Number FROM Ref_calendar", "source_tables": ["ref_calendar"]}}
{"sample_id": 4153, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "How many calendar items do we have?", "sql": "SELECT count(*) FROM Ref_calendar", "source_tables": ["ref_calendar"]}}
{"sample_id": 4189, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "How many employees do we have?", "sql": "SELECT count(*) FROM Employees", "source_tables": ["employees"]}}
{"sample_id": 4187, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the description for role name \"Proof Reader\".", "sql": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"", "source_tables": ["roles"]}}
{"sample_id": 4222, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Find the code of the location with the largest number of documents.", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["document_locations"]}}
{"sample_id": 4210, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?", "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"", "source_tables": ["roles", "employees"]}}
{"sample_id": 4224, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the codes of the locations with at least three documents?", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3", "source_tables": ["document_locations"]}}
{"sample_id": 4179, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the location code for the country \"Canada\"?", "sql": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"", "source_tables": ["ref_locations"]}}
{"sample_id": 4209, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".", "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"", "source_tables": ["roles", "employees"]}}
{"sample_id": 4218, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Find the starting date and ending data in location for the document named \"Robin CV\".", "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"", "source_tables": ["document_locations", "all_documents"]}}
{"sample_id": 4180, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the location code of the country \"Canada\".", "sql": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"", "source_tables": ["ref_locations"]}}
{"sample_id": 4198, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the code of each role and the number of employees in each role?", "sql": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code", "source_tables": ["employees"]}}
{"sample_id": 4233, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of the employees who don't authorize destruction for any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4242, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.", "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4160, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are all the document type codes and document type names?", "sql": "SELECT document_type_code ,  document_type_name FROM Ref_document_types", "source_tables": ["ref_document_types"]}}
{"sample_id": 4167, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What is the date when the document \"Marry CV\" was stored?", "sql": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"", "source_tables": ["all_documents"]}}
{"sample_id": 4175, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "List all location codes and location names.", "sql": "SELECT location_code ,  location_name FROM Ref_locations", "source_tables": ["ref_locations"]}}
{"sample_id": 4156, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are all the calendar dates and day Numbers?", "sql": "SELECT calendar_date ,  day_Number FROM Ref_calendar", "source_tables": ["ref_calendar"]}}
{"sample_id": 4283, "db_id": "club_1", "final": {"question": "Find the name of all the clubs at \"AKW\".", "sql": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "source_tables": ["club"]}}
{"sample_id": 4298, "db_id": "club_1", "final": {"question": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4278, "db_id": "club_1", "final": {"question": "Where us the club named \"Tennis Club\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "source_tables": ["club"]}}
{"sample_id": 4293, "db_id": "club_1", "final": {"question": "How many members of \"Bootup Baltimore\" are older than 18?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4243, "db_id": "club_1", "final": {"question": "How many clubs are there?", "sql": "SELECT count(*) FROM club", "source_tables": ["club"]}}
{"sample_id": 4280, "db_id": "club_1", "final": {"question": "Where is the club \"Pen and Paper Gaming\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "source_tables": ["club"]}}
{"sample_id": 4279, "db_id": "club_1", "final": {"question": "Find the location of the club \"Pen and Paper Gaming\".", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "source_tables": ["club"]}}
{"sample_id": 4263, "db_id": "club_1", "final": {"question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4267, "db_id": "club_1", "final": {"question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4289, "db_id": "club_1", "final": {"question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4294, "db_id": "club_1", "final": {"question": "Count the number of members in club \"Bootup Baltimore\" whose age is above 18.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4290, "db_id": "club_1", "final": {"question": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4246, "db_id": "club_1", "final": {"question": "Give me the name of each club.", "sql": "SELECT clubname FROM club", "source_tables": ["club"]}}
{"sample_id": 4303, "db_id": "club_1", "final": {"question": "List the clubs having \"Davis Steven\" as a member.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "source_tables": ["member_of_club", "club", "student"]}}
{"sample_id": 4326, "db_id": "tracking_grants_for_research", "final": {"question": "What is the type of the organization with the most research staff?", "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1", "source_tables": ["research_staff", "organisations"]}}
{"sample_id": 4319, "db_id": "tracking_grants_for_research", "final": {"question": "List from which date and to which date these staff work: project staff of the project which hires the most staffs", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'", "source_tables": ["project_staff"]}}
{"sample_id": 4320, "db_id": "tracking_grants_for_research", "final": {"question": "From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'", "source_tables": ["project_staff"]}}
{"sample_id": 4349, "db_id": "tracking_grants_for_research", "final": {"question": "Which project made the most number of outcomes? List the project details and the project id.", "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4363, "db_id": "tracking_grants_for_research", "final": {"question": "Find the organisation type description of the organisation detailed as 'quo'.", "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'", "source_tables": ["organisations", "organisation_types"]}}
{"sample_id": 4334, "db_id": "tracking_grants_for_research", "final": {"question": "What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?", "sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2", "source_tables": ["projects", "tasks", "project_outcomes"]}}
{"sample_id": 4314, "db_id": "tracking_grants_for_research", "final": {"question": "What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?", "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'", "source_tables": ["grants", "documents"]}}
{"sample_id": 4335, "db_id": "tracking_grants_for_research", "final": {"question": "When do all the researcher role staff start to work, and when do they stop working?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'", "source_tables": ["project_staff"]}}
{"sample_id": 4356, "db_id": "tracking_grants_for_research", "final": {"question": "For each staff id, what is the description of the role that is involved with the most number of projects?", "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["staff_roles", "project_staff", "project_outcomes"]}}
{"sample_id": 4390, "db_id": "tracking_grants_for_research", "final": {"question": "What is the most common role for the staff?", "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["project_staff"]}}
{"sample_id": 4343, "db_id": "tracking_grants_for_research", "final": {"question": "How many staff does each project has? List the project id and the number in an ascending order.", "sql": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC", "source_tables": ["projects", "project_staff"]}}
{"sample_id": 4332, "db_id": "tracking_grants_for_research", "final": {"question": "What are the details for all projects that did not hire any staff in a research role?", "sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )", "source_tables": ["projects", "project_staff"]}}
{"sample_id": 4337, "db_id": "tracking_grants_for_research", "final": {"question": "How many kinds of roles are there for the staff?", "sql": "SELECT count(DISTINCT role_code) FROM Project_Staff", "source_tables": ["project_staff"]}}
{"sample_id": 4322, "db_id": "tracking_grants_for_research", "final": {"question": "What are the ids and details for all organizations that have grants of more than 6000 dollars?", "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000", "source_tables": ["organisations", "grants"]}}
{"sample_id": 4355, "db_id": "tracking_grants_for_research", "final": {"question": "Show the role description and the id of the project staff involved in most number of project outcomes?", "sql": "SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["staff_roles", "project_staff", "project_outcomes"]}}
{"sample_id": 4417, "db_id": "network_2", "final": {"question": "What is average age of male for different job title?", "sql": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job", "source_tables": ["person"]}}
{"sample_id": 4429, "db_id": "network_2", "final": {"question": "Find the names of all person sorted in the descending order using age.", "sql": "SELECT name FROM Person ORDER BY age DESC", "source_tables": ["person"]}}
{"sample_id": 4433, "db_id": "network_2", "final": {"question": "Find the name and age of the person who is a friend of both Dan and Alice.", "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4416, "db_id": "network_2", "final": {"question": "How old is the average person for each job?", "sql": "SELECT avg(age) ,  job FROM Person GROUP BY job", "source_tables": ["person"]}}
{"sample_id": 4412, "db_id": "network_2", "final": {"question": "HOw many engineers are older than 30?", "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'", "source_tables": ["person"]}}
{"sample_id": 4428, "db_id": "network_2", "final": {"question": "What are the names and job titles of every person ordered alphabetically by name?", "sql": "SELECT name ,  job FROM Person ORDER BY name", "source_tables": ["person"]}}
{"sample_id": 4455, "db_id": "network_2", "final": {"question": "Who has a friend that is from new york city?", "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4414, "db_id": "network_2", "final": {"question": "How old is each gender, on average?", "sql": "SELECT avg(age) ,  gender FROM Person GROUP BY gender", "source_tables": ["person"]}}
{"sample_id": 4392, "db_id": "network_2", "final": {"question": "How many friends does Dan have?", "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4406, "db_id": "network_2", "final": {"question": "What is the name of the youngest male?", "sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )", "source_tables": ["person"]}}
{"sample_id": 4425, "db_id": "network_2", "final": {"question": "Find the number of people whose age is greater than all engineers.", "sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')", "source_tables": ["person"]}}
{"sample_id": 4415, "db_id": "network_2", "final": {"question": "What is average age for different job title?", "sql": "SELECT avg(age) ,  job FROM Person GROUP BY job", "source_tables": ["person"]}}
{"sample_id": 4424, "db_id": "network_2", "final": {"question": "What is the name of all the people who are older than at least one engineer? Order them by age.", "sql": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age", "source_tables": ["person"]}}
{"sample_id": 4400, "db_id": "network_2", "final": {"question": "How many different jobs are listed?", "sql": "SELECT count(DISTINCT job) FROM Person", "source_tables": ["person"]}}
{"sample_id": 4393, "db_id": "network_2", "final": {"question": "How many females does this network has?", "sql": "SELECT count(*) FROM Person WHERE gender  =  'female'", "source_tables": ["person"]}}
{"sample_id": 4458, "db_id": "network_2", "final": {"question": "What are the different names of friends who are younger than the average age for a friend?", "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4439, "db_id": "network_2", "final": {"question": "Find the name of the person who has friends with age above 40 but not under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4487, "db_id": "decoration_competition", "final": {"question": "Show the distinct leader names of colleges associated with members from country \"Canada\".", "sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"", "source_tables": ["college", "member"]}}
{"sample_id": 4482, "db_id": "decoration_competition", "final": {"question": "Show the most common country across members.", "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["member"]}}
{"sample_id": 4486, "db_id": "decoration_competition", "final": {"question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.", "sql": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC", "source_tables": ["college", "member"]}}
{"sample_id": 4514, "db_id": "document_management", "final": {"question": "List all the username and passwords of users with the most popular role.", "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["users"]}}
{"sample_id": 4512, "db_id": "document_management", "final": {"question": "Find all the name of documents without any sections.", "sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)", "source_tables": ["document_sections", "documents"]}}
{"sample_id": 4525, "db_id": "document_management", "final": {"question": "Count the number of users that are logged in.", "sql": "SELECT count(*) FROM users WHERE user_login  =  1", "source_tables": ["users"]}}
{"sample_id": 4498, "db_id": "document_management", "final": {"question": "Find the total access count of all documents in the most popular document type.", "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4499, "db_id": "document_management", "final": {"question": "What is the total access count of documents that are of the most common document type?", "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4504, "db_id": "document_management", "final": {"question": "What is the type of the document named \"David CV\"?", "sql": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"", "source_tables": ["documents"]}}
{"sample_id": 4511, "db_id": "document_management", "final": {"question": "Give the section titles of the document with the name \"David CV\".", "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"", "source_tables": ["document_sections", "documents"]}}
{"sample_id": 4508, "db_id": "document_management", "final": {"question": "What document types do have more than 10000 total access number.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000", "source_tables": ["documents"]}}
{"sample_id": 4557, "db_id": "company_office", "final": {"question": "Which buildings have more than one company offices? Give me the building names.", "sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1", "source_tables": ["office_locations", "companies", "buildings"]}}
{"sample_id": 4572, "db_id": "company_office", "final": {"question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",", "sql": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"", "source_tables": ["companies"]}}
{"sample_id": 4569, "db_id": "company_office", "final": {"question": "Which buildings do not have any company office? Give me the building names.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "source_tables": ["office_locations", "buildings"]}}
{"sample_id": 4542, "db_id": "company_office", "final": {"question": "What are the name and assets of each company, sorted in ascending order of company name?", "sql": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC", "source_tables": ["companies"]}}
{"sample_id": 4560, "db_id": "company_office", "final": {"question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.", "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC", "source_tables": ["buildings"]}}
{"sample_id": 4546, "db_id": "company_office", "final": {"question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".", "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"", "source_tables": ["companies"]}}
{"sample_id": 4541, "db_id": "company_office", "final": {"question": "Find the names of the companies whose headquarters are not located in \"USA\".", "sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'", "source_tables": ["companies"]}}
{"sample_id": 4564, "db_id": "company_office", "final": {"question": "Please show the industries of companies in descending order of the number of companies.", "sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC", "source_tables": ["companies"]}}
{"sample_id": 4579, "db_id": "solvency_ii", "final": {"question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".", "sql": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\"", "source_tables": ["products"]}}
{"sample_id": 4583, "db_id": "solvency_ii", "final": {"question": "Show the most common type code across products.", "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 4581, "db_id": "solvency_ii", "final": {"question": "What is the name of the product with the highest price?", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 4592, "db_id": "entertainment_awards", "final": {"question": "List the name of artworks in ascending alphabetical order.", "sql": "SELECT Name FROM artwork ORDER BY Name ASC", "source_tables": ["artwork"]}}
{"sample_id": 4609, "db_id": "entertainment_awards", "final": {"question": "List the name of artworks that are not nominated.", "sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)", "source_tables": ["artwork", "nomination"]}}
{"sample_id": 4602, "db_id": "entertainment_awards", "final": {"question": "Show the names of artworks in ascending order of the year they are nominated in.", "sql": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year", "source_tables": ["artwork", "festival_detail", "nomination"]}}
{"sample_id": 4600, "db_id": "entertainment_awards", "final": {"question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.", "sql": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID", "source_tables": ["artwork", "festival_detail", "nomination"]}}
{"sample_id": 4616, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show each premise type and the number of premises in that type.", "sql": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type", "source_tables": ["premises"]}}
{"sample_id": 4627, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the names of customers having an order with shipping method FedEx and order status Paid.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 4617, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show all distinct product categories along with the number of mailshots in each category.", "sql": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category", "source_tables": ["mailshot_campaigns"]}}
{"sample_id": 4701, "db_id": "college_3", "final": {"question": "What are the first names of all students that are not enrolled in courses?", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "source_tables": ["student", "enrolled_in"]}}
{"sample_id": 4673, "db_id": "college_3", "final": {"question": "What are the full names of the 3 instructors who teach the most courses?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "source_tables": ["course", "faculty"]}}
{"sample_id": 4659, "db_id": "college_3", "final": {"question": "What are the last names of female students, ordered by age descending?", "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC", "source_tables": ["student"]}}
{"sample_id": 4640, "db_id": "college_3", "final": {"question": "Find the number of students that have at least one grade \"B\".", "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "source_tables": ["enrolled_in"]}}
{"sample_id": 4700, "db_id": "college_3", "final": {"question": "Find the first name of students not enrolled in any course.", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "source_tables": ["student", "enrolled_in"]}}
{"sample_id": 4664, "db_id": "college_3", "final": {"question": "Find the name of the department that has the biggest number of students minored in?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "source_tables": ["minor_in", "department"]}}
{"sample_id": 4674, "db_id": "college_3", "final": {"question": "Which building does the instructor who teaches the most number of courses live in?", "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "source_tables": ["course", "faculty"]}}
{"sample_id": 4656, "db_id": "college_3", "final": {"question": "Find the first name of students in the descending order of age.", "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "source_tables": ["student"]}}
{"sample_id": 4697, "db_id": "college_3", "final": {"question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "source_tables": ["course"]}}
{"sample_id": 4693, "db_id": "college_3", "final": {"question": "What is the average gradepoint for students with the last name Smith?", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"", "source_tables": ["student", "gradeconversion", "enrolled_in"]}}
{"sample_id": 4657, "db_id": "college_3", "final": {"question": "What are the first names of students, ordered by age from greatest to least?", "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "source_tables": ["student"]}}
{"sample_id": 4630, "db_id": "college_3", "final": {"question": "How many courses have more than 2 credits?", "sql": "SELECT count(*) FROM COURSE WHERE Credits  >  2", "source_tables": ["course"]}}
{"sample_id": 4643, "db_id": "college_3", "final": {"question": "What are the maximum and minumum grade points?", "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "source_tables": ["gradeconversion"]}}
{"sample_id": 4698, "db_id": "college_3", "final": {"question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "source_tables": ["department"]}}
{"sample_id": 4763, "db_id": "department_store", "final": {"question": "Give the ids and names of products with price lower than 600 or higher than 900.", "sql": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900", "source_tables": ["products"]}}
{"sample_id": 4775, "db_id": "department_store", "final": {"question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4716, "db_id": "department_store", "final": {"question": "What are the name, phone number and email address of the customer who made the largest number of orders?", "sql": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 4704, "db_id": "department_store", "final": {"question": "What are the product id and product type of the cheapest product?", "sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 4726, "db_id": "department_store", "final": {"question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 4744, "db_id": "department_store", "final": {"question": "Return the names and ids of all products whose price is between 600 and 700.", "sql": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700", "source_tables": ["products"]}}
{"sample_id": 4772, "db_id": "department_store", "final": {"question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"", "source_tables": ["product_suppliers", "suppliers", "products"]}}
{"sample_id": 4777, "db_id": "department_store", "final": {"question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date", "source_tables": ["customer_orders"]}}
{"sample_id": 4783, "db_id": "department_store", "final": {"question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4754, "db_id": "department_store", "final": {"question": "List the name of staff who has been assigned multiple jobs.", "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1", "source_tables": ["staff", "staff_department_assignments"]}}
{"sample_id": 4774, "db_id": "department_store", "final": {"question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4768, "db_id": "department_store", "final": {"question": "What is the largest and smallest customer codes?", "sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers", "source_tables": ["customers"]}}
{"sample_id": 4759, "db_id": "department_store", "final": {"question": "Return the phone numbers for all customers and suppliers.", "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers", "source_tables": ["customers", "suppliers"]}}
{"sample_id": 4708, "db_id": "department_store", "final": {"question": "Return the address of customer 10.", "sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10", "source_tables": ["addresses", "customer_addresses"]}}
{"sample_id": 4780, "db_id": "department_store", "final": {"question": "Find the names of customers who have bought by at least three distinct products.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 4773, "db_id": "department_store", "final": {"question": "What are the distinct names and phone numbers for suppliers who have red jeans?", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"", "source_tables": ["product_suppliers", "suppliers", "products"]}}
{"sample_id": 4770, "db_id": "department_store", "final": {"question": "List the names of all the distinct customers who bought a keyboard.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"", "source_tables": ["customers", "customer_orders", "order_items", "products"]}}
{"sample_id": 4804, "db_id": "aircraft", "final": {"question": "List all pilot names in ascending alphabetical order.", "sql": "SELECT Name FROM pilot ORDER BY Name ASC", "source_tables": ["pilot"]}}
{"sample_id": 4813, "db_id": "aircraft", "final": {"question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?", "sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"", "source_tables": ["airport", "aircraft", "airport_aircraft"]}}
{"sample_id": 4818, "db_id": "aircraft", "final": {"question": "List the names of aircrafts and the number of times it won matches.", "sql": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4825, "db_id": "aircraft", "final": {"question": "What are the names of all aicrafts that have never won any match?", "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4823, "db_id": "aircraft", "final": {"question": "What are the names of all aircrafts that have won a match at least twice?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4832, "db_id": "aircraft", "final": {"question": "what is the name and age of the youngest winning pilot?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1", "source_tables": ["pilot", "match"]}}
{"sample_id": 4817, "db_id": "aircraft", "final": {"question": "What is the name of the aircraft that has won an award the most?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["aircraft", "match"]}}
{"sample_id": 4798, "db_id": "aircraft", "final": {"question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".", "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"", "source_tables": ["airport"]}}
{"sample_id": 4791, "db_id": "aircraft", "final": {"question": "What is the number of aircraft?", "sql": "SELECT count(*) FROM aircraft", "source_tables": ["aircraft"]}}
{"sample_id": 4848, "db_id": "local_govt_and_lot", "final": {"question": "When is the last day any resident moved in?", "sql": "SELECT max(date_moved_in) FROM Residents", "source_tables": ["residents"]}}
{"sample_id": 4847, "db_id": "local_govt_and_lot", "final": {"question": "Which organizations are not a parent organization of others? List the organization id.", "sql": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations", "source_tables": ["organizations"]}}
{"sample_id": 4852, "db_id": "local_govt_and_lot", "final": {"question": "What are the distinct move in dates of the residents?", "sql": "SELECT DISTINCT date_moved_in FROM residents", "source_tables": ["residents"]}}
{"sample_id": 4886, "db_id": "school_player", "final": {"question": "Which schools do not have any player? Give me the school locations.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "source_tables": ["player", "school"]}}
{"sample_id": 4883, "db_id": "school_player", "final": {"question": "List the school color of the school that has the largest enrollment.", "sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1", "source_tables": ["school"]}}
{"sample_id": 4875, "db_id": "school_player", "final": {"question": "Show the denomination of the school that has the most players.", "sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["player", "school"]}}
{"sample_id": 4885, "db_id": "school_player", "final": {"question": "List the locations of schools that do not have any player.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "source_tables": ["player", "school"]}}
{"sample_id": 4871, "db_id": "school_player", "final": {"question": "For each player, show the team and the location of school they belong to.", "sql": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID", "source_tables": ["player", "school"]}}
{"sample_id": 4891, "db_id": "school_player", "final": {"question": "Show the denomination shared by more than one school.", "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1", "source_tables": ["school"]}}
{"sample_id": 4870, "db_id": "school_player", "final": {"question": "What are the teams that have the 5 oldest players?", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5", "source_tables": ["player"]}}
{"sample_id": 4854, "db_id": "school_player", "final": {"question": "Count the number of schools.", "sql": "SELECT count(*) FROM school", "source_tables": ["school"]}}
{"sample_id": 4931, "db_id": "store_product", "final": {"question": "Find the name of the products that are not using the most frequently-used max page size.", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["product"]}}
{"sample_id": 4908, "db_id": "store_product", "final": {"question": "For each type of store, how many of them are there?", "sql": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE", "source_tables": ["store"]}}
{"sample_id": 4910, "db_id": "store_product", "final": {"question": "What are the names of all the stores located in Khanewal District?", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4906, "db_id": "store_product", "final": {"question": "What is the total number of residents for the districts with the 3 largest areas?", "sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3", "source_tables": ["district"]}}
{"sample_id": 4916, "db_id": "store_product", "final": {"question": "How many stores are headquarted in each city?", "sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city", "source_tables": ["store", "district", "store_district"]}}
{"sample_id": 4934, "db_id": "store_product", "final": {"question": "What is the total population for all the districts that have an area larger tahn the average city area?", "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)", "source_tables": ["district"]}}
{"sample_id": 4897, "db_id": "store_product", "final": {"question": "Find the name and population of district with population between 200000 and 2000000", "sql": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000", "source_tables": ["district"]}}
{"sample_id": 4907, "db_id": "store_product", "final": {"question": "Find all types of store and number of them.", "sql": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE", "source_tables": ["store"]}}
{"sample_id": 5041, "db_id": "soccer_2", "final": {"question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 4999, "db_id": "soccer_2", "final": {"question": "Find the names of the students who are in the position of striker and got a yes tryout decision.", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "source_tables": ["player", "tryout"]}}
{"sample_id": 4964, "db_id": "soccer_2", "final": {"question": "What are the names of players who train between 500 and 1500 hours?", "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "source_tables": ["player"]}}
{"sample_id": 5027, "db_id": "soccer_2", "final": {"question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "source_tables": ["college", "tryout"]}}
{"sample_id": 4947, "db_id": "soccer_2", "final": {"question": "What is the average training hours of all players?", "sql": "SELECT avg(HS) FROM Player", "source_tables": ["player"]}}
{"sample_id": 5030, "db_id": "soccer_2", "final": {"question": "What is the count of states with college students playing in the mid position but not as goalies?", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "source_tables": ["college", "tryout"]}}
{"sample_id": 5036, "db_id": "soccer_2", "final": {"question": "What are the names of all colleges with a larger enrollment than the largest college in Florida?", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "source_tables": ["college"]}}
{"sample_id": 4956, "db_id": "soccer_2", "final": {"question": "How many students received a yes from tryouts?", "sql": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "source_tables": ["tryout"]}}
{"sample_id": 5018, "db_id": "soccer_2", "final": {"question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?", "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "source_tables": ["college"]}}
{"sample_id": 5013, "db_id": "soccer_2", "final": {"question": "Find the name of the tryout players who are from the college with largest size.", "sql": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "source_tables": ["college", "player", "tryout"]}}
{"sample_id": 5023, "db_id": "soccer_2", "final": {"question": "How many schools have some students playing in goalie and mid positions.", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "source_tables": ["tryout"]}}
{"sample_id": 5010, "db_id": "soccer_2", "final": {"question": "Which colleges does each player with a name that starts with the letter D  who tried out go to?", "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", "source_tables": ["player", "tryout"]}}
{"sample_id": 5002, "db_id": "soccer_2", "final": {"question": "In which state is the college that Charles attends?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "source_tables": ["college", "player", "tryout"]}}
{"sample_id": 4979, "db_id": "soccer_2", "final": {"question": "Find the number of students who participate in the tryout for each college ordered by descending count.", "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "source_tables": ["tryout"]}}
{"sample_id": 4955, "db_id": "soccer_2", "final": {"question": "How many students got accepted after the tryout?", "sql": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "source_tables": ["tryout"]}}
{"sample_id": 4965, "db_id": "soccer_2", "final": {"question": "Find the players whose names contain letter 'a'.", "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "source_tables": ["player"]}}
{"sample_id": 4997, "db_id": "soccer_2", "final": {"question": "Find the states of the colleges that have students in the tryout who played in striker position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "source_tables": ["college", "tryout"]}}
{"sample_id": 5004, "db_id": "soccer_2", "final": {"question": "What is the average and maximum number of hours students who made the team practiced?", "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "source_tables": ["player", "tryout"]}}
{"sample_id": 4961, "db_id": "soccer_2", "final": {"question": "What is average enrollment of colleges in the state FL?", "sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "source_tables": ["college"]}}
{"sample_id": 5019, "db_id": "soccer_2", "final": {"question": "Find the names of schools that have some students playing in goalie and mid positions.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "source_tables": ["tryout"]}}
{"sample_id": 4946, "db_id": "soccer_2", "final": {"question": "What is the number of colleges with a student population greater than 15000?", "sql": "SELECT count(*) FROM College WHERE enr  >  15000", "source_tables": ["college"]}}
{"sample_id": 5065, "db_id": "device", "final": {"question": "Show the name of the shop that has the most kind of devices in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["stock", "shop"]}}
{"sample_id": 5069, "db_id": "device", "final": {"question": "Please show different software platforms and the corresponding number of devices using each.", "sql": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform", "source_tables": ["device"]}}
{"sample_id": 5075, "db_id": "device", "final": {"question": "List the names of shops that have no devices in stock.", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "source_tables": ["stock", "shop"]}}
{"sample_id": 5059, "db_id": "device", "final": {"question": "List the name of the shop with the latest open year.", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1", "source_tables": ["shop"]}}
{"sample_id": 5079, "db_id": "device", "final": {"question": "List the carriers of devices that have no devices in stock.", "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)", "source_tables": ["stock", "device"]}}
{"sample_id": 5074, "db_id": "device", "final": {"question": "What is the software platform that is most common amongst all devices?", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["device"]}}
{"sample_id": 5071, "db_id": "device", "final": {"question": "Please show the software platforms of devices in descending order of the count.", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC", "source_tables": ["device"]}}
{"sample_id": 5077, "db_id": "device", "final": {"question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.", "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008", "source_tables": ["shop"]}}
{"sample_id": 5128, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the names of the workshop groups where services with product name \"film\" are performed.", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"", "source_tables": ["services", "drama_workshop_groups"]}}
{"sample_id": 5155, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the names of the workshop groups that have bookings with status code \"stop\"?", "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"", "source_tables": ["drama_workshop_groups", "bookings"]}}
{"sample_id": 5137, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the actual delivery dates of orders with quantity 1?", "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1", "source_tables": ["customer_orders", "order_items"]}}
{"sample_id": 5105, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "List all product names in ascending order of price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "source_tables": ["products"]}}
{"sample_id": 5126, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID", "source_tables": ["services", "drama_workshop_groups"]}}
{"sample_id": 5152, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which cities have at least one customer but no performer?", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "source_tables": ["customers", "performers", "addresses"]}}
{"sample_id": 5090, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Count the number of customers recorded.", "sql": "SELECT count(*) FROM CUSTOMERS", "source_tables": ["customers"]}}
{"sample_id": 5122, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "List the description, code and the number of services for each service type.", "sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "source_tables": ["services", "ref_service_types"]}}
{"sample_id": 5139, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the order dates of orders with price higher than 1000?", "sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000", "source_tables": ["customer_orders", "order_items", "products"]}}
{"sample_id": 5144, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Return the the names of the drama workshop groups that are located in Feliciaberg city.", "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"", "source_tables": ["drama_workshop_groups", "addresses"]}}
{"sample_id": 5085, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "List the order dates of all the bookings.", "sql": "SELECT Order_Date FROM BOOKINGS", "source_tables": ["bookings"]}}
{"sample_id": 5150, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which marketing region has the most drama workshop groups? Give me the region code.", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5119, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the descriptions of the service types with product price above 100?", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100", "source_tables": ["services", "ref_service_types"]}}
{"sample_id": 5097, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the distinct payment method codes in all the invoices?", "sql": "SELECT DISTINCT payment_method_code FROM INVOICES", "source_tables": ["invoices"]}}
{"sample_id": 5134, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Compute the total order quantities of the product \"photo\".", "sql": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"", "source_tables": ["order_items", "products"]}}
{"sample_id": 5114, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the city the store named \"FJA Filming\" is in.", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"", "source_tables": ["stores", "addresses"]}}
{"sample_id": 5201, "db_id": "music_2", "final": {"question": "How many songs have used the instrument \"drums\"?", "sql": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"", "source_tables": ["instruments"]}}
{"sample_id": 5213, "db_id": "music_2", "final": {"question": "Which vocal type is the most frequently appearring type?", "sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals"]}}
{"sample_id": 5259, "db_id": "music_2", "final": {"question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"", "source_tables": ["albums", "songs", "tracklists"]}}
{"sample_id": 5209, "db_id": "music_2", "final": {"question": "Find all the instruments ever used by the musician with last name \"Heilo\"?", "sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "source_tables": ["instruments", "band"]}}
{"sample_id": 5264, "db_id": "music_2", "final": {"question": "How many songs appear in studio albums?", "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"", "source_tables": ["albums", "songs", "tracklists"]}}
{"sample_id": 5226, "db_id": "music_2", "final": {"question": "What are the names of the songs without a lead vocal?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5223, "db_id": "music_2", "final": {"question": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"", "source_tables": ["vocals", "songs", "band"]}}
{"sample_id": 5232, "db_id": "music_2", "final": {"question": "What is the first and last name of artist who performed \"Le Pop\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5254, "db_id": "music_2", "final": {"question": "What is the vocal type of the band mate whose first name is \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vocals", "band"]}}
{"sample_id": 5219, "db_id": "music_2", "final": {"question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"", "source_tables": ["vocals", "songs"]}}
{"sample_id": 5180, "db_id": "music_2", "final": {"question": "What are the names of all songs produced by the artist with the first name \"Marianne\"?", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5262, "db_id": "music_2", "final": {"question": "What are the names of all the songs whose album is under the label of \"Universal Music Group\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"", "source_tables": ["albums", "songs", "tracklists"]}}
{"sample_id": 5263, "db_id": "music_2", "final": {"question": "Find the number of songs in all the studio albums.", "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"", "source_tables": ["albums", "songs", "tracklists"]}}
{"sample_id": 5235, "db_id": "music_2", "final": {"question": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?", "sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"", "source_tables": ["songs", "instruments", "performance", "band"]}}
{"sample_id": 5224, "db_id": "music_2", "final": {"question": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"", "source_tables": ["vocals", "songs", "band"]}}
{"sample_id": 5202, "db_id": "music_2", "final": {"question": "How many songs use drums as an instrument?", "sql": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"", "source_tables": ["instruments"]}}
{"sample_id": 5208, "db_id": "music_2", "final": {"question": "How many different instruments does the musician with the last name \"Heilo\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"", "source_tables": ["instruments", "band"]}}
{"sample_id": 5261, "db_id": "music_2", "final": {"question": "What are all the songs in albums under label \"Universal Music Group\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  \"Universal Music Group\"", "source_tables": ["albums", "songs", "tracklists"]}}
{"sample_id": 5255, "db_id": "music_2", "final": {"question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"", "source_tables": ["songs", "performance", "band"]}}
{"sample_id": 5237, "db_id": "music_2", "final": {"question": "How many instruments does the song \"Badlands\" use?", "sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"", "source_tables": ["songs", "instruments"]}}
{"sample_id": 5295, "db_id": "manufactory_1", "final": {"question": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.", "sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')", "source_tables": ["manufacturers"]}}
{"sample_id": 5308, "db_id": "manufactory_1", "final": {"question": "How many different products are produced in each headquarter city?", "sql": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5274, "db_id": "manufactory_1", "final": {"question": "Return the number of companies created by Andy.", "sql": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'", "source_tables": ["manufacturers"]}}
{"sample_id": 5339, "db_id": "manufactory_1", "final": {"question": "Select the name and price of the cheapest product.", "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 5273, "db_id": "manufactory_1", "final": {"question": "How many companies were created by Andy?", "sql": "SELECT count(*) FROM manufacturers WHERE founder  =  'Andy'", "source_tables": ["manufacturers"]}}
{"sample_id": 5279, "db_id": "manufactory_1", "final": {"question": "Find the number of manufactures that are based in Tokyo or Beijing.", "sql": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'", "source_tables": ["manufacturers"]}}
{"sample_id": 5316, "db_id": "manufactory_1", "final": {"question": "What are the names of all products?", "sql": "SELECT Name FROM Products", "source_tables": ["products"]}}
{"sample_id": 5283, "db_id": "manufactory_1", "final": {"question": "Find the name of companies whose revenue is between 100 and 150.", "sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150", "source_tables": ["manufacturers"]}}
{"sample_id": 5304, "db_id": "manufactory_1", "final": {"question": "What is the total revenue of each manufacturer?", "sql": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name", "source_tables": ["manufacturers"]}}
{"sample_id": 5332, "db_id": "manufactory_1", "final": {"question": "What is all the product data, as well as  each product's manufacturer?", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5319, "db_id": "manufactory_1", "final": {"question": "Select the name of the products with a price less than or equal to $200.", "sql": "SELECT name FROM products WHERE price  <=  200", "source_tables": ["products"]}}
{"sample_id": 5312, "db_id": "manufactory_1", "final": {"question": "What are the names of companies that do not make DVD drives?", "sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5327, "db_id": "manufactory_1", "final": {"question": "Compute the number of products with a price larger than or equal to $180.", "sql": "SELECT count(*) FROM products WHERE price >= 180", "source_tables": ["products"]}}
{"sample_id": 5331, "db_id": "manufactory_1", "final": {"question": "Select all the data from the products and each product's manufacturer.", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5285, "db_id": "manufactory_1", "final": {"question": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?", "sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'", "source_tables": ["manufacturers"]}}
{"sample_id": 5307, "db_id": "manufactory_1", "final": {"question": "Find the number of different products that are produced by companies at different headquarter cities.", "sql": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter", "source_tables": ["products", "manufacturers"]}}
{"sample_id": 5353, "db_id": "tracking_software_problems", "final": {"question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.", "sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1", "source_tables": ["staff", "problem_log"]}}
{"sample_id": 5387, "db_id": "tracking_software_problems", "final": {"question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"", "source_tables": ["problems", "product"]}}
{"sample_id": 5378, "db_id": "tracking_software_problems", "final": {"question": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"", "source_tables": ["staff", "problems"]}}
{"sample_id": 5364, "db_id": "tracking_software_problems", "final": {"question": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"", "source_tables": ["staff", "problems"]}}
{"sample_id": 5357, "db_id": "tracking_software_problems", "final": {"question": "How many problems are there for product voluptatem?", "sql": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"", "source_tables": ["problems", "product"]}}
{"sample_id": 5370, "db_id": "tracking_software_problems", "final": {"question": "For each product with some problems, list the count of problems and the product id.", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id", "source_tables": ["problems", "product"]}}
{"sample_id": 5366, "db_id": "tracking_software_problems", "final": {"question": "Find the ids of the problems reported after 1978-06-26.", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"", "source_tables": ["problems"]}}
{"sample_id": 5348, "db_id": "tracking_software_problems", "final": {"question": "Find the oldest log id and its corresponding problem id.", "sql": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1", "source_tables": ["problem_log"]}}
{"sample_id": 5381, "db_id": "tracking_software_problems", "final": {"question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )", "source_tables": ["staff", "problems"]}}
{"sample_id": 5407, "db_id": "shop_membership", "final": {"question": "How many different levels do members have?", "sql": "SELECT count(DISTINCT LEVEL) FROM member", "source_tables": ["member"]}}
{"sample_id": 5409, "db_id": "shop_membership", "final": {"question": "Show card number, name, and hometown for all members in a descending order of level.", "sql": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC", "source_tables": ["member"]}}
{"sample_id": 5408, "db_id": "shop_membership", "final": {"question": "What are the different membership levels?", "sql": "SELECT count(DISTINCT LEVEL) FROM member", "source_tables": ["member"]}}
{"sample_id": 5419, "db_id": "shop_membership", "final": {"question": "List the branch name and city without any registered members.", "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)", "source_tables": ["membership_register_branch", "branch"]}}
{"sample_id": 5431, "db_id": "shop_membership", "final": {"question": "What is the total number of purchases for members with level 6?", "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6", "source_tables": ["member", "purchase"]}}
{"sample_id": 5427, "db_id": "shop_membership", "final": {"question": "Show all cities without a branch having more than 100 memberships.", "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100", "source_tables": ["branch"]}}
{"sample_id": 5397, "db_id": "shop_membership", "final": {"question": "What are names for top three branches with most number of membership?", "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3", "source_tables": ["branch"]}}
{"sample_id": 5433, "db_id": "shop_membership", "final": {"question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.", "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'", "source_tables": ["membership_register_branch", "branch", "member"]}}
{"sample_id": 5473, "db_id": "voter_2", "final": {"question": "Find the distinct majors of students who have treasurer votes.", "sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5481, "db_id": "voter_2", "final": {"question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5502, "db_id": "voter_2", "final": {"question": "Find the major that is studied by the largest number of students.", "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5447, "db_id": "voter_2", "final": {"question": "Find the first names of students with age above 22.", "sql": "SELECT Fname FROM STUDENT WHERE Age  >  22", "source_tables": ["student"]}}
{"sample_id": 5444, "db_id": "voter_2", "final": {"question": "What is the oldest age among the students?", "sql": "SELECT max(Age) FROM STUDENT", "source_tables": ["student"]}}
{"sample_id": 5485, "db_id": "voter_2", "final": {"question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5504, "db_id": "voter_2", "final": {"question": "Find the major that is studied by the most female students.", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5446, "db_id": "voter_2", "final": {"question": "What are the last names of students studying major 50?", "sql": "SELECT LName FROM STUDENT WHERE Major  =  50", "source_tables": ["student"]}}
{"sample_id": 5486, "db_id": "voter_2", "final": {"question": "What is the average age of the female students with secretary votes in the spring election cycle?", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5492, "db_id": "voter_2", "final": {"question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5439, "db_id": "voter_2", "final": {"question": "Find the number of voting records in total.", "sql": "SELECT count(*) FROM VOTING_RECORD", "source_tables": ["voting_record"]}}
{"sample_id": 5500, "db_id": "voter_2", "final": {"question": "Count the number of voting records for each election cycle.", "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "source_tables": ["voting_record"]}}
{"sample_id": 5476, "db_id": "voter_2", "final": {"question": "What are the first and last names of all the female students who have president votes?", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"", "source_tables": ["student", "voting_record"]}}
{"sample_id": 5458, "db_id": "voter_2", "final": {"question": "Return all the distinct secretary votes made in the fall election cycle.", "sql": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"", "source_tables": ["voting_record"]}}
{"sample_id": 5526, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of products in the category 'Seeds'.", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"", "source_tables": ["products"]}}
{"sample_id": 5558, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of characteristics of the product named 'laurel'.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5563, "db_id": "products_gen_characteristics", "final": {"question": "How many products have the characteristic named \"hot\"?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5574, "db_id": "products_gen_characteristics", "final": {"question": "What is the description of the product category with the code 'Spices'?", "sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"", "source_tables": ["ref_product_categories"]}}
{"sample_id": 5528, "db_id": "products_gen_characteristics", "final": {"question": "How many products are in the 'Spices' category and have a typical price of over 1000?", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000", "source_tables": ["products"]}}
{"sample_id": 5575, "db_id": "products_gen_characteristics", "final": {"question": "What is the product category description and unit of measurement of category \"Herbs\"?", "sql": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "source_tables": ["ref_product_categories"]}}
{"sample_id": 5513, "db_id": "products_gen_characteristics", "final": {"question": "How many characteristics are there?", "sql": "SELECT count(*) FROM CHARACTERISTICS", "source_tables": ["characteristics"]}}
{"sample_id": 5555, "db_id": "products_gen_characteristics", "final": {"question": "List all characteristics of product named \"sesame\" with type code \"Grade\".", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5534, "db_id": "products_gen_characteristics", "final": {"question": "Give the name of the products that have a color description 'yellow'.", "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5542, "db_id": "products_gen_characteristics", "final": {"question": "What are the product ids and color descriptions for products with two or more characteristics?", "sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2", "source_tables": ["ref_colors", "product_characteristics", "products"]}}
{"sample_id": 5533, "db_id": "products_gen_characteristics", "final": {"question": "What is the name of the product with the color description 'yellow'?", "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5531, "db_id": "products_gen_characteristics", "final": {"question": "Which category does the product named \"flax\" belong to?", "sql": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"", "source_tables": ["products"]}}
{"sample_id": 5557, "db_id": "products_gen_characteristics", "final": {"question": "How many characteristics does the product named \"laurel\" have?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5566, "db_id": "products_gen_characteristics", "final": {"question": "What are the different product names for products that have the 'warm' characteristic:?", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5588, "db_id": "products_gen_characteristics", "final": {"question": "Return the name of the characteristic that is most common across all products.", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["characteristics", "product_characteristics", "products"]}}
{"sample_id": 5568, "db_id": "products_gen_characteristics", "final": {"question": "How many products have the color description 'red' and the characteristic name 'slow'?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"", "source_tables": ["ref_colors", "characteristics", "product_characteristics", "products"]}}
{"sample_id": 5585, "db_id": "products_gen_characteristics", "final": {"question": "What is the description of the color used by least products?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5612, "db_id": "swimming", "final": {"question": "Find the names of swimmers who has a result of \"win\".", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'", "source_tables": ["swimmer", "record"]}}
{"sample_id": 5600, "db_id": "swimming", "final": {"question": "Find the names of stadiums whose capacity is smaller than the average capacity.", "sql": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)", "source_tables": ["stadium"]}}
{"sample_id": 5622, "db_id": "swimming", "final": {"question": "Find the names of stadiums that the most swimmers have been to.", "sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["stadium", "record", "event"]}}
{"sample_id": 5597, "db_id": "swimming", "final": {"question": "What is the name of the event that happened in the most recent year?", "sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1", "source_tables": ["event"]}}
{"sample_id": 5610, "db_id": "swimming", "final": {"question": "List countries that have more than one swimmer.", "sql": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1", "source_tables": ["swimmer"]}}
{"sample_id": 5604, "db_id": "swimming", "final": {"question": "How many cities have a stadium that was opened before the year of 2006?", "sql": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006", "source_tables": ["stadium"]}}
{"sample_id": 5640, "db_id": "railway", "final": {"question": "Show the locations that have more than one railways.", "sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1", "source_tables": ["railway"]}}
{"sample_id": 5629, "db_id": "railway", "final": {"question": "What is the average age for all managers?", "sql": "SELECT avg(Age) FROM manager", "source_tables": ["manager"]}}
{"sample_id": 5633, "db_id": "railway", "final": {"question": "Show the names of trains and locations of railways they are in.", "sql": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID", "source_tables": ["train", "railway"]}}
{"sample_id": 5644, "db_id": "railway", "final": {"question": "Show the working years of managers in descending order of their level.", "sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC", "source_tables": ["manager"]}}
{"sample_id": 5653, "db_id": "customers_and_products_contacts", "final": {"question": "Show the name, phone, and payment method code for all customers in descending order of customer number.", "sql": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC", "source_tables": ["customers"]}}
{"sample_id": 5651, "db_id": "customers_and_products_contacts", "final": {"question": "Show the product type codes which have at least two products.", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2", "source_tables": ["products"]}}
{"sample_id": 5650, "db_id": "customers_and_products_contacts", "final": {"question": "Show the name of the customer who has the most orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 5695, "db_id": "dorm_1", "final": {"question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5753, "db_id": "dorm_1", "final": {"question": "Find the name of dorms that do not have amenity TV Lounge.", "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "source_tables": ["dorm", "dorm_amenity", "has_amenity"]}}
{"sample_id": 5711, "db_id": "dorm_1", "final": {"question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name", "source_tables": ["has_amenity", "dorm", "dorm_amenity"]}}
{"sample_id": 5709, "db_id": "dorm_1", "final": {"question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.", "sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age", "source_tables": ["student"]}}
{"sample_id": 5676, "db_id": "dorm_1", "final": {"question": "What is the total student capacity of all dorms?", "sql": "SELECT sum(student_capacity) FROM dorm", "source_tables": ["dorm"]}}
{"sample_id": 5714, "db_id": "dorm_1", "final": {"question": "How many dorms are there and what is the total capacity for each gender?", "sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender", "source_tables": ["dorm"]}}
{"sample_id": 5702, "db_id": "dorm_1", "final": {"question": "What are the names of the dorm with the largest capacity?", "sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "source_tables": ["dorm"]}}
{"sample_id": 5662, "db_id": "dorm_1", "final": {"question": "What are the names of the all-female dorms?", "sql": "SELECT dorm_name FROM dorm WHERE gender  =  'F'", "source_tables": ["dorm"]}}
{"sample_id": 5730, "db_id": "dorm_1", "final": {"question": "What is the average age for each dorm and what are the names of each dorm?", "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5724, "db_id": "dorm_1", "final": {"question": "How many students are from each city, and which cities have more than one cities?", "sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1", "source_tables": ["student"]}}
{"sample_id": 5667, "db_id": "dorm_1", "final": {"question": "Find the first name of students who is older than 20.", "sql": "SELECT fname FROM student WHERE age  >  20", "source_tables": ["student"]}}
{"sample_id": 5705, "db_id": "dorm_1", "final": {"question": "Find the code of city where most of students are living in.", "sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5681, "db_id": "dorm_1", "final": {"question": "Find the average and total capacity of dorms for the students with gender X.", "sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", "source_tables": ["dorm"]}}
{"sample_id": 5671, "db_id": "dorm_1", "final": {"question": "How many dorms are there?", "sql": "SELECT count(*) FROM dorm", "source_tables": ["dorm"]}}
{"sample_id": 5670, "db_id": "dorm_1", "final": {"question": "What is the first name of the students who are in age 20 to 25 and living in PHL city?", "sql": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25", "source_tables": ["student"]}}
{"sample_id": 5708, "db_id": "dorm_1", "final": {"question": "What is the first and last name of all students who are younger than average?", "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)", "source_tables": ["student"]}}
{"sample_id": 5742, "db_id": "dorm_1", "final": {"question": "How many female students live in Smith Hall?", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5701, "db_id": "dorm_1", "final": {"question": "Find the name of the dorm with the largest capacity.", "sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "source_tables": ["dorm"]}}
{"sample_id": 5718, "db_id": "dorm_1", "final": {"question": "How many students are there in each major?", "sql": "SELECT count(*) ,  major FROM student GROUP BY major", "source_tables": ["student"]}}
{"sample_id": 5738, "db_id": "dorm_1", "final": {"question": "What is the average age of students who are living in the dorm with the largest capacity?", "sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)", "source_tables": ["student", "dorm", "lives_in"]}}
{"sample_id": 5775, "db_id": "customer_complaints", "final": {"question": "Find the email and phone number of the customers who have never filed a complaint before.", "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)", "source_tables": ["customers", "complaints"]}}
{"sample_id": 5798, "db_id": "customer_complaints", "final": {"question": "Count the number of different complaint type codes.", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "source_tables": ["complaints"]}}
{"sample_id": 5780, "db_id": "customer_complaints", "final": {"question": "Return the description of the product called \"Chocolate\".", "sql": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"", "source_tables": ["products"]}}
{"sample_id": 5804, "db_id": "customer_complaints", "final": {"question": "Return the first names of the 5 staff members who have handled the most complaints.", "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "source_tables": ["staff", "complaints"]}}
{"sample_id": 5764, "db_id": "customer_complaints", "final": {"question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?", "sql": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number", "source_tables": ["customers"]}}
{"sample_id": 5789, "db_id": "customer_complaints", "final": {"question": "Which complaint status has more than 3 records on file?", "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3", "source_tables": ["complaints"]}}
{"sample_id": 5773, "db_id": "customer_complaints", "final": {"question": "What is the phone number of the customer who has filed the most recent complaint?", "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "source_tables": ["customers", "complaints"]}}
{"sample_id": 5794, "db_id": "customer_complaints", "final": {"question": "Count the number of customers that have the customer type that is most common.", "sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 5783, "db_id": "customer_complaints", "final": {"question": "Find the prices of products which has never received a single complaint.", "sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)", "source_tables": ["complaints", "products"]}}
{"sample_id": 5830, "db_id": "workshop_paper", "final": {"question": "How many workshops did each author submit to? Return the author name and the number of workshops.", "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5808, "db_id": "workshop_paper", "final": {"question": "Count the number of submissions.", "sql": "SELECT count(*) FROM submission", "source_tables": ["submission"]}}
{"sample_id": 5831, "db_id": "workshop_paper", "final": {"question": "Show the authors who have submissions to more than one workshop.", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5827, "db_id": "workshop_paper", "final": {"question": "Show the result of the submission with the highest score.", "sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5809, "db_id": "workshop_paper", "final": {"question": "List the authors of submissions in ascending order of scores.", "sql": "SELECT Author FROM submission ORDER BY Scores ASC", "source_tables": ["submission"]}}
{"sample_id": 5834, "db_id": "workshop_paper", "final": {"question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "source_tables": ["workshop"]}}
{"sample_id": 5877, "db_id": "tracking_share_transactions", "final": {"question": "What are the details of the lots which are not used in any transactions?", "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id", "source_tables": ["lots", "transactions_lots"]}}
{"sample_id": 5840, "db_id": "tracking_share_transactions", "final": {"question": "Show the maximum amount of transaction.", "sql": "SELECT max(amount_of_transaction) FROM TRANSACTIONS", "source_tables": ["transactions"]}}
{"sample_id": 5860, "db_id": "tracking_share_transactions", "final": {"question": "Show the maximum and minimum share count of different transaction types.", "sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code", "source_tables": ["transactions"]}}
{"sample_id": 5876, "db_id": "tracking_share_transactions", "final": {"question": "What are the details of all sales and purchases?", "sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases", "source_tables": ["sales", "purchases"]}}
{"sample_id": 5838, "db_id": "tracking_share_transactions", "final": {"question": "Show all investor details.", "sql": "SELECT Investor_details FROM INVESTORS", "source_tables": ["investors"]}}
{"sample_id": 5843, "db_id": "tracking_share_transactions", "final": {"question": "Show all transaction ids with transaction code 'PUR'.", "sql": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'", "source_tables": ["transactions"]}}
{"sample_id": 5846, "db_id": "tracking_share_transactions", "final": {"question": "Show the description of transaction type with code \"PUR\".", "sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"", "source_tables": ["ref_transaction_types"]}}
{"sample_id": 5857, "db_id": "tracking_share_transactions", "final": {"question": "What are the lot details of lots associated with transactions with share count smaller than 50?", "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50", "source_tables": ["transactions", "lots", "transactions_lots"]}}
{"sample_id": 5906, "db_id": "cre_Theme_park", "final": {"question": "What are the star rating descriptions of the hotels with price above 10000?", "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000", "source_tables": ["ref_hotel_star_ratings", "hotels"]}}
{"sample_id": 5932, "db_id": "cre_Theme_park", "final": {"question": "Show the id and star rating of each hotel, ordered by its price from low to high.", "sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "source_tables": ["hotels"]}}
{"sample_id": 5891, "db_id": "cre_Theme_park", "final": {"question": "What is the average price range of five star hotels that allow pets?", "sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1", "source_tables": ["hotels"]}}
{"sample_id": 5908, "db_id": "cre_Theme_park", "final": {"question": "What are the details and opening hours of the museums?", "sql": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID", "source_tables": ["museums", "tourist_attractions"]}}
{"sample_id": 5939, "db_id": "cre_Theme_park", "final": {"question": "Which transportation method is used the most often to get to tourist attractions?", "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["tourist_attractions"]}}
{"sample_id": 5951, "db_id": "cre_Theme_park", "final": {"question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5931, "db_id": "cre_Theme_park", "final": {"question": "What are the average prices of hotels grouped by their pet policy.", "sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "source_tables": ["hotels"]}}
{"sample_id": 5901, "db_id": "cre_Theme_park", "final": {"question": "Find all the distinct visit dates.", "sql": "SELECT DISTINCT Visit_Date FROM VISITS", "source_tables": ["visits"]}}
{"sample_id": 5913, "db_id": "cre_Theme_park", "final": {"question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".", "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"", "source_tables": ["photos", "tourist_attractions"]}}
{"sample_id": 5928, "db_id": "cre_Theme_park", "final": {"question": "Show the average price of hotels for each star rating code.", "sql": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code", "source_tables": ["hotels"]}}
{"sample_id": 5878, "db_id": "cre_Theme_park", "final": {"question": "How many available hotels are there in total?", "sql": "SELECT count(*) FROM HOTELS", "source_tables": ["hotels"]}}
{"sample_id": 5879, "db_id": "cre_Theme_park", "final": {"question": "Find the total number of available hotels.", "sql": "SELECT count(*) FROM HOTELS", "source_tables": ["hotels"]}}
{"sample_id": 5960, "db_id": "cre_Theme_park", "final": {"question": "How many tourists did not make any visit?", "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "source_tables": ["visits", "visitors"]}}
{"sample_id": 5916, "db_id": "cre_Theme_park", "final": {"question": "What are the details of the shops that can be accessed by walk?", "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"", "source_tables": ["shops", "tourist_attractions"]}}
{"sample_id": 5897, "db_id": "cre_Theme_park", "final": {"question": "Find all the locations whose names contain the word \"film\".", "sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"", "source_tables": ["locations"]}}
{"sample_id": 5925, "db_id": "cre_Theme_park", "final": {"question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"", "source_tables": ["visitors", "tourist_attractions", "visits"]}}
{"sample_id": 5969, "db_id": "game_1", "final": {"question": "What are the names of all the video games and their types in alphabetical order?", "sql": "SELECT gname ,  gtype FROM Video_games ORDER BY gname", "source_tables": ["video_games"]}}
{"sample_id": 6021, "db_id": "game_1", "final": {"question": "What are the ids of all male students who do not play football?", "sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"", "source_tables": ["student", "sportsinfo"]}}
{"sample_id": 6035, "db_id": "game_1", "final": {"question": "What are the ids of all students and number of hours played?", "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid", "source_tables": ["plays_games"]}}
{"sample_id": 6025, "db_id": "game_1", "final": {"question": "What is the total number of hours per week and number of games played by students under 20?", "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6006, "db_id": "game_1", "final": {"question": "Show all student IDs with the number of sports and total number of games played", "sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID", "source_tables": ["sportsinfo"]}}
{"sample_id": 5963, "db_id": "game_1", "final": {"question": "How many video games do you have?", "sql": "SELECT count(*) FROM Video_games", "source_tables": ["video_games"]}}
{"sample_id": 5983, "db_id": "game_1", "final": {"question": "What are the ids of all students who live in CHI?", "sql": "SELECT StuID FROM Student WHERE city_code  =  \"CHI\"", "source_tables": ["student"]}}
{"sample_id": 6033, "db_id": "game_1", "final": {"question": "What are ids and total number of hours played for each game?", "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid", "source_tables": ["plays_games"]}}
{"sample_id": 5986, "db_id": "game_1", "final": {"question": "Show first name for all students with major 600.", "sql": "SELECT Fname FROM Student WHERE Major  =  600", "source_tables": ["student"]}}
{"sample_id": 5967, "db_id": "game_1", "final": {"question": "What are the different types of video games?", "sql": "SELECT DISTINCT gtype FROM Video_games", "source_tables": ["video_games"]}}
{"sample_id": 5990, "db_id": "game_1", "final": {"question": "Show all advisors who have at least two students.", "sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2", "source_tables": ["student"]}}
{"sample_id": 5970, "db_id": "game_1", "final": {"question": "Show all video games with type Collectible card game.", "sql": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"", "source_tables": ["video_games"]}}
{"sample_id": 6036, "db_id": "game_1", "final": {"question": "Show the game name that has most number of hours played.", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 5996, "db_id": "game_1", "final": {"question": "List ids for all student who are on scholarship.", "sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'", "source_tables": ["sportsinfo"]}}
{"sample_id": 5974, "db_id": "game_1", "final": {"question": "How many video games have type Massively multiplayer online game?", "sql": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"", "source_tables": ["video_games"]}}
{"sample_id": 6001, "db_id": "game_1", "final": {"question": "What is the total number of games played?", "sql": "SELECT sum(gamesplayed) FROM Sportsinfo", "source_tables": ["sportsinfo"]}}
{"sample_id": 6043, "db_id": "game_1", "final": {"question": "What is the first and last name of all students who play Football or Lacrosse?", "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6109, "db_id": "customers_and_addresses", "final": {"question": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".", "sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "source_tables": ["customers", "customer_orders", "order_items"]}}
{"sample_id": 6055, "db_id": "customers_and_addresses", "final": {"question": "Which customers use \"Cash\" for payment method? Return the customer names.", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"", "source_tables": ["customers"]}}
{"sample_id": 6087, "db_id": "customers_and_addresses", "final": {"question": "For which countries are there more than four distinct addresses listed?", "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4", "source_tables": ["addresses"]}}
{"sample_id": 6082, "db_id": "customers_and_addresses", "final": {"question": "Find the city with post code 255.", "sql": "SELECT city FROM addresses WHERE zip_postcode  =  255", "source_tables": ["addresses"]}}
{"sample_id": 6048, "db_id": "customers_and_addresses", "final": {"question": "Find the name of all customers.", "sql": "SELECT customer_name FROM customers", "source_tables": ["customers"]}}
{"sample_id": 6128, "db_id": "customers_and_addresses", "final": {"question": "Find the name of customers who did not pay with Cash.", "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "source_tables": ["customers"]}}
{"sample_id": 6118, "db_id": "customers_and_addresses", "final": {"question": "Find the total amount of products ordered before 2018-03-17 07:13:53.", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"", "source_tables": ["customer_orders", "order_items"]}}
{"sample_id": 6096, "db_id": "customers_and_addresses", "final": {"question": "What is the channel code and contact number of the customer contact channel that was active for the longest time?", "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "source_tables": ["customer_contact_channels"]}}
{"sample_id": 6115, "db_id": "customers_and_addresses", "final": {"question": "What are the customer name and date of the orders whose status is \"Delivered\".", "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6099, "db_id": "customers_and_addresses", "final": {"question": "What are the name and active date of the customers whose contact channel code is email?", "sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", "source_tables": ["customers", "customer_contact_channels"]}}
{"sample_id": 6093, "db_id": "customers_and_addresses", "final": {"question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".", "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "source_tables": ["customers", "customer_contact_channels"]}}
{"sample_id": 6053, "db_id": "customers_and_addresses", "final": {"question": "Find the average order quantity per order.", "sql": "SELECT avg(order_quantity) FROM order_items", "source_tables": ["order_items"]}}
{"sample_id": 6111, "db_id": "customers_and_addresses", "final": {"question": "Return the number of customers who have at least one order with \"Cancelled\" status.", "sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"", "source_tables": ["customer_orders"]}}
{"sample_id": 6066, "db_id": "customers_and_addresses", "final": {"question": "Find the name of all customers whose name contains \"Alex\".", "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"", "source_tables": ["customers"]}}
{"sample_id": 6130, "db_id": "customers_and_addresses", "final": {"question": "Find the names of customers who never ordered product Latte.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "source_tables": ["customers", "customer_orders", "order_items", "products"]}}
{"sample_id": 6085, "db_id": "customers_and_addresses", "final": {"question": "What are the state and country of all the cities that have post codes starting with 4.\\", "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"", "source_tables": ["addresses"]}}
{"sample_id": 6120, "db_id": "customers_and_addresses", "final": {"question": "Who made the latest order?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6174, "db_id": "music_4", "final": {"question": "Please show the categories of the music festivals and the count.", "sql": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category", "source_tables": ["music_festival"]}}
{"sample_id": 6161, "db_id": "music_4", "final": {"question": "What are the songs in volumes that have resulted in a nomination at music festivals?", "sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"", "source_tables": ["volume", "music_festival"]}}
{"sample_id": 6185, "db_id": "music_4", "final": {"question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "source_tables": ["volume", "artist"]}}
{"sample_id": 6188, "db_id": "music_4", "final": {"question": "What is the issue date of the volume with the minimum weeks on top?", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "source_tables": ["volume"]}}
{"sample_id": 6139, "db_id": "music_4", "final": {"question": "What are the ages of all music artists?", "sql": "SELECT Age FROM artist", "source_tables": ["artist"]}}
{"sample_id": 6169, "db_id": "music_4", "final": {"question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2", "source_tables": ["volume", "artist"]}}
{"sample_id": 6136, "db_id": "music_4", "final": {"question": "How many artists are there?", "sql": "SELECT count(*) FROM artist", "source_tables": ["artist"]}}
{"sample_id": 6168, "db_id": "music_4", "final": {"question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2", "source_tables": ["volume", "artist"]}}
{"sample_id": 6162, "db_id": "music_4", "final": {"question": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?", "sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"", "source_tables": ["volume", "artist"]}}
{"sample_id": 6194, "db_id": "music_4", "final": {"question": "What are the issue dates of volumes associated with the artist aged 23 or younger?", "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "source_tables": ["volume", "artist"]}}
{"sample_id": 6190, "db_id": "music_4", "final": {"question": "How many distinct artists have volumes?", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}}
{"sample_id": 6186, "db_id": "music_4", "final": {"question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"", "source_tables": ["music_festival"]}}
{"sample_id": 6211, "db_id": "roller_coaster", "final": {"question": "How many countries do not have an roller coaster longer than 3000?", "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )", "source_tables": ["roller_coaster", "country"]}}
{"sample_id": 6212, "db_id": "roller_coaster", "final": {"question": "What are the country names, area and population which has both roller coasters with speed higher", "sql": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55", "source_tables": ["roller_coaster", "country"]}}
{"sample_id": 6209, "db_id": "roller_coaster", "final": {"question": "Show the name and population of the country that has the highest roller coaster.", "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["roller_coaster", "country"]}}
{"sample_id": 6255, "db_id": "ship_1", "final": {"question": "Find the name of the ship that is steered by the youngest captain.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "source_tables": ["ship", "captain"]}}
{"sample_id": 6219, "db_id": "ship_1", "final": {"question": "Sort all captain names by their ages from old to young.", "sql": "SELECT name FROM captain ORDER BY age DESC", "source_tables": ["captain"]}}
{"sample_id": 6232, "db_id": "ship_1", "final": {"question": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?", "sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'", "source_tables": ["captain"]}}
{"sample_id": 6214, "db_id": "ship_1", "final": {"question": "Count the number of different ranks of captain.", "sql": "SELECT count(DISTINCT rank) FROM captain", "source_tables": ["captain"]}}
{"sample_id": 6227, "db_id": "ship_1", "final": {"question": "Find the name of captains whose rank are either Midshipman or Lieutenant.", "sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'", "source_tables": ["captain"]}}
{"sample_id": 6257, "db_id": "ship_1", "final": {"question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.", "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "source_tables": ["ship", "captain"]}}
{"sample_id": 6241, "db_id": "ship_1", "final": {"question": "Group by ships by flag, and return number of ships that have each flag.", "sql": "SELECT count(*) ,  flag FROM ship GROUP BY flag", "source_tables": ["ship"]}}
{"sample_id": 6258, "db_id": "ship_1", "final": {"question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?", "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "source_tables": ["ship", "captain"]}}
{"sample_id": 6233, "db_id": "ship_1", "final": {"question": "Find the captain rank that has no captain in Third-rate ship of the line class.", "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'", "source_tables": ["captain"]}}
{"sample_id": 6265, "db_id": "city_record", "final": {"question": "Find the cities which were once a host city after 2010?", "sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010", "source_tables": ["city", "hosting_city"]}}
{"sample_id": 6282, "db_id": "city_record", "final": {"question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct", "source_tables": ["city", "temperature"]}}
{"sample_id": 6273, "db_id": "city_record", "final": {"question": "What is the host year of city \"Taizhou ( Zhejiang )\"?", "sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\"", "source_tables": ["city", "hosting_city"]}}
{"sample_id": 6286, "db_id": "city_record", "final": {"question": "Which cities have lower temperature in March than in Dec and have never served as host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["city", "hosting_city", "temperature"]}}
{"sample_id": 6269, "db_id": "city_record", "final": {"question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?", "sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"", "source_tables": ["city", "hosting_city", "match"]}}
{"sample_id": 6277, "db_id": "city_record", "final": {"question": "Which city has the lowest GDP? Please list the city name and its GDP.", "sql": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 6283, "db_id": "city_record", "final": {"question": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city", "source_tables": ["city", "hosting_city", "temperature"]}}
{"sample_id": 6279, "db_id": "city_record", "final": {"question": "Which city has the highest temperature in February?", "sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1", "source_tables": ["city", "temperature"]}}
{"sample_id": 6325, "db_id": "e_government", "final": {"question": "How many cities are there in state \"Colorado\"?", "sql": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"", "source_tables": ["addresses"]}}
{"sample_id": 6338, "db_id": "e_government", "final": {"question": "Return the name of the organization which has the most contact individuals.", "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals"]}}
{"sample_id": 6333, "db_id": "e_government", "final": {"question": "Which is the email of the party that has used the services the most number of times?", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party_services", "parties"]}}
{"sample_id": 6314, "db_id": "e_government", "final": {"question": "What is the name of the organization that was formed most recently?", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1", "source_tables": ["organizations"]}}
{"sample_id": 6328, "db_id": "e_government", "final": {"question": "What are the payment method codes that have been used by more than 3 parties?", "sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3", "source_tables": ["parties"]}}
{"sample_id": 6309, "db_id": "e_government", "final": {"question": "Find the emails of parties with the most popular party form.", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["parties", "party_forms"]}}
{"sample_id": 6334, "db_id": "e_government", "final": {"question": "Return the party email that has used party services the greatest number of times.", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party_services", "parties"]}}
{"sample_id": 6337, "db_id": "e_government", "final": {"question": "What is the name of organization that has the greatest number of contact individuals?", "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals"]}}
{"sample_id": 6346, "db_id": "school_bus", "final": {"question": "Show the home city with the most number of drivers.", "sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1", "source_tables": ["driver"]}}
{"sample_id": 6351, "db_id": "school_bus", "final": {"question": "Show the types of schools that have two schools.", "sql": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2", "source_tables": ["school"]}}
{"sample_id": 6347, "db_id": "school_bus", "final": {"question": "Show the party with drivers from Hartford and drivers older than 40.", "sql": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40", "source_tables": ["driver"]}}
{"sample_id": 6376, "db_id": "flight_company", "final": {"question": "which countries have more than 2 airports?", "sql": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2", "source_tables": ["airport"]}}
{"sample_id": 6359, "db_id": "flight_company", "final": {"question": "How many flights have a velocity larger than 200?", "sql": "SELECT count(*) FROM flight WHERE velocity  >  200", "source_tables": ["flight"]}}
{"sample_id": 6370, "db_id": "flight_company", "final": {"question": "What is the most common company type, and how many are there?", "sql": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["operate_company"]}}
{"sample_id": 6437, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the description of the budget type that has the code ORG.", "sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"", "source_tables": ["ref_budget_codes"]}}
{"sample_id": 6436, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the description for the budget type with code ORG?", "sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"", "source_tables": ["ref_budget_codes"]}}
{"sample_id": 6410, "db_id": "cre_Docs_and_Epenses", "final": {"question": "List document type codes and the number of documents in each code.", "sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code", "source_tables": ["documents"]}}
{"sample_id": 6438, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many documents have expenses?", "sql": "SELECT count(*) FROM Documents_with_expenses", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6405, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many documents correspond with each project id?", "sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id", "source_tables": ["documents"]}}
{"sample_id": 6441, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the ids of documents with expenses that have the budget code 'SF'.", "sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6389, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the different statement ids on accounts, and the number of accounts for each?", "sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID", "source_tables": ["accounts"]}}
{"sample_id": 6395, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?", "sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'", "source_tables": ["documents"]}}
{"sample_id": 6457, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Count the number of documents that do not have expenses.", "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6431, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the details of the project with the document name 'King Book'.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"", "source_tables": ["projects", "documents"]}}
{"sample_id": 6433, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Count the number of budget codes.", "sql": "SELECT count(*) FROM Ref_budget_codes", "source_tables": ["ref_budget_codes"]}}
{"sample_id": 6400, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many documents are with document type code BK for each product id?", "sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id", "source_tables": ["documents"]}}
{"sample_id": 6399, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the names and ids of documents that have the type code BK?", "sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"", "source_tables": ["documents"]}}
{"sample_id": 6452, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show ids for all documents in type CV without expense budgets.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6420, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the document type description for document type named Film?", "sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"", "source_tables": ["ref_document_types"]}}
{"sample_id": 6428, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the project id and detail for the project with at least two documents?", "sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2", "source_tables": ["projects", "documents"]}}
{"sample_id": 6505, "db_id": "scientist_1", "final": {"question": "What are the names of scientists who are not working on the project with the most hours?", "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6479, "db_id": "scientist_1", "final": {"question": "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6502, "db_id": "scientist_1", "final": {"question": "Find the number of scientists who are not assigned to any project.", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6486, "db_id": "scientist_1", "final": {"question": "List the names of all scientists sorted in alphabetical order.", "sql": "SELECT name FROM scientists ORDER BY name", "source_tables": ["scientists"]}}
{"sample_id": 6463, "db_id": "scientist_1", "final": {"question": "How many scientists are there?", "sql": "SELECT count(*) FROM scientists", "source_tables": ["scientists"]}}
{"sample_id": 6497, "db_id": "scientist_1", "final": {"question": "What are the names of scientists who are assigned to any project?", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6478, "db_id": "scientist_1", "final": {"question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6489, "db_id": "scientist_1", "final": {"question": "What are the naems of all the projects, and how many scientists were assigned to each of them?", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name", "source_tables": ["projects", "assignedto"]}}
{"sample_id": 6509, "db_id": "scientist_1", "final": {"question": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?", "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}}
{"sample_id": 6513, "db_id": "wine_1", "final": {"question": "What is the winery at which the wine with the highest score was made?", "sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "source_tables": ["wine"]}}
{"sample_id": 6524, "db_id": "wine_1", "final": {"question": "List the names of all distinct wines that have scores higher than 90.", "sql": "SELECT Name FROM WINE WHERE score  >  90", "source_tables": ["wine"]}}
{"sample_id": 6571, "db_id": "wine_1", "final": {"question": "What are the average price and score of wines for each appelation?", "sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "source_tables": ["wine"]}}
{"sample_id": 6518, "db_id": "wine_1", "final": {"question": "List the names and scores of all wines.", "sql": "SELECT Name ,  Score FROM WINE", "source_tables": ["wine"]}}
{"sample_id": 6567, "db_id": "wine_1", "final": {"question": "Give the maximum price and score for wines produced in the appelation St. Helena.", "sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"", "source_tables": ["wine"]}}
{"sample_id": 6533, "db_id": "wine_1", "final": {"question": "Count the number of appelations in Napa County.", "sql": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "source_tables": ["appellations"]}}
{"sample_id": 6579, "db_id": "wine_1", "final": {"question": "Give the names of wines with prices above any wine produced in 2006.", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "source_tables": ["wine"]}}
{"sample_id": 6561, "db_id": "wine_1", "final": {"question": "Give the distinct names of wines made before 2000 or after 2010.", "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "source_tables": ["wine"]}}
{"sample_id": 6566, "db_id": "wine_1", "final": {"question": "What are the maximum price and score of wines produced by St. Helena appelation?", "sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"", "source_tables": ["wine"]}}
{"sample_id": 6539, "db_id": "wine_1", "final": {"question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?", "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6519, "db_id": "wine_1", "final": {"question": "What are the names and scores of all wines?", "sql": "SELECT Name ,  Score FROM WINE", "source_tables": ["wine"]}}
{"sample_id": 6583, "db_id": "wine_1", "final": {"question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?", "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "source_tables": ["wine"]}}
{"sample_id": 6540, "db_id": "wine_1", "final": {"question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.", "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6548, "db_id": "wine_1", "final": {"question": "What are the average prices of wines for different years?", "sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "source_tables": ["wine"]}}
{"sample_id": 6552, "db_id": "wine_1", "final": {"question": "List the names of all distinct wines in alphabetical order.", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "source_tables": ["wine"]}}
{"sample_id": 6557, "db_id": "wine_1", "final": {"question": "What is the area for the appelation which produced the most wines prior to 2010?", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6604, "db_id": "train_station", "final": {"question": "Show the name and service for all trains in order by time.", "sql": "SELECT name ,  service FROM train ORDER BY TIME", "source_tables": ["train"]}}
{"sample_id": 6592, "db_id": "train_station", "final": {"question": "How many train stations are there?", "sql": "SELECT count(*) FROM station", "source_tables": ["station"]}}
{"sample_id": 6614, "db_id": "train_station", "final": {"question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.", "sql": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges", "source_tables": ["station"]}}
{"sample_id": 6603, "db_id": "train_station", "final": {"question": "Show the number of trains", "sql": "SELECT count(*) FROM train", "source_tables": ["train"]}}
{"sample_id": 6643, "db_id": "driving_school", "final": {"question": "How many staff live in state Georgia?", "sql": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";", "source_tables": ["addresses"]}}
{"sample_id": 6675, "db_id": "driving_school", "final": {"question": "List first name and last name of customers lived in city Lockmanfurt.", "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";", "source_tables": ["customers", "addresses"]}}
{"sample_id": 6637, "db_id": "driving_school", "final": {"question": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?", "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6632, "db_id": "driving_school", "final": {"question": "What is the nickname of the employee named Janessa Sawayn?", "sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "source_tables": ["staff"]}}
{"sample_id": 6638, "db_id": "driving_school", "final": {"question": "In which country and state does Janessa Sawayn live?", "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6620, "db_id": "driving_school", "final": {"question": "What are the details of the car with id 1?", "sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;", "source_tables": ["vehicles"]}}
{"sample_id": 6639, "db_id": "driving_school", "final": {"question": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?", "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";", "source_tables": ["customers", "lessons"]}}
{"sample_id": 6650, "db_id": "driving_school", "final": {"question": "What are the names of the states that have 2 to 4 employees living there?", "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6648, "db_id": "driving_school", "final": {"question": "In which city do the most employees live and how many of them live there?", "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6624, "db_id": "driving_school", "final": {"question": "What is the date of birth for the staff member named Janessa Sawayn?", "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "source_tables": ["staff"]}}
{"sample_id": 6641, "db_id": "driving_school", "final": {"question": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "source_tables": ["staff", "addresses"]}}
{"sample_id": 6690, "db_id": "driving_school", "final": {"question": "For each payment method, how many payments were made?", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "source_tables": ["customer_payments"]}}
{"sample_id": 6659, "db_id": "driving_school", "final": {"question": "When are the birthdays of customer who are classified as 'Good Customer' status?", "sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'", "source_tables": ["customers"]}}
{"sample_id": 6677, "db_id": "driving_school", "final": {"question": "Which country does customer with first name as Carole and last name as Bernhard lived in?", "sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "source_tables": ["customers", "addresses"]}}
{"sample_id": 6631, "db_id": "driving_school", "final": {"question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "source_tables": ["staff"]}}
{"sample_id": 6656, "db_id": "driving_school", "final": {"question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?", "sql": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;", "source_tables": ["customers"]}}
{"sample_id": 6665, "db_id": "driving_school", "final": {"question": "List all customer status codes and the number of customers having each status code.", "sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;", "source_tables": ["customers"]}}
{"sample_id": 6707, "db_id": "driving_school", "final": {"question": "What is the id and detail of the vehicle used in lessons for most of the times?", "sql": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["lessons", "vehicles"]}}
{"sample_id": 6708, "db_id": "activity_1", "final": {"question": "How many faculty do we have?", "sql": "SELECT count(*) FROM Faculty", "source_tables": ["faculty"]}}
{"sample_id": 6771, "db_id": "activity_1", "final": {"question": "What are the names of the activities Mark Giuliano is involved in", "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "source_tables": ["activity", "faculty_participates_in", "faculty"]}}
{"sample_id": 6756, "db_id": "activity_1", "final": {"question": "Show ids for the faculty members who don't advise any student.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "source_tables": ["student", "faculty"]}}
{"sample_id": 6759, "db_id": "activity_1", "final": {"question": "List all the activities we have.", "sql": "SELECT activity_name FROM Activity", "source_tables": ["activity"]}}
{"sample_id": 6737, "db_id": "activity_1", "final": {"question": "How many faculty members do we have for each rank and gender?", "sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex", "source_tables": ["faculty"]}}
{"sample_id": 6766, "db_id": "activity_1", "final": {"question": "Show the ids of all the faculty members who participate in an activity and advise a student.", "sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "source_tables": ["student", "faculty_participates_in"]}}
{"sample_id": 6739, "db_id": "activity_1", "final": {"question": "Find the faculty rank that has the least members.", "sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1", "source_tables": ["faculty"]}}
{"sample_id": 6747, "db_id": "activity_1", "final": {"question": "Which students are advised by Michael Goodrich? Give me their first and last names.", "sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"", "source_tables": ["student", "faculty"]}}
{"sample_id": 6783, "db_id": "activity_1", "final": {"question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6741, "db_id": "activity_1", "final": {"question": "How many male and female assistant professors do we have?", "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex", "source_tables": ["faculty"]}}
{"sample_id": 6748, "db_id": "activity_1", "final": {"question": "Show the faculty id of each faculty member, along with the number of students he or she advises.", "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID", "source_tables": ["student", "faculty"]}}
{"sample_id": 6720, "db_id": "activity_1", "final": {"question": "How many female Professors do we have?", "sql": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"", "source_tables": ["faculty"]}}
{"sample_id": 6790, "db_id": "activity_1", "final": {"question": "Find the first names of professors who are not playing Canoeing or Kayaking.", "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty_participates_in", "faculty"]}}
{"sample_id": 6789, "db_id": "activity_1", "final": {"question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.", "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty_participates_in", "faculty"]}}
{"sample_id": 6791, "db_id": "activity_1", "final": {"question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?", "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty_participates_in", "faculty"]}}
{"sample_id": 6715, "db_id": "activity_1", "final": {"question": "What are the rank, first name, and last name of the faculty members?", "sql": "SELECT rank ,  Fname ,  Lname FROM Faculty", "source_tables": ["faculty"]}}
{"sample_id": 6743, "db_id": "activity_1", "final": {"question": "Who is the advisor of Linda Smith? Give me the first name and last name.", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"", "source_tables": ["student", "faculty"]}}
{"sample_id": 6819, "db_id": "flight_4", "final": {"question": "How many routes does American Airlines operate?", "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6855, "db_id": "flight_4", "final": {"question": "For each  airport name, how many routes start at that airport, ordered from most to least?", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC", "source_tables": ["routes", "airports"]}}
{"sample_id": 6845, "db_id": "flight_4", "final": {"question": "What is the number of cities in the United States with more than 3 airports?", "sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3", "source_tables": ["airports"]}}
{"sample_id": 6818, "db_id": "flight_4", "final": {"question": "Find the number of routes operated by American Airlines.", "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6871, "db_id": "flight_4", "final": {"question": "What is the id of the routes whose source and destination airports are in the United States?", "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}}
{"sample_id": 6811, "db_id": "flight_4", "final": {"question": "What are the names of all airports whose elevation is between -50 and 50?", "sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "source_tables": ["airports"]}}
{"sample_id": 6801, "db_id": "flight_4", "final": {"question": "What is the total number of airlines?", "sql": "SELECT count(*) FROM airlines", "source_tables": ["airlines"]}}
{"sample_id": 6831, "db_id": "flight_4", "final": {"question": "What is the name and city of the airport from most of the routes start?", "sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airports"]}}
{"sample_id": 6870, "db_id": "flight_4", "final": {"question": "Find the id of routes whose source and destination airports are in the United States.", "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}}
{"sample_id": 6836, "db_id": "flight_4", "final": {"question": "Which countries has the most number of airlines whose active status is 'Y'?", "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines"]}}
{"sample_id": 6877, "db_id": "flight_4", "final": {"question": "What is the name of the airport that is the destination of the most number of routes that start in China?", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airports"]}}
{"sample_id": 6823, "db_id": "flight_4", "final": {"question": "What is the name, city, and country of the airport with the lowest altitude?", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1", "source_tables": ["airports"]}}
{"sample_id": 6828, "db_id": "flight_4", "final": {"question": "Find the names of the top 10 airlines that operate the most number of routes.", "sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10", "source_tables": ["routes", "airlines"]}}
{"sample_id": 6827, "db_id": "flight_4", "final": {"question": "What is the name and city of the airport that the most routes end at?", "sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airports"]}}
{"sample_id": 6854, "db_id": "flight_4", "final": {"question": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC", "source_tables": ["routes", "airports"]}}
{"sample_id": 6838, "db_id": "flight_4", "final": {"question": "List all countries and their number of airlines in the descending order of number of airlines.", "sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC", "source_tables": ["airlines"]}}
{"sample_id": 6902, "db_id": "tracking_orders", "final": {"question": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6900, "db_id": "tracking_orders", "final": {"question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?", "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"", "source_tables": ["order_items", "orders"]}}
{"sample_id": 6891, "db_id": "tracking_orders", "final": {"question": "Which customer made the most orders? Find the customer name.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 6894, "db_id": "tracking_orders", "final": {"question": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".", "sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6895, "db_id": "tracking_orders", "final": {"question": "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.", "sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "source_tables": ["customers", "orders"]}}
{"sample_id": 6931, "db_id": "tracking_orders", "final": {"question": "Which customers have made at least two orders? Give me each customer name and number of orders made.", "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "source_tables": ["customers", "orders"]}}
{"sample_id": 6908, "db_id": "tracking_orders", "final": {"question": "What is the placement date of the order whose invoice number is 10?", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "source_tables": ["shipments", "orders"]}}
{"sample_id": 6878, "db_id": "tracking_orders", "final": {"question": "What is the id of the most recent order?", "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "source_tables": ["orders"]}}
{"sample_id": 6911, "db_id": "tracking_orders", "final": {"question": "For each product, return its id and the number of times it was ordered.", "sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "source_tables": ["order_items", "products", "orders"]}}
{"sample_id": 6921, "db_id": "tracking_orders", "final": {"question": "What are ids of the all distinct orders, sorted by placement date?", "sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "source_tables": ["orders"]}}
{"sample_id": 6920, "db_id": "tracking_orders", "final": {"question": "List the ids of all distinct orders ordered by placed date.", "sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "source_tables": ["orders"]}}
{"sample_id": 6941, "db_id": "architecture", "final": {"question": "What is the average length in feet of the bridges?", "sql": "SELECT avg(length_feet) FROM bridge", "source_tables": ["bridge"]}}
{"sample_id": 6939, "db_id": "architecture", "final": {"question": "List the name, nationality and id of all male architects ordered by their names lexicographically.", "sql": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name", "source_tables": ["architect"]}}
{"sample_id": 6953, "db_id": "architecture", "final": {"question": "How many architects haven't built a mill before year 1850?", "sql": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );", "source_tables": ["mill", "architect"]}}
{"sample_id": 6990, "db_id": "culture_company", "final": {"question": "What are the titles of movies and books corresponding to companies incorporated in China?", "sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "source_tables": ["book_club", "movie", "culture_company"]}}
{"sample_id": 6968, "db_id": "culture_company", "final": {"question": "How many books fall into each category?", "sql": "SELECT category ,  count(*) FROM book_club GROUP BY category", "source_tables": ["book_club"]}}
{"sample_id": 6982, "db_id": "culture_company", "final": {"question": "Which directors had a movie both in the year 1999 and 2000?", "sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "source_tables": ["movie"]}}
{"sample_id": 6973, "db_id": "culture_company", "final": {"question": "Show all publishers which do not have a book in 1989.", "sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989", "source_tables": ["book_club"]}}
{"sample_id": 6974, "db_id": "culture_company", "final": {"question": "Which publishers did not publish a book in 1989?", "sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989", "source_tables": ["book_club"]}}
{"sample_id": 6992, "db_id": "culture_company", "final": {"question": "What are all company names that have a corresponding movie directed in the year 1999?", "sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "source_tables": ["movie", "culture_company"]}}
{"sample_id": 6981, "db_id": "culture_company", "final": {"question": "Show all director names who have a movie in both year 1999 and 2000.", "sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "source_tables": ["movie"]}}
{"sample_id": 7034, "db_id": "concert_singer", "final": {"question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "source_tables": ["stadium", "concert"]}}
{"sample_id": 6998, "db_id": "concert_singer", "final": {"question": "What is the average, minimum, and maximum age for all French singers?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "source_tables": ["singer"]}}
{"sample_id": 7012, "db_id": "concert_singer", "final": {"question": "What is the name and capacity for the stadium with the highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "source_tables": ["stadium"]}}
{"sample_id": 7006, "db_id": "concert_singer", "final": {"question": "What are all the song names by singers who are older than average?", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "source_tables": ["singer"]}}
{"sample_id": 7035, "db_id": "concert_singer", "final": {"question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "source_tables": ["stadium", "concert"]}}
{"sample_id": 6993, "db_id": "concert_singer", "final": {"question": "How many singers do we have?", "sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}}
{"sample_id": 7031, "db_id": "concert_singer", "final": {"question": "What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["singer_in_concert", "singer", "concert"]}}
{"sample_id": 7010, "db_id": "concert_singer", "final": {"question": "What is the average and maximum capacities for all stadiums ?", "sql": "select avg(capacity) ,  max(capacity) from stadium", "source_tables": ["stadium"]}}
{"sample_id": 7023, "db_id": "concert_singer", "final": {"question": "Show countries where a singer above age 40 and a singer below 30 are from.", "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "source_tables": ["singer"]}}
{"sample_id": 7046, "db_id": "pets_1", "final": {"question": "Find the number of dog pets that are raised by female students (with sex F).", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "source_tables": ["student", "pets", "has_pet"]}}
{"sample_id": 7072, "db_id": "pets_1", "final": {"question": "Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7065, "db_id": "pets_1", "final": {"question": "What is the average and maximum age for each pet type?", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}}
{"sample_id": 7068, "db_id": "pets_1", "final": {"question": "Find the first name and age of students who have a pet.", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7039, "db_id": "pets_1", "final": {"question": "How many pets have a greater weight than 10?", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "source_tables": ["pets"]}}
{"sample_id": 7074, "db_id": "pets_1", "final": {"question": "Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7042, "db_id": "pets_1", "final": {"question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "source_tables": ["pets"]}}
{"sample_id": 7073, "db_id": "pets_1", "final": {"question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "source_tables": ["student", "has_pet"]}}
{"sample_id": 7136, "db_id": "car_1", "final": {"question": "How many cars have more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "source_tables": ["cars_data"]}}
{"sample_id": 7159, "db_id": "car_1", "final": {"question": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7086, "db_id": "car_1", "final": {"question": "How many models does each car maker produce? List maker full name, id and the number.", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "source_tables": ["model_list", "car_makers"]}}
{"sample_id": 7133, "db_id": "car_1", "final": {"question": "What is the maximum accelerate for all the different cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "source_tables": ["cars_data"]}}
{"sample_id": 7157, "db_id": "car_1", "final": {"question": "What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}}
{"sample_id": 7115, "db_id": "car_1", "final": {"question": "What are the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "source_tables": ["model_list"]}}
{"sample_id": 7163, "db_id": "car_1", "final": {"question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "source_tables": ["cars_data"]}}
{"sample_id": 7087, "db_id": "car_1", "final": {"question": "What is the full name of each car maker, along with its id and how many models it produces?", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "source_tables": ["model_list", "car_makers"]}}
{"sample_id": 7114, "db_id": "car_1", "final": {"question": "What are all the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "source_tables": ["model_list"]}}
{"sample_id": 7160, "db_id": "car_1", "final": {"question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7134, "db_id": "car_1", "final": {"question": "Which model has the most version(make) of cars?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["car_names"]}}
{"sample_id": 7150, "db_id": "car_1", "final": {"question": "For model volvo, how many cylinders does the car with the least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7168, "db_id": "car_1", "final": {"question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "source_tables": ["car_names", "model_list", "car_makers"]}}
{"sample_id": 7142, "db_id": "car_1", "final": {"question": "Which makers designed more than 3 car models? List full name and the id.", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["model_list", "car_makers"]}}
{"sample_id": 7135, "db_id": "car_1", "final": {"question": "What model has the most different versions?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["car_names"]}}
{"sample_id": 7167, "db_id": "car_1", "final": {"question": "What are the names of the countries with no car makers?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7112, "db_id": "car_1", "final": {"question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "source_tables": ["cars_data"]}}
{"sample_id": 7096, "db_id": "car_1", "final": {"question": "Which distinct car models are the produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "source_tables": ["car_names", "model_list", "cars_data"]}}
{"sample_id": 7241, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "source_tables": ["flights"]}}
{"sample_id": 7190, "db_id": "flight_2", "final": {"question": "Which city and country is the Alton airport at?", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "source_tables": ["airports"]}}
{"sample_id": 7250, "db_id": "flight_2", "final": {"question": "Find the name of airports which do not have any flight in and out.", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "source_tables": ["airports", "flights"]}}
{"sample_id": 7203, "db_id": "flight_2", "final": {"question": "Return the number of flights arriving in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7178, "db_id": "flight_2", "final": {"question": "List the airport code and name in the city of Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "source_tables": ["airports"]}}
{"sample_id": 7242, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "source_tables": ["flights"]}}
{"sample_id": 7222, "db_id": "flight_2", "final": {"question": "Which airline has most number of flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7224, "db_id": "flight_2", "final": {"question": "Find the abbreviation and country of the airline that has fewest number of flights?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7201, "db_id": "flight_2", "final": {"question": "Return the number of flights departing from Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7225, "db_id": "flight_2", "final": {"question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7247, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights arriving in Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "source_tables": ["airports", "flights"]}}
{"sample_id": 7223, "db_id": "flight_2", "final": {"question": "What airline serves the most flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7243, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "source_tables": ["flights"]}}
{"sample_id": 7189, "db_id": "flight_2", "final": {"question": "Return the number of airlines in the USA.", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "source_tables": ["airlines"]}}
{"sample_id": 7193, "db_id": "flight_2", "final": {"question": "Return the name of the airport with code 'AKO'.", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "source_tables": ["airports"]}}
{"sample_id": 7207, "db_id": "flight_2", "final": {"question": "Give the number of Jetblue Airways flights.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7282, "db_id": "employee_hire_evaluation", "final": {"question": "What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}}
{"sample_id": 7259, "db_id": "employee_hire_evaluation", "final": {"question": "Find the cities that have more than one employee under age 30.", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "source_tables": ["employee"]}}
{"sample_id": 7257, "db_id": "employee_hire_evaluation", "final": {"question": "Count the number of employees for each city.", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "source_tables": ["employee"]}}
{"sample_id": 7281, "db_id": "employee_hire_evaluation", "final": {"question": "For each shop, return the number of employees working there and the name of the shop.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "source_tables": ["hiring", "shop"]}}
{"sample_id": 7261, "db_id": "employee_hire_evaluation", "final": {"question": "How many shops are there in each location?", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "source_tables": ["shop"]}}
{"sample_id": 7268, "db_id": "employee_hire_evaluation", "final": {"question": "Find the names of stores whose number products is more than the average number of products.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "source_tables": ["shop"]}}
{"sample_id": 7263, "db_id": "employee_hire_evaluation", "final": {"question": "What are the manager name and district of the shop that sells the largest number of products?", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "source_tables": ["shop"]}}
{"sample_id": 7321, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "source_tables": ["templates"]}}
{"sample_id": 7317, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the ids of templates that have the code PP or PPT.", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "source_tables": ["templates"]}}
{"sample_id": 7307, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the template ids of any templates used in more than a single document?", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "source_tables": ["documents"]}}
{"sample_id": 7322, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes and number of templates for each.", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "source_tables": ["templates"]}}
{"sample_id": 7355, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the details for the paragraph that includes the text 'Korea ' ?", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "source_tables": ["paragraphs"]}}
{"sample_id": 7371, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Give the ids of documents that have between one and two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "source_tables": ["paragraphs"]}}
{"sample_id": 7346, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the distinct template type descriptions for the templates ever used by any document?", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "source_tables": ["ref_template_types", "templates", "documents"]}}
{"sample_id": 7363, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7359, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7352, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many paragraphs for the document with name 'Summer Show'?", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7373, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "source_tables": ["paragraphs"]}}
{"sample_id": 7297, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the document id, template id, and description for the document with the name Robbin CV.", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "source_tables": ["documents"]}}
{"sample_id": 7345, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the type code of the template type with the description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "source_tables": ["ref_template_types"]}}
{"sample_id": 7299, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of different templates used for documents.", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 7357, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7313, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids, version numbers, and type codes for each template?", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 7403, "db_id": "course_teach", "final": {"question": "What are the names of the teachers whose courses have not been arranged?", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7381, "db_id": "course_teach", "final": {"question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "sql": "select name from teacher where hometown != \"little lever urban district\"", "source_tables": ["teacher"]}}
{"sample_id": 7375, "db_id": "course_teach", "final": {"question": "What is the total count of teachers?", "sql": "SELECT count(*) FROM teacher", "source_tables": ["teacher"]}}
{"sample_id": 7385, "db_id": "course_teach", "final": {"question": "Where is the youngest teacher from?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "source_tables": ["teacher"]}}
{"sample_id": 7374, "db_id": "course_teach", "final": {"question": "How many teachers are there?", "sql": "SELECT count(*) FROM teacher", "source_tables": ["teacher"]}}
{"sample_id": 7389, "db_id": "course_teach", "final": {"question": "What is the most commmon hometowns for teachers?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["teacher"]}}
{"sample_id": 7410, "db_id": "museum_visit", "final": {"question": "What are the opening year and staff number of the museum named Plaza Museum?", "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "source_tables": ["museum"]}}
{"sample_id": 7419, "db_id": "museum_visit", "final": {"question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "source_tables": ["visitor", "museum", "visit"]}}
{"sample_id": 7405, "db_id": "museum_visit", "final": {"question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "source_tables": ["visitor"]}}
{"sample_id": 7447, "db_id": "wta_1", "final": {"question": "What is the first name and country code of the oldest player?", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "source_tables": ["players"]}}
{"sample_id": 7481, "db_id": "wta_1", "final": {"question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "source_tables": ["players", "matches"]}}
{"sample_id": 7425, "db_id": "wta_1", "final": {"question": "Count the number of matches.", "sql": "SELECT count(*) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 7422, "db_id": "wta_1", "final": {"question": "Find the total number of players.", "sql": "SELECT count(*) FROM players", "source_tables": ["players"]}}
{"sample_id": 7427, "db_id": "wta_1", "final": {"question": "What are the first names and birth dates of players from the USA?", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "source_tables": ["players"]}}
{"sample_id": 7442, "db_id": "wta_1", "final": {"question": "List the number of all matches who played in years of 2013 or 2016.", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "source_tables": ["matches"]}}
{"sample_id": 7457, "db_id": "wta_1", "final": {"question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 7479, "db_id": "wta_1", "final": {"question": "Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "source_tables": ["matches"]}}
{"sample_id": 7456, "db_id": "wta_1", "final": {"question": "Find the name and rank points of the winner who won the most times.", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 7453, "db_id": "wta_1", "final": {"question": "What is the first name and country code of the player with the most tours?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "source_tables": ["players", "rankings"]}}
{"sample_id": 7449, "db_id": "wta_1", "final": {"question": "What are the full names of all players, sorted by birth date?", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "source_tables": ["players"]}}
{"sample_id": 7461, "db_id": "wta_1", "final": {"question": "What are the names of the winner and loser who played in the longest match?", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 7487, "db_id": "battle_death", "final": {"question": "What is maximum and minimum death toll caused each time?", "sql": "SELECT max(killed) ,  min(killed) FROM death", "source_tables": ["death"]}}
{"sample_id": 7489, "db_id": "battle_death", "final": {"question": "What are the death and injury situations caused by the ship with tonnage 't'?", "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "source_tables": ["ship", "death"]}}
{"sample_id": 7498, "db_id": "battle_death", "final": {"question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "source_tables": ["ship", "battle"]}}
{"sample_id": 7527, "db_id": "student_transcripts_tracking", "final": {"question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "source_tables": ["students", "student_enrolment"]}}
{"sample_id": 7574, "db_id": "student_transcripts_tracking", "final": {"question": "Describe the section h.", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "source_tables": ["sections"]}}
{"sample_id": 7544, "db_id": "student_transcripts_tracking", "final": {"question": "Show the date and id of the transcript with at least 2 course results.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "source_tables": ["transcripts", "transcript_contents"]}}
{"sample_id": 7572, "db_id": "student_transcripts_tracking", "final": {"question": "List all the student details in reversed lexicographical order.", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "source_tables": ["students"]}}
{"sample_id": 7528, "db_id": "student_transcripts_tracking", "final": {"question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "source_tables": ["students", "student_enrolment", "degree_programs"]}}
{"sample_id": 7568, "db_id": "student_transcripts_tracking", "final": {"question": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 7513, "db_id": "student_transcripts_tracking", "final": {"question": "How many different degrees are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "source_tables": ["degree_programs"]}}
{"sample_id": 7540, "db_id": "student_transcripts_tracking", "final": {"question": "What's the name of the course with most number of enrollments?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_enrolment_courses"]}}
{"sample_id": 7533, "db_id": "student_transcripts_tracking", "final": {"question": "What is the program id and the summary of the degree that has the most students enrolled?", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 7554, "db_id": "student_transcripts_tracking", "final": {"question": "Which address holds the most number of students currently? List the address id and all lines.", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["students", "addresses"]}}
{"sample_id": 7534, "db_id": "student_transcripts_tracking", "final": {"question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["students", "student_enrolment"]}}
{"sample_id": 7577, "db_id": "student_transcripts_tracking", "final": {"question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "source_tables": ["students", "addresses"]}}
{"sample_id": 7567, "db_id": "student_transcripts_tracking", "final": {"question": "What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcripts", "transcript_contents"]}}
{"sample_id": 7552, "db_id": "student_transcripts_tracking", "final": {"question": "Whose permanent address is different from his or her current address? List his or her first name.", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "source_tables": ["students"]}}
{"sample_id": 7560, "db_id": "student_transcripts_tracking", "final": {"question": "How many transcripts are released?", "sql": "SELECT count(*) FROM Transcripts", "source_tables": ["transcripts"]}}
{"sample_id": 7590, "db_id": "tvshow", "final": {"question": "List the number of different series names and contents in the TV Channel table.", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "source_tables": ["tv_channel"]}}
{"sample_id": 7620, "db_id": "tvshow", "final": {"question": "Find the number of cartoons directed by each of the listed directors.", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "source_tables": ["cartoon"]}}
{"sample_id": 7594, "db_id": "tvshow", "final": {"question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "source_tables": ["tv_channel"]}}
{"sample_id": 7624, "db_id": "tvshow", "final": {"question": "Find the package choice and series name of the TV channel that has high definition TV.", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "source_tables": ["tv_channel"]}}
{"sample_id": 7631, "db_id": "tvshow", "final": {"question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7614, "db_id": "tvshow", "final": {"question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "source_tables": ["tv_series"]}}
{"sample_id": 7593, "db_id": "tvshow", "final": {"question": "What is the content of the series Sky Radio?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "source_tables": ["tv_channel"]}}
{"sample_id": 7605, "db_id": "tvshow", "final": {"question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7637, "db_id": "tvshow", "final": {"question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7592, "db_id": "tvshow", "final": {"question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "source_tables": ["tv_channel"]}}
{"sample_id": 7597, "db_id": "tvshow", "final": {"question": "How many TV Channels use the English language?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "source_tables": ["tv_channel"]}}
{"sample_id": 7600, "db_id": "tvshow", "final": {"question": "List each language and the number of TV Channels using it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "source_tables": ["tv_channel"]}}
{"sample_id": 7651, "db_id": "poker_player", "final": {"question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "source_tables": ["poker_player"]}}
{"sample_id": 7643, "db_id": "poker_player", "final": {"question": "What are the earnings of poker players, ordered descending by value?", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "source_tables": ["poker_player"]}}
{"sample_id": 7676, "db_id": "poker_player", "final": {"question": "List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7650, "db_id": "poker_player", "final": {"question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "source_tables": ["poker_player"]}}
{"sample_id": 7640, "db_id": "poker_player", "final": {"question": "How many poker players are there?", "sql": "SELECT count(*) FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 7663, "db_id": "poker_player", "final": {"question": "Give average earnings of poker players who are taller than 200.", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7653, "db_id": "poker_player", "final": {"question": "Return the names of all the poker players.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7652, "db_id": "poker_player", "final": {"question": "What are the names of poker players?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["people", "poker_player"]}}
{"sample_id": 7683, "db_id": "voter_1", "final": {"question": "What are the maximum and minimum values of area codes?", "sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "source_tables": ["area_code_state"]}}
{"sample_id": 7686, "db_id": "voter_1", "final": {"question": "What are the distinct states and create time of all votes?", "sql": "SELECT DISTINCT state ,  created FROM votes", "source_tables": ["votes"]}}
{"sample_id": 7685, "db_id": "voter_1", "final": {"question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "source_tables": ["contestants"]}}
{"sample_id": 7708, "db_id": "world_1", "final": {"question": "Give me Brazil\u2019s population and life expectancies.", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "source_tables": ["country"]}}
{"sample_id": 7718, "db_id": "world_1", "final": {"question": "Give the average life expectancy for countries in Africa which are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "source_tables": ["country"]}}
{"sample_id": 7745, "db_id": "world_1", "final": {"question": "What are the regions that use English or Dutch?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7773, "db_id": "world_1", "final": {"question": "What are the country codes of countries where people use languages other than English?", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "source_tables": ["countrylanguage"]}}
{"sample_id": 7796, "db_id": "world_1", "final": {"question": "Return the names of the 3 most populated countries.", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7723, "db_id": "world_1", "final": {"question": "What is the average GNP and total population in all nations whose government is US territory?", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "source_tables": ["country"]}}
{"sample_id": 7762, "db_id": "world_1", "final": {"question": "What is the official language used in the country the name of whose head of state is Beatrix.", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7770, "db_id": "world_1", "final": {"question": "What are the Asian countries which have a population larger than that of any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "source_tables": ["country"]}}
{"sample_id": 7724, "db_id": "world_1", "final": {"question": "Give the mean GNP and total population of nations which are considered US territory.", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "source_tables": ["country"]}}
{"sample_id": 7787, "db_id": "world_1", "final": {"question": "Find the number of cities in each district whose population is greater than the average population of cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "source_tables": ["city"]}}
{"sample_id": 7719, "db_id": "world_1", "final": {"question": "What is the total surface area of the continents Asia and Europe?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "source_tables": ["country"]}}
{"sample_id": 7698, "db_id": "world_1", "final": {"question": "How many countries have governments that are republics?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "source_tables": ["country"]}}
{"sample_id": 7739, "db_id": "world_1", "final": {"question": "What are the names of nations speak both English and French?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7734, "db_id": "world_1", "final": {"question": "Give the name of the nation that uses the greatest amount of languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7730, "db_id": "world_1", "final": {"question": "How many languages are spoken in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7786, "db_id": "world_1", "final": {"question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7806, "db_id": "world_1", "final": {"question": "Return the names of cities that have a population between 160000 and 900000 .", "sql": "select name from city where population between 160000 and 900000", "source_tables": ["city"]}}
{"sample_id": 7765, "db_id": "world_1", "final": {"question": "What are the countries that have greater surface area than any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "source_tables": ["country"]}}
{"sample_id": 7776, "db_id": "world_1", "final": {"question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7733, "db_id": "world_1", "final": {"question": "What is name of the country that speaks the largest number of languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7763, "db_id": "world_1", "final": {"question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "source_tables": ["countrylanguage", "country"]}}
{"sample_id": 7795, "db_id": "world_1", "final": {"question": "What are names of countries with the top 3 largest population?", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7804, "db_id": "world_1", "final": {"question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "source_tables": ["country"]}}
{"sample_id": 7756, "db_id": "world_1", "final": {"question": "What are the name, population, and life expectancy of the largest Asian country by land?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 7849, "db_id": "orchestra", "final": {"question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}}
{"sample_id": 7844, "db_id": "orchestra", "final": {"question": "What are the major record formats of orchestras, sorted by their frequency?", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "source_tables": ["orchestra"]}}
{"sample_id": 7820, "db_id": "orchestra", "final": {"question": "Return the names of conductors that do not have the nationality \"USA\".", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "source_tables": ["conductor"]}}
{"sample_id": 7846, "db_id": "orchestra", "final": {"question": "What is the record company used by the greatest number of orchestras?", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["orchestra"]}}
{"sample_id": 7832, "db_id": "orchestra", "final": {"question": "What is the name of the conductor who has worked the greatest number of years?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "source_tables": ["conductor"]}}
{"sample_id": 7847, "db_id": "orchestra", "final": {"question": "List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["performance", "orchestra"]}}
{"sample_id": 7819, "db_id": "orchestra", "final": {"question": "What are the names of conductors whose nationalities are not \"USA\"?", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "source_tables": ["conductor"]}}
{"sample_id": 7824, "db_id": "orchestra", "final": {"question": "Return the average attendance across all shows.", "sql": "SELECT avg(Attendance) FROM SHOW", "source_tables": ["show"]}}
{"sample_id": 7878, "db_id": "network_1", "final": {"question": "What are the names of the high schoolers and how many friends does each have?", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7909, "db_id": "network_1", "final": {"question": "Find the minimum grade of students who have no friends.", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7858, "db_id": "network_1", "final": {"question": "What are the names and grades for each high schooler?", "sql": "SELECT name ,  grade FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 7856, "db_id": "network_1", "final": {"question": "Count the number of high schoolers.", "sql": "SELECT count(*) FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 7867, "db_id": "network_1", "final": {"question": "How many high schoolers are there in grade 9 or 10?", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "source_tables": ["highschooler"]}}
{"sample_id": 7861, "db_id": "network_1", "final": {"question": "What grade is Kyle in?", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "source_tables": ["highschooler"]}}
{"sample_id": 7871, "db_id": "network_1", "final": {"question": "Which grade has the most high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler"]}}
{"sample_id": 7883, "db_id": "network_1", "final": {"question": "Show the names of all of the high schooler Kyle's friends.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7866, "db_id": "network_1", "final": {"question": "What is Kyle's id?", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "source_tables": ["highschooler"]}}
{"sample_id": 7901, "db_id": "network_1", "final": {"question": "Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7864, "db_id": "network_1", "final": {"question": "What are the names of all high schoolers in grade 10?", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "source_tables": ["highschooler"]}}
{"sample_id": 7915, "db_id": "dog_kennels", "final": {"question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7913, "db_id": "dog_kennels", "final": {"question": "What is the average age of the dogs who have gone through any treatments?", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 7945, "db_id": "dog_kennels", "final": {"question": "List pairs of the owner's first name and the dogs's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7973, "db_id": "dog_kennels", "final": {"question": "How many owners temporarily do not have any dogs?", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7926, "db_id": "dog_kennels", "final": {"question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7964, "db_id": "dog_kennels", "final": {"question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "source_tables": ["professionals"]}}
{"sample_id": 7950, "db_id": "dog_kennels", "final": {"question": "Find the first names of owners living in Virginia and the names of dogs they own.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7975, "db_id": "dog_kennels", "final": {"question": "How many professionals did not operate any treatment on dogs?", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 7943, "db_id": "dog_kennels", "final": {"question": "List each owner's first name, last name, and the size of his for her dog.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["dogs", "owners"]}}
{"sample_id": 7920, "db_id": "dog_kennels", "final": {"question": "Find the first names that are used for professionals or owners but are not used as dog names.", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "source_tables": ["professionals", "dogs", "owners"]}}
{"sample_id": 7966, "db_id": "dog_kennels", "final": {"question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "source_tables": ["owners"]}}
{"sample_id": 7983, "db_id": "dog_kennels", "final": {"question": "How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 7980, "db_id": "dog_kennels", "final": {"question": "Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7955, "db_id": "dog_kennels", "final": {"question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "source_tables": ["professionals"]}}
{"sample_id": 7963, "db_id": "dog_kennels", "final": {"question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "source_tables": ["professionals"]}}
{"sample_id": 7967, "db_id": "dog_kennels", "final": {"question": "How many dogs have an age below the average?", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "source_tables": ["dogs"]}}
{"sample_id": 7995, "db_id": "singer", "final": {"question": "List the name of singers in ascending order of net worth.", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "source_tables": ["singer"]}}
{"sample_id": 7998, "db_id": "singer", "final": {"question": "What are the birth years and citizenships of the singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "source_tables": ["singer"]}}
{"sample_id": 8018, "db_id": "singer", "final": {"question": "For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["singer", "song"]}}
{"sample_id": 7993, "db_id": "singer", "final": {"question": "How many singers are there?", "sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}}
{"sample_id": 8015, "db_id": "singer", "final": {"question": "Show the names of singers that have more than one song.", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "source_tables": ["singer", "song"]}}
{"sample_id": 8010, "db_id": "singer", "final": {"question": "For each citizenship, what is the maximum net worth?", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}}
