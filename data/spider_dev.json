{"sample_id": 12, "db_id": "department_management", "final": {"question": "What are the distinct ages of the heads who are acting?", "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'", "source_tables": ["management", "head"]}}
{"sample_id": 13, "db_id": "department_management", "final": {"question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.", "sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'", "source_tables": ["department", "management", "head"]}}
{"sample_id": 14, "db_id": "department_management", "final": {"question": "Which department has more than 1 head at a time? List the id, name and the number of heads.", "sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1", "source_tables": ["department", "management"]}}
{"sample_id": 15, "db_id": "department_management", "final": {"question": "Which head's name has the substring 'Ha'? List the id and name.", "sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'", "source_tables": ["head"]}}
{"sample_id": 48, "db_id": "farm", "final": {"question": "List the official names of cities that have not held any competition.", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["farm_competition", "city"]}}
{"sample_id": 49, "db_id": "farm", "final": {"question": "What are the official names of cities that have not hosted a farm competition?", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["farm_competition", "city"]}}
{"sample_id": 50, "db_id": "farm", "final": {"question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "source_tables": ["city"]}}
{"sample_id": 51, "db_id": "farm", "final": {"question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "source_tables": ["city"]}}
{"sample_id": 52, "db_id": "farm", "final": {"question": "Find the official names of cities with population bigger than 1500 or smaller than 500.", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "source_tables": ["city"]}}
{"sample_id": 53, "db_id": "farm", "final": {"question": "What are the official names of cities that have population over 1500 or less than 500?", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "source_tables": ["city"]}}
{"sample_id": 54, "db_id": "farm", "final": {"question": "Show the census ranking of cities whose status are not \"Village\".", "sql": "SELECT Census_Ranking FROM city WHERE Status !=  'Village'", "source_tables": ["city"]}}
{"sample_id": 55, "db_id": "farm", "final": {"question": "What are the census rankings of cities that do not have the status \"Village\"?", "sql": "SELECT Census_Ranking FROM city WHERE Status !=  'Village'", "source_tables": ["city"]}}
{"sample_id": 98, "db_id": "student_assessment", "final": {"question": "What are the first names of the people in alphabetical order?", "sql": "SELECT first_name FROM people ORDER BY first_name", "source_tables": ["people"]}}
{"sample_id": 99, "db_id": "student_assessment", "final": {"question": "What are the id of students who registered courses or attended courses?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 100, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who either registered or attended a course?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 101, "db_id": "student_assessment", "final": {"question": "Find the id of courses which are registered or attended by student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 102, "db_id": "student_assessment", "final": {"question": "What are the ids of the courses that are registered or attended by the student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 103, "db_id": "student_assessment", "final": {"question": "What are all info of students who registered courses but not attended courses?", "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 104, "db_id": "student_assessment", "final": {"question": "What are all details of the students who registered but did not attend any course?", "sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 105, "db_id": "student_assessment", "final": {"question": "List the id of students who registered course statistics in the order of registration date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date", "source_tables": ["student_course_registrations", "courses"]}}
{"sample_id": 106, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who registered course statistics by order of registration date?", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date", "source_tables": ["student_course_registrations", "courses"]}}
{"sample_id": 107, "db_id": "student_assessment", "final": {"question": "List the id of students who attended  statistics courses in the order of attendance date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.date_of_attendance", "source_tables": ["student_course_attendance", "courses"]}}
{"sample_id": 108, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.", "sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.date_of_attendance", "source_tables": ["student_course_attendance", "courses"]}}
{"sample_id": 192, "db_id": "bike_1", "final": {"question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "source_tables": ["station", "trip"]}}
{"sample_id": 193, "db_id": "bike_1", "final": {"question": "List all the distinct stations from which a trip of duration below 100 started.", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "source_tables": ["trip"]}}
{"sample_id": 194, "db_id": "bike_1", "final": {"question": "What are all the different start station names for a trip that lasted less than 100?", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "source_tables": ["trip"]}}
{"sample_id": 195, "db_id": "bike_1", "final": {"question": "Find all the zip codes in which the max dew point have never reached 70.", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "source_tables": ["weather"]}}
{"sample_id": 196, "db_id": "bike_1", "final": {"question": "What are all the different zip codes that have a maximum dew point that was always below 70?", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "source_tables": ["weather"]}}
{"sample_id": 197, "db_id": "bike_1", "final": {"question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "source_tables": ["trip"]}}
{"sample_id": 198, "db_id": "bike_1", "final": {"question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "source_tables": ["trip"]}}
{"sample_id": 199, "db_id": "bike_1", "final": {"question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"]}}
{"sample_id": 200, "db_id": "bike_1", "final": {"question": "What are the dates that have an average sea level pressure between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"]}}
{"sample_id": 201, "db_id": "bike_1", "final": {"question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "source_tables": ["weather"]}}
{"sample_id": 202, "db_id": "bike_1", "final": {"question": "What are the days that had the smallest temperature range, and what was that range?", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "source_tables": ["weather"]}}
{"sample_id": 203, "db_id": "bike_1", "final": {"question": "What are the id and name of the stations that have ever had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "source_tables": ["station", "status"]}}
{"sample_id": 204, "db_id": "bike_1", "final": {"question": "What are the different ids and names of the stations that have had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "source_tables": ["station", "status"]}}
{"sample_id": 205, "db_id": "bike_1", "final": {"question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "source_tables": ["trip", "weather"]}}
{"sample_id": 206, "db_id": "bike_1", "final": {"question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "source_tables": ["trip", "weather"]}}
{"sample_id": 207, "db_id": "bike_1", "final": {"question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "sql": "SELECT name FROM station WHERE city  =  'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "source_tables": ["station", "trip"]}}
{"sample_id": 208, "db_id": "bike_1", "final": {"question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "sql": "SELECT name FROM station WHERE city  =  'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "source_tables": ["station", "trip"]}}
{"sample_id": 209, "db_id": "bike_1", "final": {"question": "How many trips started from Mountain View city and ended at Palo Alto city?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  'Mountain View' AND T3.city  =  'Palo Alto'", "source_tables": ["station", "trip"]}}
{"sample_id": 210, "db_id": "bike_1", "final": {"question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  'Mountain View' AND T3.city  =  'Palo Alto'", "source_tables": ["station", "trip"]}}
{"sample_id": 211, "db_id": "bike_1", "final": {"question": "What is the average latitude and longitude of the starting points of all trips?", "sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "source_tables": ["station", "trip"]}}
{"sample_id": 212, "db_id": "bike_1", "final": {"question": "What is the average latitude and longitude of all starting stations for the trips?", "sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "source_tables": ["station", "trip"]}}
{"sample_id": 229, "db_id": "book_2", "final": {"question": "List the titles of books that are not published.", "sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)", "source_tables": ["publication", "book"]}}
{"sample_id": 230, "db_id": "book_2", "final": {"question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000", "source_tables": ["publication"]}}
{"sample_id": 231, "db_id": "book_2", "final": {"question": "What is the number of distinct publication dates?", "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "source_tables": ["publication"]}}
{"sample_id": 232, "db_id": "book_2", "final": {"question": "How many distinct publication dates are there in our record?", "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "source_tables": ["publication"]}}
{"sample_id": 233, "db_id": "book_2", "final": {"question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"", "sql": "SELECT Price FROM publication WHERE Publisher  =  'Person' OR Publisher  =  'Wiley'", "source_tables": ["publication"]}}
{"sample_id": 266, "db_id": "musical", "final": {"question": "List the nominees that have been nominated more than two musicals.", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "source_tables": ["musical"]}}
{"sample_id": 267, "db_id": "musical", "final": {"question": "Who are the nominees who have been nominated more than two times?", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "source_tables": ["musical"]}}
{"sample_id": 268, "db_id": "musical", "final": {"question": "List the name of musicals that do not have actors.", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "source_tables": ["musical", "actor"]}}
{"sample_id": 269, "db_id": "musical", "final": {"question": "What are the names of musicals who have no actors?", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "source_tables": ["musical", "actor"]}}
{"sample_id": 270, "db_id": "musical", "final": {"question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".", "sql": "SELECT Nominee FROM musical WHERE Award  =  'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award  =  'Drama Desk Award'", "source_tables": ["musical"]}}
{"sample_id": 271, "db_id": "musical", "final": {"question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?", "sql": "SELECT Nominee FROM musical WHERE Award  =  'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award  =  'Drama Desk Award'", "source_tables": ["musical"]}}
{"sample_id": 272, "db_id": "musical", "final": {"question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "sql": "SELECT Nominee FROM musical WHERE Award  =  'Tony Award' OR Award  =  'Cleavant Derricks'", "source_tables": ["musical"]}}
{"sample_id": 273, "db_id": "musical", "final": {"question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?", "sql": "SELECT Nominee FROM musical WHERE Award  =  'Tony Award' OR Award  =  'Cleavant Derricks'", "source_tables": ["musical"]}}
{"sample_id": 295, "db_id": "twitter_1", "final": {"question": "Find the name of each user and number of tweets tweeted by each of them.", "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 296, "db_id": "twitter_1", "final": {"question": "Find the name and partition id for users who tweeted less than twice.", "sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 297, "db_id": "twitter_1", "final": {"question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 298, "db_id": "twitter_1", "final": {"question": "Find the average number of followers for the users who do not have any tweet.", "sql": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 299, "db_id": "twitter_1", "final": {"question": "Find the average number of followers for the users who had some tweets.", "sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 300, "db_id": "twitter_1", "final": {"question": "Find the maximum and total number of followers of all users.", "sql": "SELECT max(followers) ,  sum(followers) FROM user_profiles", "source_tables": ["user_profiles"]}}
{"sample_id": 334, "db_id": "product_catalog", "final": {"question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "source_tables": ["catalog_contents_additional_attributes", "attribute_definitions"]}}
{"sample_id": 335, "db_id": "product_catalog", "final": {"question": "Find the name and capacity of products with price greater than 700 (in USD).", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "source_tables": ["catalog_contents"]}}
{"sample_id": 336, "db_id": "product_catalog", "final": {"question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "source_tables": ["catalog_contents"]}}
{"sample_id": 337, "db_id": "product_catalog", "final": {"question": "Find the dates on which more than one revisions were made.", "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "source_tables": ["catalogs"]}}
{"sample_id": 338, "db_id": "product_catalog", "final": {"question": "On which days more than one revisions were made on catalogs.", "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "source_tables": ["catalogs"]}}
{"sample_id": 339, "db_id": "product_catalog", "final": {"question": "How many products are there in the records?", "sql": "SELECT count(*) FROM catalog_contents", "source_tables": ["catalog_contents"]}}
{"sample_id": 340, "db_id": "product_catalog", "final": {"question": "Find the total number of catalog contents.", "sql": "SELECT count(*) FROM catalog_contents", "source_tables": ["catalog_contents"]}}
{"sample_id": 341, "db_id": "product_catalog", "final": {"question": "Name all the products with next entry ID greater than 8.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "source_tables": ["catalog_contents"]}}
{"sample_id": 342, "db_id": "product_catalog", "final": {"question": "What are the catalog entry names of the products with next entry ID above 8?", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "source_tables": ["catalog_contents"]}}
{"sample_id": 419, "db_id": "flight_1", "final": {"question": "How many employees have certificate.", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "source_tables": ["certificate"]}}
{"sample_id": 420, "db_id": "flight_1", "final": {"question": "What is the count of distinct employees with certificates?", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "source_tables": ["certificate"]}}
{"sample_id": 421, "db_id": "flight_1", "final": {"question": "Show ids for all employees who don't have a certificate.", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "source_tables": ["employee", "certificate"]}}
{"sample_id": 422, "db_id": "flight_1", "final": {"question": "What are the ids of all employees that don't have certificates?", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "source_tables": ["employee", "certificate"]}}
{"sample_id": 423, "db_id": "flight_1", "final": {"question": "Show names for all aircrafts of which John Williams has certificates.", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  'John Williams'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 424, "db_id": "flight_1", "final": {"question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  'John Williams'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 425, "db_id": "flight_1", "final": {"question": "Show names for all employees who have certificate of Boeing 737-800.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 426, "db_id": "flight_1", "final": {"question": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 427, "db_id": "flight_1", "final": {"question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Airbus A340-300'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 428, "db_id": "flight_1", "final": {"question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Airbus A340-300'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 429, "db_id": "flight_1", "final": {"question": "Show names for all employees who do not have certificate of Boeing 737-800.", "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 430, "db_id": "flight_1", "final": {"question": "What are the names of all employees who are not certified to fly Boeing 737-800s?", "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 431, "db_id": "flight_1", "final": {"question": "Show the name of aircraft which fewest people have its certificate.", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["aircraft", "certificate"]}}
{"sample_id": 432, "db_id": "flight_1", "final": {"question": "What are the names of the aircraft that the least people are certified to fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["aircraft", "certificate"]}}
{"sample_id": 433, "db_id": "flight_1", "final": {"question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "source_tables": ["aircraft", "certificate"]}}
{"sample_id": 434, "db_id": "flight_1", "final": {"question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "source_tables": ["aircraft", "certificate"]}}
{"sample_id": 435, "db_id": "flight_1", "final": {"question": "what is the salary and name of the employee who has the most number of aircraft certificates?", "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "certificate"]}}
{"sample_id": 436, "db_id": "flight_1", "final": {"question": "What is the salaray and name of the employee that is certified to fly the most planes?", "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "certificate"]}}
{"sample_id": 437, "db_id": "flight_1", "final": {"question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 438, "db_id": "flight_1", "final": {"question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 517, "db_id": "allergy_1", "final": {"question": "Show all allergy type with number of students affected.", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "source_tables": ["has_allergy", "allergy_type"]}}
{"sample_id": 518, "db_id": "allergy_1", "final": {"question": "How many students are affected by each allergy type?", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "source_tables": ["has_allergy", "allergy_type"]}}
{"sample_id": 519, "db_id": "allergy_1", "final": {"question": "Find the last name and age of the student who has allergy to both milk and cat.", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 520, "db_id": "allergy_1", "final": {"question": "What are the last names and ages of the students who are allergic to milk and cat?", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 521, "db_id": "allergy_1", "final": {"question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  'Lisa' ORDER BY T1.Allergy", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 522, "db_id": "allergy_1", "final": {"question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  'Lisa' ORDER BY T1.Allergy", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 523, "db_id": "allergy_1", "final": {"question": "Find the first name and gender of the student who has allergy to milk but not cat.", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 524, "db_id": "allergy_1", "final": {"question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 525, "db_id": "allergy_1", "final": {"question": "Find the average age of the students who have allergies with food and animal types.", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal')", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 526, "db_id": "allergy_1", "final": {"question": "How old are the students with allergies to food and animal types on average?", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal')", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 527, "db_id": "allergy_1", "final": {"question": "List the first and last name of the students who do not have any food type allergy.", "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 528, "db_id": "allergy_1", "final": {"question": "What is the full name of each student who is not allergic to any type of food.", "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 529, "db_id": "allergy_1", "final": {"question": "Find the number of male (sex is 'M') students who have some food type allery.", "sql": "SELECT count(*) FROM Student WHERE sex  =  'M' AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 530, "db_id": "allergy_1", "final": {"question": "How many male students (sex is 'M') are allergic to any type of food?", "sql": "SELECT count(*) FROM Student WHERE sex  =  'M' AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food')", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 531, "db_id": "allergy_1", "final": {"question": "Find the different first names and cities of the students who have allergy to milk or cat.", "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  'Milk' OR T2.Allergy  =  'Cat'", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 532, "db_id": "allergy_1", "final": {"question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?", "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  'Milk' OR T2.Allergy  =  'Cat'", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 533, "db_id": "allergy_1", "final": {"question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.", "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' OR T2.allergytype  =  'animal')", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 534, "db_id": "allergy_1", "final": {"question": "How many students are over 18 and do not have allergy to food type or animal type?", "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' OR T2.allergytype  =  'animal')", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 535, "db_id": "allergy_1", "final": {"question": "Find the first name and major of the students who are not allegry to soy.", "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Soy')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 536, "db_id": "allergy_1", "final": {"question": "What are the first name and major of the students who are able to consume soy?", "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Soy')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 626, "db_id": "store_1", "final": {"question": "What is the name of all tracks in the album named Balls to the Wall?", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = 'Balls to the Wall';", "source_tables": ["albums", "tracks"]}}
{"sample_id": 627, "db_id": "store_1", "final": {"question": "List title of albums have the number of tracks greater than 10.", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "source_tables": ["albums", "tracks"]}}
{"sample_id": 628, "db_id": "store_1", "final": {"question": "What are the names of the albums that have more than 10 tracks?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "source_tables": ["albums", "tracks"]}}
{"sample_id": 629, "db_id": "store_1", "final": {"question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file';", "source_tables": ["genres", "media_types", "tracks"]}}
{"sample_id": 630, "db_id": "store_1", "final": {"question": "What are the names of all Rock tracks that are stored on MPEG audio files?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file';", "source_tables": ["genres", "media_types", "tracks"]}}
{"sample_id": 631, "db_id": "store_1", "final": {"question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file';", "source_tables": ["genres", "media_types", "tracks"]}}
{"sample_id": 632, "db_id": "store_1", "final": {"question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file';", "source_tables": ["genres", "media_types", "tracks"]}}
{"sample_id": 633, "db_id": "store_1", "final": {"question": "List the name of tracks belongs to genre Rock or genre Jazz.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'", "source_tables": ["genres", "tracks"]}}
{"sample_id": 634, "db_id": "store_1", "final": {"question": "What are the names of the tracks that are Rock or Jazz songs?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'", "source_tables": ["genres", "tracks"]}}
{"sample_id": 635, "db_id": "store_1", "final": {"question": "List the name of all tracks in the playlists of Movies.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies';", "source_tables": ["playlist_tracks", "tracks", "playlists"]}}
{"sample_id": 636, "db_id": "store_1", "final": {"question": "What are the names of all tracks that are on playlists titled Movies?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies';", "source_tables": ["playlist_tracks", "tracks", "playlists"]}}
{"sample_id": 637, "db_id": "store_1", "final": {"question": "List the name of playlist which has number of tracks greater than 100.", "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "source_tables": ["playlist_tracks", "playlists"]}}
{"sample_id": 638, "db_id": "store_1", "final": {"question": "What are the names of all playlists that have more than 100 tracks?", "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "source_tables": ["playlist_tracks", "playlists"]}}
{"sample_id": 639, "db_id": "store_1", "final": {"question": "List all tracks bought by customer Daan Peeters.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Daan' AND T4.last_name = 'Peeters';", "source_tables": ["customers", "invoices", "tracks", "invoice_lines"]}}
{"sample_id": 640, "db_id": "store_1", "final": {"question": "What are the tracks that Dean Peeters bought?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Daan' AND T4.last_name = 'Peeters';", "source_tables": ["customers", "invoices", "tracks", "invoice_lines"]}}
{"sample_id": 641, "db_id": "store_1", "final": {"question": "How much is the track Fast As a Shark?", "sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';", "source_tables": ["tracks"]}}
{"sample_id": 642, "db_id": "store_1", "final": {"question": "What is the unit price of the tune \"Fast As a Shark\"?", "sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';", "source_tables": ["tracks"]}}
{"sample_id": 643, "db_id": "store_1", "final": {"question": "Find the name of tracks which are in Movies playlist but not in music playlist.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["playlist_tracks", "tracks", "playlists"]}}
{"sample_id": 644, "db_id": "store_1", "final": {"question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["playlist_tracks", "tracks", "playlists"]}}
{"sample_id": 645, "db_id": "store_1", "final": {"question": "Find the name of tracks which are in both Movies and music playlists.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["playlist_tracks", "tracks", "playlists"]}}
{"sample_id": 646, "db_id": "store_1", "final": {"question": "What are the names of all the tracks that are in both the Movies and music playlists?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "source_tables": ["playlist_tracks", "tracks", "playlists"]}}
{"sample_id": 647, "db_id": "store_1", "final": {"question": "Find number of tracks in each genre?", "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "source_tables": ["genres", "tracks"]}}
{"sample_id": 648, "db_id": "store_1", "final": {"question": "How many tracks are in each genre?", "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "source_tables": ["genres", "tracks"]}}
{"sample_id": 663, "db_id": "journal_committee", "final": {"question": "Show the names of editors that are on at least two journal committees.", "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2", "source_tables": ["editor", "journal_committee"]}}
{"sample_id": 664, "db_id": "journal_committee", "final": {"question": "List the names of editors that are not on any journal committee.", "sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)", "source_tables": ["editor", "journal_committee"]}}
{"sample_id": 665, "db_id": "journal_committee", "final": {"question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.", "sql": "SELECT date ,  theme ,  sales FROM journal EXCEPT SELECT T1.date ,  T1.theme ,  T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID", "source_tables": ["journal_committee", "journal"]}}
{"sample_id": 666, "db_id": "journal_committee", "final": {"question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?", "sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'", "source_tables": ["journal_committee", "journal"]}}
{"sample_id": 731, "db_id": "customers_card_transactions", "final": {"question": "Show the number of card types.", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "source_tables": ["customers_cards"]}}
{"sample_id": 732, "db_id": "customers_card_transactions", "final": {"question": "How many different card types are there?", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "source_tables": ["customers_cards"]}}
{"sample_id": 733, "db_id": "customers_card_transactions", "final": {"question": "Show all transaction types.", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 734, "db_id": "customers_card_transactions", "final": {"question": "What are the different types of transactions?", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 735, "db_id": "customers_card_transactions", "final": {"question": "Show the number of transaction types.", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 736, "db_id": "customers_card_transactions", "final": {"question": "How many different types of transactions are there?", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 737, "db_id": "customers_card_transactions", "final": {"question": "What is the average and total transaction amount?", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 738, "db_id": "customers_card_transactions", "final": {"question": "Return the average transaction amount, as well as the total amount of all transactions.", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 739, "db_id": "customers_card_transactions", "final": {"question": "Show the card type codes and the number of transactions.", "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "source_tables": ["customers_cards", "financial_transactions"]}}
{"sample_id": 740, "db_id": "customers_card_transactions", "final": {"question": "What are the different card types, and how many transactions have been made with each?", "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "source_tables": ["customers_cards", "financial_transactions"]}}
{"sample_id": 741, "db_id": "customers_card_transactions", "final": {"question": "Show the transaction type and the number of transactions.", "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"]}}
{"sample_id": 742, "db_id": "customers_card_transactions", "final": {"question": "What are the different transaction types, and how many transactions of each have taken place?", "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"]}}
{"sample_id": 743, "db_id": "customers_card_transactions", "final": {"question": "What is the transaction type that has processed the greatest total amount in transactions?", "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "source_tables": ["financial_transactions"]}}
{"sample_id": 744, "db_id": "customers_card_transactions", "final": {"question": "Return the type of transaction with the highest total amount.", "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "source_tables": ["financial_transactions"]}}
{"sample_id": 745, "db_id": "customers_card_transactions", "final": {"question": "Show the account id and the number of transactions for each account", "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "source_tables": ["financial_transactions"]}}
{"sample_id": 746, "db_id": "customers_card_transactions", "final": {"question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?", "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "source_tables": ["financial_transactions"]}}
{"sample_id": 780, "db_id": "race_track", "final": {"question": "What are the names of different tracks, and how many races has each had?", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "source_tables": ["race", "track"]}}
{"sample_id": 781, "db_id": "race_track", "final": {"question": "Show the name of track with most number of races.", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["race", "track"]}}
{"sample_id": 782, "db_id": "race_track", "final": {"question": "What is the name of the track that has had the greatest number of races?", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["race", "track"]}}
{"sample_id": 783, "db_id": "race_track", "final": {"question": "Show the name and date for each race and its track name.", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "source_tables": ["race", "track"]}}
{"sample_id": 784, "db_id": "race_track", "final": {"question": "What are the names and dates of races, and the names of the tracks where they are held?", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "source_tables": ["race", "track"]}}
{"sample_id": 785, "db_id": "race_track", "final": {"question": "Show the name and location of track with 1 race.", "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "source_tables": ["race", "track"]}}
{"sample_id": 786, "db_id": "race_track", "final": {"question": "What are the names and locations of tracks that have had exactly 1 race?", "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "source_tables": ["race", "track"]}}
{"sample_id": 787, "db_id": "race_track", "final": {"question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "source_tables": ["track"]}}
{"sample_id": 788, "db_id": "race_track", "final": {"question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "source_tables": ["track"]}}
{"sample_id": 803, "db_id": "coffee_shop", "final": {"question": "What are the id and address of the shops which have a happy hour in May?", "sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'", "source_tables": ["happy_hour", "shop"]}}
{"sample_id": 804, "db_id": "coffee_shop", "final": {"question": "which shop has happy hour most frequently? List its id and number of happy hours.", "sql": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["happy_hour"]}}
{"sample_id": 805, "db_id": "coffee_shop", "final": {"question": "Which month has the most happy hours?", "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1", "source_tables": ["happy_hour"]}}
{"sample_id": 806, "db_id": "coffee_shop", "final": {"question": "Which months have more than 2 happy hours?", "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2", "source_tables": ["happy_hour"]}}
{"sample_id": 874, "db_id": "chinook_1", "final": {"question": "What are all the album titles, in alphabetical order?", "sql": "SELECT Title FROM ALBUM ORDER BY Title", "source_tables": ["album"]}}
{"sample_id": 875, "db_id": "chinook_1", "final": {"question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "source_tables": ["artist", "album"]}}
{"sample_id": 876, "db_id": "chinook_1", "final": {"question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "source_tables": ["artist", "album"]}}
{"sample_id": 877, "db_id": "chinook_1", "final": {"question": "Find the names of artists that do not have any albums.", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "source_tables": ["artist", "album"]}}
{"sample_id": 878, "db_id": "chinook_1", "final": {"question": "What are the names of artists who have not released any albums?", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "source_tables": ["artist", "album"]}}
{"sample_id": 879, "db_id": "chinook_1", "final": {"question": "What is the average unit price of rock tracks?", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock'", "source_tables": ["genre", "track"]}}
{"sample_id": 880, "db_id": "chinook_1", "final": {"question": "Find the average unit price of tracks from the Rock genre.", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock'", "source_tables": ["genre", "track"]}}
{"sample_id": 881, "db_id": "chinook_1", "final": {"question": "What are the duration of the longest and shortest pop tracks in milliseconds?", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Pop'", "source_tables": ["genre", "track"]}}
{"sample_id": 882, "db_id": "chinook_1", "final": {"question": "Find the maximum and minimum millisecond lengths of pop tracks.", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Pop'", "source_tables": ["genre", "track"]}}
{"sample_id": 883, "db_id": "chinook_1", "final": {"question": "What are the birth dates of employees living in Edmonton?", "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  'Edmonton'", "source_tables": ["employee"]}}
{"sample_id": 884, "db_id": "chinook_1", "final": {"question": "Find the birth dates corresponding to employees who live in the city of Edmonton.", "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  'Edmonton'", "source_tables": ["employee"]}}
{"sample_id": 885, "db_id": "chinook_1", "final": {"question": "What are the distinct unit prices of all tracks?", "sql": "SELECT distinct(UnitPrice) FROM TRACK", "source_tables": ["track"]}}
{"sample_id": 886, "db_id": "chinook_1", "final": {"question": "Find the distinct unit prices for tracks.", "sql": "SELECT distinct(UnitPrice) FROM TRACK", "source_tables": ["track"]}}
{"sample_id": 887, "db_id": "chinook_1", "final": {"question": "How many artists do not have any album?", "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "source_tables": ["artist", "album"]}}
{"sample_id": 888, "db_id": "chinook_1", "final": {"question": "Cound the number of artists who have not released an album.", "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "source_tables": ["artist", "album"]}}
{"sample_id": 889, "db_id": "chinook_1", "final": {"question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?", "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "source_tables": ["genre", "album", "track"]}}
{"sample_id": 890, "db_id": "chinook_1", "final": {"question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.", "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "source_tables": ["genre", "album", "track"]}}
{"sample_id": 924, "db_id": "insurance_fnol", "final": {"question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'Close a policy' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'New policy application'", "source_tables": ["first_notification_of_loss", "customers", "services"]}}
{"sample_id": 925, "db_id": "insurance_fnol", "final": {"question": "Find the IDs of customers whose name contains \"Diana\".", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'", "source_tables": ["customers"]}}
{"sample_id": 926, "db_id": "insurance_fnol", "final": {"question": "What are the IDs of customers who have \"Diana\" in part of their names?", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'", "source_tables": ["customers"]}}
{"sample_id": 927, "db_id": "insurance_fnol", "final": {"question": "What are the maximum and minimum settlement amount on record?", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "source_tables": ["settlements"]}}
{"sample_id": 928, "db_id": "insurance_fnol", "final": {"question": "Find the maximum and minimum settlement amount.", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "source_tables": ["settlements"]}}
{"sample_id": 929, "db_id": "insurance_fnol", "final": {"question": "List all the customers in increasing order of IDs.", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "source_tables": ["customers"]}}
{"sample_id": 930, "db_id": "insurance_fnol", "final": {"question": "What is the ordered list of customer ids?", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "source_tables": ["customers"]}}
{"sample_id": 931, "db_id": "insurance_fnol", "final": {"question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE '%Diana%'", "source_tables": ["customers", "customers_policies"]}}
{"sample_id": 932, "db_id": "insurance_fnol", "final": {"question": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE '%Diana%'", "source_tables": ["customers", "customers_policies"]}}
{"sample_id": 968, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?", "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", "source_tables": ["medicine_enzyme_interaction", "medicine"]}}
{"sample_id": 969, "db_id": "medicine_enzyme_interaction", "final": {"question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "source_tables": ["medicine_enzyme_interaction", "enzyme", "medicine"]}}
{"sample_id": 970, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "source_tables": ["medicine_enzyme_interaction", "enzyme", "medicine"]}}
{"sample_id": 971, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many distinct FDA approval statuses are there for the medicines?", "sql": "SELECT count(DISTINCT FDA_approved) FROM medicine", "source_tables": ["medicine"]}}
{"sample_id": 972, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many different FDA approval statuses exist for medicines?", "sql": "SELECT count(DISTINCT FDA_approved) FROM medicine", "source_tables": ["medicine"]}}
{"sample_id": 973, "db_id": "medicine_enzyme_interaction", "final": {"question": "Which enzyme names have the substring \"ALA\"?", "sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'", "source_tables": ["enzyme"]}}
{"sample_id": 974, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the names of enzymes that include the string 'ALA'?", "sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'", "source_tables": ["enzyme"]}}
{"sample_id": 975, "db_id": "medicine_enzyme_interaction", "final": {"question": "find the number of medicines offered by each trade.", "sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "source_tables": ["medicine"]}}
{"sample_id": 976, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many medicines are offered by each trade name?", "sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "source_tables": ["medicine"]}}
{"sample_id": 1013, "db_id": "university_basketball", "final": {"question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 1014, "db_id": "university_basketball", "final": {"question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 1015, "db_id": "university_basketball", "final": {"question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 1016, "db_id": "university_basketball", "final": {"question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 1017, "db_id": "university_basketball", "final": {"question": "What is the maximum enrollment across all schools?", "sql": "SELECT max(Enrollment) FROM university", "source_tables": ["university"]}}
{"sample_id": 1018, "db_id": "university_basketball", "final": {"question": "Return the maximum enrollment across all schools.", "sql": "SELECT max(Enrollment) FROM university", "source_tables": ["university"]}}
{"sample_id": 1019, "db_id": "university_basketball", "final": {"question": "List all information regarding the basketball match.", "sql": "SELECT * FROM basketball_match", "source_tables": ["basketball_match"]}}
{"sample_id": 1020, "db_id": "university_basketball", "final": {"question": "What is all the information about the basketball match?", "sql": "SELECT * FROM basketball_match", "source_tables": ["basketball_match"]}}
{"sample_id": 1021, "db_id": "university_basketball", "final": {"question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "source_tables": ["basketball_match"]}}
{"sample_id": 1022, "db_id": "university_basketball", "final": {"question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "source_tables": ["basketball_match"]}}
{"sample_id": 1046, "db_id": "phone_1", "final": {"question": "How many models do not have the wifi function?", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "source_tables": ["chip_model"]}}
{"sample_id": 1047, "db_id": "phone_1", "final": {"question": "Count the number of chip model that do not have wifi.", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "source_tables": ["chip_model"]}}
{"sample_id": 1048, "db_id": "phone_1", "final": {"question": "List all the model names sorted by their launch year.", "sql": "SELECT model_name FROM chip_model ORDER BY launch_year", "source_tables": ["chip_model"]}}
{"sample_id": 1049, "db_id": "phone_1", "final": {"question": "Find the average ram mib size of the chip models that are never used by any phone.", "sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)", "source_tables": ["chip_model", "phone"]}}
{"sample_id": 1050, "db_id": "phone_1", "final": {"question": "Find the names of the chip models that are not used by any phone with full accreditation type.", "sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'", "source_tables": ["chip_model", "phone"]}}
{"sample_id": 1051, "db_id": "phone_1", "final": {"question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.", "sql": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'", "source_tables": ["screen_mode", "phone"]}}
{"sample_id": 1098, "db_id": "match_season", "final": {"question": "Show the top 3 most common colleges of players in match seasons.", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "source_tables": ["match_season"]}}
{"sample_id": 1099, "db_id": "match_season", "final": {"question": "What are the three colleges from which the most players are from?", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "source_tables": ["match_season"]}}
{"sample_id": 1100, "db_id": "match_season", "final": {"question": "Show the name of colleges that have at least two players.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "source_tables": ["match_season"]}}
{"sample_id": 1101, "db_id": "match_season", "final": {"question": "What are the names of all colleges that have two or more players?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "source_tables": ["match_season"]}}
{"sample_id": 1102, "db_id": "match_season", "final": {"question": "Show the name of colleges that have at least two players in descending alphabetical order.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "source_tables": ["match_season"]}}
{"sample_id": 1103, "db_id": "match_season", "final": {"question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "source_tables": ["match_season"]}}
{"sample_id": 1104, "db_id": "match_season", "final": {"question": "What are the names of teams that do no have match season record?", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "source_tables": ["match_season", "team"]}}
{"sample_id": 1105, "db_id": "match_season", "final": {"question": "Return the names of teams that have no match season record.", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "source_tables": ["match_season", "team"]}}
{"sample_id": 1106, "db_id": "match_season", "final": {"question": "What are the names of countries that have both players with position forward and players with position defender?", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender'", "source_tables": ["match_season", "country"]}}
{"sample_id": 1107, "db_id": "match_season", "final": {"question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  'Defender'", "source_tables": ["match_season", "country"]}}
{"sample_id": 1108, "db_id": "match_season", "final": {"question": "Which college have both players with position midfielder and players with position defender?", "sql": "SELECT College FROM match_season WHERE POSITION  =  'Midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION  =  'Defender'", "source_tables": ["match_season"]}}
{"sample_id": 1109, "db_id": "match_season", "final": {"question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.", "sql": "SELECT College FROM match_season WHERE POSITION  =  'Midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION  =  'Defender'", "source_tables": ["match_season"]}}
{"sample_id": 1142, "db_id": "climbing", "final": {"question": "List the names of mountains that do not have any climber.", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "source_tables": ["mountain", "climber"]}}
{"sample_id": 1143, "db_id": "climbing", "final": {"question": "What are the names of countains that no climber has climbed?", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "source_tables": ["mountain", "climber"]}}
{"sample_id": 1144, "db_id": "climbing", "final": {"question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "source_tables": ["mountain"]}}
{"sample_id": 1145, "db_id": "climbing", "final": {"question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "source_tables": ["mountain"]}}
{"sample_id": 1146, "db_id": "climbing", "final": {"question": "Show the range that has the most number of mountains.", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["mountain"]}}
{"sample_id": 1147, "db_id": "climbing", "final": {"question": "Which range contains the most mountains?", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["mountain"]}}
{"sample_id": 1148, "db_id": "climbing", "final": {"question": "Show the names of mountains with height more than 5000 or prominence more than 1000.", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "source_tables": ["mountain"]}}
{"sample_id": 1149, "db_id": "climbing", "final": {"question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "source_tables": ["mountain"]}}
{"sample_id": 1169, "db_id": "body_builder", "final": {"question": "How many distinct birth places are there?", "sql": "SELECT count(DISTINCT Birth_Place) FROM people", "source_tables": ["people"]}}
{"sample_id": 1170, "db_id": "body_builder", "final": {"question": "How many persons are not body builders?", "sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)", "source_tables": ["people", "body_builder"]}}
{"sample_id": 1171, "db_id": "body_builder", "final": {"question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;", "source_tables": ["people", "body_builder"]}}
{"sample_id": 1172, "db_id": "body_builder", "final": {"question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?", "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE '%January%';", "source_tables": ["people", "body_builder"]}}
{"sample_id": 1173, "db_id": "body_builder", "final": {"question": "What is the minimum snatch score?", "sql": "SELECT min(snatch) FROM body_builder", "source_tables": ["body_builder"]}}
{"sample_id": 1190, "db_id": "election_representative", "final": {"question": "What states have at least two representatives?", "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2", "source_tables": ["representative"]}}
{"sample_id": 1191, "db_id": "election_representative", "final": {"question": "List the names of representatives that have not participated in elections listed here.", "sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)", "source_tables": ["representative", "election"]}}
{"sample_id": 1192, "db_id": "election_representative", "final": {"question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.", "sql": "SELECT Party FROM representative WHERE State  =  'New York' INTERSECT SELECT Party FROM representative WHERE State  =  'Pennsylvania'", "source_tables": ["representative"]}}
{"sample_id": 1193, "db_id": "election_representative", "final": {"question": "How many distinct parties are there for representatives?", "sql": "SELECT count(DISTINCT Party) FROM representative", "source_tables": ["representative"]}}
{"sample_id": 1258, "db_id": "apartment_rentals", "final": {"question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1259, "db_id": "apartment_rentals", "final": {"question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1260, "db_id": "apartment_rentals", "final": {"question": "Show the most common apartment type code.", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1261, "db_id": "apartment_rentals", "final": {"question": "Which apartment type code appears the most often?", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1262, "db_id": "apartment_rentals", "final": {"question": "Show the most common apartment type code among apartments with more than 1 bathroom.", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1263, "db_id": "apartment_rentals", "final": {"question": "Which apartment type code is the most common among apartments with more than one bathroom?", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1264, "db_id": "apartment_rentals", "final": {"question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"]}}
{"sample_id": 1265, "db_id": "apartment_rentals", "final": {"question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"]}}
{"sample_id": 1266, "db_id": "apartment_rentals", "final": {"question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.", "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "source_tables": ["guests"]}}
{"sample_id": 1267, "db_id": "apartment_rentals", "final": {"question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.", "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "source_tables": ["guests"]}}
{"sample_id": 1268, "db_id": "apartment_rentals", "final": {"question": "How many apartments do not have any facility?", "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "source_tables": ["apartment_facilities", "apartments"]}}
{"sample_id": 1269, "db_id": "apartment_rentals", "final": {"question": "Find the number of apartments that have no facility.", "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "source_tables": ["apartment_facilities", "apartments"]}}
{"sample_id": 1270, "db_id": "apartment_rentals", "final": {"question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"", "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional'", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1271, "db_id": "apartment_rentals", "final": {"question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.", "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  'Provisional'", "source_tables": ["apartments", "apartment_bookings"]}}
{"sample_id": 1272, "db_id": "apartment_rentals", "final": {"question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.", "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "source_tables": ["apartments", "view_unit_status"]}}
{"sample_id": 1273, "db_id": "apartment_rentals", "final": {"question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.", "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "source_tables": ["apartments", "view_unit_status"]}}
{"sample_id": 1289, "db_id": "game_injury", "final": {"question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.", "sql": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id", "source_tables": ["injury_accident", "stadium", "game"]}}
{"sample_id": 1290, "db_id": "game_injury", "final": {"question": "Which stadium name contains the substring \"Bank\"?", "sql": "SELECT name FROM stadium WHERE name LIKE '%Bank%'", "source_tables": ["stadium"]}}
{"sample_id": 1291, "db_id": "game_injury", "final": {"question": "How many games has each stadium held?", "sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id", "source_tables": ["stadium", "game"]}}
{"sample_id": 1292, "db_id": "game_injury", "final": {"question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC", "source_tables": ["injury_accident", "game"]}}
{"sample_id": 1304, "db_id": "soccer_1", "final": {"question": "List all of the ids for left-footed players with a height between 180cm and 190cm.", "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  'left'", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1305, "db_id": "soccer_1", "final": {"question": "Who are the top 3 players in terms of overall rating?", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1306, "db_id": "soccer_1", "final": {"question": "List the names and birthdays of the top five players in terms of potential.", "sql": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5", "source_tables": ["player", "player_attributes"]}}
{"sample_id": 1319, "db_id": "performance_attendance", "final": {"question": "Show the dates of performances with attending members whose roles are \"Violin\".", "sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  'Violin'", "source_tables": ["member", "member_attendance", "performance"]}}
{"sample_id": 1320, "db_id": "performance_attendance", "final": {"question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.", "sql": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC", "source_tables": ["member", "member_attendance", "performance"]}}
{"sample_id": 1321, "db_id": "performance_attendance", "final": {"question": "List the names of members who did not attend any performance.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)", "source_tables": ["member", "member_attendance"]}}
{"sample_id": 1458, "db_id": "college_2", "final": {"question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "source_tables": ["instructor"]}}
{"sample_id": 1459, "db_id": "college_2", "final": {"question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "source_tables": ["instructor"]}}
{"sample_id": 1460, "db_id": "college_2", "final": {"question": "Find the name of students who took some course offered by Statistics department.", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "source_tables": ["takes", "course", "student"]}}
{"sample_id": 1461, "db_id": "college_2", "final": {"question": "What are the names of students who have taken Statistics courses?", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "source_tables": ["takes", "course", "student"]}}
{"sample_id": 1462, "db_id": "college_2", "final": {"question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "source_tables": ["section", "course"]}}
{"sample_id": 1463, "db_id": "college_2", "final": {"question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "source_tables": ["section", "course"]}}
{"sample_id": 1464, "db_id": "college_2", "final": {"question": "Find the names of all instructors in computer science department", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "source_tables": ["instructor"]}}
{"sample_id": 1465, "db_id": "college_2", "final": {"question": "What are the names of all instructors in the Comp. Sci. department?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "source_tables": ["instructor"]}}
{"sample_id": 1466, "db_id": "college_2", "final": {"question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "source_tables": ["instructor"]}}
{"sample_id": 1467, "db_id": "college_2", "final": {"question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "source_tables": ["instructor"]}}
{"sample_id": 1468, "db_id": "college_2", "final": {"question": "Find the names of all instructors who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "source_tables": ["teaches", "instructor"]}}
{"sample_id": 1469, "db_id": "college_2", "final": {"question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "source_tables": ["teaches", "instructor"]}}
{"sample_id": 1470, "db_id": "college_2", "final": {"question": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "source_tables": ["teaches", "instructor"]}}
{"sample_id": 1471, "db_id": "college_2", "final": {"question": "What are the names of Art instructors who have taught a course, and the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "source_tables": ["teaches", "instructor"]}}
{"sample_id": 1472, "db_id": "college_2", "final": {"question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"]}}
{"sample_id": 1473, "db_id": "college_2", "final": {"question": "What are the names of all instructors with names that include \"dar\"?", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"]}}
{"sample_id": 1474, "db_id": "college_2", "final": {"question": "List in alphabetic order the names of all distinct instructors.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "source_tables": ["instructor"]}}
{"sample_id": 1475, "db_id": "college_2", "final": {"question": "List the distinct names of the instructors, ordered by name.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "source_tables": ["instructor"]}}
{"sample_id": 1476, "db_id": "college_2", "final": {"question": "Find courses that ran in Fall 2009 or in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1477, "db_id": "college_2", "final": {"question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1478, "db_id": "college_2", "final": {"question": "Find courses that ran in Fall 2009 and in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1479, "db_id": "college_2", "final": {"question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1480, "db_id": "college_2", "final": {"question": "Find courses that ran in Fall 2009 but not in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1481, "db_id": "college_2", "final": {"question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["section"]}}
{"sample_id": 1482, "db_id": "college_2", "final": {"question": "Find the salaries of all distinct instructors that are less than the largest salary.", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "source_tables": ["instructor"]}}
{"sample_id": 1483, "db_id": "college_2", "final": {"question": "What are the distinct salaries of all instructors who earned less than the maximum salary?", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "source_tables": ["instructor"]}}
{"sample_id": 1484, "db_id": "college_2", "final": {"question": "Find the total number of instructors who teach a course in the Spring 2010 semester.", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}}
{"sample_id": 1485, "db_id": "college_2", "final": {"question": "How many instructors teach a course in the Spring of 2010?", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "source_tables": ["teaches"]}}
{"sample_id": 1486, "db_id": "college_2", "final": {"question": "Find the names and average salaries of all departments whose average salary is greater than 42000.", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "source_tables": ["instructor"]}}
{"sample_id": 1487, "db_id": "college_2", "final": {"question": "What are the names and average salaries for departments with average salary higher than 42000?", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "source_tables": ["instructor"]}}
{"sample_id": 1488, "db_id": "college_2", "final": {"question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}}
{"sample_id": 1489, "db_id": "college_2", "final": {"question": "What are the names of instructors who earn more than at least one instructor from the Biology department?", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}}
{"sample_id": 1490, "db_id": "college_2", "final": {"question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}}
{"sample_id": 1491, "db_id": "college_2", "final": {"question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "source_tables": ["instructor"]}}
{"sample_id": 1504, "db_id": "debate", "final": {"question": "Show the names of people and the number of times they have been on the affirmative side of debates.", "sql": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name", "source_tables": ["people", "debate_people"]}}
{"sample_id": 1505, "db_id": "debate", "final": {"question": "Show the names of people who have been on the negative side of debates at least twice.", "sql": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["people", "debate_people"]}}
{"sample_id": 1506, "db_id": "debate", "final": {"question": "List the names of people that have not been on the affirmative side of debates.", "sql": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)", "source_tables": ["people", "debate_people"]}}
{"sample_id": 1539, "db_id": "insurance_and_eClaims", "final": {"question": "Find the name of the customer that has been involved in the most policies.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "policies"]}}
{"sample_id": 1540, "db_id": "insurance_and_eClaims", "final": {"question": "Which customer have the most policies? Give me the customer details.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "policies"]}}
{"sample_id": 1541, "db_id": "insurance_and_eClaims", "final": {"question": "What is the description of the claim status \"Open\"?", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  'Open'", "source_tables": ["claims_processing_stages"]}}
{"sample_id": 1542, "db_id": "insurance_and_eClaims", "final": {"question": "Find the description of the claim status \"Open\".", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  'Open'", "source_tables": ["claims_processing_stages"]}}
{"sample_id": 1543, "db_id": "insurance_and_eClaims", "final": {"question": "How many distinct claim outcome codes are there?", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "source_tables": ["claims_processing"]}}
{"sample_id": 1544, "db_id": "insurance_and_eClaims", "final": {"question": "Count the number of distinct claim outcome codes.", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "source_tables": ["claims_processing"]}}
{"sample_id": 1545, "db_id": "insurance_and_eClaims", "final": {"question": "Which customer is associated with the latest policy?", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "source_tables": ["customers", "policies"]}}
{"sample_id": 1546, "db_id": "insurance_and_eClaims", "final": {"question": "Find the customer who started a policy most recently.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "source_tables": ["customers", "policies"]}}
{"sample_id": 1612, "db_id": "customers_and_invoices", "final": {"question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.", "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 1613, "db_id": "customers_and_invoices", "final": {"question": "Show all product names without an order.", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "source_tables": ["order_items", "products"]}}
{"sample_id": 1614, "db_id": "customers_and_invoices", "final": {"question": "What are the names of products that have never been ordered?", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "source_tables": ["order_items", "products"]}}
{"sample_id": 1615, "db_id": "customers_and_invoices", "final": {"question": "Show all product names and the total quantity ordered for each product name.", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "source_tables": ["order_items", "products"]}}
{"sample_id": 1616, "db_id": "customers_and_invoices", "final": {"question": "What are the different product names, and what is the sum of quantity ordered for each product?", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "source_tables": ["order_items", "products"]}}
{"sample_id": 1617, "db_id": "customers_and_invoices", "final": {"question": "Show the order ids and the number of items in each order.", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1618, "db_id": "customers_and_invoices", "final": {"question": "How many order items correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1619, "db_id": "customers_and_invoices", "final": {"question": "Show the product ids and the number of unique orders containing each product.", "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "source_tables": ["order_items"]}}
{"sample_id": 1620, "db_id": "customers_and_invoices", "final": {"question": "How many distinct order ids correspond to each product?", "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "source_tables": ["order_items"]}}
{"sample_id": 1621, "db_id": "customers_and_invoices", "final": {"question": "Show all product names and the number of customers having an order on each product.", "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "source_tables": ["orders", "order_items", "products"]}}
{"sample_id": 1622, "db_id": "customers_and_invoices", "final": {"question": "What are teh names of the different products, as well as the number of customers who have ordered each product.", "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "source_tables": ["orders", "order_items", "products"]}}
{"sample_id": 1623, "db_id": "customers_and_invoices", "final": {"question": "Show order ids and the number of products in each order.", "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1624, "db_id": "customers_and_invoices", "final": {"question": "How many different products correspond to each order id?", "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1625, "db_id": "customers_and_invoices", "final": {"question": "Show order ids and the total quantity in each order.", "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1626, "db_id": "customers_and_invoices", "final": {"question": "Give the order ids for all orders, as well as the total product quantity in each.", "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1627, "db_id": "customers_and_invoices", "final": {"question": "How many products were not included in any order?", "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "source_tables": ["order_items", "products"]}}
{"sample_id": 1628, "db_id": "customers_and_invoices", "final": {"question": "Count the number of products that were never ordered.", "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "source_tables": ["order_items", "products"]}}
{"sample_id": 1645, "db_id": "wedding", "final": {"question": "How many weddings are there in year 2016?", "sql": "SELECT count(*) FROM wedding WHERE YEAR  =  2016", "source_tables": ["wedding"]}}
{"sample_id": 1646, "db_id": "wedding", "final": {"question": "Show the church names for the weddings of all people older than 30.", "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30", "source_tables": ["people", "wedding", "church"]}}
{"sample_id": 1647, "db_id": "wedding", "final": {"question": "Show all countries and the number of people from each country.", "sql": "SELECT country ,  count(*) FROM people GROUP BY country", "source_tables": ["people"]}}
{"sample_id": 1648, "db_id": "wedding", "final": {"question": "How many churches have a wedding in year 2016?", "sql": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016", "source_tables": ["wedding"]}}
{"sample_id": 1681, "db_id": "theme_gallery", "final": {"question": "Show all artist names who didn't have an exhibition in 2004.", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "source_tables": ["artist", "exhibition"]}}
{"sample_id": 1682, "db_id": "theme_gallery", "final": {"question": "What are the names of artists who did not have an exhibition in 2004?", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "source_tables": ["artist", "exhibition"]}}
{"sample_id": 1683, "db_id": "theme_gallery", "final": {"question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "source_tables": ["exhibition_record", "exhibition"]}}
{"sample_id": 1684, "db_id": "theme_gallery", "final": {"question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "source_tables": ["exhibition_record", "exhibition"]}}
{"sample_id": 1685, "db_id": "theme_gallery", "final": {"question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?", "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "source_tables": ["exhibition_record", "exhibition"]}}
{"sample_id": 1686, "db_id": "theme_gallery", "final": {"question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.", "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "source_tables": ["exhibition_record", "exhibition"]}}
{"sample_id": 1687, "db_id": "theme_gallery", "final": {"question": "Show all artist names with an average exhibition attendance over 200.", "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "source_tables": ["exhibition_record", "exhibition", "artist"]}}
{"sample_id": 1688, "db_id": "theme_gallery", "final": {"question": "What are the names of artist whose exhibitions draw over 200 attendees on average?", "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "source_tables": ["exhibition_record", "exhibition", "artist"]}}
{"sample_id": 1713, "db_id": "epinions_1", "final": {"question": "Find each target user's name and average trust score.", "sql": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id", "source_tables": ["trust", "useracct"]}}
{"sample_id": 1714, "db_id": "epinions_1", "final": {"question": "Find the name of the target user with the lowest trust score.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1", "source_tables": ["trust", "useracct"]}}
{"sample_id": 1715, "db_id": "epinions_1", "final": {"question": "Find the names of the items that did not receive any review.", "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "source_tables": ["item", "review"]}}
{"sample_id": 1716, "db_id": "epinions_1", "final": {"question": "Find the names of users who did not leave any review.", "sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "source_tables": ["useracct", "review"]}}
{"sample_id": 1717, "db_id": "epinions_1", "final": {"question": "Find the number of users who did not write any review.", "sql": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)", "source_tables": ["useracct", "review"]}}
{"sample_id": 1718, "db_id": "epinions_1", "final": {"question": "Find the number of items without any review.", "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "source_tables": ["item", "review"]}}
{"sample_id": 1732, "db_id": "riding_club", "final": {"question": "List the names of players that do not have coaches.", "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "source_tables": ["player_coach", "player"]}}
{"sample_id": 1733, "db_id": "riding_club", "final": {"question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".", "sql": "SELECT Residence FROM player WHERE gender  =  'M' INTERSECT SELECT Residence FROM player WHERE gender  =  'F'", "source_tables": ["player"]}}
{"sample_id": 1734, "db_id": "riding_club", "final": {"question": "How many coaches does each club has? List the club id, name and the number of coaches.", "sql": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id", "source_tables": ["coach", "club"]}}
{"sample_id": 1735, "db_id": "riding_club", "final": {"question": "How many gold medals has the club with the most coaches won?", "sql": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["coach", "match_result"]}}
{"sample_id": 1768, "db_id": "gymnast", "final": {"question": "List the distinct hometowns that are not associated with any gymnast.", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["people", "gymnast"]}}
{"sample_id": 1769, "db_id": "gymnast", "final": {"question": "From which hometowns did no gymnasts come from?", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["people", "gymnast"]}}
{"sample_id": 1770, "db_id": "gymnast", "final": {"question": "Show the hometowns shared by people older than 23 and younger than 20.", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "source_tables": ["people"]}}
{"sample_id": 1771, "db_id": "gymnast", "final": {"question": "From which hometowns did both people older than 23 and younger than 20 come from?", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "source_tables": ["people"]}}
{"sample_id": 1772, "db_id": "gymnast", "final": {"question": "How many distinct hometowns did these people have?", "sql": "SELECT count(DISTINCT Hometown) FROM people", "source_tables": ["people"]}}
{"sample_id": 1773, "db_id": "gymnast", "final": {"question": "Count the number of different hometowns of these people.", "sql": "SELECT count(DISTINCT Hometown) FROM people", "source_tables": ["people"]}}
{"sample_id": 1774, "db_id": "gymnast", "final": {"question": "Show the ages of gymnasts in descending order of total points.", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "source_tables": ["people", "gymnast"]}}
{"sample_id": 1775, "db_id": "gymnast", "final": {"question": "What are the ages of the gymnasts, ordered descending by their total points?", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "source_tables": ["people", "gymnast"]}}
{"sample_id": 1816, "db_id": "small_bank_1", "final": {"question": "Find the name, checking balance and saving balance of all accounts in the bank.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1817, "db_id": "small_bank_1", "final": {"question": "What are the names, checking balances, and savings balances for all customers?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1818, "db_id": "small_bank_1", "final": {"question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1819, "db_id": "small_bank_1", "final": {"question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1820, "db_id": "small_bank_1", "final": {"question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1821, "db_id": "small_bank_1", "final": {"question": "What are the names of customers with a higher checking balance than savings balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1822, "db_id": "small_bank_1", "final": {"question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1823, "db_id": "small_bank_1", "final": {"question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1824, "db_id": "small_bank_1", "final": {"question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "source_tables": ["savings", "accounts"]}}
{"sample_id": 1825, "db_id": "small_bank_1", "final": {"question": "What are names and savings balances of the three accounts with the highest savings balances?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "source_tables": ["savings", "accounts"]}}
{"sample_id": 1840, "db_id": "browser_web", "final": {"question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'", "source_tables": ["browser", "web_client_accelerator", "accelerator_compatible_browser"]}}
{"sample_id": 1841, "db_id": "browser_web", "final": {"question": "Which accelerator name contains substring \"Opera\"?", "sql": "SELECT name FROM web_client_accelerator WHERE name LIKE '%Opera%'", "source_tables": ["web_client_accelerator"]}}
{"sample_id": 1842, "db_id": "browser_web", "final": {"question": "Find the number of web accelerators used for each Operating system.", "sql": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system", "source_tables": ["web_client_accelerator"]}}
{"sample_id": 1843, "db_id": "browser_web", "final": {"question": "give me names of all compatible browsers and accelerators in the descending order of compatible year", "sql": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC", "source_tables": ["web_client_accelerator", "browser", "accelerator_compatible_browser"]}}
{"sample_id": 1876, "db_id": "wrestler", "final": {"question": "List the names of wrestlers that have not been eliminated.", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1877, "db_id": "wrestler", "final": {"question": "What are the names of wrestlers who have never been eliminated?", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1878, "db_id": "wrestler", "final": {"question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  'Orton' INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  'Benjamin'", "source_tables": ["elimination"]}}
{"sample_id": 1879, "db_id": "wrestler", "final": {"question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  'Orton' INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  'Benjamin'", "source_tables": ["elimination"]}}
{"sample_id": 1880, "db_id": "wrestler", "final": {"question": "What is the number of distinct teams that suffer elimination?", "sql": "SELECT COUNT (DISTINCT team) FROM elimination", "source_tables": ["elimination"]}}
{"sample_id": 1881, "db_id": "wrestler", "final": {"question": "How many different teams have had eliminated wrestlers?", "sql": "SELECT COUNT (DISTINCT team) FROM elimination", "source_tables": ["elimination"]}}
{"sample_id": 1882, "db_id": "wrestler", "final": {"question": "Show the times of elimination by \"Punk\" or \"Orton\".", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  'Punk' OR Eliminated_By  =  'Orton'", "source_tables": ["elimination"]}}
{"sample_id": 1883, "db_id": "wrestler", "final": {"question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  'Punk' OR Eliminated_By  =  'Orton'", "source_tables": ["elimination"]}}
{"sample_id": 1904, "db_id": "school_finance", "final": {"question": "How many budget record has a budget amount smaller than the invested amount?", "sql": "SELECT count(*) FROM budget WHERE budgeted  <  invested", "source_tables": ["budget"]}}
{"sample_id": 1905, "db_id": "school_finance", "final": {"question": "What is the total budget amount for school \"Glenn\" in all years?", "sql": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'", "source_tables": ["budget", "school"]}}
{"sample_id": 1906, "db_id": "school_finance", "final": {"question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.", "sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10", "source_tables": ["budget", "school", "endowment"]}}
{"sample_id": 1907, "db_id": "school_finance", "final": {"question": "Find the names of schools that have more than one donator with donation amount above 8.5.", "sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1", "source_tables": ["school", "endowment"]}}
{"sample_id": 1908, "db_id": "school_finance", "final": {"question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.", "sql": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)", "source_tables": ["endowment"]}}
{"sample_id": 1909, "db_id": "school_finance", "final": {"question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "sql": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted", "source_tables": ["budget", "school"]}}
{"sample_id": 1926, "db_id": "protein_institute", "final": {"question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'", "source_tables": ["institution", "protein"]}}
{"sample_id": 1927, "db_id": "protein_institute", "final": {"question": "Show the protein name and the institution name.", "sql": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id", "source_tables": ["institution", "protein"]}}
{"sample_id": 1928, "db_id": "protein_institute", "final": {"question": "How many proteins are associated with an institution in a building with at least 20 floors?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20", "source_tables": ["building", "institution", "protein"]}}
{"sample_id": 1929, "db_id": "protein_institute", "final": {"question": "How many institutions do not have an associated protein in our record?", "sql": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)", "source_tables": ["institution", "protein"]}}
{"sample_id": 1954, "db_id": "cinema", "final": {"question": "What are the title and director of the films without any schedule?", "sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "source_tables": ["schedule", "film"]}}
{"sample_id": 1955, "db_id": "cinema", "final": {"question": "Show director with the largest number of show times in total.", "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1", "source_tables": ["schedule", "film"]}}
{"sample_id": 1956, "db_id": "cinema", "final": {"question": "Find the locations that have more than one movie theater with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "source_tables": ["cinema"]}}
{"sample_id": 1957, "db_id": "cinema", "final": {"question": "In which locations are there more than one movie theater with capacity above 300?", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "source_tables": ["cinema"]}}
{"sample_id": 1958, "db_id": "cinema", "final": {"question": "How many films have the word 'Dummy' in their titles?", "sql": "SELECT count(*) FROM film WHERE title LIKE '%Dummy%'", "source_tables": ["film"]}}
{"sample_id": 1959, "db_id": "cinema", "final": {"question": "Count the number of films whose title contains the word 'Dummy'.", "sql": "SELECT count(*) FROM film WHERE title LIKE '%Dummy%'", "source_tables": ["film"]}}
{"sample_id": 1974, "db_id": "products_for_hire", "final": {"question": "How many products are never booked with amount higher than 200?", "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )", "source_tables": ["products_for_hire", "products_booked"]}}
{"sample_id": 1975, "db_id": "products_for_hire", "final": {"question": "What are the coupon amount of the coupons owned by both good and bad customers?", "sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'", "source_tables": ["customers", "discount_coupons"]}}
{"sample_id": 1976, "db_id": "products_for_hire", "final": {"question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'", "sql": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'", "source_tables": ["payments"]}}
{"sample_id": 1977, "db_id": "products_for_hire", "final": {"question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?", "sql": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20", "source_tables": ["products_for_hire"]}}
{"sample_id": 1990, "db_id": "phone_market", "final": {"question": "For each phone, show its names and total number of stocks.", "sql": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name", "source_tables": ["phone_market", "phone"]}}
{"sample_id": 1991, "db_id": "phone_market", "final": {"question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.", "sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC", "source_tables": ["phone_market", "phone"]}}
{"sample_id": 1992, "db_id": "phone_market", "final": {"question": "List the names of phones that are not on any market.", "sql": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)", "source_tables": ["phone_market", "phone"]}}
{"sample_id": 2029, "db_id": "gas_company", "final": {"question": "Show all locations where a gas station for company with market value greater than 100 is located.", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "source_tables": ["gas_station", "station_company", "company"]}}
{"sample_id": 2030, "db_id": "gas_company", "final": {"question": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "source_tables": ["gas_station", "station_company", "company"]}}
{"sample_id": 2031, "db_id": "gas_company", "final": {"question": "Show the manager name with most number of gas stations opened after 2000.", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["gas_station"]}}
{"sample_id": 2032, "db_id": "gas_company", "final": {"question": "What is the name of the manager with the most gas stations that opened after 2000?", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["gas_station"]}}
{"sample_id": 2033, "db_id": "gas_company", "final": {"question": "order all gas station locations by the opening year.", "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}}
{"sample_id": 2034, "db_id": "gas_company", "final": {"question": "What are the locations of all the gas stations ordered by opening year?", "sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "source_tables": ["gas_station"]}}
{"sample_id": 2035, "db_id": "gas_company", "final": {"question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.", "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "source_tables": ["company"]}}
{"sample_id": 2036, "db_id": "gas_company", "final": {"question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?", "sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion", "source_tables": ["company"]}}
{"sample_id": 2037, "db_id": "gas_company", "final": {"question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.", "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "source_tables": ["gas_station", "station_company", "company"]}}
{"sample_id": 2038, "db_id": "gas_company", "final": {"question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?", "sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "source_tables": ["gas_station", "station_company", "company"]}}
{"sample_id": 2074, "db_id": "party_people", "final": {"question": "What are the names of members who are not in charge of any events?", "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id", "source_tables": ["member", "party_events"]}}
{"sample_id": 2075, "db_id": "party_people", "final": {"question": "What are the names of parties with at least 2 events?", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "source_tables": ["party_events", "party"]}}
{"sample_id": 2076, "db_id": "party_people", "final": {"question": "Return the names of parties that have two or more events.", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "source_tables": ["party_events", "party"]}}
{"sample_id": 2077, "db_id": "party_people", "final": {"question": "What is the name of member in charge of greatest number of events?", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member", "party_events"]}}
{"sample_id": 2078, "db_id": "party_people", "final": {"question": "Return the name of the member who is in charge of the most events.", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member", "party_events"]}}
{"sample_id": 2079, "db_id": "party_people", "final": {"question": "find the event names that have more than 2 records.", "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "source_tables": ["party_events"]}}
{"sample_id": 2080, "db_id": "party_people", "final": {"question": "Which event names were used more than twice for party events?", "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "source_tables": ["party_events"]}}
{"sample_id": 2081, "db_id": "party_people", "final": {"question": "How many Annual Meeting events happened in the United Kingdom region?", "sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  'United Kingdom' AND t3.Event_Name  =  'Annaual Meeting'", "source_tables": ["region", "party_events", "party"]}}
{"sample_id": 2082, "db_id": "party_people", "final": {"question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  'United Kingdom' AND t3.Event_Name  =  'Annaual Meeting'", "source_tables": ["region", "party_events", "party"]}}
{"sample_id": 2095, "db_id": "pilot_record", "final": {"question": "Show the names of pilots and the number of records they have.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name", "source_tables": ["pilot_record", "pilot"]}}
{"sample_id": 2096, "db_id": "pilot_record", "final": {"question": "Show names of pilots that have more than one record.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1", "source_tables": ["pilot_record", "pilot"]}}
{"sample_id": 2097, "db_id": "pilot_record", "final": {"question": "List the names of pilots that do not have any record.", "sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)", "source_tables": ["pilot_record", "pilot"]}}
{"sample_id": 2124, "db_id": "cre_Doc_Control_Systems", "final": {"question": "How many draft copies does the document with id 2 have?", "sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;", "source_tables": ["draft_copies"]}}
{"sample_id": 2125, "db_id": "cre_Doc_Control_Systems", "final": {"question": "Which document has the most draft copies? List its document id and number of draft copies.", "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;", "source_tables": ["draft_copies"]}}
{"sample_id": 2126, "db_id": "cre_Doc_Control_Systems", "final": {"question": "Which documents have more than 1 draft copies? List document id and number of draft copies.", "sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;", "source_tables": ["draft_copies"]}}
{"sample_id": 2127, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List all employees in the circulation history of the document with id 1. List the employee's name.", "sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;", "source_tables": ["employees", "circulation_history"]}}
{"sample_id": 2128, "db_id": "cre_Doc_Control_Systems", "final": {"question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.", "sql": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id", "source_tables": ["employees", "circulation_history"]}}
{"sample_id": 2129, "db_id": "cre_Doc_Control_Systems", "final": {"question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.", "sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["employees", "circulation_history"]}}
{"sample_id": 2130, "db_id": "cre_Doc_Control_Systems", "final": {"question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.", "sql": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;", "source_tables": ["circulation_history"]}}
{"sample_id": 2143, "db_id": "local_govt_in_alabama", "final": {"question": "Which services type had both successful and failure event details?", "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'", "source_tables": ["events", "services"]}}
{"sample_id": 2144, "db_id": "local_govt_in_alabama", "final": {"question": "How many events did not have any participants?", "sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)", "source_tables": ["participants_in_events", "events"]}}
{"sample_id": 2145, "db_id": "local_govt_in_alabama", "final": {"question": "What are all the distinct participant ids who attended any events?", "sql": "SELECT count(DISTINCT participant_id) FROM participants_in_Events", "source_tables": ["participants_in_events"]}}
{"sample_id": 2210, "db_id": "formula_1", "final": {"question": "Find the names of Japanese constructors that have once earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5", "source_tables": ["constructorstandings", "constructors"]}}
{"sample_id": 2211, "db_id": "formula_1", "final": {"question": "What are the names of all the Japanese constructors that have earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5", "source_tables": ["constructorstandings", "constructors"]}}
{"sample_id": 2212, "db_id": "formula_1", "final": {"question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["races", "results"]}}
{"sample_id": 2213, "db_id": "formula_1", "final": {"question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["races", "results"]}}
{"sample_id": 2214, "db_id": "formula_1", "final": {"question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["races", "results"]}}
{"sample_id": 2215, "db_id": "formula_1", "final": {"question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["races", "results"]}}
{"sample_id": 2216, "db_id": "formula_1", "final": {"question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["races", "results"]}}
{"sample_id": 2217, "db_id": "formula_1", "final": {"question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["races", "results"]}}
{"sample_id": 2218, "db_id": "formula_1", "final": {"question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["races", "results"]}}
{"sample_id": 2219, "db_id": "formula_1", "final": {"question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["races", "results"]}}
{"sample_id": 2220, "db_id": "formula_1", "final": {"question": "Find the id, forename and number of races of all drivers who have at least participated in two races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["drivers", "results", "races"]}}
{"sample_id": 2221, "db_id": "formula_1", "final": {"question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "source_tables": ["drivers", "results", "races"]}}
{"sample_id": 2222, "db_id": "formula_1", "final": {"question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?", "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "source_tables": ["drivers", "results", "races"]}}
{"sample_id": 2223, "db_id": "formula_1", "final": {"question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?", "sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "source_tables": ["drivers", "results", "races"]}}
{"sample_id": 2224, "db_id": "formula_1", "final": {"question": "Find the id and surname of the driver who participated the most number of races?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["drivers", "results", "races"]}}
{"sample_id": 2225, "db_id": "formula_1", "final": {"question": "What are the ids and last names of all drivers who participated in the most races?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["drivers", "results", "races"]}}
{"sample_id": 2250, "db_id": "machine_repair", "final": {"question": "Show names of technicians and the number of machines they are assigned to repair.", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2251, "db_id": "machine_repair", "final": {"question": "What are the names of the technicians  and how many machines are they assigned to repair?", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2252, "db_id": "machine_repair", "final": {"question": "List the names of technicians who have not been assigned to repair machines.", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2253, "db_id": "machine_repair", "final": {"question": "What are the names of the technicians that have not been assigned to repair machines?", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2254, "db_id": "machine_repair", "final": {"question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".", "sql": "SELECT Starting_Year FROM technician WHERE Team  =  'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  'CWS'", "source_tables": ["technician"]}}
{"sample_id": 2255, "db_id": "machine_repair", "final": {"question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?", "sql": "SELECT Starting_Year FROM technician WHERE Team  =  'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  'CWS'", "source_tables": ["technician"]}}
{"sample_id": 2288, "db_id": "entrepreneur", "final": {"question": "List the names of people that are not entrepreneurs.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["entrepreneur", "people"]}}
{"sample_id": 2289, "db_id": "entrepreneur", "final": {"question": "What are the names of people who are not entrepreneurs?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["entrepreneur", "people"]}}
{"sample_id": 2290, "db_id": "entrepreneur", "final": {"question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "source_tables": ["entrepreneur"]}}
{"sample_id": 2291, "db_id": "entrepreneur", "final": {"question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "source_tables": ["entrepreneur"]}}
{"sample_id": 2292, "db_id": "entrepreneur", "final": {"question": "How many distinct companies are there?", "sql": "SELECT count(DISTINCT Company) FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2293, "db_id": "entrepreneur", "final": {"question": "Count the number of different companies.", "sql": "SELECT count(DISTINCT Company) FROM entrepreneur", "source_tables": ["entrepreneur"]}}
{"sample_id": 2294, "db_id": "entrepreneur", "final": {"question": "Show the company of the tallest entrepreneur.", "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["entrepreneur", "people"]}}
{"sample_id": 2295, "db_id": "entrepreneur", "final": {"question": "Which company was started by the entrepreneur with the greatest height?", "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["entrepreneur", "people"]}}
{"sample_id": 2312, "db_id": "perpetrator", "final": {"question": "List the names of people that are not perpetrators.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)", "source_tables": ["people", "perpetrator"]}}
{"sample_id": 2313, "db_id": "perpetrator", "final": {"question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.", "sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20", "source_tables": ["perpetrator"]}}
{"sample_id": 2314, "db_id": "perpetrator", "final": {"question": "How many distinct locations of perpetrators are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator", "source_tables": ["perpetrator"]}}
{"sample_id": 2315, "db_id": "perpetrator", "final": {"question": "Show the date of the tallest perpetrator.", "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "source_tables": ["people", "perpetrator"]}}
{"sample_id": 2316, "db_id": "perpetrator", "final": {"question": "In which year did the most recent crime happen?", "sql": "SELECT max(YEAR) FROM perpetrator;", "source_tables": ["perpetrator"]}}
{"sample_id": 2373, "db_id": "csu_1", "final": {"question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "source_tables": ["faculty", "campuses", "degrees"]}}
{"sample_id": 2374, "db_id": "csu_1", "final": {"question": "How many faculty members did the university that conferred the most degrees in 2002 have?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "source_tables": ["faculty", "campuses", "degrees"]}}
{"sample_id": 2375, "db_id": "csu_1", "final": {"question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "source_tables": ["faculty", "campuses", "degrees"]}}
{"sample_id": 2376, "db_id": "csu_1", "final": {"question": "How many faculty members are at the university that gave the least number of degrees in 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "source_tables": ["faculty", "campuses", "degrees"]}}
{"sample_id": 2377, "db_id": "csu_1", "final": {"question": "How many undergraduates are there in \"San Jose State University\" in year 2004?", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Jose State University'", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2378, "db_id": "csu_1", "final": {"question": "How many undergraduates are there at San Jose State", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Jose State University'", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2379, "db_id": "csu_1", "final": {"question": "What is the number of graduates in \"San Francisco State University\" in year 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Francisco State University'", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2380, "db_id": "csu_1", "final": {"question": "How many people graduated from San Francisco State University in 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Francisco State University'", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2381, "db_id": "csu_1", "final": {"question": "What is the campus fee of \"San Francisco State University\" in year 2000?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Francisco State University' AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2382, "db_id": "csu_1", "final": {"question": "In the year 2000, what is the campus fee for San Francisco State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Francisco State University' AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2383, "db_id": "csu_1", "final": {"question": "Find the campus fee of \"San Jose State University\" in year 2000.", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Jose State University' AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2384, "db_id": "csu_1", "final": {"question": "What is the campus fee in the year 2000 for San Jose State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  'San Jose State University' AND t1.year  =  2000", "source_tables": ["csu_fees", "campuses"]}}
{"sample_id": 2385, "db_id": "csu_1", "final": {"question": "How many CSU campuses are there?", "sql": "SELECT count(*) FROM campuses", "source_tables": ["campuses"]}}
{"sample_id": 2386, "db_id": "csu_1", "final": {"question": "What is the total number of campuses?", "sql": "SELECT count(*) FROM campuses", "source_tables": ["campuses"]}}
{"sample_id": 2419, "db_id": "candidate_poll", "final": {"question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.", "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "source_tables": ["candidate"]}}
{"sample_id": 2420, "db_id": "candidate_poll", "final": {"question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?", "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "source_tables": ["candidate"]}}
{"sample_id": 2421, "db_id": "candidate_poll", "final": {"question": "list all female (sex is F) candidate names in the alphabetical order.", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "source_tables": ["people", "candidate"]}}
{"sample_id": 2422, "db_id": "candidate_poll", "final": {"question": "What are the names of all female candidates in alphabetical order (sex is F)?", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "source_tables": ["people", "candidate"]}}
{"sample_id": 2423, "db_id": "candidate_poll", "final": {"question": "find the name of people whose height is lower than the average.", "sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "source_tables": ["people"]}}
{"sample_id": 2424, "db_id": "candidate_poll", "final": {"question": "What are the names of people who are shorter than average?", "sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)", "source_tables": ["people"]}}
{"sample_id": 2425, "db_id": "candidate_poll", "final": {"question": "List all info about all people.", "sql": "SELECT * FROM people", "source_tables": ["people"]}}
{"sample_id": 2426, "db_id": "candidate_poll", "final": {"question": "What is all the information about all people?", "sql": "SELECT * FROM people", "source_tables": ["people"]}}
{"sample_id": 2505, "db_id": "movie_1", "final": {"question": "Find the names of reviewers who had given higher than 3 star ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2506, "db_id": "movie_1", "final": {"question": "What are the names of the reviewers who have rated a movie more than 3 stars before?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2507, "db_id": "movie_1", "final": {"question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris') GROUP BY mID", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2508, "db_id": "movie_1", "final": {"question": "What is the average rating for each movie that has never been reviewed by Brittany Harris?", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris') GROUP BY mID", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2509, "db_id": "movie_1", "final": {"question": "What are the ids of the movies that are not reviewed by Brittany Harris.", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris'", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2510, "db_id": "movie_1", "final": {"question": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris'", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2511, "db_id": "movie_1", "final": {"question": "Find the average rating star for each movie that received at least 2 ratings.", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "source_tables": ["rating"]}}
{"sample_id": 2512, "db_id": "movie_1", "final": {"question": "For each movie that received more than 3 reviews, what is the average rating?", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "source_tables": ["rating"]}}
{"sample_id": 2513, "db_id": "movie_1", "final": {"question": "find the ids of reviewers who did not give 4 star.", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "source_tables": ["rating"]}}
{"sample_id": 2514, "db_id": "movie_1", "final": {"question": "What are the ids of all reviewers who did not give 4 stars?", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "source_tables": ["rating"]}}
{"sample_id": 2515, "db_id": "movie_1", "final": {"question": "Find the ids of reviewers who didn't only give 4 star.", "sql": "SELECT rID FROM Rating WHERE stars != 4", "source_tables": ["rating"]}}
{"sample_id": 2516, "db_id": "movie_1", "final": {"question": "What are the ids of all reviewers who have not given 4 stars at least once?", "sql": "SELECT rID FROM Rating WHERE stars != 4", "source_tables": ["rating"]}}
{"sample_id": 2517, "db_id": "movie_1", "final": {"question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "source_tables": ["movie", "rating", "reviewer"]}}
{"sample_id": 2518, "db_id": "movie_1", "final": {"question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "source_tables": ["movie", "rating", "reviewer"]}}
{"sample_id": 2519, "db_id": "movie_1", "final": {"question": "What are names of the movies that are either made before 1980 or directed by James Cameron?", "sql": "SELECT title FROM Movie WHERE director  =  'James Cameron' OR YEAR   <  1980", "source_tables": ["movie"]}}
{"sample_id": 2520, "db_id": "movie_1", "final": {"question": "What are the names of all movies made before 1980 or had James Cameron as the director?", "sql": "SELECT title FROM Movie WHERE director  =  'James Cameron' OR YEAR   <  1980", "source_tables": ["movie"]}}
{"sample_id": 2521, "db_id": "movie_1", "final": {"question": "What are the names of reviewers who had rated 3 star and 4 star?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2522, "db_id": "movie_1", "final": {"question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "source_tables": ["rating", "reviewer"]}}
{"sample_id": 2523, "db_id": "movie_1", "final": {"question": "What are the names of movies that get 3 star and 4 star?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "source_tables": ["movie", "rating"]}}
{"sample_id": 2524, "db_id": "movie_1", "final": {"question": "What are the names of all movies that received 3 or 4 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "source_tables": ["movie", "rating"]}}
{"sample_id": 2557, "db_id": "county_public_safety", "final": {"question": "List the names of counties that do not have any cities.", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2558, "db_id": "county_public_safety", "final": {"question": "What are the names of counties that do not contain any cities?", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2559, "db_id": "county_public_safety", "final": {"question": "Show the police force shared by counties with location on the east and west.", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  'East' INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  'West'", "source_tables": ["county_public_safety"]}}
{"sample_id": 2560, "db_id": "county_public_safety", "final": {"question": "Which police forces operate in both counties that are located in the East and in the West?", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  'East' INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  'West'", "source_tables": ["county_public_safety"]}}
{"sample_id": 2561, "db_id": "county_public_safety", "final": {"question": "Show the names of cities in counties that have a crime rate less than 100.", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "source_tables": ["county_public_safety", "city"]}}
{"sample_id": 2562, "db_id": "county_public_safety", "final": {"question": "What are the names of cities that are in counties that have a crime rate below 100?", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "source_tables": ["county_public_safety", "city"]}}
{"sample_id": 2563, "db_id": "county_public_safety", "final": {"question": "Show the case burden of counties in descending order of population.", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "source_tables": ["county_public_safety"]}}
{"sample_id": 2564, "db_id": "county_public_safety", "final": {"question": "What are the case burdens of counties, ordered descending by population?", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "source_tables": ["county_public_safety"]}}
{"sample_id": 2624, "db_id": "inn_1", "final": {"question": "Find the number of distinct bed types available in this inn.", "sql": "SELECT count(DISTINCT bedType) FROM Rooms;", "source_tables": ["rooms"]}}
{"sample_id": 2625, "db_id": "inn_1", "final": {"question": "Find the name and id of the top 3 expensive rooms.", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "source_tables": ["rooms"]}}
{"sample_id": 2626, "db_id": "inn_1", "final": {"question": "What are the name and id of the three highest priced rooms?", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "source_tables": ["rooms"]}}
{"sample_id": 2627, "db_id": "inn_1", "final": {"question": "Find the name of rooms whose price is higher than the average price.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "source_tables": ["rooms"]}}
{"sample_id": 2628, "db_id": "inn_1", "final": {"question": "What are the name of rooms that cost more than the average.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "source_tables": ["rooms"]}}
{"sample_id": 2629, "db_id": "inn_1", "final": {"question": "Find the number of rooms that do not have any reservation.", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2630, "db_id": "inn_1", "final": {"question": "How many rooms have not had any reservation yet?", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2631, "db_id": "inn_1", "final": {"question": "Return the name and number of reservations made for each of the rooms.", "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2632, "db_id": "inn_1", "final": {"question": "For each room, find its name and the number of times reservations were made for it.", "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2633, "db_id": "inn_1", "final": {"question": "Find the names of rooms that have been reserved for more than 60 times.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2634, "db_id": "inn_1", "final": {"question": "What are the names of rooms whose reservation frequency exceeds 60 times?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2635, "db_id": "inn_1", "final": {"question": "Find the name of rooms whose base price is between 120 and 150.", "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "source_tables": ["rooms"]}}
{"sample_id": 2636, "db_id": "inn_1", "final": {"question": "Which rooms cost between 120 and 150? Give me the room names.", "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "source_tables": ["rooms"]}}
{"sample_id": 2637, "db_id": "inn_1", "final": {"question": "Find the name of rooms booked by some customers whose first name contains ROY.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2638, "db_id": "inn_1", "final": {"question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2650, "db_id": "local_govt_mdm", "final": {"question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?", "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'", "source_tables": ["cmi_cross_references", "customer_master_index"]}}
{"sample_id": 2651, "db_id": "local_govt_mdm", "final": {"question": "Which cmi cross reference id is not related to any parking taxes?", "sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines", "source_tables": ["parking_fines", "cmi_cross_references"]}}
{"sample_id": 2652, "db_id": "local_govt_mdm", "final": {"question": "Which distinct source system code includes the substring 'en'?", "sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'", "source_tables": ["cmi_cross_references"]}}
{"sample_id": 2677, "db_id": "party_host", "final": {"question": "Show the host names for parties with number of hosts greater than 20.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "source_tables": ["party_host", "host", "party"]}}
{"sample_id": 2678, "db_id": "party_host", "final": {"question": "Which parties have more than 20 hosts? Give me the host names for these parties.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "source_tables": ["party_host", "host", "party"]}}
{"sample_id": 2679, "db_id": "party_host", "final": {"question": "Show the name and the nationality of the oldest host.", "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "source_tables": ["host"]}}
{"sample_id": 2680, "db_id": "party_host", "final": {"question": "What are the name and the nationality of the host of the highest age?", "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "source_tables": ["host"]}}
{"sample_id": 2681, "db_id": "party_host", "final": {"question": "List the names of hosts who did not serve as a host of any party in our record.", "sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "source_tables": ["party_host", "host"]}}
{"sample_id": 2682, "db_id": "party_host", "final": {"question": "What are the names of hosts who did not host any party in our record?", "sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "source_tables": ["party_host", "host"]}}
{"sample_id": 2718, "db_id": "storm_record", "final": {"question": "Return the names of the regions affected by storms that had a death count of at least 10.", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "source_tables": ["affected_region", "region", "storm"]}}
{"sample_id": 2719, "db_id": "storm_record", "final": {"question": "Show all storm names affecting region \"Denmark\".", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "source_tables": ["affected_region", "region", "storm"]}}
{"sample_id": 2720, "db_id": "storm_record", "final": {"question": "What are the names of the storms that affected Denmark?", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "source_tables": ["affected_region", "region", "storm"]}}
{"sample_id": 2721, "db_id": "storm_record", "final": {"question": "Show the region name with at least two storms.", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "source_tables": ["affected_region", "region"]}}
{"sample_id": 2722, "db_id": "storm_record", "final": {"question": "What are the names of regions with two or more storms?", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "source_tables": ["affected_region", "region"]}}
{"sample_id": 2723, "db_id": "storm_record", "final": {"question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "source_tables": ["affected_region", "region", "storm"]}}
{"sample_id": 2724, "db_id": "storm_record", "final": {"question": "What are the names of regions that were affected by the storm in which the most people died?", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "source_tables": ["affected_region", "region", "storm"]}}
{"sample_id": 2725, "db_id": "storm_record", "final": {"question": "Find the name of the storm that affected both Afghanistan and Albania regions.", "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'", "source_tables": ["affected_region", "region", "storm"]}}
{"sample_id": 2726, "db_id": "storm_record", "final": {"question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?", "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'", "source_tables": ["affected_region", "region", "storm"]}}
{"sample_id": 2781, "db_id": "election", "final": {"question": "Show the name of the party that has at least two records.", "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2", "source_tables": ["party"]}}
{"sample_id": 2782, "db_id": "election", "final": {"question": "Which party has two or more records?", "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2", "source_tables": ["party"]}}
{"sample_id": 2783, "db_id": "election", "final": {"question": "Show the name of the party that has the most delegates.", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party", "election"]}}
{"sample_id": 2784, "db_id": "election", "final": {"question": "Which party has the largest number of delegates?", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party", "election"]}}
{"sample_id": 2785, "db_id": "election", "final": {"question": "Show the people that have been governor the most times.", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2786, "db_id": "election", "final": {"question": "Which people severed as governor most frequently?", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2787, "db_id": "election", "final": {"question": "Show the people that have been comptroller the most times and the corresponding number of times.", "sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2788, "db_id": "election", "final": {"question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.", "sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2789, "db_id": "election", "final": {"question": "What are the names of parties that do not have delegates in election?", "sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)", "source_tables": ["election", "party"]}}
{"sample_id": 2790, "db_id": "election", "final": {"question": "Which parties did not have any delegates in elections?", "sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)", "source_tables": ["election", "party"]}}
{"sample_id": 2791, "db_id": "election", "final": {"question": "What are the names of parties that have both delegates on \"Appropriations\" committee and", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  'Appropriations' INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  'Economic Matters'", "source_tables": ["party", "election"]}}
{"sample_id": 2792, "db_id": "election", "final": {"question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  'Appropriations' INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  'Economic Matters'", "source_tables": ["party", "election"]}}
{"sample_id": 2793, "db_id": "election", "final": {"question": "Which committees have delegates from both democratic party and liberal party?", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  'Democratic' INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  'Liberal'", "source_tables": ["party", "election"]}}
{"sample_id": 2794, "db_id": "election", "final": {"question": "Find the committees that have delegates both from from the democratic party and the liberal party.", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  'Democratic' INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  'Liberal'", "source_tables": ["party", "election"]}}
{"sample_id": 2809, "db_id": "news_report", "final": {"question": "List the names of journalists who have not reported any event.", "sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)", "source_tables": ["journalist", "news_report"]}}
{"sample_id": 2810, "db_id": "news_report", "final": {"question": "what are the average and maximum attendances of all events?", "sql": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event", "source_tables": ["event"]}}
{"sample_id": 2811, "db_id": "news_report", "final": {"question": "Find the average age and experience working length of journalists working on different role type.", "sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type", "source_tables": ["journalist", "news_report"]}}
{"sample_id": 2812, "db_id": "news_report", "final": {"question": "List the event venues and names that have the top 2 most number of people attended.", "sql": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2", "source_tables": ["event"]}}
{"sample_id": 2830, "db_id": "restaurant_1", "final": {"question": "How long does student Linda Smith spend on the restaurant in total?", "sql": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith';", "source_tables": ["visits_restaurant", "student"]}}
{"sample_id": 2831, "db_id": "restaurant_1", "final": {"question": "How many times has the student Linda Smith visited Subway?", "sql": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway';", "source_tables": ["visits_restaurant", "student", "restaurant"]}}
{"sample_id": 2832, "db_id": "restaurant_1", "final": {"question": "When did Linda Smith visit Subway?", "sql": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway';", "source_tables": ["visits_restaurant", "student", "restaurant"]}}
{"sample_id": 2833, "db_id": "restaurant_1", "final": {"question": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.", "sql": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;", "source_tables": ["visits_restaurant", "restaurant"]}}
{"sample_id": 2834, "db_id": "restaurant_1", "final": {"question": "Which student visited restaurant most often? List student's first name and last name.", "sql": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["visits_restaurant", "student"]}}
{"sample_id": 2847, "db_id": "customer_deliveries", "final": {"question": "Find the payment method that is used most frequently.", "sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 2848, "db_id": "customer_deliveries", "final": {"question": "List the names of all routes in alphabetic order.", "sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name", "source_tables": ["delivery_routes"]}}
{"sample_id": 2849, "db_id": "customer_deliveries", "final": {"question": "Find the name of route that has the highest number of deliveries.", "sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["delivery_route_locations", "delivery_routes"]}}
{"sample_id": 2850, "db_id": "customer_deliveries", "final": {"question": "List the state names and the number of customers living in each state.", "sql": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county", "source_tables": ["customer_addresses", "addresses"]}}
{"sample_id": 2903, "db_id": "icfp_1", "final": {"question": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE '%Monadic%'", "source_tables": ["papers", "authors", "authorship"]}}
{"sample_id": 2904, "db_id": "icfp_1", "final": {"question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE '%Monadic%'", "source_tables": ["papers", "authors", "authorship"]}}
{"sample_id": 2905, "db_id": "icfp_1", "final": {"question": "Retrieve the title of the paper that has the largest number of authors.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "source_tables": ["papers", "authorship"]}}
{"sample_id": 2906, "db_id": "icfp_1", "final": {"question": "Which paper has the most authors? Give me the paper title.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "source_tables": ["papers", "authorship"]}}
{"sample_id": 2907, "db_id": "icfp_1", "final": {"question": "What is the first name of the author with last name \"Ueno\"?", "sql": "SELECT fname FROM authors WHERE lname  =  'Ueno'", "source_tables": ["authors"]}}
{"sample_id": 2908, "db_id": "icfp_1", "final": {"question": "Which authors have last name \"Ueno\"? List their first names.", "sql": "SELECT fname FROM authors WHERE lname  =  'Ueno'", "source_tables": ["authors"]}}
{"sample_id": 2909, "db_id": "icfp_1", "final": {"question": "Find the last name of the author with first name \"Amal\".", "sql": "SELECT lname FROM authors WHERE fname  =  'Amal'", "source_tables": ["authors"]}}
{"sample_id": 2910, "db_id": "icfp_1", "final": {"question": "Which authors have first name \"Amal\"? List their last names.", "sql": "SELECT lname FROM authors WHERE fname  =  'Amal'", "source_tables": ["authors"]}}
{"sample_id": 2911, "db_id": "icfp_1", "final": {"question": "Find the first names of all the authors ordered in alphabetical order.", "sql": "SELECT fname FROM authors ORDER BY fname", "source_tables": ["authors"]}}
{"sample_id": 2912, "db_id": "icfp_1", "final": {"question": "Sort the first names of all the authors in alphabetical order.", "sql": "SELECT fname FROM authors ORDER BY fname", "source_tables": ["authors"]}}
{"sample_id": 2913, "db_id": "icfp_1", "final": {"question": "Retrieve all the last names of authors in alphabetical order.", "sql": "SELECT lname FROM authors ORDER BY lname", "source_tables": ["authors"]}}
{"sample_id": 2914, "db_id": "icfp_1", "final": {"question": "Give me a list of all the last names of authors sorted in alphabetical order", "sql": "SELECT lname FROM authors ORDER BY lname", "source_tables": ["authors"]}}
{"sample_id": 2915, "db_id": "icfp_1", "final": {"question": "Retrieve all the first and last names of authors in the alphabetical order of last names.", "sql": "SELECT fname ,  lname FROM authors ORDER BY lname", "source_tables": ["authors"]}}
{"sample_id": 2916, "db_id": "icfp_1", "final": {"question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.", "sql": "SELECT fname ,  lname FROM authors ORDER BY lname", "source_tables": ["authors"]}}
{"sample_id": 2982, "db_id": "sakila_1", "final": {"question": "What was the date of the earliest payment?", "sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "source_tables": ["payment"]}}
{"sample_id": 2983, "db_id": "sakila_1", "final": {"question": "Where does the customer with the first name Linda live? And what is her email?", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "source_tables": ["customer", "address"]}}
{"sample_id": 2984, "db_id": "sakila_1", "final": {"question": "Return the address and email of the customer with the first name Linda.", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "source_tables": ["customer", "address"]}}
{"sample_id": 2985, "db_id": "sakila_1", "final": {"question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "source_tables": ["film"]}}
{"sample_id": 2986, "db_id": "sakila_1", "final": {"question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "source_tables": ["film"]}}
{"sample_id": 2987, "db_id": "sakila_1", "final": {"question": "What is the first name and the last name of the customer who made the earliest rental?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "source_tables": ["rental", "customer"]}}
{"sample_id": 2988, "db_id": "sakila_1", "final": {"question": "Return the full name of the customer who made the first rental.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "source_tables": ["rental", "customer"]}}
{"sample_id": 2989, "db_id": "sakila_1", "final": {"question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'", "source_tables": ["rental", "customer", "staff"]}}
{"sample_id": 2990, "db_id": "sakila_1", "final": {"question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'", "source_tables": ["rental", "customer", "staff"]}}
{"sample_id": 2991, "db_id": "sakila_1", "final": {"question": "Which store has most the customers?", "sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customer"]}}
{"sample_id": 2992, "db_id": "sakila_1", "final": {"question": "Return the id of the store with the most customers.", "sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customer"]}}
{"sample_id": 2993, "db_id": "sakila_1", "final": {"question": "What is the largest payment amount?", "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "source_tables": ["payment"]}}
{"sample_id": 2994, "db_id": "sakila_1", "final": {"question": "Return the amount of the largest payment.", "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "source_tables": ["payment"]}}
{"sample_id": 2995, "db_id": "sakila_1", "final": {"question": "Where does the staff member with the first name Elsa live?", "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", "source_tables": ["address", "staff"]}}
{"sample_id": 2996, "db_id": "sakila_1", "final": {"question": "Give the address of the staff member who has the first name Elsa.", "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", "source_tables": ["address", "staff"]}}
{"sample_id": 2997, "db_id": "sakila_1", "final": {"question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?", "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", "source_tables": ["rental", "customer"]}}
{"sample_id": 2998, "db_id": "sakila_1", "final": {"question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.", "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", "source_tables": ["rental", "customer"]}}
{"sample_id": 3063, "db_id": "loan_1", "final": {"question": "Find the name of bank branches that provided some loans.", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "source_tables": ["bank", "loan"]}}
{"sample_id": 3064, "db_id": "loan_1", "final": {"question": "What are the names of the different banks that have provided loans?", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "source_tables": ["bank", "loan"]}}
{"sample_id": 3065, "db_id": "loan_1", "final": {"question": "Find the name and credit score of the customers who have some loans.", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "source_tables": ["customer", "loan"]}}
{"sample_id": 3066, "db_id": "loan_1", "final": {"question": "What are the different names and credit scores of customers who have taken a loan?", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "source_tables": ["customer", "loan"]}}
{"sample_id": 3067, "db_id": "loan_1", "final": {"question": "Find the the name of the customers who have a loan with amount more than 3000.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "source_tables": ["customer", "loan"]}}
{"sample_id": 3068, "db_id": "loan_1", "final": {"question": "What are the names of customers who have a loan of more than 3000 in amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "source_tables": ["customer", "loan"]}}
{"sample_id": 3069, "db_id": "loan_1", "final": {"question": "Find the city and name of bank branches that provide business loans.", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3070, "db_id": "loan_1", "final": {"question": "What are the names and cities of bank branches that offer loans for business?", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3071, "db_id": "loan_1", "final": {"question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "source_tables": ["bank", "customer", "loan"]}}
{"sample_id": 3072, "db_id": "loan_1", "final": {"question": "What are the names of banks that have loaned money to customers with credit scores below 100?", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "source_tables": ["bank", "customer", "loan"]}}
{"sample_id": 3073, "db_id": "loan_1", "final": {"question": "Find the total amount of loans provided by bank branches in the state of New York.", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3074, "db_id": "loan_1", "final": {"question": "What is the total amount of money loaned by banks in New York state?", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3075, "db_id": "loan_1", "final": {"question": "Find the average credit score of the customers who have some loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3076, "db_id": "loan_1", "final": {"question": "What is the average credit score for customers who have taken a loan?", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3077, "db_id": "loan_1", "final": {"question": "Find the average credit score of the customers who do not have any loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3078, "db_id": "loan_1", "final": {"question": "What is the average credit score for customers who have never taken a loan?", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "source_tables": ["customer", "loan"]}}
{"sample_id": 3111, "db_id": "behavior_monitoring", "final": {"question": "What are the monthly rentals of student addresses in Texas state?", "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  'Texas'", "source_tables": ["student_addresses", "addresses"]}}
{"sample_id": 3112, "db_id": "behavior_monitoring", "final": {"question": "What are the first names and last names of students with address in Wisconsin state?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  'Wisconsin'", "source_tables": ["students", "addresses"]}}
{"sample_id": 3113, "db_id": "behavior_monitoring", "final": {"question": "What are the line 1 and average monthly rentals of all student addresses?", "sql": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id", "source_tables": ["student_addresses", "addresses"]}}
{"sample_id": 3114, "db_id": "behavior_monitoring", "final": {"question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  'Lyla'", "source_tables": ["teachers", "addresses"]}}
{"sample_id": 3115, "db_id": "behavior_monitoring", "final": {"question": "What are the email addresses of teachers whose address has zip code \"918\"?", "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  '918'", "source_tables": ["teachers", "addresses"]}}
{"sample_id": 3116, "db_id": "behavior_monitoring", "final": {"question": "How many students are not involved in any behavior incident?", "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )", "source_tables": ["behavior_incident", "students"]}}
{"sample_id": 3117, "db_id": "behavior_monitoring", "final": {"question": "Find the last names of teachers who are not involved in any detention.", "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id", "source_tables": ["teachers", "detention"]}}
{"sample_id": 3118, "db_id": "behavior_monitoring", "final": {"question": "What are the line 1 of addresses shared by some students and some teachers?", "sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id", "source_tables": ["teachers", "students", "addresses"]}}
{"sample_id": 3143, "db_id": "assets_maintenance", "final": {"question": "List the all the assets make, model, details by the disposed date ascendingly.", "sql": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC", "source_tables": ["assets"]}}
{"sample_id": 3144, "db_id": "assets_maintenance", "final": {"question": "Which part has the least chargeable amount? List the part id and amount.", "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "source_tables": ["parts"]}}
{"sample_id": 3145, "db_id": "assets_maintenance", "final": {"question": "Which company started the earliest the maintenance contract? Show the company name.", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1", "source_tables": ["third_party_companies", "maintenance_contracts"]}}
{"sample_id": 3146, "db_id": "assets_maintenance", "final": {"question": "What is the description of the type of the company who concluded its contracts most recently?", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1", "source_tables": ["ref_company_types", "third_party_companies", "maintenance_contracts"]}}
{"sample_id": 3147, "db_id": "assets_maintenance", "final": {"question": "Which gender makes up the majority of the staff?", "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1", "source_tables": ["staff"]}}
{"sample_id": 3148, "db_id": "assets_maintenance", "final": {"question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.", "sql": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name", "source_tables": ["engineer_visits", "staff"]}}
{"sample_id": 3149, "db_id": "assets_maintenance", "final": {"question": "Which assets did not incur any fault log? List the asset model.", "sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)", "source_tables": ["assets", "fault_log"]}}
{"sample_id": 3162, "db_id": "station_weather", "final": {"question": "Find the id and local authority of the station with has the highest average high temperature.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1", "source_tables": ["weekly_weather", "station"]}}
{"sample_id": 3163, "db_id": "station_weather", "final": {"question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50", "source_tables": ["weekly_weather", "station"]}}
{"sample_id": 3164, "db_id": "station_weather", "final": {"question": "show the lowest low temperature and highest wind speed in miles per hour.", "sql": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather", "source_tables": ["weekly_weather"]}}
{"sample_id": 3165, "db_id": "station_weather", "final": {"question": "Find the origins from which more than 1 train starts.", "sql": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1", "source_tables": ["train"]}}
{"sample_id": 3297, "db_id": "college_1", "final": {"question": "What is the name and address of the department with the most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["department", "student"]}}
{"sample_id": 3298, "db_id": "college_1", "final": {"question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "source_tables": ["department", "student"]}}
{"sample_id": 3299, "db_id": "college_1", "final": {"question": "What is the name, address, and number of students in the departments that have the 3 most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "source_tables": ["department", "student"]}}
{"sample_id": 3300, "db_id": "college_1", "final": {"question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "source_tables": ["department", "employee", "professor"]}}
{"sample_id": 3301, "db_id": "college_1", "final": {"question": "What are the first names and office of the professors who are in the history department and have a Ph.D?", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "source_tables": ["department", "employee", "professor"]}}
{"sample_id": 3302, "db_id": "college_1", "final": {"question": "Find the first names of all instructors who have taught some course and the course code.", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "source_tables": ["employee", "class"]}}
{"sample_id": 3303, "db_id": "college_1", "final": {"question": "What are the first names of all teachers who have taught a course and the corresponding course codes?", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "source_tables": ["employee", "class"]}}
{"sample_id": 3304, "db_id": "college_1", "final": {"question": "Find the first names of all instructors who have taught some course and the course description.", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "source_tables": ["employee", "class", "course"]}}
{"sample_id": 3305, "db_id": "college_1", "final": {"question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "source_tables": ["employee", "class", "course"]}}
{"sample_id": 3306, "db_id": "college_1", "final": {"question": "Find the first names and offices of all instructors who have taught some course and also find the course description.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "source_tables": ["employee", "professor", "class", "course"]}}
{"sample_id": 3307, "db_id": "college_1", "final": {"question": "What are the first names, office locations of all lecturers who have taught some course?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "source_tables": ["employee", "professor", "class", "course"]}}
{"sample_id": 3308, "db_id": "college_1", "final": {"question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "source_tables": ["employee", "professor", "class", "department", "course"]}}
{"sample_id": 3309, "db_id": "college_1", "final": {"question": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "source_tables": ["employee", "professor", "class", "department", "course"]}}
{"sample_id": 3310, "db_id": "college_1", "final": {"question": "Find names of all students who took some course and the course description.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "source_tables": ["course", "class", "student", "enroll"]}}
{"sample_id": 3311, "db_id": "college_1", "final": {"question": "What are the names of all students who took a class and the corresponding course descriptions?", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "source_tables": ["course", "class", "student", "enroll"]}}
{"sample_id": 3312, "db_id": "college_1", "final": {"question": "Find names of all students who took some course and got A or C.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "source_tables": ["student", "enroll"]}}
{"sample_id": 3313, "db_id": "college_1", "final": {"question": "What are the names of all students taking a course who received an A or C?", "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "source_tables": ["student", "enroll"]}}
{"sample_id": 3314, "db_id": "college_1", "final": {"question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "source_tables": ["department", "employee", "professor", "class"]}}
{"sample_id": 3315, "db_id": "college_1", "final": {"question": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "source_tables": ["department", "employee", "professor", "class"]}}
{"sample_id": 3316, "db_id": "college_1", "final": {"question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.", "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "source_tables": ["department", "employee", "professor", "class"]}}
{"sample_id": 3317, "db_id": "college_1", "final": {"question": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?", "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "source_tables": ["department", "employee", "professor", "class"]}}
{"sample_id": 3318, "db_id": "college_1", "final": {"question": "What is the last name of the student who got a grade A in the class with code 10018.", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "source_tables": ["student", "enroll"]}}
{"sample_id": 3319, "db_id": "college_1", "final": {"question": "What is the last name of the student who received an A in the class with the code 10018?", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "source_tables": ["student", "enroll"]}}
{"sample_id": 3320, "db_id": "college_1", "final": {"question": "Find the first name and office of history professor who did not get a Ph.D. degree.", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "source_tables": ["department", "employee", "professor"]}}
{"sample_id": 3321, "db_id": "college_1", "final": {"question": "What are the first names and offices of history professors who don't have Ph.D.s?", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "source_tables": ["department", "employee", "professor"]}}
{"sample_id": 3322, "db_id": "college_1", "final": {"question": "Find the first names of professors who are teaching more than one class.", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "source_tables": ["employee", "class"]}}
{"sample_id": 3323, "db_id": "college_1", "final": {"question": "What are the first names of all professors who teach more than one class?", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "source_tables": ["employee", "class"]}}
{"sample_id": 3324, "db_id": "college_1", "final": {"question": "Find the first names of students who took exactly one class.", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "source_tables": ["student", "enroll"]}}
{"sample_id": 3325, "db_id": "college_1", "final": {"question": "What are the first names of student who only took one course?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "source_tables": ["student", "enroll"]}}
{"sample_id": 3326, "db_id": "college_1", "final": {"question": "Find the name of department that offers the class whose description has the word \"Statistics\".", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "source_tables": ["department", "course"]}}
{"sample_id": 3327, "db_id": "college_1", "final": {"question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "source_tables": ["department", "course"]}}
{"sample_id": 3328, "db_id": "college_1", "final": {"question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "source_tables": ["class", "student", "enroll"]}}
{"sample_id": 3329, "db_id": "college_1", "final": {"question": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "source_tables": ["class", "student", "enroll"]}}
{"sample_id": 3371, "db_id": "sports_competition", "final": {"question": "How many different position for players are listed?", "sql": "SELECT count(DISTINCT POSITION) FROM player", "source_tables": ["player"]}}
{"sample_id": 3372, "db_id": "sports_competition", "final": {"question": "what are the name of players who get more than the average points.", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "source_tables": ["player"]}}
{"sample_id": 3373, "db_id": "sports_competition", "final": {"question": "What are the names of all players that got more than the average number of points?", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "source_tables": ["player"]}}
{"sample_id": 3374, "db_id": "sports_competition", "final": {"question": "find the number of players whose points are lower than 30 in each position.", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "source_tables": ["player"]}}
{"sample_id": 3375, "db_id": "sports_competition", "final": {"question": "What is the number of players who have points less than 30 for each position?", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "source_tables": ["player"]}}
{"sample_id": 3376, "db_id": "sports_competition", "final": {"question": "which country did participated in the most number of Tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["competition"]}}
{"sample_id": 3377, "db_id": "sports_competition", "final": {"question": "what is the name of the country that participated in the most tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["competition"]}}
{"sample_id": 3378, "db_id": "sports_competition", "final": {"question": "which countries did participated in both Friendly and Tournament type competitions.", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "source_tables": ["competition"]}}
{"sample_id": 3379, "db_id": "sports_competition", "final": {"question": "What are the countries that participated in both friendly and tournament type competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "source_tables": ["competition"]}}
{"sample_id": 3380, "db_id": "sports_competition", "final": {"question": "Find the countries that have never participated in any competition with Friendly type.", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "source_tables": ["competition"]}}
{"sample_id": 3381, "db_id": "sports_competition", "final": {"question": "What are the countries that have never participated in any friendly-type competitions?", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "source_tables": ["competition"]}}
{"sample_id": 3394, "db_id": "manufacturer", "final": {"question": "Find the number of funiture types produced by each manufacturer as well as the company names.", "sql": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id", "source_tables": ["furniture_manufacte", "manufacturer"]}}
{"sample_id": 3395, "db_id": "manufacturer", "final": {"question": "Give me the names and prices of furnitures which some companies are manufacturing.", "sql": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID", "source_tables": ["furniture_manufacte", "furniture"]}}
{"sample_id": 3396, "db_id": "manufacturer", "final": {"question": "Find the market shares and names of furnitures which no any company is producing in our records.", "sql": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)", "source_tables": ["furniture_manufacte", "furniture"]}}
{"sample_id": 3397, "db_id": "manufacturer", "final": {"question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.", "sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10", "source_tables": ["furniture_manufacte", "manufacturer", "furniture"]}}
{"sample_id": 3497, "db_id": "hr_1", "final": {"question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?", "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )", "source_tables": ["employees"]}}
{"sample_id": 3498, "db_id": "hr_1", "final": {"question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "source_tables": ["employees"]}}
{"sample_id": 3499, "db_id": "hr_1", "final": {"question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "source_tables": ["employees"]}}
{"sample_id": 3500, "db_id": "hr_1", "final": {"question": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3501, "db_id": "hr_1", "final": {"question": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3502, "db_id": "hr_1", "final": {"question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3503, "db_id": "hr_1", "final": {"question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3504, "db_id": "hr_1", "final": {"question": "display the department id and the total salary for those departments which contains at least two employees.", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "source_tables": ["employees"]}}
{"sample_id": 3505, "db_id": "hr_1", "final": {"question": "What are total salaries and department id for each department that has more than 2 employees?", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "source_tables": ["employees"]}}
{"sample_id": 3506, "db_id": "hr_1", "final": {"question": "display all the information of those employees who did not have any job in the past.", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "source_tables": ["employees", "job_history"]}}
{"sample_id": 3507, "db_id": "hr_1", "final": {"question": "What is all the information about employees who have never had a job in the past?", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "source_tables": ["employees", "job_history"]}}
{"sample_id": 3508, "db_id": "hr_1", "final": {"question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3509, "db_id": "hr_1", "final": {"question": "What are the department ids, full names, and salaries for employees who make the most in their departments?", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3510, "db_id": "hr_1", "final": {"question": "display the first and last name, department, city, and state province for each employee.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id", "source_tables": ["locations", "employees", "departments"]}}
{"sample_id": 3511, "db_id": "hr_1", "final": {"question": "What are the full names, departments, cities, and state provinces for each employee?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id", "source_tables": ["locations", "employees", "departments"]}}
{"sample_id": 3512, "db_id": "hr_1", "final": {"question": "display those employees who contain a letter z to their first name and also display their last name, city.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'", "source_tables": ["locations", "employees", "departments"]}}
{"sample_id": 3513, "db_id": "hr_1", "final": {"question": "What are the full names and cities of employees who have the letter Z in their first names?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'", "source_tables": ["locations", "employees", "departments"]}}
{"sample_id": 3514, "db_id": "hr_1", "final": {"question": "display the department name, city, and state province for each department.", "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id", "source_tables": ["locations", "departments"]}}
{"sample_id": 3515, "db_id": "hr_1", "final": {"question": "What are the department names, cities, and state provinces for each department?", "sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id", "source_tables": ["locations", "departments"]}}
{"sample_id": 3516, "db_id": "hr_1", "final": {"question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.", "sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "source_tables": ["locations", "employees", "departments", "countries"]}}
{"sample_id": 3517, "db_id": "hr_1", "final": {"question": "What the full names, ids of each employee and the name of the country they are in?", "sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id", "source_tables": ["locations", "employees", "departments", "countries"]}}
{"sample_id": 3518, "db_id": "hr_1", "final": {"question": "display the department name and number of employees in each of the department.", "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name", "source_tables": ["employees", "departments"]}}
{"sample_id": 3519, "db_id": "hr_1", "final": {"question": "What are the department names and how many employees work in each of them?", "sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name", "source_tables": ["employees", "departments"]}}
{"sample_id": 3520, "db_id": "hr_1", "final": {"question": "display the full name (first and last name), and salary of those employees who working in any department located in London.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "source_tables": ["locations", "employees", "departments"]}}
{"sample_id": 3521, "db_id": "hr_1", "final": {"question": "What are full names and salaries of employees working in the city of London?", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "source_tables": ["locations", "employees", "departments"]}}
{"sample_id": 3602, "db_id": "music_1", "final": {"question": "Find the names and number of works of the three artists who have produced the most songs.", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["song", "artist"]}}
{"sample_id": 3603, "db_id": "music_1", "final": {"question": "What are the names of the three artists who have produced the most songs, and how many works did they produce?", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["song", "artist"]}}
{"sample_id": 3604, "db_id": "music_1", "final": {"question": "Find the country of origin for the artist who made the least number of songs?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "source_tables": ["song", "artist"]}}
{"sample_id": 3605, "db_id": "music_1", "final": {"question": "What country is the artist who made the fewest songs from?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "source_tables": ["song", "artist"]}}
{"sample_id": 3606, "db_id": "music_1", "final": {"question": "What are the names of the songs whose rating is below the rating of all songs in English?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "source_tables": ["song"]}}
{"sample_id": 3607, "db_id": "music_1", "final": {"question": "What are the song names for every song whose rating is less than the minimum rating for English songs?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "source_tables": ["song"]}}
{"sample_id": 3608, "db_id": "music_1", "final": {"question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "source_tables": ["song"]}}
{"sample_id": 3609, "db_id": "music_1", "final": {"question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "source_tables": ["song"]}}
{"sample_id": 3610, "db_id": "music_1", "final": {"question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  'modern')", "source_tables": ["song"]}}
{"sample_id": 3611, "db_id": "music_1", "final": {"question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  'modern')", "source_tables": ["song"]}}
{"sample_id": 3612, "db_id": "music_1", "final": {"question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.", "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  'bangla' GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["song", "artist"]}}
{"sample_id": 3613, "db_id": "music_1", "final": {"question": "What are the top 3 artists with the largest number of songs in the language Bangla?", "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  'bangla' GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["song", "artist"]}}
{"sample_id": 3614, "db_id": "music_1", "final": {"question": "List the id, genre and artist name of English songs ordered by rating.", "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   'english' ORDER BY rating", "source_tables": ["song"]}}
{"sample_id": 3615, "db_id": "music_1", "final": {"question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?", "sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   'english' ORDER BY rating", "source_tables": ["song"]}}
{"sample_id": 3616, "db_id": "music_1", "final": {"question": "List the duration, file size and format of songs whose genre is pop, ordered by title?", "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  'pop' ORDER BY T2.song_name", "source_tables": ["song", "files"]}}
{"sample_id": 3617, "db_id": "music_1", "final": {"question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?", "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  'pop' ORDER BY T2.song_name", "source_tables": ["song", "files"]}}
{"sample_id": 3618, "db_id": "music_1", "final": {"question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.", "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  'english' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8", "source_tables": ["song"]}}
{"sample_id": 3619, "db_id": "music_1", "final": {"question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?", "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  'english' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8", "source_tables": ["song"]}}
{"sample_id": 3620, "db_id": "music_1", "final": {"question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.", "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  'Bangladesh' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "source_tables": ["song", "artist"]}}
{"sample_id": 3621, "db_id": "music_1", "final": {"question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?", "sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  'Bangladesh' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "source_tables": ["song", "artist"]}}
{"sample_id": 3687, "db_id": "baseball_1", "final": {"question": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?", "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;", "source_tables": ["home_game", "team"]}}
{"sample_id": 3688, "db_id": "baseball_1", "final": {"question": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;", "source_tables": ["player", "salary"]}}
{"sample_id": 3689, "db_id": "baseball_1", "final": {"question": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;", "source_tables": ["player", "salary"]}}
{"sample_id": 3690, "db_id": "baseball_1", "final": {"question": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.", "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'", "source_tables": ["player", "salary", "team"]}}
{"sample_id": 3691, "db_id": "baseball_1", "final": {"question": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?", "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'", "source_tables": ["player", "salary", "team"]}}
{"sample_id": 3692, "db_id": "baseball_1", "final": {"question": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?", "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;", "source_tables": ["home_game", "team"]}}
{"sample_id": 3693, "db_id": "baseball_1", "final": {"question": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.", "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;", "source_tables": ["home_game", "team"]}}
{"sample_id": 3694, "db_id": "baseball_1", "final": {"question": "Which team had the least number of attendances in home games in 1980?", "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;", "source_tables": ["home_game", "team"]}}
{"sample_id": 3695, "db_id": "baseball_1", "final": {"question": "Find the team that attended the least number of home games in 1980.", "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;", "source_tables": ["home_game", "team"]}}
{"sample_id": 3696, "db_id": "baseball_1", "final": {"question": "List the names of states that have more than 2 parks.", "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;", "source_tables": ["park"]}}
{"sample_id": 3697, "db_id": "baseball_1", "final": {"question": "Which states have more than 2 parks?", "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;", "source_tables": ["park"]}}
{"sample_id": 3698, "db_id": "baseball_1", "final": {"question": "How many team franchises are active, with active value 'Y'?", "sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';", "source_tables": ["team_franchise"]}}
{"sample_id": 3699, "db_id": "baseball_1", "final": {"question": "Find the number of team franchises that are active (have 'Y' as \"active\" information).", "sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';", "source_tables": ["team_franchise"]}}
{"sample_id": 3700, "db_id": "baseball_1", "final": {"question": "Which cities have 2 to 4 parks?", "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;", "source_tables": ["park"]}}
{"sample_id": 3701, "db_id": "baseball_1", "final": {"question": "Find all the cities that have 2 to 4 parks.", "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;", "source_tables": ["park"]}}
{"sample_id": 3702, "db_id": "baseball_1", "final": {"question": "Which park had most attendances in 2008?", "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;", "source_tables": ["home_game", "park"]}}
{"sample_id": 3703, "db_id": "baseball_1", "final": {"question": "Which park did the most people attend in 2008?", "sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;", "source_tables": ["home_game", "park"]}}
{"sample_id": 3717, "db_id": "mountain_photos", "final": {"question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'", "sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'", "source_tables": ["mountain", "photos", "camera_lens"]}}
{"sample_id": 3718, "db_id": "mountain_photos", "final": {"question": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.", "sql": "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'", "source_tables": ["mountain", "photos", "camera_lens"]}}
{"sample_id": 3719, "db_id": "mountain_photos", "final": {"question": "List the camera lens names containing substring \"Digital\".", "sql": "SELECT name FROM camera_lens WHERE name LIKE '%Digital%'", "source_tables": ["camera_lens"]}}
{"sample_id": 3720, "db_id": "mountain_photos", "final": {"question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.", "sql": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)", "source_tables": ["photos", "camera_lens"]}}
{"sample_id": 3753, "db_id": "program_share", "final": {"question": "find the names of programs whose origin is not in Beijing.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "source_tables": ["program"]}}
{"sample_id": 3754, "db_id": "program_share", "final": {"question": "Which programs' origins are not \"Beijing\"? Give me the program names.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "source_tables": ["program"]}}
{"sample_id": 3755, "db_id": "program_share", "final": {"question": "What are the names of the channels owned by CCTV or HBS?", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "source_tables": ["channel"]}}
{"sample_id": 3756, "db_id": "program_share", "final": {"question": "List the names of all the channels owned by either CCTV or HBS", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "source_tables": ["channel"]}}
{"sample_id": 3757, "db_id": "program_share", "final": {"question": "Find the total rating ratio for each channel owner.", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "source_tables": ["channel"]}}
{"sample_id": 3758, "db_id": "program_share", "final": {"question": "What is the total rating of channel for each channel owner?", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "source_tables": ["channel"]}}
{"sample_id": 3759, "db_id": "program_share", "final": {"question": "Find the name of the program that is broadcast most frequently.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["broadcast", "program"]}}
{"sample_id": 3760, "db_id": "program_share", "final": {"question": "Which program is broadcast most frequently? Give me the program name.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["broadcast", "program"]}}
{"sample_id": 3826, "db_id": "e_learning", "final": {"question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  'Karson'", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3827, "db_id": "e_learning", "final": {"question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  'Zieme' AND T2.personal_name  =  'Bernie'", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3828, "db_id": "e_learning", "final": {"question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  'Zieme' AND T2.personal_name  =  'Bernie'", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3829, "db_id": "e_learning", "final": {"question": "Find the student ID and login name of the student with the most course enrollments", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3830, "db_id": "e_learning", "final": {"question": "What are the student ID and login name of the student who are enrolled in the most courses?", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3831, "db_id": "e_learning", "final": {"question": "Find the student ID and personal name of the student with at least two enrollments.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3832, "db_id": "e_learning", "final": {"question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3833, "db_id": "e_learning", "final": {"question": "Find the student ID and middle name for all the students with at most two enrollments.", "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3834, "db_id": "e_learning", "final": {"question": "What are the student IDs and middle names of the students enrolled in at most two courses?", "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3835, "db_id": "e_learning", "final": {"question": "Find the personal names of students not enrolled in any course.", "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3836, "db_id": "e_learning", "final": {"question": "Which students not enrolled in any course? Find their personal names.", "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3837, "db_id": "e_learning", "final": {"question": "How many students did not have any course enrollment?", "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3838, "db_id": "e_learning", "final": {"question": "Count the number of students who did not enroll in any course.", "sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)", "source_tables": ["student_course_enrolment", "students"]}}
{"sample_id": 3839, "db_id": "e_learning", "final": {"question": "Find the common login name of course authors and students.", "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "source_tables": ["students", "course_authors_and_tutors"]}}
{"sample_id": 3840, "db_id": "e_learning", "final": {"question": "What are the login names used both by some course authors and some students?", "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "source_tables": ["students", "course_authors_and_tutors"]}}
{"sample_id": 3841, "db_id": "e_learning", "final": {"question": "Find the common personal name of course authors and students.", "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "source_tables": ["students", "course_authors_and_tutors"]}}
{"sample_id": 3842, "db_id": "e_learning", "final": {"question": "What are the personal names used both by some course authors and some students?", "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "source_tables": ["students", "course_authors_and_tutors"]}}
{"sample_id": 3881, "db_id": "insurance_policies", "final": {"question": "How many settlements are there in total?", "sql": "SELECT count(*) FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3882, "db_id": "insurance_policies", "final": {"question": "Count the total number of settlements made.", "sql": "SELECT count(*) FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3883, "db_id": "insurance_policies", "final": {"question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "source_tables": ["payments"]}}
{"sample_id": 3884, "db_id": "insurance_policies", "final": {"question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "source_tables": ["payments"]}}
{"sample_id": 3885, "db_id": "insurance_policies", "final": {"question": "List the details of the customers who do not have any policies.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "customer_policies"]}}
{"sample_id": 3886, "db_id": "insurance_policies", "final": {"question": "Which customers do not have any policies? Find the details of these customers.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "source_tables": ["customers", "customer_policies"]}}
{"sample_id": 3887, "db_id": "insurance_policies", "final": {"question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "source_tables": ["claims", "settlements"]}}
{"sample_id": 3888, "db_id": "insurance_policies", "final": {"question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "source_tables": ["claims", "settlements"]}}
{"sample_id": 3889, "db_id": "insurance_policies", "final": {"question": "Find the total claimed amount of all the claims.", "sql": "SELECT sum(Amount_Claimed) FROM Claims", "source_tables": ["claims"]}}
{"sample_id": 3890, "db_id": "insurance_policies", "final": {"question": "What is total amount claimed summed across all the claims?", "sql": "SELECT sum(Amount_Claimed) FROM Claims", "source_tables": ["claims"]}}
{"sample_id": 3971, "db_id": "hospital_1", "final": {"question": "Find the names of procedures which physician John Wen was trained in.", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["procedures", "trained_in", "physician"]}}
{"sample_id": 3972, "db_id": "hospital_1", "final": {"question": "What are the names of procedures physician John Wen was trained in?", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["procedures", "trained_in", "physician"]}}
{"sample_id": 3973, "db_id": "hospital_1", "final": {"question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3974, "db_id": "hospital_1", "final": {"question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3975, "db_id": "hospital_1", "final": {"question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3976, "db_id": "hospital_1", "final": {"question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3977, "db_id": "hospital_1", "final": {"question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3978, "db_id": "hospital_1", "final": {"question": "What procedures cost less than 5000 and have John Wen as a trained physician?", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["trained_in", "procedures", "physician"]}}
{"sample_id": 3979, "db_id": "hospital_1", "final": {"question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "source_tables": ["department", "affiliated_with", "physician"]}}
{"sample_id": 3980, "db_id": "hospital_1", "final": {"question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "source_tables": ["department", "affiliated_with", "physician"]}}
{"sample_id": 3981, "db_id": "hospital_1", "final": {"question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "source_tables": ["department", "affiliated_with", "physician"]}}
{"sample_id": 3982, "db_id": "hospital_1", "final": {"question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "source_tables": ["department", "affiliated_with", "physician"]}}
{"sample_id": 3983, "db_id": "hospital_1", "final": {"question": "Find the names of patients who are not using the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "source_tables": ["patient", "medication", "prescribes"]}}
{"sample_id": 3984, "db_id": "hospital_1", "final": {"question": "What are the names of patients who are not taking the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "source_tables": ["patient", "medication", "prescribes"]}}
{"sample_id": 3985, "db_id": "hospital_1", "final": {"question": "Find the number of patients who are not using the medication of Procrastin-X.", "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "source_tables": ["patient", "medication", "prescribes"]}}
{"sample_id": 3986, "db_id": "hospital_1", "final": {"question": "How many patients are not using Procrastin-X as medication?", "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "source_tables": ["patient", "medication", "prescribes"]}}
{"sample_id": 3987, "db_id": "hospital_1", "final": {"question": "How many appointments are there?", "sql": "SELECT count(*) FROM appointment", "source_tables": ["appointment"]}}
{"sample_id": 3988, "db_id": "hospital_1", "final": {"question": "Count how many appointments have been made in total.", "sql": "SELECT count(*) FROM appointment", "source_tables": ["appointment"]}}
{"sample_id": 3989, "db_id": "hospital_1", "final": {"question": "Find the names of nurses who are on call.", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "source_tables": ["nurse", "on_call"]}}
{"sample_id": 3990, "db_id": "hospital_1", "final": {"question": "What are the distinct names of nurses on call?", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "source_tables": ["nurse", "on_call"]}}
{"sample_id": 4015, "db_id": "ship_mission", "final": {"question": "Show the distinct fate of missions that involve ships with nationality \"United States\"", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  'United States'", "source_tables": ["mission", "ship"]}}
{"sample_id": 4016, "db_id": "ship_mission", "final": {"question": "What are the different fates of the mission that involved ships from the United States?", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  'United States'", "source_tables": ["mission", "ship"]}}
{"sample_id": 4017, "db_id": "ship_mission", "final": {"question": "List the name of ships that are not involved in any mission", "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)", "source_tables": ["mission", "ship"]}}
{"sample_id": 4018, "db_id": "ship_mission", "final": {"question": "What are the names of the ships that are not involved in any missions?", "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)", "source_tables": ["mission", "ship"]}}
{"sample_id": 4019, "db_id": "ship_mission", "final": {"question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.", "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000", "source_tables": ["ship"]}}
{"sample_id": 4020, "db_id": "ship_mission", "final": {"question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?", "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000", "source_tables": ["ship"]}}
{"sample_id": 4075, "db_id": "student_1", "final": {"question": "For each classroom, report the classroom number and the number of grades using it.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4076, "db_id": "student_1", "final": {"question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4077, "db_id": "student_1", "final": {"question": "Which classroom has the most students?", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "source_tables": ["list"]}}
{"sample_id": 4078, "db_id": "student_1", "final": {"question": "Find the classroom that the most students use.", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "source_tables": ["list"]}}
{"sample_id": 4079, "db_id": "student_1", "final": {"question": "Report the number of students in each classroom.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4080, "db_id": "student_1", "final": {"question": "For each classroom, show the classroom number and find how many students are using it.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4081, "db_id": "student_1", "final": {"question": "For each grade 0 classroom, report the total number of students.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  '0' GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4082, "db_id": "student_1", "final": {"question": "For each grade 0 classroom, return the classroom number and the count of students.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  '0' GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4083, "db_id": "student_1", "final": {"question": "Report the total number of students for each fourth-grade classroom.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  '4' GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4084, "db_id": "student_1", "final": {"question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.", "sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  '4' GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4085, "db_id": "student_1", "final": {"question": "Find the name of the teacher who teaches the largest number of students.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["teachers", "list"]}}
{"sample_id": 4086, "db_id": "student_1", "final": {"question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.", "sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["teachers", "list"]}}
{"sample_id": 4087, "db_id": "student_1", "final": {"question": "Find the number of students in one classroom.", "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4088, "db_id": "student_1", "final": {"question": "How many students does one classroom have?", "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4101, "db_id": "company_employee", "final": {"question": "Show the names of employees that work for companies with sales bigger than 200.", "sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200", "source_tables": ["people", "company", "employment"]}}
{"sample_id": 4102, "db_id": "company_employee", "final": {"question": "Show the names of companies and the number of employees they have", "sql": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name", "source_tables": ["people", "company", "employment"]}}
{"sample_id": 4103, "db_id": "company_employee", "final": {"question": "List the names of people that are not employed by any company", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)", "source_tables": ["people", "employment"]}}
{"sample_id": 4104, "db_id": "company_employee", "final": {"question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.", "sql": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC", "source_tables": ["company"]}}
{"sample_id": 4143, "db_id": "film_rank", "final": {"question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE '%Universal%'", "source_tables": ["film"]}}
{"sample_id": 4144, "db_id": "film_rank", "final": {"question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE '%Universal%'", "source_tables": ["film"]}}
{"sample_id": 4145, "db_id": "film_rank", "final": {"question": "Show the studios that have not produced films with director \"Walter Hill\".", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  'Walter Hill'", "source_tables": ["film"]}}
{"sample_id": 4146, "db_id": "film_rank", "final": {"question": "Which studios have never worked with the director Walter Hill?", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  'Walter Hill'", "source_tables": ["film"]}}
{"sample_id": 4147, "db_id": "film_rank", "final": {"question": "List the studios which average gross is above 4500000.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "source_tables": ["film"]}}
{"sample_id": 4148, "db_id": "film_rank", "final": {"question": "Which studios have an average gross of over 4500000?", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "source_tables": ["film"]}}
{"sample_id": 4149, "db_id": "film_rank", "final": {"question": "What is the title of the film that has the highest high market estimation.", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4150, "db_id": "film_rank", "final": {"question": "Return the title of the film with the highest high estimate?", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "source_tables": ["film_market_estimation", "film"]}}
{"sample_id": 4151, "db_id": "film_rank", "final": {"question": "What are the titles and directors of the films were never presented in China?", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "source_tables": ["market", "film_market_estimation", "film"]}}
{"sample_id": 4152, "db_id": "film_rank", "final": {"question": "Return the titles and directors of films that were never in the market of China.", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "source_tables": ["market", "film_market_estimation", "film"]}}
{"sample_id": 4225, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the location name and code with the least documents.", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["document_locations", "ref_locations"]}}
{"sample_id": 4226, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the name and code of the location with the smallest number of documents?", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["document_locations", "ref_locations"]}}
{"sample_id": 4227, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4228, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4229, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the id of each employee and the number of document destruction authorised by that employee.", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4230, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the id of each employee and the number of document destruction authorised by that employee?", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4231, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the employee ids and the number of documents destroyed by each employee.", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4232, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the id of each employee and the number of document destroyed by that employee?", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4233, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of the employees who don't authorize destruction for any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4234, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Which employees do not authorize destruction for any document? Give me their employee ids.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4235, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of all employees who have authorized destruction.", "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4236, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the ids of all the employees who authorize document destruction?", "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4237, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of all employees who have destroyed a document.", "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4238, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the ids of all the employees who have destroyed documents?", "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4239, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of all employees who don't destroy any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4240, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Which employees do not destroy any document? Find their employee ids.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4241, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.", "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4242, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.", "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4299, "db_id": "club_1", "final": {"question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  'HOU'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4300, "db_id": "club_1", "final": {"question": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  'HOU'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4301, "db_id": "club_1", "final": {"question": "How many clubs does the student named \"Eric Tai\" belong to?", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Eric' AND t3.lname  =  'Tai'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4302, "db_id": "club_1", "final": {"question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Eric' AND t3.lname  =  'Tai'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4303, "db_id": "club_1", "final": {"question": "List the clubs having \"Davis Steven\" as a member.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Davis' AND t3.lname  =  'Steven'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4304, "db_id": "club_1", "final": {"question": "What are the names of the clubs that have \"Davis Steven\" as a member?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Davis' AND t3.lname  =  'Steven'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4305, "db_id": "club_1", "final": {"question": "List the clubs that have at least a member with advisor \"1121\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4306, "db_id": "club_1", "final": {"question": "Which clubs have one or more members whose advisor is \"1121\"?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4307, "db_id": "club_1", "final": {"question": "What is the average age of the members of the club \"Bootup Baltimore\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Bootup Baltimore'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4308, "db_id": "club_1", "final": {"question": "Find the average age of the members in the club \"Bootup Baltimore\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Bootup Baltimore'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4309, "db_id": "club_1", "final": {"question": "Find the average age of members of the club \"Hopkins Student Enterprises\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Hopkins Student Enterprises'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4310, "db_id": "club_1", "final": {"question": "On average, how old are the members in the club \"Hopkins Student Enterprises\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Hopkins Student Enterprises'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4311, "db_id": "club_1", "final": {"question": "Retrieve the average age of members of the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Tennis Club'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4312, "db_id": "club_1", "final": {"question": "Compute the average age of the members in the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  'Tennis Club'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4375, "db_id": "tracking_grants_for_research", "final": {"question": "List the organisation id with the maximum outcome count, and the count.", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["project_outcomes", "projects"]}}
{"sample_id": 4376, "db_id": "tracking_grants_for_research", "final": {"question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["project_outcomes", "projects"]}}
{"sample_id": 4377, "db_id": "tracking_grants_for_research", "final": {"question": "List the project details of the projects launched by the organisation", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "source_tables": ["projects"]}}
{"sample_id": 4378, "db_id": "tracking_grants_for_research", "final": {"question": "What are the details for the projects which were launched by the organization with the most projects?", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "source_tables": ["projects"]}}
{"sample_id": 4379, "db_id": "tracking_grants_for_research", "final": {"question": "List the research staff details, and order in ascending order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "source_tables": ["research_staff"]}}
{"sample_id": 4380, "db_id": "tracking_grants_for_research", "final": {"question": "What details are there on the research staff? List the result in ascending alphabetical order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "source_tables": ["research_staff"]}}
{"sample_id": 4381, "db_id": "tracking_grants_for_research", "final": {"question": "How many tasks are there in total?", "sql": "SELECT count(*) FROM Tasks", "source_tables": ["tasks"]}}
{"sample_id": 4382, "db_id": "tracking_grants_for_research", "final": {"question": "How many tasks are there?", "sql": "SELECT count(*) FROM Tasks", "source_tables": ["tasks"]}}
{"sample_id": 4383, "db_id": "tracking_grants_for_research", "final": {"question": "How many tasks does each project have? List the task count and the project detail.", "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id", "source_tables": ["tasks", "projects"]}}
{"sample_id": 4384, "db_id": "tracking_grants_for_research", "final": {"question": "For each project id, how many tasks are there?", "sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id", "source_tables": ["tasks", "projects"]}}
{"sample_id": 4385, "db_id": "tracking_grants_for_research", "final": {"question": "What are the staff roles of the staff who", "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", "source_tables": ["project_staff"]}}
{"sample_id": 4386, "db_id": "tracking_grants_for_research", "final": {"question": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?", "sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'", "source_tables": ["project_staff"]}}
{"sample_id": 4387, "db_id": "tracking_grants_for_research", "final": {"question": "What are the descriptions of all the project outcomes?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code", "source_tables": ["research_outcomes", "project_outcomes"]}}
{"sample_id": 4388, "db_id": "tracking_grants_for_research", "final": {"question": "List the description of the outcomes for all projects.", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code", "source_tables": ["research_outcomes", "project_outcomes"]}}
{"sample_id": 4389, "db_id": "tracking_grants_for_research", "final": {"question": "Which role is most common for the staff?", "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["project_staff"]}}
{"sample_id": 4390, "db_id": "tracking_grants_for_research", "final": {"question": "What is the most common role for the staff?", "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["project_staff"]}}
{"sample_id": 4459, "db_id": "network_2", "final": {"question": "Who has friends that are older than the average age? Print their friends and their ages as well", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4460, "db_id": "network_2", "final": {"question": "Whare the names, friends, and ages of all people who are older than the average age of a person?", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4461, "db_id": "network_2", "final": {"question": "Who is the friend of Zach with longest year relationship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend"]}}
{"sample_id": 4462, "db_id": "network_2", "final": {"question": "Which friend of Zach has the longest-lasting friendship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend"]}}
{"sample_id": 4463, "db_id": "network_2", "final": {"question": "What is the age of the friend of Zach with longest year relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4464, "db_id": "network_2", "final": {"question": "What are the ages of all of Zach's friends who are in the longest relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4465, "db_id": "network_2", "final": {"question": "Find the name of persons who are friends with Alice for the shortest years.", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend"]}}
{"sample_id": 4466, "db_id": "network_2", "final": {"question": "What are the names of all people who are friends with Alice for the shortest amount of time?", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend"]}}
{"sample_id": 4467, "db_id": "network_2", "final": {"question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.", "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4468, "db_id": "network_2", "final": {"question": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?", "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4469, "db_id": "network_2", "final": {"question": "Who is the person that has no friend?", "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4470, "db_id": "network_2", "final": {"question": "What are the names of all people who do not have friends?", "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4471, "db_id": "network_2", "final": {"question": "Which person whose friends have the oldest average age?", "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4472, "db_id": "network_2", "final": {"question": "What is the name of the person who has the oldest average age for their friends, and what is that average age?", "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4473, "db_id": "network_2", "final": {"question": "What is the total number of people who has no friend living in the city of Austin.", "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4474, "db_id": "network_2", "final": {"question": "What is the total number of people who have no friends living in Austin?", "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4475, "db_id": "network_2", "final": {"question": "Find Alice's friends of friends.", "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4476, "db_id": "network_2", "final": {"question": "What are the names of all of Alice's friends of friends?", "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'", "source_tables": ["personfriend", "person"]}}
{"sample_id": 4489, "db_id": "decoration_competition", "final": {"question": "Show the names of members that have a rank in round higher than 3.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3", "source_tables": ["member", "round"]}}
{"sample_id": 4490, "db_id": "decoration_competition", "final": {"question": "Show the names of members in ascending order of their rank in rounds.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC", "source_tables": ["member", "round"]}}
{"sample_id": 4491, "db_id": "decoration_competition", "final": {"question": "List the names of members who did not participate in any round.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)", "source_tables": ["member", "round"]}}
{"sample_id": 4527, "db_id": "document_management", "final": {"question": "What is the description of the most popular role among users that have logged in?", "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["roles", "users"]}}
{"sample_id": 4528, "db_id": "document_management", "final": {"question": "Find the average access count of documents with the least popular structure.", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4529, "db_id": "document_management", "final": {"question": "What is the average access count of documents that have the least common structure?", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4530, "db_id": "document_management", "final": {"question": "List all the image name and URLs in the order of their names.", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "source_tables": ["images"]}}
{"sample_id": 4531, "db_id": "document_management", "final": {"question": "What are the names and urls of images, sorted alphabetically?", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "source_tables": ["images"]}}
{"sample_id": 4532, "db_id": "document_management", "final": {"question": "Find the number of users in each role.", "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code", "source_tables": ["users"]}}
{"sample_id": 4533, "db_id": "document_management", "final": {"question": "What are the different role codes for users, and how many users have each?", "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code", "source_tables": ["users"]}}
{"sample_id": 4534, "db_id": "document_management", "final": {"question": "What document types have more than 2 corresponding documents?", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2", "source_tables": ["documents"]}}
{"sample_id": 4535, "db_id": "document_management", "final": {"question": "Give the codes of document types that have more than 2 corresponding documents.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2", "source_tables": ["documents"]}}
{"sample_id": 4568, "db_id": "company_office", "final": {"question": "List the names of buildings that have no company office.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "source_tables": ["office_locations", "buildings"]}}
{"sample_id": 4569, "db_id": "company_office", "final": {"question": "Which buildings do not have any company office? Give me the building names.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "source_tables": ["office_locations", "buildings"]}}
{"sample_id": 4570, "db_id": "company_office", "final": {"question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  'USA' INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  'China'", "source_tables": ["companies"]}}
{"sample_id": 4571, "db_id": "company_office", "final": {"question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  'USA' INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  'China'", "source_tables": ["companies"]}}
{"sample_id": 4572, "db_id": "company_office", "final": {"question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",", "sql": "SELECT count(*) FROM Companies WHERE Industry  =  'Banking' OR Industry  =  'Conglomerate'", "source_tables": ["companies"]}}
{"sample_id": 4573, "db_id": "company_office", "final": {"question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?", "sql": "SELECT count(*) FROM Companies WHERE Industry  =  'Banking' OR Industry  =  'Conglomerate'", "source_tables": ["companies"]}}
{"sample_id": 4574, "db_id": "company_office", "final": {"question": "Show the headquarters shared by more than two companies.", "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2", "source_tables": ["companies"]}}
{"sample_id": 4575, "db_id": "company_office", "final": {"question": "Which headquarter locations are used by more than 2 companies?", "sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2", "source_tables": ["companies"]}}
{"sample_id": 4588, "db_id": "solvency_ii", "final": {"question": "Show the names of products that are in at least two events.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2", "source_tables": ["products", "products_in_events"]}}
{"sample_id": 4589, "db_id": "solvency_ii", "final": {"question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name", "source_tables": ["products", "products_in_events"]}}
{"sample_id": 4590, "db_id": "solvency_ii", "final": {"question": "List the names of products that are not in any event.", "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)", "source_tables": ["products", "products_in_events"]}}
{"sample_id": 4608, "db_id": "entertainment_awards", "final": {"question": "List the year in which there are more than one festivals.", "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1", "source_tables": ["festival_detail"]}}
{"sample_id": 4609, "db_id": "entertainment_awards", "final": {"question": "List the name of artworks that are not nominated.", "sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)", "source_tables": ["artwork", "nomination"]}}
{"sample_id": 4610, "db_id": "entertainment_awards", "final": {"question": "Show the number of audience in year 2008 or 2010.", "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010", "source_tables": ["festival_detail"]}}
{"sample_id": 4611, "db_id": "entertainment_awards", "final": {"question": "What are the total number of the audiences who visited any of the festivals?", "sql": "SELECT sum(Num_of_Audience) FROM festival_detail", "source_tables": ["festival_detail"]}}
{"sample_id": 4612, "db_id": "entertainment_awards", "final": {"question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?", "sql": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'", "source_tables": ["festival_detail"]}}
{"sample_id": 4625, "db_id": "customers_campaigns_ecommerce", "final": {"question": "What are the distinct address type codes for all customer addresses?", "sql": "SELECT DISTINCT address_type_code FROM customer_addresses", "source_tables": ["customer_addresses"]}}
{"sample_id": 4626, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.", "sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'", "source_tables": ["customer_orders"]}}
{"sample_id": 4627, "db_id": "customers_campaigns_ecommerce", "final": {"question": "Show the names of customers having an order with shipping method FedEx and order status Paid.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 4687, "db_id": "college_3", "final": {"question": "What are the full names of faculty members who are a part of department 520?", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "source_tables": ["member_of", "faculty"]}}
{"sample_id": 4688, "db_id": "college_3", "final": {"question": "What are the first names and last names of the students that minor in the department with DNO 140.", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "source_tables": ["minor_in", "student"]}}
{"sample_id": 4689, "db_id": "college_3", "final": {"question": "What are the full names of students minoring in department 140?", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "source_tables": ["minor_in", "student"]}}
{"sample_id": 4690, "db_id": "college_3", "final": {"question": "Find the last names of faculties who are members of computer science department.", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  'Computer Science'", "source_tables": ["member_of", "department", "faculty"]}}
{"sample_id": 4691, "db_id": "college_3", "final": {"question": "What are the last names of faculty who are part of the computer science department?", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  'Computer Science'", "source_tables": ["member_of", "department", "faculty"]}}
{"sample_id": 4692, "db_id": "college_3", "final": {"question": "Find the average grade point of student whose last name is Smith.", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  'Smith'", "source_tables": ["enrolled_in", "gradeconversion", "student"]}}
{"sample_id": 4693, "db_id": "college_3", "final": {"question": "What is the average gradepoint for students with the last name Smith?", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  'Smith'", "source_tables": ["enrolled_in", "gradeconversion", "student"]}}
{"sample_id": 4694, "db_id": "college_3", "final": {"question": "What is the maximum and minimum grade point of students who live in NYC?", "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  'NYC'", "source_tables": ["enrolled_in", "gradeconversion", "student"]}}
{"sample_id": 4695, "db_id": "college_3", "final": {"question": "Give the maximum and minimum gradepoints for students living in NYC?", "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  'NYC'", "source_tables": ["enrolled_in", "gradeconversion", "student"]}}
{"sample_id": 4696, "db_id": "college_3", "final": {"question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.", "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "source_tables": ["course"]}}
{"sample_id": 4697, "db_id": "college_3", "final": {"question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "source_tables": ["course"]}}
{"sample_id": 4698, "db_id": "college_3", "final": {"question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  'AS' UNION SELECT DName FROM DEPARTMENT WHERE Division  =  'EN' AND Building  =  'NEB'", "source_tables": ["department"]}}
{"sample_id": 4699, "db_id": "college_3", "final": {"question": "What are the names of departments either in division AS, or in division EN and in building NEB?", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  'AS' UNION SELECT DName FROM DEPARTMENT WHERE Division  =  'EN' AND Building  =  'NEB'", "source_tables": ["department"]}}
{"sample_id": 4700, "db_id": "college_3", "final": {"question": "Find the first name of students not enrolled in any course.", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "source_tables": ["enrolled_in", "student"]}}
{"sample_id": 4701, "db_id": "college_3", "final": {"question": "What are the first names of all students that are not enrolled in courses?", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "source_tables": ["enrolled_in", "student"]}}
{"sample_id": 4772, "db_id": "department_store", "final": {"question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  'red jeans'", "source_tables": ["suppliers", "products", "product_suppliers"]}}
{"sample_id": 4773, "db_id": "department_store", "final": {"question": "What are the distinct names and phone numbers for suppliers who have red jeans?", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  'red jeans'", "source_tables": ["suppliers", "products", "product_suppliers"]}}
{"sample_id": 4774, "db_id": "department_store", "final": {"question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4775, "db_id": "department_store", "final": {"question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4776, "db_id": "department_store", "final": {"question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   'Cancelled' ORDER BY order_date", "source_tables": ["customer_orders"]}}
{"sample_id": 4777, "db_id": "department_store", "final": {"question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   'Cancelled' ORDER BY order_date", "source_tables": ["customer_orders"]}}
{"sample_id": 4778, "db_id": "department_store", "final": {"question": "Find the names of products that were bought by at least two distinct customers.", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "source_tables": ["order_items", "customer_orders", "products"]}}
{"sample_id": 4779, "db_id": "department_store", "final": {"question": "What are the distinct names of products purchased by at least two different customers?", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "source_tables": ["order_items", "customer_orders", "products"]}}
{"sample_id": 4780, "db_id": "department_store", "final": {"question": "Find the names of customers who have bought by at least three distinct products.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3", "source_tables": ["customers", "order_items", "customer_orders"]}}
{"sample_id": 4781, "db_id": "department_store", "final": {"question": "What are the distinct names of customers who have purchased at least three different products?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3", "source_tables": ["customers", "order_items", "customer_orders"]}}
{"sample_id": 4782, "db_id": "department_store", "final": {"question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Sales Person' EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Clerical Staff'", "source_tables": ["staff_department_assignments", "staff"]}}
{"sample_id": 4783, "db_id": "department_store", "final": {"question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Sales Person' EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  'Clerical Staff'", "source_tables": ["staff_department_assignments", "staff"]}}
{"sample_id": 4784, "db_id": "department_store", "final": {"question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.", "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code != 'Credit Card'", "source_tables": ["customers"]}}
{"sample_id": 4785, "db_id": "department_store", "final": {"question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?", "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code != 'Credit Card'", "source_tables": ["customers"]}}
{"sample_id": 4786, "db_id": "department_store", "final": {"question": "Find the average price of all product clothes.", "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'", "source_tables": ["products"]}}
{"sample_id": 4787, "db_id": "department_store", "final": {"question": "What is the average price of clothes?", "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'", "source_tables": ["products"]}}
{"sample_id": 4788, "db_id": "department_store", "final": {"question": "Find the name of the most expensive hardware product.", "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 4789, "db_id": "department_store", "final": {"question": "What is the name of the hardware product with the greatest price?", "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 4826, "db_id": "aircraft", "final": {"question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Gatwick'", "source_tables": ["airport_aircraft", "airport", "aircraft"]}}
{"sample_id": 4827, "db_id": "aircraft", "final": {"question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Gatwick'", "source_tables": ["airport_aircraft", "airport", "aircraft"]}}
{"sample_id": 4828, "db_id": "aircraft", "final": {"question": "Show all information on the airport that has the largest number of international passengers.", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "source_tables": ["airport"]}}
{"sample_id": 4829, "db_id": "aircraft", "final": {"question": "What is all the information on the airport with the largest number of international passengers?", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "source_tables": ["airport"]}}
{"sample_id": 4830, "db_id": "aircraft", "final": {"question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1", "source_tables": ["pilot", "match"]}}
{"sample_id": 4831, "db_id": "aircraft", "final": {"question": "What is the name and age of the pilot younger than 30 who has won the most number of times?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1", "source_tables": ["pilot", "match"]}}
{"sample_id": 4832, "db_id": "aircraft", "final": {"question": "what is the name and age of the youngest winning pilot?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1", "source_tables": ["pilot", "match"]}}
{"sample_id": 4833, "db_id": "aircraft", "final": {"question": "How old is the youngest winning pilot and what is their name?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1", "source_tables": ["pilot", "match"]}}
{"sample_id": 4834, "db_id": "aircraft", "final": {"question": "find the name of pilots who did not win the matches held in the country of Australia.", "sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')", "source_tables": ["pilot", "match"]}}
{"sample_id": 4835, "db_id": "aircraft", "final": {"question": "What are the names of the pilots that have not won any matches in Australia?", "sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')", "source_tables": ["pilot", "match"]}}
{"sample_id": 4849, "db_id": "local_govt_and_lot", "final": {"question": "What are the resident details containing the substring 'Miss'?", "sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", "source_tables": ["residents"]}}
{"sample_id": 4850, "db_id": "local_govt_and_lot", "final": {"question": "List the customer event id and the corresponding move in date and property id.", "sql": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events", "source_tables": ["customer_events"]}}
{"sample_id": 4851, "db_id": "local_govt_and_lot", "final": {"question": "How many customers did not have any event?", "sql": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )", "source_tables": ["customers", "customer_events"]}}
{"sample_id": 4852, "db_id": "local_govt_and_lot", "final": {"question": "What are the distinct move in dates of the residents?", "sql": "SELECT DISTINCT date_moved_in FROM residents", "source_tables": ["residents"]}}
{"sample_id": 4885, "db_id": "school_player", "final": {"question": "List the locations of schools that do not have any player.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "source_tables": ["player", "school"]}}
{"sample_id": 4886, "db_id": "school_player", "final": {"question": "Which schools do not have any player? Give me the school locations.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "source_tables": ["player", "school"]}}
{"sample_id": 4887, "db_id": "school_player", "final": {"question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "source_tables": ["school"]}}
{"sample_id": 4888, "db_id": "school_player", "final": {"question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "source_tables": ["school"]}}
{"sample_id": 4889, "db_id": "school_player", "final": {"question": "Show the nicknames of schools that are not in division 1.", "sql": "SELECT Nickname FROM school_details WHERE Division != 'Division 1'", "source_tables": ["school_details"]}}
{"sample_id": 4890, "db_id": "school_player", "final": {"question": "What are the nicknames of schools whose division is not 1?", "sql": "SELECT Nickname FROM school_details WHERE Division != 'Division 1'", "source_tables": ["school_details"]}}
{"sample_id": 4891, "db_id": "school_player", "final": {"question": "Show the denomination shared by more than one school.", "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1", "source_tables": ["school"]}}
{"sample_id": 4892, "db_id": "school_player", "final": {"question": "What are the denomination more than one school have?", "sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1", "source_tables": ["school"]}}
{"sample_id": 4928, "db_id": "store_product", "final": {"question": "What are all of the products whose name includes the substring \"Scanner\"?", "sql": "SELECT product FROM product WHERE product LIKE '%Scanner%'", "source_tables": ["product"]}}
{"sample_id": 4929, "db_id": "store_product", "final": {"question": "Find the most prominent max page size among all the products.", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "source_tables": ["product"]}}
{"sample_id": 4930, "db_id": "store_product", "final": {"question": "What is the most common maximum page size?", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "source_tables": ["product"]}}
{"sample_id": 4931, "db_id": "store_product", "final": {"question": "Find the name of the products that are not using the most frequently-used max page size.", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["product"]}}
{"sample_id": 4932, "db_id": "store_product", "final": {"question": "What are the names of all products that are not the most frequently-used maximum page size?", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["product"]}}
{"sample_id": 4933, "db_id": "store_product", "final": {"question": "Find the total population of the districts where the area is bigger than the average city area.", "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)", "source_tables": ["district"]}}
{"sample_id": 4934, "db_id": "store_product", "final": {"question": "What is the total population for all the districts that have an area larger tahn the average city area?", "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)", "source_tables": ["district"]}}
{"sample_id": 4935, "db_id": "store_product", "final": {"question": "Find the names of districts where have both city mall and village store type stores.", "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  'City Mall' INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  'Village Store'", "source_tables": ["store_district", "district", "store"]}}
{"sample_id": 4936, "db_id": "store_product", "final": {"question": "What are the names of the districts that have both mall and village store style shops?", "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  'City Mall' INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  'Village Store'", "source_tables": ["store_district", "district", "store"]}}
{"sample_id": 5021, "db_id": "soccer_2", "final": {"question": "Find the names of states that have some college students playing in goalie and mid positions.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "source_tables": ["college", "tryout"]}}
{"sample_id": 5022, "db_id": "soccer_2", "final": {"question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "source_tables": ["college", "tryout"]}}
{"sample_id": 5023, "db_id": "soccer_2", "final": {"question": "How many schools have some students playing in goalie and mid positions.", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "source_tables": ["tryout"]}}
{"sample_id": 5024, "db_id": "soccer_2", "final": {"question": "How many schools have students playing in goalie and mid-field positions?", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "source_tables": ["tryout"]}}
{"sample_id": 5025, "db_id": "soccer_2", "final": {"question": "Find the names of schools that have some players in the mid position but not in the goalie position.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 5026, "db_id": "soccer_2", "final": {"question": "What are the names of the schools with some players in the mid position but no goalies?", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 5027, "db_id": "soccer_2", "final": {"question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "source_tables": ["college", "tryout"]}}
{"sample_id": 5028, "db_id": "soccer_2", "final": {"question": "What are the names of all the states with college students playing in the mid position but no goalies?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "source_tables": ["college", "tryout"]}}
{"sample_id": 5029, "db_id": "soccer_2", "final": {"question": "How many states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "source_tables": ["college", "tryout"]}}
{"sample_id": 5030, "db_id": "soccer_2", "final": {"question": "What is the count of states with college students playing in the mid position but not as goalies?", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "source_tables": ["college", "tryout"]}}
{"sample_id": 5031, "db_id": "soccer_2", "final": {"question": "Find the states where have the colleges whose enrollments are less than the largest size.", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 5032, "db_id": "soccer_2", "final": {"question": "What are the states with colleges that have enrollments less than the some other college?", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 5033, "db_id": "soccer_2", "final": {"question": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "source_tables": ["college"]}}
{"sample_id": 5034, "db_id": "soccer_2", "final": {"question": "What are the names of the colleges that are larger than at least one college in Florida?", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "source_tables": ["college"]}}
{"sample_id": 5035, "db_id": "soccer_2", "final": {"question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "source_tables": ["college"]}}
{"sample_id": 5036, "db_id": "soccer_2", "final": {"question": "What are the names of all colleges with a larger enrollment than the largest college in Florida?", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "source_tables": ["college"]}}
{"sample_id": 5037, "db_id": "soccer_2", "final": {"question": "What is the total number of enrollment of schools that do not have any goalie player?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  'goalie')", "source_tables": ["college", "tryout"]}}
{"sample_id": 5038, "db_id": "soccer_2", "final": {"question": "What is the total number of students enrolled in schools without any goalies?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  'goalie')", "source_tables": ["college", "tryout"]}}
{"sample_id": 5039, "db_id": "soccer_2", "final": {"question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 5040, "db_id": "soccer_2", "final": {"question": "How many states have a college with more students than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 5041, "db_id": "soccer_2", "final": {"question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 5042, "db_id": "soccer_2", "final": {"question": "How many states have smaller colleges than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "source_tables": ["college"]}}
{"sample_id": 5075, "db_id": "device", "final": {"question": "List the names of shops that have no devices in stock.", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "source_tables": ["stock", "shop"]}}
{"sample_id": 5076, "db_id": "device", "final": {"question": "What are the names of shops that do not have any devices in stock?", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "source_tables": ["stock", "shop"]}}
{"sample_id": 5077, "db_id": "device", "final": {"question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.", "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008", "source_tables": ["shop"]}}
{"sample_id": 5078, "db_id": "device", "final": {"question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?", "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008", "source_tables": ["shop"]}}
{"sample_id": 5079, "db_id": "device", "final": {"question": "List the carriers of devices that have no devices in stock.", "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)", "source_tables": ["stock", "device"]}}
{"sample_id": 5080, "db_id": "device", "final": {"question": "What are the carriers of devices that are not in stock anywhere?", "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)", "source_tables": ["stock", "device"]}}
{"sample_id": 5081, "db_id": "device", "final": {"question": "Show the carriers of devices in stock at more than one shop.", "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1", "source_tables": ["stock", "device"]}}
{"sample_id": 5082, "db_id": "device", "final": {"question": "What are the carriers of devices that are in stock in more than a single shop?", "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1", "source_tables": ["stock", "device"]}}
{"sample_id": 5148, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "How many drama workshop groups are there in each city? Return both the city and the count.", "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town", "source_tables": ["drama_workshop_groups", "addresses"]}}
{"sample_id": 5149, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the marketing region code that has the most drama workshop groups?", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5150, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which marketing region has the most drama workshop groups? Give me the region code.", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5151, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show all cities where at least one customer lives in but no performer lives in.", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "source_tables": ["customers", "addresses", "performers"]}}
{"sample_id": 5152, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which cities have at least one customer but no performer?", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "source_tables": ["customers", "addresses", "performers"]}}
{"sample_id": 5153, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the most frequent status of bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["bookings"]}}
{"sample_id": 5154, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which status code is the most common of all the bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["bookings"]}}
{"sample_id": 5155, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the names of the workshop groups that have bookings with status code \"stop\"?", "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  'stop'", "source_tables": ["drama_workshop_groups", "bookings"]}}
{"sample_id": 5156, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which workshop groups have bookings with status code \"stop\"? Give me the names.", "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  'stop'", "source_tables": ["drama_workshop_groups", "bookings"]}}
{"sample_id": 5157, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show the names of all the clients with no booking.", "sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID", "source_tables": ["clients", "bookings"]}}
{"sample_id": 5158, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the names of the clients who do not have any booking?", "sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID", "source_tables": ["clients", "bookings"]}}
{"sample_id": 5159, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?", "sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  'MasterCard'", "source_tables": ["invoices"]}}
{"sample_id": 5160, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".", "sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  'MasterCard'", "source_tables": ["invoices"]}}
{"sample_id": 5161, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the product ID of the most frequently ordered item on invoices?", "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["invoices"]}}
{"sample_id": 5162, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Find the id of the product ordered the most often on invoices.", "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["invoices"]}}
{"sample_id": 5163, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the description of the service type which offers both the photo product and the film product?", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", "source_tables": ["ref_service_types", "services"]}}
{"sample_id": 5164, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Give me the description of the service type that offers not only the photo product but also the film product.", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", "source_tables": ["ref_service_types", "services"]}}
{"sample_id": 5245, "db_id": "music_2", "final": {"question": "Find all the songs that do not have a back vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  'back'", "source_tables": ["songs", "vocals"]}}
{"sample_id": 5246, "db_id": "music_2", "final": {"question": "What are the different names of all songs without back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  'back'", "source_tables": ["songs", "vocals"]}}
{"sample_id": 5247, "db_id": "music_2", "final": {"question": "Which vocal type has the band mate with first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  'Solveig' GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "vocals"]}}
{"sample_id": 5248, "db_id": "music_2", "final": {"question": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  'Solveig' GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "vocals"]}}
{"sample_id": 5249, "db_id": "music_2", "final": {"question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  'Heilo' AND T2.title  =  'Der Kapitan'", "source_tables": ["band", "songs", "vocals"]}}
{"sample_id": 5250, "db_id": "music_2", "final": {"question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  'Heilo' AND T2.title  =  'Der Kapitan'", "source_tables": ["band", "songs", "vocals"]}}
{"sample_id": 5251, "db_id": "music_2", "final": {"question": "Find the first name of the band mate that has performed in most songs.", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "songs", "performance"]}}
{"sample_id": 5252, "db_id": "music_2", "final": {"question": "What is the first name of the band mate who perfomed in the most songs?", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "songs", "performance"]}}
{"sample_id": 5253, "db_id": "music_2", "final": {"question": "Which vocal type has the band mate with first name \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  'Marianne' GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "vocals"]}}
{"sample_id": 5254, "db_id": "music_2", "final": {"question": "What is the vocal type of the band mate whose first name is \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  'Marianne' GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "vocals"]}}
{"sample_id": 5255, "db_id": "music_2", "final": {"question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  'Der Kapitan' AND T1.StagePosition  =  'back'", "source_tables": ["band", "songs", "performance"]}}
{"sample_id": 5256, "db_id": "music_2", "final": {"question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  'Der Kapitan' AND T1.StagePosition  =  'back'", "source_tables": ["band", "songs", "performance"]}}
{"sample_id": 5257, "db_id": "music_2", "final": {"question": "Find the name of songs that does not have a back vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  'back'", "source_tables": ["songs", "vocals"]}}
{"sample_id": 5258, "db_id": "music_2", "final": {"question": "What are the names of the songs that do not have back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  'back'", "source_tables": ["songs", "vocals"]}}
{"sample_id": 5259, "db_id": "music_2", "final": {"question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  'A Kiss Before You Go: Live in Hamburg'", "source_tables": ["albums", "tracklists", "songs"]}}
{"sample_id": 5260, "db_id": "music_2", "final": {"question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  'A Kiss Before You Go: Live in Hamburg'", "source_tables": ["albums", "tracklists", "songs"]}}
{"sample_id": 5261, "db_id": "music_2", "final": {"question": "What are all the songs in albums under label \"Universal Music Group\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  'Universal Music Group'", "source_tables": ["albums", "tracklists", "songs"]}}
{"sample_id": 5262, "db_id": "music_2", "final": {"question": "What are the names of all the songs whose album is under the label of \"Universal Music Group\"?", "sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  'Universal Music Group'", "source_tables": ["albums", "tracklists", "songs"]}}
{"sample_id": 5263, "db_id": "music_2", "final": {"question": "Find the number of songs in all the studio albums.", "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  'Studio'", "source_tables": ["albums", "tracklists", "songs"]}}
{"sample_id": 5264, "db_id": "music_2", "final": {"question": "How many songs appear in studio albums?", "sql": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  'Studio'", "source_tables": ["albums", "tracklists", "songs"]}}
{"sample_id": 5329, "db_id": "manufactory_1", "final": {"question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "source_tables": ["products"]}}
{"sample_id": 5330, "db_id": "manufactory_1", "final": {"question": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "source_tables": ["products"]}}
{"sample_id": 5331, "db_id": "manufactory_1", "final": {"question": "Select all the data from the products and each product's manufacturer.", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5332, "db_id": "manufactory_1", "final": {"question": "What is all the product data, as well as  each product's manufacturer?", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5333, "db_id": "manufactory_1", "final": {"question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "source_tables": ["products"]}}
{"sample_id": 5334, "db_id": "manufactory_1", "final": {"question": "What are the average prices of products, grouped by manufacturer code?", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "source_tables": ["products"]}}
{"sample_id": 5335, "db_id": "manufactory_1", "final": {"question": "Select the average price of each manufacturer's products, showing the manufacturer's name.", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5336, "db_id": "manufactory_1", "final": {"question": "What are the average prices of products, grouped by manufacturer name?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5337, "db_id": "manufactory_1", "final": {"question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5338, "db_id": "manufactory_1", "final": {"question": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5339, "db_id": "manufactory_1", "final": {"question": "Select the name and price of the cheapest product.", "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 5340, "db_id": "manufactory_1", "final": {"question": "What is the name and price of the cheapest product?", "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1", "source_tables": ["products"]}}
{"sample_id": 5341, "db_id": "manufactory_1", "final": {"question": "Select the name of each manufacturer along with the name and price of its most expensive product.", "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5342, "db_id": "manufactory_1", "final": {"question": "For each manufacturer name, what are the names and prices of their most expensive product?", "sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5343, "db_id": "manufactory_1", "final": {"question": "Select the code of the product that is cheapest in each product category.", "sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name", "source_tables": ["products"]}}
{"sample_id": 5344, "db_id": "manufactory_1", "final": {"question": "What are the codes and names of the cheapest products in each category?", "sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name", "source_tables": ["products"]}}
{"sample_id": 5383, "db_id": "tracking_software_problems", "final": {"question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick' )", "source_tables": ["problems", "staff"]}}
{"sample_id": 5384, "db_id": "tracking_software_problems", "final": {"question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick' )", "source_tables": ["problems", "staff"]}}
{"sample_id": 5385, "db_id": "tracking_software_problems", "final": {"question": "Find the top 3 products which have the largest number of problems?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["problems", "product"]}}
{"sample_id": 5386, "db_id": "tracking_software_problems", "final": {"question": "What are the three products that have the most problems?s", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["problems", "product"]}}
{"sample_id": 5387, "db_id": "tracking_software_problems", "final": {"question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'voluptatem' AND T1.date_problem_reported > '1995'", "source_tables": ["problems", "product"]}}
{"sample_id": 5388, "db_id": "tracking_software_problems", "final": {"question": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'voluptatem' AND T1.date_problem_reported > '1995'", "source_tables": ["problems", "product"]}}
{"sample_id": 5389, "db_id": "tracking_software_problems", "final": {"question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?", "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'rem' EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'aut'", "source_tables": ["problems", "product", "staff"]}}
{"sample_id": 5390, "db_id": "tracking_software_problems", "final": {"question": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.", "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'rem' EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'aut'", "source_tables": ["problems", "product", "staff"]}}
{"sample_id": 5391, "db_id": "tracking_software_problems", "final": {"question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Lacey' AND T3.staff_last_name = 'Bosco' INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Kenton' AND T3.staff_last_name = 'Champlin'", "source_tables": ["problems", "product", "staff"]}}
{"sample_id": 5392, "db_id": "tracking_software_problems", "final": {"question": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Lacey' AND T3.staff_last_name = 'Bosco' INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Kenton' AND T3.staff_last_name = 'Champlin'", "source_tables": ["problems", "product", "staff"]}}
{"sample_id": 5428, "db_id": "shop_membership", "final": {"question": "What are the cities that do not have any branches with more than 100 members?", "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100", "source_tables": ["branch"]}}
{"sample_id": 5429, "db_id": "shop_membership", "final": {"question": "What is the sum of total pounds of purchase in year 2018 for all branches in London?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "source_tables": ["branch", "purchase"]}}
{"sample_id": 5430, "db_id": "shop_membership", "final": {"question": "How many total pounds were purchased in the year 2018 at all London branches?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "source_tables": ["branch", "purchase"]}}
{"sample_id": 5431, "db_id": "shop_membership", "final": {"question": "What is the total number of purchases for members with level 6?", "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6", "source_tables": ["member", "purchase"]}}
{"sample_id": 5432, "db_id": "shop_membership", "final": {"question": "What are the total purchases for members rated at level 6?", "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6", "source_tables": ["member", "purchase"]}}
{"sample_id": 5433, "db_id": "shop_membership", "final": {"question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.", "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'", "source_tables": ["member", "branch", "membership_register_branch"]}}
{"sample_id": 5434, "db_id": "shop_membership", "final": {"question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?", "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'", "source_tables": ["member", "branch", "membership_register_branch"]}}
{"sample_id": 5435, "db_id": "shop_membership", "final": {"question": "list the card number of all members whose hometown address includes word \"Kentucky\".", "sql": "SELECT card_number FROM member WHERE Hometown LIKE '%Kentucky%'", "source_tables": ["member"]}}
{"sample_id": 5436, "db_id": "shop_membership", "final": {"question": "What are the card numbers of members from Kentucky?", "sql": "SELECT card_number FROM member WHERE Hometown LIKE '%Kentucky%'", "source_tables": ["member"]}}
{"sample_id": 5494, "db_id": "voter_2", "final": {"question": "How many students does each advisor have?", "sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor", "source_tables": ["student"]}}
{"sample_id": 5495, "db_id": "voter_2", "final": {"question": "Report all advisors that advise more than 2 students.", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5496, "db_id": "voter_2", "final": {"question": "Which advisors have more than two students?", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5497, "db_id": "voter_2", "final": {"question": "Report all majors that have less than 3 students.", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "source_tables": ["student"]}}
{"sample_id": 5498, "db_id": "voter_2", "final": {"question": "What are the majors only less than three students are studying?", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "source_tables": ["student"]}}
{"sample_id": 5499, "db_id": "voter_2", "final": {"question": "For each election cycle, report the number of voting records.", "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "source_tables": ["voting_record"]}}
{"sample_id": 5500, "db_id": "voter_2", "final": {"question": "Count the number of voting records for each election cycle.", "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "source_tables": ["voting_record"]}}
{"sample_id": 5501, "db_id": "voter_2", "final": {"question": "Which major has the most students?", "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5502, "db_id": "voter_2", "final": {"question": "Find the major that is studied by the largest number of students.", "sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5503, "db_id": "voter_2", "final": {"question": "What is the most common major among female (sex is F) students?", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  'F' GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5504, "db_id": "voter_2", "final": {"question": "Find the major that is studied by the most female students.", "sql": "SELECT Major FROM STUDENT WHERE Sex  =  'F' GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5505, "db_id": "voter_2", "final": {"question": "What is the city_code of the city that the most students live in?", "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5506, "db_id": "voter_2", "final": {"question": "Return the code of the city that has the most students.", "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}}
{"sample_id": 5507, "db_id": "voter_2", "final": {"question": "Report the distinct advisors who have more than 2 students.", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5508, "db_id": "voter_2", "final": {"question": "Which advisors are advising more than 2 students?", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5577, "db_id": "products_gen_characteristics", "final": {"question": "What is the unit of measurement of product named \"cumin\"?", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'cumin'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5578, "db_id": "products_gen_characteristics", "final": {"question": "Give the unit of measure for the product with the name 'cumin'.", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'cumin'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5579, "db_id": "products_gen_characteristics", "final": {"question": "Find the unit of measurement and product category code of product named \"chervil\".", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'chervil'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5580, "db_id": "products_gen_characteristics", "final": {"question": "What are the unit of measure and category code for the 'chervil' product?", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'chervil'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5581, "db_id": "products_gen_characteristics", "final": {"question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  'white' AND t2.unit_of_measure != 'Handful'", "source_tables": ["ref_colors", "ref_product_categories", "products"]}}
{"sample_id": 5582, "db_id": "products_gen_characteristics", "final": {"question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  'white' AND t2.unit_of_measure != 'Handful'", "source_tables": ["ref_colors", "ref_product_categories", "products"]}}
{"sample_id": 5583, "db_id": "products_gen_characteristics", "final": {"question": "What is the description of the color for most products?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5584, "db_id": "products_gen_characteristics", "final": {"question": "Return the color description that is most common across all products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5585, "db_id": "products_gen_characteristics", "final": {"question": "What is the description of the color used by least products?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5586, "db_id": "products_gen_characteristics", "final": {"question": "Give the color description that is least common across products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5587, "db_id": "products_gen_characteristics", "final": {"question": "What is the characteristic name used by most number of the products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["product_characteristics", "characteristics", "products"]}}
{"sample_id": 5588, "db_id": "products_gen_characteristics", "final": {"question": "Return the name of the characteristic that is most common across all products.", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["product_characteristics", "characteristics", "products"]}}
{"sample_id": 5589, "db_id": "products_gen_characteristics", "final": {"question": "What are the names, details and data types of the characteristics which are never used by any product?", "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "source_tables": ["product_characteristics", "characteristics"]}}
{"sample_id": 5590, "db_id": "products_gen_characteristics", "final": {"question": "Give the names, details, and data types of characteristics that are not found in any product.", "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "source_tables": ["product_characteristics", "characteristics"]}}
{"sample_id": 5591, "db_id": "products_gen_characteristics", "final": {"question": "What are characteristic names used at least twice across all products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "source_tables": ["product_characteristics", "characteristics", "products"]}}
{"sample_id": 5592, "db_id": "products_gen_characteristics", "final": {"question": "Give the names of characteristics that are in two or more products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "source_tables": ["product_characteristics", "characteristics", "products"]}}
{"sample_id": 5593, "db_id": "products_gen_characteristics", "final": {"question": "How many colors are never used by any product?", "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5594, "db_id": "products_gen_characteristics", "final": {"question": "Count the number of colors that are not used in any products.", "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5619, "db_id": "swimming", "final": {"question": "Find the names of the swimmers who have no record.", "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)", "source_tables": ["swimmer", "record"]}}
{"sample_id": 5620, "db_id": "swimming", "final": {"question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'", "source_tables": ["swimmer", "record"]}}
{"sample_id": 5621, "db_id": "swimming", "final": {"question": "Find the names of stadiums that some Australian swimmers have been to.", "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'", "source_tables": ["stadium", "swimmer", "event", "record"]}}
{"sample_id": 5622, "db_id": "swimming", "final": {"question": "Find the names of stadiums that the most swimmers have been to.", "sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["stadium", "event", "record"]}}
{"sample_id": 5623, "db_id": "swimming", "final": {"question": "Find all details for each swimmer.", "sql": "SELECT * FROM swimmer", "source_tables": ["swimmer"]}}
{"sample_id": 5624, "db_id": "swimming", "final": {"question": "What is the average capacity of the stadiums that were opened in year 2005?", "sql": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005", "source_tables": ["stadium"]}}
{"sample_id": 5641, "db_id": "railway", "final": {"question": "List the object number of railways that do not have any trains.", "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)", "source_tables": ["railway", "train"]}}
{"sample_id": 5642, "db_id": "railway", "final": {"question": "Show the countries that have both managers of age above 50 and managers of age below 46.", "sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46", "source_tables": ["manager"]}}
{"sample_id": 5643, "db_id": "railway", "final": {"question": "Show the distinct countries of managers.", "sql": "SELECT DISTINCT Country FROM manager", "source_tables": ["manager"]}}
{"sample_id": 5644, "db_id": "railway", "final": {"question": "Show the working years of managers in descending order of their level.", "sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC", "source_tables": ["manager"]}}
{"sample_id": 5645, "db_id": "railway", "final": {"question": "Show the countries that have managers of age above 50 or below 46.", "sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46", "source_tables": ["manager"]}}
{"sample_id": 5658, "db_id": "customers_and_products_contacts", "final": {"question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 5659, "db_id": "customers_and_products_contacts", "final": {"question": "What are the name and phone of the customer with the most ordered product quantity?", "sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1", "source_tables": ["customers", "order_items", "customer_orders"]}}
{"sample_id": 5660, "db_id": "customers_and_products_contacts", "final": {"question": "Show the product type and name for the products with price higher than 1000 or lower than 500.", "sql": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500", "source_tables": ["products"]}}
{"sample_id": 5741, "db_id": "dorm_1", "final": {"question": "Find the number of female students (with F sex) living in Smith Hall", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "source_tables": ["lives_in", "dorm", "student"]}}
{"sample_id": 5742, "db_id": "dorm_1", "final": {"question": "How many female students live in Smith Hall?", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "source_tables": ["lives_in", "dorm", "student"]}}
{"sample_id": 5743, "db_id": "dorm_1", "final": {"question": "Find the name of amenities Smith Hall dorm have.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "source_tables": ["dorm_amenity", "dorm", "has_amenity"]}}
{"sample_id": 5744, "db_id": "dorm_1", "final": {"question": "What are the names of the amenities that Smith Hall has?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "source_tables": ["dorm_amenity", "dorm", "has_amenity"]}}
{"sample_id": 5745, "db_id": "dorm_1", "final": {"question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "source_tables": ["dorm_amenity", "dorm", "has_amenity"]}}
{"sample_id": 5746, "db_id": "dorm_1", "final": {"question": "What amenities does Smith Hall have in alphabetical order?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "source_tables": ["dorm_amenity", "dorm", "has_amenity"]}}
{"sample_id": 5747, "db_id": "dorm_1", "final": {"question": "Find the name of amenity that is most common in all dorms.", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dorm_amenity", "has_amenity"]}}
{"sample_id": 5748, "db_id": "dorm_1", "final": {"question": "What is the most common amenity in the dorms?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dorm_amenity", "has_amenity"]}}
{"sample_id": 5749, "db_id": "dorm_1", "final": {"question": "Find the first name of students who are living in the dorm that has most number of amenities.", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["dorm_amenity", "student", "has_amenity", "lives_in", "dorm"]}}
{"sample_id": 5750, "db_id": "dorm_1", "final": {"question": "What are the first names of all students who live in the dorm with the most amenities?", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["dorm_amenity", "student", "has_amenity", "lives_in", "dorm"]}}
{"sample_id": 5751, "db_id": "dorm_1", "final": {"question": "Find the name and capacity of the dorm with least number of amenities.", "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "source_tables": ["dorm_amenity", "dorm", "has_amenity"]}}
{"sample_id": 5752, "db_id": "dorm_1", "final": {"question": "What is the name and capacity of the dorm with the fewest amount of amenities?", "sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1", "source_tables": ["dorm_amenity", "dorm", "has_amenity"]}}
{"sample_id": 5753, "db_id": "dorm_1", "final": {"question": "Find the name of dorms that do not have amenity TV Lounge.", "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "source_tables": ["dorm_amenity", "dorm", "has_amenity"]}}
{"sample_id": 5754, "db_id": "dorm_1", "final": {"question": "What are the names of the dorm that does not have a TV Lounge?", "sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'", "source_tables": ["dorm_amenity", "dorm", "has_amenity"]}}
{"sample_id": 5755, "db_id": "dorm_1", "final": {"question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.", "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["dorm_amenity", "lives_in", "student", "has_amenity"]}}
{"sample_id": 5756, "db_id": "dorm_1", "final": {"question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?", "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["dorm_amenity", "lives_in", "student", "has_amenity"]}}
{"sample_id": 5757, "db_id": "dorm_1", "final": {"question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["dorm_amenity", "lives_in", "student", "has_amenity"]}}
{"sample_id": 5758, "db_id": "dorm_1", "final": {"question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "source_tables": ["dorm_amenity", "lives_in", "student", "has_amenity"]}}
{"sample_id": 5759, "db_id": "dorm_1", "final": {"question": "Find the name of amenities of the dorm where the student with last name Smith is living in.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "source_tables": ["dorm_amenity", "student", "has_amenity", "lives_in", "dorm"]}}
{"sample_id": 5760, "db_id": "dorm_1", "final": {"question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'", "source_tables": ["dorm_amenity", "student", "has_amenity", "lives_in", "dorm"]}}
{"sample_id": 5797, "db_id": "customer_complaints", "final": {"question": "How many distinct complaint type codes are there in the database?", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "source_tables": ["complaints"]}}
{"sample_id": 5798, "db_id": "customer_complaints", "final": {"question": "Count the number of different complaint type codes.", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "source_tables": ["complaints"]}}
{"sample_id": 5799, "db_id": "customer_complaints", "final": {"question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  'vbogisich@example.org'", "source_tables": ["customers"]}}
{"sample_id": 5800, "db_id": "customer_complaints", "final": {"question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  'vbogisich@example.org'", "source_tables": ["customers"]}}
{"sample_id": 5801, "db_id": "customer_complaints", "final": {"question": "Find the number of complaints with Product Failure type for each complaint status.", "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  'Product Failure' GROUP BY complaint_status_code", "source_tables": ["complaints"]}}
{"sample_id": 5802, "db_id": "customer_complaints", "final": {"question": "Of complaints with the type code \"Product Failure\", how many had each different status code?", "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  'Product Failure' GROUP BY complaint_status_code", "source_tables": ["complaints"]}}
{"sample_id": 5803, "db_id": "customer_complaints", "final": {"question": "What is first names of the top 5 staff who have handled the greatest number of complaints?", "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "source_tables": ["complaints", "staff"]}}
{"sample_id": 5804, "db_id": "customer_complaints", "final": {"question": "Return the first names of the 5 staff members who have handled the most complaints.", "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "source_tables": ["complaints", "staff"]}}
{"sample_id": 5805, "db_id": "customer_complaints", "final": {"question": "Which state has the most customers?", "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 5806, "db_id": "customer_complaints", "final": {"question": "Give the state that has the most customers.", "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 5831, "db_id": "workshop_paper", "final": {"question": "Show the authors who have submissions to more than one workshop.", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5832, "db_id": "workshop_paper", "final": {"question": "Which authors have submitted to more than one workshop?", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5833, "db_id": "workshop_paper", "final": {"question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "source_tables": ["workshop"]}}
{"sample_id": 5834, "db_id": "workshop_paper", "final": {"question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "source_tables": ["workshop"]}}
{"sample_id": 5835, "db_id": "workshop_paper", "final": {"question": "List the authors who do not have submission to any workshop.", "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5836, "db_id": "workshop_paper", "final": {"question": "Which authors did not submit to any workshop?", "sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)", "source_tables": ["acceptance", "submission"]}}
{"sample_id": 5869, "db_id": "tracking_share_transactions", "final": {"question": "Show the transaction type code that occurs the most frequently.", "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["transactions"]}}
{"sample_id": 5870, "db_id": "tracking_share_transactions", "final": {"question": "Show the description of the transaction type that occurs most frequently.", "sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["transactions", "ref_transaction_types"]}}
{"sample_id": 5871, "db_id": "tracking_share_transactions", "final": {"question": "Show the id and details of the investor that has the largest number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["investors", "transactions"]}}
{"sample_id": 5872, "db_id": "tracking_share_transactions", "final": {"question": "Show the id and details for the investors who have the top 3 number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3", "source_tables": ["investors", "transactions"]}}
{"sample_id": 5873, "db_id": "tracking_share_transactions", "final": {"question": "Show the ids of the investors who have at least two transactions.", "sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "source_tables": ["investors", "transactions"]}}
{"sample_id": 5874, "db_id": "tracking_share_transactions", "final": {"question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  'SALE' GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "source_tables": ["investors", "transactions"]}}
{"sample_id": 5875, "db_id": "tracking_share_transactions", "final": {"question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100", "source_tables": ["transactions"]}}
{"sample_id": 5876, "db_id": "tracking_share_transactions", "final": {"question": "What are the details of all sales and purchases?", "sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases", "source_tables": ["sales", "purchases"]}}
{"sample_id": 5877, "db_id": "tracking_share_transactions", "final": {"question": "What are the details of the lots which are not used in any transactions?", "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id", "source_tables": ["transactions_lots", "lots"]}}
{"sample_id": 5945, "db_id": "cre_Theme_park", "final": {"question": "What are the name, id and the corresponding number of visits for each  tourist attraction?", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "source_tables": ["visits", "tourist_attractions"]}}
{"sample_id": 5946, "db_id": "cre_Theme_park", "final": {"question": "Show the names and ids of tourist attractions that are visited at least two times.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "source_tables": ["visits", "tourist_attractions"]}}
{"sample_id": 5947, "db_id": "cre_Theme_park", "final": {"question": "Which tourist attractions are visited at least twice? Give me their names and ids.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "source_tables": ["visits", "tourist_attractions"]}}
{"sample_id": 5948, "db_id": "cre_Theme_park", "final": {"question": "Show the names and ids of tourist attractions that are visited at most once.", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "source_tables": ["visits", "tourist_attractions"]}}
{"sample_id": 5949, "db_id": "cre_Theme_park", "final": {"question": "What are the names and ids of the tourist attractions that are visited at most once?", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "source_tables": ["visits", "tourist_attractions"]}}
{"sample_id": 5950, "db_id": "cre_Theme_park", "final": {"question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '660 Shea Crescent' OR T2.How_to_Get_There  =  'walk'", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5951, "db_id": "cre_Theme_park", "final": {"question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '660 Shea Crescent' OR T2.How_to_Get_There  =  'walk'", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5952, "db_id": "cre_Theme_park", "final": {"question": "What are the names of the tourist attractions that have parking or shopping as their feature details?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "source_tables": ["features", "tourist_attractions", "tourist_attraction_features"]}}
{"sample_id": 5953, "db_id": "cre_Theme_park", "final": {"question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "source_tables": ["features", "tourist_attractions", "tourist_attraction_features"]}}
{"sample_id": 5954, "db_id": "cre_Theme_park", "final": {"question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '254 Ottilie Junction' OR T2.How_to_Get_There  =  'bus'", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5955, "db_id": "cre_Theme_park", "final": {"question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '254 Ottilie Junction' OR T2.How_to_Get_There  =  'bus'", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5956, "db_id": "cre_Theme_park", "final": {"question": "What are the names of the tourist attractions Vincent and Marcelle visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Marcelle'", "source_tables": ["visitors", "tourist_attractions", "visits"]}}
{"sample_id": 5957, "db_id": "cre_Theme_park", "final": {"question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Marcelle'", "source_tables": ["visitors", "tourist_attractions", "visits"]}}
{"sample_id": 5958, "db_id": "cre_Theme_park", "final": {"question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Alison' EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Rosalind'", "source_tables": ["visitors", "tourist_attractions", "visits"]}}
{"sample_id": 5959, "db_id": "cre_Theme_park", "final": {"question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Alison' EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  'Rosalind'", "source_tables": ["visitors", "tourist_attractions", "visits"]}}
{"sample_id": 5960, "db_id": "cre_Theme_park", "final": {"question": "How many tourists did not make any visit?", "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "source_tables": ["visitors", "visits"]}}
{"sample_id": 5961, "db_id": "cre_Theme_park", "final": {"question": "Count the number of tourists who did not visit any place.", "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "source_tables": ["visitors", "visits"]}}
{"sample_id": 6030, "db_id": "game_1", "final": {"question": "Show ids of students who play video game and play sports.", "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "source_tables": ["sportsinfo", "plays_games"]}}
{"sample_id": 6031, "db_id": "game_1", "final": {"question": "What are the ids of all students who played video games and sports?", "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "source_tables": ["sportsinfo", "plays_games"]}}
{"sample_id": 6032, "db_id": "game_1", "final": {"question": "Show all game ids and the number of hours played.", "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid", "source_tables": ["plays_games"]}}
{"sample_id": 6033, "db_id": "game_1", "final": {"question": "What are ids and total number of hours played for each game?", "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid", "source_tables": ["plays_games"]}}
{"sample_id": 6034, "db_id": "game_1", "final": {"question": "Show all student ids and the number of hours played.", "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid", "source_tables": ["plays_games"]}}
{"sample_id": 6035, "db_id": "game_1", "final": {"question": "What are the ids of all students and number of hours played?", "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid", "source_tables": ["plays_games"]}}
{"sample_id": 6036, "db_id": "game_1", "final": {"question": "Show the game name that has most number of hours played.", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 6037, "db_id": "game_1", "final": {"question": "What is the name of the game that has been played the most?", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 6038, "db_id": "game_1", "final": {"question": "Show all game names played by at least 1000 hours.", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 6039, "db_id": "game_1", "final": {"question": "What are the names of all the games that have been played for at least 1000 hours?", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 6040, "db_id": "game_1", "final": {"question": "Show all game names played by Linda Smith", "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  'Smith' AND T3.Fname  =  'Linda'", "source_tables": ["video_games", "student", "plays_games"]}}
{"sample_id": 6041, "db_id": "game_1", "final": {"question": "What are the names of all games played by Linda Smith?", "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  'Smith' AND T3.Fname  =  'Linda'", "source_tables": ["video_games", "student", "plays_games"]}}
{"sample_id": 6042, "db_id": "game_1", "final": {"question": "Find the last and first name of students who are playing Football or Lacrosse.", "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  'Football' OR T1.SportName  =  'Lacrosse'", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6043, "db_id": "game_1", "final": {"question": "What is the first and last name of all students who play Football or Lacrosse?", "sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  'Football' OR T1.SportName  =  'Lacrosse'", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6044, "db_id": "game_1", "final": {"question": "Find the first name and age of the students who are playing both Football and Lacrosse.", "sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  'Football' INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  'Lacrosse')", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6045, "db_id": "game_1", "final": {"question": "What are the first names and ages of all students who are playing both Football and Lacrosse?", "sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  'Football' INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  'Lacrosse')", "source_tables": ["sportsinfo", "student"]}}
{"sample_id": 6046, "db_id": "game_1", "final": {"question": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.", "sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Call of Destiny' INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Works of Widenius')", "source_tables": ["video_games", "plays_games", "student"]}}
{"sample_id": 6047, "db_id": "game_1", "final": {"question": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?", "sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Call of Destiny' INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  'Works of Widenius')", "source_tables": ["video_games", "plays_games", "student"]}}
{"sample_id": 6118, "db_id": "customers_and_addresses", "final": {"question": "Find the total amount of products ordered before 2018-03-17 07:13:53.", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  '2018-03-17 07:13:53'", "source_tables": ["order_items", "customer_orders"]}}
{"sample_id": 6119, "db_id": "customers_and_addresses", "final": {"question": "What is the total amount of products purchased before 2018-03-17 07:13:53?", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  '2018-03-17 07:13:53'", "source_tables": ["order_items", "customer_orders"]}}
{"sample_id": 6120, "db_id": "customers_and_addresses", "final": {"question": "Who made the latest order?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6121, "db_id": "customers_and_addresses", "final": {"question": "Find the name of the customer who made an order most recently.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6122, "db_id": "customers_and_addresses", "final": {"question": "Which product has been ordered most number of times?", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6123, "db_id": "customers_and_addresses", "final": {"question": "What is the most frequently ordered product? Tell me the detail of the product", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6124, "db_id": "customers_and_addresses", "final": {"question": "Find the name and ID of the product whose total order quantity is the largest.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6125, "db_id": "customers_and_addresses", "final": {"question": "What are the name and ID of the product bought the most.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6126, "db_id": "customers_and_addresses", "final": {"question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "sql": "SELECT address_content FROM addresses WHERE city  =  'East Julianaside' AND state_province_county  =  'Texas' UNION SELECT address_content FROM addresses WHERE city  =  'Gleasonmouth' AND state_province_county  =  'Arizona'", "source_tables": ["addresses"]}}
{"sample_id": 6127, "db_id": "customers_and_addresses", "final": {"question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "sql": "SELECT address_content FROM addresses WHERE city  =  'East Julianaside' AND state_province_county  =  'Texas' UNION SELECT address_content FROM addresses WHERE city  =  'Gleasonmouth' AND state_province_county  =  'Arizona'", "source_tables": ["addresses"]}}
{"sample_id": 6128, "db_id": "customers_and_addresses", "final": {"question": "Find the name of customers who did not pay with Cash.", "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "source_tables": ["customers"]}}
{"sample_id": 6129, "db_id": "customers_and_addresses", "final": {"question": "What is the name of customers who do not use Cash as payment method.", "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "source_tables": ["customers"]}}
{"sample_id": 6130, "db_id": "customers_and_addresses", "final": {"question": "Find the names of customers who never ordered product Latte.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "source_tables": ["customers", "order_items", "customer_orders", "products"]}}
{"sample_id": 6131, "db_id": "customers_and_addresses", "final": {"question": "What are names of customers who never ordered product Latte.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "source_tables": ["customers", "order_items", "customer_orders", "products"]}}
{"sample_id": 6132, "db_id": "customers_and_addresses", "final": {"question": "Find the names of customers who never placed an order.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6133, "db_id": "customers_and_addresses", "final": {"question": "What are the names of customers who never made an order.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "source_tables": ["customers", "customer_orders"]}}
{"sample_id": 6134, "db_id": "customers_and_addresses", "final": {"question": "Find the names of customers who ordered both products Latte and Americano.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "source_tables": ["customers", "order_items", "customer_orders", "products"]}}
{"sample_id": 6135, "db_id": "customers_and_addresses", "final": {"question": "What are the names of customers who have purchased both products Latte and Americano?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "source_tables": ["customers", "order_items", "customer_orders", "products"]}}
{"sample_id": 6184, "db_id": "music_4", "final": {"question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "source_tables": ["artist", "volume"]}}
{"sample_id": 6185, "db_id": "music_4", "final": {"question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "source_tables": ["artist", "volume"]}}
{"sample_id": 6186, "db_id": "music_4", "final": {"question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  'Best Song' AND RESULT  =  'Awarded'", "source_tables": ["music_festival"]}}
{"sample_id": 6187, "db_id": "music_4", "final": {"question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  'Best Song' AND RESULT  =  'Awarded'", "source_tables": ["music_festival"]}}
{"sample_id": 6188, "db_id": "music_4", "final": {"question": "What is the issue date of the volume with the minimum weeks on top?", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "source_tables": ["volume"]}}
{"sample_id": 6189, "db_id": "music_4", "final": {"question": "Return the issue date of the volume that has spent the fewest weeks on top.", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "source_tables": ["volume"]}}
{"sample_id": 6190, "db_id": "music_4", "final": {"question": "How many distinct artists have volumes?", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}}
{"sample_id": 6191, "db_id": "music_4", "final": {"question": "Count the number of artists who have had volumes.", "sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "source_tables": ["volume"]}}
{"sample_id": 6192, "db_id": "music_4", "final": {"question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.", "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "source_tables": ["music_festival"]}}
{"sample_id": 6193, "db_id": "music_4", "final": {"question": "How many music festivals have had each kind of result, ordered descending by count?", "sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "source_tables": ["music_festival"]}}
{"sample_id": 6194, "db_id": "music_4", "final": {"question": "What are the issue dates of volumes associated with the artist aged 23 or younger?", "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "source_tables": ["artist", "volume"]}}
{"sample_id": 6195, "db_id": "music_4", "final": {"question": "Return the issue dates of volumes by artists who are at most 23 years old?", "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "source_tables": ["artist", "volume"]}}
{"sample_id": 6209, "db_id": "roller_coaster", "final": {"question": "Show the name and population of the country that has the highest roller coaster.", "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["country", "roller_coaster"]}}
{"sample_id": 6210, "db_id": "roller_coaster", "final": {"question": "Show the names of countries and the average speed of roller coasters from each country.", "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name", "source_tables": ["country", "roller_coaster"]}}
{"sample_id": 6211, "db_id": "roller_coaster", "final": {"question": "How many countries do not have an roller coaster longer than 3000?", "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )", "source_tables": ["country", "roller_coaster"]}}
{"sample_id": 6212, "db_id": "roller_coaster", "final": {"question": "What are the country names, area and population which has both roller coasters with speed higher", "sql": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55", "source_tables": ["country", "roller_coaster"]}}
{"sample_id": 6251, "db_id": "ship_1", "final": {"question": "Find the name of the ships that have more than one captain.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "source_tables": ["captain", "ship"]}}
{"sample_id": 6252, "db_id": "ship_1", "final": {"question": "What are the names of ships that have more than one captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "source_tables": ["captain", "ship"]}}
{"sample_id": 6253, "db_id": "ship_1", "final": {"question": "what are the names and classes of the ships that do not have any captain yet?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "source_tables": ["captain", "ship"]}}
{"sample_id": 6254, "db_id": "ship_1", "final": {"question": "Return the names and classes of ships that do not have a captain?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "source_tables": ["captain", "ship"]}}
{"sample_id": 6255, "db_id": "ship_1", "final": {"question": "Find the name of the ship that is steered by the youngest captain.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "source_tables": ["captain", "ship"]}}
{"sample_id": 6256, "db_id": "ship_1", "final": {"question": "What is the name of the ship that is commanded by the youngest captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "source_tables": ["captain", "ship"]}}
{"sample_id": 6257, "db_id": "ship_1", "final": {"question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.", "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "source_tables": ["captain", "ship"]}}
{"sample_id": 6258, "db_id": "ship_1", "final": {"question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?", "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "source_tables": ["captain", "ship"]}}
{"sample_id": 6259, "db_id": "ship_1", "final": {"question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "source_tables": ["captain", "ship"]}}
{"sample_id": 6260, "db_id": "ship_1", "final": {"question": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "source_tables": ["captain", "ship"]}}
{"sample_id": 6293, "db_id": "city_record", "final": {"question": "Find the number of matches in different competitions.", "sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition", "source_tables": ["match"]}}
{"sample_id": 6294, "db_id": "city_record", "final": {"question": "For each competition, count the number of matches.", "sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition", "source_tables": ["match"]}}
{"sample_id": 6295, "db_id": "city_record", "final": {"question": "List venues of all matches in the order of their dates starting from the most recent one.", "sql": "SELECT venue FROM MATCH ORDER BY date DESC", "source_tables": ["match"]}}
{"sample_id": 6296, "db_id": "city_record", "final": {"question": "What are the venues of all the matches? Sort them in the descending order of match date.", "sql": "SELECT venue FROM MATCH ORDER BY date DESC", "source_tables": ["match"]}}
{"sample_id": 6297, "db_id": "city_record", "final": {"question": "what is the GDP of the city with the largest population.", "sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 6298, "db_id": "city_record", "final": {"question": "Find the GDP of the city with the largest regional population.", "sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1", "source_tables": ["city"]}}
{"sample_id": 6299, "db_id": "city_record", "final": {"question": "What are the GDP and population of the city that already served as a host more than once?", "sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1", "source_tables": ["hosting_city", "city"]}}
{"sample_id": 6300, "db_id": "city_record", "final": {"question": "Which cities have served as host cities more than once? Return me their GDP and population.", "sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1", "source_tables": ["hosting_city", "city"]}}
{"sample_id": 6333, "db_id": "e_government", "final": {"question": "Which is the email of the party that has used the services the most number of times?", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party_services", "parties"]}}
{"sample_id": 6334, "db_id": "e_government", "final": {"question": "Return the party email that has used party services the greatest number of times.", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "source_tables": ["party_services", "parties"]}}
{"sample_id": 6335, "db_id": "e_government", "final": {"question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'", "source_tables": ["addresses"]}}
{"sample_id": 6336, "db_id": "e_government", "final": {"question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'", "source_tables": ["addresses"]}}
{"sample_id": 6337, "db_id": "e_government", "final": {"question": "What is the name of organization that has the greatest number of contact individuals?", "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["organization_contact_individuals", "organizations"]}}
{"sample_id": 6338, "db_id": "e_government", "final": {"question": "Return the name of the organization which has the most contact individuals.", "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["organization_contact_individuals", "organizations"]}}
{"sample_id": 6339, "db_id": "e_government", "final": {"question": "Find the last name of the individuals that have been contact individuals of an organization.", "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id", "source_tables": ["individuals", "organization_contact_individuals"]}}
{"sample_id": 6340, "db_id": "e_government", "final": {"question": "What are the last names of individuals who have been contact individuals for an organization?", "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id", "source_tables": ["individuals", "organization_contact_individuals"]}}
{"sample_id": 6355, "db_id": "school_bus", "final": {"question": "Show the type of school and the number of buses for each type.", "sql": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type", "source_tables": ["school_bus", "school"]}}
{"sample_id": 6356, "db_id": "school_bus", "final": {"question": "How many drivers are from Hartford city or younger than 40?", "sql": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40", "source_tables": ["driver"]}}
{"sample_id": 6357, "db_id": "school_bus", "final": {"question": "List names for drivers from Hartford city and younger than 40.", "sql": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40", "source_tables": ["driver"]}}
{"sample_id": 6358, "db_id": "school_bus", "final": {"question": "find the name of driver who is driving the school bus with the longest working history.", "sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1", "source_tables": ["school_bus", "driver"]}}
{"sample_id": 6374, "db_id": "flight_company", "final": {"question": "How many companies operates airlines in each airport?", "sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id", "source_tables": ["operate_company", "airport", "flight"]}}
{"sample_id": 6375, "db_id": "flight_company", "final": {"question": "how many airports are there in each country?", "sql": "SELECT count(*) ,  country FROM airport GROUP BY country", "source_tables": ["airport"]}}
{"sample_id": 6376, "db_id": "flight_company", "final": {"question": "which countries have more than 2 airports?", "sql": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2", "source_tables": ["airport"]}}
{"sample_id": 6377, "db_id": "flight_company", "final": {"question": "which pilot is in charge of the most number of flights?", "sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flight"]}}
{"sample_id": 6445, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the ids for documents that have the budget description 'Government'.", "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  'Government'", "source_tables": ["documents_with_expenses", "ref_budget_codes"]}}
{"sample_id": 6446, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show budget type codes and the number of documents in each budget type.", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6447, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the different budget type codes, and how many documents are there for each?", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6448, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the budget type code with most number of documents.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6449, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the budget type code that is most common among documents with expenses.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6450, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids of documents which don't have expense budgets?", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6451, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the ids of documents that do not have expenses.", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6452, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show ids for all documents in type CV without expense budgets.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  'CV' EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6453, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids of documents with the type code CV that do not have expenses.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  'CV' EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6454, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids of documents with letter 's' in the name with any expense budgets.", "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6455, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the ids of documents that have expenses and contain the letter s in their names.", "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6456, "db_id": "cre_Docs_and_Epenses", "final": {"question": "How many documents do not have any expense?", "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6457, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Count the number of documents that do not have expenses.", "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6458, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?", "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6459, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.", "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6460, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the account details with the largest value or with value having char '5' in it?", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE '%5%'", "source_tables": ["accounts"]}}
{"sample_id": 6461, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the account details with the greatest value, as well as those that include the character 5.", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE '%5%'", "source_tables": ["accounts"]}}
{"sample_id": 6500, "db_id": "scientist_1", "final": {"question": "Find the name of scientists who are not assigned to any project.", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["scientists", "assignedto"]}}
{"sample_id": 6501, "db_id": "scientist_1", "final": {"question": "What are the names of scientists who have not been assigned a project?", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["scientists", "assignedto"]}}
{"sample_id": 6502, "db_id": "scientist_1", "final": {"question": "Find the number of scientists who are not assigned to any project.", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["scientists", "assignedto"]}}
{"sample_id": 6503, "db_id": "scientist_1", "final": {"question": "How many scientists do not have any projects assigned to them?", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["scientists", "assignedto"]}}
{"sample_id": 6504, "db_id": "scientist_1", "final": {"question": "Find the names of scientists who are not working on the project with the highest hours.", "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["scientists", "assignedto", "projects"]}}
{"sample_id": 6505, "db_id": "scientist_1", "final": {"question": "What are the names of scientists who are not working on the project with the most hours?", "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["scientists", "assignedto", "projects"]}}
{"sample_id": 6506, "db_id": "scientist_1", "final": {"question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.", "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "source_tables": ["scientists", "assignedto", "projects"]}}
{"sample_id": 6507, "db_id": "scientist_1", "final": {"question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.", "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "source_tables": ["scientists", "assignedto", "projects"]}}
{"sample_id": 6508, "db_id": "scientist_1", "final": {"question": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.", "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "source_tables": ["assignedto", "scientists", "projects"]}}
{"sample_id": 6509, "db_id": "scientist_1", "final": {"question": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?", "sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "source_tables": ["assignedto", "scientists", "projects"]}}
{"sample_id": 6575, "db_id": "wine_1", "final": {"question": "What are the countries for appelations with at most 3 wines?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6576, "db_id": "wine_1", "final": {"question": "What are the names of wines whose production year are before the year of all wines by Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  'Brander')", "source_tables": ["wine"]}}
{"sample_id": 6577, "db_id": "wine_1", "final": {"question": "What are the names of wines produced before any wine from the Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  'Brander')", "source_tables": ["wine"]}}
{"sample_id": 6578, "db_id": "wine_1", "final": {"question": "What are the names of wines that are more expensive then all wines made in the year 2006?", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "source_tables": ["wine"]}}
{"sample_id": 6579, "db_id": "wine_1", "final": {"question": "Give the names of wines with prices above any wine produced in 2006.", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "source_tables": ["wine"]}}
{"sample_id": 6580, "db_id": "wine_1", "final": {"question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6581, "db_id": "wine_1", "final": {"question": "Which 3 wineries produce the most wines made from white grapes?", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "source_tables": ["grapes", "wine"]}}
{"sample_id": 6582, "db_id": "wine_1", "final": {"question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "source_tables": ["wine"]}}
{"sample_id": 6583, "db_id": "wine_1", "final": {"question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?", "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "source_tables": ["wine"]}}
{"sample_id": 6584, "db_id": "wine_1", "final": {"question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "source_tables": ["wine"]}}
{"sample_id": 6585, "db_id": "wine_1", "final": {"question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "source_tables": ["wine"]}}
{"sample_id": 6586, "db_id": "wine_1", "final": {"question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  'Central Coast'", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6587, "db_id": "wine_1", "final": {"question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  'Central Coast'", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6588, "db_id": "wine_1", "final": {"question": "Find the average price of wines that are not produced from Sonoma county.", "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6589, "db_id": "wine_1", "final": {"question": "What is the average price for wines not produced in Sonoma county?", "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6590, "db_id": "wine_1", "final": {"question": "Find the county where produces the most number of wines with score higher than 90.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6591, "db_id": "wine_1", "final": {"question": "What is the county that produces the most wines scoring higher than 90?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6610, "db_id": "train_station", "final": {"question": "Show all locations with only 1 station.", "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1", "source_tables": ["station"]}}
{"sample_id": 6611, "db_id": "train_station", "final": {"question": "Show station names without any trains.", "sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)", "source_tables": ["station", "train_station"]}}
{"sample_id": 6612, "db_id": "train_station", "final": {"question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Guruvayur Express'", "source_tables": ["station", "train_station", "train"]}}
{"sample_id": 6613, "db_id": "train_station", "final": {"question": "Find the names of the trains that do not pass any station located in London.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  'London')", "source_tables": ["station", "train_station", "train"]}}
{"sample_id": 6614, "db_id": "train_station", "final": {"question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.", "sql": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges", "source_tables": ["station"]}}
{"sample_id": 6689, "db_id": "driving_school", "final": {"question": "List all payment methods and number of payments using each payment methods.", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "source_tables": ["customer_payments"]}}
{"sample_id": 6690, "db_id": "driving_school", "final": {"question": "For each payment method, how many payments were made?", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "source_tables": ["customer_payments"]}}
{"sample_id": 6691, "db_id": "driving_school", "final": {"question": "How many lessons were in cancelled state?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = 'Cancelled';", "source_tables": ["lessons"]}}
{"sample_id": 6692, "db_id": "driving_school", "final": {"question": "How many lessons have been cancelled?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = 'Cancelled';", "source_tables": ["lessons"]}}
{"sample_id": 6693, "db_id": "driving_school", "final": {"question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%';", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6694, "db_id": "driving_school", "final": {"question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%';", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6695, "db_id": "driving_school", "final": {"question": "How many lessons taught by staff whose first name has letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6696, "db_id": "driving_school", "final": {"question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6697, "db_id": "driving_school", "final": {"question": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6698, "db_id": "driving_school", "final": {"question": "What is the total time for all lessons taught by Janessa Sawayn?", "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6699, "db_id": "driving_school", "final": {"question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6700, "db_id": "driving_school", "final": {"question": "What is the average price for a lesson taught by Janessa Sawayn?", "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6701, "db_id": "driving_school", "final": {"question": "How many lesson does customer with first name Ray took?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Ray'", "source_tables": ["customers", "lessons"]}}
{"sample_id": 6702, "db_id": "driving_school", "final": {"question": "How many lessons did the customer with the first name Ray take?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Ray'", "source_tables": ["customers", "lessons"]}}
{"sample_id": 6703, "db_id": "driving_school", "final": {"question": "Which last names are both used by customers and by staff?", "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "source_tables": ["customers", "staff"]}}
{"sample_id": 6704, "db_id": "driving_school", "final": {"question": "What are the last names that are used by customers and staff?", "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "source_tables": ["customers", "staff"]}}
{"sample_id": 6705, "db_id": "driving_school", "final": {"question": "What is the first name of the staff who did not give any lesson?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6706, "db_id": "driving_school", "final": {"question": "What is the first name of all employees who do not give any lessons?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "source_tables": ["lessons", "staff"]}}
{"sample_id": 6707, "db_id": "driving_school", "final": {"question": "What is the id and detail of the vehicle used in lessons for most of the times?", "sql": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["vehicles", "lessons"]}}
{"sample_id": 6778, "db_id": "activity_1", "final": {"question": "What is the name of the activity that has the most faculty members involved in?", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "faculty_participates_in"]}}
{"sample_id": 6779, "db_id": "activity_1", "final": {"question": "Which activity has the most faculty members participating in? Find the activity name.", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "faculty_participates_in"]}}
{"sample_id": 6780, "db_id": "activity_1", "final": {"question": "Show the ids of the students who don't participate in any activity.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "source_tables": ["participates_in", "student"]}}
{"sample_id": 6781, "db_id": "activity_1", "final": {"question": "What are the ids of the students who are not involved in any activity", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "source_tables": ["participates_in", "student"]}}
{"sample_id": 6782, "db_id": "activity_1", "final": {"question": "Show the ids for all the students who participate in an activity and are under 20.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "source_tables": ["participates_in", "student"]}}
{"sample_id": 6783, "db_id": "activity_1", "final": {"question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "source_tables": ["participates_in", "student"]}}
{"sample_id": 6784, "db_id": "activity_1", "final": {"question": "What is the first and last name of the student participating in the most activities?", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["participates_in", "student"]}}
{"sample_id": 6785, "db_id": "activity_1", "final": {"question": "Tell me the first and last name of the student who has the most activities.", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["participates_in", "student"]}}
{"sample_id": 6786, "db_id": "activity_1", "final": {"question": "What is the name of the activity with the most students?", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["participates_in", "activity"]}}
{"sample_id": 6787, "db_id": "activity_1", "final": {"question": "Find the name of the activity that has the largest number of student participants.", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["participates_in", "activity"]}}
{"sample_id": 6788, "db_id": "activity_1", "final": {"question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.", "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["faculty", "activity", "faculty_participates_in"]}}
{"sample_id": 6789, "db_id": "activity_1", "final": {"question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.", "sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["faculty", "activity", "faculty_participates_in"]}}
{"sample_id": 6790, "db_id": "activity_1", "final": {"question": "Find the first names of professors who are not playing Canoeing or Kayaking.", "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["faculty", "activity", "faculty_participates_in"]}}
{"sample_id": 6791, "db_id": "activity_1", "final": {"question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?", "sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["faculty", "activity", "faculty_participates_in"]}}
{"sample_id": 6792, "db_id": "activity_1", "final": {"question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.", "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "source_tables": ["faculty", "activity", "faculty_participates_in"]}}
{"sample_id": 6793, "db_id": "activity_1", "final": {"question": "What are the first names of the faculty members playing both Canoeing and Kayaking?", "sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "source_tables": ["faculty", "activity", "faculty_participates_in"]}}
{"sample_id": 6794, "db_id": "activity_1", "final": {"question": "Find the ids of the students who participate in Canoeing and Kayaking.", "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "source_tables": ["participates_in", "activity"]}}
{"sample_id": 6795, "db_id": "activity_1", "final": {"question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.", "sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "source_tables": ["participates_in", "activity"]}}
{"sample_id": 6861, "db_id": "flight_4", "final": {"question": "What is the total number of routes for each country and airline in that country?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "source_tables": ["airlines", "routes"]}}
{"sample_id": 6862, "db_id": "flight_4", "final": {"question": "Find the number of routes with destination airports in Italy.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "source_tables": ["routes", "airports"]}}
{"sample_id": 6863, "db_id": "flight_4", "final": {"question": "What is the number of routes whose destinations are Italian airports?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "source_tables": ["routes", "airports"]}}
{"sample_id": 6864, "db_id": "flight_4", "final": {"question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "source_tables": ["airlines", "routes", "airports"]}}
{"sample_id": 6865, "db_id": "flight_4", "final": {"question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "source_tables": ["airlines", "routes", "airports"]}}
{"sample_id": 6866, "db_id": "flight_4", "final": {"question": "Find the number of routes that have destination John F Kennedy International Airport.", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "source_tables": ["airports", "routes"]}}
{"sample_id": 6867, "db_id": "flight_4", "final": {"question": "What is the number of routes that end at John F Kennedy International Airport?", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "source_tables": ["airports", "routes"]}}
{"sample_id": 6868, "db_id": "flight_4", "final": {"question": "Find the number of routes from the United States to Canada.", "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}}
{"sample_id": 6869, "db_id": "flight_4", "final": {"question": "How many routes go from the United States to Canada?", "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}}
{"sample_id": 6870, "db_id": "flight_4", "final": {"question": "Find the id of routes whose source and destination airports are in the United States.", "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}}
{"sample_id": 6871, "db_id": "flight_4", "final": {"question": "What is the id of the routes whose source and destination airports are in the United States?", "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}}
{"sample_id": 6872, "db_id": "flight_4", "final": {"question": "Find the name of airline which runs the most number of routes.", "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines", "routes"]}}
{"sample_id": 6873, "db_id": "flight_4", "final": {"question": "What is the name of the airline with the most routes?", "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines", "routes"]}}
{"sample_id": 6874, "db_id": "flight_4", "final": {"question": "Find the busiest source airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}}
{"sample_id": 6875, "db_id": "flight_4", "final": {"question": "What is the name of the airport with the most number of routes that start in China?", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}}
{"sample_id": 6876, "db_id": "flight_4", "final": {"question": "Find the busiest destination airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}}
{"sample_id": 6877, "db_id": "flight_4", "final": {"question": "What is the name of the airport that is the destination of the most number of routes that start in China?", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}}
{"sample_id": 6926, "db_id": "tracking_orders", "final": {"question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}}
{"sample_id": 6927, "db_id": "tracking_orders", "final": {"question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}}
{"sample_id": 6928, "db_id": "tracking_orders", "final": {"question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}}
{"sample_id": 6929, "db_id": "tracking_orders", "final": {"question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}}
{"sample_id": 6930, "db_id": "tracking_orders", "final": {"question": "For each customer who has at least two orders, find the customer name and number of orders made.", "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "source_tables": ["customers", "orders"]}}
{"sample_id": 6931, "db_id": "tracking_orders", "final": {"question": "Which customers have made at least two orders? Give me each customer name and number of orders made.", "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "source_tables": ["customers", "orders"]}}
{"sample_id": 6932, "db_id": "tracking_orders", "final": {"question": "Find the name of the customers who have at most two orders.", "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "source_tables": ["customers", "orders"]}}
{"sample_id": 6933, "db_id": "tracking_orders", "final": {"question": "What are the names of the customers who have made two or less orders?", "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "source_tables": ["customers", "orders"]}}
{"sample_id": 6934, "db_id": "tracking_orders", "final": {"question": "List the names of the customers who have once bought product \"food\".", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["customers", "order_items", "orders", "products"]}}
{"sample_id": 6935, "db_id": "tracking_orders", "final": {"question": "What are the names of the customers who bought product \"food\" at least once?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["customers", "order_items", "orders", "products"]}}
{"sample_id": 6936, "db_id": "tracking_orders", "final": {"question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["customers", "order_items", "orders", "products"]}}
{"sample_id": 6937, "db_id": "tracking_orders", "final": {"question": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["customers", "order_items", "orders", "products"]}}
{"sample_id": 6951, "db_id": "architecture", "final": {"question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80", "source_tables": ["bridge", "architect", "mill"]}}
{"sample_id": 6952, "db_id": "architecture", "final": {"question": "What is the most common mill type, and how many are there?", "sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["mill"]}}
{"sample_id": 6953, "db_id": "architecture", "final": {"question": "How many architects haven't built a mill before year 1850?", "sql": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );", "source_tables": ["architect", "mill"]}}
{"sample_id": 6954, "db_id": "architecture", "final": {"question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "sql": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet", "source_tables": ["bridge", "architect"]}}
{"sample_id": 6985, "db_id": "culture_company", "final": {"question": "What is the average, maximum, and minimum budget for all movies before 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "source_tables": ["movie"]}}
{"sample_id": 6986, "db_id": "culture_company", "final": {"question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "source_tables": ["movie"]}}
{"sample_id": 6987, "db_id": "culture_company", "final": {"question": "List all company names with a book published by Alyson.", "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "source_tables": ["culture_company", "book_club"]}}
{"sample_id": 6988, "db_id": "culture_company", "final": {"question": "What are all the company names that have a book published by Alyson?", "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "source_tables": ["culture_company", "book_club"]}}
{"sample_id": 6989, "db_id": "culture_company", "final": {"question": "Show the movie titles and book titles for all companies in China.", "sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "source_tables": ["movie", "culture_company", "book_club"]}}
{"sample_id": 6990, "db_id": "culture_company", "final": {"question": "What are the titles of movies and books corresponding to companies incorporated in China?", "sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "source_tables": ["movie", "culture_company", "book_club"]}}
{"sample_id": 6991, "db_id": "culture_company", "final": {"question": "Show all company names with a movie directed in year 1999.", "sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "source_tables": ["movie", "culture_company"]}}
{"sample_id": 6992, "db_id": "culture_company", "final": {"question": "What are all company names that have a corresponding movie directed in the year 1999?", "sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "source_tables": ["movie", "culture_company"]}}
{"sample_id": 7029, "db_id": "concert_singer", "final": {"question": "What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "source_tables": ["singer", "singer_in_concert"]}}
{"sample_id": 7030, "db_id": "concert_singer", "final": {"question": "List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["concert", "singer", "singer_in_concert"]}}
{"sample_id": 7031, "db_id": "concert_singer", "final": {"question": "What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["concert", "singer", "singer_in_concert"]}}
{"sample_id": 7032, "db_id": "concert_singer", "final": {"question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "source_tables": ["singer"]}}
{"sample_id": 7033, "db_id": "concert_singer", "final": {"question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "source_tables": ["singer"]}}
{"sample_id": 7034, "db_id": "concert_singer", "final": {"question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7035, "db_id": "concert_singer", "final": {"question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7036, "db_id": "concert_singer", "final": {"question": "Find the number of concerts happened in the stadium with the highest capacity .", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7037, "db_id": "concert_singer", "final": {"question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "source_tables": ["stadium", "concert"]}}
{"sample_id": 7071, "db_id": "pets_1", "final": {"question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7072, "db_id": "pets_1", "final": {"question": "Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7073, "db_id": "pets_1", "final": {"question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7074, "db_id": "pets_1", "final": {"question": "Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7075, "db_id": "pets_1", "final": {"question": "What is the first name and gender of the all the students who have more than one pet?", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7076, "db_id": "pets_1", "final": {"question": "Find the last name of the student who has a cat that is age 3.", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "source_tables": ["pets", "has_pet", "student"]}}
{"sample_id": 7077, "db_id": "pets_1", "final": {"question": "What is the last name of the student who has a cat that is 3 years old?", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "source_tables": ["pets", "has_pet", "student"]}}
{"sample_id": 7078, "db_id": "pets_1", "final": {"question": "Find the average age of students who do not have any pet .", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7079, "db_id": "pets_1", "final": {"question": "What is the average age for all students who do not own any pets ?", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7153, "db_id": "car_1", "final": {"question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "source_tables": ["cars_data"]}}
{"sample_id": 7154, "db_id": "car_1", "final": {"question": "How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7155, "db_id": "car_1", "final": {"question": "What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7156, "db_id": "car_1", "final": {"question": "How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}}
{"sample_id": 7157, "db_id": "car_1", "final": {"question": "What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}}
{"sample_id": 7158, "db_id": "car_1", "final": {"question": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 7159, "db_id": "car_1", "final": {"question": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 7160, "db_id": "car_1", "final": {"question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 7161, "db_id": "car_1", "final": {"question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 7162, "db_id": "car_1", "final": {"question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "source_tables": ["cars_data"]}}
{"sample_id": 7163, "db_id": "car_1", "final": {"question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "source_tables": ["cars_data"]}}
{"sample_id": 7164, "db_id": "car_1", "final": {"question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "source_tables": ["cars_data", "model_list", "car_makers", "car_names"]}}
{"sample_id": 7165, "db_id": "car_1", "final": {"question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "source_tables": ["cars_data", "model_list", "car_makers", "car_names"]}}
{"sample_id": 7166, "db_id": "car_1", "final": {"question": "What are the name of the countries where there is not a single car maker?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7167, "db_id": "car_1", "final": {"question": "What are the names of the countries with no car makers?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "source_tables": ["countries", "car_makers"]}}
{"sample_id": 7168, "db_id": "car_1", "final": {"question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "source_tables": ["model_list", "car_makers", "car_names"]}}
{"sample_id": 7169, "db_id": "car_1", "final": {"question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["model_list", "car_makers", "car_names"]}}
{"sample_id": 7170, "db_id": "car_1", "final": {"question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "source_tables": ["model_list", "countries", "car_makers"]}}
{"sample_id": 7171, "db_id": "car_1", "final": {"question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "source_tables": ["model_list", "countries", "car_makers"]}}
{"sample_id": 7236, "db_id": "flight_2", "final": {"question": "Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7237, "db_id": "flight_2", "final": {"question": "Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7238, "db_id": "flight_2", "final": {"question": "What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 7239, "db_id": "flight_2", "final": {"question": "Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 7240, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 7241, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 7242, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 7243, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 7244, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["flights", "airports"]}}
{"sample_id": 7245, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights leaving from Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["flights", "airports"]}}
{"sample_id": 7246, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["flights", "airports"]}}
{"sample_id": 7247, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights arriving in Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["flights", "airports"]}}
{"sample_id": 7248, "db_id": "flight_2", "final": {"question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'", "source_tables": ["flights", "airports"]}}
{"sample_id": 7249, "db_id": "flight_2", "final": {"question": "How many flights land in Aberdeen or Abilene?", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'", "source_tables": ["flights", "airports"]}}
{"sample_id": 7250, "db_id": "flight_2", "final": {"question": "Find the name of airports which do not have any flight in and out.", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "source_tables": ["flights", "airports"]}}
{"sample_id": 7251, "db_id": "flight_2", "final": {"question": "Which airports do not have departing or arriving flights?", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "source_tables": ["flights", "airports"]}}
{"sample_id": 7282, "db_id": "employee_hire_evaluation", "final": {"question": "What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}}
{"sample_id": 7283, "db_id": "employee_hire_evaluation", "final": {"question": "Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}}
{"sample_id": 7284, "db_id": "employee_hire_evaluation", "final": {"question": "Give me all the information about hiring.", "sql": "SELECT * FROM hiring", "source_tables": ["hiring"]}}
{"sample_id": 7285, "db_id": "employee_hire_evaluation", "final": {"question": "What is all the information about hiring?", "sql": "SELECT * FROM hiring", "source_tables": ["hiring"]}}
{"sample_id": 7286, "db_id": "employee_hire_evaluation", "final": {"question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "source_tables": ["shop"]}}
{"sample_id": 7287, "db_id": "employee_hire_evaluation", "final": {"question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "source_tables": ["shop"]}}
{"sample_id": 7288, "db_id": "employee_hire_evaluation", "final": {"question": "How many different store locations are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 7289, "db_id": "employee_hire_evaluation", "final": {"question": "Count the number of distinct store locations.", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 7357, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "source_tables": ["documents", "paragraphs"]}}
{"sample_id": 7358, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "source_tables": ["documents", "paragraphs"]}}
{"sample_id": 7359, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "source_tables": ["documents", "paragraphs"]}}
{"sample_id": 7360, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}}
{"sample_id": 7361, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}}
{"sample_id": 7362, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["documents", "paragraphs"]}}
{"sample_id": 7363, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["documents", "paragraphs"]}}
{"sample_id": 7364, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "source_tables": ["paragraphs"]}}
{"sample_id": 7365, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids of documents that have 2 or more paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "source_tables": ["paragraphs"]}}
{"sample_id": 7366, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id and name with greatest number of paragraphs?", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents", "paragraphs"]}}
{"sample_id": 7367, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the id and name of the document with the most paragraphs.", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents", "paragraphs"]}}
{"sample_id": 7368, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id with least number of paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["paragraphs"]}}
{"sample_id": 7369, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the id of the document with the fewest paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["paragraphs"]}}
{"sample_id": 7370, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id with 1 to 2 paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "source_tables": ["paragraphs"]}}
{"sample_id": 7371, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Give the ids of documents that have between one and two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "source_tables": ["paragraphs"]}}
{"sample_id": 7372, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "source_tables": ["paragraphs"]}}
{"sample_id": 7373, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "source_tables": ["paragraphs"]}}
{"sample_id": 7398, "db_id": "course_teach", "final": {"question": "Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7399, "db_id": "course_teach", "final": {"question": "What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7400, "db_id": "course_teach", "final": {"question": "Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7401, "db_id": "course_teach", "final": {"question": "What are the names of the teachers who teach at least two courses?", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7402, "db_id": "course_teach", "final": {"question": "List the names of teachers who have not been arranged to teach courses.", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7403, "db_id": "course_teach", "final": {"question": "What are the names of the teachers whose courses have not been arranged?", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7418, "db_id": "museum_visit", "final": {"question": "What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "source_tables": ["visit", "visitor"]}}
{"sample_id": 7419, "db_id": "museum_visit", "final": {"question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "source_tables": ["visit", "museum", "visitor"]}}
{"sample_id": 7420, "db_id": "museum_visit", "final": {"question": "Find the number of visitors who did not visit any museum opened after 2010.", "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "source_tables": ["visit", "museum", "visitor"]}}
{"sample_id": 7421, "db_id": "museum_visit", "final": {"question": "How many museums were opened after 2013 or before 2008?", "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "source_tables": ["museum"]}}
{"sample_id": 7471, "db_id": "wta_1", "final": {"question": "What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "source_tables": ["players"]}}
{"sample_id": 7472, "db_id": "wta_1", "final": {"question": "Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}}
{"sample_id": 7473, "db_id": "wta_1", "final": {"question": "How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}}
{"sample_id": 7474, "db_id": "wta_1", "final": {"question": "Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}}
{"sample_id": 7475, "db_id": "wta_1", "final": {"question": "How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}}
{"sample_id": 7476, "db_id": "wta_1", "final": {"question": "Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "source_tables": ["matches"]}}
{"sample_id": 7477, "db_id": "wta_1", "final": {"question": "What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "source_tables": ["matches"]}}
{"sample_id": 7478, "db_id": "wta_1", "final": {"question": "How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "source_tables": ["matches"]}}
{"sample_id": 7479, "db_id": "wta_1", "final": {"question": "Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "source_tables": ["matches"]}}
{"sample_id": 7480, "db_id": "wta_1", "final": {"question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "source_tables": ["players", "matches"]}}
{"sample_id": 7481, "db_id": "wta_1", "final": {"question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "source_tables": ["players", "matches"]}}
{"sample_id": 7482, "db_id": "wta_1", "final": {"question": "Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "source_tables": ["players"]}}
{"sample_id": 7483, "db_id": "wta_1", "final": {"question": "How many players are there for each hand type?", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "source_tables": ["players"]}}
{"sample_id": 7496, "db_id": "battle_death", "final": {"question": "How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "source_tables": ["battle", "ship"]}}
{"sample_id": 7497, "db_id": "battle_death", "final": {"question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "source_tables": ["battle", "ship"]}}
{"sample_id": 7498, "db_id": "battle_death", "final": {"question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "source_tables": ["battle", "ship"]}}
{"sample_id": 7499, "db_id": "battle_death", "final": {"question": "What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'", "source_tables": ["death"]}}
{"sample_id": 7562, "db_id": "student_transcripts_tracking", "final": {"question": "What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 7563, "db_id": "student_transcripts_tracking", "final": {"question": "When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 7564, "db_id": "student_transcripts_tracking", "final": {"question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}}
{"sample_id": 7565, "db_id": "student_transcripts_tracking", "final": {"question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}}
{"sample_id": 7566, "db_id": "student_transcripts_tracking", "final": {"question": "Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcript_contents", "transcripts"]}}
{"sample_id": 7567, "db_id": "student_transcripts_tracking", "final": {"question": "What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcript_contents", "transcripts"]}}
{"sample_id": 7568, "db_id": "student_transcripts_tracking", "final": {"question": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 7569, "db_id": "student_transcripts_tracking", "final": {"question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 7570, "db_id": "student_transcripts_tracking", "final": {"question": "How many different addresses do the students currently live?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "source_tables": ["students"]}}
{"sample_id": 7571, "db_id": "student_transcripts_tracking", "final": {"question": "What are the different addresses that have students living there?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "source_tables": ["students"]}}
{"sample_id": 7572, "db_id": "student_transcripts_tracking", "final": {"question": "List all the student details in reversed lexicographical order.", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "source_tables": ["students"]}}
{"sample_id": 7573, "db_id": "student_transcripts_tracking", "final": {"question": "What other details can you tell me about students in reverse alphabetical order?", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "source_tables": ["students"]}}
{"sample_id": 7574, "db_id": "student_transcripts_tracking", "final": {"question": "Describe the section h.", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "source_tables": ["sections"]}}
{"sample_id": 7575, "db_id": "student_transcripts_tracking", "final": {"question": "What is the description for the section named h?", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "source_tables": ["sections"]}}
{"sample_id": 7576, "db_id": "student_transcripts_tracking", "final": {"question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "source_tables": ["addresses", "students"]}}
{"sample_id": 7577, "db_id": "student_transcripts_tracking", "final": {"question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "source_tables": ["addresses", "students"]}}
{"sample_id": 7627, "db_id": "tvshow", "final": {"question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["cartoon", "tv_channel"]}}
{"sample_id": 7628, "db_id": "tvshow", "final": {"question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["cartoon", "tv_channel"]}}
{"sample_id": 7629, "db_id": "tvshow", "final": {"question": "What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["cartoon", "tv_channel"]}}
{"sample_id": 7630, "db_id": "tvshow", "final": {"question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["cartoon", "tv_channel"]}}
{"sample_id": 7631, "db_id": "tvshow", "final": {"question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["cartoon", "tv_channel"]}}
{"sample_id": 7632, "db_id": "tvshow", "final": {"question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "source_tables": ["tv_channel"]}}
{"sample_id": 7633, "db_id": "tvshow", "final": {"question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "source_tables": ["tv_channel"]}}
{"sample_id": 7634, "db_id": "tvshow", "final": {"question": "find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "source_tables": ["tv_channel"]}}
{"sample_id": 7635, "db_id": "tvshow", "final": {"question": "What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "source_tables": ["tv_channel"]}}
{"sample_id": 7636, "db_id": "tvshow", "final": {"question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "source_tables": ["cartoon", "tv_channel"]}}
{"sample_id": 7637, "db_id": "tvshow", "final": {"question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "source_tables": ["cartoon", "tv_channel"]}}
{"sample_id": 7638, "db_id": "tvshow", "final": {"question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "source_tables": ["cartoon", "tv_channel"]}}
{"sample_id": 7639, "db_id": "tvshow", "final": {"question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "source_tables": ["cartoon", "tv_channel"]}}
{"sample_id": 7672, "db_id": "poker_player", "final": {"question": "List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 7673, "db_id": "poker_player", "final": {"question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 7674, "db_id": "poker_player", "final": {"question": "Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "source_tables": ["people"]}}
{"sample_id": 7675, "db_id": "poker_player", "final": {"question": "What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "source_tables": ["people"]}}
{"sample_id": 7676, "db_id": "poker_player", "final": {"question": "List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "source_tables": ["poker_player", "people"]}}
{"sample_id": 7677, "db_id": "poker_player", "final": {"question": "What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "source_tables": ["poker_player", "people"]}}
{"sample_id": 7678, "db_id": "poker_player", "final": {"question": "How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people", "source_tables": ["people"]}}
{"sample_id": 7679, "db_id": "poker_player", "final": {"question": "Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people", "source_tables": ["people"]}}
{"sample_id": 7692, "db_id": "voter_1", "final": {"question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "source_tables": ["votes", "contestants"]}}
{"sample_id": 7693, "db_id": "voter_1", "final": {"question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "source_tables": ["votes", "contestants", "area_code_state"]}}
{"sample_id": 7694, "db_id": "voter_1", "final": {"question": "Return the names of the contestants whose names contain the substring 'Al' .", "sql": "select contestant_name from contestants where contestant_name like '%al%'", "source_tables": ["contestants"]}}
{"sample_id": 7791, "db_id": "world_1", "final": {"question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}}
{"sample_id": 7792, "db_id": "world_1", "final": {"question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}}
{"sample_id": 7793, "db_id": "world_1", "final": {"question": "What are the names and areas of countries with the top 5 largest area?", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}}
{"sample_id": 7794, "db_id": "world_1", "final": {"question": "Return the names and surface areas of the 5 largest countries.", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}}
{"sample_id": 7795, "db_id": "world_1", "final": {"question": "What are names of countries with the top 3 largest population?", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7796, "db_id": "world_1", "final": {"question": "Return the names of the 3 most populated countries.", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7797, "db_id": "world_1", "final": {"question": "What are the names of the nations with the 3 lowest populations?", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7798, "db_id": "world_1", "final": {"question": "Return the names of the 3 countries with the fewest people.", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7799, "db_id": "world_1", "final": {"question": "how many countries are in Asia?", "sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "source_tables": ["country"]}}
{"sample_id": 7800, "db_id": "world_1", "final": {"question": "Count the number of countries in Asia.", "sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "source_tables": ["country"]}}
{"sample_id": 7801, "db_id": "world_1", "final": {"question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "source_tables": ["country"]}}
{"sample_id": 7802, "db_id": "world_1", "final": {"question": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "source_tables": ["country"]}}
{"sample_id": 7803, "db_id": "world_1", "final": {"question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000", "source_tables": ["country"]}}
{"sample_id": 7804, "db_id": "world_1", "final": {"question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000", "source_tables": ["country"]}}
{"sample_id": 7805, "db_id": "world_1", "final": {"question": "What are the cities whose population is between 160000 and 900000?", "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "source_tables": ["city"]}}
{"sample_id": 7806, "db_id": "world_1", "final": {"question": "Return the names of cities that have a population between 160000 and 900000 .", "sql": "select name from city where population between 160000 and 900000", "source_tables": ["city"]}}
{"sample_id": 7807, "db_id": "world_1", "final": {"question": "Which language is spoken by the largest number of countries?", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["countrylanguage"]}}
{"sample_id": 7808, "db_id": "world_1", "final": {"question": "Give the language that is spoken in the most countries.", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["countrylanguage"]}}
{"sample_id": 7809, "db_id": "world_1", "final": {"question": "What is the language spoken by the largest percentage of people in each country?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7810, "db_id": "world_1", "final": {"question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7811, "db_id": "world_1", "final": {"question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7812, "db_id": "world_1", "final": {"question": "Count the number of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7813, "db_id": "world_1", "final": {"question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7814, "db_id": "world_1", "final": {"question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 7847, "db_id": "orchestra", "final": {"question": "List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["orchestra", "performance"]}}
{"sample_id": 7848, "db_id": "orchestra", "final": {"question": "What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["orchestra", "performance"]}}
{"sample_id": 7849, "db_id": "orchestra", "final": {"question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}}
{"sample_id": 7850, "db_id": "orchestra", "final": {"question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}}
{"sample_id": 7851, "db_id": "orchestra", "final": {"question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'", "source_tables": ["orchestra"]}}
{"sample_id": 7852, "db_id": "orchestra", "final": {"question": "Count the number of orchestras that have CD or DVD as their record format.", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'", "source_tables": ["orchestra"]}}
{"sample_id": 7853, "db_id": "orchestra", "final": {"question": "Show the years in which orchestras that have given more than one performance are founded.", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "source_tables": ["orchestra", "performance"]}}
{"sample_id": 7854, "db_id": "orchestra", "final": {"question": "What are years of founding for orchestras that have had more than a single performance?", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "source_tables": ["orchestra", "performance"]}}
{"sample_id": 7899, "db_id": "network_1", "final": {"question": "What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["likes", "highschooler"]}}
{"sample_id": 7900, "db_id": "network_1", "final": {"question": "Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["likes", "highschooler"]}}
{"sample_id": 7901, "db_id": "network_1", "final": {"question": "Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["likes", "highschooler"]}}
{"sample_id": 7902, "db_id": "network_1", "final": {"question": "What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["likes", "highschooler"]}}
{"sample_id": 7903, "db_id": "network_1", "final": {"question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 7904, "db_id": "network_1", "final": {"question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 7905, "db_id": "network_1", "final": {"question": "How many likes does Kyle have?", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["likes", "highschooler"]}}
{"sample_id": 7906, "db_id": "network_1", "final": {"question": "Return the number of likes that the high schooler named Kyle has.", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["likes", "highschooler"]}}
{"sample_id": 7907, "db_id": "network_1", "final": {"question": "Find the average grade of all students who have some friends.", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 7908, "db_id": "network_1", "final": {"question": "What is the average grade of students who have friends?", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 7909, "db_id": "network_1", "final": {"question": "Find the minimum grade of students who have no friends.", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 7910, "db_id": "network_1", "final": {"question": "What is the lowest grade of students who do not have any friends?", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 7976, "db_id": "dog_kennels", "final": {"question": "Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "source_tables": ["treatments", "professionals"]}}
{"sample_id": 7977, "db_id": "dog_kennels", "final": {"question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}}
{"sample_id": 7978, "db_id": "dog_kennels", "final": {"question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}}
{"sample_id": 7979, "db_id": "dog_kennels", "final": {"question": "What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7980, "db_id": "dog_kennels", "final": {"question": "Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7981, "db_id": "dog_kennels", "final": {"question": "What is the age of the oldest dog?", "sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7982, "db_id": "dog_kennels", "final": {"question": "Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7983, "db_id": "dog_kennels", "final": {"question": "How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 7984, "db_id": "dog_kennels", "final": {"question": "List each charge type and its amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 7985, "db_id": "dog_kennels", "final": {"question": "How much does the most expensive charge type costs?", "sql": "SELECT max(charge_amount) FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 7986, "db_id": "dog_kennels", "final": {"question": "What is the charge amount of the most expensive charge type?", "sql": "SELECT max(charge_amount) FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 7987, "db_id": "dog_kennels", "final": {"question": "List the email, cell phone and home phone of all the professionals.", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "source_tables": ["professionals"]}}
{"sample_id": 7988, "db_id": "dog_kennels", "final": {"question": "What are the email, cell phone and home phone of each professional?", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "source_tables": ["professionals"]}}
{"sample_id": 7989, "db_id": "dog_kennels", "final": {"question": "What are all the possible breed type and size type combinations?", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "source_tables": ["dogs"]}}
{"sample_id": 7990, "db_id": "dog_kennels", "final": {"question": "Find the distinct breed type and size type combinations for dogs.", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "source_tables": ["dogs"]}}
{"sample_id": 7991, "db_id": "dog_kennels", "final": {"question": "List the first name of all the professionals along with the description of the treatment they have done.", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "source_tables": ["treatment_types", "treatments", "professionals"]}}
{"sample_id": 7992, "db_id": "dog_kennels", "final": {"question": "What are each professional's first name and description of the treatment they have performed?", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "source_tables": ["treatment_types", "treatments", "professionals"]}}
{"sample_id": 8017, "db_id": "singer", "final": {"question": "Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["song", "singer"]}}
{"sample_id": 8018, "db_id": "singer", "final": {"question": "For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["song", "singer"]}}
{"sample_id": 8019, "db_id": "singer", "final": {"question": "List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "source_tables": ["song", "singer"]}}
{"sample_id": 8020, "db_id": "singer", "final": {"question": "What is the sname of every sing that does not have any song?", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "source_tables": ["song", "singer"]}}
{"sample_id": 8021, "db_id": "singer", "final": {"question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "source_tables": ["singer"]}}
{"sample_id": 8022, "db_id": "singer", "final": {"question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "source_tables": ["singer"]}}
