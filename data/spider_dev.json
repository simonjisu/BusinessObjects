{"sample_id": 12, "db_id": "department_management", "final": {"question": "What are the distinct ages of the heads who are acting?", "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'", "source_tables": ["head", "management"]}}
{"sample_id": 48, "db_id": "farm", "final": {"question": "List the official names of cities that have not held any competition.", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 49, "db_id": "farm", "final": {"question": "What are the official names of cities that have not hosted a farm competition?", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["city", "farm_competition"]}}
{"sample_id": 50, "db_id": "farm", "final": {"question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "source_tables": ["city"]}}
{"sample_id": 51, "db_id": "farm", "final": {"question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "source_tables": ["city"]}}
{"sample_id": 98, "db_id": "student_assessment", "final": {"question": "What are the first names of the people in alphabetical order?", "sql": "SELECT first_name FROM people ORDER BY first_name", "source_tables": ["people"]}}
{"sample_id": 99, "db_id": "student_assessment", "final": {"question": "What are the id of students who registered courses or attended courses?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 100, "db_id": "student_assessment", "final": {"question": "What are the ids of the students who either registered or attended a course?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 101, "db_id": "student_assessment", "final": {"question": "Find the id of courses which are registered or attended by student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 102, "db_id": "student_assessment", "final": {"question": "What are the ids of the courses that are registered or attended by the student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "source_tables": ["student_course_registrations", "student_course_attendance"]}}
{"sample_id": 192, "db_id": "bike_1", "final": {"question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "source_tables": ["trip", "station"]}}
{"sample_id": 193, "db_id": "bike_1", "final": {"question": "List all the distinct stations from which a trip of duration below 100 started.", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "source_tables": ["trip"]}}
{"sample_id": 194, "db_id": "bike_1", "final": {"question": "What are all the different start station names for a trip that lasted less than 100?", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "source_tables": ["trip"]}}
{"sample_id": 195, "db_id": "bike_1", "final": {"question": "Find all the zip codes in which the max dew point have never reached 70.", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "source_tables": ["weather"]}}
{"sample_id": 196, "db_id": "bike_1", "final": {"question": "What are all the different zip codes that have a maximum dew point that was always below 70?", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "source_tables": ["weather"]}}
{"sample_id": 197, "db_id": "bike_1", "final": {"question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "source_tables": ["trip"]}}
{"sample_id": 198, "db_id": "bike_1", "final": {"question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "source_tables": ["trip"]}}
{"sample_id": 199, "db_id": "bike_1", "final": {"question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"]}}
{"sample_id": 200, "db_id": "bike_1", "final": {"question": "What are the dates that have an average sea level pressure between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"]}}
{"sample_id": 201, "db_id": "bike_1", "final": {"question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "source_tables": ["weather"]}}
{"sample_id": 229, "db_id": "book_2", "final": {"question": "List the titles of books that are not published.", "sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)", "source_tables": ["publication", "book"]}}
{"sample_id": 230, "db_id": "book_2", "final": {"question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000", "source_tables": ["publication"]}}
{"sample_id": 266, "db_id": "musical", "final": {"question": "List the nominees that have been nominated more than two musicals.", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "source_tables": ["musical"]}}
{"sample_id": 267, "db_id": "musical", "final": {"question": "Who are the nominees who have been nominated more than two times?", "sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "source_tables": ["musical"]}}
{"sample_id": 268, "db_id": "musical", "final": {"question": "List the name of musicals that do not have actors.", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "source_tables": ["actor", "musical"]}}
{"sample_id": 269, "db_id": "musical", "final": {"question": "What are the names of musicals who have no actors?", "sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "source_tables": ["actor", "musical"]}}
{"sample_id": 295, "db_id": "twitter_1", "final": {"question": "Find the name of each user and number of tweets tweeted by each of them.", "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 296, "db_id": "twitter_1", "final": {"question": "Find the name and partition id for users who tweeted less than twice.", "sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2", "source_tables": ["user_profiles", "tweets"]}}
{"sample_id": 334, "db_id": "product_catalog", "final": {"question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "source_tables": ["attribute_definitions", "catalog_contents_additional_attributes"]}}
{"sample_id": 335, "db_id": "product_catalog", "final": {"question": "Find the name and capacity of products with price greater than 700 (in USD).", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "source_tables": ["catalog_contents"]}}
{"sample_id": 336, "db_id": "product_catalog", "final": {"question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "source_tables": ["catalog_contents"]}}
{"sample_id": 337, "db_id": "product_catalog", "final": {"question": "Find the dates on which more than one revisions were made.", "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "source_tables": ["catalogs"]}}
{"sample_id": 419, "db_id": "flight_1", "final": {"question": "How many employees have certificate.", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "source_tables": ["certificate"]}}
{"sample_id": 420, "db_id": "flight_1", "final": {"question": "What is the count of distinct employees with certificates?", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "source_tables": ["certificate"]}}
{"sample_id": 421, "db_id": "flight_1", "final": {"question": "Show ids for all employees who don't have a certificate.", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "source_tables": ["employee", "certificate"]}}
{"sample_id": 422, "db_id": "flight_1", "final": {"question": "What are the ids of all employees that don't have certificates?", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "source_tables": ["employee", "certificate"]}}
{"sample_id": 423, "db_id": "flight_1", "final": {"question": "Show names for all aircrafts of which John Williams has certificates.", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  'John Williams'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 424, "db_id": "flight_1", "final": {"question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  'John Williams'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 425, "db_id": "flight_1", "final": {"question": "Show names for all employees who have certificate of Boeing 737-800.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 426, "db_id": "flight_1", "final": {"question": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 427, "db_id": "flight_1", "final": {"question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Airbus A340-300'", "source_tables": ["employee", "aircraft", "certificate"]}}
{"sample_id": 517, "db_id": "allergy_1", "final": {"question": "Show all allergy type with number of students affected.", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "source_tables": ["has_allergy", "allergy_type"]}}
{"sample_id": 518, "db_id": "allergy_1", "final": {"question": "How many students are affected by each allergy type?", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "source_tables": ["has_allergy", "allergy_type"]}}
{"sample_id": 519, "db_id": "allergy_1", "final": {"question": "Find the last name and age of the student who has allergy to both milk and cat.", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 520, "db_id": "allergy_1", "final": {"question": "What are the last names and ages of the students who are allergic to milk and cat?", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 521, "db_id": "allergy_1", "final": {"question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  'Lisa' ORDER BY T1.Allergy", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 522, "db_id": "allergy_1", "final": {"question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  'Lisa' ORDER BY T1.Allergy", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 523, "db_id": "allergy_1", "final": {"question": "Find the first name and gender of the student who has allergy to milk but not cat.", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 524, "db_id": "allergy_1", "final": {"question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  'Cat')", "source_tables": ["has_allergy", "student"]}}
{"sample_id": 525, "db_id": "allergy_1", "final": {"question": "Find the average age of the students who have allergies with food and animal types.", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  'animal')", "source_tables": ["has_allergy", "student", "allergy_type"]}}
{"sample_id": 626, "db_id": "store_1", "final": {"question": "What is the name of all tracks in the album named Balls to the Wall?", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = 'Balls to the Wall';", "source_tables": ["tracks", "albums"]}}
{"sample_id": 627, "db_id": "store_1", "final": {"question": "List title of albums have the number of tracks greater than 10.", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "source_tables": ["tracks", "albums"]}}
{"sample_id": 628, "db_id": "store_1", "final": {"question": "What are the names of the albums that have more than 10 tracks?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "source_tables": ["tracks", "albums"]}}
{"sample_id": 629, "db_id": "store_1", "final": {"question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file';", "source_tables": ["media_types", "tracks", "genres"]}}
{"sample_id": 630, "db_id": "store_1", "final": {"question": "What are the names of all Rock tracks that are stored on MPEG audio files?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file';", "source_tables": ["media_types", "tracks", "genres"]}}
{"sample_id": 631, "db_id": "store_1", "final": {"question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file';", "source_tables": ["media_types", "tracks", "genres"]}}
{"sample_id": 632, "db_id": "store_1", "final": {"question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file';", "source_tables": ["media_types", "tracks", "genres"]}}
{"sample_id": 633, "db_id": "store_1", "final": {"question": "List the name of tracks belongs to genre Rock or genre Jazz.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'", "source_tables": ["tracks", "genres"]}}
{"sample_id": 634, "db_id": "store_1", "final": {"question": "What are the names of the tracks that are Rock or Jazz songs?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'", "source_tables": ["tracks", "genres"]}}
{"sample_id": 635, "db_id": "store_1", "final": {"question": "List the name of all tracks in the playlists of Movies.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies';", "source_tables": ["tracks", "playlists", "playlist_tracks"]}}
{"sample_id": 636, "db_id": "store_1", "final": {"question": "What are the names of all tracks that are on playlists titled Movies?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies';", "source_tables": ["tracks", "playlists", "playlist_tracks"]}}
{"sample_id": 663, "db_id": "journal_committee", "final": {"question": "Show the names of editors that are on at least two journal committees.", "sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2", "source_tables": ["journal_committee", "editor"]}}
{"sample_id": 731, "db_id": "customers_card_transactions", "final": {"question": "Show the number of card types.", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "source_tables": ["customers_cards"]}}
{"sample_id": 732, "db_id": "customers_card_transactions", "final": {"question": "How many different card types are there?", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "source_tables": ["customers_cards"]}}
{"sample_id": 733, "db_id": "customers_card_transactions", "final": {"question": "Show all transaction types.", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 734, "db_id": "customers_card_transactions", "final": {"question": "What are the different types of transactions?", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 735, "db_id": "customers_card_transactions", "final": {"question": "Show the number of transaction types.", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 736, "db_id": "customers_card_transactions", "final": {"question": "How many different types of transactions are there?", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 737, "db_id": "customers_card_transactions", "final": {"question": "What is the average and total transaction amount?", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 738, "db_id": "customers_card_transactions", "final": {"question": "Return the average transaction amount, as well as the total amount of all transactions.", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "source_tables": ["financial_transactions"]}}
{"sample_id": 780, "db_id": "race_track", "final": {"question": "What are the names of different tracks, and how many races has each had?", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "source_tables": ["track", "race"]}}
{"sample_id": 781, "db_id": "race_track", "final": {"question": "Show the name of track with most number of races.", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["track", "race"]}}
{"sample_id": 782, "db_id": "race_track", "final": {"question": "What is the name of the track that has had the greatest number of races?", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["track", "race"]}}
{"sample_id": 783, "db_id": "race_track", "final": {"question": "Show the name and date for each race and its track name.", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "source_tables": ["track", "race"]}}
{"sample_id": 803, "db_id": "coffee_shop", "final": {"question": "What are the id and address of the shops which have a happy hour in May?", "sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'", "source_tables": ["happy_hour", "shop"]}}
{"sample_id": 874, "db_id": "chinook_1", "final": {"question": "What are all the album titles, in alphabetical order?", "sql": "SELECT Title FROM ALBUM ORDER BY Title", "source_tables": ["album"]}}
{"sample_id": 875, "db_id": "chinook_1", "final": {"question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "source_tables": ["album", "artist"]}}
{"sample_id": 876, "db_id": "chinook_1", "final": {"question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "source_tables": ["album", "artist"]}}
{"sample_id": 877, "db_id": "chinook_1", "final": {"question": "Find the names of artists that do not have any albums.", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "source_tables": ["artist", "album"]}}
{"sample_id": 878, "db_id": "chinook_1", "final": {"question": "What are the names of artists who have not released any albums?", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "source_tables": ["artist", "album"]}}
{"sample_id": 879, "db_id": "chinook_1", "final": {"question": "What is the average unit price of rock tracks?", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock'", "source_tables": ["track", "genre"]}}
{"sample_id": 880, "db_id": "chinook_1", "final": {"question": "Find the average unit price of tracks from the Rock genre.", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Rock'", "source_tables": ["track", "genre"]}}
{"sample_id": 881, "db_id": "chinook_1", "final": {"question": "What are the duration of the longest and shortest pop tracks in milliseconds?", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  'Pop'", "source_tables": ["track", "genre"]}}
{"sample_id": 924, "db_id": "insurance_fnol", "final": {"question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'Close a policy' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  'New policy application'", "source_tables": ["first_notification_of_loss", "customers", "services"]}}
{"sample_id": 925, "db_id": "insurance_fnol", "final": {"question": "Find the IDs of customers whose name contains \"Diana\".", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'", "source_tables": ["customers"]}}
{"sample_id": 926, "db_id": "insurance_fnol", "final": {"question": "What are the IDs of customers who have \"Diana\" in part of their names?", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'", "source_tables": ["customers"]}}
{"sample_id": 927, "db_id": "insurance_fnol", "final": {"question": "What are the maximum and minimum settlement amount on record?", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "source_tables": ["settlements"]}}
{"sample_id": 968, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?", "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", "source_tables": ["medicine", "medicine_enzyme_interaction"]}}
{"sample_id": 969, "db_id": "medicine_enzyme_interaction", "final": {"question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "source_tables": ["medicine", "enzyme", "medicine_enzyme_interaction"]}}
{"sample_id": 970, "db_id": "medicine_enzyme_interaction", "final": {"question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "source_tables": ["medicine", "enzyme", "medicine_enzyme_interaction"]}}
{"sample_id": 971, "db_id": "medicine_enzyme_interaction", "final": {"question": "How many distinct FDA approval statuses are there for the medicines?", "sql": "SELECT count(DISTINCT FDA_approved) FROM medicine", "source_tables": ["medicine"]}}
{"sample_id": 1013, "db_id": "university_basketball", "final": {"question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 1014, "db_id": "university_basketball", "final": {"question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 1015, "db_id": "university_basketball", "final": {"question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 1016, "db_id": "university_basketball", "final": {"question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "source_tables": ["university"]}}
{"sample_id": 1046, "db_id": "phone_1", "final": {"question": "How many models do not have the wifi function?", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "source_tables": ["chip_model"]}}
{"sample_id": 1047, "db_id": "phone_1", "final": {"question": "Count the number of chip model that do not have wifi.", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "source_tables": ["chip_model"]}}
{"sample_id": 1098, "db_id": "match_season", "final": {"question": "Show the top 3 most common colleges of players in match seasons.", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "source_tables": ["match_season"]}}
{"sample_id": 1099, "db_id": "match_season", "final": {"question": "What are the three colleges from which the most players are from?", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "source_tables": ["match_season"]}}
{"sample_id": 1100, "db_id": "match_season", "final": {"question": "Show the name of colleges that have at least two players.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "source_tables": ["match_season"]}}
{"sample_id": 1101, "db_id": "match_season", "final": {"question": "What are the names of all colleges that have two or more players?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "source_tables": ["match_season"]}}
{"sample_id": 1102, "db_id": "match_season", "final": {"question": "Show the name of colleges that have at least two players in descending alphabetical order.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "source_tables": ["match_season"]}}
{"sample_id": 1142, "db_id": "climbing", "final": {"question": "List the names of mountains that do not have any climber.", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "source_tables": ["mountain", "climber"]}}
{"sample_id": 1143, "db_id": "climbing", "final": {"question": "What are the names of countains that no climber has climbed?", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "source_tables": ["mountain", "climber"]}}
{"sample_id": 1144, "db_id": "climbing", "final": {"question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "source_tables": ["mountain"]}}
{"sample_id": 1145, "db_id": "climbing", "final": {"question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "source_tables": ["mountain"]}}
{"sample_id": 1169, "db_id": "body_builder", "final": {"question": "How many distinct birth places are there?", "sql": "SELECT count(DISTINCT Birth_Place) FROM people", "source_tables": ["people"]}}
{"sample_id": 1170, "db_id": "body_builder", "final": {"question": "How many persons are not body builders?", "sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)", "source_tables": ["people", "body_builder"]}}
{"sample_id": 1190, "db_id": "election_representative", "final": {"question": "What states have at least two representatives?", "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2", "source_tables": ["representative"]}}
{"sample_id": 1191, "db_id": "election_representative", "final": {"question": "List the names of representatives that have not participated in elections listed here.", "sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)", "source_tables": ["election", "representative"]}}
{"sample_id": 1258, "db_id": "apartment_rentals", "final": {"question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1259, "db_id": "apartment_rentals", "final": {"question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1260, "db_id": "apartment_rentals", "final": {"question": "Show the most common apartment type code.", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1261, "db_id": "apartment_rentals", "final": {"question": "Which apartment type code appears the most often?", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1262, "db_id": "apartment_rentals", "final": {"question": "Show the most common apartment type code among apartments with more than 1 bathroom.", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1263, "db_id": "apartment_rentals", "final": {"question": "Which apartment type code is the most common among apartments with more than one bathroom?", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["apartments"]}}
{"sample_id": 1264, "db_id": "apartment_rentals", "final": {"question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"]}}
{"sample_id": 1265, "db_id": "apartment_rentals", "final": {"question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"]}}
{"sample_id": 1289, "db_id": "game_injury", "final": {"question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.", "sql": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id", "source_tables": ["injury_accident", "game", "stadium"]}}
{"sample_id": 1304, "db_id": "soccer_1", "final": {"question": "List all of the ids for left-footed players with a height between 180cm and 190cm.", "sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  'left'", "source_tables": ["player_attributes", "player"]}}
{"sample_id": 1319, "db_id": "performance_attendance", "final": {"question": "Show the dates of performances with attending members whose roles are \"Violin\".", "sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  'Violin'", "source_tables": ["member", "performance", "member_attendance"]}}
{"sample_id": 1458, "db_id": "college_2", "final": {"question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "source_tables": ["instructor"]}}
{"sample_id": 1459, "db_id": "college_2", "final": {"question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "source_tables": ["instructor"]}}
{"sample_id": 1460, "db_id": "college_2", "final": {"question": "Find the name of students who took some course offered by Statistics department.", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "source_tables": ["takes", "student", "course"]}}
{"sample_id": 1461, "db_id": "college_2", "final": {"question": "What are the names of students who have taken Statistics courses?", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "source_tables": ["takes", "student", "course"]}}
{"sample_id": 1462, "db_id": "college_2", "final": {"question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "source_tables": ["section", "course"]}}
{"sample_id": 1463, "db_id": "college_2", "final": {"question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "source_tables": ["section", "course"]}}
{"sample_id": 1464, "db_id": "college_2", "final": {"question": "Find the names of all instructors in computer science department", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "source_tables": ["instructor"]}}
{"sample_id": 1465, "db_id": "college_2", "final": {"question": "What are the names of all instructors in the Comp. Sci. department?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "source_tables": ["instructor"]}}
{"sample_id": 1466, "db_id": "college_2", "final": {"question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "source_tables": ["instructor"]}}
{"sample_id": 1467, "db_id": "college_2", "final": {"question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "source_tables": ["instructor"]}}
{"sample_id": 1468, "db_id": "college_2", "final": {"question": "Find the names of all instructors who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1469, "db_id": "college_2", "final": {"question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1470, "db_id": "college_2", "final": {"question": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1471, "db_id": "college_2", "final": {"question": "What are the names of Art instructors who have taught a course, and the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "source_tables": ["instructor", "teaches"]}}
{"sample_id": 1472, "db_id": "college_2", "final": {"question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"]}}
{"sample_id": 1473, "db_id": "college_2", "final": {"question": "What are the names of all instructors with names that include \"dar\"?", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"]}}
{"sample_id": 1474, "db_id": "college_2", "final": {"question": "List in alphabetic order the names of all distinct instructors.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "source_tables": ["instructor"]}}
{"sample_id": 1504, "db_id": "debate", "final": {"question": "Show the names of people and the number of times they have been on the affirmative side of debates.", "sql": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name", "source_tables": ["people", "debate_people"]}}
{"sample_id": 1539, "db_id": "insurance_and_eClaims", "final": {"question": "Find the name of the customer that has been involved in the most policies.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "policies"]}}
{"sample_id": 1540, "db_id": "insurance_and_eClaims", "final": {"question": "Which customer have the most policies? Give me the customer details.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "policies"]}}
{"sample_id": 1541, "db_id": "insurance_and_eClaims", "final": {"question": "What is the description of the claim status \"Open\"?", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  'Open'", "source_tables": ["claims_processing_stages"]}}
{"sample_id": 1542, "db_id": "insurance_and_eClaims", "final": {"question": "Find the description of the claim status \"Open\".", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  'Open'", "source_tables": ["claims_processing_stages"]}}
{"sample_id": 1612, "db_id": "customers_and_invoices", "final": {"question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.", "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers", "orders"]}}
{"sample_id": 1613, "db_id": "customers_and_invoices", "final": {"question": "Show all product names without an order.", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "source_tables": ["order_items", "products"]}}
{"sample_id": 1614, "db_id": "customers_and_invoices", "final": {"question": "What are the names of products that have never been ordered?", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "source_tables": ["order_items", "products"]}}
{"sample_id": 1615, "db_id": "customers_and_invoices", "final": {"question": "Show all product names and the total quantity ordered for each product name.", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "source_tables": ["order_items", "products"]}}
{"sample_id": 1616, "db_id": "customers_and_invoices", "final": {"question": "What are the different product names, and what is the sum of quantity ordered for each product?", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "source_tables": ["order_items", "products"]}}
{"sample_id": 1617, "db_id": "customers_and_invoices", "final": {"question": "Show the order ids and the number of items in each order.", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1618, "db_id": "customers_and_invoices", "final": {"question": "How many order items correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "source_tables": ["order_items"]}}
{"sample_id": 1619, "db_id": "customers_and_invoices", "final": {"question": "Show the product ids and the number of unique orders containing each product.", "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "source_tables": ["order_items"]}}
{"sample_id": 1645, "db_id": "wedding", "final": {"question": "How many weddings are there in year 2016?", "sql": "SELECT count(*) FROM wedding WHERE YEAR  =  2016", "source_tables": ["wedding"]}}
{"sample_id": 1646, "db_id": "wedding", "final": {"question": "Show the church names for the weddings of all people older than 30.", "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30", "source_tables": ["wedding", "people", "church"]}}
{"sample_id": 1681, "db_id": "theme_gallery", "final": {"question": "Show all artist names who didn't have an exhibition in 2004.", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "source_tables": ["artist", "exhibition"]}}
{"sample_id": 1682, "db_id": "theme_gallery", "final": {"question": "What are the names of artists who did not have an exhibition in 2004?", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "source_tables": ["artist", "exhibition"]}}
{"sample_id": 1683, "db_id": "theme_gallery", "final": {"question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "source_tables": ["exhibition", "exhibition_record"]}}
{"sample_id": 1684, "db_id": "theme_gallery", "final": {"question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "source_tables": ["exhibition", "exhibition_record"]}}
{"sample_id": 1713, "db_id": "epinions_1", "final": {"question": "Find each target user's name and average trust score.", "sql": "SELECT T1.name ,  avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id GROUP BY T2.target_u_id", "source_tables": ["useracct", "trust"]}}
{"sample_id": 1714, "db_id": "epinions_1", "final": {"question": "Find the name of the target user with the lowest trust score.", "sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1", "source_tables": ["useracct", "trust"]}}
{"sample_id": 1715, "db_id": "epinions_1", "final": {"question": "Find the names of the items that did not receive any review.", "sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "source_tables": ["item", "review"]}}
{"sample_id": 1732, "db_id": "riding_club", "final": {"question": "List the names of players that do not have coaches.", "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "source_tables": ["player", "player_coach"]}}
{"sample_id": 1768, "db_id": "gymnast", "final": {"question": "List the distinct hometowns that are not associated with any gymnast.", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1769, "db_id": "gymnast", "final": {"question": "From which hometowns did no gymnasts come from?", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "source_tables": ["gymnast", "people"]}}
{"sample_id": 1770, "db_id": "gymnast", "final": {"question": "Show the hometowns shared by people older than 23 and younger than 20.", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "source_tables": ["people"]}}
{"sample_id": 1771, "db_id": "gymnast", "final": {"question": "From which hometowns did both people older than 23 and younger than 20 come from?", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "source_tables": ["people"]}}
{"sample_id": 1816, "db_id": "small_bank_1", "final": {"question": "Find the name, checking balance and saving balance of all accounts in the bank.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1817, "db_id": "small_bank_1", "final": {"question": "What are the names, checking balances, and savings balances for all customers?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1818, "db_id": "small_bank_1", "final": {"question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1819, "db_id": "small_bank_1", "final": {"question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1820, "db_id": "small_bank_1", "final": {"question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "source_tables": ["checking", "savings", "accounts"]}}
{"sample_id": 1840, "db_id": "browser_web", "final": {"question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'", "source_tables": ["accelerator_compatible_browser", "web_client_accelerator", "browser"]}}
{"sample_id": 1876, "db_id": "wrestler", "final": {"question": "List the names of wrestlers that have not been eliminated.", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1877, "db_id": "wrestler", "final": {"question": "What are the names of wrestlers who have never been eliminated?", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "source_tables": ["wrestler", "elimination"]}}
{"sample_id": 1878, "db_id": "wrestler", "final": {"question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  'Orton' INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  'Benjamin'", "source_tables": ["elimination"]}}
{"sample_id": 1879, "db_id": "wrestler", "final": {"question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  'Orton' INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  'Benjamin'", "source_tables": ["elimination"]}}
{"sample_id": 1904, "db_id": "school_finance", "final": {"question": "How many budget record has a budget amount smaller than the invested amount?", "sql": "SELECT count(*) FROM budget WHERE budgeted  <  invested", "source_tables": ["budget"]}}
{"sample_id": 1905, "db_id": "school_finance", "final": {"question": "What is the total budget amount for school \"Glenn\" in all years?", "sql": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'", "source_tables": ["budget", "school"]}}
{"sample_id": 1926, "db_id": "protein_institute", "final": {"question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'", "source_tables": ["institution", "protein"]}}
{"sample_id": 1927, "db_id": "protein_institute", "final": {"question": "Show the protein name and the institution name.", "sql": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id", "source_tables": ["institution", "protein"]}}
{"sample_id": 1954, "db_id": "cinema", "final": {"question": "What are the title and director of the films without any schedule?", "sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "source_tables": ["schedule", "film"]}}
{"sample_id": 1955, "db_id": "cinema", "final": {"question": "Show director with the largest number of show times in total.", "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1", "source_tables": ["schedule", "film"]}}
{"sample_id": 1956, "db_id": "cinema", "final": {"question": "Find the locations that have more than one movie theater with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "source_tables": ["cinema"]}}
{"sample_id": 1974, "db_id": "products_for_hire", "final": {"question": "How many products are never booked with amount higher than 200?", "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )", "source_tables": ["products_for_hire", "products_booked"]}}
{"sample_id": 1990, "db_id": "phone_market", "final": {"question": "For each phone, show its names and total number of stocks.", "sql": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name", "source_tables": ["phone", "phone_market"]}}
{"sample_id": 2029, "db_id": "gas_company", "final": {"question": "Show all locations where a gas station for company with market value greater than 100 is located.", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "source_tables": ["company", "station_company", "gas_station"]}}
{"sample_id": 2030, "db_id": "gas_company", "final": {"question": "What are the locations that have gas stations owned by a company with a market value greater than 100?", "sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "source_tables": ["company", "station_company", "gas_station"]}}
{"sample_id": 2031, "db_id": "gas_company", "final": {"question": "Show the manager name with most number of gas stations opened after 2000.", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["gas_station"]}}
{"sample_id": 2032, "db_id": "gas_company", "final": {"question": "What is the name of the manager with the most gas stations that opened after 2000?", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["gas_station"]}}
{"sample_id": 2074, "db_id": "party_people", "final": {"question": "What are the names of members who are not in charge of any events?", "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id", "source_tables": ["member", "party_events"]}}
{"sample_id": 2075, "db_id": "party_people", "final": {"question": "What are the names of parties with at least 2 events?", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "source_tables": ["party_events", "party"]}}
{"sample_id": 2076, "db_id": "party_people", "final": {"question": "Return the names of parties that have two or more events.", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "source_tables": ["party_events", "party"]}}
{"sample_id": 2077, "db_id": "party_people", "final": {"question": "What is the name of member in charge of greatest number of events?", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["member", "party_events"]}}
{"sample_id": 2095, "db_id": "pilot_record", "final": {"question": "Show the names of pilots and the number of records they have.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name", "source_tables": ["pilot_record", "pilot"]}}
{"sample_id": 2124, "db_id": "cre_Doc_Control_Systems", "final": {"question": "How many draft copies does the document with id 2 have?", "sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;", "source_tables": ["draft_copies"]}}
{"sample_id": 2125, "db_id": "cre_Doc_Control_Systems", "final": {"question": "Which document has the most draft copies? List its document id and number of draft copies.", "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;", "source_tables": ["draft_copies"]}}
{"sample_id": 2126, "db_id": "cre_Doc_Control_Systems", "final": {"question": "Which documents have more than 1 draft copies? List document id and number of draft copies.", "sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;", "source_tables": ["draft_copies"]}}
{"sample_id": 2143, "db_id": "local_govt_in_alabama", "final": {"question": "Which services type had both successful and failure event details?", "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'", "source_tables": ["events", "services"]}}
{"sample_id": 2210, "db_id": "formula_1", "final": {"question": "Find the names of Japanese constructors that have once earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5", "source_tables": ["constructors", "constructorstandings"]}}
{"sample_id": 2211, "db_id": "formula_1", "final": {"question": "What are the names of all the Japanese constructors that have earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5", "source_tables": ["constructors", "constructorstandings"]}}
{"sample_id": 2212, "db_id": "formula_1", "final": {"question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["results", "races"]}}
{"sample_id": 2213, "db_id": "formula_1", "final": {"question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["results", "races"]}}
{"sample_id": 2214, "db_id": "formula_1", "final": {"question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["results", "races"]}}
{"sample_id": 2215, "db_id": "formula_1", "final": {"question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "source_tables": ["results", "races"]}}
{"sample_id": 2216, "db_id": "formula_1", "final": {"question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["results", "races"]}}
{"sample_id": 2217, "db_id": "formula_1", "final": {"question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "source_tables": ["results", "races"]}}
{"sample_id": 2250, "db_id": "machine_repair", "final": {"question": "Show names of technicians and the number of machines they are assigned to repair.", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2251, "db_id": "machine_repair", "final": {"question": "What are the names of the technicians  and how many machines are they assigned to repair?", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2252, "db_id": "machine_repair", "final": {"question": "List the names of technicians who have not been assigned to repair machines.", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "source_tables": ["technician", "repair_assignment"]}}
{"sample_id": 2288, "db_id": "entrepreneur", "final": {"question": "List the names of people that are not entrepreneurs.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2289, "db_id": "entrepreneur", "final": {"question": "What are the names of people who are not entrepreneurs?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["people", "entrepreneur"]}}
{"sample_id": 2290, "db_id": "entrepreneur", "final": {"question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "source_tables": ["entrepreneur"]}}
{"sample_id": 2291, "db_id": "entrepreneur", "final": {"question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "source_tables": ["entrepreneur"]}}
{"sample_id": 2312, "db_id": "perpetrator", "final": {"question": "List the names of people that are not perpetrators.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)", "source_tables": ["perpetrator", "people"]}}
{"sample_id": 2313, "db_id": "perpetrator", "final": {"question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.", "sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20", "source_tables": ["perpetrator"]}}
{"sample_id": 2373, "db_id": "csu_1", "final": {"question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "source_tables": ["degrees", "faculty", "campuses"]}}
{"sample_id": 2374, "db_id": "csu_1", "final": {"question": "How many faculty members did the university that conferred the most degrees in 2002 have?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "source_tables": ["degrees", "faculty", "campuses"]}}
{"sample_id": 2375, "db_id": "csu_1", "final": {"question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "source_tables": ["degrees", "faculty", "campuses"]}}
{"sample_id": 2376, "db_id": "csu_1", "final": {"question": "How many faculty members are at the university that gave the least number of degrees in 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "source_tables": ["degrees", "faculty", "campuses"]}}
{"sample_id": 2377, "db_id": "csu_1", "final": {"question": "How many undergraduates are there in \"San Jose State University\" in year 2004?", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Jose State University'", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2378, "db_id": "csu_1", "final": {"question": "How many undergraduates are there at San Jose State", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Jose State University'", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2379, "db_id": "csu_1", "final": {"question": "What is the number of graduates in \"San Francisco State University\" in year 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  'San Francisco State University'", "source_tables": ["discipline_enrollments", "campuses"]}}
{"sample_id": 2419, "db_id": "candidate_poll", "final": {"question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.", "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "source_tables": ["candidate"]}}
{"sample_id": 2420, "db_id": "candidate_poll", "final": {"question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?", "sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate", "source_tables": ["candidate"]}}
{"sample_id": 2421, "db_id": "candidate_poll", "final": {"question": "list all female (sex is F) candidate names in the alphabetical order.", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "source_tables": ["people", "candidate"]}}
{"sample_id": 2422, "db_id": "candidate_poll", "final": {"question": "What are the names of all female candidates in alphabetical order (sex is F)?", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name", "source_tables": ["people", "candidate"]}}
{"sample_id": 2505, "db_id": "movie_1", "final": {"question": "Find the names of reviewers who had given higher than 3 star ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "source_tables": ["reviewer", "rating"]}}
{"sample_id": 2506, "db_id": "movie_1", "final": {"question": "What are the names of the reviewers who have rated a movie more than 3 stars before?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "source_tables": ["reviewer", "rating"]}}
{"sample_id": 2507, "db_id": "movie_1", "final": {"question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris') GROUP BY mID", "source_tables": ["reviewer", "rating"]}}
{"sample_id": 2508, "db_id": "movie_1", "final": {"question": "What is the average rating for each movie that has never been reviewed by Brittany Harris?", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris') GROUP BY mID", "source_tables": ["reviewer", "rating"]}}
{"sample_id": 2509, "db_id": "movie_1", "final": {"question": "What are the ids of the movies that are not reviewed by Brittany Harris.", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris'", "source_tables": ["reviewer", "rating"]}}
{"sample_id": 2510, "db_id": "movie_1", "final": {"question": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  'Brittany Harris'", "source_tables": ["reviewer", "rating"]}}
{"sample_id": 2511, "db_id": "movie_1", "final": {"question": "Find the average rating star for each movie that received at least 2 ratings.", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "source_tables": ["rating"]}}
{"sample_id": 2512, "db_id": "movie_1", "final": {"question": "For each movie that received more than 3 reviews, what is the average rating?", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "source_tables": ["rating"]}}
{"sample_id": 2513, "db_id": "movie_1", "final": {"question": "find the ids of reviewers who did not give 4 star.", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "source_tables": ["rating"]}}
{"sample_id": 2557, "db_id": "county_public_safety", "final": {"question": "List the names of counties that do not have any cities.", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2558, "db_id": "county_public_safety", "final": {"question": "What are the names of counties that do not contain any cities?", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "source_tables": ["city", "county_public_safety"]}}
{"sample_id": 2559, "db_id": "county_public_safety", "final": {"question": "Show the police force shared by counties with location on the east and west.", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  'East' INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  'West'", "source_tables": ["county_public_safety"]}}
{"sample_id": 2560, "db_id": "county_public_safety", "final": {"question": "Which police forces operate in both counties that are located in the East and in the West?", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  'East' INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  'West'", "source_tables": ["county_public_safety"]}}
{"sample_id": 2624, "db_id": "inn_1", "final": {"question": "Find the number of distinct bed types available in this inn.", "sql": "SELECT count(DISTINCT bedType) FROM Rooms;", "source_tables": ["rooms"]}}
{"sample_id": 2625, "db_id": "inn_1", "final": {"question": "Find the name and id of the top 3 expensive rooms.", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "source_tables": ["rooms"]}}
{"sample_id": 2626, "db_id": "inn_1", "final": {"question": "What are the name and id of the three highest priced rooms?", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "source_tables": ["rooms"]}}
{"sample_id": 2627, "db_id": "inn_1", "final": {"question": "Find the name of rooms whose price is higher than the average price.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "source_tables": ["rooms"]}}
{"sample_id": 2628, "db_id": "inn_1", "final": {"question": "What are the name of rooms that cost more than the average.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "source_tables": ["rooms"]}}
{"sample_id": 2629, "db_id": "inn_1", "final": {"question": "Find the number of rooms that do not have any reservation.", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2630, "db_id": "inn_1", "final": {"question": "How many rooms have not had any reservation yet?", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "source_tables": ["rooms", "reservations"]}}
{"sample_id": 2650, "db_id": "local_govt_mdm", "final": {"question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?", "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'", "source_tables": ["customer_master_index", "cmi_cross_references"]}}
{"sample_id": 2677, "db_id": "party_host", "final": {"question": "Show the host names for parties with number of hosts greater than 20.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "source_tables": ["party_host", "host", "party"]}}
{"sample_id": 2678, "db_id": "party_host", "final": {"question": "Which parties have more than 20 hosts? Give me the host names for these parties.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "source_tables": ["party_host", "host", "party"]}}
{"sample_id": 2679, "db_id": "party_host", "final": {"question": "Show the name and the nationality of the oldest host.", "sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "source_tables": ["host"]}}
{"sample_id": 2718, "db_id": "storm_record", "final": {"question": "Return the names of the regions affected by storms that had a death count of at least 10.", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "source_tables": ["region", "storm", "affected_region"]}}
{"sample_id": 2719, "db_id": "storm_record", "final": {"question": "Show all storm names affecting region \"Denmark\".", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "source_tables": ["region", "storm", "affected_region"]}}
{"sample_id": 2720, "db_id": "storm_record", "final": {"question": "What are the names of the storms that affected Denmark?", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "source_tables": ["region", "storm", "affected_region"]}}
{"sample_id": 2721, "db_id": "storm_record", "final": {"question": "Show the region name with at least two storms.", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "source_tables": ["region", "affected_region"]}}
{"sample_id": 2781, "db_id": "election", "final": {"question": "Show the name of the party that has at least two records.", "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2", "source_tables": ["party"]}}
{"sample_id": 2782, "db_id": "election", "final": {"question": "Which party has two or more records?", "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2", "source_tables": ["party"]}}
{"sample_id": 2783, "db_id": "election", "final": {"question": "Show the name of the party that has the most delegates.", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["election", "party"]}}
{"sample_id": 2784, "db_id": "election", "final": {"question": "Which party has the largest number of delegates?", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["election", "party"]}}
{"sample_id": 2785, "db_id": "election", "final": {"question": "Show the people that have been governor the most times.", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2786, "db_id": "election", "final": {"question": "Which people severed as governor most frequently?", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["party"]}}
{"sample_id": 2809, "db_id": "news_report", "final": {"question": "List the names of journalists who have not reported any event.", "sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)", "source_tables": ["news_report", "journalist"]}}
{"sample_id": 2830, "db_id": "restaurant_1", "final": {"question": "How long does student Linda Smith spend on the restaurant in total?", "sql": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith';", "source_tables": ["visits_restaurant", "student"]}}
{"sample_id": 2831, "db_id": "restaurant_1", "final": {"question": "How many times has the student Linda Smith visited Subway?", "sql": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway';", "source_tables": ["restaurant", "visits_restaurant", "student"]}}
{"sample_id": 2847, "db_id": "customer_deliveries", "final": {"question": "Find the payment method that is used most frequently.", "sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "source_tables": ["customers"]}}
{"sample_id": 2903, "db_id": "icfp_1", "final": {"question": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE '%Monadic%'", "source_tables": ["authors", "authorship", "papers"]}}
{"sample_id": 2904, "db_id": "icfp_1", "final": {"question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.", "sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE '%Monadic%'", "source_tables": ["authors", "authorship", "papers"]}}
{"sample_id": 2905, "db_id": "icfp_1", "final": {"question": "Retrieve the title of the paper that has the largest number of authors.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "source_tables": ["authorship", "papers"]}}
{"sample_id": 2906, "db_id": "icfp_1", "final": {"question": "Which paper has the most authors? Give me the paper title.", "sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)", "source_tables": ["authorship", "papers"]}}
{"sample_id": 2907, "db_id": "icfp_1", "final": {"question": "What is the first name of the author with last name \"Ueno\"?", "sql": "SELECT fname FROM authors WHERE lname  =  'Ueno'", "source_tables": ["authors"]}}
{"sample_id": 2908, "db_id": "icfp_1", "final": {"question": "Which authors have last name \"Ueno\"? List their first names.", "sql": "SELECT fname FROM authors WHERE lname  =  'Ueno'", "source_tables": ["authors"]}}
{"sample_id": 2982, "db_id": "sakila_1", "final": {"question": "What was the date of the earliest payment?", "sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "source_tables": ["payment"]}}
{"sample_id": 2983, "db_id": "sakila_1", "final": {"question": "Where does the customer with the first name Linda live? And what is her email?", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "source_tables": ["address", "customer"]}}
{"sample_id": 2984, "db_id": "sakila_1", "final": {"question": "Return the address and email of the customer with the first name Linda.", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "source_tables": ["address", "customer"]}}
{"sample_id": 2985, "db_id": "sakila_1", "final": {"question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "source_tables": ["film"]}}
{"sample_id": 2986, "db_id": "sakila_1", "final": {"question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "source_tables": ["film"]}}
{"sample_id": 2987, "db_id": "sakila_1", "final": {"question": "What is the first name and the last name of the customer who made the earliest rental?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "source_tables": ["rental", "customer"]}}
{"sample_id": 2988, "db_id": "sakila_1", "final": {"question": "Return the full name of the customer who made the first rental.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "source_tables": ["rental", "customer"]}}
{"sample_id": 2989, "db_id": "sakila_1", "final": {"question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'", "source_tables": ["staff", "rental", "customer"]}}
{"sample_id": 3063, "db_id": "loan_1", "final": {"question": "Find the name of bank branches that provided some loans.", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "source_tables": ["bank", "loan"]}}
{"sample_id": 3064, "db_id": "loan_1", "final": {"question": "What are the names of the different banks that have provided loans?", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "source_tables": ["bank", "loan"]}}
{"sample_id": 3065, "db_id": "loan_1", "final": {"question": "Find the name and credit score of the customers who have some loans.", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "source_tables": ["customer", "loan"]}}
{"sample_id": 3066, "db_id": "loan_1", "final": {"question": "What are the different names and credit scores of customers who have taken a loan?", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "source_tables": ["customer", "loan"]}}
{"sample_id": 3067, "db_id": "loan_1", "final": {"question": "Find the the name of the customers who have a loan with amount more than 3000.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "source_tables": ["customer", "loan"]}}
{"sample_id": 3068, "db_id": "loan_1", "final": {"question": "What are the names of customers who have a loan of more than 3000 in amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "source_tables": ["customer", "loan"]}}
{"sample_id": 3069, "db_id": "loan_1", "final": {"question": "Find the city and name of bank branches that provide business loans.", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3070, "db_id": "loan_1", "final": {"question": "What are the names and cities of bank branches that offer loans for business?", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "source_tables": ["bank", "loan"]}}
{"sample_id": 3111, "db_id": "behavior_monitoring", "final": {"question": "What are the monthly rentals of student addresses in Texas state?", "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  'Texas'", "source_tables": ["student_addresses", "addresses"]}}
{"sample_id": 3112, "db_id": "behavior_monitoring", "final": {"question": "What are the first names and last names of students with address in Wisconsin state?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  'Wisconsin'", "source_tables": ["students", "addresses"]}}
{"sample_id": 3113, "db_id": "behavior_monitoring", "final": {"question": "What are the line 1 and average monthly rentals of all student addresses?", "sql": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id", "source_tables": ["student_addresses", "addresses"]}}
{"sample_id": 3114, "db_id": "behavior_monitoring", "final": {"question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  'Lyla'", "source_tables": ["teachers", "addresses"]}}
{"sample_id": 3143, "db_id": "assets_maintenance", "final": {"question": "List the all the assets make, model, details by the disposed date ascendingly.", "sql": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC", "source_tables": ["assets"]}}
{"sample_id": 3144, "db_id": "assets_maintenance", "final": {"question": "Which part has the least chargeable amount? List the part id and amount.", "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "source_tables": ["parts"]}}
{"sample_id": 3145, "db_id": "assets_maintenance", "final": {"question": "Which company started the earliest the maintenance contract? Show the company name.", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1", "source_tables": ["third_party_companies", "maintenance_contracts"]}}
{"sample_id": 3162, "db_id": "station_weather", "final": {"question": "Find the id and local authority of the station with has the highest average high temperature.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1", "source_tables": ["weekly_weather", "station"]}}
{"sample_id": 3297, "db_id": "college_1", "final": {"question": "What is the name and address of the department with the most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["department", "student"]}}
{"sample_id": 3298, "db_id": "college_1", "final": {"question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "source_tables": ["department", "student"]}}
{"sample_id": 3299, "db_id": "college_1", "final": {"question": "What is the name, address, and number of students in the departments that have the 3 most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "source_tables": ["department", "student"]}}
{"sample_id": 3300, "db_id": "college_1", "final": {"question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "source_tables": ["professor", "employee", "department"]}}
{"sample_id": 3301, "db_id": "college_1", "final": {"question": "What are the first names and office of the professors who are in the history department and have a Ph.D?", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "source_tables": ["professor", "employee", "department"]}}
{"sample_id": 3302, "db_id": "college_1", "final": {"question": "Find the first names of all instructors who have taught some course and the course code.", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "source_tables": ["employee", "class"]}}
{"sample_id": 3303, "db_id": "college_1", "final": {"question": "What are the first names of all teachers who have taught a course and the corresponding course codes?", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "source_tables": ["employee", "class"]}}
{"sample_id": 3304, "db_id": "college_1", "final": {"question": "Find the first names of all instructors who have taught some course and the course description.", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "source_tables": ["employee", "class", "course"]}}
{"sample_id": 3305, "db_id": "college_1", "final": {"question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "source_tables": ["employee", "class", "course"]}}
{"sample_id": 3306, "db_id": "college_1", "final": {"question": "Find the first names and offices of all instructors who have taught some course and also find the course description.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "source_tables": ["professor", "employee", "class", "course"]}}
{"sample_id": 3307, "db_id": "college_1", "final": {"question": "What are the first names, office locations of all lecturers who have taught some course?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "source_tables": ["professor", "employee", "class", "course"]}}
{"sample_id": 3308, "db_id": "college_1", "final": {"question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "source_tables": ["department", "course", "professor", "employee", "class"]}}
{"sample_id": 3309, "db_id": "college_1", "final": {"question": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "source_tables": ["department", "course", "professor", "employee", "class"]}}
{"sample_id": 3310, "db_id": "college_1", "final": {"question": "Find names of all students who took some course and the course description.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "source_tables": ["enroll", "class", "student", "course"]}}
{"sample_id": 3311, "db_id": "college_1", "final": {"question": "What are the names of all students who took a class and the corresponding course descriptions?", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "source_tables": ["enroll", "class", "student", "course"]}}
{"sample_id": 3312, "db_id": "college_1", "final": {"question": "Find names of all students who took some course and got A or C.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "source_tables": ["enroll", "student"]}}
{"sample_id": 3371, "db_id": "sports_competition", "final": {"question": "How many different position for players are listed?", "sql": "SELECT count(DISTINCT POSITION) FROM player", "source_tables": ["player"]}}
{"sample_id": 3372, "db_id": "sports_competition", "final": {"question": "what are the name of players who get more than the average points.", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "source_tables": ["player"]}}
{"sample_id": 3373, "db_id": "sports_competition", "final": {"question": "What are the names of all players that got more than the average number of points?", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "source_tables": ["player"]}}
{"sample_id": 3374, "db_id": "sports_competition", "final": {"question": "find the number of players whose points are lower than 30 in each position.", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "source_tables": ["player"]}}
{"sample_id": 3375, "db_id": "sports_competition", "final": {"question": "What is the number of players who have points less than 30 for each position?", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "source_tables": ["player"]}}
{"sample_id": 3394, "db_id": "manufacturer", "final": {"question": "Find the number of funiture types produced by each manufacturer as well as the company names.", "sql": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id", "source_tables": ["manufacturer", "furniture_manufacte"]}}
{"sample_id": 3497, "db_id": "hr_1", "final": {"question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?", "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )", "source_tables": ["employees"]}}
{"sample_id": 3498, "db_id": "hr_1", "final": {"question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "source_tables": ["employees"]}}
{"sample_id": 3499, "db_id": "hr_1", "final": {"question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "source_tables": ["employees"]}}
{"sample_id": 3500, "db_id": "hr_1", "final": {"question": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3501, "db_id": "hr_1", "final": {"question": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?", "sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3502, "db_id": "hr_1", "final": {"question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3503, "db_id": "hr_1", "final": {"question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "source_tables": ["employees"]}}
{"sample_id": 3504, "db_id": "hr_1", "final": {"question": "display the department id and the total salary for those departments which contains at least two employees.", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "source_tables": ["employees"]}}
{"sample_id": 3505, "db_id": "hr_1", "final": {"question": "What are total salaries and department id for each department that has more than 2 employees?", "sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2", "source_tables": ["employees"]}}
{"sample_id": 3506, "db_id": "hr_1", "final": {"question": "display all the information of those employees who did not have any job in the past.", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "source_tables": ["job_history", "employees"]}}
{"sample_id": 3507, "db_id": "hr_1", "final": {"question": "What is all the information about employees who have never had a job in the past?", "sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)", "source_tables": ["job_history", "employees"]}}
{"sample_id": 3508, "db_id": "hr_1", "final": {"question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.", "sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id", "source_tables": ["employees"]}}
{"sample_id": 3602, "db_id": "music_1", "final": {"question": "Find the names and number of works of the three artists who have produced the most songs.", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["artist", "song"]}}
{"sample_id": 3603, "db_id": "music_1", "final": {"question": "What are the names of the three artists who have produced the most songs, and how many works did they produce?", "sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["artist", "song"]}}
{"sample_id": 3604, "db_id": "music_1", "final": {"question": "Find the country of origin for the artist who made the least number of songs?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "source_tables": ["artist", "song"]}}
{"sample_id": 3605, "db_id": "music_1", "final": {"question": "What country is the artist who made the fewest songs from?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "source_tables": ["artist", "song"]}}
{"sample_id": 3606, "db_id": "music_1", "final": {"question": "What are the names of the songs whose rating is below the rating of all songs in English?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "source_tables": ["song"]}}
{"sample_id": 3607, "db_id": "music_1", "final": {"question": "What are the song names for every song whose rating is less than the minimum rating for English songs?", "sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')", "source_tables": ["song"]}}
{"sample_id": 3608, "db_id": "music_1", "final": {"question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "source_tables": ["song"]}}
{"sample_id": 3609, "db_id": "music_1", "final": {"question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "source_tables": ["song"]}}
{"sample_id": 3610, "db_id": "music_1", "final": {"question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  'modern')", "source_tables": ["song"]}}
{"sample_id": 3611, "db_id": "music_1", "final": {"question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  'modern')", "source_tables": ["song"]}}
{"sample_id": 3687, "db_id": "baseball_1", "final": {"question": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?", "sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3688, "db_id": "baseball_1", "final": {"question": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;", "source_tables": ["salary", "player"]}}
{"sample_id": 3689, "db_id": "baseball_1", "final": {"question": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.", "sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;", "source_tables": ["salary", "player"]}}
{"sample_id": 3690, "db_id": "baseball_1", "final": {"question": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.", "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'", "source_tables": ["team", "salary", "player"]}}
{"sample_id": 3691, "db_id": "baseball_1", "final": {"question": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?", "sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'", "source_tables": ["team", "salary", "player"]}}
{"sample_id": 3692, "db_id": "baseball_1", "final": {"question": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?", "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3693, "db_id": "baseball_1", "final": {"question": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.", "sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3694, "db_id": "baseball_1", "final": {"question": "Which team had the least number of attendances in home games in 1980?", "sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;", "source_tables": ["team", "home_game"]}}
{"sample_id": 3717, "db_id": "mountain_photos", "final": {"question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'", "sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'", "source_tables": ["camera_lens", "mountain", "photos"]}}
{"sample_id": 3753, "db_id": "program_share", "final": {"question": "find the names of programs whose origin is not in Beijing.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "source_tables": ["program"]}}
{"sample_id": 3754, "db_id": "program_share", "final": {"question": "Which programs' origins are not \"Beijing\"? Give me the program names.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "source_tables": ["program"]}}
{"sample_id": 3755, "db_id": "program_share", "final": {"question": "What are the names of the channels owned by CCTV or HBS?", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "source_tables": ["channel"]}}
{"sample_id": 3756, "db_id": "program_share", "final": {"question": "List the names of all the channels owned by either CCTV or HBS", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "source_tables": ["channel"]}}
{"sample_id": 3826, "db_id": "e_learning", "final": {"question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  'Karson'", "source_tables": ["students", "student_course_enrolment"]}}
{"sample_id": 3827, "db_id": "e_learning", "final": {"question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  'Zieme' AND T2.personal_name  =  'Bernie'", "source_tables": ["students", "student_course_enrolment"]}}
{"sample_id": 3828, "db_id": "e_learning", "final": {"question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  'Zieme' AND T2.personal_name  =  'Bernie'", "source_tables": ["students", "student_course_enrolment"]}}
{"sample_id": 3829, "db_id": "e_learning", "final": {"question": "Find the student ID and login name of the student with the most course enrollments", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["students", "student_course_enrolment"]}}
{"sample_id": 3830, "db_id": "e_learning", "final": {"question": "What are the student ID and login name of the student who are enrolled in the most courses?", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["students", "student_course_enrolment"]}}
{"sample_id": 3831, "db_id": "e_learning", "final": {"question": "Find the student ID and personal name of the student with at least two enrollments.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "source_tables": ["students", "student_course_enrolment"]}}
{"sample_id": 3832, "db_id": "e_learning", "final": {"question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.", "sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2", "source_tables": ["students", "student_course_enrolment"]}}
{"sample_id": 3833, "db_id": "e_learning", "final": {"question": "Find the student ID and middle name for all the students with at most two enrollments.", "sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2", "source_tables": ["students", "student_course_enrolment"]}}
{"sample_id": 3881, "db_id": "insurance_policies", "final": {"question": "How many settlements are there in total?", "sql": "SELECT count(*) FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3882, "db_id": "insurance_policies", "final": {"question": "Count the total number of settlements made.", "sql": "SELECT count(*) FROM Settlements", "source_tables": ["settlements"]}}
{"sample_id": 3883, "db_id": "insurance_policies", "final": {"question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "source_tables": ["payments"]}}
{"sample_id": 3884, "db_id": "insurance_policies", "final": {"question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "source_tables": ["payments"]}}
{"sample_id": 3971, "db_id": "hospital_1", "final": {"question": "Find the names of procedures which physician John Wen was trained in.", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["physician", "trained_in", "procedures"]}}
{"sample_id": 3972, "db_id": "hospital_1", "final": {"question": "What are the names of procedures physician John Wen was trained in?", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["physician", "trained_in", "procedures"]}}
{"sample_id": 3973, "db_id": "hospital_1", "final": {"question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["physician", "trained_in", "procedures"]}}
{"sample_id": 3974, "db_id": "hospital_1", "final": {"question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["physician", "trained_in", "procedures"]}}
{"sample_id": 3975, "db_id": "hospital_1", "final": {"question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["physician", "trained_in", "procedures"]}}
{"sample_id": 3976, "db_id": "hospital_1", "final": {"question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["physician", "trained_in", "procedures"]}}
{"sample_id": 3977, "db_id": "hospital_1", "final": {"question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["physician", "trained_in", "procedures"]}}
{"sample_id": 3978, "db_id": "hospital_1", "final": {"question": "What procedures cost less than 5000 and have John Wen as a trained physician?", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  'John Wen'", "source_tables": ["physician", "trained_in", "procedures"]}}
{"sample_id": 3979, "db_id": "hospital_1", "final": {"question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "source_tables": ["affiliated_with", "physician", "department"]}}
{"sample_id": 3980, "db_id": "hospital_1", "final": {"question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "source_tables": ["affiliated_with", "physician", "department"]}}
{"sample_id": 4015, "db_id": "ship_mission", "final": {"question": "Show the distinct fate of missions that involve ships with nationality \"United States\"", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  'United States'", "source_tables": ["mission", "ship"]}}
{"sample_id": 4016, "db_id": "ship_mission", "final": {"question": "What are the different fates of the mission that involved ships from the United States?", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  'United States'", "source_tables": ["mission", "ship"]}}
{"sample_id": 4017, "db_id": "ship_mission", "final": {"question": "List the name of ships that are not involved in any mission", "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)", "source_tables": ["mission", "ship"]}}
{"sample_id": 4075, "db_id": "student_1", "final": {"question": "For each classroom, report the classroom number and the number of grades using it.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4076, "db_id": "student_1", "final": {"question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.", "sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4077, "db_id": "student_1", "final": {"question": "Which classroom has the most students?", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "source_tables": ["list"]}}
{"sample_id": 4078, "db_id": "student_1", "final": {"question": "Find the classroom that the most students use.", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "source_tables": ["list"]}}
{"sample_id": 4079, "db_id": "student_1", "final": {"question": "Report the number of students in each classroom.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4080, "db_id": "student_1", "final": {"question": "For each classroom, show the classroom number and find how many students are using it.", "sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom", "source_tables": ["list"]}}
{"sample_id": 4101, "db_id": "company_employee", "final": {"question": "Show the names of employees that work for companies with sales bigger than 200.", "sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200", "source_tables": ["company", "people", "employment"]}}
{"sample_id": 4143, "db_id": "film_rank", "final": {"question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE '%Universal%'", "source_tables": ["film"]}}
{"sample_id": 4144, "db_id": "film_rank", "final": {"question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE '%Universal%'", "source_tables": ["film"]}}
{"sample_id": 4145, "db_id": "film_rank", "final": {"question": "Show the studios that have not produced films with director \"Walter Hill\".", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  'Walter Hill'", "source_tables": ["film"]}}
{"sample_id": 4146, "db_id": "film_rank", "final": {"question": "Which studios have never worked with the director Walter Hill?", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  'Walter Hill'", "source_tables": ["film"]}}
{"sample_id": 4225, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the location name and code with the least documents.", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["ref_locations", "document_locations"]}}
{"sample_id": 4226, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the name and code of the location with the smallest number of documents?", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["ref_locations", "document_locations"]}}
{"sample_id": 4227, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4228, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4229, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the id of each employee and the number of document destruction authorised by that employee.", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4230, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the id of each employee and the number of document destruction authorised by that employee?", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4231, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the employee ids and the number of documents destroyed by each employee.", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4232, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "What are the id of each employee and the number of document destroyed by that employee?", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"]}}
{"sample_id": 4233, "db_id": "cre_Doc_Tracking_DB", "final": {"question": "Show the ids of the employees who don't authorize destruction for any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "source_tables": ["employees", "documents_to_be_destroyed"]}}
{"sample_id": 4299, "db_id": "club_1", "final": {"question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  'HOU'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4300, "db_id": "club_1", "final": {"question": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  'HOU'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4301, "db_id": "club_1", "final": {"question": "How many clubs does the student named \"Eric Tai\" belong to?", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Eric' AND t3.lname  =  'Tai'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4302, "db_id": "club_1", "final": {"question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Eric' AND t3.lname  =  'Tai'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4303, "db_id": "club_1", "final": {"question": "List the clubs having \"Davis Steven\" as a member.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Davis' AND t3.lname  =  'Steven'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4304, "db_id": "club_1", "final": {"question": "What are the names of the clubs that have \"Davis Steven\" as a member?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  'Davis' AND t3.lname  =  'Steven'", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4305, "db_id": "club_1", "final": {"question": "List the clubs that have at least a member with advisor \"1121\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "source_tables": ["club", "member_of_club", "student"]}}
{"sample_id": 4375, "db_id": "tracking_grants_for_research", "final": {"question": "List the organisation id with the maximum outcome count, and the count.", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4376, "db_id": "tracking_grants_for_research", "final": {"question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["projects", "project_outcomes"]}}
{"sample_id": 4377, "db_id": "tracking_grants_for_research", "final": {"question": "List the project details of the projects launched by the organisation", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "source_tables": ["projects"]}}
{"sample_id": 4378, "db_id": "tracking_grants_for_research", "final": {"question": "What are the details for the projects which were launched by the organization with the most projects?", "sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )", "source_tables": ["projects"]}}
{"sample_id": 4379, "db_id": "tracking_grants_for_research", "final": {"question": "List the research staff details, and order in ascending order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "source_tables": ["research_staff"]}}
{"sample_id": 4380, "db_id": "tracking_grants_for_research", "final": {"question": "What details are there on the research staff? List the result in ascending alphabetical order.", "sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "source_tables": ["research_staff"]}}
{"sample_id": 4381, "db_id": "tracking_grants_for_research", "final": {"question": "How many tasks are there in total?", "sql": "SELECT count(*) FROM Tasks", "source_tables": ["tasks"]}}
{"sample_id": 4459, "db_id": "network_2", "final": {"question": "Who has friends that are older than the average age? Print their friends and their ages as well", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "source_tables": ["person", "personfriend"]}}
{"sample_id": 4460, "db_id": "network_2", "final": {"question": "Whare the names, friends, and ages of all people who are older than the average age of a person?", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "source_tables": ["person", "personfriend"]}}
{"sample_id": 4461, "db_id": "network_2", "final": {"question": "Who is the friend of Zach with longest year relationship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend"]}}
{"sample_id": 4462, "db_id": "network_2", "final": {"question": "Which friend of Zach has the longest-lasting friendship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["personfriend"]}}
{"sample_id": 4463, "db_id": "network_2", "final": {"question": "What is the age of the friend of Zach with longest year relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["person", "personfriend"]}}
{"sample_id": 4464, "db_id": "network_2", "final": {"question": "What are the ages of all of Zach's friends who are in the longest relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "source_tables": ["person", "personfriend"]}}
{"sample_id": 4465, "db_id": "network_2", "final": {"question": "Find the name of persons who are friends with Alice for the shortest years.", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend"]}}
{"sample_id": 4466, "db_id": "network_2", "final": {"question": "What are the names of all people who are friends with Alice for the shortest amount of time?", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "source_tables": ["personfriend"]}}
{"sample_id": 4489, "db_id": "decoration_competition", "final": {"question": "Show the names of members that have a rank in round higher than 3.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3", "source_tables": ["member", "round"]}}
{"sample_id": 4527, "db_id": "document_management", "final": {"question": "What is the description of the most popular role among users that have logged in?", "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["roles", "users"]}}
{"sample_id": 4528, "db_id": "document_management", "final": {"question": "Find the average access count of documents with the least popular structure.", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4529, "db_id": "document_management", "final": {"question": "What is the average access count of documents that have the least common structure?", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "source_tables": ["documents"]}}
{"sample_id": 4530, "db_id": "document_management", "final": {"question": "List all the image name and URLs in the order of their names.", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "source_tables": ["images"]}}
{"sample_id": 4568, "db_id": "company_office", "final": {"question": "List the names of buildings that have no company office.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "source_tables": ["buildings", "office_locations"]}}
{"sample_id": 4569, "db_id": "company_office", "final": {"question": "Which buildings do not have any company office? Give me the building names.", "sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)", "source_tables": ["buildings", "office_locations"]}}
{"sample_id": 4570, "db_id": "company_office", "final": {"question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  'USA' INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  'China'", "source_tables": ["companies"]}}
{"sample_id": 4571, "db_id": "company_office", "final": {"question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?", "sql": "SELECT Industry FROM Companies WHERE Headquarters  =  'USA' INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  'China'", "source_tables": ["companies"]}}
{"sample_id": 4588, "db_id": "solvency_ii", "final": {"question": "Show the names of products that are in at least two events.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2", "source_tables": ["products_in_events", "products"]}}
{"sample_id": 4608, "db_id": "entertainment_awards", "final": {"question": "List the year in which there are more than one festivals.", "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1", "source_tables": ["festival_detail"]}}
{"sample_id": 4609, "db_id": "entertainment_awards", "final": {"question": "List the name of artworks that are not nominated.", "sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)", "source_tables": ["nomination", "artwork"]}}
{"sample_id": 4625, "db_id": "customers_campaigns_ecommerce", "final": {"question": "What are the distinct address type codes for all customer addresses?", "sql": "SELECT DISTINCT address_type_code FROM customer_addresses", "source_tables": ["customer_addresses"]}}
{"sample_id": 4687, "db_id": "college_3", "final": {"question": "What are the full names of faculty members who are a part of department 520?", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "source_tables": ["faculty", "member_of"]}}
{"sample_id": 4688, "db_id": "college_3", "final": {"question": "What are the first names and last names of the students that minor in the department with DNO 140.", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "source_tables": ["minor_in", "student"]}}
{"sample_id": 4689, "db_id": "college_3", "final": {"question": "What are the full names of students minoring in department 140?", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "source_tables": ["minor_in", "student"]}}
{"sample_id": 4690, "db_id": "college_3", "final": {"question": "Find the last names of faculties who are members of computer science department.", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  'Computer Science'", "source_tables": ["faculty", "department", "member_of"]}}
{"sample_id": 4691, "db_id": "college_3", "final": {"question": "What are the last names of faculty who are part of the computer science department?", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  'Computer Science'", "source_tables": ["faculty", "department", "member_of"]}}
{"sample_id": 4692, "db_id": "college_3", "final": {"question": "Find the average grade point of student whose last name is Smith.", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  'Smith'", "source_tables": ["gradeconversion", "enrolled_in", "student"]}}
{"sample_id": 4693, "db_id": "college_3", "final": {"question": "What is the average gradepoint for students with the last name Smith?", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  'Smith'", "source_tables": ["gradeconversion", "enrolled_in", "student"]}}
{"sample_id": 4772, "db_id": "department_store", "final": {"question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  'red jeans'", "source_tables": ["suppliers", "product_suppliers", "products"]}}
{"sample_id": 4773, "db_id": "department_store", "final": {"question": "What are the distinct names and phone numbers for suppliers who have red jeans?", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  'red jeans'", "source_tables": ["suppliers", "product_suppliers", "products"]}}
{"sample_id": 4774, "db_id": "department_store", "final": {"question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4775, "db_id": "department_store", "final": {"question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "source_tables": ["products"]}}
{"sample_id": 4776, "db_id": "department_store", "final": {"question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   'Cancelled' ORDER BY order_date", "source_tables": ["customer_orders"]}}
{"sample_id": 4777, "db_id": "department_store", "final": {"question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   'Cancelled' ORDER BY order_date", "source_tables": ["customer_orders"]}}
{"sample_id": 4778, "db_id": "department_store", "final": {"question": "Find the names of products that were bought by at least two distinct customers.", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "source_tables": ["customer_orders", "order_items", "products"]}}
{"sample_id": 4779, "db_id": "department_store", "final": {"question": "What are the distinct names of products purchased by at least two different customers?", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "source_tables": ["customer_orders", "order_items", "products"]}}
{"sample_id": 4826, "db_id": "aircraft", "final": {"question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Gatwick'", "source_tables": ["aircraft", "airport", "airport_aircraft"]}}
{"sample_id": 4827, "db_id": "aircraft", "final": {"question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  'London Gatwick'", "source_tables": ["aircraft", "airport", "airport_aircraft"]}}
{"sample_id": 4828, "db_id": "aircraft", "final": {"question": "Show all information on the airport that has the largest number of international passengers.", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "source_tables": ["airport"]}}
{"sample_id": 4829, "db_id": "aircraft", "final": {"question": "What is all the information on the airport with the largest number of international passengers?", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "source_tables": ["airport"]}}
{"sample_id": 4849, "db_id": "local_govt_and_lot", "final": {"question": "What are the resident details containing the substring 'Miss'?", "sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", "source_tables": ["residents"]}}
{"sample_id": 4885, "db_id": "school_player", "final": {"question": "List the locations of schools that do not have any player.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "source_tables": ["player", "school"]}}
{"sample_id": 4886, "db_id": "school_player", "final": {"question": "Which schools do not have any player? Give me the school locations.", "sql": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)", "source_tables": ["player", "school"]}}
{"sample_id": 4887, "db_id": "school_player", "final": {"question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "source_tables": ["school"]}}
{"sample_id": 4888, "db_id": "school_player", "final": {"question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?", "sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900", "source_tables": ["school"]}}
{"sample_id": 4928, "db_id": "store_product", "final": {"question": "What are all of the products whose name includes the substring \"Scanner\"?", "sql": "SELECT product FROM product WHERE product LIKE '%Scanner%'", "source_tables": ["product"]}}
{"sample_id": 4929, "db_id": "store_product", "final": {"question": "Find the most prominent max page size among all the products.", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "source_tables": ["product"]}}
{"sample_id": 4930, "db_id": "store_product", "final": {"question": "What is the most common maximum page size?", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "source_tables": ["product"]}}
{"sample_id": 4931, "db_id": "store_product", "final": {"question": "Find the name of the products that are not using the most frequently-used max page size.", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["product"]}}
{"sample_id": 5021, "db_id": "soccer_2", "final": {"question": "Find the names of states that have some college students playing in goalie and mid positions.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "source_tables": ["tryout", "college"]}}
{"sample_id": 5022, "db_id": "soccer_2", "final": {"question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "source_tables": ["tryout", "college"]}}
{"sample_id": 5023, "db_id": "soccer_2", "final": {"question": "How many schools have some students playing in goalie and mid positions.", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "source_tables": ["tryout"]}}
{"sample_id": 5024, "db_id": "soccer_2", "final": {"question": "How many schools have students playing in goalie and mid-field positions?", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "source_tables": ["tryout"]}}
{"sample_id": 5025, "db_id": "soccer_2", "final": {"question": "Find the names of schools that have some players in the mid position but not in the goalie position.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 5026, "db_id": "soccer_2", "final": {"question": "What are the names of the schools with some players in the mid position but no goalies?", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "source_tables": ["tryout"]}}
{"sample_id": 5027, "db_id": "soccer_2", "final": {"question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "source_tables": ["tryout", "college"]}}
{"sample_id": 5028, "db_id": "soccer_2", "final": {"question": "What are the names of all the states with college students playing in the mid position but no goalies?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "source_tables": ["tryout", "college"]}}
{"sample_id": 5029, "db_id": "soccer_2", "final": {"question": "How many states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "source_tables": ["tryout", "college"]}}
{"sample_id": 5030, "db_id": "soccer_2", "final": {"question": "What is the count of states with college students playing in the mid position but not as goalies?", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "source_tables": ["tryout", "college"]}}
{"sample_id": 5075, "db_id": "device", "final": {"question": "List the names of shops that have no devices in stock.", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "source_tables": ["stock", "shop"]}}
{"sample_id": 5076, "db_id": "device", "final": {"question": "What are the names of shops that do not have any devices in stock?", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "source_tables": ["stock", "shop"]}}
{"sample_id": 5077, "db_id": "device", "final": {"question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.", "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008", "source_tables": ["shop"]}}
{"sample_id": 5078, "db_id": "device", "final": {"question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?", "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008", "source_tables": ["shop"]}}
{"sample_id": 5148, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "How many drama workshop groups are there in each city? Return both the city and the count.", "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town", "source_tables": ["drama_workshop_groups", "addresses"]}}
{"sample_id": 5149, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the marketing region code that has the most drama workshop groups?", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5150, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which marketing region has the most drama workshop groups? Give me the region code.", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["drama_workshop_groups"]}}
{"sample_id": 5151, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Show all cities where at least one customer lives in but no performer lives in.", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "source_tables": ["performers", "customers", "addresses"]}}
{"sample_id": 5152, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which cities have at least one customer but no performer?", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "source_tables": ["performers", "customers", "addresses"]}}
{"sample_id": 5153, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What is the most frequent status of bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["bookings"]}}
{"sample_id": 5154, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "Which status code is the most common of all the bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["bookings"]}}
{"sample_id": 5155, "db_id": "cre_Drama_Workshop_Groups", "final": {"question": "What are the names of the workshop groups that have bookings with status code \"stop\"?", "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  'stop'", "source_tables": ["bookings", "drama_workshop_groups"]}}
{"sample_id": 5245, "db_id": "music_2", "final": {"question": "Find all the songs that do not have a back vocal.", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  'back'", "source_tables": ["songs", "vocals"]}}
{"sample_id": 5246, "db_id": "music_2", "final": {"question": "What are the different names of all songs without back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  'back'", "source_tables": ["songs", "vocals"]}}
{"sample_id": 5247, "db_id": "music_2", "final": {"question": "Which vocal type has the band mate with first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  'Solveig' GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "vocals"]}}
{"sample_id": 5248, "db_id": "music_2", "final": {"question": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  'Solveig' GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "vocals"]}}
{"sample_id": 5249, "db_id": "music_2", "final": {"question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  'Heilo' AND T2.title  =  'Der Kapitan'", "source_tables": ["band", "songs", "vocals"]}}
{"sample_id": 5250, "db_id": "music_2", "final": {"question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  'Heilo' AND T2.title  =  'Der Kapitan'", "source_tables": ["band", "songs", "vocals"]}}
{"sample_id": 5251, "db_id": "music_2", "final": {"question": "Find the first name of the band mate that has performed in most songs.", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["performance", "band", "songs"]}}
{"sample_id": 5252, "db_id": "music_2", "final": {"question": "What is the first name of the band mate who perfomed in the most songs?", "sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1", "source_tables": ["performance", "band", "songs"]}}
{"sample_id": 5253, "db_id": "music_2", "final": {"question": "Which vocal type has the band mate with first name \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  'Marianne' GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "vocals"]}}
{"sample_id": 5254, "db_id": "music_2", "final": {"question": "What is the vocal type of the band mate whose first name is \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  'Marianne' GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["band", "vocals"]}}
{"sample_id": 5329, "db_id": "manufactory_1", "final": {"question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "source_tables": ["products"]}}
{"sample_id": 5330, "db_id": "manufactory_1", "final": {"question": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?", "sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC", "source_tables": ["products"]}}
{"sample_id": 5331, "db_id": "manufactory_1", "final": {"question": "Select all the data from the products and each product's manufacturer.", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5332, "db_id": "manufactory_1", "final": {"question": "What is all the product data, as well as  each product's manufacturer?", "sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5333, "db_id": "manufactory_1", "final": {"question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "source_tables": ["products"]}}
{"sample_id": 5334, "db_id": "manufactory_1", "final": {"question": "What are the average prices of products, grouped by manufacturer code?", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "source_tables": ["products"]}}
{"sample_id": 5335, "db_id": "manufactory_1", "final": {"question": "Select the average price of each manufacturer's products, showing the manufacturer's name.", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5336, "db_id": "manufactory_1", "final": {"question": "What are the average prices of products, grouped by manufacturer name?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name", "source_tables": ["manufacturers", "products"]}}
{"sample_id": 5383, "db_id": "tracking_software_problems", "final": {"question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick' )", "source_tables": ["staff", "problems"]}}
{"sample_id": 5384, "db_id": "tracking_software_problems", "final": {"question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick' )", "source_tables": ["staff", "problems"]}}
{"sample_id": 5385, "db_id": "tracking_software_problems", "final": {"question": "Find the top 3 products which have the largest number of problems?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["problems", "product"]}}
{"sample_id": 5386, "db_id": "tracking_software_problems", "final": {"question": "What are the three products that have the most problems?s", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "source_tables": ["problems", "product"]}}
{"sample_id": 5428, "db_id": "shop_membership", "final": {"question": "What are the cities that do not have any branches with more than 100 members?", "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100", "source_tables": ["branch"]}}
{"sample_id": 5429, "db_id": "shop_membership", "final": {"question": "What is the sum of total pounds of purchase in year 2018 for all branches in London?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "source_tables": ["branch", "purchase"]}}
{"sample_id": 5430, "db_id": "shop_membership", "final": {"question": "How many total pounds were purchased in the year 2018 at all London branches?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "source_tables": ["branch", "purchase"]}}
{"sample_id": 5431, "db_id": "shop_membership", "final": {"question": "What is the total number of purchases for members with level 6?", "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6", "source_tables": ["member", "purchase"]}}
{"sample_id": 5494, "db_id": "voter_2", "final": {"question": "How many students does each advisor have?", "sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor", "source_tables": ["student"]}}
{"sample_id": 5495, "db_id": "voter_2", "final": {"question": "Report all advisors that advise more than 2 students.", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5496, "db_id": "voter_2", "final": {"question": "Which advisors have more than two students?", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2", "source_tables": ["student"]}}
{"sample_id": 5497, "db_id": "voter_2", "final": {"question": "Report all majors that have less than 3 students.", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "source_tables": ["student"]}}
{"sample_id": 5498, "db_id": "voter_2", "final": {"question": "What are the majors only less than three students are studying?", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "source_tables": ["student"]}}
{"sample_id": 5499, "db_id": "voter_2", "final": {"question": "For each election cycle, report the number of voting records.", "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "source_tables": ["voting_record"]}}
{"sample_id": 5500, "db_id": "voter_2", "final": {"question": "Count the number of voting records for each election cycle.", "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "source_tables": ["voting_record"]}}
{"sample_id": 5577, "db_id": "products_gen_characteristics", "final": {"question": "What is the unit of measurement of product named \"cumin\"?", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'cumin'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5578, "db_id": "products_gen_characteristics", "final": {"question": "Give the unit of measure for the product with the name 'cumin'.", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'cumin'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5579, "db_id": "products_gen_characteristics", "final": {"question": "Find the unit of measurement and product category code of product named \"chervil\".", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'chervil'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5580, "db_id": "products_gen_characteristics", "final": {"question": "What are the unit of measure and category code for the 'chervil' product?", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  'chervil'", "source_tables": ["ref_product_categories", "products"]}}
{"sample_id": 5581, "db_id": "products_gen_characteristics", "final": {"question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  'white' AND t2.unit_of_measure != 'Handful'", "source_tables": ["ref_product_categories", "ref_colors", "products"]}}
{"sample_id": 5582, "db_id": "products_gen_characteristics", "final": {"question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  'white' AND t2.unit_of_measure != 'Handful'", "source_tables": ["ref_product_categories", "ref_colors", "products"]}}
{"sample_id": 5583, "db_id": "products_gen_characteristics", "final": {"question": "What is the description of the color for most products?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5584, "db_id": "products_gen_characteristics", "final": {"question": "Return the color description that is most common across all products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ref_colors", "products"]}}
{"sample_id": 5619, "db_id": "swimming", "final": {"question": "Find the names of the swimmers who have no record.", "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)", "source_tables": ["record", "swimmer"]}}
{"sample_id": 5620, "db_id": "swimming", "final": {"question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'", "source_tables": ["record", "swimmer"]}}
{"sample_id": 5621, "db_id": "swimming", "final": {"question": "Find the names of stadiums that some Australian swimmers have been to.", "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'", "source_tables": ["record", "stadium", "event", "swimmer"]}}
{"sample_id": 5641, "db_id": "railway", "final": {"question": "List the object number of railways that do not have any trains.", "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)", "source_tables": ["railway", "train"]}}
{"sample_id": 5642, "db_id": "railway", "final": {"question": "Show the countries that have both managers of age above 50 and managers of age below 46.", "sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46", "source_tables": ["manager"]}}
{"sample_id": 5658, "db_id": "customers_and_products_contacts", "final": {"question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", "source_tables": ["customer_orders", "customers"]}}
{"sample_id": 5741, "db_id": "dorm_1", "final": {"question": "Find the number of female students (with F sex) living in Smith Hall", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "source_tables": ["lives_in", "student", "dorm"]}}
{"sample_id": 5742, "db_id": "dorm_1", "final": {"question": "How many female students live in Smith Hall?", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "source_tables": ["lives_in", "student", "dorm"]}}
{"sample_id": 5743, "db_id": "dorm_1", "final": {"question": "Find the name of amenities Smith Hall dorm have.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}}
{"sample_id": 5744, "db_id": "dorm_1", "final": {"question": "What are the names of the amenities that Smith Hall has?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}}
{"sample_id": 5745, "db_id": "dorm_1", "final": {"question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}}
{"sample_id": 5746, "db_id": "dorm_1", "final": {"question": "What amenities does Smith Hall have in alphabetical order?", "sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name", "source_tables": ["dorm_amenity", "has_amenity", "dorm"]}}
{"sample_id": 5747, "db_id": "dorm_1", "final": {"question": "Find the name of amenity that is most common in all dorms.", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dorm_amenity", "has_amenity"]}}
{"sample_id": 5748, "db_id": "dorm_1", "final": {"question": "What is the most common amenity in the dorms?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["dorm_amenity", "has_amenity"]}}
{"sample_id": 5749, "db_id": "dorm_1", "final": {"question": "Find the first name of students who are living in the dorm that has most number of amenities.", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["dorm_amenity", "has_amenity", "dorm", "student", "lives_in"]}}
{"sample_id": 5750, "db_id": "dorm_1", "final": {"question": "What are the first names of all students who live in the dorm with the most amenities?", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["dorm_amenity", "has_amenity", "dorm", "student", "lives_in"]}}
{"sample_id": 5797, "db_id": "customer_complaints", "final": {"question": "How many distinct complaint type codes are there in the database?", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "source_tables": ["complaints"]}}
{"sample_id": 5798, "db_id": "customer_complaints", "final": {"question": "Count the number of different complaint type codes.", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "source_tables": ["complaints"]}}
{"sample_id": 5799, "db_id": "customer_complaints", "final": {"question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  'vbogisich@example.org'", "source_tables": ["customers"]}}
{"sample_id": 5800, "db_id": "customer_complaints", "final": {"question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  'vbogisich@example.org'", "source_tables": ["customers"]}}
{"sample_id": 5831, "db_id": "workshop_paper", "final": {"question": "Show the authors who have submissions to more than one workshop.", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "source_tables": ["submission", "acceptance"]}}
{"sample_id": 5832, "db_id": "workshop_paper", "final": {"question": "Which authors have submitted to more than one workshop?", "sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1", "source_tables": ["submission", "acceptance"]}}
{"sample_id": 5833, "db_id": "workshop_paper", "final": {"question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "source_tables": ["workshop"]}}
{"sample_id": 5869, "db_id": "tracking_share_transactions", "final": {"question": "Show the transaction type code that occurs the most frequently.", "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["transactions"]}}
{"sample_id": 5870, "db_id": "tracking_share_transactions", "final": {"question": "Show the description of the transaction type that occurs most frequently.", "sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["ref_transaction_types", "transactions"]}}
{"sample_id": 5871, "db_id": "tracking_share_transactions", "final": {"question": "Show the id and details of the investor that has the largest number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["investors", "transactions"]}}
{"sample_id": 5872, "db_id": "tracking_share_transactions", "final": {"question": "Show the id and details for the investors who have the top 3 number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3", "source_tables": ["investors", "transactions"]}}
{"sample_id": 5945, "db_id": "cre_Theme_park", "final": {"question": "What are the name, id and the corresponding number of visits for each  tourist attraction?", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5946, "db_id": "cre_Theme_park", "final": {"question": "Show the names and ids of tourist attractions that are visited at least two times.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5947, "db_id": "cre_Theme_park", "final": {"question": "Which tourist attractions are visited at least twice? Give me their names and ids.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5948, "db_id": "cre_Theme_park", "final": {"question": "Show the names and ids of tourist attractions that are visited at most once.", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5949, "db_id": "cre_Theme_park", "final": {"question": "What are the names and ids of the tourist attractions that are visited at most once?", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "source_tables": ["tourist_attractions", "visits"]}}
{"sample_id": 5950, "db_id": "cre_Theme_park", "final": {"question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '660 Shea Crescent' OR T2.How_to_Get_There  =  'walk'", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5951, "db_id": "cre_Theme_park", "final": {"question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  '660 Shea Crescent' OR T2.How_to_Get_There  =  'walk'", "source_tables": ["locations", "tourist_attractions"]}}
{"sample_id": 5952, "db_id": "cre_Theme_park", "final": {"question": "What are the names of the tourist attractions that have parking or shopping as their feature details?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "source_tables": ["tourist_attractions", "tourist_attraction_features", "features"]}}
{"sample_id": 6030, "db_id": "game_1", "final": {"question": "Show ids of students who play video game and play sports.", "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "source_tables": ["sportsinfo", "plays_games"]}}
{"sample_id": 6031, "db_id": "game_1", "final": {"question": "What are the ids of all students who played video games and sports?", "sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "source_tables": ["sportsinfo", "plays_games"]}}
{"sample_id": 6032, "db_id": "game_1", "final": {"question": "Show all game ids and the number of hours played.", "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid", "source_tables": ["plays_games"]}}
{"sample_id": 6033, "db_id": "game_1", "final": {"question": "What are ids and total number of hours played for each game?", "sql": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid", "source_tables": ["plays_games"]}}
{"sample_id": 6034, "db_id": "game_1", "final": {"question": "Show all student ids and the number of hours played.", "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid", "source_tables": ["plays_games"]}}
{"sample_id": 6035, "db_id": "game_1", "final": {"question": "What are the ids of all students and number of hours played?", "sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid", "source_tables": ["plays_games"]}}
{"sample_id": 6036, "db_id": "game_1", "final": {"question": "Show the game name that has most number of hours played.", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 6037, "db_id": "game_1", "final": {"question": "What is the name of the game that has been played the most?", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1", "source_tables": ["video_games", "plays_games"]}}
{"sample_id": 6118, "db_id": "customers_and_addresses", "final": {"question": "Find the total amount of products ordered before 2018-03-17 07:13:53.", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  '2018-03-17 07:13:53'", "source_tables": ["customer_orders", "order_items"]}}
{"sample_id": 6119, "db_id": "customers_and_addresses", "final": {"question": "What is the total amount of products purchased before 2018-03-17 07:13:53?", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  '2018-03-17 07:13:53'", "source_tables": ["customer_orders", "order_items"]}}
{"sample_id": 6120, "db_id": "customers_and_addresses", "final": {"question": "Who made the latest order?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "source_tables": ["customer_orders", "customers"]}}
{"sample_id": 6121, "db_id": "customers_and_addresses", "final": {"question": "Find the name of the customer who made an order most recently.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "source_tables": ["customer_orders", "customers"]}}
{"sample_id": 6122, "db_id": "customers_and_addresses", "final": {"question": "Which product has been ordered most number of times?", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6123, "db_id": "customers_and_addresses", "final": {"question": "What is the most frequently ordered product? Tell me the detail of the product", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6124, "db_id": "customers_and_addresses", "final": {"question": "Find the name and ID of the product whose total order quantity is the largest.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6125, "db_id": "customers_and_addresses", "final": {"question": "What are the name and ID of the product bought the most.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "source_tables": ["order_items", "products"]}}
{"sample_id": 6184, "db_id": "music_4", "final": {"question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "source_tables": ["artist", "volume"]}}
{"sample_id": 6185, "db_id": "music_4", "final": {"question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "source_tables": ["artist", "volume"]}}
{"sample_id": 6186, "db_id": "music_4", "final": {"question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  'Best Song' AND RESULT  =  'Awarded'", "source_tables": ["music_festival"]}}
{"sample_id": 6187, "db_id": "music_4", "final": {"question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".", "sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  'Best Song' AND RESULT  =  'Awarded'", "source_tables": ["music_festival"]}}
{"sample_id": 6188, "db_id": "music_4", "final": {"question": "What is the issue date of the volume with the minimum weeks on top?", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "source_tables": ["volume"]}}
{"sample_id": 6189, "db_id": "music_4", "final": {"question": "Return the issue date of the volume that has spent the fewest weeks on top.", "sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "source_tables": ["volume"]}}
{"sample_id": 6209, "db_id": "roller_coaster", "final": {"question": "Show the name and population of the country that has the highest roller coaster.", "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1", "source_tables": ["country", "roller_coaster"]}}
{"sample_id": 6251, "db_id": "ship_1", "final": {"question": "Find the name of the ships that have more than one captain.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "source_tables": ["ship", "captain"]}}
{"sample_id": 6252, "db_id": "ship_1", "final": {"question": "What are the names of ships that have more than one captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "source_tables": ["ship", "captain"]}}
{"sample_id": 6253, "db_id": "ship_1", "final": {"question": "what are the names and classes of the ships that do not have any captain yet?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "source_tables": ["ship", "captain"]}}
{"sample_id": 6254, "db_id": "ship_1", "final": {"question": "Return the names and classes of ships that do not have a captain?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "source_tables": ["ship", "captain"]}}
{"sample_id": 6293, "db_id": "city_record", "final": {"question": "Find the number of matches in different competitions.", "sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition", "source_tables": ["match"]}}
{"sample_id": 6294, "db_id": "city_record", "final": {"question": "For each competition, count the number of matches.", "sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition", "source_tables": ["match"]}}
{"sample_id": 6295, "db_id": "city_record", "final": {"question": "List venues of all matches in the order of their dates starting from the most recent one.", "sql": "SELECT venue FROM MATCH ORDER BY date DESC", "source_tables": ["match"]}}
{"sample_id": 6296, "db_id": "city_record", "final": {"question": "What are the venues of all the matches? Sort them in the descending order of match date.", "sql": "SELECT venue FROM MATCH ORDER BY date DESC", "source_tables": ["match"]}}
{"sample_id": 6333, "db_id": "e_government", "final": {"question": "Which is the email of the party that has used the services the most number of times?", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "source_tables": ["parties", "party_services"]}}
{"sample_id": 6334, "db_id": "e_government", "final": {"question": "Return the party email that has used party services the greatest number of times.", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "source_tables": ["parties", "party_services"]}}
{"sample_id": 6335, "db_id": "e_government", "final": {"question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'", "source_tables": ["addresses"]}}
{"sample_id": 6336, "db_id": "e_government", "final": {"question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'", "source_tables": ["addresses"]}}
{"sample_id": 6355, "db_id": "school_bus", "final": {"question": "Show the type of school and the number of buses for each type.", "sql": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type", "source_tables": ["school_bus", "school"]}}
{"sample_id": 6374, "db_id": "flight_company", "final": {"question": "How many companies operates airlines in each airport?", "sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id", "source_tables": ["operate_company", "flight", "airport"]}}
{"sample_id": 6445, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the ids for documents that have the budget description 'Government'.", "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  'Government'", "source_tables": ["documents_with_expenses", "ref_budget_codes"]}}
{"sample_id": 6446, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show budget type codes and the number of documents in each budget type.", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6447, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the different budget type codes, and how many documents are there for each?", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6448, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What is the budget type code with most number of documents.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6449, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Give the budget type code that is most common among documents with expenses.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["documents_with_expenses"]}}
{"sample_id": 6450, "db_id": "cre_Docs_and_Epenses", "final": {"question": "What are the ids of documents which don't have expense budgets?", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6451, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Return the ids of documents that do not have expenses.", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6452, "db_id": "cre_Docs_and_Epenses", "final": {"question": "Show ids for all documents in type CV without expense budgets.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  'CV' EXCEPT SELECT document_id FROM Documents_with_expenses", "source_tables": ["documents_with_expenses", "documents"]}}
{"sample_id": 6500, "db_id": "scientist_1", "final": {"question": "Find the name of scientists who are not assigned to any project.", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6501, "db_id": "scientist_1", "final": {"question": "What are the names of scientists who have not been assigned a project?", "sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6502, "db_id": "scientist_1", "final": {"question": "Find the number of scientists who are not assigned to any project.", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6503, "db_id": "scientist_1", "final": {"question": "How many scientists do not have any projects assigned to them?", "sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}}
{"sample_id": 6575, "db_id": "wine_1", "final": {"question": "What are the countries for appelations with at most 3 wines?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "source_tables": ["appellations", "wine"]}}
{"sample_id": 6576, "db_id": "wine_1", "final": {"question": "What are the names of wines whose production year are before the year of all wines by Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  'Brander')", "source_tables": ["wine"]}}
{"sample_id": 6577, "db_id": "wine_1", "final": {"question": "What are the names of wines produced before any wine from the Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  'Brander')", "source_tables": ["wine"]}}
{"sample_id": 6578, "db_id": "wine_1", "final": {"question": "What are the names of wines that are more expensive then all wines made in the year 2006?", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "source_tables": ["wine"]}}
{"sample_id": 6579, "db_id": "wine_1", "final": {"question": "Give the names of wines with prices above any wine produced in 2006.", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "source_tables": ["wine"]}}
{"sample_id": 6580, "db_id": "wine_1", "final": {"question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "source_tables": ["wine", "grapes"]}}
{"sample_id": 6581, "db_id": "wine_1", "final": {"question": "Which 3 wineries produce the most wines made from white grapes?", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "source_tables": ["wine", "grapes"]}}
{"sample_id": 6582, "db_id": "wine_1", "final": {"question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "source_tables": ["wine"]}}
{"sample_id": 6610, "db_id": "train_station", "final": {"question": "Show all locations with only 1 station.", "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1", "source_tables": ["station"]}}
{"sample_id": 6611, "db_id": "train_station", "final": {"question": "Show station names without any trains.", "sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)", "source_tables": ["station", "train_station"]}}
{"sample_id": 6689, "db_id": "driving_school", "final": {"question": "List all payment methods and number of payments using each payment methods.", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "source_tables": ["customer_payments"]}}
{"sample_id": 6690, "db_id": "driving_school", "final": {"question": "For each payment method, how many payments were made?", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "source_tables": ["customer_payments"]}}
{"sample_id": 6691, "db_id": "driving_school", "final": {"question": "How many lessons were in cancelled state?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = 'Cancelled';", "source_tables": ["lessons"]}}
{"sample_id": 6692, "db_id": "driving_school", "final": {"question": "How many lessons have been cancelled?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = 'Cancelled';", "source_tables": ["lessons"]}}
{"sample_id": 6693, "db_id": "driving_school", "final": {"question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%';", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6694, "db_id": "driving_school", "final": {"question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%';", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6695, "db_id": "driving_school", "final": {"question": "How many lessons taught by staff whose first name has letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6696, "db_id": "driving_school", "final": {"question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6697, "db_id": "driving_school", "final": {"question": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["staff", "lessons"]}}
{"sample_id": 6778, "db_id": "activity_1", "final": {"question": "What is the name of the activity that has the most faculty members involved in?", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty_participates_in", "activity"]}}
{"sample_id": 6779, "db_id": "activity_1", "final": {"question": "Which activity has the most faculty members participating in? Find the activity name.", "sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty_participates_in", "activity"]}}
{"sample_id": 6780, "db_id": "activity_1", "final": {"question": "Show the ids of the students who don't participate in any activity.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6781, "db_id": "activity_1", "final": {"question": "What are the ids of the students who are not involved in any activity", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6782, "db_id": "activity_1", "final": {"question": "Show the ids for all the students who participate in an activity and are under 20.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6783, "db_id": "activity_1", "final": {"question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.", "sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6784, "db_id": "activity_1", "final": {"question": "What is the first and last name of the student participating in the most activities?", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6785, "db_id": "activity_1", "final": {"question": "Tell me the first and last name of the student who has the most activities.", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "participates_in"]}}
{"sample_id": 6861, "db_id": "flight_4", "final": {"question": "What is the total number of routes for each country and airline in that country?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "source_tables": ["airlines", "routes"]}}
{"sample_id": 6862, "db_id": "flight_4", "final": {"question": "Find the number of routes with destination airports in Italy.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "source_tables": ["airports", "routes"]}}
{"sample_id": 6863, "db_id": "flight_4", "final": {"question": "What is the number of routes whose destinations are Italian airports?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "source_tables": ["airports", "routes"]}}
{"sample_id": 6864, "db_id": "flight_4", "final": {"question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "source_tables": ["airlines", "airports", "routes"]}}
{"sample_id": 6865, "db_id": "flight_4", "final": {"question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "source_tables": ["airlines", "airports", "routes"]}}
{"sample_id": 6866, "db_id": "flight_4", "final": {"question": "Find the number of routes that have destination John F Kennedy International Airport.", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "source_tables": ["airports", "routes"]}}
{"sample_id": 6867, "db_id": "flight_4", "final": {"question": "What is the number of routes that end at John F Kennedy International Airport?", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "source_tables": ["airports", "routes"]}}
{"sample_id": 6868, "db_id": "flight_4", "final": {"question": "Find the number of routes from the United States to Canada.", "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["airports", "routes"]}}
{"sample_id": 6926, "db_id": "tracking_orders", "final": {"question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}}
{"sample_id": 6927, "db_id": "tracking_orders", "final": {"question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}}
{"sample_id": 6928, "db_id": "tracking_orders", "final": {"question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}}
{"sample_id": 6929, "db_id": "tracking_orders", "final": {"question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}}
{"sample_id": 6930, "db_id": "tracking_orders", "final": {"question": "For each customer who has at least two orders, find the customer name and number of orders made.", "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "source_tables": ["customers", "orders"]}}
{"sample_id": 6931, "db_id": "tracking_orders", "final": {"question": "Which customers have made at least two orders? Give me each customer name and number of orders made.", "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "source_tables": ["customers", "orders"]}}
{"sample_id": 6951, "db_id": "architecture", "final": {"question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80", "source_tables": ["architect", "mill", "bridge"]}}
{"sample_id": 6985, "db_id": "culture_company", "final": {"question": "What is the average, maximum, and minimum budget for all movies before 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "source_tables": ["movie"]}}
{"sample_id": 6986, "db_id": "culture_company", "final": {"question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.", "sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "source_tables": ["movie"]}}
{"sample_id": 6987, "db_id": "culture_company", "final": {"question": "List all company names with a book published by Alyson.", "sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "source_tables": ["culture_company", "book_club"]}}
{"sample_id": 7029, "db_id": "concert_singer", "final": {"question": "What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "source_tables": ["singer", "singer_in_concert"]}}
{"sample_id": 7030, "db_id": "concert_singer", "final": {"question": "List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["singer", "singer_in_concert", "concert"]}}
{"sample_id": 7031, "db_id": "concert_singer", "final": {"question": "What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["singer", "singer_in_concert", "concert"]}}
{"sample_id": 7032, "db_id": "concert_singer", "final": {"question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "source_tables": ["singer"]}}
{"sample_id": 7071, "db_id": "pets_1", "final": {"question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7072, "db_id": "pets_1", "final": {"question": "Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7073, "db_id": "pets_1", "final": {"question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7074, "db_id": "pets_1", "final": {"question": "Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "source_tables": ["has_pet", "student"]}}
{"sample_id": 7153, "db_id": "car_1", "final": {"question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "source_tables": ["cars_data"]}}
{"sample_id": 7154, "db_id": "car_1", "final": {"question": "How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 7155, "db_id": "car_1", "final": {"question": "What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 7156, "db_id": "car_1", "final": {"question": "How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}}
{"sample_id": 7157, "db_id": "car_1", "final": {"question": "What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}}
{"sample_id": 7158, "db_id": "car_1", "final": {"question": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7159, "db_id": "car_1", "final": {"question": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7160, "db_id": "car_1", "final": {"question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7161, "db_id": "car_1", "final": {"question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 7236, "db_id": "flight_2", "final": {"question": "Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7237, "db_id": "flight_2", "final": {"question": "Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7238, "db_id": "flight_2", "final": {"question": "What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7239, "db_id": "flight_2", "final": {"question": "Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "source_tables": ["airlines", "flights"]}}
{"sample_id": 7240, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 7241, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 7242, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 7243, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 7282, "db_id": "employee_hire_evaluation", "final": {"question": "What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}}
{"sample_id": 7283, "db_id": "employee_hire_evaluation", "final": {"question": "Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}}
{"sample_id": 7284, "db_id": "employee_hire_evaluation", "final": {"question": "Give me all the information about hiring.", "sql": "SELECT * FROM hiring", "source_tables": ["hiring"]}}
{"sample_id": 7357, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7358, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7359, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7360, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}}
{"sample_id": 7361, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}}
{"sample_id": 7362, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7363, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 7364, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "source_tables": ["paragraphs"]}}
{"sample_id": 7398, "db_id": "course_teach", "final": {"question": "Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7399, "db_id": "course_teach", "final": {"question": "What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7400, "db_id": "course_teach", "final": {"question": "Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["teacher", "course_arrange"]}}
{"sample_id": 7418, "db_id": "museum_visit", "final": {"question": "What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "source_tables": ["visitor", "visit"]}}
{"sample_id": 7471, "db_id": "wta_1", "final": {"question": "What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "source_tables": ["players"]}}
{"sample_id": 7472, "db_id": "wta_1", "final": {"question": "Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}}
{"sample_id": 7473, "db_id": "wta_1", "final": {"question": "How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}}
{"sample_id": 7474, "db_id": "wta_1", "final": {"question": "Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}}
{"sample_id": 7475, "db_id": "wta_1", "final": {"question": "How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}}
{"sample_id": 7476, "db_id": "wta_1", "final": {"question": "Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "source_tables": ["matches"]}}
{"sample_id": 7496, "db_id": "battle_death", "final": {"question": "How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "source_tables": ["battle", "ship"]}}
{"sample_id": 7562, "db_id": "student_transcripts_tracking", "final": {"question": "What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 7563, "db_id": "student_transcripts_tracking", "final": {"question": "When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 7564, "db_id": "student_transcripts_tracking", "final": {"question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}}
{"sample_id": 7565, "db_id": "student_transcripts_tracking", "final": {"question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}}
{"sample_id": 7566, "db_id": "student_transcripts_tracking", "final": {"question": "Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcript_contents", "transcripts"]}}
{"sample_id": 7567, "db_id": "student_transcripts_tracking", "final": {"question": "What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcript_contents", "transcripts"]}}
{"sample_id": 7568, "db_id": "student_transcripts_tracking", "final": {"question": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 7627, "db_id": "tvshow", "final": {"question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7628, "db_id": "tvshow", "final": {"question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7629, "db_id": "tvshow", "final": {"question": "What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7630, "db_id": "tvshow", "final": {"question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7631, "db_id": "tvshow", "final": {"question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 7632, "db_id": "tvshow", "final": {"question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "source_tables": ["tv_channel"]}}
{"sample_id": 7672, "db_id": "poker_player", "final": {"question": "List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 7673, "db_id": "poker_player", "final": {"question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 7674, "db_id": "poker_player", "final": {"question": "Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "source_tables": ["people"]}}
{"sample_id": 7675, "db_id": "poker_player", "final": {"question": "What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "source_tables": ["people"]}}
{"sample_id": 7692, "db_id": "voter_1", "final": {"question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "source_tables": ["contestants", "votes"]}}
{"sample_id": 7791, "db_id": "world_1", "final": {"question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}}
{"sample_id": 7792, "db_id": "world_1", "final": {"question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}}
{"sample_id": 7793, "db_id": "world_1", "final": {"question": "What are the names and areas of countries with the top 5 largest area?", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}}
{"sample_id": 7794, "db_id": "world_1", "final": {"question": "Return the names and surface areas of the 5 largest countries.", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}}
{"sample_id": 7795, "db_id": "world_1", "final": {"question": "What are names of countries with the top 3 largest population?", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7796, "db_id": "world_1", "final": {"question": "Return the names of the 3 most populated countries.", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7797, "db_id": "world_1", "final": {"question": "What are the names of the nations with the 3 lowest populations?", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7798, "db_id": "world_1", "final": {"question": "Return the names of the 3 countries with the fewest people.", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 7799, "db_id": "world_1", "final": {"question": "how many countries are in Asia?", "sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "source_tables": ["country"]}}
{"sample_id": 7800, "db_id": "world_1", "final": {"question": "Count the number of countries in Asia.", "sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "source_tables": ["country"]}}
{"sample_id": 7801, "db_id": "world_1", "final": {"question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "source_tables": ["country"]}}
{"sample_id": 7802, "db_id": "world_1", "final": {"question": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "source_tables": ["country"]}}
{"sample_id": 7847, "db_id": "orchestra", "final": {"question": "List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["orchestra", "performance"]}}
{"sample_id": 7848, "db_id": "orchestra", "final": {"question": "What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["orchestra", "performance"]}}
{"sample_id": 7849, "db_id": "orchestra", "final": {"question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}}
{"sample_id": 7850, "db_id": "orchestra", "final": {"question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}}
{"sample_id": 7899, "db_id": "network_1", "final": {"question": "What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7900, "db_id": "network_1", "final": {"question": "Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7901, "db_id": "network_1", "final": {"question": "Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7902, "db_id": "network_1", "final": {"question": "What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 7903, "db_id": "network_1", "final": {"question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "friend"]}}
{"sample_id": 7976, "db_id": "dog_kennels", "final": {"question": "Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "source_tables": ["treatments", "professionals"]}}
{"sample_id": 7977, "db_id": "dog_kennels", "final": {"question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}}
{"sample_id": 7978, "db_id": "dog_kennels", "final": {"question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}}
{"sample_id": 7979, "db_id": "dog_kennels", "final": {"question": "What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7980, "db_id": "dog_kennels", "final": {"question": "Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7981, "db_id": "dog_kennels", "final": {"question": "What is the age of the oldest dog?", "sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7982, "db_id": "dog_kennels", "final": {"question": "Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 7983, "db_id": "dog_kennels", "final": {"question": "How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 8017, "db_id": "singer", "final": {"question": "Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["singer", "song"]}}
{"sample_id": 8018, "db_id": "singer", "final": {"question": "For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["singer", "song"]}}
{"sample_id": 8019, "db_id": "singer", "final": {"question": "List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "source_tables": ["singer", "song"]}}
