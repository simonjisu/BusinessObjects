{"sample_id": 0, "db_id": "concert_singer", "final": {"question": "How many singers do we have?", "sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}}
{"sample_id": 1, "db_id": "concert_singer", "final": {"question": "What is the total number of singers?", "sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}}
{"sample_id": 2, "db_id": "concert_singer", "final": {"question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "source_tables": ["singer"]}}
{"sample_id": 3, "db_id": "concert_singer", "final": {"question": "What are the names, countries, and ages for every singer in descending order of age?", "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "source_tables": ["singer"]}}
{"sample_id": 4, "db_id": "concert_singer", "final": {"question": "What is the average, minimum, and maximum age of all singers from France?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "source_tables": ["singer"]}}
{"sample_id": 5, "db_id": "concert_singer", "final": {"question": "What is the average, minimum, and maximum age for all French singers?", "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "source_tables": ["singer"]}}
{"sample_id": 6, "db_id": "concert_singer", "final": {"question": "Show the name and the release year of the song by the youngest singer.", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 7, "db_id": "concert_singer", "final": {"question": "What are the names and release years for all the songs of the youngest singer?", "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 8, "db_id": "concert_singer", "final": {"question": "What are all distinct countries where singers above age 20 are from?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "source_tables": ["singer"]}}
{"sample_id": 9, "db_id": "concert_singer", "final": {"question": "What are  the different countries with singers above age 20?", "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "source_tables": ["singer"]}}
{"sample_id": 10, "db_id": "concert_singer", "final": {"question": "Show all countries and the number of singers in each country.", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "source_tables": ["singer"]}}
{"sample_id": 11, "db_id": "concert_singer", "final": {"question": "How many singers are from each country?", "sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "source_tables": ["singer"]}}
{"sample_id": 12, "db_id": "concert_singer", "final": {"question": "List all song names by singers above the average age.", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "source_tables": ["singer"]}}
{"sample_id": 13, "db_id": "concert_singer", "final": {"question": "What are all the song names by singers who are older than average?", "sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "source_tables": ["singer"]}}
{"sample_id": 14, "db_id": "concert_singer", "final": {"question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "source_tables": ["stadium"]}}
{"sample_id": 15, "db_id": "concert_singer", "final": {"question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "source_tables": ["stadium"]}}
{"sample_id": 16, "db_id": "concert_singer", "final": {"question": "What is the maximum capacity and the average of all stadiums ?", "sql": "select max(capacity), average from stadium", "source_tables": ["stadium"]}}
{"sample_id": 17, "db_id": "concert_singer", "final": {"question": "What is the average and maximum capacities for all stadiums ?", "sql": "select avg(capacity) ,  max(capacity) from stadium", "source_tables": ["stadium"]}}
{"sample_id": 18, "db_id": "concert_singer", "final": {"question": "What is the name and capacity for the stadium with highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "source_tables": ["stadium"]}}
{"sample_id": 19, "db_id": "concert_singer", "final": {"question": "What is the name and capacity for the stadium with the highest average attendance?", "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "source_tables": ["stadium"]}}
{"sample_id": 20, "db_id": "concert_singer", "final": {"question": "How many concerts are there in year 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "source_tables": ["concert"]}}
{"sample_id": 21, "db_id": "concert_singer", "final": {"question": "How many concerts occurred in 2014 or 2015?", "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "source_tables": ["concert"]}}
{"sample_id": 22, "db_id": "concert_singer", "final": {"question": "Show the stadium name and the number of concerts in each stadium.", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "source_tables": ["concert", "stadium"]}}
{"sample_id": 23, "db_id": "concert_singer", "final": {"question": "For each stadium, how many concerts play there?", "sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "source_tables": ["concert", "stadium"]}}
{"sample_id": 24, "db_id": "concert_singer", "final": {"question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["concert", "stadium"]}}
{"sample_id": 25, "db_id": "concert_singer", "final": {"question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "source_tables": ["concert", "stadium"]}}
{"sample_id": 26, "db_id": "concert_singer", "final": {"question": "Which year has most number of concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["concert"]}}
{"sample_id": 27, "db_id": "concert_singer", "final": {"question": "What is the year that had the most concerts?", "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["concert"]}}
{"sample_id": 28, "db_id": "concert_singer", "final": {"question": "Show the stadium names without any concert.", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "source_tables": ["concert", "stadium"]}}
{"sample_id": 29, "db_id": "concert_singer", "final": {"question": "What are the names of the stadiums without any concerts?", "sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "source_tables": ["concert", "stadium"]}}
{"sample_id": 30, "db_id": "concert_singer", "final": {"question": "Show countries where a singer above age 40 and a singer below 30 are from.", "sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "source_tables": ["singer"]}}
{"sample_id": 31, "db_id": "concert_singer", "final": {"question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "source_tables": ["concert", "stadium"]}}
{"sample_id": 32, "db_id": "concert_singer", "final": {"question": "What are the names of all stadiums that did not have a concert in 2014?", "sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "source_tables": ["concert", "stadium"]}}
{"sample_id": 33, "db_id": "concert_singer", "final": {"question": "Show the name and theme for all concerts and the number of singers in each concert.", "sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "source_tables": ["singer_in_concert", "concert"]}}
{"sample_id": 34, "db_id": "concert_singer", "final": {"question": "What are the names , themes , and number of singers for every concert ?", "sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "source_tables": ["singer_in_concert", "concert"]}}
{"sample_id": 35, "db_id": "concert_singer", "final": {"question": "List singer names and number of concerts for each singer.", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "source_tables": ["singer_in_concert", "singer"]}}
{"sample_id": 36, "db_id": "concert_singer", "final": {"question": "What are the names of the singers and number of concerts for each person?", "sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "source_tables": ["singer_in_concert", "singer"]}}
{"sample_id": 37, "db_id": "concert_singer", "final": {"question": "List all singer names in concerts in year 2014.", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["singer_in_concert", "singer", "concert"]}}
{"sample_id": 38, "db_id": "concert_singer", "final": {"question": "What are the names of the singers who performed in a concert in 2014?", "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "source_tables": ["singer_in_concert", "singer", "concert"]}}
{"sample_id": 39, "db_id": "concert_singer", "final": {"question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "source_tables": ["singer"]}}
{"sample_id": 40, "db_id": "concert_singer", "final": {"question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "source_tables": ["singer"]}}
{"sample_id": 41, "db_id": "concert_singer", "final": {"question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "source_tables": ["concert", "stadium"]}}
{"sample_id": 42, "db_id": "concert_singer", "final": {"question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "source_tables": ["concert", "stadium"]}}
{"sample_id": 43, "db_id": "concert_singer", "final": {"question": "Find the number of concerts happened in the stadium with the highest capacity .", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "source_tables": ["concert", "stadium"]}}
{"sample_id": 44, "db_id": "concert_singer", "final": {"question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "source_tables": ["concert", "stadium"]}}
{"sample_id": 45, "db_id": "pets_1", "final": {"question": "Find the number of pets whose weight is heavier than 10.", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "source_tables": ["pets"]}}
{"sample_id": 46, "db_id": "pets_1", "final": {"question": "How many pets have a greater weight than 10?", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "source_tables": ["pets"]}}
{"sample_id": 47, "db_id": "pets_1", "final": {"question": "Find the weight of the youngest dog.", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}}
{"sample_id": 48, "db_id": "pets_1", "final": {"question": "How much does the youngest dog weigh?", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}}
{"sample_id": 49, "db_id": "pets_1", "final": {"question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "source_tables": ["pets"]}}
{"sample_id": 50, "db_id": "pets_1", "final": {"question": "List the maximum weight and type for each type of pet.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "source_tables": ["pets"]}}
{"sample_id": 51, "db_id": "pets_1", "final": {"question": "Find number of pets owned by students who are older than 20.", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "source_tables": ["student", "has_pet"]}}
{"sample_id": 52, "db_id": "pets_1", "final": {"question": "How many pets are owned by students that have an age greater than 20?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "source_tables": ["student", "has_pet"]}}
{"sample_id": 53, "db_id": "pets_1", "final": {"question": "Find the number of dog pets that are raised by female students (with sex F).", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 54, "db_id": "pets_1", "final": {"question": "How many dog pets are raised by female students?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 55, "db_id": "pets_1", "final": {"question": "Find the number of distinct type of pets.", "sql": "SELECT count(DISTINCT pettype) FROM pets", "source_tables": ["pets"]}}
{"sample_id": 56, "db_id": "pets_1", "final": {"question": "How many different types of pet are there?", "sql": "SELECT count(DISTINCT pettype) FROM pets", "source_tables": ["pets"]}}
{"sample_id": 57, "db_id": "pets_1", "final": {"question": "Find the first name of students who have cat or dog pet.", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 58, "db_id": "pets_1", "final": {"question": "What are the first names of every student who has a cat or dog as a pet?", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 59, "db_id": "pets_1", "final": {"question": "Find the first name of students who have both cat and dog pets .", "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 60, "db_id": "pets_1", "final": {"question": "What are the students' first names who have both cats and dogs as pets?", "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 61, "db_id": "pets_1", "final": {"question": "Find the major and age of students who do not have a cat pet.", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 62, "db_id": "pets_1", "final": {"question": "What major is every student who does not own a cat as a pet, and also how old are they?", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 63, "db_id": "pets_1", "final": {"question": "Find the id of students who do not have a cat pet.", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 64, "db_id": "pets_1", "final": {"question": "What are the ids of the students who do not own cats as pets?", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 65, "db_id": "pets_1", "final": {"question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 66, "db_id": "pets_1", "final": {"question": "What is the first name of every student who has a dog but does not have a cat?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 67, "db_id": "pets_1", "final": {"question": "Find the type and weight of the youngest pet.", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}}
{"sample_id": 68, "db_id": "pets_1", "final": {"question": "What type of pet is the youngest animal, and how much does it weigh?", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "source_tables": ["pets"]}}
{"sample_id": 69, "db_id": "pets_1", "final": {"question": "Find the id and weight of all pets whose age is older than 1.", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "source_tables": ["pets"]}}
{"sample_id": 70, "db_id": "pets_1", "final": {"question": "What is the id and weight of every pet who is older than 1?", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "source_tables": ["pets"]}}
{"sample_id": 71, "db_id": "pets_1", "final": {"question": "Find the average and maximum age for each type of pet.", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}}
{"sample_id": 72, "db_id": "pets_1", "final": {"question": "What is the average and maximum age for each pet type?", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}}
{"sample_id": 73, "db_id": "pets_1", "final": {"question": "Find the average weight for each pet type.", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}}
{"sample_id": 74, "db_id": "pets_1", "final": {"question": "What is the average weight for each type of pet?", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "source_tables": ["pets"]}}
{"sample_id": 75, "db_id": "pets_1", "final": {"question": "Find the first name and age of students who have a pet.", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "source_tables": ["student", "has_pet"]}}
{"sample_id": 76, "db_id": "pets_1", "final": {"question": "What are the different first names and ages of the students who do have pets?", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "source_tables": ["student", "has_pet"]}}
{"sample_id": 77, "db_id": "pets_1", "final": {"question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "source_tables": ["student", "has_pet"]}}
{"sample_id": 78, "db_id": "pets_1", "final": {"question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "source_tables": ["student", "has_pet"]}}
{"sample_id": 79, "db_id": "pets_1", "final": {"question": "Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "source_tables": ["student", "has_pet"]}}
{"sample_id": 80, "db_id": "pets_1", "final": {"question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "source_tables": ["student", "has_pet"]}}
{"sample_id": 81, "db_id": "pets_1", "final": {"question": "Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "source_tables": ["student", "has_pet"]}}
{"sample_id": 82, "db_id": "pets_1", "final": {"question": "What is the first name and gender of the all the students who have more than one pet?", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "source_tables": ["student", "has_pet"]}}
{"sample_id": 83, "db_id": "pets_1", "final": {"question": "Find the last name of the student who has a cat that is age 3.", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 84, "db_id": "pets_1", "final": {"question": "What is the last name of the student who has a cat that is 3 years old?", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "source_tables": ["pets", "student", "has_pet"]}}
{"sample_id": 85, "db_id": "pets_1", "final": {"question": "Find the average age of students who do not have any pet .", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "source_tables": ["student", "has_pet"]}}
{"sample_id": 86, "db_id": "pets_1", "final": {"question": "What is the average age for all students who do not own any pets ?", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "source_tables": ["student", "has_pet"]}}
{"sample_id": 87, "db_id": "car_1", "final": {"question": "How many continents are there?", "sql": "SELECT count(*) FROM CONTINENTS;", "source_tables": ["continents"]}}
{"sample_id": 88, "db_id": "car_1", "final": {"question": "What is the number of continents?", "sql": "SELECT count(*) FROM CONTINENTS;", "source_tables": ["continents"]}}
{"sample_id": 89, "db_id": "car_1", "final": {"question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "source_tables": ["countries", "continents"]}}
{"sample_id": 90, "db_id": "car_1", "final": {"question": "For each continent, list its id, name, and how many countries it has?", "sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "source_tables": ["countries", "continents"]}}
{"sample_id": 91, "db_id": "car_1", "final": {"question": "How many countries are listed?", "sql": "SELECT count(*) FROM COUNTRIES;", "source_tables": ["countries"]}}
{"sample_id": 92, "db_id": "car_1", "final": {"question": "How many countries exist?", "sql": "SELECT count(*) FROM COUNTRIES;", "source_tables": ["countries"]}}
{"sample_id": 93, "db_id": "car_1", "final": {"question": "How many models does each car maker produce? List maker full name, id and the number.", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "source_tables": ["car_makers", "model_list"]}}
{"sample_id": 94, "db_id": "car_1", "final": {"question": "What is the full name of each car maker, along with its id and how many models it produces?", "sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "source_tables": ["car_makers", "model_list"]}}
{"sample_id": 95, "db_id": "car_1", "final": {"question": "Which model of the car has the minimum horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 96, "db_id": "car_1", "final": {"question": "What is the model of the car with the smallest amount of horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 97, "db_id": "car_1", "final": {"question": "Find the model of the car whose weight is below the average weight.", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 98, "db_id": "car_1", "final": {"question": "What is the model for the car with a weight smaller than the average?", "sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 99, "db_id": "car_1", "final": {"question": "Find the name of the makers that produced some cars in the year of 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "source_tables": ["car_makers", "car_names", "cars_data", "model_list"]}}
{"sample_id": 100, "db_id": "car_1", "final": {"question": "What is the name of the different car makers who produced a car in 1970?", "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "source_tables": ["car_makers", "car_names", "cars_data", "model_list"]}}
{"sample_id": 101, "db_id": "car_1", "final": {"question": "Find the make and production time of the cars that were produced in the earliest year?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 102, "db_id": "car_1", "final": {"question": "What is the maker of the carr produced in the earliest year and what year was it?", "sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 103, "db_id": "car_1", "final": {"question": "Which distinct car models are the produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "source_tables": ["model_list", "car_names", "cars_data"]}}
{"sample_id": 104, "db_id": "car_1", "final": {"question": "What are the different models for the cards produced after 1980?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "source_tables": ["model_list", "car_names", "cars_data"]}}
{"sample_id": 105, "db_id": "car_1", "final": {"question": "How many car makers are there in each continents? List the continent name and the count.", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "source_tables": ["countries", "car_makers", "continents"]}}
{"sample_id": 106, "db_id": "car_1", "final": {"question": "What is the name of each continent and how many car makers are there in each one?", "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "source_tables": ["countries", "car_makers", "continents"]}}
{"sample_id": 107, "db_id": "car_1", "final": {"question": "Which of the countries has the most car makers? List the country name.", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 108, "db_id": "car_1", "final": {"question": "What is the name of the country with the most car makers?", "sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 109, "db_id": "car_1", "final": {"question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "source_tables": ["car_makers", "model_list"]}}
{"sample_id": 110, "db_id": "car_1", "final": {"question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "source_tables": ["car_makers", "model_list"]}}
{"sample_id": 111, "db_id": "car_1", "final": {"question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 112, "db_id": "car_1", "final": {"question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 113, "db_id": "car_1", "final": {"question": "How many car makers are there in france?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 114, "db_id": "car_1", "final": {"question": "What is the number of makers of care in France?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 115, "db_id": "car_1", "final": {"question": "How many car models are produced in the usa?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "source_tables": ["car_makers", "model_list", "countries"]}}
{"sample_id": 116, "db_id": "car_1", "final": {"question": "What is the count of the car models produced in the United States?", "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "source_tables": ["car_makers", "model_list", "countries"]}}
{"sample_id": 117, "db_id": "car_1", "final": {"question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "source_tables": ["cars_data"]}}
{"sample_id": 118, "db_id": "car_1", "final": {"question": "What is the average miles per gallon of all the cards with 4 cylinders?", "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "source_tables": ["cars_data"]}}
{"sample_id": 119, "db_id": "car_1", "final": {"question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "source_tables": ["cars_data"]}}
{"sample_id": 120, "db_id": "car_1", "final": {"question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "source_tables": ["cars_data"]}}
{"sample_id": 121, "db_id": "car_1", "final": {"question": "What are all the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "source_tables": ["model_list"]}}
{"sample_id": 122, "db_id": "car_1", "final": {"question": "What are the makers and models?", "sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "source_tables": ["model_list"]}}
{"sample_id": 123, "db_id": "car_1", "final": {"question": "What are the countries having at least one car maker? List name and id.", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 124, "db_id": "car_1", "final": {"question": "What are the names and ids of all countries with at least one car maker?", "sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 125, "db_id": "car_1", "final": {"question": "What is the number of the cars with horsepower more than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "source_tables": ["cars_data"]}}
{"sample_id": 126, "db_id": "car_1", "final": {"question": "What is the number of cars with a horsepower greater than 150?", "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "source_tables": ["cars_data"]}}
{"sample_id": 127, "db_id": "car_1", "final": {"question": "What is the average weight of cars each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "source_tables": ["cars_data"]}}
{"sample_id": 128, "db_id": "car_1", "final": {"question": "What is the average weight and year for each year?", "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "source_tables": ["cars_data"]}}
{"sample_id": 129, "db_id": "car_1", "final": {"question": "Which countries in europe have at least 3 car manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "source_tables": ["continents", "car_makers", "countries"]}}
{"sample_id": 130, "db_id": "car_1", "final": {"question": "What are the names of all European countries with at least 3 manufacturers?", "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "source_tables": ["continents", "car_makers", "countries"]}}
{"sample_id": 131, "db_id": "car_1", "final": {"question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 132, "db_id": "car_1", "final": {"question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 133, "db_id": "car_1", "final": {"question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 134, "db_id": "car_1", "final": {"question": "What is the car model with the highest mpg ?", "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 135, "db_id": "car_1", "final": {"question": "What is the average horsepower of the cars before 1980?", "sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "source_tables": ["cars_data"]}}
{"sample_id": 136, "db_id": "car_1", "final": {"question": "What is the average horsepower for all cars produced before 1980 ?", "sql": "select avg(horsepower) from cars_data where year  <  1980;", "source_tables": ["cars_data"]}}
{"sample_id": 137, "db_id": "car_1", "final": {"question": "What is the average edispl of the cars of model volvo?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 138, "db_id": "car_1", "final": {"question": "What is the average edispl for all volvos?", "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 139, "db_id": "car_1", "final": {"question": "What is the maximum accelerate for different number of cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "source_tables": ["cars_data"]}}
{"sample_id": 140, "db_id": "car_1", "final": {"question": "What is the maximum accelerate for all the different cylinders?", "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "source_tables": ["cars_data"]}}
{"sample_id": 141, "db_id": "car_1", "final": {"question": "Which model has the most version(make) of cars?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["car_names"]}}
{"sample_id": 142, "db_id": "car_1", "final": {"question": "What model has the most different versions?", "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["car_names"]}}
{"sample_id": 143, "db_id": "car_1", "final": {"question": "How many cars have more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "source_tables": ["cars_data"]}}
{"sample_id": 144, "db_id": "car_1", "final": {"question": "What is the number of cars with more than 4 cylinders?", "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "source_tables": ["cars_data"]}}
{"sample_id": 145, "db_id": "car_1", "final": {"question": "how many cars were produced in 1980?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "source_tables": ["cars_data"]}}
{"sample_id": 146, "db_id": "car_1", "final": {"question": "In 1980, how many cars were made?", "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "source_tables": ["cars_data"]}}
{"sample_id": 147, "db_id": "car_1", "final": {"question": "How many car models were produced by the maker with full name American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "source_tables": ["car_makers", "model_list"]}}
{"sample_id": 148, "db_id": "car_1", "final": {"question": "What is the number of car models created by the car maker American Motor Company?", "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "source_tables": ["car_makers", "model_list"]}}
{"sample_id": 149, "db_id": "car_1", "final": {"question": "Which makers designed more than 3 car models? List full name and the id.", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["car_makers", "model_list"]}}
{"sample_id": 150, "db_id": "car_1", "final": {"question": "What are the names and ids of all makers with more than 3 models?", "sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["car_makers", "model_list"]}}
{"sample_id": 151, "db_id": "car_1", "final": {"question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"]}}
{"sample_id": 152, "db_id": "car_1", "final": {"question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"]}}
{"sample_id": 153, "db_id": "car_1", "final": {"question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "source_tables": ["cars_data"]}}
{"sample_id": 154, "db_id": "car_1", "final": {"question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "sql": "select distinct year from cars_data where weight between 3000 and 4000;", "source_tables": ["cars_data"]}}
{"sample_id": 155, "db_id": "car_1", "final": {"question": "What is the horsepower of the car with the largest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "source_tables": ["cars_data"]}}
{"sample_id": 156, "db_id": "car_1", "final": {"question": "What is the horsepower of the car with the greatest accelerate?", "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "source_tables": ["cars_data"]}}
{"sample_id": 157, "db_id": "car_1", "final": {"question": "For model volvo, how many cylinders does the car with the least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 158, "db_id": "car_1", "final": {"question": "For a volvo model, how many cylinders does the version with least accelerate have?", "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 159, "db_id": "car_1", "final": {"question": "How many cars have a larger accelerate than the car with the largest horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "source_tables": ["cars_data"]}}
{"sample_id": 160, "db_id": "car_1", "final": {"question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "source_tables": ["cars_data"]}}
{"sample_id": 161, "db_id": "car_1", "final": {"question": "How many countries has more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 162, "db_id": "car_1", "final": {"question": "What is the number of countries with more than 2 car makers ?", "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 163, "db_id": "car_1", "final": {"question": "How many cars has over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}}
{"sample_id": 164, "db_id": "car_1", "final": {"question": "What is the number of carsw ith over 6 cylinders?", "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "source_tables": ["cars_data"]}}
{"sample_id": 165, "db_id": "car_1", "final": {"question": "For the cars with 4 cylinders, which model has the largest horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 166, "db_id": "car_1", "final": {"question": "For all of the 4 cylinder cars, which model has the most horsepower?", "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"]}}
{"sample_id": 167, "db_id": "car_1", "final": {"question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 168, "db_id": "car_1", "final": {"question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "source_tables": ["cars_data", "car_names"]}}
{"sample_id": 169, "db_id": "car_1", "final": {"question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "source_tables": ["cars_data"]}}
{"sample_id": 170, "db_id": "car_1", "final": {"question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "source_tables": ["cars_data"]}}
{"sample_id": 171, "db_id": "car_1", "final": {"question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"]}}
{"sample_id": 172, "db_id": "car_1", "final": {"question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"]}}
{"sample_id": 173, "db_id": "car_1", "final": {"question": "What are the name of the countries where there is not a single car maker?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 174, "db_id": "car_1", "final": {"question": "What are the names of the countries with no car makers?", "sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "source_tables": ["car_makers", "countries"]}}
{"sample_id": 175, "db_id": "car_1", "final": {"question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "source_tables": ["car_makers", "car_names", "model_list"]}}
{"sample_id": 176, "db_id": "car_1", "final": {"question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "source_tables": ["car_makers", "car_names", "model_list"]}}
{"sample_id": 177, "db_id": "car_1", "final": {"question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "source_tables": ["car_makers", "countries", "model_list"]}}
{"sample_id": 178, "db_id": "car_1", "final": {"question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "source_tables": ["car_makers", "countries", "model_list"]}}
{"sample_id": 179, "db_id": "flight_2", "final": {"question": "Which country does Airline \"JetBlue Airways\" belong to?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "source_tables": ["airlines"]}}
{"sample_id": 180, "db_id": "flight_2", "final": {"question": "What country is Jetblue Airways affiliated with?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "source_tables": ["airlines"]}}
{"sample_id": 181, "db_id": "flight_2", "final": {"question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "source_tables": ["airlines"]}}
{"sample_id": 182, "db_id": "flight_2", "final": {"question": "Which abbreviation corresponds to Jetblue Airways?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "source_tables": ["airlines"]}}
{"sample_id": 183, "db_id": "flight_2", "final": {"question": "List all airline names and their abbreviations in \"USA\".", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'USA'", "source_tables": ["airlines"]}}
{"sample_id": 184, "db_id": "flight_2", "final": {"question": "What are the airline names and abbreviations for airlines in the USA?", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'USA'", "source_tables": ["airlines"]}}
{"sample_id": 185, "db_id": "flight_2", "final": {"question": "List the airport code and name in the city of Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  'Anthony'", "source_tables": ["airports"]}}
{"sample_id": 186, "db_id": "flight_2", "final": {"question": "Give the airport code and airport name corresonding to the city Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  'Anthony'", "source_tables": ["airports"]}}
{"sample_id": 187, "db_id": "flight_2", "final": {"question": "How many airlines do we have?", "sql": "SELECT count(*) FROM AIRLINES", "source_tables": ["airlines"]}}
{"sample_id": 188, "db_id": "flight_2", "final": {"question": "What is the total number of airlines?", "sql": "SELECT count(*) FROM AIRLINES", "source_tables": ["airlines"]}}
{"sample_id": 189, "db_id": "flight_2", "final": {"question": "How many airports do we have?", "sql": "SELECT count(*) FROM AIRPORTS", "source_tables": ["airports"]}}
{"sample_id": 190, "db_id": "flight_2", "final": {"question": "Return the number of  airports.", "sql": "SELECT count(*) FROM AIRPORTS", "source_tables": ["airports"]}}
{"sample_id": 191, "db_id": "flight_2", "final": {"question": "How many flights do we have?", "sql": "SELECT count(*) FROM FLIGHTS", "source_tables": ["flights"]}}
{"sample_id": 192, "db_id": "flight_2", "final": {"question": "Return the number of flights.", "sql": "SELECT count(*) FROM FLIGHTS", "source_tables": ["flights"]}}
{"sample_id": 193, "db_id": "flight_2", "final": {"question": "Which airline has abbreviation 'UAL'?", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  'UAL'", "source_tables": ["airlines"]}}
{"sample_id": 194, "db_id": "flight_2", "final": {"question": "Give the airline with abbreviation 'UAL'.", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  'UAL'", "source_tables": ["airlines"]}}
{"sample_id": 195, "db_id": "flight_2", "final": {"question": "How many airlines are from USA?", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  'USA'", "source_tables": ["airlines"]}}
{"sample_id": 196, "db_id": "flight_2", "final": {"question": "Return the number of airlines in the USA.", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  'USA'", "source_tables": ["airlines"]}}
{"sample_id": 197, "db_id": "flight_2", "final": {"question": "Which city and country is the Alton airport at?", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  'Alton'", "source_tables": ["airports"]}}
{"sample_id": 198, "db_id": "flight_2", "final": {"question": "Give the city and country for the Alton airport.", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  'Alton'", "source_tables": ["airports"]}}
{"sample_id": 199, "db_id": "flight_2", "final": {"question": "What is the airport name for airport 'AKO'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO'", "source_tables": ["airports"]}}
{"sample_id": 200, "db_id": "flight_2", "final": {"question": "Return the name of the airport with code 'AKO'.", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO'", "source_tables": ["airports"]}}
{"sample_id": 201, "db_id": "flight_2", "final": {"question": "What are airport names at City 'Aberdeen'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'", "source_tables": ["airports"]}}
{"sample_id": 202, "db_id": "flight_2", "final": {"question": "What are the names of airports in Aberdeen?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'", "source_tables": ["airports"]}}
{"sample_id": 203, "db_id": "flight_2", "final": {"question": "How many flights depart from 'APG'?", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 204, "db_id": "flight_2", "final": {"question": "Count the number of flights departing from 'APG'.", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 205, "db_id": "flight_2", "final": {"question": "How many flights have destination ATO?", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO'", "source_tables": ["flights"]}}
{"sample_id": 206, "db_id": "flight_2", "final": {"question": "Count the number of flights into ATO.", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO'", "source_tables": ["flights"]}}
{"sample_id": 207, "db_id": "flight_2", "final": {"question": "How many flights depart from City Aberdeen?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 208, "db_id": "flight_2", "final": {"question": "Return the number of flights departing from Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 209, "db_id": "flight_2", "final": {"question": "How many flights arriving in Aberdeen city?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 210, "db_id": "flight_2", "final": {"question": "Return the number of flights arriving in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 211, "db_id": "flight_2", "final": {"question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 212, "db_id": "flight_2", "final": {"question": "How many flights fly from Aberdeen to Ashley?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 213, "db_id": "flight_2", "final": {"question": "How many flights does airline 'JetBlue Airways' have?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = 'JetBlue Airways'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 214, "db_id": "flight_2", "final": {"question": "Give the number of Jetblue Airways flights.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = 'JetBlue Airways'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 215, "db_id": "flight_2", "final": {"question": "How many 'United Airlines' flights go to Airport 'ASY'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.DestAirport  =  'ASY'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 216, "db_id": "flight_2", "final": {"question": "Count the number of United Airlines flights arriving in ASY Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.DestAirport  =  'ASY'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 217, "db_id": "flight_2", "final": {"question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.SourceAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 218, "db_id": "flight_2", "final": {"question": "Return the number of United Airlines flights leaving from AHD Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.SourceAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 219, "db_id": "flight_2", "final": {"question": "How many United Airlines flights go to City 'Aberdeen'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen' AND T3.Airline  =  'United Airlines'", "source_tables": ["airports", "flights", "airlines"]}}
{"sample_id": 220, "db_id": "flight_2", "final": {"question": "Count the number of United Airlines flights that arrive in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen' AND T3.Airline  =  'United Airlines'", "source_tables": ["airports", "flights", "airlines"]}}
{"sample_id": 221, "db_id": "flight_2", "final": {"question": "Which city has most number of arriving flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 222, "db_id": "flight_2", "final": {"question": "Which city has the most frequent destination airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 223, "db_id": "flight_2", "final": {"question": "Which city has most number of departing flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 224, "db_id": "flight_2", "final": {"question": "Which city is the most frequent source airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 225, "db_id": "flight_2", "final": {"question": "What is the code of airport that has the highest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 226, "db_id": "flight_2", "final": {"question": "What is the airport code of the airport with the most flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 227, "db_id": "flight_2", "final": {"question": "What is the code of airport that has fewest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 228, "db_id": "flight_2", "final": {"question": "Give the code of the airport with the least flights.", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "source_tables": ["airports", "flights"]}}
{"sample_id": 229, "db_id": "flight_2", "final": {"question": "Which airline has most number of flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flights", "airlines"]}}
{"sample_id": 230, "db_id": "flight_2", "final": {"question": "What airline serves the most flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flights", "airlines"]}}
{"sample_id": 231, "db_id": "flight_2", "final": {"question": "Find the abbreviation and country of the airline that has fewest number of flights?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "source_tables": ["flights", "airlines"]}}
{"sample_id": 232, "db_id": "flight_2", "final": {"question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "source_tables": ["flights", "airlines"]}}
{"sample_id": 233, "db_id": "flight_2", "final": {"question": "What are airlines that have some flight departing from airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 234, "db_id": "flight_2", "final": {"question": "Which airlines have a flight with source airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 235, "db_id": "flight_2", "final": {"question": "What are airlines that have flights arriving at airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 236, "db_id": "flight_2", "final": {"question": "Which airlines have a flight with destination airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 237, "db_id": "flight_2", "final": {"question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 238, "db_id": "flight_2", "final": {"question": "Which airlines have departing flights from both APG and CVO airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 239, "db_id": "flight_2", "final": {"question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 240, "db_id": "flight_2", "final": {"question": "Which airlines have departures from CVO but not from APG airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 241, "db_id": "flight_2", "final": {"question": "Find all airlines that have at least 10 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "source_tables": ["flights", "airlines"]}}
{"sample_id": 242, "db_id": "flight_2", "final": {"question": "Which airlines have at least 10 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "source_tables": ["flights", "airlines"]}}
{"sample_id": 243, "db_id": "flight_2", "final": {"question": "Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["flights", "airlines"]}}
{"sample_id": 244, "db_id": "flight_2", "final": {"question": "Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "source_tables": ["flights", "airlines"]}}
{"sample_id": 245, "db_id": "flight_2", "final": {"question": "What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 246, "db_id": "flight_2", "final": {"question": "Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "source_tables": ["flights", "airlines"]}}
{"sample_id": 247, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 248, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 249, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 250, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "source_tables": ["flights"]}}
{"sample_id": 251, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 252, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights leaving from Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 253, "db_id": "flight_2", "final": {"question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 254, "db_id": "flight_2", "final": {"question": "Give the flight numbers of flights arriving in Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "source_tables": ["airports", "flights"]}}
{"sample_id": 255, "db_id": "flight_2", "final": {"question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'", "source_tables": ["airports", "flights"]}}
{"sample_id": 256, "db_id": "flight_2", "final": {"question": "How many flights land in Aberdeen or Abilene?", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'", "source_tables": ["airports", "flights"]}}
{"sample_id": 257, "db_id": "flight_2", "final": {"question": "Find the name of airports which do not have any flight in and out.", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "source_tables": ["airports", "flights"]}}
{"sample_id": 258, "db_id": "flight_2", "final": {"question": "Which airports do not have departing or arriving flights?", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "source_tables": ["airports", "flights"]}}
{"sample_id": 259, "db_id": "employee_hire_evaluation", "final": {"question": "How many employees are there?", "sql": "SELECT count(*) FROM employee", "source_tables": ["employee"]}}
{"sample_id": 260, "db_id": "employee_hire_evaluation", "final": {"question": "Count the number of employees", "sql": "SELECT count(*) FROM employee", "source_tables": ["employee"]}}
{"sample_id": 261, "db_id": "employee_hire_evaluation", "final": {"question": "Sort employee names by their age in ascending order.", "sql": "SELECT name FROM employee ORDER BY age", "source_tables": ["employee"]}}
{"sample_id": 262, "db_id": "employee_hire_evaluation", "final": {"question": "List the names of employees and sort in ascending order of age.", "sql": "SELECT name FROM employee ORDER BY age", "source_tables": ["employee"]}}
{"sample_id": 263, "db_id": "employee_hire_evaluation", "final": {"question": "What is the number of employees from each city?", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "source_tables": ["employee"]}}
{"sample_id": 264, "db_id": "employee_hire_evaluation", "final": {"question": "Count the number of employees for each city.", "sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "source_tables": ["employee"]}}
{"sample_id": 265, "db_id": "employee_hire_evaluation", "final": {"question": "Which cities do more than one employee under age 30 come from?", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "source_tables": ["employee"]}}
{"sample_id": 266, "db_id": "employee_hire_evaluation", "final": {"question": "Find the cities that have more than one employee under age 30.", "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "source_tables": ["employee"]}}
{"sample_id": 267, "db_id": "employee_hire_evaluation", "final": {"question": "Find the number of shops in each location.", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "source_tables": ["shop"]}}
{"sample_id": 268, "db_id": "employee_hire_evaluation", "final": {"question": "How many shops are there in each location?", "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "source_tables": ["shop"]}}
{"sample_id": 269, "db_id": "employee_hire_evaluation", "final": {"question": "Find the manager name and district of the shop whose number of products is the largest.", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "source_tables": ["shop"]}}
{"sample_id": 270, "db_id": "employee_hire_evaluation", "final": {"question": "What are the manager name and district of the shop that sells the largest number of products?", "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "source_tables": ["shop"]}}
{"sample_id": 271, "db_id": "employee_hire_evaluation", "final": {"question": "find the minimum and maximum number of products of all stores.", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 272, "db_id": "employee_hire_evaluation", "final": {"question": "What are the minimum and maximum number of products across all the shops?", "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 273, "db_id": "employee_hire_evaluation", "final": {"question": "Return the name, location and district of all shops in descending order of number of products.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "source_tables": ["shop"]}}
{"sample_id": 274, "db_id": "employee_hire_evaluation", "final": {"question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "source_tables": ["shop"]}}
{"sample_id": 275, "db_id": "employee_hire_evaluation", "final": {"question": "Find the names of stores whose number products is more than the average number of products.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "source_tables": ["shop"]}}
{"sample_id": 276, "db_id": "employee_hire_evaluation", "final": {"question": "Which shops' number products is above the average? Give me the shop names.", "sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "source_tables": ["shop"]}}
{"sample_id": 277, "db_id": "employee_hire_evaluation", "final": {"question": "find the name of employee who was awarded the most times in the evaluation.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "evaluation"]}}
{"sample_id": 278, "db_id": "employee_hire_evaluation", "final": {"question": "Which employee received the most awards in evaluations? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "evaluation"]}}
{"sample_id": 279, "db_id": "employee_hire_evaluation", "final": {"question": "Find the name of the employee who got the highest one time bonus.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "source_tables": ["employee", "evaluation"]}}
{"sample_id": 280, "db_id": "employee_hire_evaluation", "final": {"question": "Which employee received the biggest bonus? Give me the employee name.", "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "source_tables": ["employee", "evaluation"]}}
{"sample_id": 281, "db_id": "employee_hire_evaluation", "final": {"question": "Find the names of employees who never won any award in the evaluation.", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "source_tables": ["employee", "evaluation"]}}
{"sample_id": 282, "db_id": "employee_hire_evaluation", "final": {"question": "What are the names of the employees who never received any evaluation?", "sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "source_tables": ["employee", "evaluation"]}}
{"sample_id": 283, "db_id": "employee_hire_evaluation", "final": {"question": "What is the name of the shop that is hiring the largest number of employees?", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["hiring", "shop"]}}
{"sample_id": 284, "db_id": "employee_hire_evaluation", "final": {"question": "Which shop has the most employees? Give me the shop name.", "sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["hiring", "shop"]}}
{"sample_id": 285, "db_id": "employee_hire_evaluation", "final": {"question": "Find the name of the shops that do not hire any employee.", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "source_tables": ["hiring", "shop"]}}
{"sample_id": 286, "db_id": "employee_hire_evaluation", "final": {"question": "Which shops run with no employees? Find the shop names", "sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "source_tables": ["hiring", "shop"]}}
{"sample_id": 287, "db_id": "employee_hire_evaluation", "final": {"question": "Find the number of employees hired in each shop; show the shop name as well.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "source_tables": ["hiring", "shop"]}}
{"sample_id": 288, "db_id": "employee_hire_evaluation", "final": {"question": "For each shop, return the number of employees working there and the name of the shop.", "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "source_tables": ["hiring", "shop"]}}
{"sample_id": 289, "db_id": "employee_hire_evaluation", "final": {"question": "What is total bonus given in all evaluations?", "sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}}
{"sample_id": 290, "db_id": "employee_hire_evaluation", "final": {"question": "Find the total amount of bonus given in all the evaluations.", "sql": "SELECT sum(bonus) FROM evaluation", "source_tables": ["evaluation"]}}
{"sample_id": 291, "db_id": "employee_hire_evaluation", "final": {"question": "Give me all the information about hiring.", "sql": "SELECT * FROM hiring", "source_tables": ["hiring"]}}
{"sample_id": 292, "db_id": "employee_hire_evaluation", "final": {"question": "What is all the information about hiring?", "sql": "SELECT * FROM hiring", "source_tables": ["hiring"]}}
{"sample_id": 293, "db_id": "employee_hire_evaluation", "final": {"question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "source_tables": ["shop"]}}
{"sample_id": 294, "db_id": "employee_hire_evaluation", "final": {"question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "source_tables": ["shop"]}}
{"sample_id": 295, "db_id": "employee_hire_evaluation", "final": {"question": "How many different store locations are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 296, "db_id": "employee_hire_evaluation", "final": {"question": "Count the number of distinct store locations.", "sql": "SELECT count(DISTINCT LOCATION) FROM shop", "source_tables": ["shop"]}}
{"sample_id": 297, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many documents do we have?", "sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 298, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of documents.", "sql": "SELECT count(*) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 299, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "List document IDs, document names, and document descriptions for all documents.", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 300, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids, names, and descriptions for all documents?", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 301, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document name and template id for document with description with the letter 'w' in it?", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE '%w%'", "source_tables": ["documents"]}}
{"sample_id": 302, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the names and template ids for documents that contain the letter w in their description.", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE '%w%'", "source_tables": ["documents"]}}
{"sample_id": 303, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id, template id and description for document named \"Robbin CV\"?", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Robbin CV'", "source_tables": ["documents"]}}
{"sample_id": 304, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the document id, template id, and description for the document with the name Robbin CV.", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Robbin CV'", "source_tables": ["documents"]}}
{"sample_id": 305, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many different templates do all document use?", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 306, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of different templates used for documents.", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "source_tables": ["documents"]}}
{"sample_id": 307, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many documents are using the template with type code 'PPT'?", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "source_tables": ["templates", "documents"]}}
{"sample_id": 308, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of documents that use the PPT template type.", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "source_tables": ["templates", "documents"]}}
{"sample_id": 309, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template ids and number of documents using each template.", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "source_tables": ["documents"]}}
{"sample_id": 310, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are all different template ids used for documents, and how many times were each of them used?", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "source_tables": ["documents"]}}
{"sample_id": 311, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the id and type code for the template used by the most documents?", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}}
{"sample_id": 312, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the id and type code of the template that is used for the greatest number of documents.", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}}
{"sample_id": 313, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show ids for all templates that are used by more than one document.", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "source_tables": ["documents"]}}
{"sample_id": 314, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the template ids of any templates used in more than a single document?", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "source_tables": ["documents"]}}
{"sample_id": 315, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show ids for all templates not used by any document.", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "source_tables": ["templates", "documents"]}}
{"sample_id": 316, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids for templates that are not used in any documents?", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "source_tables": ["templates", "documents"]}}
{"sample_id": 317, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many templates do we have?", "sql": "SELECT count(*) FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 318, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of templates.", "sql": "SELECT count(*) FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 319, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show template ids, version numbers, and template type codes for all templates.", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 320, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids, version numbers, and type codes for each template?", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 321, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all distinct template type codes for all templates.", "sql": "SELECT DISTINCT template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 322, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the different template type codes?", "sql": "SELECT DISTINCT template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 323, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids of templates with template type code PP or PPT?", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'", "source_tables": ["templates"]}}
{"sample_id": 324, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the ids of templates that have the code PP or PPT.", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'", "source_tables": ["templates"]}}
{"sample_id": 325, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many templates have template type code CV?", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  'CV'", "source_tables": ["templates"]}}
{"sample_id": 326, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of templates of the type CV.", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  'CV'", "source_tables": ["templates"]}}
{"sample_id": 327, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the version number and template type code for the template with version number later than 5?", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "source_tables": ["templates"]}}
{"sample_id": 328, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "source_tables": ["templates"]}}
{"sample_id": 329, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes and number of templates for each.", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "source_tables": ["templates"]}}
{"sample_id": 330, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the different template type codes, and how many templates correspond to each?", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "source_tables": ["templates"]}}
{"sample_id": 331, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Which template type code has most number of templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates"]}}
{"sample_id": 332, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the type code of the template type that the most templates belong to.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates"]}}
{"sample_id": 333, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes with less than three templates.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "source_tables": ["templates"]}}
{"sample_id": 334, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the codes of template types that have fewer than 3 templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "source_tables": ["templates"]}}
{"sample_id": 335, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What the smallest version number and its template type code?", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 336, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the lowest version number, along with its corresponding template type code.", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "source_tables": ["templates"]}}
{"sample_id": 337, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the template type code of the template used by document with the name \"Data base\"?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base'", "source_tables": ["templates", "documents"]}}
{"sample_id": 338, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the template type code of the template that is used by a document named Data base.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base'", "source_tables": ["templates", "documents"]}}
{"sample_id": 339, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document names using templates with template type code BK.", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  'BK'", "source_tables": ["templates", "documents"]}}
{"sample_id": 340, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the names of documents that use templates with the code BK?", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  'BK'", "source_tables": ["templates", "documents"]}}
{"sample_id": 341, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes and the number of documents using each type.", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "source_tables": ["templates", "documents"]}}
{"sample_id": 342, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the different template type codes, and how many documents use each type?", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "source_tables": ["templates", "documents"]}}
{"sample_id": 343, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Which template type code is used by most number of documents?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}}
{"sample_id": 344, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the code of the template type that is most commonly used in documents.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["templates", "documents"]}}
{"sample_id": 345, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes that are not used by any document.", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "source_tables": ["templates", "documents"]}}
{"sample_id": 346, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the codes of template types that are not used for any document?", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "source_tables": ["templates", "documents"]}}
{"sample_id": 347, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all template type codes and descriptions.", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "source_tables": ["ref_template_types"]}}
{"sample_id": 348, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the type codes and descriptions for all template types?", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "source_tables": ["ref_template_types"]}}
{"sample_id": 349, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the template type descriptions for template type code \"AD\".", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD'", "source_tables": ["ref_template_types"]}}
{"sample_id": 350, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the template type description of the template type with the code AD.", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD'", "source_tables": ["ref_template_types"]}}
{"sample_id": 351, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the template type code for template type description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  'Book'", "source_tables": ["ref_template_types"]}}
{"sample_id": 352, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the type code of the template type with the description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  'Book'", "source_tables": ["ref_template_types"]}}
{"sample_id": 353, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the distinct template type descriptions for the templates ever used by any document?", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "source_tables": ["ref_template_types", "templates", "documents"]}}
{"sample_id": 354, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the different descriptions for templates that have been used in a document.", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "source_tables": ["ref_template_types", "templates", "documents"]}}
{"sample_id": 355, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the template ids with template type description \"Presentation\".", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  'Presentation'", "source_tables": ["ref_template_types", "templates"]}}
{"sample_id": 356, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the ids corresponding to templates with the description 'Presentation'.", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  'Presentation'", "source_tables": ["ref_template_types", "templates"]}}
{"sample_id": 357, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many paragraphs in total?", "sql": "SELECT count(*) FROM Paragraphs", "source_tables": ["paragraphs"]}}
{"sample_id": 358, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of paragraphs.", "sql": "SELECT count(*) FROM Paragraphs", "source_tables": ["paragraphs"]}}
{"sample_id": 359, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "How many paragraphs for the document with name 'Summer Show'?", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 360, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Count the number of paragraphs in the document named 'Summer Show'.", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 361, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show paragraph details for paragraph with text 'Korea ' .", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "source_tables": ["paragraphs"]}}
{"sample_id": 362, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the details for the paragraph that includes the text 'Korea ' ?", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "source_tables": ["paragraphs"]}}
{"sample_id": 363, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 364, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 365, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 366, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 367, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}}
{"sample_id": 368, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "source_tables": ["paragraphs"]}}
{"sample_id": 369, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 370, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 371, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "source_tables": ["paragraphs"]}}
{"sample_id": 372, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids of documents that have 2 or more paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "source_tables": ["paragraphs"]}}
{"sample_id": 373, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id and name with greatest number of paragraphs?", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 374, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the id and name of the document with the most paragraphs.", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["paragraphs", "documents"]}}
{"sample_id": 375, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id with least number of paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["paragraphs"]}}
{"sample_id": 376, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Return the id of the document with the fewest paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["paragraphs"]}}
{"sample_id": 377, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What is the document id with 1 to 2 paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "source_tables": ["paragraphs"]}}
{"sample_id": 378, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Give the ids of documents that have between one and two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "source_tables": ["paragraphs"]}}
{"sample_id": 379, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "source_tables": ["paragraphs"]}}
{"sample_id": 380, "db_id": "cre_Doc_Template_Mgt", "final": {"question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "source_tables": ["paragraphs"]}}
{"sample_id": 381, "db_id": "course_teach", "final": {"question": "How many teachers are there?", "sql": "SELECT count(*) FROM teacher", "source_tables": ["teacher"]}}
{"sample_id": 382, "db_id": "course_teach", "final": {"question": "What is the total count of teachers?", "sql": "SELECT count(*) FROM teacher", "source_tables": ["teacher"]}}
{"sample_id": 383, "db_id": "course_teach", "final": {"question": "List the names of teachers in ascending order of age.", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "source_tables": ["teacher"]}}
{"sample_id": 384, "db_id": "course_teach", "final": {"question": "What are the names of the teachers ordered by ascending age?", "sql": "SELECT Name FROM teacher ORDER BY Age ASC", "source_tables": ["teacher"]}}
{"sample_id": 385, "db_id": "course_teach", "final": {"question": "What are the age and hometown of teachers?", "sql": "SELECT Age ,  Hometown FROM teacher", "source_tables": ["teacher"]}}
{"sample_id": 386, "db_id": "course_teach", "final": {"question": "What is the age and hometown of every teacher?", "sql": "SELECT Age ,  Hometown FROM teacher", "source_tables": ["teacher"]}}
{"sample_id": 387, "db_id": "course_teach", "final": {"question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "sql": "select name from teacher where hometown != 'little lever urban district'", "source_tables": ["teacher"]}}
{"sample_id": 388, "db_id": "course_teach", "final": {"question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "sql": "select name from teacher where hometown != 'little lever urban district'", "source_tables": ["teacher"]}}
{"sample_id": 389, "db_id": "course_teach", "final": {"question": "Show the name of teachers aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "source_tables": ["teacher"]}}
{"sample_id": 390, "db_id": "course_teach", "final": {"question": "What are the names of the teachers who are aged either 32 or 33?", "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "source_tables": ["teacher"]}}
{"sample_id": 391, "db_id": "course_teach", "final": {"question": "What is the hometown of the youngest teacher?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "source_tables": ["teacher"]}}
{"sample_id": 392, "db_id": "course_teach", "final": {"question": "Where is the youngest teacher from?", "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "source_tables": ["teacher"]}}
{"sample_id": 393, "db_id": "course_teach", "final": {"question": "Show different hometown of teachers and the number of teachers from each hometown.", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "source_tables": ["teacher"]}}
{"sample_id": 394, "db_id": "course_teach", "final": {"question": "For each hometown, how many teachers are there?", "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "source_tables": ["teacher"]}}
{"sample_id": 395, "db_id": "course_teach", "final": {"question": "List the most common hometown of teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["teacher"]}}
{"sample_id": 396, "db_id": "course_teach", "final": {"question": "What is the most commmon hometowns for teachers?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["teacher"]}}
{"sample_id": 397, "db_id": "course_teach", "final": {"question": "Show the hometowns shared by at least two teachers.", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "source_tables": ["teacher"]}}
{"sample_id": 398, "db_id": "course_teach", "final": {"question": "What are the towns from which at least two teachers come from?", "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "source_tables": ["teacher"]}}
{"sample_id": 399, "db_id": "course_teach", "final": {"question": "Show names of teachers and the courses they are arranged to teach.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "source_tables": ["course", "course_arrange", "teacher"]}}
{"sample_id": 400, "db_id": "course_teach", "final": {"question": "What is the name of each teacher and what course they teach?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "source_tables": ["course", "course_arrange", "teacher"]}}
{"sample_id": 401, "db_id": "course_teach", "final": {"question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "source_tables": ["course", "course_arrange", "teacher"]}}
{"sample_id": 402, "db_id": "course_teach", "final": {"question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "source_tables": ["course", "course_arrange", "teacher"]}}
{"sample_id": 403, "db_id": "course_teach", "final": {"question": "Show the name of the teacher for the math course.", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'", "source_tables": ["course", "course_arrange", "teacher"]}}
{"sample_id": 404, "db_id": "course_teach", "final": {"question": "What are the names of the people who teach math courses?", "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'", "source_tables": ["course", "course_arrange", "teacher"]}}
{"sample_id": 405, "db_id": "course_teach", "final": {"question": "Show names of teachers and the number of courses they teach.", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["course_arrange", "teacher"]}}
{"sample_id": 406, "db_id": "course_teach", "final": {"question": "What are the names of the teachers and how many courses do they teach?", "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "source_tables": ["course_arrange", "teacher"]}}
{"sample_id": 407, "db_id": "course_teach", "final": {"question": "Show names of teachers that teach at least two courses.", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["course_arrange", "teacher"]}}
{"sample_id": 408, "db_id": "course_teach", "final": {"question": "What are the names of the teachers who teach at least two courses?", "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "source_tables": ["course_arrange", "teacher"]}}
{"sample_id": 409, "db_id": "course_teach", "final": {"question": "List the names of teachers who have not been arranged to teach courses.", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "source_tables": ["course_arrange", "teacher"]}}
{"sample_id": 410, "db_id": "course_teach", "final": {"question": "What are the names of the teachers whose courses have not been arranged?", "sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "source_tables": ["course_arrange", "teacher"]}}
{"sample_id": 411, "db_id": "museum_visit", "final": {"question": "How many visitors below age 30 are there?", "sql": "SELECT count(*) FROM visitor WHERE age  <  30", "source_tables": ["visitor"]}}
{"sample_id": 412, "db_id": "museum_visit", "final": {"question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "source_tables": ["visitor"]}}
{"sample_id": 413, "db_id": "museum_visit", "final": {"question": "What is the average age of the visitors whose membership level is not higher than 4?", "sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "source_tables": ["visitor"]}}
{"sample_id": 414, "db_id": "museum_visit", "final": {"question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "source_tables": ["visitor"]}}
{"sample_id": 415, "db_id": "museum_visit", "final": {"question": "Find the id and name of the museum that has the most staff members?", "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "source_tables": ["museum"]}}
{"sample_id": 416, "db_id": "museum_visit", "final": {"question": "Find the average number of staff working for the museums that were open before 2009.", "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "source_tables": ["museum"]}}
{"sample_id": 417, "db_id": "museum_visit", "final": {"question": "What are the opening year and staff number of the museum named Plaza Museum?", "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "source_tables": ["museum"]}}
{"sample_id": 418, "db_id": "museum_visit", "final": {"question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "source_tables": ["museum"]}}
{"sample_id": 419, "db_id": "museum_visit", "final": {"question": "find the id, name and age for visitors who visited some museums more than once.", "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "source_tables": ["visit", "visitor"]}}
{"sample_id": 420, "db_id": "museum_visit", "final": {"question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "source_tables": ["visit", "visitor"]}}
{"sample_id": 421, "db_id": "museum_visit", "final": {"question": "What are the id and name of the museum visited most times?", "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["museum", "visit"]}}
{"sample_id": 422, "db_id": "museum_visit", "final": {"question": "What is the name of the museum that had no visitor yet?", "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "source_tables": ["museum", "visit"]}}
{"sample_id": 423, "db_id": "museum_visit", "final": {"question": "Find the name and age of the visitor who bought the most tickets at once.", "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "source_tables": ["visit", "visitor"]}}
{"sample_id": 424, "db_id": "museum_visit", "final": {"question": "What are the average and maximum number of tickets bought in all visits?", "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "source_tables": ["visit"]}}
{"sample_id": 425, "db_id": "museum_visit", "final": {"question": "What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "source_tables": ["visit", "visitor"]}}
{"sample_id": 426, "db_id": "museum_visit", "final": {"question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "source_tables": ["museum", "visit", "visitor"]}}
{"sample_id": 427, "db_id": "museum_visit", "final": {"question": "Find the number of visitors who did not visit any museum opened after 2010.", "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "source_tables": ["museum", "visit", "visitor"]}}
{"sample_id": 428, "db_id": "museum_visit", "final": {"question": "How many museums were opened after 2013 or before 2008?", "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "source_tables": ["museum"]}}
{"sample_id": 429, "db_id": "wta_1", "final": {"question": "Find the total number of players.", "sql": "SELECT count(*) FROM players", "source_tables": ["players"]}}
{"sample_id": 430, "db_id": "wta_1", "final": {"question": "How many players are there?", "sql": "SELECT count(*) FROM players", "source_tables": ["players"]}}
{"sample_id": 431, "db_id": "wta_1", "final": {"question": "Find the total number of matches.", "sql": "SELECT count(*) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 432, "db_id": "wta_1", "final": {"question": "Count the number of matches.", "sql": "SELECT count(*) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 433, "db_id": "wta_1", "final": {"question": "List the first name and birth date of all players from the country with code USA.", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "source_tables": ["players"]}}
{"sample_id": 434, "db_id": "wta_1", "final": {"question": "What are the first names and birth dates of players from the USA?", "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "source_tables": ["players"]}}
{"sample_id": 435, "db_id": "wta_1", "final": {"question": "Find the average age of losers and winners of all matches.", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 436, "db_id": "wta_1", "final": {"question": "What are the average ages of losers and winners across matches?", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 437, "db_id": "wta_1", "final": {"question": "Find the average rank of winners in all matches.", "sql": "SELECT avg(winner_rank) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 438, "db_id": "wta_1", "final": {"question": "What is the average rank for winners in all matches?", "sql": "SELECT avg(winner_rank) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 439, "db_id": "wta_1", "final": {"question": "Find the highest rank of losers in all matches.", "sql": "SELECT min(loser_rank) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 440, "db_id": "wta_1", "final": {"question": "What is the best rank of losers across all matches?", "sql": "SELECT min(loser_rank) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 441, "db_id": "wta_1", "final": {"question": "find the number of distinct country codes of all players.", "sql": "SELECT count(DISTINCT country_code) FROM players", "source_tables": ["players"]}}
{"sample_id": 442, "db_id": "wta_1", "final": {"question": "How many distinct countries do players come from?", "sql": "SELECT count(DISTINCT country_code) FROM players", "source_tables": ["players"]}}
{"sample_id": 443, "db_id": "wta_1", "final": {"question": "Find the number of distinct name of losers.", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 444, "db_id": "wta_1", "final": {"question": "How many different loser names are there?", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "source_tables": ["matches"]}}
{"sample_id": 445, "db_id": "wta_1", "final": {"question": "Find the name of tourney that has more than 10 matches.", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "source_tables": ["matches"]}}
{"sample_id": 446, "db_id": "wta_1", "final": {"question": "What are the names of tournaments that have more than 10 matches?", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "source_tables": ["matches"]}}
{"sample_id": 447, "db_id": "wta_1", "final": {"question": "List the names of all winners who played in both 2013 and 2016.", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "source_tables": ["matches"]}}
{"sample_id": 448, "db_id": "wta_1", "final": {"question": "What are the names of players who won in both 2013 and 2016?", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "source_tables": ["matches"]}}
{"sample_id": 449, "db_id": "wta_1", "final": {"question": "List the number of all matches who played in years of 2013 or 2016.", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "source_tables": ["matches"]}}
{"sample_id": 450, "db_id": "wta_1", "final": {"question": "How many matches were played in 2013 or 2016?", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "source_tables": ["matches"]}}
{"sample_id": 451, "db_id": "wta_1", "final": {"question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "source_tables": ["matches", "players"]}}
{"sample_id": 452, "db_id": "wta_1", "final": {"question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "source_tables": ["matches", "players"]}}
{"sample_id": 453, "db_id": "wta_1", "final": {"question": "Find the first name and country code of the oldest player.", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "source_tables": ["players"]}}
{"sample_id": 454, "db_id": "wta_1", "final": {"question": "What is the first name and country code of the oldest player?", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "source_tables": ["players"]}}
{"sample_id": 455, "db_id": "wta_1", "final": {"question": "List the first and last name of all players in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "source_tables": ["players"]}}
{"sample_id": 456, "db_id": "wta_1", "final": {"question": "What are the full names of all players, sorted by birth date?", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "source_tables": ["players"]}}
{"sample_id": 457, "db_id": "wta_1", "final": {"question": "List the first and last name of all players who are left / L hand in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "source_tables": ["players"]}}
{"sample_id": 458, "db_id": "wta_1", "final": {"question": "What are the full names of all left handed players, in order of birth date?", "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "source_tables": ["players"]}}
{"sample_id": 459, "db_id": "wta_1", "final": {"question": "Find the first name and country code of the player who did the most number of tours.", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "source_tables": ["rankings", "players"]}}
{"sample_id": 460, "db_id": "wta_1", "final": {"question": "What is the first name and country code of the player with the most tours?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "source_tables": ["rankings", "players"]}}
{"sample_id": 461, "db_id": "wta_1", "final": {"question": "Find the year that has the most number of matches.", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 462, "db_id": "wta_1", "final": {"question": "Which year had the most matches?", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 463, "db_id": "wta_1", "final": {"question": "Find the name and rank points of the winner who won the most times.", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 464, "db_id": "wta_1", "final": {"question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 465, "db_id": "wta_1", "final": {"question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 466, "db_id": "wta_1", "final": {"question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 467, "db_id": "wta_1", "final": {"question": "find the names of loser and winner who played in the match with greatest number of minutes.", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 468, "db_id": "wta_1", "final": {"question": "What are the names of the winner and loser who played in the longest match?", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "source_tables": ["matches"]}}
{"sample_id": 469, "db_id": "wta_1", "final": {"question": "Find the average ranking for each player and their first name.", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["rankings", "players"]}}
{"sample_id": 470, "db_id": "wta_1", "final": {"question": "What are the first names of all players, and their average rankings?", "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["rankings", "players"]}}
{"sample_id": 471, "db_id": "wta_1", "final": {"question": "Find the total ranking points for each player and their first name.", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["rankings", "players"]}}
{"sample_id": 472, "db_id": "wta_1", "final": {"question": "What are the first names of all players, and their total ranking points?", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "source_tables": ["rankings", "players"]}}
{"sample_id": 473, "db_id": "wta_1", "final": {"question": "find the number of players for each country.", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "source_tables": ["players"]}}
{"sample_id": 474, "db_id": "wta_1", "final": {"question": "How many players are from each country?", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "source_tables": ["players"]}}
{"sample_id": 475, "db_id": "wta_1", "final": {"question": "find the code of the country where has the greatest number of players.", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["players"]}}
{"sample_id": 476, "db_id": "wta_1", "final": {"question": "What is the code of the country with the most players?", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["players"]}}
{"sample_id": 477, "db_id": "wta_1", "final": {"question": "Find the codes of countries that have more than 50 players.", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "source_tables": ["players"]}}
{"sample_id": 478, "db_id": "wta_1", "final": {"question": "What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "source_tables": ["players"]}}
{"sample_id": 479, "db_id": "wta_1", "final": {"question": "Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}}
{"sample_id": 480, "db_id": "wta_1", "final": {"question": "How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "source_tables": ["rankings"]}}
{"sample_id": 481, "db_id": "wta_1", "final": {"question": "Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}}
{"sample_id": 482, "db_id": "wta_1", "final": {"question": "How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "source_tables": ["matches"]}}
{"sample_id": 483, "db_id": "wta_1", "final": {"question": "Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "source_tables": ["matches"]}}
{"sample_id": 484, "db_id": "wta_1", "final": {"question": "What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "source_tables": ["matches"]}}
{"sample_id": 485, "db_id": "wta_1", "final": {"question": "How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "source_tables": ["matches"]}}
{"sample_id": 486, "db_id": "wta_1", "final": {"question": "Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "source_tables": ["matches"]}}
{"sample_id": 487, "db_id": "wta_1", "final": {"question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "source_tables": ["matches", "players"]}}
{"sample_id": 488, "db_id": "wta_1", "final": {"question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "source_tables": ["matches", "players"]}}
{"sample_id": 489, "db_id": "wta_1", "final": {"question": "Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "source_tables": ["players"]}}
{"sample_id": 490, "db_id": "wta_1", "final": {"question": "How many players are there for each hand type?", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "source_tables": ["players"]}}
{"sample_id": 491, "db_id": "battle_death", "final": {"question": "How many ships ended up being 'Captured'?", "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "source_tables": ["ship"]}}
{"sample_id": 492, "db_id": "battle_death", "final": {"question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "source_tables": ["ship"]}}
{"sample_id": 493, "db_id": "battle_death", "final": {"question": "List the name, date and result of each battle.", "sql": "SELECT name ,  date FROM battle", "source_tables": ["battle"]}}
{"sample_id": 494, "db_id": "battle_death", "final": {"question": "What is maximum and minimum death toll caused each time?", "sql": "SELECT max(killed) ,  min(killed) FROM death", "source_tables": ["death"]}}
{"sample_id": 495, "db_id": "battle_death", "final": {"question": "What is the average number of injuries caused each time?", "sql": "SELECT avg(injured) FROM death", "source_tables": ["death"]}}
{"sample_id": 496, "db_id": "battle_death", "final": {"question": "What are the death and injury situations caused by the ship with tonnage 't'?", "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "source_tables": ["ship", "death"]}}
{"sample_id": 497, "db_id": "battle_death", "final": {"question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "source_tables": ["battle"]}}
{"sample_id": 498, "db_id": "battle_death", "final": {"question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "source_tables": ["battle", "ship"]}}
{"sample_id": 499, "db_id": "battle_death", "final": {"question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "source_tables": ["death", "battle", "ship"]}}
{"sample_id": 500, "db_id": "battle_death", "final": {"question": "What is the ship id and name that caused most total injuries?", "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["ship", "death"]}}
{"sample_id": 501, "db_id": "battle_death", "final": {"question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "source_tables": ["battle"]}}
{"sample_id": 502, "db_id": "battle_death", "final": {"question": "How many different results are there for the battles?", "sql": "SELECT count(DISTINCT RESULT) FROM battle", "source_tables": ["battle"]}}
{"sample_id": 503, "db_id": "battle_death", "final": {"question": "How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "source_tables": ["battle", "ship"]}}
{"sample_id": 504, "db_id": "battle_death", "final": {"question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "source_tables": ["battle", "ship"]}}
{"sample_id": 505, "db_id": "battle_death", "final": {"question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "source_tables": ["battle", "ship"]}}
{"sample_id": 506, "db_id": "battle_death", "final": {"question": "What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'", "source_tables": ["death"]}}
{"sample_id": 507, "db_id": "student_transcripts_tracking", "final": {"question": "what are all the addresses including line 1 and line 2?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "source_tables": ["addresses"]}}
{"sample_id": 508, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first and second line for all addresses?", "sql": "SELECT line_1 ,  line_2 FROM addresses", "source_tables": ["addresses"]}}
{"sample_id": 509, "db_id": "student_transcripts_tracking", "final": {"question": "How many courses in total are listed?", "sql": "SELECT count(*) FROM Courses", "source_tables": ["courses"]}}
{"sample_id": 510, "db_id": "student_transcripts_tracking", "final": {"question": "How many courses are there?", "sql": "SELECT count(*) FROM Courses", "source_tables": ["courses"]}}
{"sample_id": 511, "db_id": "student_transcripts_tracking", "final": {"question": "How is the math course described?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "source_tables": ["courses"]}}
{"sample_id": 512, "db_id": "student_transcripts_tracking", "final": {"question": "What are the descriptions for all the math courses?", "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "source_tables": ["courses"]}}
{"sample_id": 513, "db_id": "student_transcripts_tracking", "final": {"question": "What is the zip code of the address in the city Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "source_tables": ["addresses"]}}
{"sample_id": 514, "db_id": "student_transcripts_tracking", "final": {"question": "What is the zip code for Port Chelsea?", "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "source_tables": ["addresses"]}}
{"sample_id": 515, "db_id": "student_transcripts_tracking", "final": {"question": "Which department offers the most number of degrees? List department name and id.", "sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["departments", "degree_programs"]}}
{"sample_id": 516, "db_id": "student_transcripts_tracking", "final": {"question": "What is the name and id of the department with the most number of degrees ?", "sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "source_tables": ["departments", "degree_programs"]}}
{"sample_id": 517, "db_id": "student_transcripts_tracking", "final": {"question": "How many departments offer any degree?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "source_tables": ["degree_programs"]}}
{"sample_id": 518, "db_id": "student_transcripts_tracking", "final": {"question": "How many different departments offer degrees?", "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "source_tables": ["degree_programs"]}}
{"sample_id": 519, "db_id": "student_transcripts_tracking", "final": {"question": "How many different degree names are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "source_tables": ["degree_programs"]}}
{"sample_id": 520, "db_id": "student_transcripts_tracking", "final": {"question": "How many different degrees are offered?", "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "source_tables": ["degree_programs"]}}
{"sample_id": 521, "db_id": "student_transcripts_tracking", "final": {"question": "How many degrees does the engineering department offer?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "source_tables": ["departments", "degree_programs"]}}
{"sample_id": 522, "db_id": "student_transcripts_tracking", "final": {"question": "How many degrees does the engineering department have?", "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "source_tables": ["departments", "degree_programs"]}}
{"sample_id": 523, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names and descriptions of all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "source_tables": ["sections"]}}
{"sample_id": 524, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names and descriptions for all the sections?", "sql": "SELECT section_name ,  section_description FROM Sections", "source_tables": ["sections"]}}
{"sample_id": 525, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names and id of courses having at most 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "source_tables": ["courses", "sections"]}}
{"sample_id": 526, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names and ids of every course with less than 2 sections?", "sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "source_tables": ["courses", "sections"]}}
{"sample_id": 527, "db_id": "student_transcripts_tracking", "final": {"question": "List the section_name in reversed lexicographical order.", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "source_tables": ["sections"]}}
{"sample_id": 528, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names of the sections in reverse alphabetical order?", "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "source_tables": ["sections"]}}
{"sample_id": 529, "db_id": "student_transcripts_tracking", "final": {"question": "What is the semester which most student registered in? Show both the name and the id.", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "semesters"]}}
{"sample_id": 530, "db_id": "student_transcripts_tracking", "final": {"question": "For each semester, what is the name and id of the one with the most students registered?", "sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "semesters"]}}
{"sample_id": 531, "db_id": "student_transcripts_tracking", "final": {"question": "What is the description of the department whose name has the substring the computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "source_tables": ["departments"]}}
{"sample_id": 532, "db_id": "student_transcripts_tracking", "final": {"question": "What is the department description for the one whose name has the word computer?", "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "source_tables": ["departments"]}}
{"sample_id": 533, "db_id": "student_transcripts_tracking", "final": {"question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "source_tables": ["student_enrolment", "students"]}}
{"sample_id": 534, "db_id": "student_transcripts_tracking", "final": {"question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "source_tables": ["student_enrolment", "students"]}}
{"sample_id": 535, "db_id": "student_transcripts_tracking", "final": {"question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs", "students"]}}
{"sample_id": 536, "db_id": "student_transcripts_tracking", "final": {"question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs", "students"]}}
{"sample_id": 537, "db_id": "student_transcripts_tracking", "final": {"question": "Find the kind of program which most number of students are enrolled in?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 538, "db_id": "student_transcripts_tracking", "final": {"question": "What is the degree summary name that has the most number of students enrolled?", "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 539, "db_id": "student_transcripts_tracking", "final": {"question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 540, "db_id": "student_transcripts_tracking", "final": {"question": "What is the program id and the summary of the degree that has the most students enrolled?", "sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 541, "db_id": "student_transcripts_tracking", "final": {"question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "students"]}}
{"sample_id": 542, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_enrolment", "students"]}}
{"sample_id": 543, "db_id": "student_transcripts_tracking", "final": {"question": "Which semesters do not have any student enrolled? List the semester name.", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "source_tables": ["student_enrolment", "semesters"]}}
{"sample_id": 544, "db_id": "student_transcripts_tracking", "final": {"question": "What is the name of the semester with no students enrolled?", "sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "source_tables": ["student_enrolment", "semesters"]}}
{"sample_id": 545, "db_id": "student_transcripts_tracking", "final": {"question": "What are all the course names of the courses which ever have students enrolled in?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "source_tables": ["courses", "student_enrolment_courses"]}}
{"sample_id": 546, "db_id": "student_transcripts_tracking", "final": {"question": "What are the names of all courses that have some students enrolled?", "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "source_tables": ["courses", "student_enrolment_courses"]}}
{"sample_id": 547, "db_id": "student_transcripts_tracking", "final": {"question": "What's the name of the course with most number of enrollments?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_enrolment_courses"]}}
{"sample_id": 548, "db_id": "student_transcripts_tracking", "final": {"question": "What is the name of the course with the most students enrolled?", "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_enrolment_courses"]}}
{"sample_id": 549, "db_id": "student_transcripts_tracking", "final": {"question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "source_tables": ["addresses", "student_enrolment", "students"]}}
{"sample_id": 550, "db_id": "student_transcripts_tracking", "final": {"question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "source_tables": ["addresses", "student_enrolment", "students"]}}
{"sample_id": 551, "db_id": "student_transcripts_tracking", "final": {"question": "Show the date and id of the transcript with at least 2 course results.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "source_tables": ["transcripts", "transcript_contents"]}}
{"sample_id": 552, "db_id": "student_transcripts_tracking", "final": {"question": "What is the date and id of the transcript with at least 2 courses listed?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "source_tables": ["transcripts", "transcript_contents"]}}
{"sample_id": 553, "db_id": "student_transcripts_tracking", "final": {"question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "source_tables": ["students"]}}
{"sample_id": 554, "db_id": "student_transcripts_tracking", "final": {"question": "What is the mobile phone number of the student named Timmothy Ward ?", "sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "source_tables": ["students"]}}
{"sample_id": 555, "db_id": "student_transcripts_tracking", "final": {"question": "Who is the first student to register? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "source_tables": ["students"]}}
{"sample_id": 556, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first, middle, and last name of the first student to register?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "source_tables": ["students"]}}
{"sample_id": 557, "db_id": "student_transcripts_tracking", "final": {"question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "source_tables": ["students"]}}
{"sample_id": 558, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first, middle, and last name of the earliest school graduate?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "source_tables": ["students"]}}
{"sample_id": 559, "db_id": "student_transcripts_tracking", "final": {"question": "Whose permanent address is different from his or her current address? List his or her first name.", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "source_tables": ["students"]}}
{"sample_id": 560, "db_id": "student_transcripts_tracking", "final": {"question": "What is the first name of the student whose permanent address is different from his or her current one?", "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "source_tables": ["students"]}}
{"sample_id": 561, "db_id": "student_transcripts_tracking", "final": {"question": "Which address holds the most number of students currently? List the address id and all lines.", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["addresses", "students"]}}
{"sample_id": 562, "db_id": "student_transcripts_tracking", "final": {"question": "What is the id, line 1, and line 2 of the address with the most students?", "sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["addresses", "students"]}}
{"sample_id": 563, "db_id": "student_transcripts_tracking", "final": {"question": "On average, when were the transcripts printed?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "source_tables": ["transcripts"]}}
{"sample_id": 564, "db_id": "student_transcripts_tracking", "final": {"question": "What is the average transcript date?", "sql": "SELECT avg(transcript_date) FROM Transcripts", "source_tables": ["transcripts"]}}
{"sample_id": 565, "db_id": "student_transcripts_tracking", "final": {"question": "When is the first transcript released? List the date and details.", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 566, "db_id": "student_transcripts_tracking", "final": {"question": "What is the earliest date of a transcript release, and what details can you tell me?", "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 567, "db_id": "student_transcripts_tracking", "final": {"question": "How many transcripts are released?", "sql": "SELECT count(*) FROM Transcripts", "source_tables": ["transcripts"]}}
{"sample_id": 568, "db_id": "student_transcripts_tracking", "final": {"question": "How many transcripts are listed?", "sql": "SELECT count(*) FROM Transcripts", "source_tables": ["transcripts"]}}
{"sample_id": 569, "db_id": "student_transcripts_tracking", "final": {"question": "What is the last transcript release date?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 570, "db_id": "student_transcripts_tracking", "final": {"question": "When was the last transcript released?", "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "source_tables": ["transcripts"]}}
{"sample_id": 571, "db_id": "student_transcripts_tracking", "final": {"question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}}
{"sample_id": 572, "db_id": "student_transcripts_tracking", "final": {"question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["transcript_contents"]}}
{"sample_id": 573, "db_id": "student_transcripts_tracking", "final": {"question": "Show the date of the transcript which shows the least number of results, also list the id.", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcripts", "transcript_contents"]}}
{"sample_id": 574, "db_id": "student_transcripts_tracking", "final": {"question": "What is the date and id of the transcript with the least number of results?", "sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "source_tables": ["transcripts", "transcript_contents"]}}
{"sample_id": 575, "db_id": "student_transcripts_tracking", "final": {"question": "Find the semester when both Master students and Bachelor students got enrolled in.", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 576, "db_id": "student_transcripts_tracking", "final": {"question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "source_tables": ["student_enrolment", "degree_programs"]}}
{"sample_id": 577, "db_id": "student_transcripts_tracking", "final": {"question": "How many different addresses do the students currently live?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "source_tables": ["students"]}}
{"sample_id": 578, "db_id": "student_transcripts_tracking", "final": {"question": "What are the different addresses that have students living there?", "sql": "SELECT count(DISTINCT current_address_id) FROM Students", "source_tables": ["students"]}}
{"sample_id": 579, "db_id": "student_transcripts_tracking", "final": {"question": "List all the student details in reversed lexicographical order.", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "source_tables": ["students"]}}
{"sample_id": 580, "db_id": "student_transcripts_tracking", "final": {"question": "What other details can you tell me about students in reverse alphabetical order?", "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "source_tables": ["students"]}}
{"sample_id": 581, "db_id": "student_transcripts_tracking", "final": {"question": "Describe the section h.", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "source_tables": ["sections"]}}
{"sample_id": 582, "db_id": "student_transcripts_tracking", "final": {"question": "What is the description for the section named h?", "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "source_tables": ["sections"]}}
{"sample_id": 583, "db_id": "student_transcripts_tracking", "final": {"question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "source_tables": ["addresses", "students"]}}
{"sample_id": 584, "db_id": "student_transcripts_tracking", "final": {"question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "source_tables": ["addresses", "students"]}}
{"sample_id": 585, "db_id": "tvshow", "final": {"question": "List the title of all cartoons in alphabetical order.", "sql": "SELECT Title FROM Cartoon ORDER BY title", "source_tables": ["cartoon"]}}
{"sample_id": 586, "db_id": "tvshow", "final": {"question": "What are the titles of the cartoons sorted alphabetically?", "sql": "SELECT Title FROM Cartoon ORDER BY title", "source_tables": ["cartoon"]}}
{"sample_id": 587, "db_id": "tvshow", "final": {"question": "List all cartoon directed by \"Ben Jones\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';", "source_tables": ["cartoon"]}}
{"sample_id": 588, "db_id": "tvshow", "final": {"question": "What are the names of all cartoons directed by Ben Jones?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';", "source_tables": ["cartoon"]}}
{"sample_id": 589, "db_id": "tvshow", "final": {"question": "How many cartoons were written by \"Joseph Kuhr\"?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "source_tables": ["cartoon"]}}
{"sample_id": 590, "db_id": "tvshow", "final": {"question": "What is the number of cartoones written by Joseph Kuhr?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "source_tables": ["cartoon"]}}
{"sample_id": 591, "db_id": "tvshow", "final": {"question": "list all cartoon titles and their directors ordered by their air date", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "source_tables": ["cartoon"]}}
{"sample_id": 592, "db_id": "tvshow", "final": {"question": "What is the name and directors of all the cartoons that are ordered by air date?", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "source_tables": ["cartoon"]}}
{"sample_id": 593, "db_id": "tvshow", "final": {"question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "source_tables": ["cartoon"]}}
{"sample_id": 594, "db_id": "tvshow", "final": {"question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "source_tables": ["cartoon"]}}
{"sample_id": 595, "db_id": "tvshow", "final": {"question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["tv_channel"]}}
{"sample_id": 596, "db_id": "tvshow", "final": {"question": "What is the country with the most number of TV Channels and how many does it have?", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["tv_channel"]}}
{"sample_id": 597, "db_id": "tvshow", "final": {"question": "List the number of different series names and contents in the TV Channel table.", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "source_tables": ["tv_channel"]}}
{"sample_id": 598, "db_id": "tvshow", "final": {"question": "How many different series and contents are listed in the TV Channel table?", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "source_tables": ["tv_channel"]}}
{"sample_id": 599, "db_id": "tvshow", "final": {"question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"]}}
{"sample_id": 600, "db_id": "tvshow", "final": {"question": "What is the content of the series Sky Radio?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"]}}
{"sample_id": 601, "db_id": "tvshow", "final": {"question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"]}}
{"sample_id": 602, "db_id": "tvshow", "final": {"question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"]}}
{"sample_id": 603, "db_id": "tvshow", "final": {"question": "How many TV Channel using language English?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';", "source_tables": ["tv_channel"]}}
{"sample_id": 604, "db_id": "tvshow", "final": {"question": "How many TV Channels use the English language?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';", "source_tables": ["tv_channel"]}}
{"sample_id": 605, "db_id": "tvshow", "final": {"question": "List the language used least number of TV Channel. List language and number of TV Channel.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["tv_channel"]}}
{"sample_id": 606, "db_id": "tvshow", "final": {"question": "What are the languages used by the least number of TV Channels and how many channels use it?", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["tv_channel"]}}
{"sample_id": 607, "db_id": "tvshow", "final": {"question": "List each language and the number of TV Channels using it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "source_tables": ["tv_channel"]}}
{"sample_id": 608, "db_id": "tvshow", "final": {"question": "For each language, list the number of TV Channels that use it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "source_tables": ["tv_channel"]}}
{"sample_id": 609, "db_id": "tvshow", "final": {"question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 610, "db_id": "tvshow", "final": {"question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 611, "db_id": "tvshow", "final": {"question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 612, "db_id": "tvshow", "final": {"question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 613, "db_id": "tvshow", "final": {"question": "List the Episode of all TV series sorted by rating.", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "source_tables": ["tv_series"]}}
{"sample_id": 614, "db_id": "tvshow", "final": {"question": "What are all of the episodes ordered by ratings?", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "source_tables": ["tv_series"]}}
{"sample_id": 615, "db_id": "tvshow", "final": {"question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "source_tables": ["tv_series"]}}
{"sample_id": 616, "db_id": "tvshow", "final": {"question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "source_tables": ["tv_series"]}}
{"sample_id": 617, "db_id": "tvshow", "final": {"question": "What is minimum and maximum share of TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "source_tables": ["tv_series"]}}
{"sample_id": 618, "db_id": "tvshow", "final": {"question": "What is the maximum and minimum share for the TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "source_tables": ["tv_series"]}}
{"sample_id": 619, "db_id": "tvshow", "final": {"question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"]}}
{"sample_id": 620, "db_id": "tvshow", "final": {"question": "When did the episode \"A Love of a Lifetime\" air?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"]}}
{"sample_id": 621, "db_id": "tvshow", "final": {"question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"]}}
{"sample_id": 622, "db_id": "tvshow", "final": {"question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"]}}
{"sample_id": 623, "db_id": "tvshow", "final": {"question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';", "source_tables": ["tv_channel", "tv_series"]}}
{"sample_id": 624, "db_id": "tvshow", "final": {"question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';", "source_tables": ["tv_channel", "tv_series"]}}
{"sample_id": 625, "db_id": "tvshow", "final": {"question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "tv_series"]}}
{"sample_id": 626, "db_id": "tvshow", "final": {"question": "What is the episode for the TV series named \"Sky Radio\"?", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "tv_series"]}}
{"sample_id": 627, "db_id": "tvshow", "final": {"question": "Find the number of cartoons directed by each of the listed directors.", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "source_tables": ["cartoon"]}}
{"sample_id": 628, "db_id": "tvshow", "final": {"question": "How many cartoons did each director create?", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "source_tables": ["cartoon"]}}
{"sample_id": 629, "db_id": "tvshow", "final": {"question": "Find the production code and channel of the most recently aired cartoon .", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "source_tables": ["cartoon"]}}
{"sample_id": 630, "db_id": "tvshow", "final": {"question": "What is the produdction code and channel of the most recent cartoon ?", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "source_tables": ["cartoon"]}}
{"sample_id": 631, "db_id": "tvshow", "final": {"question": "Find the package choice and series name of the TV channel that has high definition TV.", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'yes'", "source_tables": ["tv_channel"]}}
{"sample_id": 632, "db_id": "tvshow", "final": {"question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'yes'", "source_tables": ["tv_channel"]}}
{"sample_id": 633, "db_id": "tvshow", "final": {"question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 634, "db_id": "tvshow", "final": {"question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 635, "db_id": "tvshow", "final": {"question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 636, "db_id": "tvshow", "final": {"question": "What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 637, "db_id": "tvshow", "final": {"question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 638, "db_id": "tvshow", "final": {"question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 639, "db_id": "tvshow", "final": {"question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "source_tables": ["tv_channel"]}}
{"sample_id": 640, "db_id": "tvshow", "final": {"question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "source_tables": ["tv_channel"]}}
{"sample_id": 641, "db_id": "tvshow", "final": {"question": "find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "source_tables": ["tv_channel"]}}
{"sample_id": 642, "db_id": "tvshow", "final": {"question": "What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "source_tables": ["tv_channel"]}}
{"sample_id": 643, "db_id": "tvshow", "final": {"question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 644, "db_id": "tvshow", "final": {"question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 645, "db_id": "tvshow", "final": {"question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 646, "db_id": "tvshow", "final": {"question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "source_tables": ["tv_channel", "cartoon"]}}
{"sample_id": 647, "db_id": "poker_player", "final": {"question": "How many poker players are there?", "sql": "SELECT count(*) FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 648, "db_id": "poker_player", "final": {"question": "Count the number of poker players.", "sql": "SELECT count(*) FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 649, "db_id": "poker_player", "final": {"question": "List the earnings of poker players in descending order.", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "source_tables": ["poker_player"]}}
{"sample_id": 650, "db_id": "poker_player", "final": {"question": "What are the earnings of poker players, ordered descending by value?", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "source_tables": ["poker_player"]}}
{"sample_id": 651, "db_id": "poker_player", "final": {"question": "List the final tables made and the best finishes of poker players.", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 652, "db_id": "poker_player", "final": {"question": "What are the final tables made and best finishes for all poker players?", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 653, "db_id": "poker_player", "final": {"question": "What is the average earnings of poker players?", "sql": "SELECT avg(Earnings) FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 654, "db_id": "poker_player", "final": {"question": "Return the average earnings across all poker players.", "sql": "SELECT avg(Earnings) FROM poker_player", "source_tables": ["poker_player"]}}
{"sample_id": 655, "db_id": "poker_player", "final": {"question": "What is the money rank of the poker player with the highest earnings?", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "source_tables": ["poker_player"]}}
{"sample_id": 656, "db_id": "poker_player", "final": {"question": "Return the money rank of the player with the greatest earnings.", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "source_tables": ["poker_player"]}}
{"sample_id": 657, "db_id": "poker_player", "final": {"question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "source_tables": ["poker_player"]}}
{"sample_id": 658, "db_id": "poker_player", "final": {"question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "source_tables": ["poker_player"]}}
{"sample_id": 659, "db_id": "poker_player", "final": {"question": "What are the names of poker players?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["poker_player", "people"]}}
{"sample_id": 660, "db_id": "poker_player", "final": {"question": "Return the names of all the poker players.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "source_tables": ["poker_player", "people"]}}
{"sample_id": 661, "db_id": "poker_player", "final": {"question": "What are the names of poker players whose earnings is higher than 300000?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "source_tables": ["poker_player", "people"]}}
{"sample_id": 662, "db_id": "poker_player", "final": {"question": "Give the names of poker players who have earnings above 300000.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "source_tables": ["poker_player", "people"]}}
{"sample_id": 663, "db_id": "poker_player", "final": {"question": "List the names of poker players ordered by the final tables made in ascending order.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "source_tables": ["poker_player", "people"]}}
{"sample_id": 664, "db_id": "poker_player", "final": {"question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "source_tables": ["poker_player", "people"]}}
{"sample_id": 665, "db_id": "poker_player", "final": {"question": "What is the birth date of the poker player with the lowest earnings?", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "source_tables": ["poker_player", "people"]}}
{"sample_id": 666, "db_id": "poker_player", "final": {"question": "Return the birth date of the poker player with the lowest earnings.", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "source_tables": ["poker_player", "people"]}}
{"sample_id": 667, "db_id": "poker_player", "final": {"question": "What is the money rank of the tallest poker player?", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "source_tables": ["poker_player", "people"]}}
{"sample_id": 668, "db_id": "poker_player", "final": {"question": "Return the money rank of the poker player with the greatest height.", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "source_tables": ["poker_player", "people"]}}
{"sample_id": 669, "db_id": "poker_player", "final": {"question": "What is the average earnings of poker players with height higher than 200?", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "source_tables": ["poker_player", "people"]}}
{"sample_id": 670, "db_id": "poker_player", "final": {"question": "Give average earnings of poker players who are taller than 200.", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "source_tables": ["poker_player", "people"]}}
{"sample_id": 671, "db_id": "poker_player", "final": {"question": "What are the names of poker players in descending order of earnings?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "source_tables": ["poker_player", "people"]}}
{"sample_id": 672, "db_id": "poker_player", "final": {"question": "Return the names of poker players sorted by their earnings descending.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "source_tables": ["poker_player", "people"]}}
{"sample_id": 673, "db_id": "poker_player", "final": {"question": "What are different nationalities of people and the corresponding number of people from each nation?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "source_tables": ["people"]}}
{"sample_id": 674, "db_id": "poker_player", "final": {"question": "How many people are there of each nationality?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "source_tables": ["people"]}}
{"sample_id": 675, "db_id": "poker_player", "final": {"question": "What is the most common nationality of people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 676, "db_id": "poker_player", "final": {"question": "Give the nationality that is most common across all people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["people"]}}
{"sample_id": 677, "db_id": "poker_player", "final": {"question": "What are the nationalities that are shared by at least two people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "source_tables": ["people"]}}
{"sample_id": 678, "db_id": "poker_player", "final": {"question": "Return the nationalities for which there are two or more people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "source_tables": ["people"]}}
{"sample_id": 679, "db_id": "poker_player", "final": {"question": "List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 680, "db_id": "poker_player", "final": {"question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "source_tables": ["people"]}}
{"sample_id": 681, "db_id": "poker_player", "final": {"question": "Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "source_tables": ["people"]}}
{"sample_id": 682, "db_id": "poker_player", "final": {"question": "What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "source_tables": ["people"]}}
{"sample_id": 683, "db_id": "poker_player", "final": {"question": "List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "source_tables": ["poker_player", "people"]}}
{"sample_id": 684, "db_id": "poker_player", "final": {"question": "What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "source_tables": ["poker_player", "people"]}}
{"sample_id": 685, "db_id": "poker_player", "final": {"question": "How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people", "source_tables": ["people"]}}
{"sample_id": 686, "db_id": "poker_player", "final": {"question": "Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people", "source_tables": ["people"]}}
{"sample_id": 687, "db_id": "voter_1", "final": {"question": "How many states are there?", "sql": "SELECT count(*) FROM area_code_state", "source_tables": ["area_code_state"]}}
{"sample_id": 688, "db_id": "voter_1", "final": {"question": "List the contestant numbers and names, ordered by contestant name descending.", "sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "source_tables": ["contestants"]}}
{"sample_id": 689, "db_id": "voter_1", "final": {"question": "List the vote ids, phone numbers and states of all votes.", "sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "source_tables": ["votes"]}}
{"sample_id": 690, "db_id": "voter_1", "final": {"question": "What are the maximum and minimum values of area codes?", "sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "source_tables": ["area_code_state"]}}
{"sample_id": 691, "db_id": "voter_1", "final": {"question": "What is last date created of votes from the state 'CA'?", "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "source_tables": ["votes"]}}
{"sample_id": 692, "db_id": "voter_1", "final": {"question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "source_tables": ["contestants"]}}
{"sample_id": 693, "db_id": "voter_1", "final": {"question": "What are the distinct states and create time of all votes?", "sql": "SELECT DISTINCT state ,  created FROM votes", "source_tables": ["votes"]}}
{"sample_id": 694, "db_id": "voter_1", "final": {"question": "What are the contestant numbers and names of the contestants who had at least two votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "source_tables": ["votes", "contestants"]}}
{"sample_id": 695, "db_id": "voter_1", "final": {"question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "source_tables": ["votes", "contestants"]}}
{"sample_id": 696, "db_id": "voter_1", "final": {"question": "What are the number of votes from state 'NY' or 'CA'?", "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "source_tables": ["votes"]}}
{"sample_id": 697, "db_id": "voter_1", "final": {"question": "How many contestants did not get voted?", "sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "source_tables": ["votes", "contestants"]}}
{"sample_id": 698, "db_id": "voter_1", "final": {"question": "What is the area code in which the most voters voted?", "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "source_tables": ["votes", "area_code_state"]}}
{"sample_id": 699, "db_id": "voter_1", "final": {"question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "source_tables": ["votes", "contestants"]}}
{"sample_id": 700, "db_id": "voter_1", "final": {"question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "source_tables": ["votes", "area_code_state", "contestants"]}}
{"sample_id": 701, "db_id": "voter_1", "final": {"question": "Return the names of the contestants whose names contain the substring 'Al' .", "sql": "select contestant_name from contestants where contestant_name like '%al%'", "source_tables": ["contestants"]}}
{"sample_id": 702, "db_id": "world_1", "final": {"question": "What are the names of all the countries that became independent after 1950?", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "source_tables": ["country"]}}
{"sample_id": 703, "db_id": "world_1", "final": {"question": "Give the names of the nations that were founded after 1950.", "sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "source_tables": ["country"]}}
{"sample_id": 704, "db_id": "world_1", "final": {"question": "How many countries have a republic as their form of government?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic'", "source_tables": ["country"]}}
{"sample_id": 705, "db_id": "world_1", "final": {"question": "How many countries have governments that are republics?", "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic'", "source_tables": ["country"]}}
{"sample_id": 706, "db_id": "world_1", "final": {"question": "What is the total surface area of the countries in the Caribbean region?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean'", "source_tables": ["country"]}}
{"sample_id": 707, "db_id": "world_1", "final": {"question": "How much surface area do the countires in the Carribean cover together?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean'", "source_tables": ["country"]}}
{"sample_id": 708, "db_id": "world_1", "final": {"question": "Which continent is Anguilla in?", "sql": "SELECT Continent FROM country WHERE Name  =  'Anguilla'", "source_tables": ["country"]}}
{"sample_id": 709, "db_id": "world_1", "final": {"question": "What is the continent name which Anguilla belongs to?", "sql": "SELECT Continent FROM country WHERE Name  =  'Anguilla'", "source_tables": ["country"]}}
{"sample_id": 710, "db_id": "world_1", "final": {"question": "Which region is the city Kabul located in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'", "source_tables": ["country", "city"]}}
{"sample_id": 711, "db_id": "world_1", "final": {"question": "What region is Kabul in?", "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'", "source_tables": ["country", "city"]}}
{"sample_id": 712, "db_id": "world_1", "final": {"question": "Which language is the most popular in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 713, "db_id": "world_1", "final": {"question": "What language is predominantly spoken in Aruba?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 714, "db_id": "world_1", "final": {"question": "What are the population and life expectancies in Brazil?", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'", "source_tables": ["country"]}}
{"sample_id": 715, "db_id": "world_1", "final": {"question": "Give me Brazil\u2019s population and life expectancies.", "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'", "source_tables": ["country"]}}
{"sample_id": 716, "db_id": "world_1", "final": {"question": "What are the region and population of Angola?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  'Angola'", "source_tables": ["country"]}}
{"sample_id": 717, "db_id": "world_1", "final": {"question": "What region does Angola belong to and what is its population?", "sql": "SELECT Population ,  Region FROM country WHERE Name  =  'Angola'", "source_tables": ["country"]}}
{"sample_id": 718, "db_id": "world_1", "final": {"question": "What is the average expected life expectancy for countries in the region of Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'", "source_tables": ["country"]}}
{"sample_id": 719, "db_id": "world_1", "final": {"question": "How long is the people\u2019s average life expectancy in Central Africa?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'", "source_tables": ["country"]}}
{"sample_id": 720, "db_id": "world_1", "final": {"question": "What is the name of country that has the shortest life expectancy in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 721, "db_id": "world_1", "final": {"question": "Give the name of the country in Asia with the lowest life expectancy.", "sql": "SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 722, "db_id": "world_1", "final": {"question": "What is the total population and maximum GNP in Asia?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'", "source_tables": ["country"]}}
{"sample_id": 723, "db_id": "world_1", "final": {"question": "How many people live in Asia, and what is the largest GNP among them?", "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'", "source_tables": ["country"]}}
{"sample_id": 724, "db_id": "world_1", "final": {"question": "What is the average life expectancy in African countries that are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'", "source_tables": ["country"]}}
{"sample_id": 725, "db_id": "world_1", "final": {"question": "Give the average life expectancy for countries in Africa which are republics?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'", "source_tables": ["country"]}}
{"sample_id": 726, "db_id": "world_1", "final": {"question": "What is the total surface area of the continents Asia and Europe?", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe'", "source_tables": ["country"]}}
{"sample_id": 727, "db_id": "world_1", "final": {"question": "Give the total surface area covered by countries in Asia or Europe.", "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe'", "source_tables": ["country"]}}
{"sample_id": 728, "db_id": "world_1", "final": {"question": "How many people live in Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  'Gelderland'", "source_tables": ["city"]}}
{"sample_id": 729, "db_id": "world_1", "final": {"question": "What is the total population of Gelderland district?", "sql": "SELECT sum(Population) FROM city WHERE District  =  'Gelderland'", "source_tables": ["city"]}}
{"sample_id": 730, "db_id": "world_1", "final": {"question": "What is the average GNP and total population in all nations whose government is US territory?", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  'US Territory'", "source_tables": ["country"]}}
{"sample_id": 731, "db_id": "world_1", "final": {"question": "Give the mean GNP and total population of nations which are considered US territory.", "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  'US Territory'", "source_tables": ["country"]}}
{"sample_id": 732, "db_id": "world_1", "final": {"question": "How many unique languages are spoken in the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "source_tables": ["countrylanguage"]}}
{"sample_id": 733, "db_id": "world_1", "final": {"question": "What is the number of distinct languages used around the world?", "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "source_tables": ["countrylanguage"]}}
{"sample_id": 734, "db_id": "world_1", "final": {"question": "How many type of governments are in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa'", "source_tables": ["country"]}}
{"sample_id": 735, "db_id": "world_1", "final": {"question": "How many different forms of governments are there in Africa?", "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa'", "source_tables": ["country"]}}
{"sample_id": 736, "db_id": "world_1", "final": {"question": "What is the total number of languages used in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 737, "db_id": "world_1", "final": {"question": "How many languages are spoken in Aruba?", "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 738, "db_id": "world_1", "final": {"question": "How many official languages does Afghanistan have?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Afghanistan' AND IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 739, "db_id": "world_1", "final": {"question": "How many official languages are spoken in Afghanistan?", "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Afghanistan' AND IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 740, "db_id": "world_1", "final": {"question": "What is name of the country that speaks the largest number of languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 741, "db_id": "world_1", "final": {"question": "Give the name of the nation that uses the greatest amount of languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 742, "db_id": "world_1", "final": {"question": "Which continent has the most diverse languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 743, "db_id": "world_1", "final": {"question": "Which continent speaks the most languages?", "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 744, "db_id": "world_1", "final": {"question": "How many countries speak both English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch')", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 745, "db_id": "world_1", "final": {"question": "What is the number of nations that use English and Dutch?", "sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch')", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 746, "db_id": "world_1", "final": {"question": "What are the names of nations speak both English and French?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 747, "db_id": "world_1", "final": {"question": "Give the names of nations that speak both English and French.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 748, "db_id": "world_1", "final": {"question": "What are the names of nations where both English and French are official languages?", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 749, "db_id": "world_1", "final": {"question": "Give the names of countries with English and French as official languages.", "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 750, "db_id": "world_1", "final": {"question": "What is the number of distinct continents where Chinese is spoken?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 751, "db_id": "world_1", "final": {"question": "How many continents speak Chinese?", "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 752, "db_id": "world_1", "final": {"question": "What are the regions that use English or Dutch?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 753, "db_id": "world_1", "final": {"question": "Which regions speak Dutch or English?", "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 754, "db_id": "world_1", "final": {"question": "What are the countries where either English or Dutch is the official language ?", "sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'english' and isofficial  =  't' union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'dutch' and isofficial  =  't'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 755, "db_id": "world_1", "final": {"question": "Which countries have either English or Dutch as an official language?", "sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND IsOfficial  =  'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch' AND IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 756, "db_id": "world_1", "final": {"question": "Which language is the most popular on the Asian continent?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  'Asia' GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 757, "db_id": "world_1", "final": {"question": "What is the language that is used by the largest number of Asian nations?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  'Asia' GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 758, "db_id": "world_1", "final": {"question": "Which languages are spoken by only one country in republic governments?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 759, "db_id": "world_1", "final": {"question": "What languages are only used by a single country with a republic government?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 760, "db_id": "world_1", "final": {"question": "Find the city with the largest population that uses English.", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["city", "countrylanguage"]}}
{"sample_id": 761, "db_id": "world_1", "final": {"question": "What is the most populace city that speaks English?", "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["city", "countrylanguage"]}}
{"sample_id": 762, "db_id": "world_1", "final": {"question": "Find the name, population and expected life length of asian country with the largest area?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 763, "db_id": "world_1", "final": {"question": "What are the name, population, and life expectancy of the largest Asian country by land?", "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 764, "db_id": "world_1", "final": {"question": "What is average life expectancy in the countries where English is not the official language?", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T')", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 765, "db_id": "world_1", "final": {"question": "Give the mean life expectancy of countries in which English is not the official language.", "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T')", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 766, "db_id": "world_1", "final": {"question": "What is the total number of people living in the nations that do not use English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English')", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 767, "db_id": "world_1", "final": {"question": "How many people live in countries that do not speak English?", "sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English')", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 768, "db_id": "world_1", "final": {"question": "What is the official language spoken in the country whose head of state is Beatrix?", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 769, "db_id": "world_1", "final": {"question": "What is the official language used in the country the name of whose head of state is Beatrix.", "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 770, "db_id": "world_1", "final": {"question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 771, "db_id": "world_1", "final": {"question": "For the countries founded before 1930, what is the total number of distinct official languages?", "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 772, "db_id": "world_1", "final": {"question": "What are the countries that have greater surface area than any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "source_tables": ["country"]}}
{"sample_id": 773, "db_id": "world_1", "final": {"question": "Which countries have greater area than that of any country in Europe?", "sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "source_tables": ["country"]}}
{"sample_id": 774, "db_id": "world_1", "final": {"question": "What are the African countries that have a  population less than any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  'Asia')", "source_tables": ["country"]}}
{"sample_id": 775, "db_id": "world_1", "final": {"question": "Which African countries have a smaller population than that of any country in Asia?", "sql": "SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  'Asia')", "source_tables": ["country"]}}
{"sample_id": 776, "db_id": "world_1", "final": {"question": "Which Asian countries have a population that is larger than any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  'Africa')", "source_tables": ["country"]}}
{"sample_id": 777, "db_id": "world_1", "final": {"question": "What are the Asian countries which have a population larger than that of any country in Africa?", "sql": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  'Africa')", "source_tables": ["country"]}}
{"sample_id": 778, "db_id": "world_1", "final": {"question": "What are the country codes for countries that do not speak English?", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "source_tables": ["countrylanguage"]}}
{"sample_id": 779, "db_id": "world_1", "final": {"question": "Return the country codes for countries that do not speak English.", "sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "source_tables": ["countrylanguage"]}}
{"sample_id": 780, "db_id": "world_1", "final": {"question": "What are the country codes of countries where people use languages other than English?", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'", "source_tables": ["countrylanguage"]}}
{"sample_id": 781, "db_id": "world_1", "final": {"question": "Give the country codes for countries in which people speak langauges that are not English.", "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'", "source_tables": ["countrylanguage"]}}
{"sample_id": 782, "db_id": "world_1", "final": {"question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "sql": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 783, "db_id": "world_1", "final": {"question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "sql": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 784, "db_id": "world_1", "final": {"question": "Which cities are in European countries where English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "source_tables": ["country", "city", "countrylanguage"]}}
{"sample_id": 785, "db_id": "world_1", "final": {"question": "What are the names of cities in Europe for which English is not the official language?", "sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "source_tables": ["country", "city", "countrylanguage"]}}
{"sample_id": 786, "db_id": "world_1", "final": {"question": "Which unique cities are in Asian countries where Chinese is the official language ?", "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  'asia'", "source_tables": ["country", "city", "countrylanguage"]}}
{"sample_id": 787, "db_id": "world_1", "final": {"question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  'Asia'", "source_tables": ["country", "city", "countrylanguage"]}}
{"sample_id": 788, "db_id": "world_1", "final": {"question": "What are the name, independence year, and surface area of the country with the smallest population?", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 789, "db_id": "world_1", "final": {"question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 790, "db_id": "world_1", "final": {"question": "What are the population, name and leader of the country with the largest area?", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 791, "db_id": "world_1", "final": {"question": "Give the name, population, and head of state for the country that has the largest area.", "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}}
{"sample_id": 792, "db_id": "world_1", "final": {"question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 793, "db_id": "world_1", "final": {"question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "source_tables": ["country", "countrylanguage"]}}
{"sample_id": 794, "db_id": "world_1", "final": {"question": "Find the number of cities in each district whose population is greater than the average population of cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "source_tables": ["city"]}}
{"sample_id": 795, "db_id": "world_1", "final": {"question": "How many cities in each district have a population that is above the average population across all cities?", "sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "source_tables": ["city"]}}
{"sample_id": 796, "db_id": "world_1", "final": {"question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "source_tables": ["country"]}}
{"sample_id": 797, "db_id": "world_1", "final": {"question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "source_tables": ["country"]}}
{"sample_id": 798, "db_id": "world_1", "final": {"question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}}
{"sample_id": 799, "db_id": "world_1", "final": {"question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "source_tables": ["country"]}}
{"sample_id": 800, "db_id": "world_1", "final": {"question": "What are the names and areas of countries with the top 5 largest area?", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}}
{"sample_id": 801, "db_id": "world_1", "final": {"question": "Return the names and surface areas of the 5 largest countries.", "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "source_tables": ["country"]}}
{"sample_id": 802, "db_id": "world_1", "final": {"question": "What are names of countries with the top 3 largest population?", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 803, "db_id": "world_1", "final": {"question": "Return the names of the 3 most populated countries.", "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 804, "db_id": "world_1", "final": {"question": "What are the names of the nations with the 3 lowest populations?", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 805, "db_id": "world_1", "final": {"question": "Return the names of the 3 countries with the fewest people.", "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "source_tables": ["country"]}}
{"sample_id": 806, "db_id": "world_1", "final": {"question": "how many countries are in Asia?", "sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "source_tables": ["country"]}}
{"sample_id": 807, "db_id": "world_1", "final": {"question": "Count the number of countries in Asia.", "sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "source_tables": ["country"]}}
{"sample_id": 808, "db_id": "world_1", "final": {"question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "source_tables": ["country"]}}
{"sample_id": 809, "db_id": "world_1", "final": {"question": "Give the names of countries that are in Europe and have a population equal to 80000.", "sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "source_tables": ["country"]}}
{"sample_id": 810, "db_id": "world_1", "final": {"question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000", "source_tables": ["country"]}}
{"sample_id": 811, "db_id": "world_1", "final": {"question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000", "source_tables": ["country"]}}
{"sample_id": 812, "db_id": "world_1", "final": {"question": "What are the cities whose population is between 160000 and 900000?", "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "source_tables": ["city"]}}
{"sample_id": 813, "db_id": "world_1", "final": {"question": "Return the names of cities that have a population between 160000 and 900000 .", "sql": "select name from city where population between 160000 and 900000", "source_tables": ["city"]}}
{"sample_id": 814, "db_id": "world_1", "final": {"question": "Which language is spoken by the largest number of countries?", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["countrylanguage"]}}
{"sample_id": 815, "db_id": "world_1", "final": {"question": "Give the language that is spoken in the most countries.", "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["countrylanguage"]}}
{"sample_id": 816, "db_id": "world_1", "final": {"question": "What is the language spoken by the largest percentage of people in each country?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 817, "db_id": "world_1", "final": {"question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 818, "db_id": "world_1", "final": {"question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 819, "db_id": "world_1", "final": {"question": "Count the number of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 820, "db_id": "world_1", "final": {"question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 821, "db_id": "world_1", "final": {"question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "source_tables": ["countrylanguage"]}}
{"sample_id": 822, "db_id": "orchestra", "final": {"question": "How many conductors are there?", "sql": "SELECT count(*) FROM conductor", "source_tables": ["conductor"]}}
{"sample_id": 823, "db_id": "orchestra", "final": {"question": "Count the number of conductors.", "sql": "SELECT count(*) FROM conductor", "source_tables": ["conductor"]}}
{"sample_id": 824, "db_id": "orchestra", "final": {"question": "List the names of conductors in ascending order of age.", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "source_tables": ["conductor"]}}
{"sample_id": 825, "db_id": "orchestra", "final": {"question": "What are the names of conductors, ordered by age?", "sql": "SELECT Name FROM conductor ORDER BY Age ASC", "source_tables": ["conductor"]}}
{"sample_id": 826, "db_id": "orchestra", "final": {"question": "What are the names of conductors whose nationalities are not \"USA\"?", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "source_tables": ["conductor"]}}
{"sample_id": 827, "db_id": "orchestra", "final": {"question": "Return the names of conductors that do not have the nationality \"USA\".", "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "source_tables": ["conductor"]}}
{"sample_id": 828, "db_id": "orchestra", "final": {"question": "What are the record companies of orchestras in descending order of years in which they were founded?", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "source_tables": ["orchestra"]}}
{"sample_id": 829, "db_id": "orchestra", "final": {"question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "source_tables": ["orchestra"]}}
{"sample_id": 830, "db_id": "orchestra", "final": {"question": "What is the average attendance of shows?", "sql": "SELECT avg(Attendance) FROM SHOW", "source_tables": ["show"]}}
{"sample_id": 831, "db_id": "orchestra", "final": {"question": "Return the average attendance across all shows.", "sql": "SELECT avg(Attendance) FROM SHOW", "source_tables": ["show"]}}
{"sample_id": 832, "db_id": "orchestra", "final": {"question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'", "source_tables": ["performance"]}}
{"sample_id": 833, "db_id": "orchestra", "final": {"question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'", "source_tables": ["performance"]}}
{"sample_id": 834, "db_id": "orchestra", "final": {"question": "How many different nationalities do conductors have?", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "source_tables": ["conductor"]}}
{"sample_id": 835, "db_id": "orchestra", "final": {"question": "Count the number of different nationalities of conductors.", "sql": "SELECT count(DISTINCT Nationality) FROM conductor", "source_tables": ["conductor"]}}
{"sample_id": 836, "db_id": "orchestra", "final": {"question": "List names of conductors in descending order of years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "source_tables": ["conductor"]}}
{"sample_id": 837, "db_id": "orchestra", "final": {"question": "What are the names of conductors, sorted descending by the number of years they have worked?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "source_tables": ["conductor"]}}
{"sample_id": 838, "db_id": "orchestra", "final": {"question": "List the name of the conductor with the most years of work.", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "source_tables": ["conductor"]}}
{"sample_id": 839, "db_id": "orchestra", "final": {"question": "What is the name of the conductor who has worked the greatest number of years?", "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "source_tables": ["conductor"]}}
{"sample_id": 840, "db_id": "orchestra", "final": {"question": "Show the names of conductors and the orchestras they have conducted.", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "source_tables": ["conductor", "orchestra"]}}
{"sample_id": 841, "db_id": "orchestra", "final": {"question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "source_tables": ["conductor", "orchestra"]}}
{"sample_id": 842, "db_id": "orchestra", "final": {"question": "Show the names of conductors that have conducted more than one orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "source_tables": ["conductor", "orchestra"]}}
{"sample_id": 843, "db_id": "orchestra", "final": {"question": "What are the names of conductors who have conducted at more than one orchestra?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "source_tables": ["conductor", "orchestra"]}}
{"sample_id": 844, "db_id": "orchestra", "final": {"question": "Show the name of the conductor that has conducted the most number of orchestras.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["conductor", "orchestra"]}}
{"sample_id": 845, "db_id": "orchestra", "final": {"question": "What is the name of the conductor who has conducted the most orchestras?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["conductor", "orchestra"]}}
{"sample_id": 846, "db_id": "orchestra", "final": {"question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "source_tables": ["conductor", "orchestra"]}}
{"sample_id": 847, "db_id": "orchestra", "final": {"question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "source_tables": ["conductor", "orchestra"]}}
{"sample_id": 848, "db_id": "orchestra", "final": {"question": "Please show the different record companies and the corresponding number of orchestras.", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "source_tables": ["orchestra"]}}
{"sample_id": 849, "db_id": "orchestra", "final": {"question": "How many orchestras does each record company manage?", "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "source_tables": ["orchestra"]}}
{"sample_id": 850, "db_id": "orchestra", "final": {"question": "Please show the record formats of orchestras in ascending order of count.", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "source_tables": ["orchestra"]}}
{"sample_id": 851, "db_id": "orchestra", "final": {"question": "What are the major record formats of orchestras, sorted by their frequency?", "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "source_tables": ["orchestra"]}}
{"sample_id": 852, "db_id": "orchestra", "final": {"question": "List the record company shared by the most number of orchestras.", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["orchestra"]}}
{"sample_id": 853, "db_id": "orchestra", "final": {"question": "What is the record company used by the greatest number of orchestras?", "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["orchestra"]}}
{"sample_id": 854, "db_id": "orchestra", "final": {"question": "List the names of orchestras that have no performance.", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["performance", "orchestra"]}}
{"sample_id": 855, "db_id": "orchestra", "final": {"question": "What are the orchestras that do not have any performances?", "sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "source_tables": ["performance", "orchestra"]}}
{"sample_id": 856, "db_id": "orchestra", "final": {"question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}}
{"sample_id": 857, "db_id": "orchestra", "final": {"question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "source_tables": ["orchestra"]}}
{"sample_id": 858, "db_id": "orchestra", "final": {"question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'", "source_tables": ["orchestra"]}}
{"sample_id": 859, "db_id": "orchestra", "final": {"question": "Count the number of orchestras that have CD or DVD as their record format.", "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'", "source_tables": ["orchestra"]}}
{"sample_id": 860, "db_id": "orchestra", "final": {"question": "Show the years in which orchestras that have given more than one performance are founded.", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "source_tables": ["performance", "orchestra"]}}
{"sample_id": 861, "db_id": "orchestra", "final": {"question": "What are years of founding for orchestras that have had more than a single performance?", "sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "source_tables": ["performance", "orchestra"]}}
{"sample_id": 862, "db_id": "network_1", "final": {"question": "How many high schoolers are there?", "sql": "SELECT count(*) FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 863, "db_id": "network_1", "final": {"question": "Count the number of high schoolers.", "sql": "SELECT count(*) FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 864, "db_id": "network_1", "final": {"question": "Show the names and grades of each high schooler.", "sql": "SELECT name ,  grade FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 865, "db_id": "network_1", "final": {"question": "What are the names and grades for each high schooler?", "sql": "SELECT name ,  grade FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 866, "db_id": "network_1", "final": {"question": "Show all the grades of the high schoolers.", "sql": "SELECT grade FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 867, "db_id": "network_1", "final": {"question": "What is the grade of each high schooler?", "sql": "SELECT grade FROM Highschooler", "source_tables": ["highschooler"]}}
{"sample_id": 868, "db_id": "network_1", "final": {"question": "What grade is Kyle in?", "sql": "SELECT grade FROM Highschooler WHERE name  =  'Kyle'", "source_tables": ["highschooler"]}}
{"sample_id": 869, "db_id": "network_1", "final": {"question": "Return the grade for the high schooler named Kyle.", "sql": "SELECT grade FROM Highschooler WHERE name  =  'Kyle'", "source_tables": ["highschooler"]}}
{"sample_id": 870, "db_id": "network_1", "final": {"question": "Show the names of all high schoolers in grade 10.", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "source_tables": ["highschooler"]}}
{"sample_id": 871, "db_id": "network_1", "final": {"question": "What are the names of all high schoolers in grade 10?", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "source_tables": ["highschooler"]}}
{"sample_id": 872, "db_id": "network_1", "final": {"question": "Show the ID of the high schooler named Kyle.", "sql": "SELECT ID FROM Highschooler WHERE name  =  'Kyle'", "source_tables": ["highschooler"]}}
{"sample_id": 873, "db_id": "network_1", "final": {"question": "What is Kyle's id?", "sql": "SELECT ID FROM Highschooler WHERE name  =  'Kyle'", "source_tables": ["highschooler"]}}
{"sample_id": 874, "db_id": "network_1", "final": {"question": "How many high schoolers are there in grade 9 or 10?", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "source_tables": ["highschooler"]}}
{"sample_id": 875, "db_id": "network_1", "final": {"question": "Count the number of high schoolers in grades 9 or 10.", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "source_tables": ["highschooler"]}}
{"sample_id": 876, "db_id": "network_1", "final": {"question": "Show the number of high schoolers for each grade.", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "source_tables": ["highschooler"]}}
{"sample_id": 877, "db_id": "network_1", "final": {"question": "How many high schoolers are in each grade?", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "source_tables": ["highschooler"]}}
{"sample_id": 878, "db_id": "network_1", "final": {"question": "Which grade has the most high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler"]}}
{"sample_id": 879, "db_id": "network_1", "final": {"question": "Return the grade that has the greatest number of high schoolers.", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler"]}}
{"sample_id": 880, "db_id": "network_1", "final": {"question": "Show me all grades that have at least 4 students.", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "source_tables": ["highschooler"]}}
{"sample_id": 881, "db_id": "network_1", "final": {"question": "Which grades have 4 or more high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "source_tables": ["highschooler"]}}
{"sample_id": 882, "db_id": "network_1", "final": {"question": "Show the student IDs and numbers of friends corresponding to each.", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "source_tables": ["friend"]}}
{"sample_id": 883, "db_id": "network_1", "final": {"question": "How many friends does each student have?", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "source_tables": ["friend"]}}
{"sample_id": 884, "db_id": "network_1", "final": {"question": "Show the names of high school students and their corresponding number of friends.", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 885, "db_id": "network_1", "final": {"question": "What are the names of the high schoolers and how many friends does each have?", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 886, "db_id": "network_1", "final": {"question": "What is the name of the high schooler who has the greatest number of friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 887, "db_id": "network_1", "final": {"question": "Return the name of the high school student with the most friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 888, "db_id": "network_1", "final": {"question": "Show the names of high schoolers who have at least 3 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 889, "db_id": "network_1", "final": {"question": "What are the names of high schoolers who have 3 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 890, "db_id": "network_1", "final": {"question": "Show the names of all of the high schooler Kyle's friends.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle'", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 891, "db_id": "network_1", "final": {"question": "Return the names of friends of the high school student Kyle.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle'", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 892, "db_id": "network_1", "final": {"question": "How many friends does the high school student Kyle have?", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 893, "db_id": "network_1", "final": {"question": "Count the number of friends Kyle has.", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 894, "db_id": "network_1", "final": {"question": "Show ids of all students who do not have any friends.", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 895, "db_id": "network_1", "final": {"question": "What are the ids of high school students who do not have friends?", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 896, "db_id": "network_1", "final": {"question": "Show names of all high school students who do not have any friends.", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 897, "db_id": "network_1", "final": {"question": "What are the names of students who have no friends?", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 898, "db_id": "network_1", "final": {"question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "source_tables": ["friend", "likes"]}}
{"sample_id": 899, "db_id": "network_1", "final": {"question": "What are the ids of students who both have friends and are liked?", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "source_tables": ["friend", "likes"]}}
{"sample_id": 900, "db_id": "network_1", "final": {"question": "Show name of all students who have some friends and also are liked by someone else.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "source_tables": ["friend", "highschooler", "likes"]}}
{"sample_id": 901, "db_id": "network_1", "final": {"question": "What are the names of high schoolers who both have friends and are liked?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "source_tables": ["friend", "highschooler", "likes"]}}
{"sample_id": 902, "db_id": "network_1", "final": {"question": "Count the number of likes for each student id.", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "source_tables": ["likes"]}}
{"sample_id": 903, "db_id": "network_1", "final": {"question": "How many likes correspond to each student id?", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "source_tables": ["likes"]}}
{"sample_id": 904, "db_id": "network_1", "final": {"question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 905, "db_id": "network_1", "final": {"question": "What are the names of high schoolers who have likes, and how many likes does each have?", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 906, "db_id": "network_1", "final": {"question": "What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 907, "db_id": "network_1", "final": {"question": "Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 908, "db_id": "network_1", "final": {"question": "Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 909, "db_id": "network_1", "final": {"question": "What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 910, "db_id": "network_1", "final": {"question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 911, "db_id": "network_1", "final": {"question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 912, "db_id": "network_1", "final": {"question": "How many likes does Kyle have?", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 913, "db_id": "network_1", "final": {"question": "Return the number of likes that the high schooler named Kyle has.", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "source_tables": ["highschooler", "likes"]}}
{"sample_id": 914, "db_id": "network_1", "final": {"question": "Find the average grade of all students who have some friends.", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 915, "db_id": "network_1", "final": {"question": "What is the average grade of students who have friends?", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 916, "db_id": "network_1", "final": {"question": "Find the minimum grade of students who have no friends.", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 917, "db_id": "network_1", "final": {"question": "What is the lowest grade of students who do not have any friends?", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "source_tables": ["friend", "highschooler"]}}
{"sample_id": 918, "db_id": "dog_kennels", "final": {"question": "Which states have both owners and professionals living there?", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "source_tables": ["professionals", "owners"]}}
{"sample_id": 919, "db_id": "dog_kennels", "final": {"question": "Find the states where both owners and professionals live.", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "source_tables": ["professionals", "owners"]}}
{"sample_id": 920, "db_id": "dog_kennels", "final": {"question": "What is the average age of the dogs who have gone through any treatments?", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 921, "db_id": "dog_kennels", "final": {"question": "Find the average age of the dogs who went through treatments.", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 922, "db_id": "dog_kennels", "final": {"question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 923, "db_id": "dog_kennels", "final": {"question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 924, "db_id": "dog_kennels", "final": {"question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 925, "db_id": "dog_kennels", "final": {"question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 926, "db_id": "dog_kennels", "final": {"question": "Which first names are used for professionals or owners but are not used as dog names?", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "source_tables": ["professionals", "owners", "dogs"]}}
{"sample_id": 927, "db_id": "dog_kennels", "final": {"question": "Find the first names that are used for professionals or owners but are not used as dog names.", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "source_tables": ["professionals", "owners", "dogs"]}}
{"sample_id": 928, "db_id": "dog_kennels", "final": {"question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 929, "db_id": "dog_kennels", "final": {"question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 930, "db_id": "dog_kennels", "final": {"question": "Which owner owns the most dogs? List the owner id, first name and last name.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["owners", "dogs"]}}
{"sample_id": 931, "db_id": "dog_kennels", "final": {"question": "Return the owner id, first name and last name of the owner who has the most dogs.", "sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["owners", "dogs"]}}
{"sample_id": 932, "db_id": "dog_kennels", "final": {"question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 933, "db_id": "dog_kennels", "final": {"question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 934, "db_id": "dog_kennels", "final": {"question": "What is the name of the breed with the most dogs?", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["breeds", "dogs"]}}
{"sample_id": 935, "db_id": "dog_kennels", "final": {"question": "Which breed do the most dogs have? Give me the breed name.", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["breeds", "dogs"]}}
{"sample_id": 936, "db_id": "dog_kennels", "final": {"question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["owners", "dogs", "treatments"]}}
{"sample_id": 937, "db_id": "dog_kennels", "final": {"question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["owners", "dogs", "treatments"]}}
{"sample_id": 938, "db_id": "dog_kennels", "final": {"question": "What is the description of the treatment type that costs the least money in total?", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "source_tables": ["treatment_types", "treatments"]}}
{"sample_id": 939, "db_id": "dog_kennels", "final": {"question": "Give me the description of the treatment type whose total cost is the lowest.", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "source_tables": ["treatment_types", "treatments"]}}
{"sample_id": 940, "db_id": "dog_kennels", "final": {"question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "source_tables": ["owners", "dogs", "treatments"]}}
{"sample_id": 941, "db_id": "dog_kennels", "final": {"question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "source_tables": ["owners", "dogs", "treatments"]}}
{"sample_id": 942, "db_id": "dog_kennels", "final": {"question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 943, "db_id": "dog_kennels", "final": {"question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 944, "db_id": "dog_kennels", "final": {"question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 945, "db_id": "dog_kennels", "final": {"question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 946, "db_id": "dog_kennels", "final": {"question": "List the date of each treatment, together with the first name of the professional who operated it.", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 947, "db_id": "dog_kennels", "final": {"question": "What are the date and the operating professional's first name of each treatment?", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 948, "db_id": "dog_kennels", "final": {"question": "List the cost of each treatment and the corresponding treatment type description.", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "source_tables": ["treatments", "treatment_types"]}}
{"sample_id": 949, "db_id": "dog_kennels", "final": {"question": "What are the cost and treatment type description of each treatment?", "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "source_tables": ["treatments", "treatment_types"]}}
{"sample_id": 950, "db_id": "dog_kennels", "final": {"question": "List each owner's first name, last name, and the size of his for her dog.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["owners", "dogs"]}}
{"sample_id": 951, "db_id": "dog_kennels", "final": {"question": "What are each owner's first name, last name, and the size of their dog?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["owners", "dogs"]}}
{"sample_id": 952, "db_id": "dog_kennels", "final": {"question": "List pairs of the owner's first name and the dogs's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["owners", "dogs"]}}
{"sample_id": 953, "db_id": "dog_kennels", "final": {"question": "What are each owner's first name and their dogs's name?", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "source_tables": ["owners", "dogs"]}}
{"sample_id": 954, "db_id": "dog_kennels", "final": {"question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 955, "db_id": "dog_kennels", "final": {"question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 956, "db_id": "dog_kennels", "final": {"question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "source_tables": ["owners", "dogs"]}}
{"sample_id": 957, "db_id": "dog_kennels", "final": {"question": "Find the first names of owners living in Virginia and the names of dogs they own.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "source_tables": ["owners", "dogs"]}}
{"sample_id": 958, "db_id": "dog_kennels", "final": {"question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 959, "db_id": "dog_kennels", "final": {"question": "Find the arriving date and the departing date of the dogs that received a treatment.", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 960, "db_id": "dog_kennels", "final": {"question": "List the last name of the owner owning the youngest dog.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "source_tables": ["owners", "dogs"]}}
{"sample_id": 961, "db_id": "dog_kennels", "final": {"question": "Who owns the youngest dog? Give me his or her last name.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "source_tables": ["owners", "dogs"]}}
{"sample_id": 962, "db_id": "dog_kennels", "final": {"question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "source_tables": ["professionals"]}}
{"sample_id": 963, "db_id": "dog_kennels", "final": {"question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "source_tables": ["professionals"]}}
{"sample_id": 964, "db_id": "dog_kennels", "final": {"question": "What are the arriving date and the departing date of all the dogs?", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 965, "db_id": "dog_kennels", "final": {"question": "List the arrival date and the departure date for all the dogs.", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 966, "db_id": "dog_kennels", "final": {"question": "How many dogs went through any treatments?", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "source_tables": ["treatments"]}}
{"sample_id": 967, "db_id": "dog_kennels", "final": {"question": "Count the number of dogs that went through a treatment.", "sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "source_tables": ["treatments"]}}
{"sample_id": 968, "db_id": "dog_kennels", "final": {"question": "How many professionals have performed any treatment to dogs?", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "source_tables": ["treatments"]}}
{"sample_id": 969, "db_id": "dog_kennels", "final": {"question": "Find the number of professionals who have ever treated dogs.", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "source_tables": ["treatments"]}}
{"sample_id": 970, "db_id": "dog_kennels", "final": {"question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "source_tables": ["professionals"]}}
{"sample_id": 971, "db_id": "dog_kennels", "final": {"question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "source_tables": ["professionals"]}}
{"sample_id": 972, "db_id": "dog_kennels", "final": {"question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "source_tables": ["owners"]}}
{"sample_id": 973, "db_id": "dog_kennels", "final": {"question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "source_tables": ["owners"]}}
{"sample_id": 974, "db_id": "dog_kennels", "final": {"question": "How many dogs have an age below the average?", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "source_tables": ["dogs"]}}
{"sample_id": 975, "db_id": "dog_kennels", "final": {"question": "Count the number of dogs of an age below the average.", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "source_tables": ["dogs"]}}
{"sample_id": 976, "db_id": "dog_kennels", "final": {"question": "How much does the most recent treatment cost?", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "source_tables": ["treatments"]}}
{"sample_id": 977, "db_id": "dog_kennels", "final": {"question": "Show me the cost of the most recently performed treatment.", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "source_tables": ["treatments"]}}
{"sample_id": 978, "db_id": "dog_kennels", "final": {"question": "How many dogs have not gone through any treatment?", "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 979, "db_id": "dog_kennels", "final": {"question": "Tell me the number of dogs that have not received any treatment .", "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "source_tables": ["dogs", "treatments"]}}
{"sample_id": 980, "db_id": "dog_kennels", "final": {"question": "How many owners temporarily do not have any dogs?", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "source_tables": ["owners", "dogs"]}}
{"sample_id": 981, "db_id": "dog_kennels", "final": {"question": "Find the number of owners who do not own any dogs at this moment.", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "source_tables": ["owners", "dogs"]}}
{"sample_id": 982, "db_id": "dog_kennels", "final": {"question": "How many professionals did not operate any treatment on dogs?", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 983, "db_id": "dog_kennels", "final": {"question": "Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "source_tables": ["professionals", "treatments"]}}
{"sample_id": 984, "db_id": "dog_kennels", "final": {"question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}}
{"sample_id": 985, "db_id": "dog_kennels", "final": {"question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "source_tables": ["dogs"]}}
{"sample_id": 986, "db_id": "dog_kennels", "final": {"question": "What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 987, "db_id": "dog_kennels", "final": {"question": "Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 988, "db_id": "dog_kennels", "final": {"question": "What is the age of the oldest dog?", "sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 989, "db_id": "dog_kennels", "final": {"question": "Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs", "source_tables": ["dogs"]}}
{"sample_id": 990, "db_id": "dog_kennels", "final": {"question": "How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 991, "db_id": "dog_kennels", "final": {"question": "List each charge type and its amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 992, "db_id": "dog_kennels", "final": {"question": "How much does the most expensive charge type costs?", "sql": "SELECT max(charge_amount) FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 993, "db_id": "dog_kennels", "final": {"question": "What is the charge amount of the most expensive charge type?", "sql": "SELECT max(charge_amount) FROM Charges", "source_tables": ["charges"]}}
{"sample_id": 994, "db_id": "dog_kennels", "final": {"question": "List the email, cell phone and home phone of all the professionals.", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "source_tables": ["professionals"]}}
{"sample_id": 995, "db_id": "dog_kennels", "final": {"question": "What are the email, cell phone and home phone of each professional?", "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "source_tables": ["professionals"]}}
{"sample_id": 996, "db_id": "dog_kennels", "final": {"question": "What are all the possible breed type and size type combinations?", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "source_tables": ["dogs"]}}
{"sample_id": 997, "db_id": "dog_kennels", "final": {"question": "Find the distinct breed type and size type combinations for dogs.", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "source_tables": ["dogs"]}}
{"sample_id": 998, "db_id": "dog_kennels", "final": {"question": "List the first name of all the professionals along with the description of the treatment they have done.", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "source_tables": ["professionals", "treatments", "treatment_types"]}}
{"sample_id": 999, "db_id": "dog_kennels", "final": {"question": "What are each professional's first name and description of the treatment they have performed?", "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "source_tables": ["professionals", "treatments", "treatment_types"]}}
{"sample_id": 1000, "db_id": "singer", "final": {"question": "How many singers are there?", "sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}}
{"sample_id": 1001, "db_id": "singer", "final": {"question": "What is the count of singers?", "sql": "SELECT count(*) FROM singer", "source_tables": ["singer"]}}
{"sample_id": 1002, "db_id": "singer", "final": {"question": "List the name of singers in ascending order of net worth.", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "source_tables": ["singer"]}}
{"sample_id": 1003, "db_id": "singer", "final": {"question": "What are the names of singers ordered by ascending net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "source_tables": ["singer"]}}
{"sample_id": 1004, "db_id": "singer", "final": {"question": "What are the birth year and citizenship of singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "source_tables": ["singer"]}}
{"sample_id": 1005, "db_id": "singer", "final": {"question": "What are the birth years and citizenships of the singers?", "sql": "SELECT Birth_Year ,  Citizenship FROM singer", "source_tables": ["singer"]}}
{"sample_id": 1006, "db_id": "singer", "final": {"question": "List the name of singers whose citizenship is not \"France\".", "sql": "SELECT Name FROM singer WHERE Citizenship != 'France'", "source_tables": ["singer"]}}
{"sample_id": 1007, "db_id": "singer", "final": {"question": "What are the names of the singers who are not French citizens?", "sql": "SELECT Name FROM singer WHERE Citizenship != 'France'", "source_tables": ["singer"]}}
{"sample_id": 1008, "db_id": "singer", "final": {"question": "Show the name of singers whose birth year is either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "source_tables": ["singer"]}}
{"sample_id": 1009, "db_id": "singer", "final": {"question": "What are the names of the singers whose birth years are either 1948 or 1949?", "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "source_tables": ["singer"]}}
{"sample_id": 1010, "db_id": "singer", "final": {"question": "What is the name of the singer with the largest net worth?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 1011, "db_id": "singer", "final": {"question": "What is the name of the singer who is worth the most?", "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 1012, "db_id": "singer", "final": {"question": "Show different citizenship of singers and the number of singers of each citizenship.", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}}
{"sample_id": 1013, "db_id": "singer", "final": {"question": "For each citizenship, how many singers are from that country?", "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}}
{"sample_id": 1014, "db_id": "singer", "final": {"question": "Please show the most common citizenship of singers.", "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["singer"]}}
{"sample_id": 1015, "db_id": "singer", "final": {"question": "What is the most common singer citizenship ?", "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "source_tables": ["singer"]}}
{"sample_id": 1016, "db_id": "singer", "final": {"question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}}
{"sample_id": 1017, "db_id": "singer", "final": {"question": "For each citizenship, what is the maximum net worth?", "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "source_tables": ["singer"]}}
{"sample_id": 1018, "db_id": "singer", "final": {"question": "Show titles of songs and names of singers.", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "source_tables": ["singer", "song"]}}
{"sample_id": 1019, "db_id": "singer", "final": {"question": "What are the song titles and singer names?", "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "source_tables": ["singer", "song"]}}
{"sample_id": 1020, "db_id": "singer", "final": {"question": "Show distinct names of singers that have songs with sales more than 300000.", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "source_tables": ["singer", "song"]}}
{"sample_id": 1021, "db_id": "singer", "final": {"question": "what are the different names of the singers that have sales more than 300000?", "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "source_tables": ["singer", "song"]}}
{"sample_id": 1022, "db_id": "singer", "final": {"question": "Show the names of singers that have more than one song.", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "source_tables": ["singer", "song"]}}
{"sample_id": 1023, "db_id": "singer", "final": {"question": "What are the names of the singers that have more than one songs?", "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "source_tables": ["singer", "song"]}}
{"sample_id": 1024, "db_id": "singer", "final": {"question": "Show the names of singers and the total sales of their songs.", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["singer", "song"]}}
{"sample_id": 1025, "db_id": "singer", "final": {"question": "For each singer name, what is the total sales for their songs?", "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "source_tables": ["singer", "song"]}}
{"sample_id": 1026, "db_id": "singer", "final": {"question": "List the name of singers that do not have any song.", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "source_tables": ["singer", "song"]}}
{"sample_id": 1027, "db_id": "singer", "final": {"question": "What is the sname of every sing that does not have any song?", "sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "source_tables": ["singer", "song"]}}
{"sample_id": 1028, "db_id": "singer", "final": {"question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "source_tables": ["singer"]}}
{"sample_id": 1029, "db_id": "singer", "final": {"question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "source_tables": ["singer"]}}
{"sample_id": 1030, "db_id": "real_estate_properties", "final": {"question": "How many available features are there in total?", "sql": "SELECT count(*) FROM Other_Available_Features", "source_tables": ["other_available_features"]}}
{"sample_id": 1031, "db_id": "real_estate_properties", "final": {"question": "What is the feature type name of feature AirCon?", "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  'AirCon'", "source_tables": ["ref_feature_types", "other_available_features"]}}
{"sample_id": 1032, "db_id": "real_estate_properties", "final": {"question": "Show the property type descriptions of properties belonging to that code.", "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "source_tables": ["properties", "ref_property_types"]}}
{"sample_id": 1033, "db_id": "real_estate_properties", "final": {"question": "What are the names of properties that are either houses or apartments with more than 1 room?", "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  'House' UNION SELECT property_name FROM Properties WHERE property_type_code  =  'Apartment' AND room_count  >  1", "source_tables": ["properties"]}}
