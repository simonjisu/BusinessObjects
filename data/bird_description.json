{
  "european_football_1": {
    "divisions": {
      "division": "division id ",
      "name": "name of the division ",
      "country": "country of the division "
    },
    "matchs": {
      "Div": "Division Id ",
      "Date": "Match Date YYYY-MM-DD",
      "HomeTeam": "Name of Home Team ",
      "AwayTeam": "Name of Away Team ",
      "FTHG": "Final-time Home-team Goals ",
      "FTAG": "Final-time Away-team Goals ",
      "FTR": "Final-time Results \n\nH stands for home victory, which means FTHG is higher than FTAG\n\nA stands for away victory, which means FTAG is higher than FTHG\n\nD stands for draft, which means FTHG equals to FTAG",
      "season": "season of the match "
    }
  },
  "sales_in_weather": {
    "sales_in_weather": {
      "date": "the date of sales ",
      "store_nbr": "store number ",
      "item_nbr": "item / product number ",
      "units": "the quantity sold of an item on a given day "
    },
    "weather": {
      "station_nbr": "the id of weather stations ",
      "date": "date ",
      "tmax": "max temperature ",
      "tmin": "min temperature \n\ntemperature range / difference = tmax - tmin",
      "tavg": "average temperature ",
      "depart": "depart Temperature departure from the normal indicates if the dekadal average temperatures were above or below the 30-year normal.\n\n\n if null: the temperature is 30-year normal\n if the value is positive: the temperature is above the 30-year normal, \n if the value is negative: the temperature is below the 30-year normal, ",
      "dewpoint": "dewpoint \n\nThe dew point is the temperature to which air must be cooled to become saturated with water vapor, assuming constant air pressure and water content.",
      "wetbulb": "wetbulb \n\n The wet-bulb temperature (WBT) is the temperature read by a thermometer covered in water-soaked (water at ambient temperature) cloth (a wet-bulb thermometer) over which air is passed.\n At 100% relative humidity, the wet-bulb temperature is equal to the air temperature (dry-bulb temperature); \n at lower humidity the wet-bulb temperature is lower than dry-bulb temperature because of evaporative cooling.",
      "heat": "calculated heating degree ",
      "cool": "calculated cooling degree ",
      "sunrise": "calculated sunrise ",
      "sunset": "calculated sunset ",
      "codesum": "code summarization for the weather \n PY SPRAY \n SQ SQUALL \n DR LOW DRIFTING \n SH SHOWER \n FZ FREEZING \n MI SHALLOW \n PR PARTIAL \n BC PATCHES \n BL BLOWING \n VC VICINITY \n - LIGHT \n + HEAVY \n \"NO SIGN\" MODERATE",
      "snowfall": "snowfall snowfall (inches AND tenths)",
      "preciptotal": "precipitation total inches (240hr period ending at indicated local standard time)",
      "stnpressure": "station pressure ",
      "sealevel": "sea level ",
      "resultspeed": "resultant wind speed ",
      "resultdir": "resultant wind direction who degree",
      "avgspeed": "average wind speed \n\nif avgspeed is larger: much more wind"
    },
    "relation": {
      "store_nbr": "the id of stores ",
      "station_nbr": "the id of weather stations "
    }
  },
  "craftbeer": {
    "breweries": {
      "id": "unique ID of the breweries ",
      "name": "name of the breweries ",
      "city": "city ",
      "state": "state "
    },
    "beers": {
      "id": "unique id number of beers ",
      "brewery_id": "id number of the breweries ",
      "abv": "alcohol by volume Alcohol by VolumeABV is the most common measurement of alcohol content in beer; it simply indicates how much of the total volume of liquid in a beer is made up of alcohol. ",
      "ibu": "International Bitterness Units IBU stands for International Bitterness Units, a scale to gauge the level of a beer's bitterness. More specifically, IBUs measure the parts per million of is humulone from hops in a beer, which gives beer bitterness.",
      "name": "name of beers ",
      "style": "style / sorts of beers ",
      "ounces": "ounces "
    }
  },
  "soccer_2016": {
    "Batting_Style": {
      "Batting_Id": "unique id for batting hand ",
      "Batting_hand": "the batting hand: left or right "
    },
    "Bowling_Style": {
      "Bowling_Id": "unique id for bowling style ",
      "Bowling_skill": "the bowling skill "
    },
    "City": {
      "City_Id": "unique id for city ",
      "City_Name": "city name ",
      "Country_id": "id of country "
    },
    "Country": {
      "Country_Id": "unique id for country ",
      "Country_Name": "country name "
    },
    "Extra_Type": {
      "Extra_Id": "unique id for extra type ",
      "Extra_Name": "extra type name "
    },
    "Extra_Runs": {
      "Match_Id": "Unique Number Which Identifies a match ",
      "Over_Id": "Unique Number which Identifies an over in an Innings ",
      "Ball_Id": "Unique Number which Identifies a ball in an over ",
      "Extra_Type_Id": "Unique Number which Identifies extra type ",
      "Extra_Runs": "Number of extra runs ",
      "Innings_No": "Unique Number which Identifies an innings in a match "
    },
    "Out_Type": {
      "Out_Id": "unique id for out type ",
      "Out_Name": "out type name "
    },
    "Outcome": {
      "Outcome_Id": "unique id for outcome ",
      "Outcome_Type": "type of the outcome "
    },
    "Player": {
      "Player_Id": "the id of the player ",
      "Player_Name": "the name of the player ",
      "DOB": "player's birthday yyyy-mm-dd",
      "Batting_hand": "the id of the batting hand ",
      "Bowling_skill": "the id of the bowling skill ",
      "Country_Name": "the name of the country where the player is from "
    },
    "Rolee": {
      "Role_Id": "the unique id for the role ",
      "Role_Desc": "the role description  "
    },
    "Season": {
      "Season_Id": "the unique id for season ",
      "Man_of_the_Series": "the player id of man of the series \n\nIn team sport, a player of the series or man (or woman) of the series award is often given to the outstanding player in a particular series.",
      "Orange_Cap": "the player id who wins the orange cap \n\nThe Orange Cap is a coveted award for a batter who is participating in the Indian Premier League (IPL)",
      "Purple_Cap": "the player id who wins the purple cap \n\nThe Purple Cap is awarded to the bowler who has emerged as the leading wicket-taker in a particular edition of the high-profile Indian Premier League (IPL)",
      "Season_Year": "the year of the season "
    },
    "Team": {
      "Team_Id": "the unique id for the team ",
      "Team_Name": "the team name  "
    },
    "Toss_Decision": {
      "Toss_Id": "the unique id for the toss ",
      "Toss_Name": "the toss decision name "
    },
    "Umpire": {
      "Umpire_Id": "the unique id of the umpire ",
      "Umpire_Name": "umpire's name ",
      "Umpire_Country": "the id of the country where the umpire are from "
    },
    "Venue": {
      "Venue_Id": "the unique id of the venue ",
      "Venue_Name": "the name of the venue ",
      "City_Id": "the city id where the venue is located in  "
    },
    "Win_By": {
      "Win_Id": "the unique id for the winning ",
      "Win_Type": "the winning type "
    },
    "Match": {
      "Match_Id": "unique id for match ",
      "Team_1": "the team id of the first team ",
      "Team_2": "the team id for the second team ",
      "Match_Date": "the date of the match yyyy-mm-dd",
      "Season_Id": "the id of the season ",
      "Venue_Id": "the id of the venue where the match held ",
      "Toss_Winner": "the id of the toss winner \n\nThe toss winner is a term used in cricket and is the team that wins the heads or tails toss of coin at the beginning of a match which then enables the team captain to decide whether to bat or bowl first on the pitch.",
      "Toss_Decide": "the decision (batting or bowling) made after winning the toss  field \n bat",
      "Win_Type": "the id of the winning type  ",
      "Win_Margin": "the points of the winning margin \n\nA winning margin bet is a wager on the final result of a game, within a certain range of points.",
      "Outcome_type": "the id of the outcome type ",
      "Match_Winner": "the team id of the match winner ",
      "Man_of_the_Match": "the id of the man of the match \n\nIn team sport, a player of the match or man (or woman) of the match award is often given to the outstanding player in a particular match."
    },
    "Ball_by_Ball": {
      "Match_Id": "Unique Number Which Identifies a match ",
      "Over_Id": "Unique Number which Identifies an over in an Innings \n\nThe match is made up of two innings and each team takes a turn at batting and bowling. An innings is made up of 50 overs. An over involves six deliveries from the bowler.",
      "Ball_Id": "Unique Number which Identifies a ball in an over ",
      "Innings_No": "Unique Number which Identifies an innings in a match ",
      "Team_Batting": "Unique Number which Identifies Batting team in a match ",
      "Team_Bowling": "Unique Number which Identifies Bowling team in a match ",
      "Striker_Batting_Position": "Unique Number which Identifies the position in which player came into bat ",
      "Striker": "Unique Number which Identifies the player who is on strike for that particular ball ",
      "Non_Striker": "Unique Number which Identifies the player who is Non-striker for that particular ball ",
      "Bowler": "Unique Number which Identifies the player who is Bowling that particular ball "
    },
    "Batsman_Scored": {
      "Match_Id": "Unique Number Which Identifies a match ",
      "Over_Id": "Unique Number which Identifies an over in an Innings ",
      "Ball_Id": "Unique Number which Identifies a ball in an over ",
      "Runs_Scored": "Number of Runs scored by the batsman ",
      "Innings_No": "Unique Number which Identifies an innings in a match "
    },
    "Player_Match": {
      "Match_Id": "unique id for match ",
      "Player_Id": "the id of the player ",
      "Role_Id": "the id of the play's role in the match \n\nif a player has multiple roles in a match, it means this player is versatile",
      "Team_Id": "the id of player's team "
    },
    "Wicket_Taken": {
      "Match_Id": "the id of the match ",
      "Over_Id": "the id of the over in an inning ",
      "Ball_Id": "the id of the ball in an over ",
      "Player_Out": "the player id who got an out ",
      "Kind_Out": "the id that represents the out type ",
      "Fielders ": "the id of fielders ",
      "Innings_No": "number which identifies an innings in a match "
    }
  },
  "restaurant": {
    "geographic": {
      "city": "the city ",
      "county": "the country the city belongs to ",
      "region": "corresponding regions "
    },
    "generalinfo": {
      "id_restaurant": "the unique id for the restaurant ",
      "label": "the label of the restaurant ",
      "food_type": "the food type ",
      "city": "the city where the restaurant is located in ",
      "review": "the review of the restaurant \n\nthe review rating is from 0.0 to 5.0\nThe high review rating is positively correlated with the overall level of the restaurant. The restaurant with higher review rating is usually more popular among diners. "
    },
    "location": {
      "id_restaurant": "the unique id for the restaurant ",
      "street_num": "the street number of the restaurant ",
      "street_name": "the street name of the restaurant ",
      "city": "the city where the restaurant is located in "
    }
  },
  "movie": {
    "actor": {
      "ActorID": "the unique id for the actor ",
      "Name": "actor's name ",
      "Date of Birth": "actor's birth date ",
      "Birth City": "actor's birth city ",
      "Birth Country": "actor's birth country ",
      "Height (Inches)": "actor's height the unit is inch",
      "Biography": "actor's biography ",
      "Gender": "actor's gender ",
      "Ethnicity": "actor's ethnicity ",
      "NetWorth": "actor's networth \n\nThe actor with more networth is richer. "
    },
    "movie": {
      "MovieID": "the unique id for the movie ",
      "Title": "the title of the movie ",
      "MPAA Rating": "MPAA rating of the movie \n\nMPAA rating is the movie rating for parents to use as a guide to determine the appropriateness of a film's content for children and teenagers. \n\u0095 rated G: General audiences \u0096 All ages admitted\n\u0095 rated PG: Parental guidance suggested \u0096 Some material may not be suitable for pre-teenagers\n\u0095 rated R: Restricted \u0096 Under 17 requires accompanying parent or adult guardian\n\u0095 rated X: No one under 17 admitted",
      "Budget": "the budget of the movie the unit is dollar",
      "Gross": "the gross of the movie ",
      "Release Date": "release date yyyy-mm-dd",
      "Genre": "the genre of the movie ",
      "Runtime": "the runtime of the movie ",
      "Rating": "the rating of the movie 0.0 - 10.0\n\n\nHigher ratings mean higher quality and better response. ",
      "Rating Count": "the number of the ratings ",
      "Summary": "the summary of the movie "
    },
    "characters": {
      "MovieID": "the unique id for the movie ",
      "ActorID": "the unique id for the actor ",
      "Character Name": "the name of the character ",
      "creditOrder": "order of the character in the credit list  ",
      "pay": "the salary of the character ",
      "screentime": "the screentime of the character \n\nScreentime is directly proportional to the importance of the characters. "
    }
  },
  "olympics": {
    "city": {
      "id": "the unique identifier of the city ",
      "city_name": "the name of the city "
    },
    "games": {
      "id": "the unique identifier of the game ",
      "games_year": "the year of the game ",
      "games_name": "the name of the game \n\ngames_name is 'games_year season'",
      "season": "the season of the game \n\nThe Olympics are held every four years and include both summer and winter games. The summer games include a wide range of sports, such as athletics, swimming, and gymnastics, while the winter games feature sports that are played on ice or snow, such as ice hockey, figure skating, and skiing."
    },
    "games_city": {
      "games_id": "the id of the game\nMaps to games(id) ",
      "city_id": "the id of the city that held the game\nMaps to city(id) "
    },
    "medal": {
      "id ": "the unique identifier of the metal ",
      "medal_name": "the name of the medal "
    },
    "noc_region": {
      "id ": "the unique identifier of the noc region ",
      "noc": "the NOC code of the region \n\nA NOC code is a number used by the International Olympic Committee (IOC) to identify each of the national Olympic committees (NOCs) from around the world. ",
      "region_name": "the name of the region "
    },
    "person": {
      "id": "the unique identifier of the person ",
      "full_name": "the full name of the person \n\nA person's full name is the complete name that they are known by, which typically includes their first name, middle name (if applicable), and last name. ",
      "gender": "the gender of the person \n\nM stands for male and F stands for female. ",
      "height": "the height of the person ",
      "weight": "the weight of the person \n\nThe unit of height is cm, and the unit of weight is kg. If the height or the weight of the person is 0, it means his/her height or weight is missing. "
    },
    "games_competitor": {
      "id ": "the unique identifier of the record ",
      "games_id": "the id of the game\nMaps to games(id) ",
      "person_id": "the id of the person\nMaps to person(id) \n\nThe times a person participated in the Olympics games could be calculated by grouping by person_id. ",
      "age": "the age of the person when he/she participated in the game \n\nIf person A's age was 22 when he participated in game A and his age was 24 when he participated in game B, it means that game A was held two years earlier than game B."
    },
    "person_region": {
      "person_id": "the id of the person\nMaps to person(id) ",
      "region_id": "the id of the noc region\nMaps to noc_region(id) "
    },
    "sport": {
      "id": "the unique identifier of the sport ",
      "sport_name": "the name of the sport "
    },
    "event": {
      "id": "the unique identifier of the event ",
      "sport_id": "the id of the sport\nMaps to sport(id) \n\nThere may be different events for the same sport in Olympics. ",
      "event_name": "the name of the event "
    },
    "competitor_event": {
      "event_id": "the id of the event\nMaps to event(id) ",
      "competitor_id": "the id of the competitor\nMaps to games_competitor(id) \n\nThe number of competitors who participated in a specific event could be calculated by grouping by event_id. ",
      "medal_id": "the id of the medal\nMaps to medal(id) \n\nFor a specific event, the competitor whose medal_id = 1 is the champion, the competitor whose medal_id = 2 is the runner-up, and the competitor whose medal_id = 3 got third place. "
    }
  },
  "language_corpus": {
    "langs": {
      "lid": "language id  \n \nlid=1 means it's the Catalan language.\n",
      "lang": "language name  \n\n ca means Catalan language.",
      "locale": "The locale of the language ",
      "pages": "total pages of Wikipedia in this language ",
      "words": "total number of words in this pages "
    },
    "pages": {
      "pid": "page id of Wikipedia about Catalan language ",
      "lid": "language id  \n \nlid=1 means it's Catalan language",
      "page": "wikipedia page id ",
      "revision": "wikipedia revision page id ",
      "title": "The title of this Catalan language Wikipedia page ",
      "words": "number of different words in this page "
    },
    "words": {
      "wid": "The word id of the Catalan language The value is unique.",
      "word": "The word itself ",
      "occurrences": "The occurrences of the specific word "
    },
    "langs_words": {
      "lid": "language id  \n \nlid=1 means it's Catalan language.",
      "wid": "The word id of the Catalan language ",
      "occurrences": "repetitions of this word in this language it's INTEGER and DEFAULT is 0."
    },
    "pages_words": {
      "pid": "page id of Wikipedia about Catalan language ",
      "wid": "The word id of the Catalan language The value is unique.",
      "occurrences": "times of this word appears into this page "
    },
    "biwords": {
      "lid": "language id  \n \nlid=1 means it's Catalan language.\n",
      "w1st": "The word id of the first word of the biwords pair.  The value is unique.",
      "w2nd": "The word id of the second word of the biwords pair.  The value is unique.",
      "occurrences": "times of this pair appears in this language/page "
    }
  },
  "app_store": {
    "playstore": {
      "App": "Application name ",
      "Category": "Category the app belongs to FAMILY 18%\nGAME 11%\nOther (7725) 71%",
      "Rating": "Overall user rating of the app (as when scraped) ",
      "Reviews": "Number of user reviews for the app (as when scraped) ",
      "Size": "Size of the app (as when scraped) Varies with device 16%\n11M 2%\nOther (8948) 83%",
      "Installs": "Number of user downloads/installs for the app (as when scraped) 1,000,000+ 15%\n10,000,000+ 12%\nOther (8010) 74%",
      "Type": "Paid or Free Only has 'Paid' and 'Free'\nFree 93%\nPaid 7%",
      "Price": "Price of the app (as when scraped) 0 93%\n$0.99 1%\nOther (653) 6%\n\n\n\nFree means the price is 0.",
      "Content Rating": "Age group the app is targeted at - Children / Mature 21+ / Adult Everyone 80%\nTeen 11%\nOther (919) 8%\n\n\n\nAccording to Wikipedia, the different age groups are defined as:\nChildren: age<12~13\nTeen: 13~19\nAdult/Mature: 21+\n",
      "Genres": "An app can belong to multiple genres (apart from its main category). Tools 8%\nEntertainment 6%\nOther (9376) 86%"
    },
    "user_reviews": {
      "App": "Name of app ",
      "Translated_Review": "User review (Preprocessed and translated to English) nan 42%\nGood 0%\nOther (37185) 58%",
      "Sentiment": "Overall user rating of the app (as when scraped) \n\nPositive: user holds positive attitude towards this app\nNegative: user holds positive attitude / critizes on this app\nNeural: user holds neural attitude\nnan: user doesn't comment on this app.",
      "Sentiment_Polarity": "Sentiment polarity score \n\n\u2022 score >= 0.5 it means pretty positive or pretty like this app.\n\u2022 0 <= score < 0.5: it means user mildly likes this app.\n\u2022 -0.5 <= score < 0: it means this user mildly dislikes this app or slightly negative attitude\n\u2022 score <-0.5: it means this user dislikes this app pretty much.",
      "Sentiment_Subjectivity": "Sentiment subjectivity score \n\nmore subjectivity refers to less objectivity, vice versa."
    }
  },
  "sales": {
    "Customers": {
      "CustomerID": "the unique id of the customer ",
      "FirstName": "the customer's first name ",
      "MiddleInitial": "the customer's middle initial  ",
      "LastName": "the customer's last name "
    },
    "Employees": {
      "EmployeeID": "the unique id of the employee ",
      "FirstName": "the employee's first name ",
      "MiddleInitial": "the employee's middle initial  ",
      "LastName": "the employee's last name "
    },
    "Products": {
      "ProductID": "the unique id of the product ",
      "Name": "the product name ",
      "Price": "the price of the product unit price\n\n\nif the price = 0.0, it means this product is free or a gift"
    },
    "Sales": {
      "SalesID": "the unique id of the sales ",
      "SalesPersonID": "the unique id of the sale person ",
      "CustomerID": "the unique id of the customer ",
      "ProductID": "the unique id of the product ",
      "Quantity": "trading quantity \n\ntotal price = quantity x Products' Price"
    }
  },
  "video_games": {
    "genre": {
      "id": "the unique identifier of the game genre ",
      "genre_name": "the game genre \n\nThe game genre can have a significant effect on the game. The genre refers to the category or type of game, such as action, adventure, strategy, or role-playing. The genre can determine the general style and gameplay of the game, as well as the expectations of the players. The genre can also affect the audience for the game, as different genres may appeal to different groups of players."
    },
    "game": {
      "id": "the unique identifier of the game ",
      "genre_id": "the id of the game genre \n\nIf game A and game B have the same genre, the user who likes game A may also like game B. ",
      "game_name": "the name of the game "
    },
    "platform": {
      "id": "the unique identifier of the game platform ",
      "platform_name": "the name of the platform \n\nThe game platform, or the platform on which a game is played, can have a significant effect on the game. The platform can determine what hardware and software the game can run on, as well as the technical capabilities of the game. The platform can also affect the audience for the game, as different platforms may attract different groups of players."
    },
    "publisher": {
      "id": "the unique identifier of the game publisher ",
      "publisher_name": "the name of the publisher \n\nThe publisher is the company or organization that finances, produces, and distributes the game. The publisher can influence the development of the game by providing resources, guidance, and support to the game's development team. The publisher can also affect the marketing and distribution of the game, as they are responsible for promoting the game and making it available to players. "
    },
    "game_publisher": {
      "id": "the unique identifier of the game publisher ",
      "game_id": "the id of the game ",
      "publisher_id": "the id of the publisher \n\nIf game A and game B were published by the same publisher, the user who likes game A may also like game B if the user is a fan of the publisher company."
    },
    "game_platform": {
      "id": "the unique identifier of the record ",
      "game_publisher_id": "the id of the game publisher ",
      "platform_id": "the id of the platform ",
      "release_year": "the release year of the game "
    },
    "region": {
      "id": "the unique identifier of the region ",
      "region_name": "the region name "
    },
    "region_sales": {
      "region_id": "the id of the region ",
      "game_platform_id": "the id of the game platform ",
      "num_sales": "the number of sales in this region \n\nThe number of games sold in the region = num_sales * 100000.\nThe game platform with higher num_sales is more popular in the region. "
    }
  },
  "image_and_language": {
    "ATT_CLASSES": {
      "ATT_CLASS_ID": "the unique attribute class ids ",
      "ATT_CLASS": "the corresponding classes for attributes "
    },
    "OBJ_CLASSES": {
      "OBJ_CLASS_ID": "unique id number identifying object classes ",
      "OBJ_CLASS": "the explanation about object classes "
    },
    "IMG_OBJ": {
      "IMG_ID": "the id representing images ",
      "OBJ_SAMPLE_ID": "the id of the object sample ",
      "OBJ_CLASS_ID": "the id indicating class of the objects ",
      "X": "x coordinate  ",
      "Y": "y coordinate  ",
      "W": "width of the bounding box of the object ",
      "H": "height of the bounding box of the object \n\n\nbounding box of the object: (x, y, W, H)"
    },
    "IMG_OBJ_ATT": {
      "IMG_ID": "id number of each image ",
      "ATT_CLASS_ID": "attribute class number for image \n\n\nif one IMG_ID has many ATT_CLASS_ID, it refers to that this image has multiple attributes",
      "OBJ_SAMPLE_ID": "object sample id \n\n\n if one IMG_ID has many OBJ_SAMPLE_ID, it refers to that this image has multiple objects\n\n if one ATT_CLASS_ID has many OBJ_SAMPLE_ID, it refers to that this attribute is composed of multiple objects."
    },
    "PRED_CLASSES": {
      "PRED_CLASS_ID": "the unique prediction id for the class ",
      "PRED_CLASS": "the caption for the prediction class id "
    },
    "IMG_REL": {
      "IMG_ID": "the image id  ",
      "PRED_CLASS_ID": "the prediction relationship class between objects \n\n\nif OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID, this relationship is the self-relation.",
      "OBJ1_SAMPLE_ID": "the sample id of the first object ",
      "OBJ2_SAMPLE_ID": "the sample id of the second object \n\n\nif (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) has multiple PRED_CLASS_ID, it means these two objects have multiple relations."
    }
  },
  "software_company": {
    "Demog": {
      "GEOID": "unique geographic identifier ",
      "INHABITANTS_K": "number of inhabitants the unit is K (thousands)",
      "INCOME_K": "average income per inhabitant per month the unit is dollar, it indicates the average income per inhabitant per month.\n\n\nsome computation like: total income per year = INHABITANTS_K x INCOME_K x 12",
      "A_VAR1": "a_var1 ",
      "A_VAR2": "a_var2 ",
      "A_VAR3": "a_var3 ",
      "A_VAR4": "a_var4 ",
      "A_VAR5": "a_var5 ",
      "A_VAR6": "a_var6 ",
      "A_VAR7": "a_var7 ",
      "A_VAR8": "a_var8 ",
      "A_VAR9": "a_var9 ",
      "A_VAR10": "a_var10 ",
      "A_VAR11": "a_var11 ",
      "A_VAR12": "a_var12 ",
      "A_VAR13": "a_var13 ",
      "A_VAR14": "a_var14 ",
      "A_VAR15": "a_var15 ",
      "A_VAR16": "a_var16 ",
      "A_VAR17": "a_var17 ",
      "A_VAR18": "a_var18 "
    },
    "mailings3": {
      "REFID": "unique id number identifying the customer ",
      "REF_DATE": "indicating the date when the mailing was sent ",
      "RESPONSE": "Actual response to the marketing incentive email   True  False \n 1. any person who has not responded to a mailing within two months is considered to have responded negatively. 2. true respond to the mailing, otherwise, no"
    },
    "Customers": {
      "ID": "the unique number identifying the customer ",
      "SEX": "the sex of the customer ",
      "MARITAL_STATUS": "marital_status  Never-married\n Married-civ-spouse\n Divorced\n Widowed\n Other\n\n \"Married-civ-spouse\", \"Divorced\", \"Widowed\" mean customer has been married.\n",
      "GEOID": "geographic identifier ",
      "EDUCATIONNUM": "the level of education \n higher education number refers to higher education",
      "OCCUPATION": "occupation of customers ",
      "age": "age of customers \n  teenager: 13-19 years old.\n elder: people aged over 65"
    },
    "Mailings1_2": {
      "REFID": "unique id number identifying the customer ",
      "REF_DATE": "indicating the date when the mailing was sent ",
      "RESPONSE": "Response to the incentive mailing that marketing department sent  True\n False \n\n \n1. any person who has not responded to a mailing within two months is considered to have responded negatively.\n2. true respond to the mailing, otherwise, no"
    },
    "Sales": {
      "EVENTID": "unique id of event (sales) ",
      "REFID": "Reference to customer ID ",
      "EVENT_DATE": "date of sales ",
      "AMOUNT": "amount of sales "
    }
  },
  "authors": {
    "Author": {
      "Id": "Id of the author ",
      "Name": "Author Name ",
      "Affiliation": "Organization name with which the author is affiliated.  the name of an organization with which an author can be affiliated"
    },
    "Conference": {
      "Id": "Conference Id ",
      "ShortName": "Short name ",
      "FullName": "Full name ",
      "HomePage": "Homepage URL of conference "
    },
    "Journal": {
      "Id": "Journal Id ",
      "ShortName": "Short name ",
      "FullName": "Full name ",
      "HomePage": "Homepage URL of journal "
    },
    "Paper": {
      "Id": " Id of the paper ",
      "Title": "Title of the paper ",
      "Year": "Year of the paper \n if the year is \"0\", it means this paper is preprint, or not published",
      "ConferenceId": "Conference Id in which paper was published ",
      "JournalId": "Journal Id in which paper was published \n If a paper contain \"0\" in both ConferenceID and JournalId, it means this paper is preprint",
      "Keyword": "Keywords of the paper  \n Keywords should contain words and phrases that suggest what the topic is about. \nSimilar keywords represent similar fields or sub-field. "
    },
    "PaperAuthor": {
      "PaperId": " Paper Id ",
      "AuthorId": "Author Id \n A paper can have more than one author. Co-authorship can be derived from (paper ID, author ID) pair. ",
      "Name": "Author Name (as written on paper) ",
      "Affiliation": "Author Affiliation (as written on paper) the name of an organization with which an author can be affiliated"
    }
  },
  "movies_4": {
    "country": {
      "country_id": "the unique identifier of the country ",
      "country_iso_code": "the ISO code \n\nISO codes are typically used to identify countries and their subdivisions, and there are different types of ISO codes depending on the specific application. Here we use ISO 3166 code to identify countries. ",
      "country_name": "the name of the country "
    },
    "department": {
      "department_id": "the unique identifier of the department ",
      "department_name": "the name of the department "
    },
    "gender": {
      "gender_id": "the unique identifier of the gender ",
      "gender": "the gender \n\nfemale/ male/ unspecified "
    },
    "genre": {
      "genre_id": "the unique identifier of the genre ",
      "genre_name": "the genre "
    },
    "keyword": {
      "keyword_id": "the unique identifier of the keyword ",
      "keyword_name": "the keyword "
    },
    "language": {
      "language_id": "the unique identifier of the language ",
      "language_code": "the code of the language \n\nHere we use ISO 639 codes to identify the language. ",
      "language_name": "the language name "
    },
    "language_role": {
      "role_id": "the unique identifier of the language id ",
      "language_role": "the language role \n\nIn the context of language roles in a movie or other audio-visual production, \"original\" and \"spoken\" refer to the languages in which the movie was originally produced, and the languages spoken by the characters in the movie, respectively."
    },
    "movie": {
      "movie_id": "the unique identifier of the movie ",
      "title": "the title of the movie ",
      "budget": "the budget for the movie \n\nIf a movie has higher popularity, it means that it is well-liked by a large number of people. This can be determined by looking at the movie's ratings and reviews, as well as the box office performance and overall buzz surrounding the film. Higher popularity often translates to more success for the movie, both financially and critically.",
      "homepage": "the homepage of the movie ",
      "overview": "the overview of the movie ",
      "popularity": "the popularity of the movie \n\nIf a movie has higher popularity, it means that it is well-liked by a large number of people. This can be determined by looking at the movie's ratings and reviews, as well as the box office performance and overall buzz surrounding the film. Higher popularity often translates to more success for the movie, both financially and critically.",
      "release_date": "the release date of the movie ",
      "revenue": "the revenue of the movie \n\nA higher vote average indicates that a greater proportion of people who have seen the movie have given it positive ratings.",
      "runtime": "the runtime of the movie ",
      "movie_status": "the status of the movie\nThe only value of this column is 'Released'.  ",
      "tagline": "the tagline of the movie ",
      "vote_average": "the average vote for the movie \n\nA higher vote average indicates that a greater proportion of people who have seen the movie have given it positive ratings.",
      "vote_count": "the vote count for the movie \n\nIf a movie has a higher vote average and vote count, it means that it has been well-received by audiences and critics. A higher vote count means that more people have rated the movie, which can indicate a greater level of interest in the film."
    },
    "movie_genres": {
      "movie_id": "the id of the movie \nMaps to movie(movie_id) ",
      "genre_id": "the id of the movie genre\nMaps to genre(genre_id) "
    },
    "movie_languages": {
      "movie_id": "the id of the movie \nMaps to movie(movie_id) ",
      "language_id": "the id of the movie language\nMaps to language(language_id) ",
      "language_role_id": "the id of the role's language "
    },
    "person": {
      "person_id": "the unique identifier of the person ",
      "person_name": "the name of the person "
    },
    "movie_crew": {
      "movie_id": "the id of the movie that the crew worked for\nMaps to movie(movie_id) ",
      "person_id": "the id of the crew\nMaps to person(person_id) ",
      "department_id": "the id of the crew's department\nMaps to department(department_id) ",
      "job": "the job of the crew \n\nA movie may involve several crews with the same job title. "
    },
    "production_company": {
      "company_id": "the unique identifier of the company ",
      "company_name": "the name of the company "
    },
    "production_country": {
      "movie_id": "the unique identifier of the movie ",
      "country_id": "the id of the country "
    },
    "movie_cast": {
      "movie_id": "the id of the movie\nMaps to movie(movie_id) ",
      "person_id": "the id of the person\nMaps to person(person_id) ",
      "character_name": "the character name ",
      "gender_id": "the id of the cast's gender\nMaps to gender(gender_id) ",
      "cast_order": "the cast order of the cast \n\nThe cast order of a movie or television show refers to the sequence in which the actors and actresses are listed in the credits. This order is typically determined by the relative importance of each actor's role in the production, with the main actors and actresses appearing first, followed by the supporting cast and extras. "
    },
    "movie_keywords": {
      "movie_id": "the id of the movie \nMaps to movie(movie_id) ",
      "keyword_id": "the id of the movie keyword\nMaps to keyword(keyword_id) \n\nA movie may have many keywords. Audience could get the genre of the movie according to the movie keywords. "
    },
    "movie_company": {
      "movie_id": "the id of the movie \nMaps to movie(movie_id) ",
      "company_id": "the id of the company that produced the movie\nMaps to production_company(company_id) \n\nIf movies with different movie_id have the same company_id, it means these movies were made by the same company. "
    }
  },
  "social_media": {
    "location": {
      "LocationID": "unique id of the location ",
      "Country": "the country ",
      "State": "the state ",
      "StateCode": "state code ",
      "City": "the city "
    },
    "user": {
      "UserID": "the unique id of the user ",
      "Gender": "user's gender Male / Female / Unknown"
    },
    "twitter": {
      "TweetID": "the unique id of the tweet ",
      "Weekday": "the weekday that the tweet has been posted ",
      "Hour": "the hour that the tweet has been posted ",
      "Day": "the day that the tweet has been posted ",
      "Lang": "the language of the tweet ",
      "IsReshare": "whether the tweet is reshared \n\nA reshared tweet is when someone reshares or forwards a post to their own Twitter \n\u0095\ttrue: the tweet is reshared\n\u0095\tfalse: the tweet isn't reshared",
      "Reach": "the reach of the tweet \n\nreach counts the number of unique users who have seen your tweet",
      "RetweetCount": "the retweet count ",
      "Likes": "the number of likes  ",
      "Klout": "the klout of the tweet ",
      "Sentiment": "the sentiment of the tweet \n\n\u0095\t>0: the sentiment of the tweet is positive. \n\u0095\t=0: the sentiment of the tweet is neutral.\n\u0095\t<0: the sentiment of the tweet is negative. ",
      "text": "the text of the tweet ",
      "LocationID": "the location id of the poster ",
      "UserID": "the user id of the poster "
    }
  },
  "human_resources": {
    "location": {
      "locationID": "the unique id for location ",
      "locationcity": "the location city ",
      "address": "the detailed address of the location ",
      "state": "the state abbreviation ",
      "zipcode": "zip code of the location ",
      "officephone": "the office phone number of the location "
    },
    "position": {
      "positionID": "the unique id for position ",
      "positiontitle": "the position title ",
      "educationrequired ": "the required education year \n\nGenerally, more complex work requires more education year. ",
      "minsalary": "minimum salary of this position  ",
      "maxsalary": "maximum salary of this position  "
    },
    "employee": {
      "ssn": "employee's ssn ",
      "lastname": "employee's last name ",
      "firstname": "employee's first name \n\nemployee's full name is firstname lastname . ",
      "hiredate": "employee's hire date yyyy-mm-dd",
      "salary": "employee's salary the unit is dollar per year",
      "gender": "employee's gender ",
      "performance": "employee's performance Good / Average/ Poor",
      "positionID": "the unique id for position ",
      "locationID": "the unique id for location "
    }
  },
  "regional_sales": {
    "Customers": {
      "CustomerID": "unique id number indicating which customer ",
      "Customer Names": "the name of the customer "
    },
    "Products": {
      "ProductID": "unique id number representing each product ",
      "Product Name": "name of the product "
    },
    "Regions": {
      "StateCode": "the unique code identifying the state ",
      "State": "full state name ",
      "Region": "the region where the state is located in "
    },
    "Sales Team": {
      "SalesTeamID": "unique sales team id ",
      "Sales Team": "sales team names ",
      "Region": "the region where the state is located in "
    },
    "Store Locations": {
      "StoreID": "unique store id ",
      "City Name": "City Name ",
      "County": "full county name ",
      "StateCode": "state code ",
      "State": "full state name ",
      "Type": "type of the store City\nTown\nCDP (customer data platform)\nUnified Government\nConsolidated Government\nOther\nTownship\nUrban County \nBorough\nMetropolitan Government",
      "Latitude": "Latitude ",
      "Longitude": "Longitude \n\ncoordinates or detailed position: (Latitude, Longitude)",
      "AreaCode": "areacode ",
      "Population": "Population ",
      "Household Income": "Household Income ",
      "Median Income": "Median Income ",
      "Land Area": "Land Area ",
      "Water Area": "Water Area ",
      "Time Zone": "Time Zone "
    },
    "Sales Orders": {
      "OrderNumber": "the unique number identifying the order ",
      "Sales Channel": "Sales Channel \u0095 In-Store\n\u0095 Online\n\u0095 Distributor\n\u0095 Wholesale",
      "WarehouseCode": "Warehouse Code \n\nif the warehouse code is the same, it means this product is shipped from the same ware house",
      "ProcuredDate": "Procured Date \n\ndate: month/date/year, 17--> 2017",
      "OrderDate": "Order Date ",
      "ShipDate": "Ship Date ",
      "DeliveryDate": "Delivery Date \n\nthe difference \"DeliveryDate - OrderDate\" is smaller, it means faster delivery",
      "CurrencyCode": "Currency Code USD",
      "_SalesTeamID": "Sales Team ID ",
      "_CustomerID": "_Customer ID ",
      "_StoreID": "_Store ID ",
      "_ProductID": "_Product ID ",
      "Order Quantity": "Order Quantity \n\n1 - 8:\nhigher means order quantity is higher or customer needs more",
      "Discount Applied": "Discount Applied \n\n0.2: 20% discount",
      "Unit Price": "unit price ",
      "Unit Cost": "unit cost \n\nnet profit = Unit Price - Unit Cost"
    }
  },
  "computer_student": {
    "course": {
      "course_id": "unique id number identifying courses ",
      "courseLevel": "course level \n\n\u0095 Level_300: basic or medium undergraduate courses.\n\u0095 Level_400: high-level or harder undergraduate course.\n\u0095 Level_500: professional or master/graduate courses"
    },
    "person": {
      "p_id": "the unique number identifying each person ",
      "professor": "whether the person is a professor 0: professor\n1: student",
      "student": "whether the person is a student 0: professor\n1: student",
      "hasPosition": "whether the person has a position in the faculty 0: the person is not a faculty member\nCommon Sense evidence:\nfaculty_aff: affiliated faculty\nfaculty_eme: faculty employee",
      "inPhase": "the phase of qualification the person is undergoing 0: the person is not undergoing the phase of qualification",
      "yearsInProgram": "the year of the program the person is at 0: the person is not in any programs\nCommon Sense evidence:\nyearX means the person is on the Xth year of the program"
    },
    "advisedBy": {
      "p_id": "id number identifying each person ",
      "p_id_dummy": "the id number identifying the advisor "
    },
    "taughtBy": {
      "course_id": "the identification number identifying each course ",
      "p_id": "the identification number identifying each person "
    }
  },
  "works_cycles": {
    "CountryRegion": {
      "CountryRegionCode": "The unique id number identifying Country Region ISO standard code for countries and regions. ",
      "Name": "Country or region name. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Culture": {
      "CultureID": "The unique id string identifying the language in which AdventrueWorks data is stored. ",
      "Name": "Name of the language. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Currency": {
      "CurrencyCode": "The unique id string identifying the currency. ",
      "Name": "Currency name. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "CountryRegionCurrency": {
      "CountryRegionCode": "The id number identifying Country Region ISO standard code for countries and regions. ",
      "CurrencyCode": "ISO standard currency code. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Person": {
      "BusinessEntityID": "The unique id number identifying the person. ",
      "PersonType": "The type of person. Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact",
      "NameStyle": "Name Style. 0 = The data in FirstName and LastName are stored in western style (first name, last name) order. 1 = Eastern style (last name, first name) order. Default: 0",
      "Title": "A courtesy title. ",
      "FirstName": "First name of the person. Default: getdate()",
      "MiddleName": "Middle name or middle initial of the person. ",
      "LastName": "Last name of the person. ",
      "Suffix": "Surname suffix. ",
      "EmailPromotion": "Email Promotion. 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. Default: 0",
      "AdditionalContactInfo": "Additional contact information about the person stored in xml format. ",
      "Demographics": "Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "BusinessEntityContact": {
      "BusinessEntityID": "The id number identifying the Business Entity ID. ",
      "PersonID": "The id number identifying the Person ID. ",
      "ContactTypeID": "The id number identifying the contact type ID. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "EmailAddress": {
      "BusinessEntityID": "The id number identifying the person associated with this email address. ",
      "EmailAddressID": "The ID of this email address. ",
      "EmailAddress": "The E-mail address for the person. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Employee": {
      "BusinessEntityID": "The id number identifying the employee. ",
      "NationalIDNumber": "The national identification number such as a social security number. ",
      "LoginID": "Network login. ",
      "OrganizationNode": "Where the employee is located in corporate hierarchy. Default: newid()",
      "OrganizationLevel": "The depth of the employee in the corporate hierarchy. Computed: [OrganizationNode].[GetLevel]()",
      "JobTitle": "Work title such as Buyer or Sales Representative. ",
      "BirthDate": "Date of birth. ",
      "MaritalStatus": "Whether this employee is married or not. M = Married, S = Single",
      "Gender": "The gender of this employee. M = Male, F = Female",
      "HireDate": "The employee was hired on this date. ",
      "SalariedFlag": "Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.",
      "VacationHours": "The number of available vacation hours. ",
      "SickLeaveHours": "The number of available sick leave hours. ",
      "CurrentFlag": "Whether this employee is active or not 0 = Inactive, 1 = Active",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Password": {
      "BusinessEntityID": "The unique id number identifying the person. ",
      "PasswordHash": "Password for the e-mail account. ",
      "PasswordSalt": "Random value concatenated with the password string before the password is hashed. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "PersonCreditCard": {
      "BusinessEntityID": "The id number identifying the person. ",
      "CreditCardID": "Credit card identification number. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductCategory": {
      "ProductCategoryID": "The unique id number identifying the product category. ",
      "Name": "Category description ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductDescription": {
      "ProductDescriptionID": "The unique id number identifying the product description. ",
      "Description": "Description of the product. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductModel": {
      "ProductModelID": "The unique id number identifying the product model. ",
      "Name": "Product model description. ",
      "CatalogDescription": "Detailed product catalog information in xml format. ",
      "Instructions": "Manufacturing instructions in xml format. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductModelProductDescriptionCulture": {
      "ProductModelID": "The id number identifying the product model. ",
      "ProductDescriptionID": "Product description identification number. ",
      "CultureID": "Culture identification number. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductPhoto": {
      "ProductPhotoID": "unique id number identifying the products ",
      "ThumbNailPhoto": "Small image of the product. The size of small images.\n\n\n\"80x49 GIF image 3.07 kB\". \"3.07\" represents the size of images, \"GIF\" refers to type of images like JPEG, GIF, etc. ",
      "ThumbnailPhotoFileName": "Small image file name ",
      "LargePhoto": "Large image of the product. ",
      "LargePhotoFileName": "Large image file name. \n\nsimilar to ThumbNailPhoto",
      "ModifiedDate": "Date and time the record was last updated. "
    },
    "ProductSubcategory": {
      "ProductSubcategoryID": "Unique id number identifying the subcategory of products. ",
      "ProductCategoryID": "Product category identification number. ",
      "Name": "Subcategory description. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SalesReason": {
      "SalesReasonID": "The unique number identifying SalesReason records. ",
      "Name": "Sales reason description ",
      "ReasonType": "Category the sales reason belongs to. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SalesTerritory": {
      "TerritoryID": "The unique id number for SalesTerritory records. ",
      "Name": "Sales territory description. ",
      "CountryRegionCode": "ISO standard country or region code. ",
      "Group": "Geographic area to which the sales territory belong. ",
      "SalesYTD": "Sales in the territory year to date. ",
      "SalesLastYear": "Sales in the territory the previous year. ",
      "CostYTD": "Business costs in the territory year to date. ",
      "CostLastYear": "Business costs in the territory the previous year. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SalesPerson": {
      "BusinessEntityID": "The unique id number identifying the business entity. ",
      "TerritoryID": "Territory currently assigned to. ",
      "SalesQuota": "Projected yearly sales ",
      "Bonus": "Bonus due if quota is met. \n\nif bonus is equal to 0, it means this salesperson doesn't meet quota. vice versa.",
      "CommissionPct": "commissionpct Commission percent received per sale",
      "SalesYTD": "Sales total year to date ",
      "SalesLastYear": "Sales total of previous year. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SalesPersonQuotaHistory": {
      "BusinessEntityID": "Sales person identification number ",
      "QuotaDate": "Sales quota date ",
      "SalesQuota": "Sales quota amount ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SalesTerritoryHistory": {
      "BusinessEntityID": "The sales representative. ",
      "TerritoryID": "Territory identification number. ",
      "StartDate": "Date the sales representive started work in the territory. ",
      "EndDate": "Date the sales representative left work in the territory. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ScrapReason": {
      "ScrapReasonID": "The unique number identifying for ScrapReason records. ",
      "Name": "Failure description. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Shift": {
      "ShiftID": "The unique number identifying the shift. ",
      "Name": "Shift description. ",
      "StartTime": "Shift start time. ",
      "EndTime": "Shift end time. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ShipMethod": {
      "ShipMethodID": "The unique number for ShipMethod records. ",
      "Name": "Shipping company name. ",
      "ShipBase": "Minimum shipping charge. ",
      "ShipRate": "Shipping charge per pound. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SpecialOffer": {
      "SpecialOfferID": "The unique id number identifying the special offer. ",
      "Description": "Discount description. ",
      "DiscountPct": "Discount percentage. ",
      "Type": "Discount type category. ",
      "Category": "Group the discount applies to such as Reseller or Customer. ",
      "StartDate": "Discount start date. ",
      "EndDate": "Discount end date. \n\npromotion date = EndDate - StartDate",
      "MinQty": "Minimum discount percent allowed. ",
      "MaxQty": "Maximum discount percent allowed. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "BusinessEntityAddress": {
      "BusinessEntityID": "Number identifying the business entity. ",
      "AddressID": "Number identifying the address. ",
      "AddressTypeID": "Number identifying the address type. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SalesTaxRate": {
      "SalesTaxRateID": "Unique id number identifying sales tax records. ",
      "StateProvinceID": "id number identifying state province. ",
      "TaxType": "Tax Type 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions",
      "TaxRate": "Tax rate amount ",
      "Name": "Tax rate description \n\nif there's \"+\" in the value, it means this sales are charged by multiple types of tax.\n",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Store": {
      "BusinessEntityID": "The unique number identifying business entity. ",
      "Name": "Name of the store. ",
      "SalesPersonID": "ID of the sales person assigned to the customer. ",
      "Demographics": "Demographic information about the store such as the number of employees, annual sales and store type. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SalesOrderHeaderSalesReason": {
      "SalesOrderID": "The id number of sales order. ",
      "SalesReasonID": "The id number for sales reasons. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "TransactionHistoryArchive": {
      "TransactionID": "The unique id number identifying TransactionHistory records. ",
      "ProductID": "Product identification number. ",
      "ReferenceOrderID": "Purchase order, sales order, or work order identification number. ",
      "ReferenceOrderLineID": "Line number associated with the purchase order, sales order, or work order. ",
      "TransactionDate": "Date and time of the transaction. ",
      "TransactionType": "Type of transaction records. \n \nW = WorkOrder, S = SalesOrder, P = PurchaseOrder",
      "Quantity": "Product quantity. ",
      "ActualCost": "Product cost. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "UnitMeasure": {
      "UnitMeasureCode": "The unique identifying numbers for measure. ",
      "Name": "Unit of measure description. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductCostHistory": {
      "ProductID": "The id number identifying the product. ",
      "StartDate": "Product cost start date ",
      "EndDate": "Product cost end date ",
      "StandardCost": "Standard cost of the product. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductDocument": {
      "ProductID": "The id number identifying the product. ",
      "DocumentNode": "The hierarchy id number identifying the Document node. Document identification number",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductInventory": {
      "ProductID": "Product identification number. ",
      "LocationID": "Inventory location identification number. Document identification number",
      "Shelf": "Storage compartment within an inventory location. ",
      "Bin": "Storage container on a shelf in an inventory location. ",
      "Quantity": "Quantity of products in the inventory location. Default: 0",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductProductPhoto": {
      "ProductID": "Product identification number. ",
      "ProductPhotoID": "Product photo identification number. ",
      "Primary": "Whether this photo is the principal image or not. 0 = Photo is not the principal image. \n1 = Photo is the principal image. \n\n\nstaff can mention \"principal\" in the question in order to make the question more realistic.",
      "ModifiedDate": "modifieddate "
    },
    "ProductReview": {
      "ProductReviewID": "The unique id numbers identifying product reviews. ",
      "ProductID": "Product identification number. ",
      "ReviewerName": "The name of reviewer. ",
      "ReviewDate": "Date review was submitted.  Default: getdate()",
      "EmailAddress": "Reviewer's e-mail address. ",
      "Rating": "Product rating given by the reviewer.  \n\nScale is 1 to 5 with 5 as the highest rating.",
      "Comments": "comments ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ShoppingCartItem": {
      "ShoppingCartItemID": "The unique id number identifying the shopping cart item records. ",
      "ShoppingCartID": "Shopping cart identification number. ",
      "Quantity": "Product quantity ordered. Default: 1",
      "ProductID": "Product ordered. ",
      "DateCreated": "Date the time the record was created.  Default: getdate()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SpecialOfferProduct": {
      "SpecialOfferID": "The id for SpecialOfferProduct records ",
      "ProductID": "Product identification number. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SalesOrderDetail": {
      "SalesOrderID": "salesorderid ",
      "SalesOrderDetailID": "salesorderdetailid ",
      "CarrierTrackingNumber": "carriertrackingnumber ",
      "OrderQty": "orderqty ",
      "ProductID": "productid ",
      "SpecialOfferID": "specialofferid ",
      "UnitPrice": "unitprice ",
      "UnitPriceDiscount": "unitpricediscount ",
      "LineTotal": "linetotal ",
      "rowguid": "rowguid ",
      "ModifiedDate": "modified date Date and time the record was last updated. "
    },
    "TransactionHistory": {
      "TransactionID": "The unique id number identifying TransactionHistory records. ",
      "ProductID": "Product identification number. ",
      "ReferenceOrderID": "Purchase order, sales order, or work order identification number. ",
      "ReferenceOrderLineID": "Line number associated with the purchase order, sales order, or work order. ",
      "TransactionDate": "Date and time of the transaction. ",
      "TransactionType": "Type of transaction records. \n\nW = WorkOrder, S = SalesOrder, P = PurchaseOrder",
      "Quantity": "Product quantity. ",
      "ActualCost": "Product cost. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Vendor": {
      "BusinessEntityID": "The unique number identifying Vendor records. ",
      "AccountNumber": "Vendor account (identification) number. ",
      "Name": "Company name. ",
      "CreditRating": "Rating of credit. \n \n1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average. \n\n\n1, 2, 3 can represent good credit, 4 is average credit, 5 is bad credit.",
      "PreferredVendorStatus": "Preferred Vendor Status \n \n0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.",
      "ActiveFlag": "Vendor URL \n\n0 = Vendor no longer used. 1 = Vendor is actively used. Default: 1",
      "PurchasingWebServiceURL": "Purchasing Web Service URL ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductVendor": {
      "ProductID": "The id number identifying the products. ",
      "BusinessEntityID": "The id number identifying the business entities. ",
      "AverageLeadTime": "The average span of time between placing an order with the vendor and receiving the purchased product. in days",
      "StandardPrice": "The vendor's usual selling price. ",
      "LastReceiptCost": "The selling price when last purchased. \n\nprofit on net can be computed by LastReceiptCost - StandardPrice",
      "LastReceiptDate": "Date the product was last received by the vendor. ",
      "MinOrderQty": "The maximum quantity that should be ordered. ",
      "MaxOrderQty": "The minimum quantity that should be ordered. ",
      "OnOrderQty": "The quantity currently on order. if it's equal to 0, it means \"out of stock\"",
      "UnitMeasureCode": "The product's unit of measure. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "PurchaseOrderHeader": {
      "PurchaseOrderID": "The unique id number identifying purchase order. ",
      "RevisionNumber": "Incremental number to track changes to the purchase order over time.  ",
      "Status": "Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete Default: 1",
      "EmployeeID": "Employee who created the purchase order. ",
      "VendorID": "Vendor with whom the purchase order is placed. ",
      "ShipMethodID": "Shipping method ",
      "OrderDate": "Purchase order creation date Default: getdate()",
      "ShipDate": "Estimated shipment date from the vendor. ",
      "SubTotal": "Purchase order subtotal  Computed as SUM (PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID",
      "TaxAmt": "Tax amount ",
      "Freight": "Shipping cost ",
      "TotalDue": "Total due to vendor Computed as Subtotal + TaxAmt + Freight. Computed: isnull(([SubTotal]+[TaxAmt])+[Freight],(0))",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "PurchaseOrderDetail": {
      "PurchaseOrderID": "Purchase order number. ",
      "PurchaseOrderDetailID": "Unique purchase detail order. ",
      "DueDate": "Date the product is expected to be received. ",
      "OrderQty": "Quantity ordered. ",
      "ProductID": "The id number identifying products. ",
      "UnitPrice": "Vendor's selling price of a single product. ",
      "LineTotal": "Per product subtotal Computed as OrderQty * UnitPrice. Computed: isnull([OrderQty]*[UnitPrice],(0.00))",
      "ReceivedQty": "Quantity actually received from the vendor. ",
      "RejectedQty": "rejectedqty ",
      "StockedQty": "stockedqty ",
      "ModifiedDate": "modifieddate "
    },
    "WorkOrder": {
      "WorkOrderID": "The unique id number identifying work order. ",
      "ProductID": "Product identification number. ",
      "OrderQty": "Product quantity to build. ",
      "StockedQty": "Quantity built and put in inventory.  Computed: isnull([OrderQty]-[ScrappedQty],(0))",
      "ScrappedQty": "Quantity that failed inspection. ",
      "StartDate": "Work order start date. ",
      "EndDate": "Work order end date. ",
      "DueDate": "Work order due date. ",
      "ScrapReasonID": "Reason for inspection failure. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "WorkOrderRouting": {
      "WorkOrderID": "The id number of work order. ",
      "ProductID": "The id number identifying products. ",
      "OperationSequence": "Indicates the manufacturing process sequence. ",
      "LocationID": "Manufacturing location where the part is processed. ",
      "ScheduledStartDate": "Planned manufacturing start date. ",
      "ScheduledEndDate": "Planned manufacturing end date. ",
      "ActualStartDate": "Actual start date. ",
      "ActualEndDate": "Actual end date. ",
      "ActualResourceHrs": "Number of manufacturing hours used. ",
      "PlannedCost": "Estimated manufacturing cost. ",
      "ActualCost": "Actual manufacturing cost. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Customer": {
      "CustomerID": "The unique id number identifying the customer. ",
      "PersonID": "The id number identifying the person. ",
      "StoreID": "The id number identifying the store / bussiness entity. ",
      "TerritoryID": "ID of the territory in which the customer is located. ",
      "AccountNumber": "Unique number identifying the customer assigned by the accounting system. Computed: isnull('AW'+[ufnLeadingZeros]([CustomerID]),'')",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ProductListPriceHistory": {
      "ProductID": "Product identification number. ",
      "StartDate": "List price start date. ",
      "EndDate": "List price end date. ",
      "ListPrice": "Product list price. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Address": {
      "AddressID": "Unique id number identifying the address. Primary key for Address records. Identity / Auto increment column.",
      "AddressLine1": "First street address line. ",
      "AddressLine2": "Second street address line. \n\n1. total address = (AddressLine1+AddressLine2) \n2. if AddressLine2 is not null, it means the address is too long",
      "City": "Name of the city. ",
      "StateProvinceID": "Identification number for the state or province.  ",
      "PostalCode": "Postal code for the street address. ",
      "SpatialLocation": "Latitude and longitude of this address. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "AddressType": {
      "AddressTypeID": "Unique numbers identifying address type records. Primary key for AddressType records. Identity / Auto increment column.",
      "Name": "Address type description.  ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "BillOfMaterials": {
      "BillOfMaterialsID": "The unique number identifying bill of materials. Primary key for BillOfMaterials records. Identity / Auto increment column.",
      "ProductAssemblyID": "Parent product identification number. ",
      "ComponentID": "Component identification number. ",
      "StartDate": "Date the component started being used in the assembly item. ",
      "EndDate": "Date the component stopped being used in the assembly item. \n\n1. assembly item duration = (EndDate - StartDate) \n2. if EndDate is null, it means the assembly item doesn't finish (still going on).",
      "UnitMeasureCode": "Standard code identifying the unit of measure for the quantity. ",
      "BOMLevel": "Indicates the depth the component is from its parent (column2)(AssemblyID). ",
      "PerAssemblyQty": "Quantity of the component needed to create the assembly. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "BusinessEntity": {
      "BusinessEntityID": "Unique number of identifying business entity. Primary key for all customers, vendors, and employees. Identity / Auto increment column",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "ContactType": {
      "ContactTypeID": "The unique id number identifying the contact type ID. ",
      "Name": "Contact type description. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "CurrencyRate": {
      "CurrencyRateID": "The unique id number identifying the currency rate record. ",
      "CurrencyRateDate": "Date and time the exchange rate was obtained. ",
      "FromCurrencyCode": "Exchange rate was converted from this currency code. ",
      "ToCurrencyCode": "Exchange rate was converted to this currency code. ",
      "AverageRate": "Average exchange rate for the day. ",
      "EndOfDayRate": "Final exchange rate for the day. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Department": {
      "DepartmentID": "The unique id number identifying the department. ",
      "Name": "Name of the department. ",
      "GroupName": "Name of the group to which the department belongs. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "EmployeeDepartmentHistory": {
      "BusinessEntityID": "Employee identification number. ",
      "DepartmentID": "Department in which the employee worked including currently. ",
      "ShiftID": "Identifies which 8-hour shift the employee works. ",
      "StartDate": "Date the employee started working in the department. ",
      "EndDate": "Date the employee ended working in the department. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "EmployeePayHistory": {
      "BusinessEntityID": "Employee identification number. ",
      "RateChangeDate": "Date the change in pay is effective. ",
      "Rate": "Salary hourly rate. ",
      "PayFrequency": "Pay Frequency. 1 = Salary received monthly, 2 = Salary received biweekly",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "JobCandidate": {
      "JobCandidateID": "The unique id number identifying the job candidates. ",
      "BusinessEntityID": "Employee identification number if applicant was hired. ",
      "Resume": "Rsum in XML format. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Location": {
      "LocationID": "The unique id number identifying the job candidates. ",
      "Name": "Location description. ",
      "CostRate": "Standard hourly cost of the manufacturing location. Default: 0.00",
      "Availability": "Work capacity (in hours) of the manufacturing location. Default: 0.00",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "PhoneNumberType": {
      "PhoneNumberTypeID": "The id number identifying the telephone number type records. ",
      "Name": "Name of the telephone number type. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Product": {
      "ProductID": "The unique id number identifying the product. ",
      "Name": "Name of the product. ",
      "ProductNumber": "The unique product identification number. ",
      "MakeFlag": "The source of product make. 0 = Product is purchased, 1 = Product is manufactured in-house. Default: 1",
      "FinishedGoodsFlag": "Whether the product is salable or not. 0 = Product is not a salable item. 1 = Product is salable. Default: 1",
      "Color": "Color Product color.",
      "SafetyStockLevel": "The minimum inventory quantity. ",
      "ReorderPoint": "Inventory level that triggers a purchase order or work order. ",
      "StandardCost": "Standard cost of the product. ",
      "ListPrice": "Selling price \n \nprofit = ListPrice - StandardCost",
      "Size": "Product size ",
      "SizeUnitMeasureCode": "Unit of measure for Size column. ",
      "WeightUnitMeasureCode": "Unit of measure for Weight column. ",
      "Weight": "Product weight ",
      "DaysToManufacture": "Number of days required to manufacture the product. ",
      "ProductLine": "Product Routine R = Road, M = Mountain, T = Touring, S = Standard",
      "Class": "Product quality class H = High, M = Medium, L = Low",
      "Style": "Style W = Womens, M = Mens, U = Universal",
      "ProductSubcategoryID": "Product is a member of this product subcategory. ",
      "ProductModelID": "Product is a member of this product model. ",
      "SellStartDate": "Date the product was available for sale. ",
      "SellEndDate": "Date the product was no longer available for sale. ",
      "DiscontinuedDate": "Date the product was discontinued. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "Document": {
      "DocumentNode": "The unique hierarchy id identifying the document nodes. ",
      "DocumentLevel": "Depth in the document hierarchy. Computed: [DocumentNode].[GetLevel]()",
      "Title": "Title of the document. ",
      "Owner": "Employee who controls the document. ",
      "FolderFlag": "The type of the folders. 0 = This is a folder, 1 = This is a document. Default: 0",
      "FileName": "Uniquely identifying the record. Used to support a merge replication sample.  File name of the document",
      "FileExtension": "File extension indicating the document type. ",
      "Revision": "Revision number of the document. ",
      "ChangeNumber": "Engineering change approval number. ",
      "Status": "Status of document processing. 1 = Pending approval, 2 = Approved, 3 = Obsolete",
      "DocumentSummary": "Document abstract. \n\nif no document Summary: it means this document is private",
      "Document": "Complete document. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "StateProvince": {
      "StateProvinceID": "The unique number for StateProvince records. ",
      "StateProvinceCode": "ISO standard state or province code. ",
      "CountryRegionCode": "ISO standard country or region code. ",
      "IsOnlyStateProvinceFlag": "isonlystateprovinceflag 0 = StateProvinceCode exists. \n1 = StateProvinceCode unavailable, using CountryRegionCode. \nDefault: 1. \n\n\nTo ask whether the StateProvinceCode exists or not.",
      "Name": "State or province description. ",
      "TerritoryID": "ID of the territory in which the state or province is located. ",
      "rowguid": "Uniquely identifying the record. Used to support a merge replication sample.  Default: newid()",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "CreditCard": {
      "CreditCardID": "The unique id number identifying the credit card. ",
      "CardType": "Credit card name. ",
      "CardNumber": "Credit card number. ",
      "ExpMonth": "Credit card expiration month. ",
      "ExpYear": "Credit card expiration year. ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    },
    "SalesOrderHeader": {
      "SalesOrderID": "The id number of sales order. ",
      "RevisionNumber": "revisionnumber ",
      "OrderDate": "orderdate ",
      "DueDate": "duedate ",
      "ShipDate": "Estimated shipment date from the vendor ",
      "Status": "Order current status 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete Default: 1",
      "OnlineOrderFlag": "onlineorderflag ",
      "SalesOrderNumber": "salesordernumber ",
      "PurchaseOrderNumber": "purchaseordernumber ",
      "AccountNumber": "accountnumber ",
      "CustomerID": "customerid ",
      "SalesPersonID": "salespersonid ",
      "TerritoryID": "territoryid ",
      "BillToAddressID": "billtoaddressid ",
      "ShipToAddressID": "shiptoaddressid ",
      "ShipMethodID": "Shipping method ",
      "CreditCardID": "creditcardid ",
      "CreditCardApprovalCode": "creditcardapprovalcode ",
      "CurrencyRateID": "currencyrateid ",
      "SubTotal": "subtotal ",
      "TaxAmt": "Tax amount ",
      "Freight": "Shipping cost ",
      "TotalDue": "Total due to vendor ",
      "Comment": "comment ",
      "rowguid": "rowguid ",
      "ModifiedDate": "Date and time the record was last updated.  Default: getdate()"
    }
  },
  "food_inspection_2": {
    "employee": {
      "employee_id": "the unique id for the employee ",
      "first_name": "first name of the employee ",
      "last_name": "last name of the employee \n full name: first name + last_name",
      "address": "physical street address of the employee ",
      "city": "city of the employee's address ",
      "state": "state of the customer's address ",
      "zip": "postal code of the employee's address ",
      "phone": "telephone number to reach the customer ",
      "title": "career title of the employee \u0095 Sanitarian \n\u0095 Supervisor \n\u0095 Division Manager",
      "salary": "the salary of the employee us dollars / year\n\n monthly salary: salary / 12",
      "supervisor": "the employee id of the employee's supervisor "
    },
    "establishment": {
      "license_no": "the license number of the facility ",
      "dba_name": "the dba name of the facility \n DBA stands for \u0093doing business as.\u0094 It's also referred to as your business's assumed, trade or fictitious name.",
      "aka_name": "the aka name of the facility \n the aka name is used to indicate another name that a person or thing has or uses",
      "facility_type": "the facility type \n can ask some questions about its categories, for i.e.:  \n\u0095 \"Restaurant\" and \"Cafeteria\" refers to restaurants \n\u0095 \u0094PASTRY school\u0093 and \"CULINARY ARTS SCHOOL\" belongs to \"Education\" or \"School\". Please design this and mention your evidence in the commonsense part of questions, thanks",
      "risk_level": "the risk level of the facility \n Facilities with higher risk level have more serious food safety issues",
      "address": "physical street address of the facility ",
      "city": "city of the facility's address ",
      "state": "state of the facility's address ",
      "zip": "postal code of the facility's address ",
      "latitude": "the latitude of the facility ",
      "longitude": "the longitude of the facility \n location = POINT(latitude, longitude)",
      "ward": "the ward number of the facility \n Ward number is the number assigned by the local authorities to identify the population count in each town, village and district usually for electoral purposes or to extract property and locality details"
    },
    "inspection": {
      "inspection_id": "the unique id for the inspection ",
      "inspection_date": "the date of the inspection yyyy-mm-dd",
      "inspection_type": "the type of the inspection ",
      "results": "the inspection results \u0095 Pass \n\u0095 Pass w/ Conditions \n\u0095 Fail \n\u0095 Out of Business \n\u0095 Business Not Located \n\u0095 No Entry \n\u0095 Not Ready \n\n the quality is verified: Pass + Pass w/ Conditions",
      "employee_id": "the id of the employee who is responsible for the inspection ",
      "license_no": "the license number of the facility that is inspected ",
      "followup_to": "the id of inspections that this inspection is following up \n 'No data' means the inspection has no followup.\nif followup_to has value: \n\u0095 it's the parent inspection id, and this value represents child inspection id  \n\u0095 the entire inspection: followup_to + inspection_id"
    },
    "inspection_point": {
      "point_id": "the unique id for the inspection point ",
      "Description": "the specific description of the inspection results ",
      "category": "the inspection category ",
      "code": "the sanitary operating requirement code \n Each code stands for an operating requirement",
      "fine": "the fines for food safety problems \n The fine of more serious food safety problems will be higher. \n\u0095 Minor: 100 \n\u0095 Serious: 250 \n\u0095 Critical: 500",
      "point_level": "point level Critical / Serious/ Minor"
    },
    "violation": {
      "inspection_id": "the unique id for the inspection ",
      "point_id": "the inspection point id ",
      "fine": "the fine of the violation \n The fine of more serious food safety problems will be higher. \n\u0095 Minor: 100 \n\u0095 Serious: 250 \n\u0095 Critical: 500",
      "inspector_comment": "the comment of the inspector "
    }
  },
  "citeseer": {
    "cites": {
      "cited_paper_id": "cited_paper_id is the ID of the paper being cited cited_paper_id is the ID of the paper being cited",
      "citing_paper_id": "citing_paper_id stands for the paper which contains the citation citing_paper_id stands for the paper which contains the citation"
    },
    "paper": {
      "paper_id": "unique string ID of the paper unique string ID of the paper",
      "class_label": "class_label "
    },
    "content": {
      "paper_id": "unique string ID of the paper unique string ID of the paper",
      "word_cited_id": "rtype whether each word in the vocabulary is present (indicated by 1) or absent (indicated by 0) in the paper"
    }
  },
  "bike_share_1": {
    "station": {
      "id": "unique ID for each station ",
      "name": "Station name ",
      "lat": "latitude \n\nCan represent the location of the station when combined with longitude.",
      "long": "longitude \n\nCan represent the location of the station when combined with \nlatitude.",
      "dock_count": "number of bikes the station can hold ",
      "city": "city ",
      "installation_date": "installation date "
    },
    "status": {
      "station_id": "station id ",
      "bikes_available": "number of available bikes \n\n0 means no bike can be borrowed.",
      "docks_available": "number of available docks \n\n0 means no bike can be returned to this station.",
      "time": "time "
    },
    "trip": {
      "id": "id ",
      "duration": "The duration of the trip in seconds. \n\nduration = end_date - start_date ",
      "start_date": "start date ",
      "start_station_name": "The name of the start station \n\nIt represents the station name the bike borrowed from.",
      "start_station_id": "The ID of the start station ",
      "end_date": "end date ",
      "end_station_name": "The name of the end station \n\nIt represents the station name the bike returned to.",
      "end_station_id": "The ID of the end station ",
      "bike_id": "The ID of the bike ",
      "subscription_type": "subscription type Allowed input: Subscriber, Customer.",
      "zip_code": "zip code "
    },
    "weather": {
      "date": "date ",
      "max_temperature_f": "max temperature in Fahrenheit degree \n\nIt represents the hottest temperature.",
      "mean_temperature_f": "mean temperature in Fahrenheit degree ",
      "min_temperature_f": "min temperature in Fahrenheit degree \n\nIt represents the coldest temperature.",
      "max_dew_point_f": "max dew point in Fahrenheit degree  ",
      "mean_dew_point_f": "mean dew point in Fahrenheit degree  ",
      "min_dew_point_f": "min dew point in Fahrenheit degree  ",
      "max_humidity": "max humidity ",
      "mean_humidity": "mean humidity ",
      "min_humidity": "min humidity ",
      "max_sea_level_pressure_inches": "max sea level pressure in inches ",
      "mean_sea_level_pressure_inches": "mean sea level pressure in inches ",
      "min_sea_level_pressure_inches": "min sea level pressure in inches ",
      "max_visibility_miles": "max visibility in miles ",
      "mean_visibility_miles": "mean visibility in miles ",
      "min_visibility_miles": "min visibility in miles ",
      "max_wind_Speed_mph": "max wind Speed in mph ",
      "mean_wind_speed_mph": "mean wind Speed in mph ",
      "max_gust_speed_mph": "max gust Speed in mph ",
      "precipitation_inches": "precipitation in inches ",
      "cloud_cover": "cloud cover ",
      "events": "events Allowed input: [null], Rain, other",
      "wind_dir_degrees": "wind direction degrees ",
      "zip_code": "zip code "
    }
  },
  "law_episode": {
    "Episode": {
      "episode_id": "the unique identifier of the episode ",
      "series": "the name of the series ",
      "season": "a number indicating the season of the episode ",
      "episode": "the sequential number of the episode within a specific season ",
      "number_in_series": "the overall sequence number of episode in the entire series ",
      "title": "the title of the episode ",
      "summary": "a brief description of what happens in the episode ",
      "air_date": "the date the episode was initially broadcast in the United States ",
      "episode_image": "a link to an image from the episode ",
      "rating": "the weighted average of the votes received for the episode \n The higher rating means the episode has more positive viewer comments. ",
      "votes": "the total number of rating votes for the episode "
    },
    "Keyword": {
      "episode_id": "the id of the episode ",
      "keyword": "the keyword that is relevant for the episode "
    },
    "Person": {
      "person_id": "the unique identifier for the person ",
      "name": "the name of the person ",
      "birthdate": "the date the person was born if null, it means this birthdate of the person is not available",
      "birth_name": "the name parents gave to the person shortly after birth ",
      "birth_place": "the place where a person was born. \n the birth place info is integrate if birth_name, birth_place, birth_region don't contain null value\nthe full birth place = birth_country +birth_region +birth_place",
      "birth_region": "the geographical area describing where a person was born that is larger than the birth place ",
      "birth_country": "the name of the country where the person was born \n can ask questions about its corresponding continent: e.g.: \nUSA --> North America",
      "height_meters": "how tall the person is in meters ",
      "nickname": "the nickname the person goes by "
    },
    "Award": {
      "award_id": "the unique identifier for the award nomination ",
      "organization": "the name of the organization that grants the award ",
      "year": "the year of the nomination for  the award ",
      "award_category": "the class of the award ",
      "award": "the specific award ",
      "series": "the name of the Law & Order series that has been nominated ",
      "episode_id": "the id of the episode that has been nominated ",
      "person_id": "the id of the person that has been nominated ",
      "role": "the role that has been nominated ",
      "result": "the nomination result Nominee / Winner\n\n 'Winner' means that the award was actually received. "
    },
    "Credit": {
      "episode_id": "the id of the episode to which the credit information pertains ",
      "person_id": "the id of the person to which the credit information pertains ",
      "category": "the kind of credit being recognized ",
      "role": "the role for which the person is being recognized If the credit is for an actor, this is the name of the character he or she portrayed (Dan Florek plays Donald Craven). Otherwise, this is the production role (producer, sound editor).",
      "credited": "whether the credit was displayed in the credits at the end of the episode \n A person may fill a role in an episode, but not show up in the on-screen credits. In this case, the work is said to be \"uncredited.\""
    },
    "Vote": {
      "episode_id": "the id of the episode ",
      "stars": "a number between 1 and 10 indicating how much the viewer enjoyed the episode \n The higher the number, the more the episode was enjoyed",
      "votes": "The total number of viewers that gave the specific episode the number of stars indicated in the \"stars\" column ",
      "percent": "The percent of viewers that gave the specific episode the number of stars indicated in the \"stars\" column "
    }
  },
  "cs_semester": {
    "course": {
      "course_id": "unique id representing the course ",
      "name": "name of the course ",
      "credit": "credit of the course \n\nhigher means more important",
      "diff": "difficulty of the course \n\nhigher --> more difficult\nsmaller --> less difficult"
    },
    "prof": {
      "prof_id": "unique id for professors ",
      "gender": "gender of the professor ",
      "first_name": "the first name of the professor ",
      "last_name": "the last name of the professor  \n\nfull name: first name, last name",
      "email": "email of the professor ",
      "popularity": "popularity of the professor \n\nhigher --> more popular",
      "teachingability": "the teaching ability of the professor \n\nhigher --> more teaching ability, his / her lectures may have better quality",
      "graduate_from": "the school where the professor graduated from "
    },
    "RA": {
      "student_id": "the id numbe representing each student ",
      "capability": "the capability of student on research\n(Evaluated by the professor) higher --> higher research ability / capability",
      "prof_id": "professor who advises this student this value may be repetitive since one professor may advise many students in this semester\n\n\nif a professor advise > 2 students in this semester, it means this professor's research work is heavy\nor: this professor's popularity on research is higher",
      "salary": "the salary of this student. med: average salary\nhigh: higher salary than others\nlow: lower salary\nfree: unpaid RA"
    },
    "registration": {
      "course_id": "the id of courses ",
      "student_id": "the id of students ",
      "grade": "the grades that the students acquire in this course \n\n\u0095 A: excellent -- 4\n\u0095 B: good -- 3\n\u0095 C: fair -- 2\n\u0095 D: poorly pass -- 1\n\u0095 null or empty: this student fails to pass this course\n\u0095 gpa of students for this semester = sum (credits x grade) / sum (credits)",
      "sat": "student satisfaction with the course "
    },
    "student": {
      "student_id": "the unique id to identify students ",
      "f_name": "the first name of the student ",
      "l_name": "the last name of the student \n\nfull name: f_name, l_name",
      "phone_number": "phone number ",
      "email": "email  ",
      "intelligence": "intelligence of the student higher --> more intelligent",
      "gpa": "gpa  ",
      "type": "type of the student \u0095 TPG: taught postgraduate student(master)\n\u0095 RPG: research postgraduate student (master)\n\u0095 UG: undergraduate student(bachelor)\n\n\nboth TPG and RPG are students pursuing a master\u0092s degree; UG are students pursuing the bachelor degree"
    }
  },
  "legislator": {
    "current": {
      "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). \n\nif this value is null or empty, it means this legislator doesn't have account on ballotpedia.org",
      "bioguide_id": "The alphanumeric ID for this legislator  ",
      "birthday_bio": "The legislator's birthday, in YYYY-MM-DD format.",
      "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, \n\nif this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website",
      "fec_id": " A list of IDs for this legislator in Federal Election Commission data. \n\nif this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.",
      "first_name": "first name of the legislator ",
      "gender_bio": "gender of the legislator ",
      "google_entity_id_id": "google entity id \n\nif this value is null or empty, it means this legislator are not google entities",
      "govtrack_id": "The numeric ID for this legislator on GovTrack.us \n\nif this value is null or empty, it means this legislator doesn't have account on GovTrack.us",
      "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ \n\nThe ID is present only for members who have served in the U.S. House.",
      "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). \n\nif this value is null or empty, it means this legislator doesn't have account on VoteView.com ",
      "last_name": "last name of the legislator ",
      "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes \n\nThe ID is present only for members who attended in Senate roll call votes",
      "maplight_id": "The numeric ID for this legislator on maplight.org \n\nif this value is null or empty, it means this legislator doesn't have account on maplight.org",
      "middle_name": "the middle name of the legislator ",
      "nickname_name": "nickname of the legislator ",
      "official_full_name": "official full name ",
      "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. \n\nif this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.",
      "religion_bio": "The legislator's religion. ",
      "suffix_name": "suffix name ",
      "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  \n\nif this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.",
      "votesmart_id": "The numeric ID for this legislator on VoteSmart.org \n\nif this value is null or empty, it means this legislator doesn't have account on VoteSmart.org",
      "wikidata_id": "the id for wikidata ",
      "wikipedia_id": " The Wikipedia page name for the person \n\nif a legislator has wikipedia id, it means he or she is famous or impact"
    },
    "current-terms": {
      "address": "the address of this legislator ",
      "bioguide": "The alphanumeric ID for this legislator  ",
      "caucus": "caucus For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.",
      "chamber": "chamber  senate\n house",
      "class": "class For senators, their election class (1, 2, or 3). \n\n\nonly senator has class, if the value is null or empty, it means this legislator is not senator.",
      "contact_form": "The website URL of the contact page on the legislator's official website ",
      "district": "district For representatives, the district number they are serving from. \n\n\nif null or empty, they are not representatives.",
      "end": "the end of the term end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.",
      "fax": "The fax number of the legislator's Washington, D.C. office only valid if the term is current",
      "last": "the last known number ",
      "name": "name not useful",
      "office": "office  only valid if the term is current, otherwise the last known office",
      "party": "The political party of the legislator. \n\nIf the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.",
      "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).",
      "phone": "The phone number of the legislator's Washington, D.C. office only valid if the term is current, otherwise the last known number",
      "relation": "relation not useful",
      "rss_url": "The URL to the official website's RSS feed ",
      "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) ",
      "state": "state code \n\nAK: Alaska \nAL: Alabama \nAR: Arkansas \nAZ: Arizona \nCA: California \nCO: Colorado \nCT: Connecticut \nDE: Delaware \nFL: Florida \nGA: Georgia \nHI: Hawaii \nIA: Iowa \nID: Idaho \nIL: Illinois \nIN: Indiana \nKS: Kansas \nKY: Kentucky \nLA: Louisiana \nMA: Massachusetts \nMD: Maryland \nME: Maine \nMI: Michigan \nMN: Minnesota \nMO: Missouri \nMS: Mississippi \nMT: Montana \nNC: North Carolina \nND: North Dakota \nNE: Nebraska \nNH: New Hampshire \nNJ: New Jersey\n9 divisions of states in us: (please mention)\nhttps://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf",
      "state_rank": "whether they are the \"junior\" or \"senior\" senator only valid if the term is current, otherwise the senator's rank at the time the term ended\n\n\nonly senator has this value",
      "title": "title of the legislator ",
      "type": "The type of the term. Either \"sen\" for senators or \"rep\" for representatives and delegates to the House",
      "url": "The official website URL of the legislator  only valid if the term is current"
    },
    "historical": {
      "ballotpedia_id": "The ballotpedia.org page name for the person (spaces are given as spaces, not underscores). \n\nif this value is null or empty, it means this legislator doesn't have account on ballotpedia.org",
      "bioguide_previous_id": "The previous alphanumeric ID for this legislator  ",
      "bioguide_id": "The alphanumeric ID for this legislator  ",
      "birthday_bio": "The legislator's birthday, in YYYY-MM-DD format.",
      "cspan_id": "The numeric ID for this legislator on C-SPAN's video website, \n\nif this value is null or empty, it means this legislator doesn't have account on C-SPAN's video website",
      "fec_id": " A list of IDs for this legislator in Federal Election Commission data. \n\nif this value is null or empty, it means this legislator hasn't not been registered in Federal Election Commission data.",
      "first_name": "first name of the legislator ",
      "gender_bio": "gender of the legislator ",
      "google_entity_id_id": "google entity id \n\nif this value is null or empty, it means this legislator are not google entities",
      "govtrack_id": "The numeric ID for this legislator on GovTrack.us \n\nif this value is null or empty, it means this legislator doesn't have account on GovTrack.us",
      "house_history_alternate_id": "The alternative numeric ID for this legislator ",
      "house_history_id": "The numeric ID for this legislator on http://history.house.gov/People/Search/ \n\nThe ID is present only for members who have served in the U.S. House.",
      "icpsr_id": "The numeric ID for this legislator in Keith Poole's VoteView.com website, originally based on an ID system by the Interuniversity Consortium for Political and Social Research (stored as an integer). \n\nif this value is null or empty, it means this legislator doesn't have account on VoteView.com ",
      "last_name": "last name of the legislator ",
      "lis_id": "The alphanumeric ID for this legislator found in Senate roll call votes \n\nThe ID is present only for members who attended in Senate roll call votes",
      "maplight_id": "The numeric ID for this legislator on maplight.org \n\nif this value is null or empty, it means this legislator doesn't have account on maplight.org",
      "middle_name": "the middle name of the legislator ",
      "nickname_name": "nickname of the legislator ",
      "official_full_name": "official full name ",
      "opensecrets_id": "The alphanumeric ID for this legislator on OpenSecrets.org. \n\nif this value is null or empty, it means this legislator doesn't have account on OpenSecrets.org.",
      "religion_bio": "The legislator's religion. ",
      "suffix_name": "suffix name ",
      "thomas_id": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  \n\nif this value is null or empty, it means this legislator doesn't have account on both http://thomas.gov and http://beta.congress.gov.",
      "votesmart_id": "The numeric ID for this legislator on VoteSmart.org \n\nif this value is null or empty, it means this legislator doesn't have account on VoteSmart.org",
      "wikidata_id": "the id for wikidata ",
      "wikipedia_id": " The Wikipedia page name for the person \n\nif a legislator has wikipedia id, it means he or she is famous or impact"
    },
    "historical-terms": {
      "bioguide": "The alphanumeric ID for this legislator  ",
      "address": "the address of this legislator ",
      "caucus": "caucus For independents, the party that the legislator caucuses with, using the same values as the party field. Omitted if the legislator caucuses with the party indicated in the party field. When in doubt about the difference between the party and caucus fields, the party field is what displays after the legislator's name (i.e. \"(D)\") but the caucus field is what normally determines committee seniority. This field was added starting with terms for the 113th Congress.",
      "chamber": "chamber  senate\n house",
      "class": "class For senators, their election class (1, 2, or 3). \n\n\nonly senator has class, if the value is null or empty, it means this legislator is not senator.",
      "contact_form": "The website URL of the contact page on the legislator's official website ",
      "district": "district For representatives, the district number they are serving from. \n\n\nif null or empty, they are not representatives.",
      "end": "the end of the term end: The date the term ended (because the Congress ended or the legislator died or resigned, etc.). End dates follow the Constitutional end of a term. Since 1935, terms begin and end on January 3 at noon in odd-numbered years, and thus a term end date may also be a term start date. Prior to 1935, terms began on March 4 and ended either on March 3 or March 4. The end date is the last date on which the legislator served this term. Unlike the start date, whether Congress was in session or not does not affect the value of this field.",
      "fax": "The fax number of the legislator's Washington, D.C. office only valid if the term is current",
      "last": "the last known number ",
      "middle": "middle ",
      "name": "name not useful",
      "office": "office  only valid if the term is current, otherwise the last known office",
      "party": "The political party of the legislator. \n\nIf the legislator changed parties, this is the most recent party held during the term and party_affiliations will be set. Values are typically \"Democrat\", \"Independent\", or \"Republican\". The value typically matches the political party of the legislator on the ballot in his or her last election, although for state affiliate parties such as \"Democratic Farmer Labor\" we will use the national party name (\"Democrat\") instead to keep the values of this field normalized.",
      "party_affiliations": "This field is present if the legislator changed party or caucus affiliation during the term. The value is a list of time periods, with start and end dates, each of which has a party field and a caucus field if applicable, with the same meanings as the main party and caucus fields. The time periods cover the entire term, so the first start will match the term start, the last end will match the term end, and the last party (and caucus if present) will match the term party (and caucus).",
      "phone": "The phone number of the legislator's Washington, D.C. office only valid if the term is current, otherwise the last known number",
      "relation": "relation not useful",
      "rss_url": "The URL to the official website's RSS feed ",
      "start": "The date legislative service began: the date the legislator was sworn in, if known, or else the beginning of the legislator's term.  Since 1935 regularly elected terms begin on January 3 at noon on odd-numbered years, but when Congress does not first meet on January 3, term start dates might reflect that swearing-in occurred on a later date. (Prior to 1935, terms began on March 4 of odd-numbered years, see here.) ",
      "state": "state code \n\nAK: Alaska \nAL: Alabama \nAR: Arkansas \nAZ: Arizona \nCA: California \nCO: Colorado \nCT: Connecticut \nDE: Delaware \nFL: Florida \nGA: Georgia \nHI: Hawaii \nIA: Iowa \nID: Idaho \nIL: Illinois \nIN: Indiana \nKS: Kansas \nKY: Kentucky \nLA: Louisiana \nMA: Massachusetts \nMD: Maryland \nME: Maine \nMI: Michigan \nMN: Minnesota \nMO: Missouri \nMS: Mississippi \nMT: Montana \nNC: North Carolina \nND: North Dakota \nNE: Nebraska \nNH: New Hampshire \nNJ: New Jersey\n9 divisions of states in us: (please mention)\nhttps://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf",
      "state_rank": "whether they are the \"junior\" or \"senior\" senator only valid if the term is current, otherwise the senator's rank at the time the term ended\n\n\nonly senator has this value",
      "title": "title of the legislator ",
      "type": "The type of the term. Either \"sen\" for senators or \"rep\" for representatives and delegates to the House",
      "url": "The official website URL of the legislator  only valid if the term is current"
    },
    "social-media": {
      "bioguide": "The unique alphanumeric ID for this legislator  ",
      "facebook": "The username of the current official Facebook presence of the legislator. ",
      "facebook_id": "The numeric ID of the current official Facebook presence of the legislator. ",
      "govtrack": "The numeric ID for this legislator on GovTrack.us ",
      "instagram": "The current official Instagram handle of the legislator. ",
      "instagram_id": "The numeric ID of the current official Instagram handle of the legislator. ",
      "thomas": "The numeric ID for this legislator on http://thomas.gov and http://beta.congress.gov.  ",
      "twitter": "The current official Twitter handle of the legislator. ",
      "twitter_id": "The numeric ID of the current official twitter handle of the legislator. ",
      "youtube": "The current official YouTube username of the legislator. ",
      "youtube_id": "The current official YouTube channel ID of the legislator. "
    }
  },
  "world": {
    "City": {
      "ID": "the unique id for the city ",
      "Name": "the name of the city ",
      "CountryCode": "the country code of the country that the city is belonged ",
      "District": "the district where the city locates ",
      "Population": "the number of the population in the area \n\n\nmore population --> more crowded"
    },
    "Country": {
      "Code": "the unique country code of the country ",
      "Name": "the country name ",
      "Continent": "the continent that the country locates ",
      "Region": "the region that the country locates ",
      "SurfaceArea": "the surface area of the country ",
      "IndepYear": "the year that the country declared independence  ",
      "Population": "the number of the population in the area \n\n\nmore population --> more crowded",
      "LifeExpectancy": "the life expectancy at birth of the country \n\n\n Life expectancy at birth is defined as how long, on average, a newborn can expect to live if current death rates do not change",
      "GNP": "the GNP of the country \n\n\n GNP measures the total monetary value of the output produced by a country's residents. ",
      "GNPOld": "Gross national product - old value. ",
      "LocalName": "The country's local name ",
      "GovernmentForm": "The country's goverment form. \n\n\nRepublic: governmentform contains \"Republic\"",
      "HeadOfState": "The head of state full name. ",
      "Capital": "The country's capital  \n\n\nif the capital is null, it means this country doesn't have a city where a region's government is located",
      "Code2": "The second country code. "
    },
    "CountryLanguage": {
      "CountryCode": "The unique code for country  ",
      "Language": "Country language ",
      "IsOfficial": "Information on whether the language is official in a given country T / F",
      "Percentage": "Percentage of language use "
    }
  },
  "cookbook": {
    "Ingredient": {
      "ingredient_id": "the unique identifier for the ingredient ",
      "category": "the category of the ingredient ",
      "name": "the name of the ingredient ",
      "plural": "the plural suffix of the ingredient "
    },
    "Recipe": {
      "recipe_id": "the unique identifier for the recipe ",
      "title": "the title of the recipe ",
      "subtitle": "the subtitle of the recipe ",
      "servings": "the number of people the recipe can serve ",
      "yield_unit": "the unit of the yield for the recipe ",
      "prep_min": "the preparation minute of the recipe ",
      "cook_min": "the cooked minute of the recipe ",
      "stnd_min": "the stand minute of the price \n The stand minute stands for the time to take the dish away from the heat source. \nthe total time of the recipe = prep_min + cook_min + stnd_min",
      "source": "the source of the recipe ",
      "intro": "the introduction of the recipe ",
      "directions": "the directions of the recipe "
    },
    "Nutrition": {
      "recipe_id": "the id of the recipe ",
      "protein": "the protein content in the recipe ",
      "carbo": "the carbo content in the recipe ",
      "alcohol": "the alcohol content in the recipe ",
      "total_fat": "the total fat content in the recipe \n higher --> higher possibility to gain weight",
      "sat_fat": "the saturated fat content in the recipe \n unsaturated fat = total_fat - saturated fat",
      "cholestrl": "the cholesterol content in the recipe ",
      "sodium": "the sodium content in the recipe \n\nSalt/Sodium-Free - Less than 5 mg of sodium per serving\nVery Low Sodium - 35 mg of sodium or less per serving\nLow Sodium -140 mg of sodium or less per serving\nReduced Sodium - At least 25% less sodium than the regular product\nLight in Sodium or Lightly Salted - At least 50% less sodium than the regular product\nNo-Salt-Added or Unsalted - No salt is added during processing - but these products may not be salt/sodium-free unless stated",
      "iron": "the iron content in the recipe \n if iron > 20mg, it will lead to  \n\u0095 constipation \n\u0095 feeling sick \n\u0095 being sick \n\u0095 stomach pain \nquestion could mention any of functions listed before.",
      "vitamin_c": "the vitamin c content in the recipe \n Vitamin C, also known as ascorbic acid, if the VC is higher, it will:\n\u0095 helping to protect cells and keeping them healthy \n\u0095 maintaining healthy skin, blood vessels, bones and cartilage \n\u0095 helping with wound healing \nquestion could mention any of functions listed before.",
      "vitamin_a": "the vitamin a content in the recipe \n\nhigher --> beneficial to \n\u0095 helping your body's natural defense against illness and infection (the immune system) work properly \n\u0095 helping vision in dim light \n\u0095 keeping skin and the lining of some parts of the body, such as the nose, healthy \nquestion could mention any of functions listed before.",
      "fiber": "the fiber a content in the recipe ",
      "pcnt_cal_carb": "percentage of carbo in total nutrient composition ",
      "pcnt_cal_fat": "percentage of fat in total nutrient composition ",
      "pcnt_cal_prot": "percentage of protein in total nutrient composition ",
      "calories": "the calories of the recipe "
    },
    "Quantity": {
      "quantity_id": "the unique identifier for the quantity ",
      "recipe_id": "the id of the recipe ",
      "ingredient_id": "the id of the ingredient ",
      "max_qty": "the max quantity of the ingredient ",
      "min_qty": "the min quantity of the ingredient \n If max_qty equals to min_qty, it means that the ingredient must be rationed. ",
      "unit": "the unit of the ingredient ",
      "preparation": "preparation \n 'No data' means the ingredient doesn't need preprocessing. ",
      "optional": "whether the ingredient is optional  "
    }
  },
  "university": {
    "country": {
      "id": "unique id number identifying country ",
      "country_name": "the name of the country "
    },
    "ranking_system": {
      "id": "unique id number identifying ranking system ",
      "system_name": "id number identifying ranking system "
    },
    "ranking_criteria": {
      "id": "unique id number identifying ranking criteria ",
      "ranking_system_id": "id number identifying ranking system ",
      "criteria_name": "name of the criteria "
    },
    "university": {
      "id": "unique id number identifying university ",
      "country_id": "the country where the university locates ",
      "university_name": "name of the university "
    },
    "university_ranking_year": {
      "university_id": "the id of the university ",
      "ranking_criteria_id": "the id of the ranking criteria ",
      "year": "ranking year ",
      "score": "ranking score "
    },
    "university_year": {
      "university_id": "id of the university ",
      "year": "year ",
      "num_students": "the total number of students for the year ",
      "student_staff_ratio": "student_staff_ratio \n student_staff_ratio = number of students / number of staff",
      "pct_international_students": "the percentage of international students among all students \n pct_international_student = number of interbational students / number of students",
      "pct_female_students": "the percentage of female students \n pct_female_students = number of female students / number of students"
    }
  },
  "books": {
    "address_status": {
      "status_id": "the unique identifier of the status ",
      "address_status": "the status of the address \n\n\u0095\tactive: the address is still in use\n\u0095\tinactive: the address is not in use anymore"
    },
    "author": {
      "author_id": "the unique identifier of the author ",
      "author_name": "the name of the author "
    },
    "book_language": {
      "language_id": "the unique identifier of the language  ",
      "language_code": "the language code \n\nA language code is a unique identifier for a specific language. It is typically used to identify a language in computing and other technical contexts. Some common language codes include \"en\" for English, \"fr\" for French, and \"es\" for Spanish. The specific codes used for each language can vary depending on the context and the system in which they are being used.",
      "language_name": "the language name "
    },
    "country": {
      "country_id": "the unique identifier of the country ",
      "country_name": "the country name "
    },
    "address": {
      "address_id": "the unique identifier of the address ",
      "street_number": "the street number of the address \n\nThe street number is typically used to identify a specific building or residence on a street, with higher numbers generally indicating a location further down the street from the starting point. For example, if a street starts at number 1 and goes up to number 100, a building with the number 50 would be closer to the starting point than a building with the number 75.",
      "street_name": "the street name ",
      "city": "the city where the address belongs ",
      "country_id": "the id of the country where the address belongs  \n\nMaps to the country (country id). The full address of the customer is 'No.street_number street_name, city, country'"
    },
    "customer": {
      "customer_id": "the unique identifier of the customer ",
      "first_name": "the first name of the customer ",
      "last_name": "the last name of the customer \n\nA person's full name is the first name, middle name (if applicable), and last name. ",
      "email": "the email of the customer "
    },
    "customer_address": {
      "customer_id": "the id of the customer\nMaps to customer(customer_id) ",
      "address_id": "the id of the address\nMaps to address(address_id) ",
      "status_id": "the id of the address status \n\nA customer may have several addresses. If a customer has several addresses, the address that the status_id = 1 is the customer's current address that is in use. The other addresses with 2 as status_id is abandoned addresses. "
    },
    "order_status": {
      "status_id": "the unique identifier of the order status ",
      "status_value": "the status value \n\nThe order statuses include order received, pending delivery, delivery in progress, delivered, canceled, and returned. "
    },
    "publisher": {
      "publisher_id": "the unique identifier of the publisher ",
      "publisher_name": "the name of the publisher "
    },
    "book": {
      "book_id": "the unique identifier of the book ",
      "title": "the title of the book  ",
      "isbn13": "the International Standard Book Number of the book \n\nAn ISBN is a unique 13-digit number assigned to each book to identify it internationally. The ISBN13 of a book is the specific version of the ISBN that uses 13 digits. It is typically displayed on the back cover of a book, along with the barcode and other information.",
      "language_id": "the id of the book language\nMaps to book_language (language_id) ",
      "num_pages": "the number of the pages ",
      "publication_date": "the publication date of the book \n\nThe publication date of a book can provide information about when the book was released to the public. This can be useful for understanding the context in which the book was written, as well as for determining how current or outdated the information in the book might be. Additionally, the publication date can provide insight into the age of the book and its potential value as a collectible.",
      "publisher_id": "the id of the publisher\nMaps to publisher (publisher_id) "
    },
    "book_author": {
      "book_id": "the id of the book\nMaps to book(book_id) ",
      "author_id": "the id of the author\nMaps to author(author_id) \n\nBooks with the same author id are written by the same author. "
    },
    "shipping_method": {
      "method_id": "the unique identifier of the method ",
      "method_name": "the method name ",
      "cost": "the cost of the shipping method \n\nThe main difference between the various shipping methods, such as standard, priority, express, and international, is the speed at which the item is delivered. Standard shipping is the slowest and least expensive option, while express and priority shipping are faster and more expensive. International shipping is for items that are being shipped to a destination outside of the country where they originated."
    },
    "cust_order": {
      "order_id": "the unique identifier of the customer order ",
      "order_date": "the date of the order ",
      "customer_id": "the id of the customer\nMaps to customer(customer_Id) \n\nThe number of orders ordered by the customer = the show-up times of the relative customer id in the table",
      "shipping_method_id": "the id of the shipping method\nMaps to shipping_method(method_id) ",
      "dest_address_id": "the id of the destination address\nMaps to address(address_id) "
    },
    "order_history": {
      "history_id": "the unique identifier of the order history ",
      "order_id": "the id of the order\nMaps to cust_order(order_id) ",
      "status_id": "the id of the order\nMaps to order_status(status_id) \n\nThe order statuses include order received, pending delivery, delivery in progress, delivered, canceled, and returned.",
      "status_date": "the date of the status updated  "
    },
    "order_line": {
      "line_id": "the unique identifier of the order line ",
      "order_id": "the id of the order\nMaps to cust_order(order_id) ",
      "book_id": "the id of the book\nMaps to book(book_id) ",
      "price": "the price of the order \n\nEven though the customer ordered the book with the same book id, the price could be different. The price of the order may be influenced by the shipping method, seasonal discount, and the number of books the customer ordered. "
    }
  },
  "shipping": {
    "city": {
      "city_id": "unique identifier for the city ",
      "city_name": "name of the city ",
      "state": "state in which the city is ",
      "population ": "population of the city ",
      "area": "square miles the city covers \n \npopulation density (land area per capita) = area / population "
    },
    "customer": {
      "cust_id": "Unique identifier for the customer ",
      "cust_name": "Business name of the customer ",
      "annual_revenue": "Annual revenue of the customer ",
      "cust_type": "Whether the customer is a manufacturer or a wholes ",
      "address": "Physical street address of the customer ",
      "city": "City of the customer's address ",
      "state": "State of the customer's address \n \nplease mention its full name in the question, by referring to \nhttps://www23.statcan.gc.ca/imdb/p3VD.pl?Function=getVD&TVD=53971\ne.g., NY --> New York",
      "zip": "Postal code of the customer's address ",
      "phone": "Telephone number to reach the customer "
    },
    "driver": {
      "driver_id": "Unique identifier for the driver ",
      "first_name": "First given name of the driver ",
      "last_name": "Family name of the driver \n full name = first_name + last_name",
      "address": "Street address of the driver's home ",
      "city": "City the driver lives in ",
      "state": "State the driver lives in \n \nplease mention its full name in the question, by referring to \nhttps://www23.statcan.gc.ca/imdb/p3VD.pl?Function=getVD&TVD=53971 \ne.g., NY --> New York",
      "zip_code": "postal code of the driver's address ",
      "phone": "telephone number of the driver "
    },
    "truck": {
      "truck_id": "Unique identifier of the truck table ",
      "make": "The brand of the truck \n \n\u0095 Peterbilt headquarter: Texas (TX) \n\u0095 Mack headquarter: North Carolina (NC) \n\u0095 Kenworth headquarter: Washington (WA) \ncan ask question about headquarters of the truck",
      "model_year": "The year the truck was manufactured \n The truck with earlier model year means this truck is newer."
    },
    "shipment": {
      "ship_id": "Unique identifier of the shipment ",
      "cust_id": "A reference to the customer table that indicates which customer the shipment is for ",
      "weight": "The number of pounds being transported on the shipment ",
      "truck_id": "A reference to the truck table that indicates which truck is used in the shipment ",
      "driver_id": "A reference to the driver table that indicates which driver transported the goods in the shipment ",
      "city_id": "A reference to the city table that indicates the destination of the shipment ",
      "ship_date": "the date the items were received by the driver yyyy-mm-dd"
    }
  },
  "food_inspection": {
    "businesses": {
      "business_id": "the unique id of the business  ",
      "name": "the name of the eatery ",
      "address": "the eatery address ",
      "city": "the city where the eatery is located in ",
      "postal_code": "the postal code of the eatery ",
      "latitude": "the latitude of the position ",
      "longitude": "the longitude of the position \n\nthe distance between eatery A and eatery B = \\sqrt{(latitude_A-latitude_B)^2 + (longitude_A-longitude_B)^2}",
      "phone_number": "the phone number of the eatery ",
      "tax_code": "the tax code of the eatery ",
      "business_certificate": "the business certificate number ",
      "application_date": "the application date of the eatery ",
      "owner_name": "the owner's name ",
      "owner_address": "the owner's address ",
      "owner_city": "the city where the owner is located ",
      "owner_state": "the state where the owner is located ",
      "owner_zip": "the zip code of the owner "
    },
    "inspections": {
      "business_id": "the unique id of the business  ",
      "score": "the inspection score \n\nThe scores range from 1 to 100, where 100 means that the establishment meets all required standards. ",
      "date": "the inspection date ",
      "type": "the inspection type "
    },
    "violations": {
      "business_id": "the unique id of the business  ",
      "date": "the date of the violation ",
      "violation_type_id": "the unique type id of the violation ",
      "risk_category": "risk category\nHigh / Moderate / Low risk \n\nHigh risks have more safety and health hazards than low risks",
      "description": "the description of the violation "
    }
  },
  "movie_platform": {
    "lists": {
      "user_id": "ID related to the user who created the list. ",
      "list_id": "ID of the list on Mubi ",
      "list_title": "Name of the list ",
      "list_movie_number": "Number of movies added to the list ",
      "list_update_timestamp_utc": "Last update timestamp for the list ",
      "list_creation_timestamp_utc": "Creation timestamp for the list ",
      "list_followers": "Number of followers on the list ",
      "list_url": "URL to the list page on Mubi ",
      "list_comments": "Number of comments on the list ",
      "list_description": "List description made by the user ",
      "list_cover_image_url": "list_cover_image_url ",
      "list_first_image_url": "list_first_image_url ",
      "list_second_image_url": "list_second_image_url ",
      "list_third_image_url": "list_third_image_url "
    },
    "movies": {
      "movie_id": "ID related to the movie on Mubi ",
      "movie_title": "Name of the movie ",
      "movie_release_year": "Release year of the movie ",
      "movie_url": "URL to the movie page on Mubi ",
      "movie_title_language": "By default, the title is in English. Only contains one value which is 'en'",
      "movie_popularity": "Number of Mubi users who love this movie ",
      "movie_image_url": "Image URL to the movie on Mubi ",
      "director_id": "ID related to the movie director on Mubi ",
      "director_name": "Full Name of the movie director ",
      "director_url ": "URL to the movie director page on Mubi "
    },
    "ratings_users": {
      "user_id": "ID related to the user rating the movie ",
      "rating_date_utc": "Rating date for the movie rating. YYYY-MM-DD",
      "user_trialist": "whether the user was a trialist when he rated the movie 1 = the user was a trialist when he rated the movie\n 0 = the user was not a trialist when he rated the movie",
      "user_subscriber": "whether the user was a subscriber when he rated the movie 1 = the user was a subscriber when he rated the movie \n0 = the user was not a subscriber when he rated the movie",
      "user_avatar_image_url": "URL to the user profile image on Mubi ",
      "user_cover_image_url": "URL to the user profile cover image on Mubi ",
      "user_eligible_for_trial": "whether the user was eligible for trial when he rated the movie 1 = the user was eligible for trial when he rated the movie\n 0 = the user was not eligible for trial when he rated the movie",
      "user_has_payment_method ": "whether the user was a paying subscriber when he rated the movie 1 = the user was a paying subscriber when he rated the movie \n0 = the user was not a paying subscriber when he rated"
    },
    "lists_users": {
      "user_id": "ID related to the user who created the list. ",
      "list_id": "ID of the list on Mubi ",
      "list_update_date_utc": "Last update date for the list YYYY-MM-DD",
      "list_creation_date_utc": "Creation date for the list YYYY-MM-DD",
      "user_trialist": "whether the user was a tralist when he created the list  1 = the user was a trialist when he created the list\n 0 = the user was not a trialist when he created the list",
      "user_subscriber": "whether the user was a subscriber when he created the list  1 = the user was a subscriber when he created the list \n0 = the user was not a subscriber when he created the list",
      "user_avatar_image_url": "User profile image URL on Mubi ",
      "user_cover_image_url": "User profile cover image URL on Mubi ",
      "user_eligible_for_trial": "whether the user was eligible for trial when he created the list  1 = the user was eligible for trial when he created the list \n0 = the user was not eligible for trial when he created the list",
      "user_has_payment_method ": "whether the user was a paying subscriber when he created the list  1 = the user was a paying subscriber when he created the list \n0 = the user was not a paying subscriber when he created the list "
    },
    "ratings": {
      "movie_id": "Movie ID related to the rating ",
      "rating_id": "Rating ID on Mubi ",
      "rating_url": "URL to the rating on Mubi ",
      "rating_score": "Rating score ranging from 1 (lowest) to 5 (highest) \n\nThe score is proportional to the user's liking.\nThe higher the score is, the more the user likes the movie",
      "rating_timestamp_utc ": "Timestamp for the movie rating made by the user on Mubi ",
      "critic": "Critic made by the user rating the movie.  If value = \"None\", the user did not write a critic when rating the movie.",
      "critic_likes": "Number of likes related to the critic made by the user rating the movie ",
      "critic_comments": "Number of comments related to the critic made by the user rating the movie ",
      "user_id": "ID related to the user rating the movie ",
      "user_trialist ": "whether user was a tralist when he rated the movie 1 = the user was a trialist when he rated the movie \n0 = the user was not a trialist when he rated the movie",
      "user_subscriber": "user_subscriber ",
      "user_eligible_for_trial": "user_eligible_for_trial ",
      "user_has_payment_method": "user_has_payment_method "
    }
  },
  "shakespeare": {
    "chapters": {
      "id": "unique id number identifying the chapter ",
      "Act": "An act is a major division of a theatre work, including a play, film, opera, or musical theatre \n\nAn act can consist of one or more scenes",
      "Scene": "A scene is a dramatic part of a story, at a specific time and place, between specific characters. ",
      "Description": "textual description of the chapter. ",
      "work_id": "id number identifying the work "
    },
    "characters": {
      "id": "unique id number identifying the characters ",
      "CharName": "character name ",
      "Abbrev": "abbreviation. An abbreviation is a shortened form of a word or phrase. ",
      "Description": "description of the character. "
    },
    "paragraphs": {
      "id": "unique id number identifying the paragraphs ",
      "ParagraphNum": "unique id number identifying the paragraph number ",
      "PlainText": "main content of the paragraphs ",
      "character_id": "unique id number identifying the mentioned character ",
      "chapter_id": "unique id number identifying the related chapter \n\nif number of the paragraphs is > 150, then it means this is a long chapter"
    },
    "works": {
      "id": "unique id number identifying the work ",
      "Title": "title of the work  \n\nthe short title or abbreviated title\n",
      "LongTitle": "full title of the work ",
      "Date": "date of the work ",
      "GenreType": "the type of the genere "
    }
  },
  "book_publishing_company": {
    "authors": {
      "au_id": "unique number identifying authors ",
      "au_lname": "author last name ",
      "au_fname": "author first name ",
      "phone": "phone number ",
      "address": "address ",
      "city": "city  ",
      "state": "state  ",
      "zip": "zip code ",
      "contract": "contract status \n\n0: not on the contract\n1: on the contract"
    },
    "jobs": {
      "job_id": "unique id number identifying the jobs ",
      "job_desc": "job description \n\nstaff should be mentioned",
      "min_lvl": "min job level ",
      "max_lvl": "max job level \n\nlevel range for jobs mentioned in job_desc is (min_lvl, max_lvl)"
    },
    "publishers": {
      "pub_id": "unique id number identifying publisher ",
      "pub_name": "publisher name ",
      "city": "city  ",
      "state": "state ",
      "country": "country "
    },
    "employee": {
      "emp_id": "unique number identifying employees  ",
      "fname": "first name of employees ",
      "minit": "middle name ",
      "lname": "last name ",
      "job_id": "number identifying jobs ",
      "job_lvl": "job level \n\nhigher value means job level is higher",
      "pub_id": "id number identifying publishers ",
      "hire_date": "hire date "
    },
    "pub_info": {
      "pub_id": "unique id number identifying publications ",
      "logo": "logo of publications ",
      "pr_info": "publisher's information "
    },
    "stores": {
      "stor_id": "unique id number of stores ",
      "stor_name": "stor_name ",
      "stor_address": "stor_address ",
      "city": "city name ",
      "state": "state code ",
      "zip": "zip code "
    },
    "discounts": {
      "discounttype": "discount type ",
      "stor_id": "store id ",
      "lowqty": "low quantity (quantity floor) \n \nThe minimum quantity to enjoy the discount",
      "highqty": "high quantity (max quantity) \n \nThe maximum quantity to enjoy the discount",
      "discount": "discount "
    },
    "titles": {
      "title_id": "title id ",
      "title": "title ",
      "type": "type of titles ",
      "pub_id": "publisher id ",
      "price": "price ",
      "advance": "pre-paid amount ",
      "royalty": "royalty ",
      "ytd_sales": "year to date sales ",
      "notes": "notes if any \n\nhad better understand notes contents and put some of them into questions if any",
      "pubdate": "publication date "
    },
    "roysched": {
      "title_id": "unique id number identifying title ",
      "lorange": "low range ",
      "hirange": "high range ",
      "royalty": "royalty "
    },
    "sales": {
      "stor_id": "id number identifying stores ",
      "ord_num": "id number identifying the orders ",
      "ord_date": "the date of the order ",
      "qty": "quantity of sales  ",
      "payterms": "payments ",
      "title_id": "id number identifying titles "
    },
    "titleauthor": {
      "au_id": "author id ",
      "title_id": "title id ",
      "au_ord": "author ordering ",
      "royaltyper": "royaltyper "
    }
  },
  "car_retails": {
    "offices": {
      "officeCode": "unique ID of the office unique ID of the office",
      "city": "city ",
      "phone": "phone number ",
      "addressLine1": "addressLine1 ",
      "addressLine2": "addressLine2 \n \naddressLine1 + addressLine2 = entire address",
      "state": "state ",
      "country": "country ",
      "postalCode": "postalCode ",
      "territory": "territory "
    },
    "employees": {
      "employeeNumber": "unique string ID of the employees ",
      "lastName": "last name of employees ",
      "firstName": "first name of employees ",
      "extension": "extension number ",
      "email": "email ",
      "officeCode": "office code of the employees ",
      "reportsTo": "represents for organization structure such as who reports to whom \n \n\"reportsTO\" is the leader of the \"employeeNumber\"",
      "jobTitle": "job title "
    },
    "customers": {
      "customerNumber": "unique id number of customer ",
      "customerName": "the name when the customer registered ",
      "contactLastName": "contact last name ",
      "contactFirstName": "contact first name ",
      "phone": "phone ",
      "addressLine1": "addressLine1 ",
      "addressLine2": "addressLine2 \n \naddressLine1 + addressLine2 = entire address",
      "city": "city ",
      "state": "state ",
      "postalCode": "postalCode ",
      "country": "country ",
      "salesRepEmployeeNumber": "sales representative employee number ",
      "creditLimit": "credit limit "
    },
    "orders": {
      "orderNumber": "unique order number unique order number",
      "orderDate": "order date ",
      "requiredDate": "required Date ",
      "shippedDate": "shipped Date ",
      "status": "status ",
      "comments": "comments ",
      "customerNumber": "customer number "
    },
    "payments": {
      "customerNumber": "customer number ",
      "checkNumber": "check Number ",
      "paymentDate": "payment Date ",
      "amount": "amount "
    },
    "productlines": {
      "productLine": "unique product line name ",
      "textDescription": "text description ",
      "htmlDescription": "html description ",
      "image": "image "
    },
    "products": {
      "productCode": "unique product code ",
      "productName": "product name ",
      "productLine": "product line name ",
      "productScale": "product scale ",
      "productVendor": "product vendor ",
      "productDescription": "product description ",
      "quantityInStock": "quantity in stock  ",
      "buyPrice": "buy price from vendors ",
      "MSRP": "Manufacturer Suggested Retail Price \n \nexpected profits: msrp - buyPrice"
    },
    "orderdetails": {
      "orderNumber": "order number ",
      "productCode": "product code ",
      "quantityOrdered": "quantity ordered ",
      "priceEach": "price for each \n \ntotal price = quantityOrdered x priceEach",
      "orderLineNumber": "order Line Number "
    }
  },
  "mental_health_survey": {
    "Question": {
      "questiontext": "The detailed text of the question. ",
      "questionid": "The unique id of the question. Each questiontext can only have one unique questionid"
    },
    "Survey": {
      "SurveyID": "The unique id of each survey  \n \nEach SurveyID is unique. And SurveyID is simply survey year ie 2014, 2016, 2017, 2018, 2019.",
      "Description": "The Description of the specific survey. "
    },
    "Answer": {
      "AnswerText": "The specific and detailed answer text of each question. The content is highly depend on the question.",
      "SurveyID": "The id of each survey. The SurveyID is simply survey year i.e., 2014, 2016, 2017, 2018, 2019.",
      "UserID": "The id of different user. \n \nSome questions can contain multiple answers, thus the same user can appear more than once for that QuestionID.",
      "QuestionID": "The id of different questions. \n \nSome questions can contain multiple answers, thus the same user can appear more than once for that QuestionID."
    }
  },
  "hockey": {
    "AwardsMisc": {
      "name": "unique name of awards unique name of awards",
      "ID": "id number of players or coaches, etc. ",
      "award": "awarder not useful",
      "year": "year of the award ",
      "lgID": "league abbreviated name ",
      "note ": "note if needed \n \nnoted information"
    },
    "HOF": {
      "year": "year of hall of fame ",
      "hofID": "hall of fame id ",
      "name": "name ",
      "category": "category "
    },
    "Teams": {
      "year": "year ",
      "lgID": "league ID number ",
      "tmID": "team ID ",
      "franchID": "Franchise ID ",
      "confID": "Conference ID see abbrev.csv for details",
      "divID": "Division ID see abbrev.csv for details",
      "rank": "Final standing ",
      "playoff": "playoff results ",
      "G": "games ",
      "W": "wins ",
      "L": "loses ",
      "T": "ties ",
      "OTL": "Overtime losses ",
      "Pts": "points ",
      "SoW": "Shootout wins ",
      "SoL": "Shootout loses ",
      "GF": "Goals for ",
      "GA": "goals against ",
      "name": "Full team name ",
      "PIM": "Penalty minutes ",
      "BenchMinor": "Bench minors (minutes) \n \nA bench minor penalty is a minor penalty committed by a player or coach that is not on the ice. It is like a minor penalty in that it calls for the offending player to serve two minutes in the penalty box.",
      "PPG": "Power play goals ",
      "PPC": "Power play chances \n \npower play percentage (PP%) = PPG / PPC",
      "SHA": "Shorthanded goals against ",
      "PKG": "Power play goals against ",
      "PKC": "Penalty kill chances ",
      "SHF": "Shorthanded goals for "
    },
    "Coaches": {
      "coachID": "number identifying coaches number identifying coaches",
      "year": "In which year did the coach teach this team ",
      "tmID": "team abbreviated name ",
      "lgID": "league abbreviated name ",
      "stint": "stint ",
      "notes ": "note if needed \n \nnoted information",
      "g": "number of games ",
      "w": "number of wins \n \nwinning rates = wins / (wins + loses)",
      "l": "number of loses ",
      "t": "number of ties ",
      "postg": "number of post-season games ",
      "postw": "number of post-season wins ",
      "postl": "number of post-season loses ",
      "postt": "number of post-season ties "
    },
    "AwardsCoaches": {
      "coachID": "string ID of the coach ",
      "award": "awards that the coach achieve ",
      "year": "year of award ",
      "lgID": "league abbreviated name ",
      "note": "note "
    },
    "Master": {
      "playerID": "id number identifying the player ",
      "coachID": "coach id number \n\nif a person has both playerID and coachID, it means this person becomes coach after retirement.",
      "hofID": "hall of fame id ",
      "firstName": "first name ",
      "lastName": "last name ",
      "nameNote": "note about name ",
      "nameGiven": "Given name ",
      "nameNick": "Nickname  (multiple entries separated by \"/\")",
      "height": "height ",
      "weight": "weight ",
      "shootCatch": "Shooting hand (or catching hand for goalies) \n \nShooting hand (or catching hand for goalies)\nL: left hand\nR: right hand\nif null or 'empty', it means this player is good at both left and right hand",
      "legendsID": "ID at Legends Of Hockey ",
      "ihdbID": "ID at the Internet Hockey Database ",
      "hrefID": "ID at Hockey-Reference.com ",
      "firstNHL": "First NHL season ",
      "lastNHL": "Last NHL season ",
      "firstWHA": "First WHA season ",
      "lastWHA": "Last WHA season ",
      "pos": "pos \n\nLW: left winger\nRW: right winger\nC: center\nG: goalie\nD: defenseman\nW: winger\nF: forward\nthe player with W (winger) means he can play the role as both LW (left winger) and RW (right winger)\nsome players have two positions, which will be shown as \"L/D\". It means that LW + D --> left winger and defenseman",
      "birthYear": "birth Year ",
      "birthMon": "birth Month ",
      "birthDay": "birth Day \n\nthe entire / detail birth date in this table is \"year\" / \"month\" / \"date\"",
      "birthCountry": "birth Country ",
      "birthState": "birth State ",
      "birthCity": "birth city ",
      "deathYear": "death year ",
      "deathMon": "death month ",
      "deathDay": "death day ",
      "deathCountry": "death country ",
      "deathState": "death state ",
      "deathCity": "death city "
    },
    "AwardsPlayers": {
      "playerID": "string ID of players unique string ID of the player",
      "award": "award name ",
      "year": "year of award ",
      "lgID": "league abbreviated name ",
      "note": "note if needed ",
      "pos": "position of players \n \nLW: left winger\nRW: right winger\nC: center\nG: goalie\nD: defenseman\nW: winger\nF: forward\n\nthe player with W (winger) means he can play the role as both LW (left winger) and RW (right winger)"
    },
    "CombinedShutouts": {
      "year": "year ",
      "month": "month ",
      "date": "day \n \nthe entire date in this table is \"year\" / \"month\" / \"date\"",
      "tmID": "team abbreviated name ",
      "oppID": "Team ID of opponent ",
      "R/P ": "regular / postseason R\" for regular season, or \"P\" for postseason",
      "IDgoalie1": "ID of first goalie ",
      "IDgoalie2": "ID of second goalie "
    },
    "Goalies": {
      "playerID": "id number identifying the player number identifying players",
      "year": "year 2005-06 listed as \"2005\"",
      "stint": "order of appearance in a season \n \nthe entire date in this table is \"year\" / \"month\" / \"date\"",
      "tmID": "team abbreviated name ",
      "lgID": "league abbreviated name ",
      "GP": "Games played ",
      "Min": "Minutes of appearance ",
      "W": "wins ",
      "L": "loses ",
      "T/OL": "Ties / overtime losses ",
      "ENG": "Empty net goals \n \nAn empty net goal happens when a team scores against their opponent who has pulled their goalie. Since there is no goalie in the net, the net is considered empty\" ",
      "SHO": "Shutouts \n \nIn ice hockey, a shutout (SHO) is credited to a goaltender who successfully stops the other team from scoring during the entire game.",
      "GA": "Goals against \n \nGoals Against are the number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play.",
      "SA": "Shots against \n \nShot Against are the number of shots recorded while the goalie is on the ice",
      "PostGP": "Postseason games played ",
      "PostMin": "Postseason minutes ",
      "PostW": "Postseason wins ",
      "PostL": "Postseason loses ",
      "PostT": "Postseason ties ",
      "PostENG": "Postseason empty net goals \n \nAn empty net goal happens when a team scores against their opponent who has pulled their goalie. Since there is no goalie in the net, the net is considered empty\" ",
      "PostSHO": "Postseason Shutouts \n \nIn ice hockey, a shutout (SHO) is credited to a goaltender who successfully stops the other team from scoring during the entire game.",
      "PostGA": "Postseason Goals against \n \nGoals Against are the number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play.",
      "PostSA": "Postseason Shots against \n \nShot Against are the number of shots recorded while the goalie is on the ice."
    },
    "GoaliesSC": {
      "playerID": "id number identifying the player number identifying players",
      "year": "year 2005-06 listed as \"2005\"",
      "tmID": "team abbreviated name ",
      "lgID": "league abbreviated name ",
      "GP": "Games played ",
      "Min": "Minutes of appearance ",
      "W": "Wins ",
      "L": "Loses ",
      "T": "Ties ",
      "SHO": "Shutouts \n\nIn ice hockey, a shutout (SHO) is credited to a goaltender who successfully stops the other team from scoring during the entire game.",
      "GA": "Goals against \n\nGoals Against are the number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play."
    },
    "GoaliesShootout": {
      "playerID": "playerid ",
      "year": "year 2005-06 listed as \"2005\"",
      "stint": "stint ",
      "tmID": "team abbreviated name ",
      "W": "Wins ",
      "L": "Loses ",
      "SA": "Shots against \n \nShot Against are the number of shots recorded while the goalie is on the ice.",
      "GA": "Goals against \n \nGoals Against are the number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play."
    },
    "Scoring": {
      "playerID": "player ID ",
      "year": "play year ",
      "stint": "Stint (order of appearance in a season) ",
      "tmID": "team id ",
      "lgID": "league id ",
      "pos": "position \n\nLW: left winger\nRW: right winger\nC: center\nG: goalie\nD: defenseman\nW: winger\nF: forward\nthe player with W (winger) means he can play the role as both LW (left winger) and RW (right winger)\nsome players have two positions, which will be shown as \"L/D\". It means that LW + D --> left winger and defenseman",
      "GP": "game played ",
      "G": "goals ",
      "A": "assists ",
      "Pts": "points ",
      "PIM": "Penalty minutes ",
      "+/-": "Plus / minus \n\nThe plus minus stat is used to determine how often a player is on the ice when a goal is scored for the team versus against the team. A positive plus minus means that the player has been on for more goals scored than against, while a negative number means they have been on for more against.\nIn another words, higher \"+ / -\" means more importance to the team, lower means less importance",
      "PPG": "Power play goals \n\nWhen a team with more players on the ice scores a goal it is known as a power play goal. Many goals are scored in power play situations as the team is able to keep possession of the puck and have more scoring chances.",
      "PPA": "Power play assists ",
      "SHG": "Shorthanded goals \n \nSometimes the team with fewer players on the ice known as the short-handed team will score a goal.",
      "SHA": "Shorthanded assists ",
      "GWG": "Game-winning goals \n \nA game-winning goal (GWG) is the goal scored to put the winning team in excess of the losing team's final score.\n\n\nif a player gets more GWG, it means this player is more trustworthy in the critical moment.",
      "GTG": "Game-tying goals A game-tying goal (GWG) is the goal scored to put the winning team in the ties of the losing team's final score",
      "SOG": "Shots on goal \n\na shot that enters the goal or would have entered the goal if it had not been blocked by the goalkeeper or another defensive player.",
      "PostGP": "Postseason games played ",
      "PostG": "Postseason goals ",
      "PostA": "Postseason assists ",
      "PostPts": "Postseason points ",
      "PostPIM": "Postseason penalty minutes ",
      "Post+/-": "Postseason Plus / minus ",
      "PostPPG": "Postseason power play goals ",
      "PostPPA": "Postseason power play assists ",
      "PostSHG": "Postseason Shorthanded goals ",
      "PostSHA": "Postseason Shorthanded assists ",
      "PostGWG": "Postseason game-winning goals ",
      "PostSOG": "Postseason shots on goal "
    },
    "ScoringSC": {
      "playerID": "id number identifying the player number identifying the player",
      "year": "year 2005-06 listed as \"2005\"",
      "tmID": "team abbreviated name ",
      "lgID": "league abbreviated name ",
      "pos": "position ",
      "GP": "Games played ",
      "G": "goals ",
      "A": "assists ",
      "Pts": "points ",
      "PIM": "Penalty minutes "
    },
    "ScoringShootout": {
      "playerID": "id number identifying the player number identifying the player",
      "year": "year 2005-06 listed as \"2005\"",
      "stint": "stint ",
      "tmID": "team abbreviated name ",
      "S": "shots ",
      "G": "goals ",
      "GDG": "game deciding goals "
    },
    "ScoringSup": {
      "playerID": "string ID of players unique string ID of the player",
      "year": "year ",
      "PPA": "Power play assists ",
      "SHA": "Shorthanded assists "
    },
    "SeriesPost": {
      "year": "year ",
      "round": "round  see abbrev.csv for details",
      "series": "series used for the NHL designations",
      "tmIDWinner": "Team ID of winner ",
      "lgIDWinner": "League ID of winner ",
      "tmIDLoser": "Team ID of winner ",
      "lgIDLoser": "league id of loser ",
      "W": "wins  ",
      "L": "loses ",
      "T": "ties  ",
      "GoalsWinner": "goals for winner ",
      "GoalsLoser": "goals for loser ",
      "note": "note Note: EX = exhibition, ND = no decision, TG = total-goals series"
    },
    "TeamSplits": {
      "year": "year ",
      "lgID": "league ID number ",
      "tmID": "team ID ",
      "hW": "home wins ",
      "hL": "home loses ",
      "hT": "home ties ",
      "hOTL": "Home overtime losses ",
      "rW": "Road wins ",
      "rL": "Road loses ",
      "rT": "Road ties ",
      "rOTL": "road overtime loses ",
      "SepW": "September wins ",
      "SepL": "September loses ",
      "SepT": "September ties ",
      "SepOL": "September overtime loses ",
      "OctW": "October wins ",
      "OctL": "October loses ",
      "OctT": "October ties ",
      "OctOL": "October overtime loses ",
      "NovW": "November wins ",
      "NovL": "November loses ",
      "NovT": "November ties ",
      "NovOL": "November overtime loses ",
      "DecW": "December wins ",
      "DecL": "December loses ",
      "DecT": "December ties ",
      "DecOL": "December overtime loses ",
      "JanW": "January wins ",
      "JanL": "January loses ",
      "JanT": "January ties ",
      "JanOL": "January overtime loses ",
      "FebW": "February wins ",
      "FebL": "February loses ",
      "FebT": "February ties ",
      "FebOL": "February overtime loses ",
      "MarW": "March wins ",
      "MarL": "March loses ",
      "MarT": "March ties ",
      "MarOL": "March overtime loses ",
      "AprW": "April wins ",
      "AprL": "April loses ",
      "AprT": "April ties ",
      "AprOL": "April overtime loses "
    },
    "TeamVsTeam": {
      "year": "year ",
      "lgID": "league ID number ",
      "tmID": "team ID ",
      "oppID": "opponent ID ",
      "W": "wins ",
      "L": "loses ",
      "T": "ties ",
      "OTL": "overtime loses "
    },
    "TeamsHalf": {
      "year": "year ",
      "lgID": "league ID number ",
      "tmID": "team ID ",
      "half": "First or second half of season ",
      "rank": "Final standing for the half ",
      "G": "Games ",
      "W": "wins ",
      "L": "loses ",
      "T": "ties ",
      "GF": "goals for ",
      "GA": "goal against "
    },
    "TeamsPost": {
      "year": "year ",
      "lgID": "league ID number ",
      "tmID": "team ID ",
      "G": "Games ",
      "W": "wins ",
      "L": "loses ",
      "T": "ties ",
      "GF": "goals for ",
      "GA": "goals against ",
      "PIM": "penalty minutes ",
      "BenchMinor": "Bench minors (minutes) ",
      "PPG": "Power play goals ",
      "PPC": "Power play chances ",
      "SHA": "Shorthanded goals against ",
      "PKG": "Power play goals against ",
      "PKC": "Penalty kill chances ",
      "SHF": "Shorthanded goals for "
    },
    "TeamsSC": {
      "year": "year ",
      "lgID": "league ID number ",
      "tmID": "team ID ",
      "G": "Games ",
      "W": "wins ",
      "L": "loses ",
      "T": "ties ",
      "GF": "goals for ",
      "GA": "goals against ",
      "PIM": "penalty minutes "
    },
    "abbrev": {
      "Type": "type of hockey games ",
      "Code": "abbreviated codes ",
      "Fullname": "full names of code "
    }
  },
  "music_platform_2": {
    "runs": {
      "run_at": "The date and time of the podcast review creation. ",
      "max_rowid": "The id of max row of this run. ",
      "reviews_added": "The number of reviews added in this run. "
    },
    "podcasts": {
      "podcast_id": "The unique id of the podcast  ",
      "itunes_id": "The unique id of the itunes. ",
      "slug": "The slug of the podcast. \n \nIt usually has the same name with the \"title\" column. ",
      "itunes_url": "The iTunes url of the podcast. \n \nCan visit the webpage of the podcast by clicking the itunes_url.",
      "title": "The title of the podcast. \n \nIt usually has a very similar name to the \"slug\" column. "
    },
    "reviews": {
      "podcast_id": "The unique id of the podcast  ",
      "title": "The title of the podcast review. \n \nThis usually is the abstract of the whole review.",
      "content": "The content of the podcast review. \n \nThis usually is the detailed explanation of the podcast review title.",
      "rating": "The rating of the podcast review. \n \nAllowed values: 0 to 5. \nThis rating is highly related with \"title\" and \"content\".",
      "author_id": "The author id of the podcast review. ",
      "created_at": "The date and time of the podcast review creation. In the format of \"Date time\". e.g., 2018-05-09T18:14:32-07:00"
    },
    "categories": {
      "podcast_id": "The unique id of the podcast  ",
      "category": "category of the podcast \n \nThis usually represents the topic of the podcast."
    }
  },
  "address": {
    "CBSA": {
      "CBSA": "the code of the cbsa officer ",
      "CBSA_name": "the name and the position of the cbsa officer  ",
      "CBSA_type": "the office type of the officer "
    },
    "state": {
      "abbreviation": "the abbreviation of the state name ",
      "name": "the state name "
    },
    "congress": {
      "cognress_rep_id": "the representative id of congress representatives ",
      "first_name ": "the first name of the congress representative ",
      "last_name": "the last name of the congress representative ",
      "CID": "the unique identifier for the congress representative ",
      "party": "the party of the representative ",
      "state": "the state that the representative is from ",
      "abbreviation": "the abbreviation of the state ",
      "House": "the house that the representative is from ",
      "District": "the id of the district that the representative represents  \n The state is divided into different districts. The districts under the same state will be numbered uniformly. \n'NA' means that the state is not divided into districts. ",
      "land_area": "the land area of the district "
    },
    "zip_data": {
      "zip_code": "the zip code of the postal point ",
      "city": "the city where the postal point locates ",
      "state": "the state of the city ",
      "multi_county": "whether the country that the city belongs to is multi_country \n The meaning of multi_country is consisting of or involving multiple countries.",
      "type": "the type of the postal point ",
      "organization ": "the organization to which the postal point belongs \n 'No data' means the postal point is not affiliated with any organization",
      "time_zone": "the time zone of the postal point location ",
      "daylight_savings": "whether the location implements daylight savings \n Daylight saving is the practice of advancing clocks (typically by one hour) during warmer months so that darkness falls at a later clock time. As a result, there is one 23-hour day in late winter or early spring and one 25-hour day in autumn.",
      "latitude": "the latitude of the postal point location ",
      "longitude": "the longitude of the postal point location ",
      "elevation": "the elevation of the postal point location ",
      "state_fips": "state-level FIPS code ",
      "county_fips": "country-level FIPS code \n FIPS codes are numbers that uniquely identify geographic areas. The number of digits in FIPS codes varies depending on the level of geography.",
      "region": "the region where the postal point locates  ",
      "division": "the division of the organization  ",
      "population_2020": "the population of the residential area in 2020 \n 'No data' means that the postal point is not affiliated with any organization. Or the organization has no division. ",
      "population_2010": "the population of the residential area in 2010 ",
      "households": "the number of the households in the residential area ",
      "avg_house_value": "the average house value in the residential area ",
      "avg_income_per_household": "the average income per household in the residential area ",
      "persons_per_household": "the number of persons per household residential area ",
      "white_population": "the population of white people in the residential area ",
      "black_population": "the population of black people in the residential area ",
      "hispanic_population": "the population of Hispanic people in the residential area ",
      "asian_population": "the population of Asian people in the residential area ",
      "american_indian_population": "the population of American Indian people in the residential area ",
      "hawaiian_population": "the population of Hawaiian people in the residential area ",
      "other_population": "the population of other races in the residential area ",
      "male_population": "the population of males in the residential area ",
      "female_population": "the population of females in the residential area ",
      "median_age": "the median age of the residential area \n gender ratio in the residential area = male_population / female_population if female_population != 0",
      "male_median_age": "the male median age in the residential area ",
      "female_median_age": "the female median age in the residential area ",
      "residential_mailboxes": "the number of residential mailboxes in the residential area ",
      "business_mailboxes": "the number of business mailboxes in the residential area ",
      "total_delivery_receptacles": "the total number of delivery receptacles ",
      "businesses": "the number of businesses in the residential area ",
      "1st_quarter_payroll": "the total wages reported in the 1st quarter payroll report of the residential area ",
      "annual_payroll": "the total wages reported in the annual payroll report of the residential area ",
      "employees": "the number of employees in the residential area \n Employers must submit periodic payroll reports to the Internal Revenue Service and state taxing authority. The report is used by employers to report wage information.",
      "water_area": "the water area of the residential area ",
      "land_area": "the land area of the residential area ",
      "single_family_delivery_units": "the number of single-family delivery units in the residential area ",
      "multi_family_delivery_units": "the number of single-family delivery units in the residential area \n A single-family unit can be described as a single unit that accommodates only one family or tenant at a time on rent.\n",
      "total_beneficiaries": "the total number of beneficiaries of the postal service \n multi-family units are usually under a greater surface area with the capacity to accommodate more than one tenant or multiple families on rent at the same time",
      "retired_workers": "the number of retired workers in the residential area ",
      "disabled_workers": "the number of disabled workers in the residential area ",
      "parents_and_widowed": "the number of parents and widowed in the residential area ",
      "spouses": "the number of spouses in the residential area ",
      "children": "the number of children in the residential area ",
      "over_65": "the number of people whose age is over 65 in the residential area ",
      "monthly_benefits_all": "all benefit payments by month  \n no. of over_65 can refer to elders. Higher means more elders\nif the ratio: over_65 / children is higher: the aging is more serious.",
      "monthly_benefits_retired_workers": "monthly benefit payments for retired workers usd",
      "monthly_benefits_widowed": "monthly benefit payments for retired workers ",
      "CBSA": "the code of the cbsa officer "
    },
    "alias": {
      "zip_code": "the zip code of the alias ",
      "alias": "the alias of the city "
    },
    "area_code": {
      "zip_code": "the zip code of the area ",
      "area_code": "the code of the area "
    },
    "avoid": {
      "zip_code": "the zip code of the bad alias ",
      "bad_alias": "the bad alias "
    },
    "country": {
      "zip_code": "the zip code of the state in the country ",
      "county": "the country  ",
      "state": "the state of the country "
    },
    "zip_congress": {
      "zip_code": "the zip code of the district ",
      "district": "the district "
    }
  },
  "menu": {
    "Dish": {
      "id": "unique id number indicating the dishes ",
      "name": "the name of the dish ",
      "description": "description of the dish  (no value)",
      "menus_appeared": "how many menus have this dish  ",
      "times_appeared": "how many times this dish appears in the menu \n\nif times_appeared > menus_appeard: this dish appeared in a menu more than once",
      "first_appeared": "the year that this dish appears first \n\n1.\tthe year outside of [1851, 2012], it means this data is not correct \n2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical",
      "last_appeared": "the year that this dish appears the last time \n\n1.\tthe year outside of [1851, 2012], it means this data is not correct\n2.\tif this dish lasts longer (last_appeared - first_appeard), it means its history is long or historical / classical",
      "lowest_price": "the lowest price of the dish \n\n0: for free",
      "highest_price": "the highest price of the dish "
    },
    "Menu": {
      "id": "the unique number identifying the menu ",
      "name": "the name of the menu \n\n\nif the value is not null or empty, it means this menu has special dishes.\n\notherwise, this menu is general and nothing special",
      "sponsor": "the sponsor of this menu \n\n\nif the value is null or empyt, it means this meanu is DIY by the restaurant.",
      "event": "the event that the menu was created for ",
      "venue": "the venue that the menu was created for ",
      "place": "the location that the menu was used  the location that the menu was used",
      "physical_description": "physical description of the menu ",
      "occasion": "occasion of the menu ",
      "notes": "notes ",
      "call_number": "call number \n\nif null: not support for taking out or booking in advance",
      "keywords": "keywords not useful",
      "language": "language not useful",
      "date": "the date that this menu was created ",
      "location": "the location that the menu was used ",
      "location_type": "location_type not useful",
      "currency": "the currency that the menu was used ",
      "currency_symbol": "the currency symbol ",
      "status": "status of the menu ",
      "page_count": "the number of pages of this menu ",
      "dish_count": "the number of dishes of this menu "
    },
    "MenuPage": {
      "id": "the unique id number indentifying the menupage ",
      "menu_id": "the id of the menu ",
      "page_number": "the page number  ",
      "image_id": "the id of the image  ",
      "full_height": "full height of the menu page (mm)",
      "full_width": "full width of the menu page (mm)",
      "uuid": "uuid "
    },
    "MenuItem": {
      "id": "the unique id representing the menu item ",
      "menu_page_id": "the id of menu page ",
      "price": "the price of this dish (menu item) ",
      "high_price": "high price of this dish ",
      "dish_id": "the id of the dish ",
      "created_at": "the dates when the item was created ",
      "updated_at": "the dates when the item was updated ",
      "xpos": "x-axis position of the dish in this menu page ",
      "ypos": "y-axis position of the dish in this menu page "
    }
  },
  "professional_basketball": {
    "awards_players": {
      "playerID": "ID number identifying the unique number of the player ",
      "award": "the name of the award ",
      "year": "the time of this award ",
      "lgID": "the name of the league mainly categories: \"NBA\" & \"ABA\"",
      "note": "notification \u201dnull\u201c refers to that no special things\n\u201dtie\u201c represents that coaches are tied for some awards",
      "pos": "the position of the player C: Center\nF: Forward\nG: Guard "
    },
    "coaches": {
      "coachID": "ID number identifying the unique number of the coach ",
      "year": "year ",
      "tmID": "team name abbreviated name",
      "lgID": "league name mainly categories: \"NBA\" & \"ABA\"",
      "stint": "the period of the time coaching this team ",
      "won": "the number of won games 0: no wins",
      "lost": "the number of lost games 0: win all the games",
      "post_wins": "the number of games won in the post-season (playoffs) games 0: no wins\n\n\n\n\nIf the team's post-season wins and losses are all zero, it implies that the team did not participate in the post-season (playoffs) that year.",
      "post_losses": "the number of games lost in the post-season (playoffs) games 0: win all the games\n\n\n\n\nIf the team's post-season wins and losses are all zero, it implies that the team did not participate in the post-season (playoffs) that year."
    },
    "draft": {
      "id": "the unique number to determine one row of the data ",
      "draftYear": "which year does this draft happens ",
      "draftRound": "the Round number of this draft If the value is 0, it means that there is no draft in this year\n\n1 refers that this player was picked in the first round",
      "draftSelection": "the position that the player was picked 0\uff1aThis signifies that it doesn't contain the draft information of this player\n\n7\uff1athis player was selected in the 7th position in this round\n\n\n\n\ndraftRound: 1; \ndraftSelection: 7 \nrepresents: this player was selected in the round 1, 7th position.",
      "draftOverall": "The player's overall draft position for the year this is the overall draft rank of the player.",
      "tmID": "team name abbreviated name",
      "firstName": "the first name of the player ",
      "lastName": "the last name of the player ",
      "suffixName": "the suffix name of the player ",
      "playerID": "ID number identifying the unique number of the player ",
      "draftFrom": "the university that the drafted players come from the name of the university",
      "lgID": "the league name mainly categories: \"NBA\" & \"ABA\""
    },
    "player_allstar": {
      "playerID": "ID number identifying the unique number of the player ",
      "first_name": "the first name of the player ",
      "last_name": "the last name of the player ",
      "season_id": "the id number of the season ",
      "conference": "which conference that players belong to two categories: west; east",
      "league_id": "the league name two categories: NBA; ABA",
      "games_played": "how many all star games that this player played in this season mostly it's 1",
      "minutes": "minutes of attendance 18\uff1aplayed in 18 minutes",
      "points": "points 19: get 19 points\uff1b\n\nnull --> doesn't get points",
      "o_rebounds": "offense rebounds empty or null refers to none offense rebounds\uff0c\n\n1: one offense rebound",
      "d_rebounds": "defense rebounds empty or null refers to none defense rebounds\uff0c\n\n1: one defense rebound",
      "rebounds": "total rebounds empty or null refers to none total rebounds\uff0c\n\n3: totally gets 3 rebounds including offence and defense rebounds\n\ncommensense evidence:\n\ntotal rebounds = offense rebounds + defense rebounds",
      "assists": "assistants null or empty refers to none\n\n2: 2 assistants",
      "steals": "steals null or empty refers to none\n\n2: 2 steals",
      "blocks": "blocks null or empty refers to none\n\n2: 2 blocks",
      "turnovers": "turnovers null or empty refers to none\n\n2: 2 turnovers",
      "personal_fouls": "personal fouls null or empty refers to none\n\n2: 2 personal fouls",
      "fg_attempted": "field goal attempted null or empty refers to none\n\n2: 2 field goal attempts",
      "fg_made": "field goal made null or empty refers to none\n\n2: 2 field goal made",
      "ft_attempted": "free throw attempted null or empty refers to none\n\n2: 2 free throw attempts",
      "ft_made": "free throw made null or empty refers to none\n\n2: 2 free throw made",
      "three_attempted": "three point attempted null or empty refers to none\n\n2: 2 three point attempts",
      "three_made": "three point made  null or empty refers to none\n\n2: 2 three point made"
    },
    "players": {
      "playerID": "ID number identifying the unique number of the player ",
      "useFirst": "usefirst not useful",
      "firstName": "the first name of the player ",
      "middleName": "the middle name of the player ",
      "lastName": "the last name of the player ",
      "nameGiven": "namegiven not useful",
      "fullGivenName": "fullgivenname not useful",
      "nameSuffix": "the suffix name of the player ",
      "nameNick": "namenick ",
      "pos": "the position of the player C: Center\n\nF: Forward\n\nG: Guard \n\n\n\nsome player can have two positions simultaneously",
      "firstseason": "firstseason nothing special",
      "lastseason": "lastseason nothing special",
      "height": "inch inch",
      "weight": "lb null or empty means it doesn't have this information",
      "college": "college null or empty means it doesn't have this information\n\nwhich colledge does this player graduate from",
      "collegeOther": "the college that transferred from  \n\n\nsome players may have the record of transferring from other colleges",
      "birthDate": "birthdate ",
      "birthCity": "birthcity null / empty refers to not recorded",
      "birthState": "birth state ",
      "birthCountry": "birth country ",
      "highSchool": "high school null / empty refers to not recorded",
      "hsCity": "high school city null / empty refers to not recorded",
      "hsState": "high school state null / empty refers to not recorded",
      "hsCountry": "high school country null / empty refers to not recorded",
      "deathDate": "deathdate 0000-00-00 means this player is still alive\n\nwithin clear date\uff1a\n2011-11-10, which means this guy was died on \"2011-11-10\"",
      "race": "race B\uff1ablack,\nW: white\n\nnull or empty: nothing"
    },
    "teams": {
      "year": "year ",
      "lgID": "league name main categories:\nNBA, ABA",
      "tmID": "team id abbreviated name",
      "franchID": "franchid not useful",
      "confID": "confid not useful",
      "divID": "division ID ",
      "rank": "rank less is better",
      "confRank": "confrank not useful",
      "playoff": "another name: post season for brevity, if the value is not null or empty, it means this team attends the playoffs, otherwise, means not attend",
      "name": "full name of the team ",
      "o_fgm": "how many offense field goal made by this team in this season ",
      "o_ftm": "how many offense free throw made by this team in this season ",
      "o_pts": "offense points ",
      "d_pts": "defense points ",
      "homeWon": "wins in the home ",
      "homeLost": "loses in the home ",
      "awayWon": "wins in the away ",
      "awayLost": "loses in the away ",
      "won": "won total wins of this team in this year.",
      "lost": "lost total losts of this team in this year.",
      "games": "games total number of games that this team played in this year (season)",
      "arena": "arena null or empty refers to the fact that this team doesn't have individual arenas, otherwise, it has individual arenas"
    },
    "awards_coaches": {
      "id": "id of this row of data ",
      "year": "which year did the coach receive the honor? ",
      "coachID": "id number of the coaches ",
      "award": "the award names mainly categories: \"NBA\" & \"ABA\"",
      "lgID": "the name of the league mainly categories: \"NBA\" & \"ABA\"",
      "note": "special notification \u201dnull\u201c refers to that no special things\n\u201dtie\u201c represents that coaches are tied for some awards"
    },
    "players_teams": {
      "id": "the unique number to identify this record ",
      "playerID": "ID number identifying the unique number of the player ",
      "year": "year ",
      "stint": "the period of the time player spent played for this team ",
      "tmID": "team name abbreviated name",
      "lgID": "lgid ",
      "GP": "game presentatons (attendance) min: 0, max: 82\n\n\n\n\nif this number is equal to 82, means full attendance",
      "GS": "game starting min: 0, max: 82,\n\n\n\n\nwhen GP = GS, it means that this player plays as the stating lineup fully. ",
      "minutes": "minutes ",
      "points": "points ",
      "oRebounds": "offense rebounds empty or null refers to none offense rebounds\uff0c\n\n1: one offense rebound",
      "dRebounds": "defense rebounds empty or null refers to none defense rebounds\uff0c\n\n1: one defense rebound",
      "rebounds": "total rebounds empty or null refers to none total rebounds\uff0c\n\n3: totally gets 3 rebounds including offense and defense rebounds\n\ncommensense evidence:\n\ntotal rebounds = offense rebounds + defense rebounds",
      "assists": "assistants null or empty refers to none\n\n2: 2 assistants",
      "steals": "steals null or empty refers to none\n\n2: 2 steals",
      "blocks": "blocks null or empty refers to none\n\n2: 2 blocks",
      "turnovers": "turnovers null or empty refers to none\n\n2: 2 turnovers",
      "PF": "personal fouls null or empty refers to none\n\n2: 2 personal fouls",
      "fgAttempted": "field goal attempted null or empty refers to none\n\n2: 2 field goal attempts",
      "fgMade": "field goal made null or empty refers to none\n\n2: 2 field goal made",
      "ftAttempted": "free throw attempted null or empty refers to none\n\n2: 2 free throw attempts",
      "ftMade": "free throw made null or empty refers to none\n\n2: 2 free throw made",
      "threeAttempted": "three point attempted null or empty refers to none\n\n2: 2 three point attempts",
      "threeMade": "three point made null or empty refers to none\n\n2: 2 three point made",
      "PostGP": "post season game presentations 0: this player doesn't present in the post season (playoffs)",
      "PostGS": "post season game starting ",
      "PostMinutes": "post season minutes ",
      "PostPoints": "post season points ",
      "PostoRebounds": "post season offense rebounds null or empty refers to none\n\n1: 1 offense rebounds in the post season",
      "PostdRebounds": "post season defense rebounds null or empty refers to none\n\n1: 1 defense rebounds in the post season",
      "PostRebounds": "post season defense rebounds null or empty refers to none\n\n3: 3 rebounds in the post season totally",
      "PostAssists": "postassists null or empty refers to none\n\n1: 1 assistance in the post season",
      "PostSteals": "poststeals null or empty refers to none\n\n1: 1 offense steals in the post season",
      "PostBlocks": "postblocks null or empty refers to none\n\n1: 1 block in the post season",
      "PostTurnovers": "postturnovers null or empty refers to none\n\n1: 1 turnover in the post season",
      "PostPF": "postpf null or empty refers to none\n\n1: 2 personal fouls in the post season",
      "PostfgAttempted": "postfgattempted null or empty refers to none\n\n1: 1 field goal attempts in the post season",
      "PostfgMade": "postfgmade null or empty refers to none\n\n1: 1 field goal made in the post season",
      "PostftAttempted": "postftattempted null or empty refers to none\n\n1: 1 free throw attempts in the post season",
      "PostftMade": "postftmade null or empty refers to none\n\n1: 1 free throw made in the post season",
      "PostthreeAttempted": "postthreeattempted null or empty refers to none\n\n1: 1 three point attempts in the post season",
      "PostthreeMade": "postthreemade null or empty refers to none\n\n1: 1 three point made in the post season",
      "note": "note "
    },
    "series_post": {
      "id": "unique number of this record ",
      "year": "year ",
      "round": "round known abbreviations\uff1a\n\nF\uff1afinal \nSF: semi-final \n\nQF\uff1aquater-final 1/4\n\nDF\uff1adivision-final \n\nDSF\uff1adivision semi-final",
      "series": "series not useful",
      "tmIDWinner": "team id winner ",
      "lgIDWinner": "league id winner ",
      "tmIDLoser": "team id loser ",
      "lgIDLoser": "league id loser ",
      "W": "wins ",
      "L": "loses "
    }
  },
  "cars": {
    "country": {
      "origin": "the unique identifier for the origin country ",
      "country": "the origin country of the car "
    },
    "price": {
      "ID": "unique ID for each car  ",
      "price": "price of the car in USD "
    },
    "data": {
      "ID": "unique ID for each car  ",
      "mpg": "mileage of the car in miles per gallon \n The car with higher mileage is more fuel-efficient. ",
      "cylinders": "the number of cylinders present in the car ",
      "displacement": "engine displacement in cubic mm \n sweep volume = displacement / no_of cylinders\n",
      "horsepower": "horse power associated with the car \n horse power is the metric used to indicate the power produced by a car's engine - the higher the number, the more power is sent to the wheels and, in theory, the faster it will go. ",
      "weight": "weight of the car in lbs \n A bigger, heavier vehicle provides better crash protection than a smaller",
      "acceleration": "acceleration of the car in miles per squared hour ",
      "model": "the year when the car model was introduced in the market \n 0 --> 1970",
      "car_name": "name of the car "
    },
    "production": {
      "ID": "the id of the car ",
      "model_year": "year when the car model was introduced in the market ",
      "country": "country id to which the car belongs Japan --> Asia \nUSA --> North America"
    }
  },
  "synthea": {
    "all_prevalences": {
      "ITEM": "the prevalent disease ",
      "POPULATION TYPE": "the population type - LIVING ",
      "OCCURRENCES": "the number of occurrences ",
      "POPULATION COUNT": "the number of the counted populations  ",
      "PREVALENCE RATE": "the prevalence rate \n prevalence rate = occurrences / population_count",
      "PREVALENCE PERCENTAGE": "the prevalence percentage \n prevalence rate = occurrences / population_count * 100"
    },
    "patients": {
      "patient": "the unique id for the patient ",
      "birthdate": "the birth date of the patient ",
      "deathdate": "the death date of the patient \n \n\u0095 the age of the patient = death year - birth year \n\u0095 if null, it means this patient is still alive",
      "ssn": "the social security number of the patient ",
      "drivers": "the driver number of the patient \n if not, this patient doesn't have driving license",
      "passport": "the passport number \n if not, this patient cannot go abroad, vice versa",
      "prefix": "the prefix ",
      "first": "the first name ",
      "last": "the last name \n full name = first + last",
      "suffix": "the suffix of the patient \n if suffix = PhD, JD, MD, it means this patient has doctoral degree. Otherwise, this patient is not.",
      "maiden": "the maiden name of the patient \n Only married women have the maiden name",
      "marital": "the marital status of the patient \n \n\u0095 M: married \n\u0095 S: single",
      "race": "the race of the patient ",
      "ethnicity": "the ethnicity of the patient ",
      "gender": "the gender of the patient ",
      "birthplace": "the birth place ",
      "address": "the specific address "
    },
    "encounters": {
      "ID": "the unique id of the encounter ",
      "DATE": "the date of the encounter yyyy-mm-dd",
      "PATIENT": "the patient id ",
      "CODE": "the code of the care plan  ",
      "DESCRIPTION": "the description of the care plan ",
      "REASONCODE": "the reason code ",
      "REASONDESCRIPTION": "the description of the reason why the patient needs the care plan "
    },
    "allergies": {
      "START": "the start date of the allergy  mm/dd/yy",
      "STOP": "the stop date of the allergy mm/dd/yy\n\n allergy period = stop - start",
      "PATIENT": "the patient id ",
      "ENCOUNTER": "the medical encounter id ",
      "CODE": "the code of the allergy  ",
      "DESCRIPTION": "the description of the allergy  "
    },
    "careplans": {
      "ID": "the unique id of the care plan ",
      "START": "the start date of the care plan yyyy-mm-dd",
      "STOP": "the stop date of the care plan yyyy-mm-dd\n\n care plan period:\nstop - start",
      "PATIENT": "the patient id ",
      "ENCOUNTER": "the medical encounter id ",
      "CODE": "the code of the care plan  ",
      "DESCRIPTION": "the description of the care plan ",
      "REASONCODE": "the reason code ",
      "REASONDESCRIPTION": "the description of the reason why the patient needs the care plan "
    },
    "conditions": {
      "START": "the start date of the allergy  mm/dd/yy",
      "STOP": "the stop date of the allergy mm/dd/yy",
      "PATIENT": "the patient id ",
      "ENCOUNTER": "the medical encounter id ",
      "CODE": "the code of the condition  ",
      "DESCRIPTION": "the description of the patient condition "
    },
    "immunizations": {
      "DATE": "the date of the immunization yyyy-mm-dd",
      "PATIENT": "the patient id ",
      "ENCOUNTER": "the medical encounter id ",
      "CODE": "the code of the immunization  ",
      "DESCRIPTION": "the description of the immunization "
    },
    "medications": {
      "START": "the start date of the care plan yyyy-mm-dd",
      "STOP": "the stop date of the care plan yyyy-mm-dd\n\n Time of taking medicine",
      "PATIENT": "the patient id ",
      "ENCOUNTER": "the medical encounter id ",
      "CODE": "the code of the medication ",
      "DESCRIPTION": "the description of the medication ",
      "REASONCODE": "the reason code ",
      "REASONDESCRIPTION": "the description of the reason why the patient take the medication "
    },
    "observations": {
      "DATE": "the date of the observation yyyy-mm-dd",
      "PATIENT": "the patient id ",
      "ENCOUNTER": "the medical encounter id ",
      "CODE": "the code of the observation type ",
      "DESCRIPTION": "the description of the observation ",
      "VALUE": "the observation value ",
      "UNITS": "the units of the observation value \n DESCRIPTION + VALUE + UNITS could be a fact:\ne.g.: body height of patient xxx is 166.03 cm:\nbody height is in DESCRIPTION \n166.03 is in VALUE \ncm is in UNITS"
    },
    "procedures": {
      "DATE": "the date of the procedure yyyy-mm-dd",
      "PATIENT": "the patient id ",
      "ENCOUNTER": "the medical encounter id ",
      "CODE": "the code of the procedure ",
      "DESCRIPTION": "the description of the procedure ",
      "REASONCODE": "the code of the reason ",
      "REASONDESCRIPTION": "the description of the reason why the patient take the procedure "
    },
    "claims": {
      "ID": "the unique id of the claim ",
      "PATIENT": "the patient id ",
      "BILLABLEPERIOD": "the start date of the billable yyyy-mm-dd",
      "ORGANIZATION": "the claim organization ",
      "ENCOUNTER": "the medical encounter id ",
      "DIAGNOSIS": "the diagnosis ",
      "TOTAL": "the length of the billable period "
    }
  },
  "genes": {
    "Classification": {
      "GeneID": "unique identifier number of genes ",
      "Localization": "location "
    },
    "Genes": {
      "GeneID": "identifier number of genes ",
      "Essential ": "essential  ",
      "Class": "class ",
      "Complex": "Complex ",
      "Phenotype": "Phenotype ?: means: doesn't exit the phenotype",
      "Motif": "Motif ",
      "Chromosome": "Chromosome ",
      "Function": "Function ",
      "Localization": "localization "
    },
    "Interactions": {
      "GeneID1": "identifier number of genes ",
      "GeneID2": "identifier number of genes ",
      "Type": "Type ",
      "Expression_Corr": "Expression correlation score range: (0,1)\n\nif the value is the positive then it's \"positively correlated\"\n\nif the value is the negative then it's \"negatively correlated\"\n\nif the value is very high positively, it means two genes are highly correlated"
    }
  },
  "retails": {
    "customer": {
      "c_custkey": "unique id number identifying the customer ",
      "c_mktsegment": "the segment of the customer ",
      "c_nationkey": "the nation key number of the customer ",
      "c_name": "name of the customer ",
      "c_address": "address of the customer ",
      "c_phone": "phone of the customer ",
      "c_acctbal": "account balance if c_acctbal < 0: this account is in debt",
      "c_comment": "comment of the customer "
    },
    "lineitem": {
      "l_shipdate": "ship date of line item  ",
      "l_orderkey": "order key number of line item  ",
      "l_discount": "discount of line item  0.1: 10% off",
      "l_extendedprice": "extended price of line item  \n\nfull price before discount\ndiscounted price = (l_extendedprice*(1-l_discount))",
      "l_suppkey": "suppkey of line item  ",
      "l_quantity": "quantity of line item  ",
      "l_returnflag": "return flag of line item  \n\n\u0095 \u0093R\u0094 ? returned item\n\u0095 \u0093A\u0094 and \"N\": not returned item.",
      "l_partkey": "part key of line item  ",
      "l_linestatus": "line status of line item  NOT USEFUL",
      "l_tax": "tax of line item  \n\ncharge = l_extendedprice * (1- l_discount) * (1+ l_tax)",
      "l_commitdate": "commit date of line item  ",
      "l_receiptdate": "receipt date of line item  \n\nfreight / shipping / delivery time = l_receiptdate - l_commitdate;\nless shipping / delivery time --> faster shipping speed.",
      "l_shipmode": "ship mode of line item  ",
      "l_linenumber": "unique id number identifying the line item ",
      "l_shipinstruct": "ship instruct of line item  ",
      "l_comment": "comment of line item  "
    },
    "nation": {
      "n_nationkey": "unique id number identifying the nation ",
      "n_name": "name of the nation ",
      "n_regionkey": "region key number of the nation ",
      "n_comment": "comment description of nation "
    },
    "orders": {
      "o_orderdate": "date of the order \n\nearlier order date --> higher priority in delivery",
      "o_orderkey": "unique id number identifying the order ",
      "o_custkey": "customer key of order ",
      "o_orderpriority": "priority rate of order A smaller number means a higher priority: 0-Urgent",
      "o_shippriority": "ship priority of order NOT USEFUL",
      "o_clerk": "clerk of order ",
      "o_orderstatus": "status of order NOT USEFUL",
      "o_totalprice": "total price of the order ",
      "o_comment": "comment description of order "
    },
    "part": {
      "p_partkey": "unique id number identifying the part ",
      "p_type": "type of part ",
      "p_size": "size number of part larger number --> larger part",
      "p_brand": "brand of part ",
      "p_name": "name of part ",
      "p_container": "container of part ",
      "p_mfgr": "manufacturer of part ",
      "p_retailprice": "retail price of part ",
      "p_comment": "comment description text of part "
    },
    "partsupp": {
      "ps_partkey": "unique id number identifying the part key ",
      "ps_suppkey": "unique id number identifying the supply key ",
      "ps_supplycost": "cost number of the part supply \n\nprofit = (l_extendedprice*(1-l_discount)) - (ps_supplycost * l_quantity)] l_quantity comes from table lineitem!",
      "ps_availqty": "available quantity of the part supply if ps_availqty < 10 --> closer to OOS (out of stock)",
      "ps_comment": "comment description of the part supply. "
    },
    "region": {
      "r_regionkey": "unique id number identifying the region ",
      "r_name": "name of the region ",
      "r_comment": "comment description of the region "
    },
    "supplier": {
      "s_suppkey": "unique id number identifying the supply ",
      "s_nationkey": "nation key of the supply ",
      "s_comment": "comment description of the comment ",
      "s_name": "name of the supplier ",
      "s_address": "address of the supplier ",
      "s_phone": "phone number of the supplier ",
      "s_acctbal": "account balance of the supplier \n\nif c_acctbal < 0: this account is in debt"
    }
  },
  "talkingdata": {
    "app_all": {
      "app_id": "app id "
    },
    "app_events": {
      "event_id": "the id of events ",
      "app_id": "the id of app users each app_id represents for an user",
      "is_installed": "whether this app is installed or not \u0095 0: no\n\u0095 1: yes: installed",
      "is_active": "whether this user is active or not "
    },
    "app_events_relevant": {
      "event_id": "event id ",
      "app_id": "app id ",
      "is_installed": "whether it is installed ",
      "is_active": "whether it is active "
    },
    "app_labels": {
      "app_id": "id of the app user ",
      "label_id": "id of labels represents which behavior category that each user belongs to  "
    },
    "events": {
      "event_id": "unique id number referring to the event ",
      "device_id": "id number referring the device ",
      "timestamp": "the time of the event ",
      "longitude": "longitude  \n\nthe location / coordinate = (longitude, latitude)",
      "latitude": "latitude "
    },
    "events_relevant": {
      "event_id": "event id ",
      "device_id": "devide id ",
      "timestamp": "timestamp ",
      "longitude": "longitude ",
      "latitude": "latitude "
    },
    "gender_age": {
      "device_id": "unique number of devices ",
      "gender": "gender of the user who uses this device ",
      "age": "age of the user who uses this device \u0095 M: male;\n\u0095 F: female",
      "group": "group of the ages "
    },
    "gender_age_test": {
      "device_id": "devide id "
    },
    "gender_age_train": {
      "device_id": "devide id ",
      "gender": "gender ",
      "age": "age ",
      "group": "group "
    },
    "label_categories": {
      "label_id": "unique id of label ",
      "category": "category of the label "
    },
    "phone_brand_device_model2": {
      "device_id": "the id number of the device ",
      "phone_brand": "phone brand \n\nphone_brand has duplicated values since some device models belong to the same brand",
      "device_model": "device model \n\nphone_brand has duplicated values since some device models belong to the same brand"
    },
    "sample_submission": {
      "device_id": "device id ",
      "F23-": "female under 23 years old ",
      "F24-26": "female between 24 to 26 years old ",
      "F27-28": "female between 27 to 28 years old ",
      "F29-32": "female between 29 to 32 years old ",
      "F33-42": "female between 33 to 42 years old ",
      "F43+": "female over 43 years old ",
      "M22-": "male under 22 years old ",
      "M23-26": "male between 23 to 26 years old ",
      "M27-28": "male between 27 to 28 years old ",
      "M29-31": "male between 29 to 31 years old ",
      "M32-38": "male between 32 to 38 years old ",
      "M39+": "male over 39 years old "
    }
  },
  "beer_factory": {
    "customers": {
      "CustomerID": "the unique id for the customer ",
      "First": "the first name of the customer ",
      "Last": "the last name of the customer ",
      "StreetAddress": "the address of the customer ",
      "City": "the city where the customer lives ",
      "State": "the state code \n please refer to https://www23.statcan.gc.ca/imdb/p3VD.pl?Function=getVD&TVD=53971\nand mention its corresponding state name in the question. i.e. New York-- NY",
      "ZipCode": "the zip code ",
      "Email": "the customer's email ",
      "PhoneNumber": "the customer's phone number ",
      "FirstPurchaseDate": "the first purchase date of the customer yyyy-mm-dd",
      "SubscribedToEmailList": "whether the customer subscribe to the email list \n\n 'true' means the user permits the company to send regular emails to them. ",
      "Gender": "the customer's gender "
    },
    "geolocation": {
      "LocationID": "the id of the location ",
      "Latitude": "the latitude of the location ",
      "Longitude": "the longitude of the location \n\nprecise location / coordinate = POINT(latitude, longitude)"
    },
    "location": {
      "LocationID": "the unique id for the location ",
      "LocationName": "the name of the location ",
      "StreetAddress": "the street address ",
      "City": "the city where the location locates ",
      "State": "the state code ",
      "ZipCode": "the zip code of the location "
    },
    "rootbeerbrand": {
      "BrandID": "the unique id for the brand ",
      "BrandName": "the brand name ",
      "FirstBrewedYear": "the first brewed year of the brand \n\nbrand with earlier first brewed year has a much longer brewed history",
      "BreweryName": "the brewery name ",
      "City": "the city where the brewery locates ",
      "State": "the state code ",
      "Country": "the country where the brewery locates \n\ncan find its corresponding continent. e.g., U.S.--> North America ",
      "Description": "the description of the brand ",
      "CaneSugar": "whether the drink contains cane sugar ",
      "CornSyrup": "whether the drink contains the corn syrup ",
      "Honey": "whether the drink contains the honey  \n\nif the beer has honey, it means this beer is sweeter or has sweetness",
      "ArtificialSweetener": "whether the drink contains the artificial sweetener  \n\nif the beer has artificial sweetener, it means this beer is sweeter or has sweetness",
      "Caffeinated": "whether the drink is caffeinated ",
      "Alcoholic": "whether the drink is alcoholic ",
      "AvailableInCans": "whether the drink is available in cans ",
      "AvailableInBottles": "whether the drink is available in bottles ",
      "AvailableInKegs": "whether the drink is available in kegs ",
      "Website": "the website of the brand ",
      "FacebookPage": "the facebook page of the brand \n\nif not, it means this brand doesn't advertise on facebook",
      "Twitter": "the twitter of the brand \n\nif not, it means this brand doesn't advertise on twitter",
      "WholesaleCost": "the wholesale cost ",
      "CurrentRetailPrice": "the current retail price \n\nThe unit profit available to wholesalers = current retail price - wholesale cost"
    },
    "rootbeer": {
      "RootBeerID": "the unique id for the root beer ",
      "BrandID": "the brand id ",
      "ContainerType": "the type of the container ",
      "LocationID": "the location id of the selling company  ",
      "PurchaseDate": "the purchase date of the root beer "
    },
    "rootbeerreview": {
      "CustomerID": "the id of the customer ",
      "BrandID": "the id of the brand ",
      "StarRating": "the star rating of the root beer \n\nroot beer with higher star rating has higher market evaluation and acceptance",
      "ReviewDate": "the review date yyyy-mm-dd",
      "Review": "the specific review content "
    },
    "transaction": {
      "TransactionID": "the unique id for the transaction ",
      "CreditCardNumber": "the number of the credit card used for payment ",
      "CustomerID": "the customer id ",
      "TransactionDate": "the transaction date yyyy-mm-dd",
      "CreditCardType": "the credit card type ",
      "LocationID": "the location id of the selling company  ",
      "RootBeerID": "the root beer id ",
      "PurchasePrice": "the unit purchase price of the root beer us dollars"
    }
  },
  "chicago_crime": {
    "Community_Area": {
      "community_area_no": "unique community area number ",
      "community_area_name": "community area name ",
      "side": "district  ",
      "population": "population of the community "
    },
    "District": {
      "district_no": "unique number identifying the district ",
      "district_name": " name of the district ",
      "address": "Street address of the police district building ",
      "zip_code": "ZIP code of the police district building ",
      "commander": "Name of the district's commanding officer \n\n\nthe person who should be responsible for the crime case. ",
      "email": "Email address to contact district administrators ",
      "phone": "Main telephone number for the district ",
      "fax": "Fax number for the district ",
      "tty": "Number of the district teletype machine. A teletype machine is a device that lets people who are deaf, hard of hearing, or speech-impaired use the telephone to communicate, by allowing them to type text messages.",
      "twitter": "The district twitter handle.  Twitter is a social networking service on which users post and interact with brief messages known as \"tweets\""
    },
    "FBI_Code": {
      "fbi_code_no": "unique code made by fbi to classify the crime cases ",
      "title": "Short description of the kind of crime ",
      "description": "Detailed description of the kind of crime ",
      "crime_against": "States who the crime is against.  Values are Persons, Property, Society, or \"Persons and Society\""
    },
    "IUCR": {
      "iucr_no": "Unique identifier for the incident classification ",
      "primary_description": "The general description of the incident classification \n\n\nIt's the general description ",
      "secondary_description": "The specific description of the incident classification \n\n\nIt's the specific description ",
      "index_code": "Uses values \"I\" and \"N\" to indicate crimes  \n\n\n \"Indexed\" (severe, such as murder, rape, arson, and robbery)\n\n \"Non-Indexed\" (less severe, such as vandalism, weapons violations, and peace disturbance) "
    },
    "Neighborhood": {
      "neighborhood_name": "The neighborhood name as used in everyday communication ",
      "community_area_no": "The community area in which most of the neighborhood is located "
    },
    "Ward": {
      "ward_no": "A two digit number identifying the legislative district (ward) where the incident occurred. ",
      "alderman_first_name": "Alderman first name ",
      "alderman_last_name": "Alderman last name ",
      "alderman_name_suffix": "Alderman name suffix ",
      "ward_office_address": "ward office address ",
      "ward_office_zip": "ward office zipcode ",
      "ward_email": "ward email ",
      "ward_office_phone": "ward office phone number ",
      "ward_office_fax": "ward office fax number ",
      "city_hall_office_room": "city hall office room ",
      "city_hall_office_phone": "city hall office phone number ",
      "city_hall_office_fax": "city hall office fax number ",
      "Population": "population "
    },
    "Crime": {
      "report_no": "unique Numeric identifier of the crime report. ",
      "case_number": "Case number assigned to the reported crime. \n \n\nThere is usually one case number for any reported crime except in the case of multiple homicide where a single report will produce one case number for each victim\n\nif case_number appears > 1, it means this is a multiple homicide",
      "date": "Date of the occurrence of the incident being reported ",
      "block": "A redacted address indicating in which city block the incident occurred ",
      "iucr_no": "Illinois Uniform Crime Reporting code: a four digit code used to classify criminal incidents when taking reports. ",
      "location_description": "A description of the kind of area where incident occurred ",
      "arrest": "A true/false value indicating if an arrest has been made ",
      "domestic": "A true/false value indicating if the incident is as case of domestic violence ",
      "beat": "beat ",
      "district_no": "A number indicating the geographic subdivision of the police district where the incident occurred ",
      "ward_no": "A two digit number identifying the legislative district (ward) where the incident occurred. ",
      "community_area_no": "A number identifying one of 77 geographic areas where the incident occurred ",
      "fbi_code_no": "A code identifying the type of crime reported according to the classification scheme used by the FBI. ",
      "latitude": "The latitude where incident is reported to have occurred. ",
      "longitude": "The longitude where incident is reported to have occurred. \n \n\nThe precise location / coordinate: combines the longitude and latitude for plotting purposes. (latitude, longitude)"
    }
  },
  "mondial_geo": {
    "borders": {
      "Country1": "a country code ",
      "Country2": "a country code ",
      "Length": "length of the border between country1 and country2 "
    },
    "city": {
      "Name": "name of city ",
      "Country": "the code of the country where it belongs to ",
      "Province": "the name of the province where it belongs to ",
      "Population": "population of the city ",
      "Longitude": "geographic longitude ",
      "Latitude": "geographic latitude "
    },
    "continent": {
      "Name": "name of the continent ",
      "Area": "total area of the continent. "
    },
    "country": {
      "Name": "the country name ",
      "Code": "country code ",
      "Capital": "the name of the capital, ",
      "Province": "the province where the capital belongs to, ",
      "Area": "the total area, ",
      "Population": "the population number. "
    },
    "desert": {
      "Name": "the name of the desert ",
      "Area": "the total area of the desert ",
      "Longitude": "Longitude ",
      "Latitude": "Latitude \n\n\ncoordinate: (Longitude, Latitude)"
    },
    "economy": {
      "Country": "the country code ",
      "GDP": "gross domestic product ",
      "Agriculture": "percentage of agriculture of the GDP ",
      "Service": "percentage of services of the GDP, ",
      "Industry": "percentage of industry of the GDP ",
      "Inflation": "inflation rate (per annum), "
    },
    "encompasses": {
      "Country": "a country code ",
      "Continent": "the continent name. ",
      "Percentage": "how much of the area of a country belongs to the continent %"
    },
    "ethnicGroup": {
      "Country": "the country code ",
      "Name": "name of the language ",
      "Percentage": "percentage of the language in this country. %"
    },
    "geo_desert": {
      "Desert": "the name of the desert ",
      "Country": "the country code where it is located ",
      "Province": "the province of this country "
    },
    "geo_estuary": {
      "River": "the name of the river ",
      "Country": "the country code where it is located ",
      "Province": "the province of this country "
    },
    "geo_island": {
      "Island": "the name of the island ",
      "Country": "the country code where it is located ",
      "Province": "the province of this country "
    },
    "geo_lake": {
      "Lake": "the name of the lake ",
      "Country": "the country code where it is located ",
      "Province": "the province of this country "
    },
    "geo_mountain": {
      "Mountain": "the name of the mountain ",
      "Country": "the country code where it is located ",
      "Province": "the province of this country "
    },
    "geo_river": {
      "River": "the name of the river ",
      "Country": "the country code where it is located ",
      "Province": "the province of this country "
    },
    "geo_sea": {
      "Sea": "the name of the sea ",
      "Country": "the country code where it is located ",
      "Province": "the province of this country "
    },
    "geo_source": {
      "River": "the name of the river ",
      "Country": "the country code where it is located ",
      "Province": "the province of this country "
    },
    "island": {
      "Name": "the name of the island ",
      "Islands": "the group of islands where it belongs to ",
      "Area": "the area of the island ",
      "Height": "the maximal elevation of the island ",
      "Type": " the type of the island ",
      "Longitude": "Longitude ",
      "Latitude": "Latitude "
    },
    "islandIn": {
      "Island": "island ",
      "Sea": "sea ",
      "Lake": "lake ",
      "River": "river "
    },
    "isMember": {
      "Country": "country ",
      "Organization": "organization ",
      "Type": "type "
    },
    "lake": {
      "Name": "the name of the lake ",
      "Area": "the total area of the lake ",
      "Depth": " the depth of the lake ",
      "Altitude": "the altitude (above sea level) of the lake ",
      "River": "the river that flows out of the lake ",
      "Type": "the type of the lake ",
      "Longitude": "longitude of lake  ",
      "Latitude": "latitude of lake  "
    },
    "language": {
      "Country": "the country code ",
      "Name": "name of the language ",
      "Percentage": "percentage of the language in this country %"
    },
    "located": {
      "City": "the name of the city ",
      "Country": "the country code where the city belongs to ",
      "Province": "the province where the city belongs to ",
      "River": " the river where it is located at ",
      "Lake": "the lake where it is located at ",
      "Sea": "the sea where it is located at Note that for a given city, there can be several lakes/seas/rivers where it is located at."
    },
    "locatedOn": {
      "City": "the name of the city ",
      "Province": " the province where the city belongs to ",
      "Country": "the country code where the city belongs to ",
      "Island": " the island it is (maybe only partially) located on "
    },
    "mergesWith": {
      "Sea1": "the name of the mountain ",
      "Sea2": "the country code where it is located "
    },
    "mountain": {
      "Name": "the name of the mountain ",
      "Mountains": "the mountains where it belongs to ",
      "Height": " the maximal elevation of the summit of the mountain ",
      "Type": " the sea where it finally flows to (note that at most one out of {river,lake,sea} can be non-null",
      "Longitude": "the length of the river ",
      "Latitude": "the longitude of its source "
    },
    "mountainOnIsland": {
      "Mountain": "the name of the mountain ",
      "Island": "the name of the island "
    },
    "organization": {
      "Abbreviation": " its abbreviation ",
      "Name": "the full name of the organization ",
      "City": "the city where the headquarters are located ",
      "Country": " the code of the country where the headquarters are located ",
      "Province": "the name of the province where the headquarters are located, ",
      "Established": "date of establishment "
    },
    "politics": {
      "Country": "the country code ",
      "Independence": "date of independence \n\n\nif the value is null or empty, it means this country is not independent",
      "Dependent": " the country code where the area belongs to ",
      "Government": "type of government "
    },
    "population": {
      "Country": "the country code ",
      "Population_Growth": "population growth rate per annum",
      "Infant_Mortality": " infant mortality per thousand"
    },
    "province": {
      "Name": "the name of the administrative division ",
      "Country": " the country code where it belongs to ",
      "Area": "the total area of the province, ",
      "Population": "the population of the province ",
      "Capital": "the name of the capital if null, doesn't have capital",
      "CapProv": "the name of the province where the capital belongs to \n\n\nnote that capprov is not necessarily equal to name"
    },
    "religion": {
      "Country": "the country code ",
      "Name": "name of the religion ",
      "Percentage": "percentage of the language in this country %"
    },
    "river": {
      "Name": "the name of the river ",
      "River": "the river where it finally flows to ",
      "Lake": "the lake where it finally flows to ",
      "Sea": " the sea where it finally flows to (note that at most one out of {river,lake,sea} can be non-null",
      "Length": "the length of the river ",
      "SourceLongitude": "the longitude of its source ",
      "SourceLatitude": "the latitude of its source ",
      "Mountains": "the mountains where its source is located ",
      "SourceAltitude": " the elevation (above sea level) of its source ",
      "EstuaryLongitude": "the coordinates of its estuary ",
      "EstuaryLatitude": "the latitude of its estuary "
    },
    "sea": {
      "Name": "the name of the sea ",
      "Depth": "the maximal depth of the sea "
    },
    "target": {
      "Country": "country ",
      "Target": "target "
    }
  },
  "student_loan": {
    "bool": {
      "name": "name "
    },
    "person": {
      "name": "student's name "
    },
    "disabled": {
      "name": "the name of the disabled students "
    },
    "enlist": {
      "name": "the name of the enlisted students ",
      "organ": "the organization that the student enlisted in  "
    },
    "filed_for_bankrupcy": {
      "name": "student name who filed for bankruptcy "
    },
    "longest_absense_from_school": {
      "name": "student's name ",
      "month": "the duration of absence \n\n0 means that the student has never been absent. "
    },
    "male": {
      "name": "student's name who are male \n\nthe students who are not in this list are female."
    },
    "no_payment_due": {
      "name": "student's name  ",
      "bool": "whether the student has payment dues \n\n\u0095\tneg: the student doesn't have payment due\n\u0095\tpos: the student has payment due"
    },
    "unemployed": {
      "name": "student who is unemployed "
    },
    "enrolled": {
      "name": "name ",
      "school": "school ",
      "month": "month "
    }
  },
  "codebase_comments": {
    "Method": {
      "Id ": "unique id number\nthat identifies methods ",
      "Name ": "name of methods  the second part is the task of this method\ndelimited by \".\"",
      "FullComment": "full comment of this method ",
      "Summary": "summary of the method ",
      "ApiCalls": "linearized sequenced of API calls ",
      "CommentIsXml": "whether the comment is XML format or not \n\n\n0: the comment for this method is not XML format.\n1: the comment for this method is XML format.",
      "SampledAt": "the time of sampling ",
      "SolutionId": "id number of solutions ",
      "Lang": "language code of method ",
      "NameTokenized": "tokenized name "
    },
    "MethodParameter": {
      "Id": "unique id number identifying method parameters ",
      "MethodId": "methodid ",
      "Type": "type of the method ",
      "Name": "name of the method \n\n\nif the name is not a word like \"H\", \"z\", it means this method is not well-discriminative."
    },
    "Repo": {
      "Id": "unique id to identify repositories ",
      "Url": "github address of repository ",
      "Stars": "stars this repository has received ",
      "Forks": "forks that the repository has received ",
      "Watchers": "how many watchers of this repository ",
      "ProcessedTime": "how much processed time of downloading this repository "
    },
    "Solution": {
      "Id": "unique id to identify this solution ",
      "RepoId": "id of repository ",
      "Path": "path of this solution ",
      "ProcessedTime": "processed time ",
      "WasCompiled": "whether this solution needs to be compiled or not \n\n\n0: this solution needs to be compiled if user wants to implement it.\n1: this solution can be implemented without needs of compilation"
    }
  },
  "retail_world": {
    "Categories": {
      "CategoryID": "the unique id for the category ",
      "CategoryName": "the category name ",
      "Description": "the detailed description of the category ",
      "Picture": "the picture of the category "
    },
    "Customers": {
      "CustomerID": "the unique id for customers ",
      "CustomerName": "the customer name ",
      "ContactName": "the contact person's name representing the company ",
      "ContactTitle": "the title of the contact person ",
      "Address": "the address of the customer ",
      "City": "the city where the customer is located ",
      "Region": "the region where the customer is located ",
      "PostalCode": "the postal code ",
      "Country": "the country ",
      "Phone": "the phone number ",
      "Fax": "the fax number "
    },
    "Employees": {
      "EmployeeID": "the unique id for employees ",
      "LastName": "the employee's last name ",
      "FirstName": "the employee's first name \n\nthe employee's full name is 'first_name last_name'. \n",
      "Title": "the employee's position title ",
      "TitleOfCourtesy": "the title of the courtesy \n\n\u0095 Ms.: Mr. was used as a shortening of master, a title used for men of high authority\n\u0095 Dr.: it is used as a designation for a person who has obtained a doctorate (commonly a PhD).\n\u0095 Mrs.: It was used as a shortening of mistress a title used for women of high rank or a woman who was the female head of a household\n\u0095 Ms: an honorific used to refer to any woman, regardless of marital status",
      "BirthDate": "the birth date of the employee ",
      "HireDate": "the hire date of the employee ",
      "Address": "the address of the employee ",
      "City": "the city where the employee is located ",
      "Region": "the region where the employee is located ",
      "PostalCode": "the postal code  ",
      "Country": "the country where the employee is located ",
      "HomePhone": "employee's home phone number ",
      "Extension": "employee's extension number ",
      "Photo": "the photo of the employee ",
      "Notes": "some additional information of the employee ",
      "ReportsTo": "the employee id that the employee directly reports to \n\n\u0091reportsto\u0092 represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter",
      "PhotoPath": "the url of the employee's photo ",
      "Salary": "the employee's salary  "
    },
    "Shippers": {
      "ShipperID": "the unique id for shippers ",
      "ShipperName": "the shipped company name ",
      "Phone": "the phone of the company "
    },
    "Suppliers": {
      "SupplierID": "the unique id for suppliers ",
      "SupplierName": "the supplier name ",
      "ContactName": "the contact person's name representing the company ",
      "ContactTitle": "the title of the contact person ",
      "Address": "the address of the supplier ",
      "City": "the city where the supplier is located ",
      "Region": "the region where the supplier is located ",
      "PostalCode": "the postal code ",
      "Country": "the country ",
      "Phone": "the phone number ",
      "Fax": "the fax number ",
      "HomePage": "the home page url of the supply company "
    },
    "Products": {
      "ProductID": "the unique id for products ",
      "ProductName": "the name of the product ",
      "SupplierID": "the unique id for supplier ",
      "CategoryID": "the unique id for the product category ",
      "QuantityPerUnit": "the quantity per unit of the product ",
      "Unit": "the unit of the product ",
      "Price": "the price "
    },
    "Orders": {
      "OrderID": "the unique id for orders ",
      "CustomerID": "the unique id for customers ",
      "EmployeeID": "the unique id for employees ",
      "OrderDate": "the order date ",
      "RequiredDate": "the required date of the order ",
      "ShippedDate": "the shipped date of the order ",
      "ShipVia": "the shippers id ",
      "Freight": "the freight of the product ",
      "ShipName": "name of the consignee ",
      "ShipAddress": "address ships to ",
      "ShipCity": "the ship city ",
      "ShipRegion": "the ship region ",
      "ShipPostalCode": "the postal code ",
      "ShipCountry": "the country  ",
      "ShipperID": "the id of the shipper "
    },
    "OrderDetails": {
      "OrderID": "the unique id for orders ",
      "ProductID": "the unique id for products ",
      "UnitPrice": "the unit price of the products ",
      "Quantity": "the quantity of the ordered products ",
      "Discount": "the discount \n\nthe total payment of the order = unit price * quantity * (1-discount)",
      "OrderDetailID": "id of the order detail "
    }
  },
  "music_tracker": {
    "torrents": {
      "groupName": "release title ",
      "totalSnatched": "number of times the release has been downloaded ",
      "artist": "artist / group name ",
      "groupYear": "release year ",
      "releaseType": "release type (e.g., album, single, mixtape) ",
      "groupId": "Unique release identifier from What.CD. Used to ensure no releases are duplicates. ",
      "id": "unique identifier (essentially an index) "
    },
    "tags": {
      "index": "index ",
      "id": "release identifier which can be matched with id field in the torrents table ",
      "tag": "tag "
    }
  },
  "disney": {
    "characters": {
      "movie_title": "unique title of the movie ",
      "release_date": "The release date of the movie. ",
      "hero": "The main character of the movie.  \n\n\nround role",
      "villian": "The villain of the movie. a character whose evil actions or motives are important to the plot. ",
      "song": "A song associated with the movie. "
    },
    "director": {
      "name": "unique movie name ",
      "director": "the name of the director one director may have multiple movies.\n\nmore movies --> this director is more productive"
    },
    "movies_total_gross": {
      "movie_title": "movie title ",
      "release_date": "release date ",
      "genre": "genre of the movie ",
      "MPAA_rating": "Motion Picture Association of America of the disney movie \n\n G: general audience\n PG: mature audiences or parental guidance suggested\n R: restricted: no children under 17 allowed without parents or adult guardians\n PG-13: PARENTS STRONGLY CAUTIONED. Some material may be inappropriate for children under 13\nmovies need accompany with parents: PG, PG-13, PG-17;\nif \"Not rated\" or null, it means this film can show only gets permissions by theatre management\nif the film can show without need of permissions of theatre management, the MPAA_rating should not be \"Not rated\" or null",
      "total_gross": "The total gross of the movie. \n\nmore total_gross--> more popular movie",
      "inflation_adjusted_gross": "The inflation-adjusted gross of the movie. \n\nestimated inflation rate = inflation_adjusted_gross / total_gross;\nthe current gross = inflation_adjusted_gross"
    },
    "revenue": {
      "Year": "The year the movie was released. ",
      "Studio Entertainment[NI 1]": "The studio entertainment segment of the Walt Disney Company. ",
      "Disney Consumer Products[NI 2]": "The consumer products segment of the Walt Disney Company. ",
      "Disney Interactive[NI 3][Rev 1]": "The interactive segment of the Walt Disney Company.  ",
      "Walt Disney Parks and Resorts": "The parks and resorts segment of the Walt Disney Company. ",
      "Disney Media Networks": "The media networks segment of the Walt Disney Company. ",
      "Total": "The total box office gross for the movie. "
    },
    "voice-actors": {
      "character": "The unique name of the character.  ",
      "voice-actor": "The name of the voice actor. ",
      "movie": "The name of the movie. "
    }
  },
  "college_completion": {
    "institution_details": {
      "unitid": "unique Education Unit ID number ",
      "chronname": "Institution name ",
      "city": "Institution city ",
      "state": "Institution state ",
      "level": "Level of institution \n\n4-year: bachelor's degree\n2-year: associate's degree",
      "control": "Control of institution Public, \nPrivate not-for-profit, \nPrivate for-profit",
      "basic": "Carnegie Foundation for the Advancement of Teaching Basic Classification (2010 version) ",
      "hbcu": "Denotes Historically Black College and Universities ",
      "flagship": "Denotes Public flagship institutions ",
      "long_x": "Institution longitude ",
      "lat_y": "Institution latitude \n\ninstitute Coordinate",
      "site": "Institution Web site address ",
      "student_count": "Total number of undergraduates in 2010 ",
      "awards_per_value": "Completions per 100 FTE (full-time equivalency) undergraduate students (average 2011, 2012, and 2013) ",
      "awards_per_state_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, state and sector average \n\n\u0095 if his institute's completion (or graduation) rate exceeds the average for the state and sector in which it belongs:\nawards_per_value > awards_per_state_value\n\u0095 if his institute's completion (or graduation) rate falls below the average for the state and sector in which it belongs:\nawards_per_value < awards_per_state_value",
      "awards_per_natl_value": "Completions per 100 FTE (full-time equivalency) undergraduate students, national sector average \n\n\u0095 if his institute's completion (or graduation) rate exceeds the average for the nationalin which it belongs:\nawards_per_value > awards_per_natl_value\n\u0095 if his institute's completion (or graduation) rate falls below the average for the state and industry in which it belongs:\nawards_per_value < awards_per_natl_value",
      "exp_award_value": "Estimated educational spending per academic award in 2013. Includes all certificates and degrees expenses related to instruction, research, public service, student services, academic support, institutional support, operations and maintenance. Includes all certificates and degrees",
      "exp_award_state_value": "Spending per completion, state and sector average ",
      "exp_award_natl_value": "Spending per completion, national sector average ",
      "exp_award_percentile": "exp_award_percentile ",
      "ft_pct": "Percentage of undergraduates who attend full-time ",
      "fte_value": "total number of full-time equivalent undergraduates ",
      "fte_percentile": "fte_percentile ",
      "med_sat_value": "Median estimated SAT value for incoming students ",
      "med_sat_percentile": "Institution's percent rank for median SAT value within sector Institution's percent rank for median SAT value within sector",
      "aid_value": "The average amount of student aid going to undergraduate recipients ",
      "aid_percentile": "Institution's percent rank for average amount of student aid going to undergraduate recipients within sector Institution's percent rank for average amount of student aid going to undergraduate recipients within sector",
      "endow_value": "End-of-year endowment value per full-time equivalent student ",
      "endow_percentile": "Institution's percent rank for endowment value per full-time equivalent student within sector ",
      "grad_100_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 100 percent of expected time (bachelor's-seeking group at 4-year institutions) %, \n\n\nlower means harder to graduate for bachelor",
      "grad_100_percentile": "Institution's percent rank for completers within 100 percent of normal time within sector ",
      "grad_150_value": "percentage of first-time, full-time, degree-seeking undergraduates who complete a degree or certificate program within 150 percent of expected time (bachelor's-seeking group at 4-year institutions) %, \n\n\nlower means harder to graduate for bachelor",
      "grad_150_percentile": "Institution's percent rank for completers within 150 percent of normal time within sector ",
      "pell_value": "percentage of undergraduates receiving a Pell Grant ",
      "pell_percentile": "Institution's percent rank for undergraduate Pell recipients within sector ",
      "retain_value": "share of freshman students retained for a second year ",
      "retain_percentile": "Institution's percent rank for freshman retention percentage within sector ",
      "ft_fac_value": "Percentage of employees devoted to instruction, research or public service who are full-time and do not work for an associated medical school ",
      "ft_fac_percentile": "Institution's percent rank for full-time faculty share within sector  ",
      "vsa_year": "Most recent year of Student Success and Progress Rate data available from the Voluntary System of Accountability ",
      "vsa_grad_after4_first": "First-time, full-time students who graduated from this institution within four years ",
      "vsa_grad_elsewhere_after4_first": "First-time, full-time students who graduated from another institution within four years ",
      "vsa_enroll_after4_first": "First-time, full-time students who are still enrolled at this institution after four years ",
      "vsa_enroll_elsewhere_after4_first": "First-time, full-time students who are enrolled at another institution after four years ",
      "vsa_grad_after6_first": "First-time, full-time students who graduated from this institution within six years null: not available",
      "vsa_grad_elsewhere_after6_first": "First-time, full-time students who graduated from another institution within six years ",
      "vsa_enroll_after6_first": "First-time, full-time students who are still enrolled at this institution after six years ",
      "vsa_enroll_elsewhere_after6_first": "First-time, full-time students who are enrolled at another institution after six years ",
      "vsa_grad_after4_transfer": "Full-time transfer students who graduated from this institution within four years ",
      "vsa_grad_elsewhere_after4_transfer": "Full-time transfer students who graduated from this institution within four years ",
      "vsa_enroll_after4_transfer": "Full-time transfer students who are still enrolled at this institution after four years ",
      "vsa_enroll_elsewhere_after4_transfer": "Full-time transfer students who are enrolled at another institution after four years ",
      "vsa_grad_after6_transfer": "Full-time transfer students who graduated from this institution within six years ",
      "vsa_grad_elsewhere_after6_transfer": "Full-time transfer students who graduated from another institution within six years ",
      "vsa_enroll_after6_transfer": "Full-time transfer students who are still enrolled at this institution after six years ",
      "vsa_enroll_elsewhere_after6_transfer": "Full-time transfer students who are enrolled at another institution after six years ",
      "similar": "similar ",
      "state_sector_ct": "state_sector_ct ",
      "carnegie_ct": "carnegie_ct ",
      "counted_pct": "counted_pct ",
      "nicknames": "nicknames ",
      "cohort_size": "cohort_size "
    },
    "institution_grads": {
      "unitid": "Education Unit ID number ",
      "year": "year of data release ",
      "gender": "gender of students 'B' = both genders; 'M' = male; 'F' = female",
      "race": "race/ethnicity of students \n\n'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White",
      "cohort": "degree-seeking cohort type \n\n\u0095 '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; \n\u0095 '4y other' = Students seeking another type of degree or certificate at a 4-year institution; \n\u0095 '2y all' = Degree-seeking students at 2-year institutions\n4-year degree is bachelor's degree\n2-year degree is associate's degree",
      "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions ",
      "grad_100": "Number of students who graduated within 100 percent of normal/expected time ",
      "grad_150": "Number of students who graduated within 150 percent of normal/expected time ",
      "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time ",
      "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time "
    },
    "state_sector_grads": {
      "stateid": "state FIPS (Federal Information Processing System) code ",
      "state": "state name  ",
      "state_abbr": "state_abbr ",
      "control": "control Public, \nPrivate not-for-profit, \nPrivate for-profit",
      "level": "Level of institution \n\n4-year: bachelor's degree\n2-year: associate's degree",
      "year": "year of data release ",
      "gender": "gender of students B' = both genders; 'M' = male; 'F' = female",
      "race": "race/ethnicity of students \n\n'X' = all students; 'Ai' = American Indian; 'A' = Asian; 'B' = Black; 'H' = Hispanic; 'W' = White",
      "cohort": "degree-seeking cohort type \n\n\u0095 '4y bach' = Bachelor's/equivalent-seeking cohort at 4-year institutions; \n\u0095 '4y other' = Students seeking another type of degree or certificate at a 4-year institution; \n\u0095 '2y all' = Degree-seeking students at 2-year institutions\n4-year degree is bachelor's degree\n2-year degree is associate's degree",
      "grad_cohort": "Number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions ",
      "grad_100": "Number of students who graduated within 100 percent of normal/expected time ",
      "grad_150": "Number of students who graduated within 150 percent of normal/expected time ",
      "grad_100_rate": "Percentage of students who graduated within 100 percent of normal/expected time ",
      "grad_150_rate": "Percentage of students who graduated within 150 percent of normal/expected time ",
      "grad_cohort_ct": "Number of institutions with data included in the cohort "
    },
    "state_sector_details": {
      "stateid": "state FIPS (Federal Information Processing System) code ",
      "state": "state name  ",
      "state_post": "state_post ",
      "level": "Level of institution \n\n4-year: bachelor's degree\n2-year: associate's degree",
      "control": "control Public, \nPrivate not-for-profit, \nPrivate for-profit",
      "schools_count": "schools_count ",
      "counted_pct": "Percentage of students in the entering class (Fall 2007 at 4-year institutions, Fall 2010 at 2-year institutions) who are first-time, full-time, degree-seeking students and generally part of the official graduation rate ",
      "awards_per_state_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, state and sector average ",
      "awards_per_natl_value": "Completions per 100 FTE (full-time equivalent) undergraduate students, national sector average ",
      "exp_award_state_value": "Spending per completion, state and sector average  ",
      "exp_award_natl_value": "Spending per completion, national sector average ",
      "state_appr_value": "State appropriations to higher education in fiscal year 2011 per resident ",
      "state_appr_rank": "state_appr_rank ",
      "grad_rate_rank": "grad_rate_rank ",
      "awards_per_rank": "awards_per_rank "
    }
  },
  "ice_hockey_draft": {
    "height_info": {
      "height_id": "the unique height id ",
      "height_in_cm": "height in cm e.g. 180 --> the height is 180 cm",
      "height_in_inch": "height in inch "
    },
    "weight_info": {
      "weight_id": "the unique weight id ",
      "weight_in_kg": "weight in kg e.g. 70: -->70 kg",
      "weight_in_lbs": "weight in lbs "
    },
    "PlayerInfo": {
      "ELITEID": "the unique number identifying the players who attended the draft ",
      "PlayerName": "the name of the player ",
      "birthdate": "the birthdate of the player ",
      "birthyear": "the birth year of the player ",
      "birthmonth": "the birth month of the player ",
      "birthday": "the birthday of the player ",
      "birthplace": "the player of the birthplace ",
      "nation": "the nation of the player \n can ask questions about their corresponding continents. or group nations with their continents. You can refer to https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent\ne.g.: Slovakia --> Europe",
      "height": "the id number identifying heights ",
      "weight": "the id number identifying weights ",
      "position_info": "position information of the player \n There are six different positions in hockey: \nleft wing,  \nright wing,  \ncenter,  \nleft defenseman, \nright defenseman \ngoalie. \nLeft wings, right wings, and centers are all considered forwards, while left and right defensemen are considered the defense.",
      "shoots": "shoots \n \n\u0095 L: Left-shooted \n\u0095 R: Right-shooted \n\u0095 '-': no preference",
      "draftyear": "draft year ",
      "draftround": "draft round ",
      "overall": "overall orders of draft picks ",
      "overallby": "drafted by which team ",
      "CSS_rank": "Central Scouting Service ranking \n higher rank refers to higher prospects for the draft",
      "sum_7yr_GP": "Total NHL games played in player\u0092s first 7 years of NHL career \n higher --> more attendance in the first 7 years",
      "sum_7yr_TOI": "Total NHL Time on Ice in player\u0092s first 7 years of NHL career \n higher --> more playing time in the first 7 years of career",
      "GP_greater_than_0": "Played a game or not in player\u0092s first 7 years of NHL career \u0095 yes \n\u0095 no"
    },
    "SeasonStatus": {
      "ELITEID": "the id number of the players ",
      "SEASON": "season when players are playing ",
      "TEAM": "which team the player belong to ",
      "LEAGUE": "league ",
      "GAMETYPE": "type of games \u0095 Regular season \u0095 playoffs (post season)",
      "GP": "number of games ",
      "G": "Goals in Draft Year ",
      "A": "Assists in Draft Year ",
      "P": "Points in Draft Year \n higher --> more valuable",
      "PIM": "Penalty Minutes in Draft Year \n higher --> This player has committed more rule violations.",
      "PLUSMINUS": "Goal Differential in Draft Year Goal Differential"
    }
  },
  "world_development_indicators": {
    "Country": {
      "CountryCode": "unique code identifying countries ",
      "ShortName": "Short names of countries  ",
      "TableName": "table names of countries ",
      "LongName": "long or full name of countries ",
      "Alpha2Code": "2 digit code of countries  ",
      "CurrencyUnit": "Currency Unit used in this country ",
      "SpecialNotes": "Special Notes ",
      "Region": "region that country belongs to  ",
      "IncomeGroup": "income level of countries  ",
      "Wb2Code": "world bank to code ",
      "NationalAccountsBaseYear": "the year used as the base period for constant price calculations in the country's national accounts ",
      "NationalAccountsReferenceYear": "National Accounts Reference Year ",
      "SnaPriceValuation": "SNA Price Valuation ",
      "LendingCategory": "Lending category \u2022 IDA: International Development Associations: (IDA) is the part of the World Bank that helps the world's poorest countries.\n\u2022 IBRD: The International Bank for Reconstruction and Development (IBRD) is a global development cooperative owned by 189 member countries.\n\u2022 Blend: Blend is the cloud banking infrastructure powering billions of dollars in financial transactions every day.",
      "OtherGroups": "other groups \u2022 HIPC: Heavily Indebted Poor Countries\n\u2022 Euro Area: The euro area consists of those Member States of the European Union that have adopted the euro as their currency.",
      "SystemOfNationalAccounts": "System Of National Accounts ",
      "AlternativeConversionFactor": "Alternative conversion factor is the underlying annual exchange rate used for the World Bank Atlas method ",
      "PppSurveyYear": "purchasing power parity survey year ",
      "BalanceOfPaymentsManualInUse": "Balance Of Payments Manual In Use ",
      "ExternalDebtReportingStatus": "External Debt Reporting Status \u2022 Actual\n\u2022 Preliminary\n\u2022 Estimate\n\n\nIf ExternalDebtReportingStatus='Actual', it means this external debt reporting is real and actual, and finished\nif 'Estimate', it means external debt reporting is finished by estimation.\nif 'preliminary', it means this external debt reporting is not finished",
      "SystemOfTrade": "System Of Trade ",
      "GovernmentAccountingConcept": "Government Accounting Concept ",
      "ImfDataDisseminationStandard": "IMF Standards for Data Dissemination ",
      "LatestPopulationCensus": "Latest Population Census ",
      "LatestHouseholdSurvey": "latesthouseholdsurvey ",
      "SourceOfMostRecentIncomeAndExpenditureData": "Source Of Most Recent Income And Expenditure Data ",
      "VitalRegistrationComplete": "Vital Registration Complete ",
      "LatestAgriculturalCensus": "Latest Agricultural Census ",
      "LatestIndustrialData": "Latest Industrial Data ",
      "LatestTradeData": "Latest Trade Data ",
      "LatestWaterWithdrawalData": "Latest Water Withdrawal Data "
    },
    "Series": {
      "SeriesCode": "unique code identifying series ",
      "Topic": "topic of series ",
      "IndicatorName": "Indicator Name ",
      "ShortDefinition": "Short Definition of series ",
      "LongDefinition": "Long Definition of series  ",
      "UnitOfMeasure": "Unit Of Measure ",
      "Periodicity": "Periodicity ",
      "BasePeriod": "a period of business or economic activity used as a basis or reference point especially for indexing, calculating, estimating, or adjudicating prices, taxes, compensation, income, and production ",
      "OtherNotes": "Other Notes ",
      "AggregationMethod": "Aggregation Method ",
      "LimitationsAndExceptions": "Limitations And Exceptions ",
      "NotesFromOriginalSource": "Notes From Original Source ",
      "GeneralComments": "General Comments ",
      "Source": "source of this data ",
      "StatisticalConceptAndMethodology": "Statistical Concept And Methodology ",
      "DevelopmentRelevance": "Development Relevance ",
      "RelatedSourceLinks": "Related Source Links ",
      "OtherWebLinks": "Other Web Links ",
      "RelatedIndicators": "Related Indicators ",
      "LicenseType": "License Type "
    },
    "CountryNotes": {
      "Countrycode": "code identifying unique countries ",
      "Seriescode": "Series code of countries ",
      "Description": "description "
    },
    "Footnotes": {
      "Countrycode": "code identifying unique countries ",
      "Seriescode": "Series code of countries ",
      "Year": "Year ",
      "Description": "Description of country footnotes "
    },
    "Indicators": {
      "CountryName": "code identifying unique countries ",
      "CountryCode": "Series code of countries ",
      "IndicatorName": "indicator name ",
      "IndicatorCode": "indicator code ",
      "Year": "year ",
      "Value": "value "
    },
    "SeriesNotes": {
      "Seriescode": "code identifying the series ",
      "Year": "year ",
      "Description": "Description of series "
    }
  },
  "airline": {
    "Air Carriers": {
      "Code": "the code of the air carriers ",
      "Description": "the description of air carriers "
    },
    "Airports": {
      "Code": "IATA code of the air airports ",
      "Description": "the description of airports "
    },
    "Airlines": {
      "FL_DATE": "flight date ",
      "OP_CARRIER_AIRLINE_ID": "operator carrier airline id ",
      "TAIL_NUM": "plane's tail number plane's tail number",
      "OP_CARRIER_FL_NUM": "operator carrier flight number ",
      "ORIGIN_AIRPORT_ID": "origin airport id ",
      "ORIGIN_AIRPORT_SEQ_ID": "origin airport sequence id ",
      "ORIGIN_CITY_MARKET_ID": "origin city market id ",
      "ORIGIN": "airport of origin \n\n\n\u2022 the origin city could be inferred by this code:\n\nyou can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia\n\nto quickly check",
      "DEST_AIRPORT_ID": "ID of the destination airport ",
      "DEST_AIRPORT_SEQ_ID": "dest_airport_seq_id ",
      "DEST_CITY_MARKET_ID": "dest_city_market_id ",
      "DEST": "Destination airport \n\n\n\u2022 the dest city could be inferred by this code:\n\nyou can refer to https://www.iata.org/en/publications/directories/code-search/?airport.search=mia\n\nto quickly check",
      "CRS_DEP_TIME": "crs_dep_time ",
      "DEP_TIME": "Flight departure time stored as the integer",
      "DEP_DELAY": "Departure delay indicator in minutes\n\n\n\n\n\u2022 if this value is positive: it means this flight delays; if the value is negative, it means this flight departs in advance (-4)\n\n\u2022 if this value <= 0, it means this flight departs on time",
      "DEP_DELAY_NEW": "departure delay new not useful",
      "ARR_TIME": "Flight arrival time. ",
      "ARR_DELAY": "arrival delay time in minutes\n\n\n\n\n\u2022 if this value is positive: it means this flight will arrives late (delay); If the value is negative, this flight arrives earlier than scheduled. (-4)\n\n\u2022 if this value <= 0, it means this flight arrives on time",
      "ARR_DELAY_NEW": "arrival delay new not useful",
      "CANCELLED": "Flight cancellation indicator. ",
      "CANCELLATION_CODE": "cancellation code \n\n\nC--> A: more serious reasons lead to this cancellation",
      "CRS_ELAPSED_TIME": "scheduled elapsed time ",
      "ACTUAL_ELAPSED_TIME": "actual elapsed time \n\n\nif ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME: this flight is faster than scheduled;\n\nif ACTUAL_ELAPSED_TIME > CRS_ELAPSED_TIME: this flight is slower than scheduled",
      "CARRIER_DELAY": "carrier delay minutes",
      "WEATHER_DELAY": "delay caused by the wheather problem minutes",
      "NAS_DELAY": "delay, in minutes, attributable to the National Aviation System minutes",
      "SECURITY_DELAY": "delay attribute to security minutes",
      "LATE_AIRCRAFT_DELAY": "delay attribute to late aircraft minutes"
    }
  },
  "retail_complains": {
    "state": {
      "StateCode": "statecode ",
      "State": "state ",
      "Region": "region "
    },
    "callcenterlogs": {
      "Date received": "complaint date ",
      "Complaint ID": "unique id number representing each complaint ",
      "rand client": "client id ",
      "phonefinal": "final phone number ",
      "vru+line": "voice response unit line ",
      "call_id": "id number identifying the call ",
      "priority": "priority of the complaint 0, 1, 2, \nnull: not available,\nhigher: -> higher priority,\n-> more serious/urgent complaint",
      "type": "type of complaint ",
      "outcome": "the outcome of processing of complaints ",
      "server": "server ",
      "ser_start": "server start time HH:MM:SS",
      "ser_exit": "server exit time ",
      "ser_time": "server time \n\nlonger server time referring to more verbose/longer complaint"
    },
    "client": {
      "client_id": "unique id client number ",
      "sex": "sex of client ",
      "day": "day of the birthday ",
      "month": "month of the birthday ",
      "year": "year when is born ",
      "age": "age  teenager: 13-19\nadult: 19-65\nelder: > 65",
      "social": "social number ssn: us id number for each person",
      "first": "first name ",
      "middle": "middle name ",
      "last": "last name ",
      "phone": "phone number ",
      "email": "email \n\ngoogle email / account: @gamil.com\nmicrosoft email / account: xxx@outlook.com",
      "address_1": "address 1 ",
      "address_2": "address 2 entire address = (address_1, address_2)",
      "city": "city  ",
      "state": "state code ",
      "zipcode": "zipcode ",
      "district_id": "district id number "
    },
    "district": {
      "district_id": "unique id number representing district ",
      "city": "city  ",
      "state_abbrev": "state abbreviated code ",
      "division": "division "
    },
    "events": {
      "Date received": "Date received ",
      "Product": "complaining about which product  ",
      "Sub-product": "sub product if exists \n\ndetailed product",
      "Issue": "problems leading to this complaints ",
      "Sub-issue": "sub problems leading to this complaints if exists \n\nmore detailed issue",
      "Consumer complaint narrative": "Consumer complaint narrative ",
      "Tags": "tags of client ",
      "Consumer consent provided?": "whether the tags labeled under permission of the clients \n\n\u0095 null, 'N/A' or empty value: indicating that the company didn't get the permission of consent.\n\u0095 if the value is not empty: customers provide the consent for this tag.",
      "Submitted via": "Submitted via ",
      "Date sent to company": "Date sent to company \n\ndelay of the complaints = 'Date sent to company'",
      "Company response to consumer": "Company response to consumer ",
      "Timely response?": "whether the response of the company is timely ",
      "Consumer disputed?": "whether the consumer dispute about the response from the company. ",
      "Complaint ID": "id number indicating which complaint ",
      "Client_ID": "id number indicating which client "
    },
    "reviews": {
      "Date": "date ",
      "Stars": "stars ",
      "Reviews": "reviews ",
      "Product": "product ",
      "district_id": "district_id "
    }
  },
  "trains": {
    "cars": {
      "id": "the unique id number representing the cars ",
      "train_id": "the counterpart id for trains that the cars belong to ",
      "position": "postion id of cars in the trains 1-4:\n\n\n1: head car\n4: tail car",
      "shape": "shape of the cars  rectangle\n bucket\n u_shaped\n hexagon\n elipse\n\n\nregular shape: \nrectangle, u_shaped, hexagon",
      "len": "length of the cars  short \n long",
      "sides": "sides of the cars  not_double\n double",
      "roof": "roof of the cars \n\n none: the roof is open\n peaked\n flat\n arc\n jagged",
      "wheels": "wheels of the cars  2:\n 3: ",
      "load_shape": "load shape  circle\n hexagon\n triangle\n rectangle \n diamond",
      "load_num": "load number 0-3:\n\n\n 0: empty load\n 3: full load"
    },
    "trains": {
      "id": "the unique id representing the trains ",
      "direction": "the direction of trains that are running   east;\n west;"
    }
  },
  "public_review_platform": {
    "Attributes": {
      "attribute_id": "unique number identifying the attribute ",
      "attribute_name": "the name of the attribute "
    },
    "Categories": {
      "category_id": "category_id ",
      "category_name": "category_name "
    },
    "Compliments": {
      "compliment_id": "compliment_id ",
      "compliment_type": "compliment_type "
    },
    "Days": {
      "day_id": "the unique id identifying the day of the week ",
      "day_of_week": "indicate the day of the week "
    },
    "Years": {
      "year_id": "the unique number identifying the year ",
      "actual_year": "actual year "
    },
    "Business_Attributes": {
      "attribute_id": "id number identifying the attribute ",
      "business_id": "id number identifying the business ",
      "attribute_value": "sort of the attributes for each business \n \nNone, No or FALSE means the business does not have the attribute."
    },
    "Business_Categories": {
      "business_id": "id number identifying the business ",
      "category_id": "id number identifying the categories "
    },
    "Business_Hours": {
      "business_id": "id number identifying the business ",
      "day_id": "id number identifying each day of the week ",
      "opening_time": "opening time of the business ",
      "closing_time": "closing time of the business \n \nhow much time does this business open: closing_time - opening_time"
    },
    "Checkins": {
      "business_id": "id number identifying the business ",
      "day_id": "id number identifying each day of the week ",
      "label_time_0": "indicates times of checkins on a business label_time_0: 12:00 a.m. \nlabel_time_23: 23:00 p.m. \n\n If the label_time recorded \"None\" for check-in on one day, then it means the business is closed on that day.",
      "label_time_1": "label_time_1 ",
      "label_time_2": "label_time_2 ",
      "label_time_3": "label_time_3 ",
      "label_time_4": "label_time_4 ",
      "label_time_5": "label_time_5 ",
      "label_time_6": "label_time_6 ",
      "label_time_7": "label_time_7 ",
      "label_time_8": "label_time_8 ",
      "label_time_9": "label_time_9 ",
      "label_time_10": "label_time_10 ",
      "label_time_11": "label_time_11 ",
      "label_time_12": "label_time_12 ",
      "label_time_13": "label_time_13 ",
      "label_time_14": "label_time_14 ",
      "label_time_15": "label_time_15 ",
      "label_time_16": "label_time_16 ",
      "label_time_17": "label_time_17 ",
      "label_time_18": "label_time_18 ",
      "label_time_19": "label_time_19 ",
      "label_time_20": "label_time_20 ",
      "label_time_21": "label_time_21 ",
      "label_time_22": "label_time_22 ",
      "label_time_23": "label_time_23 "
    },
    "Elite": {
      "user_id": "id number identifying the users ",
      "year_id": "id number identifying the year "
    },
    "Reviews": {
      "business_id": "the number identifying the business ",
      "user_id": "the number identifying the user who comments on this business ",
      "review_stars": "review on this business 5  Great experience \n4  Good experience \n3  Average experience \n2  Bad experience \n1 - Terrible experience",
      "review_votes_funny": "the amount of funny votes that the user received for the review \n If the reviews receive an Uber number of votes for funny, they will also receive an Uber, High or Medium number of votes for useful and cool.",
      "review_votes_useful": "how many useful votes that the user received for the review ",
      "review_votes_cool": "how many cool votes that the user received for the review ",
      "review_length": "The length of the review written by the user "
    },
    "Tips": {
      "business_id": "the number identifying the business ",
      "user_id": "the number identifying the user who comments on this business ",
      "likes": "how many likes of this tips \n more likes mean this tip is more valuable",
      "tip_length": "length of the tip "
    },
    "Users_Compliments": {
      "compliment_id": "the id number indicating the compliment ",
      "user_id": "the id number indicating the user ",
      "number_of_compliments": "how many compliments a user has received from other users \n more number_of_compliments indicates this user is more welcome or he / she is high-quality user"
    },
    "Business": {
      "business_id": " unique number identifying the business ",
      "active": "whether the business is still actively running until now \n\n \"True\": the business is still running \n \"False\": the business is closed or not running now",
      "city": "The city where the business is located ",
      "state": "The state where the business is located ",
      "stars": "ratings of the business 5  Great experience \n4  Good experience \n3  Average experience \n2  Bad experience \n1 - Terrible experience \n\n \n the rating of >3 stars referring to \"wonderful experience\" or positive comments and vice versa",
      "review_count": "the total number of reviews the users have written for a business \n \n If a business has a low total review count and a high star rating of >3, it means there is a low veracity of reviews. \n higher review count and with high star rating of > 3 means this business is more popular or more appealing to users."
    },
    "Users": {
      "user_id": "the unique id number identifying which user ",
      "user_yelping_since_year": "the time when the user join Yelp ",
      "user_average_stars": "the average ratings of all review ",
      "user_votes_funny": "total number of funny votes sent by the user ",
      "user_votes_useful": "how many useful votes created by the user ",
      "user_votes_cool": "how many cool votes created by the user ",
      "user_review_count": "total number of reviews the user has written ",
      "user_fans": "total number of fans / followers the user has \n Users with Uber number of fans indicate that they have sent an Uber number of cool, useful and funny votes."
    }
  },
  "donor": {
    "essays": {
      "projectid": "unique project identifier ",
      "teacher_acctid": "teacher id that created a project ",
      "title": "title of the project ",
      "short_description": "short description of a project ",
      "need_statement": "need statement of a project ",
      "essay": "complete project essay "
    },
    "projects": {
      "projectid": "project's unique identifier ",
      "teacher_acctid": "teacher's unique identifier (teacher that created a project) ",
      "schoolid": "school's identifier (school where teacher works) ",
      "school_ncesid": "Public National Center for Ed Statistics id ",
      "school_latitude": "latitude of school  ",
      "school_longitude": "longitude of school  ",
      "school_city": "city where the school is located ",
      "school_state": "state where the school is located ",
      "school_zip": "zipcode of school ",
      "school_metro": "metro where the school is located ",
      "school_district": "district where the school is located ",
      "school_county": "country where the school is located ",
      "school_charter": "whether it is a public charter school or not (no private schools in the dataset) ",
      "school_magnet": "whether a public magnet school or not ",
      "school_year_round": "whether it is a public year round school or not ",
      "school_nlns": "whether it is a public Nonleafy Normal Stature school or not ",
      "school_kipp": "whether it is a public Knowledge Power Program school or not ",
      "school_charter_ready_promise": "whether it is a public ready promise school or not ",
      "teacher_prefix": "teacher's gender \n\nif the value is equal to \"Dr. \", it means this teacher acquired P.h.D or doctor degree.",
      "teacher_teach_for_america": "Teach for America or not ",
      "teacher_ny_teaching_fellow": "New York teaching fellow or not  t: true\n f: false\n\n\nif true: it means that this teacher is a New York teacher",
      "primary_focus_subject": "main subject for which project materials are intended ",
      "primary_focus_area": "main subject area for which project materials are intended ",
      "secondary_focus_subject": "secondary subject ",
      "secondary_focus_area": "secondary subject area ",
      "resource_type": "main type of resources requested by a project ",
      "poverty_level": "school's poverty level \n\nhighest: 65%+ free of reduced lunch; high: 40-64%; moderate: 10-39%low: 0-9%",
      "grade_level": "grade level for which project materials are intended ",
      "fulfillment_labor_materials": " cost of fulfillment \n\nhigher means higher cost, or need more labors",
      "total_price_excluding_optional_support": "project cost excluding optional tip that donors give to DonorsChoose.org while funding a project ",
      "total_price_including_optional_support": "project cost including optional tip that donors give to DonorsChoose.org while funding a project \n\ncost of optional tip = total_price_including_optional_support -total_price_excluding_optional_support",
      "students_reached": "number of students impacted by a project (if funded) ",
      "eligible_double_your_impact_match": " project was eligible for a 50% off offer by a corporate partner (logo appears on a project, like Starbucks or Disney) ",
      "eligible_almost_home_match": "project was eligible for a $100 boost offer by a corporate partner ",
      "date_posted": "data a project went live on the site "
    },
    "donations": {
      "donationid": "unique donation identifier ",
      "projectid": "project identifier that received the donation ",
      "donor_acctid": "donor that made a donation ",
      "donor_city": "donation city ",
      "donor_state": "donation state ",
      "donor_zip": "donation zip code ",
      "is_teacher_acct": "whether donor is also a teacher \n\n f: false, it means this donor is not a teacher\n t: true, it means this donor is a teacher",
      "donation_timestamp": "the time of donation ",
      "donation_to_project": "amount to project, excluding optional support (tip) ",
      "donation_optional_support": "amount of optional support ",
      "donation_total": "donated amount \n\ndonated amount = donation_to_project + donation_optional_support",
      "dollar_amount": "donated amount in US dollars ",
      "donation_included_optional_support": "whether optional support (tip) was included for DonorsChoose.org \n\n f: false, optional support (tip) was not included for DonorsChoose.org\n t: true, optional support (tip) was included for DonorsChoose.org",
      "payment_method": "what card/payment option was used ",
      "payment_included_acct_credit": "whether a portion of a donation used account credits redemption \n\n f: false, a portion of a donation didn't use account credits redemption\n t: true, a portion of a donation used account credits redemption",
      "payment_included_campaign_gift_card": "whether a portion of a donation included corporate sponsored gift card \n\n f: false, a portion of a donation included corporate sponsored gift card\n t: true, a portion of a donation included corporate sponsored gift card",
      "payment_included_web_purchased_gift_card": "whether a portion of a donation included citizen purchased gift card (ex: friend buy a gift card for you)  f: false\n t: true",
      "payment_was_promo_matched": "whether a donation was matched 1-1 with corporate funds \n\n f: false, a donation was not matched 1-1 with corporate funds\n t: true, a donation was matched 1-1 with corporate funds",
      "via_giving_page": "donation given via a giving / campaign page (example: Mustaches for Kids) ",
      "for_honoree": "donation made for an honoree \n\n f: false, this donation is not made for an honoree\n t: true, this donation is made for an honoree",
      "donation_message": "donation comment/message.  "
    },
    "resources": {
      "resourceid": "unique resource id ",
      "projectid": "project id that requested resources for a classroom ",
      "vendorid": "vendor id that supplies resources to a project ",
      "vendor_name": "vendor name ",
      "project_resource_type": "type of resource ",
      "item_name": "resource name ",
      "item_number": "resource item identifier ",
      "item_unit_price": "unit price of the resource ",
      "item_quantity": "number of a specific item requested by a teacher "
    }
  },
  "coinmarketcap": {
    "coins": {
      "id": "unique id number identifying coins ",
      "name": "name of coins ",
      "slug": "slug names of coins ",
      "symbol": "symbol of names of coins ",
      "status": "status of coins \n\n\u2022 active: this coin is active and available for transactions\n\u2022 untracked: this coin cannot be tracked\n\u2022 inactive: this coin is not available for transactions\n\u2022 extinct: this coin has been disappeared ",
      "category": "category of coins \n\n\u2022 token: \n\u2022 coin: ",
      "description": "description of coins ",
      "subreddit": "name of coins on reddit  ",
      "notice": "notice if any  ",
      "tags": "tags of coins ",
      "tag_names": "tag names of coins ",
      "website": "website introduction of coins ",
      "platform_id": "id number of the platform ",
      "date_added": "the added date ",
      "date_launched": "lanched date "
    },
    "historical": {
      "date": "transaction date\n ",
      "coin_id": "id number referring to coins ",
      "cmc_rank": "CMC rank is a metric used by CoinMarketCap to rank the relative popularity of different cryptocurrencies. ",
      "market_cap": "Market capitalization refers to how much a coin is worth as determined by the coin market. dollars\nmarket cap (latest trade price x circulating supply).",
      "price": "how much is a coin dollars",
      "open": "the price at which a cryptocurrency (coin) opens at a time period dollars\n\n\nif null or empty, it means this coins has not opened yet today.",
      "high": "highest price dollars",
      "low": "lowest price \n\n1.\tIt's the best time to purchase this coin\n2.\tusers can make the max profit today by computation: high - low",
      "close": "the price at which a cryptocurrency (coin) closes at a time period, for example at the end of the day. ",
      "time_high": "the time to achieve highest price ",
      "time_low": "the time to achieve lowest price ",
      "volume_24h": "the total value of cryptocurrency coined traded in the past 24 hours. ",
      "percent_change_1h": "price percentage change in the first hour The change is the difference (in percent) between the price now compared to the price around this time 1 hours ago",
      "percent_change_24h": "price percentage change in the first 24 hours The change is the difference (in percent) between the price now compared to the price around this time 24 hours ago",
      "percent_change_7d": "price percentage change in the first 7 days The change is the difference (in percent) between the price now compared to the price around this time 7 days ago",
      "circulating_supply": "the best approximation of the number of coins that are circulating in the market and in the general public's hands. ",
      "total_supply": "the total amount of coins in existence right now ",
      "max_supply": "Max Supply is the best approximation of the maximum amount of coins that will ever exist in the lifetime of the cryptocurrency. \n\nthe number of coins verifiably burned so far = max_supply - total_supply",
      "num_market_pairs": "number of market pairs across all exchanges trading each currency. \n\nactive coins that have gone inactive can easily be identified as having a num_market_pairs of 0"
    }
  },
  "simpson_episodes": {
    "Episode": {
      "episode_id": "A unique identifier for episodes ",
      "season": "the season of the episode ",
      "episode": "the episode number of the episode ",
      "number_in_series": "the number in series ",
      "title": "the title of the episode ",
      "summary": "the summary of the episode ",
      "air_date": "the air date of the episode YYYY-MM-DD",
      "episode_image": "the image of episode ",
      "rating": "the rating of episode 0.0 - 10.0\n\n\nHigher ratings mean higher quality and better response.\n\u0095 excellent: 7.0 < rating <= 10.0\n\u0095 average: 5.0 < rating <= 7.0 \n\u0095 bad: 0.0 < rating <= 5.0\nnot bad: average, excellent",
      "votes": "the votes of episode \n\nHigher votes mean more audience supports (or popular)."
    },
    "Person": {
      "name": "the name of the crew ",
      "birthdate": "the birth date of the crew YYYY-MM-DD",
      "birth_name": "the birth name of the crew ",
      "birth_place": "the birth place of the crew ",
      "birth_region": "the birth region of the crew ",
      "birth_country": "the birth country of the crew ",
      "height_meters": "the height of the crew the unit is meter",
      "nickname": "the nickname of the crew "
    },
    "Award": {
      "award_id": "the unique id for the award ",
      "organization": "the organization that holds the award ",
      "year": "year of award ",
      "award_category": "the category of the award ",
      "award": "the name of the award ",
      "person": "the person who gets the award ",
      "role": "the role of the honoree ",
      "episode_id": "S stands for 'Season' and E stands for 'Episode' ",
      "season": "the season of the awarded work ",
      "song": "the theme song of the awarded work ",
      "result": "the final award result \n\n\u0095 Nominee: the prospective recipient of the award. The nominee are people who were nominated but didn't win the award. \n\u0095 Winner: the people who finally won the award"
    },
    "Character_Award": {
      "award_id": "A unique identifier for the award ",
      "character": "the name of the awarded character "
    },
    "Credit": {
      "episode_id": "A unique identifier for episodes ",
      "category": "the category of the credit ",
      "person": "the name of cast and crew members ",
      "role": "the role of the person ",
      "credited ": "whether the person is credited  true/ false\n\n\n\u0095 true: The person is included in the credit list\n\u0095 false: The person isn't included in the credit list"
    },
    "Keyword": {
      "episode_id": "A unique identifier for episodes ",
      "keyword": "the keywords of episode "
    },
    "Vote": {
      "episode_id": "A unique identifier for episodes ",
      "stars": "the star score of the episode 1-10\n\n\nStar classification is a type of rating scale. The lowest star is 1 which means the worst, and the highest star is 10 which means the best. ",
      "votes": "the number of votes of the star score ",
      "percent": "the percent of the vote number of the star score \n\npercent = the number of votes for the star / the total amount of votes for all stars "
    }
  },
  "movie_3": {
    "film_text": {
      "film_id": "unique id number identifying the film ",
      "title": "title of the film ",
      "description": "main content of the film "
    },
    "actor": {
      "actor_id": "unique id number identifying the actor ",
      "first_name": "First name of the actor ",
      "last_name": "Last name of the actor ",
      "last_update": "The time of the latest update "
    },
    "address": {
      "address_id": "unique id number identifying the address ",
      "address": "The first address line ",
      "address2": "the second address line \n\naddress2 is the additional address if any",
      "district": "district ",
      "city_id": "city_id ",
      "postal_code": "postal_code a postal code is a series of letters or digits or both, sometimes including spaces or punctuation, included in a postal address for the purpose of sorting mail.",
      "phone": "phone number ",
      "last_update": "The time of the latest update "
    },
    "category": {
      "category_id": "unique id number identifying the category ",
      "name": "name of the category ",
      "last_update": "The time of the latest update "
    },
    "city": {
      "city_id": "unique id number identifying the city ",
      "city": "name of the city ",
      "country_id": "number identifying the country which the city belongs to ",
      "last_update": "The time of the latest update "
    },
    "country": {
      "country_id": "unique id number identifying the country ",
      "country": "number identifying the country \n\n\u0095 Africa: (Algeria, Angola, Cameroon, Chad, Congo, The Democratic Republic of the, Egypt, Ethiopia, Gambia...)\n\u0095 Asia: (Afghanistan, Armenia, Azerbaijan, \nBahrain, Bangladesh, Brunei, Cambodia, China, Hong Kong, India, Indonesia, Iran, Iraq, Israel...)\n\u0095 Oceania (American Samoa, Australia, French Polynesia...)\n\u0095 North America (Anguilla, Canada, Dominican Republic, Ecuador, Greenland...)\n\u0095 South America (Argentina, Bolivia, Brazil, Chile, \nColombia, Ecuador, French Guiana....)\n\u0095 Europe (Austria, Belarus, Bulgaria, Czech Republic, Estonia, Faroe Islands, Finland, France, Germany, Greece, Holy See (Vatican City State), Hungary, Italy...)\ndetails: https://worldpopulationreview.com/country-rankings/list-of-countries-by-continent\nquestion can mention i.e., Europe instead of Austria, etc.",
      "last_update": "The time of the latest update "
    },
    "customer": {
      "customer_id": "unique id number identifying the country ",
      "store_id": "unique id number identifying the store ",
      "first_name": "First name of the customer ",
      "last_name": "Last name of the customer ",
      "email": "Email address of the customer ",
      "address_id": "Address id number of the customer. ",
      "active": "Wether the customer is active or not. 1: active\n0: not active",
      "create_date": "The date when the record is created. ",
      "last_update": "The time of the latest update "
    },
    "film": {
      "film_id": "unique id number identifying the film ",
      "title": "title of the film ",
      "description": "main content of the film ",
      "release_year": "the year when the film is released ",
      "language_id": "the language id of the film ",
      "original_language_id": "the original language id of the film ",
      "rental_duration": "how long this film can be rent at once \n\ndays\nprice / day = rental_rate / retal_duration",
      "rental_rate": "the rate of renting this film higher -> expensive",
      "length": "Duration time of the film screening minutes",
      "replacement_cost": "cost of replacing this film ",
      "rating": "The Motion Picture Association film rating \n\nG ?General Audiences\nPG ? Parental Guidance Suggested\nPG-13 ? Parents Strongly Cautioned\nR ? Restricted\nNC-17 ? Adults Only",
      "special_features": "features of this film ",
      "last_update": "The time of the latest update "
    },
    "film_actor": {
      "actor_id": "unique id number identifying the actor ",
      "film_id": "id number identifying the film ",
      "last_update": "The time of the latest update "
    },
    "film_category": {
      "film_id": "unique id number identifying the film ",
      "category_id": "id number identifying the category ",
      "last_update": "The time of the latest update "
    },
    "inventory": {
      "inventory_id": "unique id number identifying the inventory ",
      "film_id": "unique id number identifying the film ",
      "store_id": " id of the store ",
      "last_update": "the last update time of the film "
    },
    "language": {
      "language_id": "unique id number identifying the language ",
      "name": "name of the language ",
      "last_update": "The time of the latest update "
    },
    "payment": {
      "payment_id": "unique id number identifying the payment ",
      "customer_id": "unique id number identifying the customer ",
      "staff_id": "unique id number identifying the staff ",
      "rental_id": "unique id number identifying the rental ",
      "amount": "unique id number identifying the amount ",
      "payment_date": "the date when the payment ocurs ",
      "last_update": "The time of the latest update "
    },
    "rental": {
      "rental_id": "unique id number identifying the rental ",
      "rental_date": "date when the rental occurs ",
      "inventory_id": "id number identifying the inventory ",
      "customer_id": "id number identifying the customer ",
      "return_date": "date when the rental returns ",
      "staff_id": "id number identifying the staff ",
      "last_update": "The time of the latest update "
    },
    "staff": {
      "staff_id": "unique id number identifying the staff ",
      "first_name": "First name of the actor ",
      "last_name": "Last name of the actor full name = (first name, last name)",
      "address_id": "id number identifying the address ",
      "picture": "picture ",
      "email": "email ",
      "store_id": "id number identifying the store ",
      "active": "Whether the staff is active or not. 1: active\n0: not active",
      "username": "username to login the staff ",
      "password": "password to login the staff ",
      "last_update": "The time of the latest update "
    },
    "store": {
      "store_id": "unique id number identifying the store ",
      "manager_staff_id": "id number identifying the manager staff ",
      "address_id": "id number identifying the address ",
      "last_update": "The time of the latest update "
    }
  },
  "shooting": {
    "incidents": {
      "case_number": "case number ",
      "date": "date ",
      "location": "location ",
      "subject_statuses": "statuses of the victims  ",
      "subject_weapon": "subject weapon ",
      "subjects": "subjects ",
      "subject_count": "subject_count ",
      "officers": "officers "
    },
    "officers": {
      "case_number": "case number ",
      "race": "race ",
      "gender": "gender M: male;\n\nF: female",
      "last_name": "last name ",
      "first_name": "first name ",
      "full_name": "full name "
    },
    "subjects": {
      "case_number": "case number ",
      "race": "race ",
      "gender": "gender M: male;\n\nF: female",
      "last_name": "last name ",
      "first_name": "first name ",
      "full_name": "full name "
    }
  },
  "superstore": {
    "people": {
      "Customer ID": "the id of the customers ",
      "Customer Name": "the name of the customers ",
      "Segment": "the segment that the customers belong to \n \n\u0095 consumer \n\u0095 home office: synonym: headquarter. \n\u0095 corporate",
      "Country": "the country of people ",
      "City": "the city of people ",
      "State": "the state of people \n please mention its full name in the question, by referring to \nhttps://www23.statcan.gc.ca/imdb/p3VD.pl?Function=getVD&TVD=53971\ne.g., New York --> NY",
      "Postal Code": "the postal code ",
      "Region": "the region of people \u0095 Central: \n\u0095 East: \n\u0095 West: \n\u0095 South: "
    },
    "product": {
      "Product ID": "the id of products ",
      "Product Name": "the name of products ",
      "Category": "the categories of products \u0095 Furniture \n\u0095 Office Supplies \n\u0095 Technology",
      "Sub-Category": "the sub-categories of products \u0095 Bookcases \n\u0095 Chairs \n\u0095 Furnishings \n\u0095 Tables \n\u0095 Appliances \n\u0095 Art \n\u0095 Binders \n\u0095 Envelopes \n\u0095 Fasteners \n\u0095 Labels \n\u0095 Paper \n\u0095 Storage \n\u0095 Supplies \n\u0095 Accessories \n\u0095 Copiers \n\u0095 Machines \n\u0095 Phones ",
      "Region": "the region of products \u0095 Central: \n\u0095 East: \n\u0095 West: \n\u0095 South:"
    },
    "central_superstore": {
      "Row ID": "the unique id for rows ",
      "Order ID": "the unique identifier for the order ",
      "Order Date": "the date of the order yyyy-mm-dd",
      "Ship Date": "the date of the shipment yyyy-mm-dd\n\n \n'shipment time' refers to the time interval between order_date and ship_date.",
      "Ship Mode": "the ship mode of the order First Class / Second Class / Standard Class\n\n Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest.",
      "Customer ID": "the id of the customer ",
      "Region": "region of the customer's address ",
      "Product ID": "the id of the product ",
      "Sales": "the sales of the product ",
      "Quantity": "the quantity of the product ",
      "Discount": "the discount of the product \n original price = sales / (1- discount)",
      "Profit": "the profit that the company got by selling the product \n\ntotal cost of products =  sales / (1- discount) * quantity - profit\ndeficiency: if the value is negative"
    },
    "east_superstore": {
      "Row ID": "the unique id for rows ",
      "Order ID": "the unique identifier for the order ",
      "Order Date": "the date of the order yyyy-mm-dd",
      "Ship Date": "the date of the shipment yyyy-mm-dd\n\n 'shipment time' refers to the time interval between order_date and ship_date. ",
      "Ship Mode": "the ship mode of the order First Class / Second Class / Standard Class\n\n Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest.\n",
      "Customer ID": "the id of the customer ",
      "Region": "region of the customer's address ",
      "Product ID": "the id of the product ",
      "Sales": "the sales of the product ",
      "Quantity": "the quantity of the product ",
      "Discount": "the discount of the product \n original price = sales / (1- discount)",
      "Profit": "the profit that the company got by selling the product \n total cost of products =  sales / (1- discount) * quantity - profit\ndeficiency: if the value is negative\n"
    },
    "south_superstore": {
      "Row ID": "the unique id for rows ",
      "Order ID": "the unique identifier for the order ",
      "Order Date": "the date of the order yyyy-mm-dd",
      "Ship Date": "the date of the shipment yyyy-mm-dd \n\n 'shipment time' refers to the time interval between order_date and ship_date. ",
      "Ship Mode": "the ship mode of the order First Class / Second Class / Standard Class\n\n Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest. ",
      "Customer ID": "the id of the customer ",
      "Region": "region of the customer's address ",
      "Product ID": "the id of the product ",
      "Sales": "the sales of the product ",
      "Quantity": "the quantity of the product ",
      "Discount": "the discount of the product \n original price = sales / (1- discount)\n",
      "Profit": "the profit that the company got by selling the product \n total cost of products =  sales / (1- discount) * quantity - profit\ndeficiency: if the value is negative\n"
    },
    "west_superstore": {
      "Row ID": "the unique id for rows ",
      "Order ID": "the unique identifier for the order ",
      "Order Date": "the date of the order yyyy-mm-dd",
      "Ship Date": "the date of the shipment yyyy-mm-dd\n\n 'shipment time' refers to the time interval between order_date and ship_date. ",
      "Ship Mode": "the ship mode of the order First Class / Second Class / Standard Class\n\n Among three ship modes, First Class has the fastest delivery speed, followed by Second Class and the speed of the Standard Class is the slowest. ",
      "Customer ID": "the id of the customer ",
      "Region": "region of the customer's address ",
      "Product ID": "the id of the product ",
      "Sales": "the sales of the product ",
      "Quantity": "the quantity of the product ",
      "Discount": "the discount of the product \n original price = sales / (1- discount)",
      "Profit": "the profit that the company got by selling the product \n total cost of products =  sales / (1- discount) * quantity - profit\ndeficiency: if the value is negative"
    }
  },
  "movielens": {
    "users": {
      "userid": "unique identifier number of users ",
      "age": "age 1: 1-18 years old; \n18: 18-25 years old; \n25: 25-35 years old; \n35: 35-45 years old; \n45: 45-50 years old; \n50: 50-56 years old; \n56: over 56 years old",
      "u_gender": "user gender M / F: Male / Female",
      "occupation ": "occupation "
    },
    "directors": {
      "directorid": "unique identification number of actors directors ",
      "d_quality ": "director quality  higher value is better, lower is the worse",
      "avg_revenue": "average revenue higher value is the higher, lower is the lower"
    },
    "actors": {
      "actorid": "unique identificator number of actors ",
      "a_gender": "actor gender M: male;\nF: female",
      "a_quality": "actor quality higher is better, lower is the worse"
    },
    "movies": {
      "movieid": "unique identifier number of movies ",
      "year": "year 4: newest;\n\n1: oldest\n\nhigher value means newer published date",
      "isEnglish": "is English ",
      "country": "country ",
      "runningtime": "runningtime "
    },
    "movies2actors": {
      "movieid": "identifier number of movies ",
      "actorid": "identifier number of actors ",
      "cast_num": "cast number "
    },
    "movies2directors": {
      "movieid": "identifier number of movies ",
      "directorid": "identifier number of directors ",
      "genre": "genre of movies "
    },
    "u2base": {
      "userid": "identifier number of users ",
      "movieid": "identifier number of movie ",
      "rating": "ratings of movies higher value refers to higher satisfactory, each value is the rating of movies left by users."
    }
  },
  "debit_card_specializing": {
    "customers": {
      "CustomerID": "identification of the customer ",
      "Segment": "client segment ",
      "Currency": "Currency "
    },
    "gasstations": {
      "GasStationID": "Gas Station ID ",
      "ChainID": "Chain ID ",
      "Country": "country ",
      "Segment": "chain segment "
    },
    "products": {
      "ProductID": "Product ID ",
      "Description": "Description "
    },
    "transactions_1k": {
      "TransactionID": "Transaction ID ",
      "Date": "Date ",
      "Time": "Time ",
      "CustomerID": "Customer ID ",
      "CardID": "Card ID ",
      "GasStationID": "Gas Station ID ",
      "ProductID": "Product ID ",
      "Amount": "Amount ",
      "Price": "Price \n\n\ntotal price = Amount x Price"
    },
    "yearmonth": {
      "CustomerID": "Customer ID ",
      "Date": "Date ",
      "Consumption": "consumption "
    }
  },
  "financial": {
    "account": {
      "account_id": "the id of the account ",
      "district_id": "location of branch ",
      "frequency": "frequency of the acount ",
      "date": "the creation date of the account in the form YYMMDD"
    },
    "card": {
      "card_id": "id number of credit card ",
      "disp_id": "disposition id ",
      "type": "type of credit card \"junior\": junior class of credit card; \n\"classic\": standard class of credit card; \n\"gold\": high-level credit card",
      "issued": "the date when the credit card issued  in the form YYMMDD"
    },
    "client": {
      "client_id": "the unique number ",
      "gender": "gender F\uff1afemale \nM\uff1amale ",
      "birth_date": "birth date ",
      "district_id": "location of branch "
    },
    "disp": {
      "disp_id": "unique number of identifying this row of record ",
      "client_id": "id number of client ",
      "account_id": "id number of account ",
      "type": "type of disposition \"OWNER\" : \"USER\" : \"DISPONENT\"\n\n\nthe account can only have the right to issue permanent orders or apply for loans"
    },
    "district": {
      "district_id": "location of branch ",
      "A2": "district_name ",
      "A3": "region ",
      "A4": "a4 ",
      "A5": "municipality < district < region ",
      "A6": "municipality < district < region ",
      "A7": "municipality < district < region ",
      "A8": "municipality < district < region ",
      "A9": "a9 not useful",
      "A10": "ratio of urban inhabitants ",
      "A11": "average salary ",
      "A12": "unemployment rate 1995 ",
      "A13": "unemployment rate 1996 ",
      "A14": "no. of entrepreneurs per 1000 inhabitants ",
      "A15": "no. of committed crimes 1995 ",
      "A16": "no. of committed crimes 1996 "
    },
    "loan": {
      "loan_id": "the id number identifying the loan data ",
      "account_id": "the id number identifying the account ",
      "date": "the date when the loan is approved ",
      "amount": "approved amount unit\uff1aUS dollar",
      "duration": "loan duration unit\uff1amonth",
      "payments": "monthly payments unit\uff1amonth",
      "status": "repayment status 'A' stands for contract finished, no problems;\n'B' stands for contract finished, loan not paid;\n'C' stands for running contract, OK so far;\n'D' stands for running contract, client in debt"
    },
    "order": {
      "order_id": "identifying the unique order ",
      "account_id": "id number of account ",
      "bank_to": "bank of the recipient ",
      "account_to": "account of the recipient each bank has unique two-letter code",
      "amount": "debited amount ",
      "k_symbol": "purpose of the payment \"POJISTNE\" stands for insurance payment\n\"SIPO\" stands for household payment\n\"LEASING\" stands for leasing\n\"UVER\" stands for loan payment"
    },
    "trans": {
      "trans_id": "transaction id ",
      "account_id": "account_id ",
      "date": "date of transaction ",
      "type": "+/- transaction \"PRIJEM\" stands for credit\n\"VYDAJ\" stands for withdrawal",
      "operation": "mode of transaction \"VYBER KARTOU\": credit card withdrawal\n\"VKLAD\": credit in cash\n\"PREVOD Z UCTU\" :collection from another bank\n\"VYBER\": withdrawal in cash\n\"PREVOD NA UCET\": remittance to another bank",
      "amount": "amount of money Unit\uff1aUSD",
      "balance": "balance after transaction Unit\uff1aUSD",
      "k_symbol": "k_symbol \"POJISTNE\": stands for insurrance payment\n\"SLUZBY\": stands for payment for statement\n\"UROK\": stands for interest credited\n\"SANKC. UROK\": sanction interest if negative balance\n\"SIPO\": stands for household\n\"DUCHOD\": stands for old-age pension\n\"UVER\": stands for loan payment",
      "bank": "bank each bank has unique two-letter code",
      "account": "account "
    }
  },
  "formula_1": {
    "circuits": {
      "circuitId": "unique identification number of the circuit  ",
      "circuitRef": "circuit reference name  ",
      "name ": "full name of circuit  ",
      "location  ": "location of circuit  ",
      "country ": "country of circuit  ",
      "lat ": "latitude of location of circuit  ",
      "lng ": "longitude of location of circuit  \n \nLocation coordinates: (lat, lng)",
      "alt ": "alt  not useful ",
      "url ": "url  "
    },
    "constructors": {
      "constructorId ": "the unique identification number identifying constructors  ",
      "constructorRef ": "Constructor Reference name  ",
      "name ": "full name of the constructor  ",
      "nationality ": "nationality of the constructor  ",
      "url ": "the introduction website of the constructor  \n How to find out the detailed introduction of the constructor: through its url"
    },
    "drivers": {
      "driverId ": "the unique identification number identifying each driver ",
      "driverRef ": "driver reference name  ",
      "number ": "number  ",
      "code ": "abbreviated code for drivers  if \"null\" or empty, it means it doesn't have code ",
      "forename ": "forename  ",
      "surname ": "surname  ",
      "dob ": "date of birth  ",
      "nationality ": "nationality of drivers  ",
      "url ": "the introduction website of the drivers  "
    },
    "seasons": {
      "year ": "the unique identification number identifying the race ",
      "url ": "website link of season race introduction  "
    },
    "races": {
      "raceId ": "the unique identification number identifying the race  ",
      "year ": "year  ",
      "round ": "round  ",
      "circuitId ": "circuit Id  ",
      "name ": "name of the race  ",
      "date ": "duration time  ",
      "time ": "time of the location  ",
      "url ": "introduction of races  "
    },
    "constructorResults": {
      "constructorResultsId": "constructor Results Id ",
      "raceId": "race id ",
      "constructorId": "constructor id ",
      "points": "points ",
      "status": "status "
    },
    "constructorStandings": {
      "constructorStandingsId ": "unique identification of the constructor standing records  ",
      "raceId ": "id number identifying which races  ",
      "constructorId ": "id number identifying which id  ",
      "points": "how many points acquired in each race  ",
      "position ": "position or track of circuits  ",
      "positionText ": "positiontext  same with position, not quite useful ",
      "wins ": "wins  "
    },
    "driverStandings": {
      "driverStandingsId ": "the unique identification number identifying driver standing records  ",
      "raceId ": "id number identifying which races  ",
      "driverId ": "id number identifying which drivers  ",
      "points ": "how many points acquired in each race  ",
      "position ": "position or track of circuits  ",
      "wins": "wins  ",
      "positionText ": "positiontext  same with position, not quite useful "
    },
    "lapTimes": {
      "raceId ": "the identification number identifying race ",
      "driverId ": "the identification number identifying each driver  ",
      "lap ": "lap number  ",
      "position ": "position or track of circuits   ",
      "time ": "lap time   in minutes / seconds / ... ",
      "milliseconds ": "milliseconds  "
    },
    "pitStops": {
      "raceId ": "the identification number identifying race  ",
      "driverId ": "the identification number identifying each driver  ",
      "stop ": "stop number  ",
      "lap ": "lap number  ",
      "time ": "time  exact time  ",
      "duration ": "duration time  seconds/ ",
      "milliseconds ": "milliseconds  "
    },
    "qualifying": {
      "qualifyId ": "the unique identification number identifying qualifying  How does F1 Sprint qualifying work? Sprint qualifying is essentially a short-form Grand Prix  a race that is one-third the number of laps of the main event on Sunday. However, the drivers are battling for positions on the grid for the start of Sunday's race. ",
      "raceId ": "the identification number identifying each race  ",
      "driverId ": "the identification number identifying each driver  ",
      "constructorId ": "constructor Id  ",
      "number ": "number  ",
      "position ": "position or track of circuit  ",
      "q1 ": "time in qualifying 1  in minutes / seconds / ... \n\n \nQ1 lap times determine pole position and the order of the front 10 positions on the grid. The slowest driver in Q1 starts 10th, the next starts ninth and so on. \nAll 20 F1 drivers participate in the first period, called Q1, with each trying to set the fastest time possible. Those in the top 15 move on to the next period of qualifying, called Q2. The five slowest drivers are eliminated and will start the race in the last five positions on the grid. ",
      "q2 ": "time in qualifying 2  in minutes / seconds / ... \n\n \nonly top 15 in the q1 has the record of q2 \nQ2 is slightly shorter but follows the same format. Drivers try to put down their best times to move on to Q1 as one of the 10 fastest cars. The five outside of the top 10 are eliminated and start the race from 11th to 15th based on their best lap time. ",
      "q3 ": "time in qualifying 3  in minutes / seconds / ... \n\n \nonly top 10 in the q2 has the record of q3 "
    },
    "status": {
      "statusId ": "the unique identification number identifying status ",
      "status ": "full name of status  "
    },
    "results": {
      "resultId": "the unique identification number identifying race result  ",
      "raceId": "the identification number identifying the race  ",
      "driverId ": "the identification number identifying the driver  ",
      "constructorId ": "the identification number identifying which constructors  ",
      "number ": "number   ",
      "grid ": "the number identifying the area where cars are set into a grid formation in order to start the race.  ",
      "position ": "The finishing position or track of circuits  ",
      "positionText ": "positiontext  not quite useful ",
      "positionOrder ": "the finishing order of positions  ",
      "points ": "points  ",
      "laps ": "lap number  ",
      "time  ": "finish time  \n \n1. if the value exists, it means the driver finished the race. \n2. Only the time of the champion shows in the format of \"minutes: seconds.millionsecond\", the time of the other drivers shows as \"seconds.millionsecond\" , which means their actual time is the time of the champion adding the value in this cell.",
      "milliseconds ": "the actual finishing time of drivers in milliseconds   the actual finishing time of drivers  ",
      "fastestLap ": "fastest lap number  ",
      "rank ": "starting rank positioned by fastest lap speed ",
      "fastestLapTime ": "fastest Lap Time faster (smaller in the value) \"fastestLapTime\" leads to higher rank (smaller is higher rank) ",
      "fastestLapSpeed ": "fastest Lap Speed   (km / h) ",
      "statusId ": "status ID  its category description appear in the table status "
    }
  },
  "california_schools": {
    "frpm": {
      "CDSCode": "CDSCode ",
      "Academic Year": "Academic Year ",
      "County Code": "County Code ",
      "District Code": "District Code ",
      "School Code ": "School Code ",
      "County Name": "County Code  ",
      "District Name ": "District Name  ",
      "School Name": "School Name  ",
      "District Type": "District Type ",
      "School Type ": "School Type  ",
      "Educational Option Type": "Educational Option Type ",
      "NSLP Provision Status": "NSLP Provision Status ",
      "Charter School (Y/N)": "Charter School (Y/N) 0: N;\n1: Y",
      "Charter School Number": "Charter School Number ",
      "Charter Funding Type": "Charter Funding Type ",
      "IRC": "irc Not useful",
      "Low Grade": "Low Grade ",
      "High Grade": "High Grade ",
      "Enrollment (K-12)": "Enrollment (K-12) \n\n\nK-12: 1st grade - 12nd grade ",
      "Free Meal Count (K-12)": "Free Meal Count (K-12) \n\n\neligible free rate = Free Meal Count / Enrollment",
      "Percent (%) Eligible Free (K-12)": "percent (%) eligible free (k-12) ",
      "FRPM Count (K-12)": "Free or Reduced Price Meal Count (K-12) \n\n\neligible FRPM rate = FRPM / Enrollment",
      "Percent (%) Eligible FRPM (K-12)": "percent (%) eligible frpm (k-12) ",
      "Enrollment (Ages 5-17)": "Enrollment (Ages 5-17) ",
      "Free Meal Count (Ages 5-17)": "Free Meal Count (Ages 5-17) \n\n\neligible free rate = Free Meal Count / Enrollment",
      " Percent (%) Eligible Free (Ages 5-17)": " percent (%) eligible free (ages 5-17) ",
      "FRPM Count (Ages 5-17)": "frpm count (ages 5-17) ",
      "Percent (%) Eligible FRPM (Ages 5-17)": "percent (%) eligible frpm (ages 5-17) ",
      "2013-14 CALPADS Fall 1 Certification Status": "2013-14 CALPADS Fall 1 Certification Status "
    },
    "satscores": {
      "cds": "California Department Schools ",
      "rtype": "rtype unuseful",
      "sname": "school name ",
      "dname": "district segment ",
      "cname": "county name ",
      "enroll12": "enrollment (1st-12nd grade) ",
      "NumTstTakr": "Number of Test Takers in this school number of test takers in each school",
      "AvgScrRead": "average scores in Reading average scores in Reading",
      "AvgScrMath": "average scores in Math average scores in Math",
      "AvgScrWrite": "average scores in writing average scores in writing",
      "NumGE1500": "Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500\n\n\n\n\nExcellence Rate = NumGE1500 / NumTstTakr"
    },
    "schools": {
      "CDSCode": "CDSCode ",
      "NCESDist": "This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district. ",
      "NCESSchool": "This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school. ",
      "StatusType": "This field identifies the status of the district.  Definitions of the valid status types are listed below:\n\u00b7       Active: The district is in operation and providing instructional services.\n\u00b7       Closed: The district is not in operation and no longer providing instructional services.\n\u00b7       Merged: The district has combined with another district or districts.\n\u00b7       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9\u201312 months.",
      "County": "County name ",
      "District": "District ",
      "School": "School ",
      "Street": "Street ",
      "StreetAbr": "The abbreviated street address of the school, district, or administrative authority\u2019s physical location. The abbreviated street address of the school, district, or administrative authority\u2019s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.",
      "City": "City ",
      "Zip": "Zip ",
      "State": "State ",
      "MailStreet": "MailStreet The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.",
      "MailStrAbr": "mailstrabr the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.",
      "MailCity": "mailcity The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.",
      "MailZip": "mailzip The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.",
      "MailState": "mailstate The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.",
      "Phone": "Phone ",
      "Ext": "The phone number extension of the school, district, or administrative authority. The phone number extension of the school, district, or administrative authority.",
      "Website": "The website address of the school, district, or administrative authority. The website address of the school, district, or administrative authority.",
      "OpenDate": "The date the school opened. ",
      "ClosedDate": "The date the school closed. ",
      "Charter": "This field identifies a charter school.  The field is coded as follows:\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1 = The school is a charter\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0 = The school is not a charter",
      "CharterNum": "The charter school number, 4-digit number assigned to a charter school.",
      "FundingType": "Indicates the charter school funding type Values are as follows:\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Not in CS (California School) funding model\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Locally funded\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Directly funded",
      "DOC": "District Ownership Code The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority.\n\u2022       00 - County Office of Education\n\u2022       02 \u2013 State Board of Education\n\u2022       03 \u2013 Statewide Benefit Charter\n\u2022       31 \u2013 State Special Schools\n\u2022       34 \u2013 Non-school Location*\n\u2022       52 \u2013 Elementary School District\n\u2022       54 \u2013 Unified School District\n\u2022       56 \u2013 High School District\n\u2022       98 \u2013 Regional Occupational Center/Program (ROC/P)\n\n\n*Only the California Education Authority has been included in the non-school location category.",
      "DOCType": "The District Ownership Code Type is the text description of the DOC category. (See text values in DOC field description above)",
      "SOC": "The School Ownership Code is a numeric code used to identify the type of school. \u2022      08 - Preschool      \n\u2022       09 \u2013 Special Education Schools (Public)\n\u2022      11 \u2013 Youth Authority Facilities (CEA)\n\u2022       13 \u2013 Opportunity Schools\n\u2022       14 \u2013 Juvenile Court Schools\n\u2022       15 \u2013 Other County or District Programs\n\u2022       31 \u2013 State Special Schools\n\u2022       60 \u2013 Elementary School (Public)\n\u2022       61 \u2013 Elementary School in 1 School District (Public)\n\u2022       62 \u2013 Intermediate/Middle Schools (Public)\n\u2022       63 \u2013 Alternative Schools of Choice\n\u2022       64 \u2013 Junior High Schools (Public)\n\u2022       65 \u2013 K-12 Schools (Public)\n\u2022       66 \u2013 High Schools (Public)\n\u2022       67 \u2013 High Schools in 1 School District (Public)\n\u2022       68 \u2013 Continuation High Schools\n\u2022       69 \u2013 District Community Day Schools\n\u2022       70 \u2013 Adult Education Centers\n\u2022       98 \u2013 Regional Occupational Center/Program (ROC/P)",
      "SOCType": "The School Ownership Code Type is the text description of the type of school. The School Ownership Code Type is the text description of the type of school.",
      "EdOpsCode": "The Education Option Code is a short text description of the type of education offered. \n\u2022      ALTSOC \u2013 Alternative School of Choice\n\u2022      COMM \u2013 County Community School\n\u2022       COMMDAY \u2013 Community Day School\n\u2022       CON \u2013 Continuation School\n\u2022       JUV \u2013 Juvenile Court School\n\u2022       OPP \u2013 Opportunity School\n\u2022       YTH \u2013 Youth Authority School\n\u2022       SSS \u2013 State Special School\n\u2022       SPEC \u2013 Special Education School\n\u2022       TRAD \u2013 Traditional\n\u2022       ROP \u2013 Regional Occupational Program\n\u2022       HOMHOS \u2013 Home and Hospital\n\u2022       SPECON \u2013 District Consortia Special Education School",
      "EdOpsName": "Educational Option Name The Educational Option Name is the long text description of the type of education being offered.",
      "EILCode": "The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. \u2022       A \u2013 Adult\n\u2022       ELEM \u2013 Elementary\n\u2022       ELEMHIGH \u2013 Elementary-High Combination\n\u2022       HS \u2013 High School\n\u2022       INTMIDJR \u2013 Intermediate/Middle/Junior High\n\u2022       PS \u2013 Preschool\n\u2022       UG \u2013 Ungraded",
      "EILName": "The Educational Instruction Level Name is the long text description of the institution\u2019s type relative to the grade range served. The Educational Instruction Level Name is the long text description of the institution\u2019s type relative to the grade range served.",
      "GSoffered": "The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. For example XYZ School might display the following data:\n\nGSoffered = P\u2013Adult\n\nGSserved = K\u201312",
      "GSserved": "It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K\u201312 enrollment is reported through CALPADS. This field may differ from the grade span offered. \n\n\n1.\u00a0\u00a0\u00a0\u00a0 Only K\u201312 enrollment is reported through CALPADS\n\n2.\u00a0\u00a0\u00a0\u00a0 Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type",
      "Virtual": "This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies.  The field is coded as follows:\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 F = Exclusively Virtual \u2013 The school has no physical building where students meet with each other or with teachers, all instruction is virtual.\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 V = Primarily Virtual \u2013 The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 C = Primarily Classroom \u2013 The school offers virtual courses but virtual instruction is not the primary means of instruction.\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 N = Not Virtual \u2013 The school does not offer any virtual instruction.\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 P = Partial Virtual \u2013 The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016\u201317 school year.",
      "Magnet": "This field identifies whether a school is a magnet school and/or provides a magnet program.  The field is coded as follows:\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1 = Magnet - The school is a magnet school and/or offers a magnet program.\n\n\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0 = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.\n\n\n\n\nNote: Preschools and adult education centers do not contain a magnet school indicator.",
      "Latitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.",
      "Longitude": "The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.",
      "AdmFName1": "administrator's first name The superintendent\u2019s or principal\u2019s first name.\n\n\n\n\nOnly active and pending districts and schools will display administrator information, if applicable.",
      "AdmLName1": "administrator's last name The superintendent\u2019s or principal\u2019s last name.\n\n\n\nOnly active and pending districts and schools will display administrator information, if applicable.",
      "AdmEmail1": "administrator's email address The superintendent\u2019s or principal\u2019s email address.\n\n\n\n\nOnly active and pending districts and schools will display administrator information, if applicable.",
      "AdmFName2": "admfname2 SAME as 1",
      "AdmLName2": "admlname2 ",
      "AdmEmail2": "admemail2 ",
      "AdmFName3": "admfname3 not useful",
      "AdmLName3": "admlname3 not useful",
      "AdmEmail3": "admemail3 not useful",
      "LastUpdate": "lastupdate when is this record updated last time"
    }
  },
  "card_games": {
    "cards": {
      "id": "id ",
      "artist": "The name of the artist that illustrated the card art. ",
      "asciiName": "The ASCII(opens new window) (Basic/128) code formatted card name with no special unicode characters. ",
      "availability": "A list of the card's available printing types. \"arena\", \"dreamcast\", \"mtgo\", \"paper\", \"shandalar\"",
      "borderColor": "The color of the card border. \"black\", \"borderless\", \"gold\", \"silver\", \"white\"",
      "cardKingdomFoilId": "card Kingdom Foil Id \n\ncardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful. ",
      "cardKingdomId": "card Kingdom Id A list of all the colors in the color indicator",
      "colorIdentity": "A list of all the colors found in manaCost, colorIndicator, and text ",
      "colorIndicator": "A list of all the colors in the color indicator (The symbol prefixed to a card's types). ",
      "colors": "A list of all the colors in manaCost and colorIndicator.  Some cards may not have values, such as cards with \"Devoid\" in its text.",
      "convertedManaCost": "The converted mana cost of the card. Use the manaValue property. if value is higher, it means that this card cost more converted mana ",
      "duelDeck": "The indicator for which duel deck the card is in. ",
      "edhrecRank": "The card rank on EDHRec ",
      "faceConvertedManaCost": "The converted mana cost or mana value for the face for either half or part of the card.  if value is higher, it means that this card cost more converted mana for the face",
      "faceName": "The name on the face of the card. ",
      "flavorName": "The promotional card name printed above the true card name on special cards that has no game function. The promotional card name printed above the true card name on special cards that has no game function.",
      "flavorText": "The italicized text found below the rules text that has no game function. The italicized text found below the rules text that has no game function.",
      "frameEffects": "The visual frame effects. \"colorshifted\", \"companion\", \"compasslanddfc\", \"devoid\", \"draft\", \"etched\", \"extendedart\", \"fullart\", \"inverted\", \"legendary\", \"lesson\", \"miracle\", \"mooneldrazidfc\", \"nyxtouched\", \"originpwdfc\", \"showcase\", \"snow\", \"sunmoondfc\", \"textless\", \"tombstone\", \"waxingandwaningmoondfc\"",
      "frameVersion": "The version of the card frame style. \"1993\", \"1997\", \"2003\", \"2015\", \"future\"",
      "hand": "The starting maximum hand size total modifier.  A + or - character precedes an integer. \n\n\npositive maximum hand size: +1, +2, ....\nnegative maximum hand size: -1, ....\nneural maximum hand size: 0....",
      "hasAlternativeDeckLimit": "If the card allows a value other than 4 copies in a deck. 0: disallow 1: allow",
      "hasContentWarning": "If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. 0: doesn't have 1: has sensitve content or Wizards of the Coast\n\n\nCards with this property may have missing or degraded properties and values. ",
      "hasFoil": "If the card can be found in foil 0: cannot be found 1: can be found",
      "hasNonFoil": "If the card can be found in non-foil 0: cannot be found 1: can be found",
      "isAlternative": "If the card is an alternate variation to an original printing 0: is not 1: is",
      "isFullArt": "If the card has full artwork. 0: doesn't have, 1: has full artwork",
      "isOnlineOnly": "If the card is only available in online game variations. 0: is not 1: is",
      "isOversized": "If the card is oversized. 0: is not 1: is",
      "isPromo": "If the card is a promotional printing. 0: is not 1: is",
      "isReprint": "If the card has been reprinted. 0: has not 1: has not been",
      "isReserved": "If the card is on the Magic: The Gathering Reserved List (opens new window) If the card is on the Magic, it will appear in The Gathering Reserved List",
      "isStarter": "If the card is found in a starter deck such as Planeswalker/Brawl decks. 0: is not 1: is",
      "isStorySpotlight": "If the card is a Story Spotlight card. 0: is not 1: is",
      "isTextless": "If the card does not have a text box. \n\n0: has a text box;\n1: doesn't have a text box;",
      "isTimeshifted": "If the card is time shifted \n\nIf the card is \"timeshifted\", a feature of certain sets where a card will have a different frameVersion.",
      "keywords": "A list of keywords found on the card. ",
      "layout": "The type of card layout. For a token card, this will be \"token\" ",
      "leadershipSkills": "A list of formats the card is legal to be a commander in ",
      "life": "The starting life total modifier. A plus or minus character precedes an integer. ",
      "loyalty": "The starting loyalty value of the card. Used only on cards with \"Planeswalker\" in its types. empty means unkown",
      "manaCost": "The mana cost of the card wrapped in brackets for each value. \n\nmanaCost is unconverted mana cost",
      "mcmId": "mcmid NOT USEFUL",
      "mcmMetaId": "mcmmetaid NOT USEFUL",
      "mtgArenaId": "mtgarenaid NOT USEFUL",
      "mtgjsonV4Id": "mtgjsonv4id NOT USEFUL",
      "mtgoFoilId": "mtgofoilid NOT USEFUL",
      "mtgoId": "mtgoid NOT USEFUL",
      "multiverseId": "multiverseid NOT USEFUL",
      "name": "The name of the card. Cards with multiple faces, like \"Split\" and \"Meld\" cards are given a delimiter.",
      "number": "The number of the card ",
      "originalReleaseDate": "original Release Date The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.",
      "originalText": "original Text The text on the card as originally printed.",
      "originalType": "original Type The type of the card as originally printed. Includes any supertypes and subtypes.",
      "otherFaceIds": "other Face Ids A list of card UUID's to this card's counterparts, such as transformed or melded faces.",
      "power": "The power of the card. \n\n\u221e means infinite power\nnull or * refers to unknown power",
      "printings": "A list of set printing codes the card was printed in, formatted in uppercase. ",
      "promoTypes": "A list of promotional types for a card. \"arenaleague\", \"boosterfun\", \"boxtopper\", \"brawldeck\", \"bundle\", \"buyabox\", \"convention\", \"datestamped\", \"draculaseries\", \"draftweekend\", \"duels\", \"event\", \"fnm\", \"gameday\", \"gateway\", \"giftbox\", \"gilded\", \"godzillaseries\", \"instore\", \"intropack\", \"jpwalker\", \"judgegift\", \"league\", \"mediainsert\", \"neonink\", \"openhouse\", \"planeswalkerstamped\", \"playerrewards\", \"playpromo\", \"premiereshop\", \"prerelease\", \"promopack\", \"release\", \"setpromo\", \"stamped\", \"textured\", \"themepack\", \"thick\", \"tourney\", \"wizardsplaynetwork\"",
      "purchaseUrls": "Links that navigate to websites where the card can be purchased. ",
      "rarity": "The card printing rarity. ",
      "scryfallId": "scryfallid NOT USEFUL",
      "scryfallIllustrationId": "scryfallillustrationid NOT USEFUL",
      "scryfallOracleId": "scryfalloracleid NOT USEFUL",
      "setCode": "The set printing code that the card is from. ",
      "side": "The identifier of the card side.  Used on cards with multiple faces on the same card.\n\n\nif this value is empty, then it means this card doesn't have multiple faces on the same card.",
      "subtypes": "A list of card subtypes found after em-dash. ",
      "supertypes": "A list of card supertypes found before em-dash. \n\nlist of all types should be the union of subtypes and supertypes",
      "tcgplayerProductId": "tcgplayerproductid ",
      "text": "The rules text of the card. ",
      "toughness": "The toughness of the card. ",
      "type": "The type of the card as visible, including any supertypes and subtypes. \"Artifact\", \"Card\", \"Conspiracy\", \"Creature\", \"Dragon\", \"Dungeon\", \"Eaturecray\", \"Elemental\", \"Elite\", \"Emblem\", \"Enchantment\", \"Ever\", \"Goblin\", \"Hero\", \"Instant\", \"Jaguar\", \"Knights\", \"Land\", \"Phenomenon\", \"Plane\", \"Planeswalker\", \"Scariest\", \"Scheme\", \"See\", \"Sorcery\", \"Sticker\", \"Summon\", \"Token\", \"Tribal\", \"Vanguard\", \"Wolf\", \"You\u2019ll\", \"instant\"",
      "types": "A list of all card types of the card, including Un\u2011sets and gameplay variants. ",
      "uuid": "The universal unique identifier (v5) generated by MTGJSON. Each entry is unique. NOT USEFUL",
      "variations": "variations ",
      "watermark": "The name of the watermark on the card. "
    },
    "foreign_data": {
      "id": "unique id number identifying this row of data ",
      "flavorText": "The foreign flavor text of the card. ",
      "language": "The foreign language of card. ",
      "multiverseid": "The foreign multiverse identifier of the card. ",
      "name": "The foreign name of the card. ",
      "text": "The foreign text ruling of the card. ",
      "type": "The foreign type of the card. Includes any supertypes and subtypes. ",
      "uuid": "uuid "
    },
    "legalities": {
      "id": "unique id identifying this legality ",
      "format": "format of play each value refers to different rules to play",
      "status": "status \u2022 legal\n\u2022 banned\n\u2022 restricted",
      "uuid": "uuid "
    },
    "sets": {
      "id": "unique id identifying this set ",
      "baseSetSize": "The number of cards in the set. ",
      "block": "The block name the set was in. ",
      "booster": "A breakdown of possibilities and weights of cards in a booster pack. ",
      "code": "The set code for the set. ",
      "isFoilOnly": "If the set is only available in foil. ",
      "isForeignOnly": "If the set is available only outside the United States of America. ",
      "isNonFoilOnly": "If the set is only available in non-foil. ",
      "isOnlineOnly": "If the set is only available in online game variations. ",
      "isPartialPreview": "If the set is still in preview (spoiled). Preview sets do not have complete data. ",
      "keyruneCode": "The matching Keyrune code for set image icons. ",
      "mcmId": "The Magic Card Marketset identifier. ",
      "mcmIdExtras": "The split Magic Card Market set identifier if a set is printed in two sets. This identifier represents the second set's identifier. ",
      "mcmName": "mcmname ",
      "mtgoCode": "The set code for the set as it appears on Magic: The Gathering Online \n\nif the value is null or empty, then it doesn't appear on Magic: The Gathering Online",
      "name": "The name of the set. ",
      "parentCode": "The parent set code for set variations like promotions, guild kits, etc. ",
      "releaseDate": "The release date in ISO 8601 format for the set. ",
      "tcgplayerGroupId": "The group identifier of the set on TCGplayer ",
      "totalSetSize": "The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself. ",
      "type": "The expansion type of the set. \"alchemy\", \"archenemy\", \"arsenal\", \"box\", \"commander\", \"core\", \"draft_innovation\", \"duel_deck\", \"expansion\", \"from_the_vault\", \"funny\", \"masterpiece\", \"masters\", \"memorabilia\", \"planechase\", \"premium_deck\", \"promo\", \"spellbook\", \"starter\", \"token\", \"treasure_chest\", \"vanguard\""
    },
    "set_translations": {
      "id": "unique id identifying this set ",
      "language": "language of this card set ",
      "setCode": "the set code for this set ",
      "translation": "translation of this card set "
    },
    "rulings": {
      "id": "unique id identifying this ruling ",
      "date": "date  ",
      "text": "description about this ruling ",
      "uuid": "uuid "
    }
  },
  "european_football_2": {
    "Player_Attributes": {
      "id": "the unique id for players ",
      "player_fifa_api_id": "the id of the player fifa api ",
      "player_api_id": "the id of the player api ",
      "date": "date e.g. 2016-02-18 00:00:00",
      "overall_rating": "the overall rating of the player \n \nThe rating is between 0-100 which is calculated by FIFA.\n Higher overall rating means the player has a stronger overall strength.",
      "potential": "potential of the player \n \nThe potential score is between 0-100 which is calculated by FIFA.\n Higher potential score means that the player has more potential",
      "preferred_foot": "the player's preferred foot when attacking right/ left",
      "attacking_work_rate": "the player's attacking work rate \n \n high: implies that the player is going to be in all of your attack moves\n medium: implies that the player will select the attack actions he will join in\n low: remain in his position while the team attacks ",
      "defensive_work_rate": "the player's defensive work rate \n \n high: remain in his position and defense while the team attacks \n medium: implies that the player will select the defensive actions he will join in\n low: implies that the player is going to be in all of your attack moves instead of defensing",
      "crossing": "the player's crossing score  \n \nCross is a long pass into the opponent's goal towards the header of sixth-yard teammate.\n The crossing score is between 0-100 which measures the tendency/frequency of crosses in the box.\n Higher potential score means that the player performs better in crossing actions. ",
      "finishing": "the player's finishing rate 0-100 which is calculated by FIFA",
      "heading_accuracy": "the player's heading accuracy 0-100 which is calculated by FIFA",
      "short_passing": "the player's short passing score 0-100 which is calculated by FIFA",
      "volleys": "the player's volley score 0-100 which is calculated by FIFA",
      "dribbling": "the player's dribbling score 0-100 which is calculated by FIFA",
      "curve": "the player's curve score 0-100 which is calculated by FIFA",
      "free_kick_accuracy": "the player's free kick accuracy 0-100 which is calculated by FIFA",
      "long_passing": "the player's long passing score 0-100 which is calculated by FIFA",
      "ball_control": "the player's ball control score 0-100 which is calculated by FIFA",
      "acceleration": "the player's acceleration score 0-100 which is calculated by FIFA",
      "sprint_speed": "the player's sprint speed\n 0-100 which is calculated by FIFA",
      "agility": "the player's agility 0-100 which is calculated by FIFA",
      "reactions": "the player's reactions score 0-100 which is calculated by FIFA",
      "balance": "the player's balance score 0-100 which is calculated by FIFA",
      "shot_power": "the player's shot power 0-100 which is calculated by FIFA",
      "jumping": "the player's jumping score 0-100 which is calculated by FIFA",
      "stamina": "the player's stamina score 0-100 which is calculated by FIFA",
      "strength": "the player's strength score 0-100 which is calculated by FIFA",
      "long_shots": "the player's long shots score 0-100 which is calculated by FIFA",
      "aggression": "the player's aggression score 0-100 which is calculated by FIFA",
      "interceptions": "the player's interceptions score 0-100 which is calculated by FIFA",
      "positioning": "the player's \npositioning score\n 0-100 which is calculated by FIFA",
      "vision": "the player's vision score\n 0-100 which is calculated by FIFA",
      "penalties": "the player's penalties score\n 0-100 which is calculated by FIFA",
      "marking": "the player's markingscore 0-100 which is calculated by FIFA",
      "standing_tackle": "the player's standing tackle score 0-100 which is calculated by FIFA",
      "sliding_tackle": "the player's sliding tackle score 0-100 which is calculated by FIFA",
      "gk_diving": "the player's goalkeep diving score 0-100 which is calculated by FIFA",
      "gk_handling": "the player's goalkeep diving score 0-100 which is calculated by FIFA",
      "gk_kicking": "the player's goalkeep kicking score 0-100 which is calculated by FIFA",
      "gk_positioning": "the player's goalkeep positioning score 0-100 which is calculated by FIFA",
      "gk_reflexes": "the player's goalkeep reflexes score 0-100 which is calculated by FIFA"
    },
    "Player": {
      "id": "the unique id for players ",
      "player_api_id": "the id of the player api ",
      "player_name": "player name ",
      "player_fifa_api_id": "the id of the player fifa api ",
      "birthday": "the player's birthday e.g. 1992-02-29 00:00:00 \n\n \nPlayer A is older than player B means that A's birthday is earlier than B's",
      "height": "the player's height ",
      "weight": "the player's weight "
    },
    "League": {
      "id": "the unique id for leagues ",
      "country_id": "the unique id for countries ",
      "name": "league name "
    },
    "Country": {
      "id": "the unique id for countries ",
      "name": "country name "
    },
    "Team": {
      "id": "the unique id for teams ",
      "team_api_id": "the id of the team api ",
      "team_fifa_api_id": "the id of the team fifa api ",
      "team_long_name": "the team's long name ",
      "team_short_name": "the team's short name "
    },
    "Team_Attributes": {
      "id": "the unique id for teams ",
      "team_fifa_api_id": "the id of the team fifa api ",
      "team_api_id": "the id of the team api ",
      "date": "Date e.g. 2010-02-22 00:00:00",
      "buildUpPlaySpeed": "the speed in which attacks are put together  the score which is between 1-00 to measure the team's attack speed",
      "buildUpPlaySpeedClass": "the speed class \n \n Slow: 1-33\n Balanced: 34-66\n Fast: 66-100",
      "buildUpPlayDribbling": "the tendency/ frequency of dribbling ",
      "buildUpPlayDribblingClass": "the dribbling class \n \n Little: 1-33\n Normal: 34-66\n Lots: 66-100",
      "buildUpPlayPassing": "affects passing distance and support from teammates ",
      "buildUpPlayPassingClass": "the passing class \n \n Short: 1-33\n Mixed: 34-66\n Long: 66-100",
      "buildUpPlayPositioningClass": "A team's freedom of movement in the 1st two thirds of the pitch Organised / Free Form",
      "chanceCreationPassing": "Amount of risk in pass decision and run support ",
      "chanceCreationPassingClass": "the chance creation passing class \n \n Safe: 1-33\n Normal: 34-66\n Risky: 66-100",
      "chanceCreationCrossing": "The tendency / frequency of crosses into the box ",
      "chanceCreationCrossingClass": "the chance creation crossing class \n \n Little: 1-33\n Normal: 34-66\n Lots: 66-100",
      "chanceCreationShooting": "The tendency / frequency of shots taken ",
      "chanceCreationShootingClass": "the chance creation shooting class \n \n Little: 1-33\n Normal: 34-66\n Lots: 66-100",
      "chanceCreationPositioningClass": "A teams freedom of movement in the final third of the pitch Organised / Free Form",
      "defencePressure": "Affects how high up the pitch the team will start pressuring ",
      "defencePressureClass": "the defence pressure class \n \n Deep: 1-33\n Medium: 34-66\n High: 66-100",
      "defenceAggression": "Affect the teams approach to tackling the ball possessor ",
      "defenceAggressionClass": "the defence aggression class \n \n Contain: 1-33\n Press: 34-66\n Double: 66-100",
      "defenceTeamWidth": "Affects how much the team will shift to the ball side ",
      "defenceTeamWidthClass": "the defence team width class \n \n Narrow: 1-33\n Normal: 34-66\n Wide: 66-100",
      "defenceDefenderLineClass": "Affects the shape and strategy of the defence Cover/ Offside Trap"
    },
    "Match": {
      "id": "the unique id for matches ",
      "country_id": "country id ",
      "league_id": "league id ",
      "season": "the season of the match ",
      "stage": "the stage of the match ",
      "date": "the date of the match e.g. 2008-08-17 00:00:00",
      "match_api_id": "the id of the match api ",
      "home_team_api_id": "the id of the home team api ",
      "away_team_api_id": "the id of the away team api ",
      "home_team_goal": "the goal of the home team ",
      "away_team_goal": "the goal of the away team ",
      "home_player_X1": "home_player_x1 ",
      "home_player_X2": "home_player_x2 ",
      "home_player_X3": "home_player_x3 ",
      "home_player_X4": "home_player_x4 ",
      "home_player_X5": "home_player_x5 ",
      "home_player_X6": "home_player_x6 ",
      "home_player_X7": "home_player_x7 ",
      "home_player_X8": "home_player_x8 ",
      "home_player_X9": "home_player_x9 ",
      "home_player_X10": "home_player_x10 ",
      "home_player_X11": "home_player_x11 ",
      "away_player_X1": "away_player_x1 ",
      "away_player_X2": "away_player_x2 ",
      "away_player_X3": "away_player_x3 ",
      "away_player_X4": "away_player_x4 ",
      "away_player_X5": "away_player_x5 ",
      "away_player_X6": "away_player_x6 ",
      "away_player_X7": "away_player_x7 ",
      "away_player_X8": "away_player_x8 ",
      "away_player_X9": "away_player_x9 ",
      "away_player_X10": "away_player_x10 ",
      "away_player_X11": "away_player_x11 ",
      "home_player_Y1": "home_player_y1 ",
      "home_player_Y2": "home_player_y2 ",
      "home_player_Y3": "home_player_y3 ",
      "home_player_Y4": "home_player_y4 ",
      "home_player_Y5": "home_player_y5 ",
      "home_player_Y6": "home_player_y6 ",
      "home_player_Y7": "home_player_y7 ",
      "home_player_Y8": "home_player_y8 ",
      "home_player_Y9": "home_player_y9 ",
      "home_player_Y10": "home_player_y10 ",
      "home_player_Y11": "home_player_y11 ",
      "away_player_Y1": "away_player_y1 ",
      "away_player_Y2": "away_player_y2 ",
      "away_player_Y3": "away_player_y3 ",
      "away_player_Y4": "away_player_y4 ",
      "away_player_Y5": "away_player_y5 ",
      "away_player_Y6": "away_player_y6 ",
      "away_player_Y7": "away_player_y7 ",
      "away_player_Y8": "away_player_y8 ",
      "away_player_Y9": "away_player_y9 ",
      "away_player_Y10": "away_player_y10 ",
      "away_player_Y11": "away_player_y11 ",
      "home_player_1": "home_player_1 ",
      "home_player_2": "home_player_2 ",
      "home_player_3": "home_player_3 ",
      "home_player_4": "home_player_4 ",
      "home_player_5": "home_player_5 ",
      "home_player_6": "home_player_6 ",
      "home_player_7": "home_player_7 ",
      "home_player_8": "home_player_8 ",
      "home_player_9": "home_player_9 ",
      "home_player_10": "home_player_10 ",
      "home_player_11": "home_player_11 ",
      "away_player_1": "away_player_1 ",
      "away_player_2": "away_player_2 ",
      "away_player_3": "away_player_3 ",
      "away_player_4": "away_player_4 ",
      "away_player_5": "away_player_5 ",
      "away_player_6": "away_player_6 ",
      "away_player_7": "away_player_7 ",
      "away_player_8": "away_player_8 ",
      "away_player_9": "away_player_9 ",
      "away_player_10": "away_player_10 ",
      "away_player_11": "away_player_11 ",
      "goal": "the goal of the match ",
      "shoton": "the shot on goal of the match \n \nA shot on goal is a shot that enters the goal or would have entered the goal if it had not been blocked by the goalkeeper or another defensive player.\n",
      "shotoff": "the shot off goal of the match, which is the opposite of shot on ",
      "foulcommit": "the fouls occurred in the match ",
      "card": "the cards given in the match ",
      "cross": "Balls sent into the opposition team's area from a wide position in the match ",
      "corner": "Ball goes out of play for a corner kick in the match ",
      "possession": "The duration from a player taking over the ball in the match ",
      "B365H": "b365h ",
      "B365D": "b365d ",
      "B365A": "b365a ",
      "BWH": "bwh ",
      "BWD": "bwd ",
      "BWA": "bwa ",
      "IWH": "iwh ",
      "IWD": "iwd ",
      "IWA": "iwa ",
      "LBH": "lbh ",
      "LBD": "lbd ",
      "LBA": "lba ",
      "PSH": "psh ",
      "PSD": "psd ",
      "PSA": "psa ",
      "WHH": "whh ",
      "WHD": "whd ",
      "WHA": "wha ",
      "SJH": "sjh ",
      "SJD": "sjd ",
      "SJA": "sja ",
      "VCH": "vch ",
      "VCD": "vcd ",
      "VCA": "vca ",
      "GBH": "gbh ",
      "GBD": "gbd ",
      "GBA": "gba ",
      "BSH": "bsh ",
      "BSD": "bsd ",
      "BSA": "bsa "
    }
  },
  "thrombosis_prediction": {
    "Examination": {
      "ID": "identification of the patient ",
      "Examination Date": "Examination Date ",
      "aCL IgG": "anti-Cardiolipin antibody (IgG) concentration ",
      "aCL IgM": "anti-Cardiolipin antibody (IgM) concentration ",
      "ANA": "anti-nucleus antibody concentration ",
      "ANA Pattern": "pattern observed in the sheet of ANA examination ",
      "aCL IgA": "anti-Cardiolipin antibody (IgA) concentration ",
      "Diagnosis": "disease names ",
      "KCT": "measure of degree of coagulation +: positive\n\n-: negative",
      "RVVT": "measure of degree of coagulation +: positive\n\n-: negative",
      "LAC": "measure of degree of coagulation +: positive\n\n-: negative",
      "Symptoms": "other symptoms observed ",
      "Thrombosis": "degree of thrombosis 0: negative (no thrombosis)\n1: positive (the most serious)\n2: positive (severe)3: positive (mild)"
    },
    "Patient": {
      "ID": "identification of the patient ",
      "SEX": "Sex F: female; M: male",
      "Birthday": "Birthday ",
      "Description": "the first date when a patient data was recorded null or empty: not recorded",
      "First Date": "the date when a patient came to the hospital ",
      "Admission": "patient was admitted to the hospital (+) or followed at the outpatient clinic (-) patient was admitted to the hospital (+) or followed at the outpatient clinic (-)",
      "Diagnosis": "disease names "
    },
    "Laboratory": {
      "ID": "identification of the patient ",
      "Date": "Date of the laboratory tests (YYMMDD) ",
      "GOT": "AST glutamic oxaloacetic transaminase \n\n\nNormal range: N < 60",
      "GPT": "ALT glutamic pyruvic transaminase \n\n\nNormal range: N < 60",
      "LDH": "lactate dehydrogenase \n\n\nNormal range: N < 500",
      "ALP": "alkaliphophatase \n\n\nNormal range: N < 300",
      "TP": "total protein \n\n\nNormal range: 6.0 < N < 8.5",
      "ALB": "albumin \n\n\nNormal range: 3.5 < N < 5.5",
      "UA": "uric acid \n\n\nNormal range: N > 8.0 (Male)N > 6.5 (Female)",
      "UN": "urea nitrogen \n\n\nNormal range: N < 30",
      "CRE": "creatinine \n\n\nNormal range: N < 1.5",
      "T-BIL": "total bilirubin \n\n\nNormal range: N < 2.0",
      "T-CHO": "total cholesterol \n\nNormal range: N < 250",
      "TG": "triglyceride \n\n\nNormal range: N < 200",
      "CPK": "creatinine phosphokinase \n\nNormal range: N < 250",
      "GLU": "blood glucose \n\nNormal range: N < 180",
      "WBC": "White blood cell \n\nNormal range: 3.5 < N < 9.0",
      "RBC": "Red blood cell \n\n\nNormal range: 3.5 < N < 6.0",
      "HGB": "Hemoglobin \n\n\nNormal range: 10 < N < 17",
      "HCT": "Hematoclit \n\nNormal range: 29 < N < 52",
      "PLT": "platelet \n\n\nNormal range: 100 < N < 400",
      "PT": "prothrombin time \n\n\nNormal range: N < 14",
      "APTT": "activated partial prothrombin time \n\n\nNormal range: N < 45",
      "FG": "fibrinogen \n\n\nNormal range: 150 < N < 450",
      "PIC": "pic ",
      "TAT": "tat ",
      "TAT2": "tat2 ",
      "U-PRO": "proteinuria \n\n\nNormal range: 0 < N < 30",
      "IGG": "Ig G \n\n\nNormal range: 900 < N < 2000",
      "IGA": "Ig A \n\n\nNormal range: 80 < N < 500",
      "IGM": "Ig M \n\n\nNormal range: 40 < N < 400",
      "CRP": "C-reactive protein \n\n\nNormal range: N= -, +-, or N < 1.0",
      "RA": "Rhuematoid Factor \n\n\nNormal range: N= -, +-",
      "RF": "RAHA \n\n\nNormal range: N < 20",
      "C3": "complement 3 \n\n\nNormal range: N > 35",
      "C4": "complement 4 \n\n\nNormal range: N > 10",
      "RNP": "anti-ribonuclear protein \n\n\nNormal range: N= -, +-",
      "SM": "anti-SM \n\n\nNormal range: N= -, +-",
      "SC170": "anti-scl70 \n\n\nNormal range: N= -, +-",
      "SSA": "anti-SSA \n\n\nNormal range: N= -, +-",
      "SSB": "anti-SSB \n\n\nNormal range: N= -, +-",
      "CENTROMEA": "anti-centromere \n\n\nNormal range: N= -, +-",
      "DNA": "anti-DNA \n\n\nNormal range: N < 8",
      "DNA-II": "anti-DNA \n\n\nNormal range: N < 8"
    }
  },
  "toxicology": {
    "atom": {
      "atom_id": "the unique id of atoms ",
      "molecule_id": "identifying the molecule to which the atom belongs \n\nTRXXX_i represents ith atom of molecule TRXXX",
      "element": "the element of the toxicology  \u0095 cl: chlorine\n\u0095 c: carbon\n\u0095 h: hydrogen\n\u0095 o: oxygen\n\u0095 s: sulfur\n\u0095 n: nitrogen\n\u0095 p: phosphorus\n\u0095 na: sodium\n\u0095 br: bromine\n\u0095 f: fluorine\n\u0095 i: iodine\n\u0095 sn: Tin\n\u0095 pb: lead\n\u0095 te: tellurium\n\u0095 ca: Calcium"
    },
    "bond": {
      "bond_id": "unique id representing bonds TRxxx_A1_A2:\nTRXXX refers to which molecule\nA1 and A2 refers to which atom",
      "molecule_id": "identifying the molecule in which the bond appears ",
      "bond_type": "type of the bond \n\n\u0093-\u0094: single bond\n'=': double bond\n'#': triple bond"
    },
    "connected": {
      "atom_id": "id of the first atom ",
      "atom_id2": "id of the second atom ",
      "bond_id": "bond id representing bond between two atoms "
    },
    "molecule": {
      "molecule_id": "unique id of molecule \"+\" --> this molecule / compound is carcinogenic\n'-' this molecule is not / compound carcinogenic",
      "label": "whether this molecule is carcinogenic or not "
    }
  },
  "student_club": {
    "event": {
      "event_id": "A unique identifier for the event ",
      "event_name": "event name ",
      "event_date": "The date the event took place or is scheduled to take place e.g. 2020-03-10T12:00:00",
      "type": "The kind of event, such as game, social, election ",
      "notes": "A free text field for any notes about the event ",
      "location": "Address where the event was held or is to be held or the name of such a location ",
      "status": "One of three values indicating if the event is in planning, is opened, or is closed Open/ Closed/ Planning"
    },
    "major": {
      "major_id": "A unique identifier for each major ",
      "major_name": "major name ",
      "department": "The name of the department that offers the major ",
      "college": "The name college that houses the department that offers the major "
    },
    "zip_code": {
      "zip_code": "The ZIP code itself. A five-digit number identifying a US post office. ",
      "type": "The kind of ZIP code \n \n Standard: the normal codes with which most people are familiar \n PO Box: zip codes have post office boxes \n Unique: zip codes that are assigned to individual organizations.",
      "city": "The city to which the ZIP pertains ",
      "county": "The county to which the ZIP pertains ",
      "state": "The name of the state to which the ZIP pertains ",
      "short_state": "The abbreviation of the state to which the ZIP pertains "
    },
    "attendance": {
      "link_to_event": "The unique identifier of the event which was attended References the Event table",
      "link_to_member": "The unique identifier of the member who attended the event References the Member table"
    },
    "budget": {
      "budget_id": "A unique identifier for the budget entry ",
      "category": "The area for which the amount is budgeted, such as, advertisement, food, parking ",
      "spent": "The total amount spent in the budgeted category for an event. the unit is dollar. This is summarized from the Expense table",
      "remaining": "A value calculated as the amount budgeted minus the amount spent the unit is dollar \n\n If the remaining < 0, it means that the cost has exceeded the budget.",
      "amount": "The amount budgeted for the specified category and event the unit is dollar \n\n\nsome computation like: amount = spent + remaining ",
      "event_status": "the status of the event Closed / Open/ Planning \n\n \n Closed: It means that the event is closed. The spent and the remaining won't change anymore.\n Open: It means that the event is already opened. The spent and the remaining will change with new expenses.\n Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage. ",
      "link_to_event": "The unique identifier of the event to which the budget line applies. References the Event table"
    },
    "expense": {
      "expense_id": "unique id of income ",
      "expense_description": "A textual description of what the money was spend for ",
      "expense_date": "The date the expense was incurred e.g. YYYY-MM-DD",
      "cost": "The dollar amount of the expense the unit is dollar",
      "approved": "A true or false value indicating if the expense was approved true/ false",
      "link_to_member": "The member who incurred the expense ",
      "link_to_budget": "The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event.  References the Budget table"
    },
    "income": {
      "income_id": "A unique identifier for each record of income ",
      "date_received": "the date that the fund received ",
      "amount": "amount of funds the unit is dollar",
      "source": "A value indicating where the funds come from such as dues, or the annual university allocation ",
      "notes": "A free-text value giving any needed details about the receipt of funds ",
      "link_to_member": "link to member "
    },
    "member": {
      "member_id": "unique id of member ",
      "first_name": "member's first name ",
      "last_name": "member's last name \n \nfull name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.",
      "email": "member's email ",
      "position": "The position the member holds in the club ",
      "t_shirt_size": "The size of tee shirt that member wants when shirts are ordered \n usually the student ordered t-shirt with lager size has bigger body shape ",
      "phone": "The best telephone at which to contact the member ",
      "zip": "the zip code of the member's hometown ",
      "link_to_major": "The unique identifier of the major of the member. References the Major table "
    }
  },
  "superhero": {
    "alignment": {
      "id": "the unique identifier of the alignment ",
      "alignment": "the alignment of the superhero \n\nAlignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include:\nGood: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man.\nNeutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool.\n\u0095\tBad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker."
    },
    "attribute": {
      "id": "the unique identifier of the attribute ",
      "attribute_name": "the attribute \n\nA superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery. "
    },
    "colour": {
      "id": "the unique identifier of the color ",
      "colour": "the color of the superhero's skin/eye/hair/etc "
    },
    "gender": {
      "id": "the unique identifier of the gender ",
      "gender": "the gender of the superhero "
    },
    "publisher": {
      "id": "the unique identifier of the publisher ",
      "publisher_name": "the name of the publisher "
    },
    "race": {
      "id": "the unique identifier of the race ",
      "race": "the race of the superhero \n\nIn the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics"
    },
    "superhero": {
      "id": "the unique identifier of the superhero ",
      "superhero_name": "the name of the superhero ",
      "full_name": "the full name of the superhero \n\nThe full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is \"John\" and their surname is \"Smith,\" their full name would be \"John Smith.\"",
      "gender_id": "the id of the superhero's gender ",
      "eye_colour_id": "the id of the superhero's eye color ",
      "hair_colour_id": "the id of the superhero's hair color ",
      "skin_colour_id": "the id of the superhero's skin color ",
      "race_id": "the id of the superhero's race ",
      "publisher_id": "the id of the publisher ",
      "alignment_id": "the id of the superhero's alignment ",
      "height_cm": "the height of the superhero \n\nThe unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing. ",
      "weight_kg": "the weight of the superhero \n\nThe unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing."
    },
    "hero_attribute": {
      "hero_id": "the id of the hero\nMaps to superhero(id) ",
      "attribute_id": "the id of the attribute\nMaps to attribute(id) ",
      "attribute_value": "the attribute value \n\nIf a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes."
    },
    "superpower": {
      "id": "the unique identifier of the superpower ",
      "power_name": "the superpower name "
    },
    "hero_power": {
      "hero_id": "the id of the hero\nMaps to superhero(id) ",
      "power_id": "the id of the power\nMaps to superpower(id) \n\nIn general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others."
    }
  },
  "codebase_community": {
    "badges": {
      "Id": "the badge id ",
      "UserId": "the unique id of the user ",
      "Name": "the badge name the user obtained ",
      "Date": "the date that the user obtained the badge "
    },
    "comments": {
      "Id": "the comment Id ",
      "PostId": "the unique id of the post ",
      "Score": "rating score \n\nThe score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment. ",
      "Text": "the detailed content of the comment ",
      "CreationDate": "the creation date of the comment ",
      "UserId": "the id of the user who post the comment ",
      "UserDisplayName": "user's display name "
    },
    "postHistory": {
      "Id": "the post history id ",
      "PostHistoryTypeId": "the id of the post history type ",
      "PostId": "the unique id of the post ",
      "RevisionGUID": "the revision globally unique id of the post ",
      "CreationDate": "the creation date of the post ",
      "UserId": "the user who post the post ",
      "Text": "the detailed content of the post ",
      "Comment": "comments of the post ",
      "UserDisplayName": "user's display name "
    },
    "postLinks": {
      "Id": "the post link id ",
      "CreationDate": "the creation date of the post link ",
      "PostId": "the post id ",
      "RelatedPostId": "the id of the related post ",
      "LinkTypeId": "the id of the link type "
    },
    "posts": {
      "Id": "the post id ",
      "PostTypeId": "the id of the post type ",
      "AcceptedAnswerId": "the accepted answer id of the post  ",
      "CreaionDate": "the creation date of the post ",
      "Score": "the score of the post ",
      "ViewCount": "the view count of the post \n\nHigher view count means the post has higher popularity",
      "Body": "the body of the post ",
      "OwnerUserId": "the id of the owner user ",
      "LasActivityDate": "the last activity date ",
      "Title": "the title of the post ",
      "Tags": "the tag of the post ",
      "AnswerCount": "the total number of answers of the post ",
      "CommentCount": "the total number of comments of the post ",
      "FavoriteCount": "the total number of favorites of the post \n\nmore favorite count refers to more valuable posts. ",
      "LastEditorUserId": "the id of the last editor ",
      "LastEditDate": "the last edit date ",
      "CommunityOwnedDate": "the community owned date ",
      "ParentId": "the id of the parent post \n\nIf the parent id is null, the post is the root post. Otherwise, the post is the child post of other post. ",
      "ClosedDate": "the closed date of the post \n\nif ClosedDate is null or empty, it means this post is not well-finished\nif CloseDate is not null or empty, it means this post has well-finished.",
      "OwnerDisplayName": "the display name of the post owner ",
      "LastEditorDisplayName": "the display name of the last editor "
    },
    "tags": {
      "Id": "the tag id ",
      "TagName": "the name of the tag ",
      "Count": "the count of posts that contain this tag more counts --> this tag is more popular",
      "ExcerptPostId": "the excerpt post id of the tag ",
      "WikiPostId": "the wiki post id of the tag "
    },
    "users": {
      "Id": "the user id ",
      "Reputation": "the user's reputation \n\nThe user with higher reputation has more influence. ",
      "CreationDate": "the creation date of the user account ",
      "DisplayName": "the user's display name ",
      "LastAccessDate": "the last access date of the user account ",
      "WebsiteUrl": "the website url of the user account ",
      "Location": "user's location ",
      "AboutMe": "the self introduction of the user ",
      "Views": "the number of views  ",
      "UpVotes": "the number of upvotes ",
      "DownVotes": "the number of downvotes ",
      "AccountId": "the unique id of the account ",
      "Age": "user's age \u0095 teenager: 13-18\n\u0095 adult: 19-65\n\u0095 elder: > 65",
      "ProfileImageUrl": "the profile image url "
    },
    "votes": {
      "Id": "the vote id ",
      "PostId": "the id of the post that is voted ",
      "VoteTypeId": "the id of the vote type ",
      "CreationDate": "the creation date of the vote ",
      "UserId": "the id of the voter ",
      "BountyAmount": "the amount of bounty "
    }
  }
}