{"sample_id": 101, "db_id": "movie_platform", "final": {"question": "How many users were not trialists when they rated the movie \"Patti Smith: Dream of Life\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Patti Smith: Dream of Life' AND T1.user_trialist = 0", "source_tables": ["movies", "ratings"]}, "evidence": "Patti Smith: Dream of Life' is movie_title; the user was not a trialist when he created the list refers to user_trialist = 0;"}
{"sample_id": 108, "db_id": "movie_platform", "final": {"question": "Please list the names of the movies that received more than 20 likes?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic_likes > 20", "source_tables": ["movies", "ratings"]}, "evidence": "received more than 20 likes refers to critic_likes>20;"}
{"sample_id": 78, "db_id": "movie_platform", "final": {"question": "How many ratings on the movie \"A Way of Life\" are made after the year 2011?", "sql": "SELECT COUNT(T1.rating_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.rating_timestamp_utc >= '2012-01-01'", "source_tables": ["movies", "ratings"]}, "evidence": "A Way of Life' is movie_title; rating after the year 2011 refers to rating_timestamp_utc > '2011';"}
{"sample_id": 56, "db_id": "movie_platform", "final": {"question": "Please give me the url of the movie \"La Antena\".", "sql": "SELECT movie_url FROM movies WHERE movie_title = 'La Antena'", "source_tables": ["movies"]}, "evidence": "movie La Antena refers to movie_title = 'La Antena'; url refers to movie_url;"}
{"sample_id": 98, "db_id": "movie_platform", "final": {"question": "How many followers does the list created by the user whose user_avatar_image_url is https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214 have?", "sql": "SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_avatar_image_url = 'https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214'", "source_tables": ["lists_users", "lists"]}, "evidence": "followers refers to list_followers;"}
{"sample_id": 29, "db_id": "movie_platform", "final": {"question": "What is the name of the movie whose critic received the highest number of likes related to the critic made by the user rating the movie?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "number of likes received refers to critic likes; received the highest number of likes refers to MAX(critic_likes);"}
{"sample_id": 105, "db_id": "movie_platform", "final": {"question": "Please list the names of the movies that have been rated the most times in 2020.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_timestamp_utc LIKE '2020%' GROUP BY T2.movie_title ORDER BY COUNT(T2.movie_title) DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "in 2020 refers to rating_timestamp_utc = '2020%'; rated the most times refers to Max(Count(movie_title));"}
{"sample_id": 82, "db_id": "movie_platform", "final": {"question": "What's the percentage of the users who have rated \"1\" on the movie \"When Will I Be Loved\"?", "sql": "SELECT CAST(SUM(CASE WHEN T1.rating_score = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved'", "source_tables": ["movies", "ratings"]}, "evidence": "When Will I Be Loved' is movie_title; rated 1 refers to rating_score = 1; percentage = Divide(Count(rating_id where rating_score = 1),Count(rating_id)) *100;"}
{"sample_id": 104, "db_id": "movie_platform", "final": {"question": "What was the title of the first list created by a user 85981819? And please provide the user_avatar_image_url.", "sql": "SELECT T2.list_title, T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_id = 85981819 ORDER BY T2.list_creation_timestamp_utc LIMIT 1", "source_tables": ["lists_users", "lists"]}, "evidence": "user 85981819 refers to user_id = 85981819;\u00a0 first list created refers to Min (list_creation_date_utc);"}
{"sample_id": 109, "db_id": "movie_platform", "final": {"question": "What is the average score of the movie \"The Fall of Berlin\" in 2019?", "sql": "SELECT SUM(T1.rating_score) / COUNT(T1.rating_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_timestamp_utc LIKE '2019%' AND T2.movie_title LIKE 'The Fall of Berlin'", "source_tables": ["movies", "ratings"]}, "evidence": "The Fall of Berlin' is movie_title; in 2019 refers to rating_timestamp_utc = 2019; Average score refers to Avg(rating_score);"}
{"sample_id": 19, "db_id": "movie_platform", "final": {"question": "For movie id 1269, how many users, who was a paying subscriber and was eligible for trial when he rated the movie, gave the movie a rating score of less than or equal to 2?", "sql": "SELECT COUNT(*) FROM ratings WHERE movie_id = 1269 AND rating_score <= 2 AND user_eligible_for_trial = 1 AND user_has_payment_method = 1", "source_tables": ["ratings"]}, "evidence": "paying subscriber refers to user_has_payment_method = 1; eligible for trial refers to user_eligible_for_trial = 1; rating_score< = 2;"}
{"sample_id": 42, "db_id": "movie_platform", "final": {"question": "How many likes did the critic of the movie \"Apocalypse Now\" received after giving the movie a rating score of 5?", "sql": "SELECT T2.critic_likes FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 0 AND T2.rating_score = 5 AND T1.movie_title = 'Apocalypse Now'", "source_tables": ["movies", "ratings"]}, "evidence": "Apocalypse Now refer to movie_title; rating score refer to rating_score = '5';likes received refers to critic_likes\n"}
{"sample_id": 15, "db_id": "movie_platform", "final": {"question": "Who is the director of the movie Sex, Drink and Bloodshed?", "sql": "SELECT director_name FROM movies WHERE movie_title = 'Sex, Drink and Bloodshed'", "source_tables": ["movies"]}, "evidence": "Sex, Drink and Bloodshed refers to movie title = 'Sex, Drink and Bloodshed';"}
{"sample_id": 67, "db_id": "movie_platform", "final": {"question": "Please list all the critics made by the user rating the movie \"A Way of Life\".", "sql": "SELECT T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'", "source_tables": ["movies", "ratings"]}, "evidence": "A Way of Life refers to movie_title;"}
{"sample_id": 24, "db_id": "movie_platform", "final": {"question": "Was the user who created the \"World War 2 and Kids\" list eligible for trial when he created the list? Indicate how many followers does the said list has.", "sql": "SELECT T2.user_eligible_for_trial, T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T1.user_id AND T1.list_id = T2.list_id WHERE T1.list_title = 'World War 2 and Kids'", "source_tables": ["lists", "lists_users"]}, "evidence": "user was eligible for trial when he created the list refers to user_eligible_for_trial = 1; number of followers a list have refers to list_followers;"}
{"sample_id": 31, "db_id": "movie_platform", "final": {"question": "How many movies directed by Francis Ford Coppola have a popularity of more than 1,000? Indicate what is the highest amount of likes that each critic per movie has received, if there's any.", "sql": "SELECT COUNT(T2.movie_title), T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Francis Ford Coppola' AND T2.movie_popularity > 1000", "source_tables": ["movies", "ratings"]}, "evidence": "Francis Ford Coppola refers to director_name; popularity of more than 1,000 refers to movie_popularity >1000;highest amount of likes that each critic per movie has received refers to MAX(critic_likes)"}
{"sample_id": 132, "db_id": "movie_platform", "final": {"question": "For the lists that got more than 3000 followers, how many did the users who created those lists are paying subscribers?", "sql": "SELECT COUNT(T1.user_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers > 3000 AND T1.user_has_payment_method = 1", "source_tables": ["lists_users", "lists"]}, "evidence": "got more than 3000 followers refers to list_followers > 3000; paying subscribers refer to user_has_payment_method = 1"}
{"sample_id": 51, "db_id": "movie_platform", "final": {"question": "What's the description for the movie list \"Short and pretty damn sweet\"?", "sql": "SELECT list_description FROM lists WHERE list_title = 'Short and pretty damn sweet'", "source_tables": ["lists"]}, "evidence": "Short and pretty damn sweet is list_title; description refers to list_description;"}
{"sample_id": 160, "db_id": "movie_platform", "final": {"question": "What are the top 5 most popular movies of the 21st century? Indicate how many users gave it a rating score of 5.", "sql": "SELECT DISTINCT T2.movie_id, SUM(T1.rating_score = 5) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T2.movie_popularity DESC LIMIT 5", "source_tables": ["movies", "ratings"]}, "evidence": "most popular movies refers to MAX(movie_popularity); rating score of 5 refers to rating_score = 5; movies of the 21st century refers to movie_release_year> = 2000"}
{"sample_id": 16, "db_id": "movie_platform", "final": {"question": "What is the name of the most followed list?", "sql": "SELECT list_title FROM lists ORDER BY list_followers DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "most followed list refers to MAX(list_followers);"}
{"sample_id": 76, "db_id": "movie_platform", "final": {"question": "User 58149469's critic on which film got 1 like and 2 comments?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 58149469 AND T1.critic_likes = 1 AND T1.critic_comments = 2", "source_tables": ["movies", "ratings"]}, "evidence": "user 58149469 refers to user_id = 58149469; critic with 1 like refers to critic_likes = 1; critic with 2 comments refers to critic_comments = 2;"}
{"sample_id": 18, "db_id": "movie_platform", "final": {"question": "What is the list ID that was first created by user 85981819?", "sql": "SELECT list_id FROM lists_users WHERE user_id = 85981819 ORDER BY list_creation_date_utc ASC LIMIT 1", "source_tables": ["lists_users"]}, "evidence": "first created list refers to oldest list_creation_date_utc;"}
{"sample_id": 12, "db_id": "movie_platform", "final": {"question": "For all movies where users left a critic, find the movie name, user, rating and critics comments from the user.", "sql": "SELECT T2.movie_title, T1.user_id, T1.rating_score, T1.critic FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.critic IS NOT NULL", "source_tables": ["movies", "ratings"]}, "evidence": "movies where users left a critic refers to critic IS NOT NULL; critic comments refers to critic;"}
{"sample_id": 9, "db_id": "movie_platform", "final": {"question": "List ther users who gave the worst rating for movie 'Love Will Tear Us Apart'.", "sql": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Love Will Tear Us Apart' AND T1.rating_score = 1", "source_tables": ["movies", "ratings"]}, "evidence": "worst rating refers to rating_score = 1;"}
{"sample_id": 133, "db_id": "movie_platform", "final": {"question": "Which 1988 movie got the most ratings?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 1988 ORDER BY T1.rating_score DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "1988 movie refers to movie_release_year = '1998'; most ratings refers to MAX(rating_score)"}
{"sample_id": 75, "db_id": "movie_platform", "final": {"question": "How many users have rated the most popular movie?", "sql": "SELECT COUNT(rating_id) FROM ratings WHERE movie_id = ( SELECT movie_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )", "source_tables": ["movies", "ratings"]}, "evidence": "most popular refers to Max(movie_popularity);"}
{"sample_id": 136, "db_id": "movie_platform", "final": {"question": "Give the percentage of subscribers who rated who rated the movie \"G.I. Jane\".", "sql": "SELECT CAST(SUM(CASE WHEN T3.user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'G.I. Jane'", "source_tables": ["movies", "ratings", "lists_users"]}, "evidence": "movie \"G.I. Jane\" refers to movie_title = 'G.I. Jane'; subscribers refers to user_subscriber = 1; percentage refers to DIVIDE(COUNT(user_subscriber = 1),COUNT(user_subscriber))*100"}
{"sample_id": 60, "db_id": "movie_platform", "final": {"question": "Please list the titles of the movie lists user 32172230 created when he or she was eligible for trial.", "sql": "SELECT T1.list_title FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 32172230 AND T2.user_eligible_for_trial = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "the user was eligible for trail when he created the list refers to user_eligile_for_trail = 1; user 32172230 refers to user_id = 32172230;"}
{"sample_id": 55, "db_id": "movie_platform", "final": {"question": "In which year was the movie \"La Antena\" released?", "sql": "SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena'", "source_tables": ["movies"]}, "evidence": "movie La Antena refers to movie_title = 'La Antena'; which year refers to movie_release_year;"}
{"sample_id": 147, "db_id": "movie_platform", "final": {"question": "Who is the user who created the list titled 'Sound and Vision'? Was he a subcriber when he created the list?", "sql": "SELECT T1.user_id, T1.user_subscriber FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Sound and Vision'", "source_tables": ["lists_users", "lists"]}, "evidence": "list titled 'Sound and Vision' refers to list_title = 'Sound and Vision'; user_subscriber = 1 means the user was a subscriber when he rated the movie; user_subscriber = 0 means the user was not a subscriber when he rated the movie\n\n\n\n"}
{"sample_id": 30, "db_id": "movie_platform", "final": {"question": "How much is the popularity of the movie that has the highest popularity between 1920 to 1929 and when did the movie received its first rating score of 1 from the users who were a paying subscriber when they rated the movie ?", "sql": "SELECT MAX(T2.movie_popularity), MIN(T1.rating_timestamp_utc) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1920 AND 1929 AND T1.rating_score = 1 AND T1.user_has_payment_method = 1", "source_tables": ["movies", "ratings"]}, "evidence": "movie with highest popularity refers to MAX(movie_popularity); movie_release_year BETWEEN 1920 AND 1929; when the movie received its first rating score of 1 refers to oldest date in rating_timestamp_utc where rating score = 1; user was a paying subscriber when they rated the movie refers to user_has_payment_method = 1;"}
{"sample_id": 141, "db_id": "movie_platform", "final": {"question": "Name all lists created by a user who was a subcriber when created the list.", "sql": "SELECT DISTINCT T2.list_id FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_subscriber = 1", "source_tables": ["lists_users", "lists"]}, "evidence": "was a subscriber refers to user_subscriber = 1"}
{"sample_id": 120, "db_id": "movie_platform", "final": {"question": "Give the name of the movie that got the most \"5\" ratings.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5", "source_tables": ["movies", "ratings"]}, "evidence": "5 ratings refers to rating_score = 5; name of the movie refers to movie_title"}
{"sample_id": 148, "db_id": "movie_platform", "final": {"question": "For the list with more than 200 followers, state the title and how long the list has been created?", "sql": "SELECT list_title , 365 * (strftime('%Y', 'now') - strftime('%Y', list_creation_timestamp_utc)) + 30 * (strftime('%m', 'now') - strftime('%m', list_creation_timestamp_utc)) + strftime('%d', 'now') - strftime('%d', list_creation_timestamp_utc) FROM lists WHERE list_followers > 200", "source_tables": ["lists"]}, "evidence": "more than 200 followers refers to list_followers >200; how long the list has been created refers to SUBTRACT(CURRENT_TIMESTAMP,list_creation_timestamp_utc)"}
{"sample_id": 158, "db_id": "movie_platform", "final": {"question": "Between 1/1/2010 to 12/31/2020, how many users, who were a trialist when they created the list, gave the movie \"The Secret Life of Words\" a rating score of 3?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'The Secret Life of Words' AND T1.rating_score = 3 AND T1.user_trialist = 0 AND T1.rating_timestamp_utc BETWEEN '2010%' AND '2020%'", "source_tables": ["movies", "ratings"]}, "evidence": "Between 1/1/2010 to 12/31/2020 refers to rating_timestamp_utc between '2010-01-01%' and '2020-12-31%'; a trialist refers to user_trialist = 1; movie \"The Secret Life of Words\" refers to movie_title = 'The Secret Life of Words'; rating score of 3 refers to rating_score = 3"}
{"sample_id": 2, "db_id": "movie_platform", "final": {"question": "What is the name of the longest movie title? When was it released?", "sql": "SELECT movie_title, movie_release_year FROM movies ORDER BY LENGTH(movie_popularity) DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "longest movie title refers to MAX(LENGTH(movie_title)); when it was released refers to movie_release_year;"}
{"sample_id": 100, "db_id": "movie_platform", "final": {"question": "Please list the names of the films released in 2003 among the films scored by user 2941 .", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2003 AND T1.user_id = 2941", "source_tables": ["movies", "ratings"]}, "evidence": "released in 2003 refers to movie_release_year = 2003; user 2941 refers to user_id = 2941; film refers to movie;"}
{"sample_id": 126, "db_id": "movie_platform", "final": {"question": "How many critics were given to the movie that got the most movie popularity number.", "sql": "SELECT COUNT(T1.critic) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity = ( SELECT MAX(movie_popularity) FROM movies )", "source_tables": ["movies", "ratings"]}, "evidence": "most movie popularity number refers to MAX(movie_popularity)"}
{"sample_id": 68, "db_id": "movie_platform", "final": {"question": "How many critics of the movie \"Imitation of Life\" got more than 1 like?", "sql": "SELECT COUNT(*) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Imitation of Life' AND T1.critic_likes > 1", "source_tables": ["movies", "ratings"]}, "evidence": "Imitation of Life refers to movie_title; critics got more than 1 like refers to critic_likes >1;"}
{"sample_id": 131, "db_id": "movie_platform", "final": {"question": "How many paying subscribers gave a rating to the movie \"One Flew Over the Cuckoo's Nest\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T1.user_id = T3.user_id WHERE T2.movie_title = 'One Flew Over the Cuckoo''s Nest' AND T3.user_has_payment_method = 1", "source_tables": ["ratings_users", "movies", "ratings"]}, "evidence": "paying subscribers refer to user_has_payment_method = 1; movie \"One Flew Over the Cuckoo's Nest\" refers to movie_id = 'One Flew Over the Cuckoo''s Nest'"}
{"sample_id": 45, "db_id": "movie_platform", "final": {"question": "How many movies have a popularity of more than 400 but less than 500? Indicate the name of the movies and the highest rating score each movie has received.", "sql": "SELECT T1.movie_title, MAX(T2.rating_score) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_popularity BETWEEN 400 AND 500 GROUP BY T1.movie_title", "source_tables": ["movies", "ratings"]}, "evidence": "popularity of more than 400 but less than 500 refers to movie_popularity BETWEEN 400 AND 500; highest rating score refer to MAX(rating_score)\n\n"}
{"sample_id": 26, "db_id": "movie_platform", "final": {"question": "What is the URL to the movie director page on Mubi of the director whose movie was critic by user 2452551 and was given 39 likes?", "sql": "SELECT T2.director_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 2452551 AND T1.critic_likes = 39", "source_tables": ["movies", "ratings"]}, "evidence": "URL to the movie director page on Mubi refers to director_url; likes refers to critic_likes; critic_likes = 39;"}
{"sample_id": 143, "db_id": "movie_platform", "final": {"question": "Among the lists with at least one follower, how many were created by user who was subscriber when created the list?", "sql": "SELECT COUNT(T1.list_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers >= 1 AND T1.user_subscriber = 1", "source_tables": ["lists_users", "lists"]}, "evidence": "lists with at least one follower refers to list_followers > = 1; was a subscriber refers to user_subscriber = 1"}
{"sample_id": 85, "db_id": "movie_platform", "final": {"question": "How many films were released in 2007?", "sql": "SELECT COUNT(*) FROM movies WHERE movie_release_year = 2007", "source_tables": ["movies"]}, "evidence": "film released in 2007 refers to movie_release_year = 2007; film refers to movie"}
{"sample_id": 96, "db_id": "movie_platform", "final": {"question": "How many users in Mubi give the movie \"White Night Wedding for 5\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T2.movie_title = 'White Night Wedding'", "source_tables": ["movies", "ratings"]}, "evidence": "White Night Wedding' is movie_title; for 5 refers to rating_score = 5;"}
{"sample_id": 94, "db_id": "movie_platform", "final": {"question": "Please list the names of the top three movies in the number of likes related to the critic made by the user rating the movie.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_likes DESC LIMIT 3", "source_tables": ["movies", "ratings"]}, "evidence": "likes related to the critic made by the user rating the movie refers to critic_likes; top refers to Max(critic_likes);"}
{"sample_id": 36, "db_id": "movie_platform", "final": {"question": "What is the average number of movies added to the lists of user 8516503? Give the user profile image URL on Mubi.", "sql": "SELECT AVG(T1.list_movie_number), T2.user_avatar_image_url FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T2.user_id = 8516503", "source_tables": ["lists", "lists_users"]}, "evidence": "user profile image URL refers to user_avatar_image_url; user 8516503 refers to user_id; Average refers to AVG(list_movie_number where user_id = 8516503)\n\n"}
{"sample_id": 118, "db_id": "movie_platform", "final": {"question": "How many followers did the user who posted the list \"Non-American Films about World War II\" have?", "sql": "SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Non-American Films about World War II'", "source_tables": ["lists_users", "lists"]}, "evidence": "the list \"Non-American Films about World War II\" refers to list_title = 'Non-American Films about World War II'"}
{"sample_id": 22, "db_id": "movie_platform", "final": {"question": "What is the user ID of the user, who was a subscriber when he created the list, who created a list for 10 consecutive years? If there are multiple users, indicate each of their user IDs.", "sql": "SELECT user_id FROM lists_users WHERE user_subscriber = 1 GROUP BY user_id HAVING MAX(SUBSTR(list_creation_date_utc, 1, 4)) - MIN(SUBSTR(list_creation_date_utc, 1, 4)) >= 10", "source_tables": ["lists_users"]}, "evidence": "user was a subscriber when he created the list refers to user_subscriber = 1; user who created a list for 10 consecutive years refers to user_id with list_creation_date_utc for 10 succeeding years;"}
{"sample_id": 119, "db_id": "movie_platform", "final": {"question": "What's the number of users gave the movie \"Downfall\" a rating of \"4\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Downfall' AND T1.rating_score = 4", "source_tables": ["movies", "ratings"]}, "evidence": "movie \"Downfall\" refers to movie_title = 'Downfall'; rating of \"4\" refers to rating_score = 4"}
{"sample_id": 135, "db_id": "movie_platform", "final": {"question": "What is the percentage of users gave \"5\" to the movie \"Go Go Tales\"?", "sql": "SELECT CAST(SUM(CASE WHEN T1.rating_score = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'Go Go Tales'", "source_tables": ["movies", "ratings"]}, "evidence": "movie \"Go Go Tales\" refers to movie_title = 'Go Go Tales'; gave \"5\" refers to rating_score = 5; percentage refers to DIVIDE(COUNT(rating_score = 5),COUNT(rating_score))*100"}
{"sample_id": 95, "db_id": "movie_platform", "final": {"question": "How many users have more than 100 followers in the list created by users in 2009?", "sql": "SELECT COUNT(T1.user_id) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_followers > 100 AND T1.list_creation_date_utc LIKE '2009%'", "source_tables": ["lists_users", "lists"]}, "evidence": "more than 100 followers refers to list_followers >100;\u00a0 list created by the user in 2009 refers to list_creation_date_utc = '2009';"}
{"sample_id": 11, "db_id": "movie_platform", "final": {"question": "For all ratings which are rated in year 2020, name the movies which has the rating scored 4 and above.", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(SUBSTR(T1.rating_timestamp_utc, 1, 4) AS INTEGER) = 2020 AND CAST(SUBSTR(T1.rating_timestamp_utc, 6, 2) AS INTEGER) > 4", "source_tables": ["movies", "ratings"]}, "evidence": "ratings in year 2020 refers to rating_timestamp_utc like '%2020%'; rating_score > = 4;"}
{"sample_id": 66, "db_id": "movie_platform", "final": {"question": "How many users liked the movie \"A Way of Life\" to the highest extent?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.rating_score = 5", "source_tables": ["movies", "ratings"]}, "evidence": "like the movie highest to the extent refers to rating_score = 5; A Way of Life refers to movie_title;"}
{"sample_id": 97, "db_id": "movie_platform", "final": {"question": "What's the cover image of the user who created the movie list 'Georgia related films'?", "sql": "SELECT T1.user_cover_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Georgia related films'", "source_tables": ["lists_users", "lists"]}, "evidence": "Play it cool' is list_title; cover image of user refers to user_cover_image_url;"}
{"sample_id": 6, "db_id": "movie_platform", "final": {"question": "What is the user avatar url for user 41579158? What is the latest movie rated by him / her?", "sql": "SELECT T3.user_avatar_image_url, T3.rating_date_utc FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id INNER JOIN ratings_users AS T3 ON T3.user_id = T2.user_id WHERE T3.user_id = 41579158 ORDER BY T3.rating_date_utc DESC LIMIT 1", "source_tables": ["ratings_users", "movies", "ratings"]}, "evidence": "user avatar url refers to user_avatar_image_url; latest movie rated refers to latest rating_date;"}
{"sample_id": 27, "db_id": "movie_platform", "final": {"question": "What is the average rating score of the movie \"When Will I Be Loved\" and who was its director?", "sql": "SELECT AVG(T1.rating_score), T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved'", "source_tables": ["movies", "ratings"]}, "evidence": "average rating score = AVG(rating_score);"}
{"sample_id": 146, "db_id": "movie_platform", "final": {"question": "Which title list has not been updated for the longest period of time? State how long it has not been updated?", "sql": "SELECT list_title , datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(list_update_timestamp_utc) FROM lists ORDER BY list_update_timestamp_utc LIMIT 1", "source_tables": ["lists"]}, "evidence": "not been updated for the longest period of time refers to MIN(list_update_timestamp_utc); how long it has not been updated refers to SUBTRACT(CURRENT_TIMESTAMP, list_update_timestamp_utc)"}
{"sample_id": 144, "db_id": "movie_platform", "final": {"question": "For all list titles with at least 200 movies in the list, what is their average number of followers?", "sql": "SELECT AVG(list_followers) FROM lists WHERE list_movie_number > 200", "source_tables": ["lists"]}, "evidence": "at least 200 movies in the list refers to list_movie_number > 200; average number of followers refers to avg(list_followers)"}
{"sample_id": 38, "db_id": "movie_platform", "final": {"question": "How many users who created a list in the February of 2016 were eligible for trial when they created the list? Indicate the user id of the user who has the most number of followers in his list in February of 2016.", "sql": "SELECT T1.list_followers FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T1.list_id = T2.list_id WHERE T2.list_creation_date_utc BETWEEN '2016-02-01' AND '2016-02-29' AND T2.user_eligible_for_trial = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "created a list in the February of 2016 refer to list_creation_date_utc BETWEEN 2/1/2016 and 2/29/2016; eligible for trial refers to user_eligible_for_trial = 1;\n"}
{"sample_id": 41, "db_id": "movie_platform", "final": {"question": "How many users, who were not a a trialist when they rated the movie, gave the movie \"The South\" a rating score of not more than 2?", "sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 0 AND T2.rating_score <= 2 AND T1.movie_title = 'The South'", "source_tables": ["movies", "ratings"]}, "evidence": "not a trialist refer to user_trialist = 0; rating score of not more than 2 refer to rating_score <2; The South refers to movie_title\n"}
{"sample_id": 4, "db_id": "movie_platform", "final": {"question": "What is the average number of Mubi users who love movies directed by Stanley Kubrick?", "sql": "SELECT AVG(movie_popularity) FROM movies WHERE director_name = 'Stanley Kubrick'", "source_tables": ["movies"]}, "evidence": "average = AVG(movie_popularity); number of Mubi users who loves the movie refers to movie_popularity;"}
{"sample_id": 140, "db_id": "movie_platform", "final": {"question": "What is the percentage of list created by user who was a subscriber when he created the list?", "sql": "SELECT CAST(SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(list_id) FROM lists_users", "source_tables": ["lists_users"]}, "evidence": "was a subscriber refers to user_subscriber = 1; percentage refers to DIVIDE(COUNT(user_subscriber = 1),COUNT(list_id))"}
{"sample_id": 32, "db_id": "movie_platform", "final": {"question": "What is the URL to the user profile image on Mubi of the user who gave the movie id of 1103 a 5 ratinng score on 4/19/2020?", "sql": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN ratings_users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_id = 1103 AND rating_score = 5 AND T2.rating_date_utc = '2020-04-19'", "source_tables": ["ratings_users", "ratings"]}, "evidence": "URL to the user profile image on Mubi\u00a0 refers to user_avatar_image_url;\u00a0 4/19/2020 refers to rating_date_utc"}
{"sample_id": 65, "db_id": "movie_platform", "final": {"question": "How many more movie lists were created by the user who created the movie list \"250 Favourite Films\"?", "sql": "SELECT COUNT(list_id) FROM lists_users WHERE user_id = ( SELECT user_id FROM lists WHERE list_title = '250 Favourite Films' )", "source_tables": ["lists_users", "lists"]}, "evidence": "250 Favourite Films refers to list_title;"}
{"sample_id": 112, "db_id": "movie_platform", "final": {"question": "Which year had the most released films?", "sql": "SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "year refers to movie_release_year; most release films refers to MAX(COUNT(movie_id))\n\n"}
{"sample_id": 69, "db_id": "movie_platform", "final": {"question": "Which user made a critic for the film \"When Will I Be Loved\" and got 2 comments for the critic?", "sql": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.critic_comments = 2", "source_tables": ["movies", "ratings"]}, "evidence": "When Will I Be Loved refers to movie_title;\u00a0 2 comments for the critic refers to critic_comments = 2;"}
{"sample_id": 10, "db_id": "movie_platform", "final": {"question": "List all movies with the best rating score. State the movie title and number of Mubi user who loves the movie.", "sql": "SELECT DISTINCT T2.movie_title, T2.movie_popularity FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5", "source_tables": ["movies", "ratings"]}, "evidence": "best rating score refers to rating_score = 5; number of Mubi user who loves the movie refers to movie_popularity;"}
{"sample_id": 155, "db_id": "movie_platform", "final": {"question": "Who created the list that has 142 comments? Indicate the user id of the user, if there are multiple lists with 142 comments, list the user id of the person who created the list", "sql": "SELECT user_id FROM lists WHERE list_comments = 142", "source_tables": ["lists"]}, "evidence": "list that has 142 comments refers to list_comments = 142"}
{"sample_id": 114, "db_id": "movie_platform", "final": {"question": "How many movies did the director of the highest movie popularity make?", "sql": "SELECT COUNT(movie_id) FROM movies WHERE director_id = ( SELECT director_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )", "source_tables": ["movies"]}, "evidence": "highest movie popularity refers to MAX(movie_popularity)"}
{"sample_id": 0, "db_id": "movie_platform", "final": {"question": "Name movie titles released in year 1945. Sort the listing by the descending order of movie popularity.", "sql": "SELECT movie_title FROM movies WHERE movie_release_year = 1945 ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "released in the year 1945 refers to movie_release_year = 1945;"}
{"sample_id": 124, "db_id": "movie_platform", "final": {"question": "For the user who post the list that contained the most number of the movies, is he/she a paying subscriber when creating that list?", "sql": "SELECT T1.user_has_payment_method FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number = ( SELECT MAX(list_movie_number) FROM lists )", "source_tables": ["lists_users", "lists"]}, "evidence": "the list that contained the most number of the movies refers to MAX(list_movie_number); user_has_payment_method = 1 means the user was a paying subscriber when he created the list ; \nuser_has_payment_method = 0 means the user was not a paying subscriber when he created the list \n\n"}
{"sample_id": 156, "db_id": "movie_platform", "final": {"question": "What is Jeannot Szwarc's most popular movie and what is its average rating score?", "sql": "SELECT T2.movie_title, AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Jeannot Szwarc' ORDER BY T2.movie_popularity DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "Jeannot Szwarc's refers to director_name = 'Jeannot Szwarc'; most popular movie refers to MAX(movie_popularity); average rating score refers to avg(rating_score)"}
{"sample_id": 64, "db_id": "movie_platform", "final": {"question": "What's the avatar image of the user who created the movie list \"250 Favourite Films\"?", "sql": "SELECT T2.user_avatar_image_url FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films'", "source_tables": ["lists", "lists_users"]}, "evidence": "250 Favourite Films refers to list_title; avatar image refers to user_avatar_image_url;"}
{"sample_id": 44, "db_id": "movie_platform", "final": {"question": "When was the first movie of the director who directed the highest number of movies released and what is the user id of the user who received the highest number of comments related to the critic made by the user rating the movie?", "sql": "SELECT MIN(movie_release_year) FROM movies WHERE director_name = ( SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name ORDER BY COUNT(T2.director_name) DESC LIMIT 1 )", "source_tables": ["movies", "ratings"]}, "evidence": "comments refer to critic_comments"}
{"sample_id": 90, "db_id": "movie_platform", "final": {"question": "Please list the id of the director of the movie \"It's Winter\".", "sql": "SELECT director_id FROM movies WHERE movie_title = 'It''s Winter'", "source_tables": ["movies"]}, "evidence": "It's Winter' is movie_title;"}
{"sample_id": 28, "db_id": "movie_platform", "final": {"question": "How many movies were added to the list with the most number of movies? Indicate whether the user was a paying subscriber or not when he created the list.", "sql": "SELECT T1.list_movie_number, T2.user_has_payment_method FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id ORDER BY T1.list_movie_number DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "list with the most number of movies refers to MAX(list_movie_number); user_has_payment_method = 1 means the user was a paying subscriber when he created the list; user_has_payment_method = 0 means the user was not a paying subscriber when he created the list;"}
{"sample_id": 40, "db_id": "movie_platform", "final": {"question": "How many directors have directed atleast 10 movies between 1960 to 1985? Indicate the name of the movie in those years of each director that received the highest amount of 5 rating score.", "sql": "SELECT T2.director_name FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1960 AND 1985 GROUP BY T2.director_name HAVING COUNT(T2.movie_id) > 10", "source_tables": ["movies", "ratings"]}, "evidence": "directed at least 10 movies refers to count(direct_name)>10; 1960 to 1985 refer to movie_release_year\n"}
{"sample_id": 117, "db_id": "movie_platform", "final": {"question": "Give the number of followers for the user who posted the most lists.", "sql": "SELECT SUM(T1.list_followers) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id GROUP BY T1.user_id ORDER BY COUNT(T1.list_id) DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "number of followers refers to user_subscriber; posted the most lists refers to MAX(COUNT(list_id))"}
{"sample_id": 25, "db_id": "movie_platform", "final": {"question": "Which year was the third movie directed by Quentin Tarantino released? Indicate the user ids of the user who gave it a rating score of 4.", "sql": "SELECT T2.movie_release_year, T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_id = ( SELECT movie_id FROM movies WHERE director_name = 'Quentin Tarantino' ORDER BY movie_release_year ASC LIMIT 2, 1 ) AND T1.rating_score = 4", "source_tables": ["movies", "ratings"]}, "evidence": "third movie refers to third movie that has oldest movie_release_year;"}
{"sample_id": 23, "db_id": "movie_platform", "final": {"question": "How many users gave \"Pavee Lackeen: The Traveller Girl\" movie a rating score of 4?", "sql": "SELECT COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'Pavee Lackeen: The Traveller Girl' AND T2.rating_score = 4", "source_tables": ["movies", "ratings"]}, "evidence": "FALSE;"}
{"sample_id": 122, "db_id": "movie_platform", "final": {"question": "Show the avatar of the user who gave the rating at 2019/10/17 1:36:36.", "sql": "SELECT T2.user_avatar_image_url FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id WHERE T1.rating_timestamp_utc LIKE '2019-10-17 01:36:36'", "source_tables": ["lists_users", "ratings"]}, "evidence": "at 2019/10/17 1:36:36 refers to rating_timestamp_utc = '2019/10/17 1:36:36'; avatar of the user refers to user_avatar_image_url\n\n"}
{"sample_id": 81, "db_id": "movie_platform", "final": {"question": "What's the average rating score of the movie \"A Way of Life\"?", "sql": "SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life'", "source_tables": ["movies", "ratings"]}, "evidence": "A Way of Life' is movie_title; average rating score = Divide (Sum(rating_score), Count(rating_id));"}
{"sample_id": 79, "db_id": "movie_platform", "final": {"question": "What's of rating on the movie \"Innocence Unprotected\" by the user who created the movie list \"250 Favourite Films\"?", "sql": "SELECT T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T2.movie_title = 'Innocence Unprotected' AND T3.list_title = '250 Favourite Films'", "source_tables": ["movies", "ratings", "lists"]}, "evidence": "Innocence Unprotected' is movie_title; '250 Favourite Films' is list_title; rating refers to rating_score;"}
{"sample_id": 84, "db_id": "movie_platform", "final": {"question": "Who was the director of the movie \"Tokyo Eyes\"\uff1f", "sql": "SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes'", "source_tables": ["movies"]}, "evidence": "Tokyo Eyes' is movie_title, director refers to director_name;"}
{"sample_id": 39, "db_id": "movie_platform", "final": {"question": "What is the URL to the rating on Mubi of the Riff-Raff movie that was given the highest rating score by user 22030372?", "sql": "SELECT T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_id = 22030372 AND T2.rating_score = 5 AND T1.movie_title = 'Riff-Raff'", "source_tables": ["movies", "ratings"]}, "evidence": "URL refer to rating_url; user 22030372 refer to user_id"}
{"sample_id": 93, "db_id": "movie_platform", "final": {"question": "Which of the film released in 2008 scored the highest?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year = 2008 ORDER BY T1.rating_score DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "film released in 2008 refers to movie_release_year = 2008; scored the highest refers to Max(rating_score); film refers to movie;"}
{"sample_id": 86, "db_id": "movie_platform", "final": {"question": "Which of the films released in 2006 was the most popular among Mubi users?", "sql": "SELECT movie_title FROM movies WHERE movie_release_year = 2006 ORDER BY movie_popularity DESC LIMIT 1", "source_tables": ["movies"]}, "evidence": "released in 2006 refers to movie_release_year = 2006; most popular refers to Max(movie_popularity); film refers to movie;"}
{"sample_id": 111, "db_id": "movie_platform", "final": {"question": "Which of the film directed by director Abbas Kiarostami has the highest average score?", "sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Abbas Kiarostami' GROUP BY T2.movie_title ORDER BY SUM(T1.rating_score) / COUNT(T1.rating_id) DESC LIMIT 1", "source_tables": ["movies", "ratings"]}, "evidence": "Abbas Kiarostami' is director_name; the highest Average score refers to Max(Avg(rating_score));"}
{"sample_id": 162, "db_id": "movie_platform", "final": {"question": "Between 1/1/2017 to 12/31/2017, how many users who were eligible for trial when they rated the movie \"Patti Smith: Dream of Life\"and what is the image URL to the movie on Mubi?", "sql": "SELECT COUNT(T1.user_id), T2.movie_image_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE datetime(T1.rating_timestamp_utc) BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 00:00:00'", "source_tables": ["movies", "ratings"]}, "evidence": "Between 1/1/2017 to 12/31/2017 refers to rating_timestamp_utc between '2017-01-01 00:00:00' and '2017-12-31 00:00:00'; eligible for trial refers to user_eligible_for_trial = 1; movie \"Patti Smith: Dream of Life\" refers to movie_title = 'Patti Smith: Dream of Life'"}
{"sample_id": 139, "db_id": "movie_platform", "final": {"question": "Among the lists created in 2016, which is the list that was updated most recently.", "sql": "SELECT list_title FROM lists WHERE strftime('%Y', list_update_timestamp_utc) = '2016' ORDER BY list_update_timestamp_utc DESC LIMIT 1", "source_tables": ["lists"]}, "evidence": "created in 2016 refers to list_creation_timestamp_utc like '2016%'; updated most recently refers to MAX(list_update_timestamp_utc)"}
{"sample_id": 47, "db_id": "movie_platform", "final": {"question": "What is the average popularity of each movie that was directed by Christopher Nolan? Indicate which movie directed by him has received the highest number of 5 rating scores.", "sql": "SELECT AVG(T2.movie_popularity) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.director_name = 'Christopher Nolan'", "source_tables": ["movies", "ratings"]}, "evidence": "5 rating scores refer to rating_score; Christopher Nolan refer to director_name; average popularity of each movie refer to AVG(movie_popularity where director_name = 'Christopher Nolan')"}
{"sample_id": 127, "db_id": "movie_platform", "final": {"question": "Who gave a \"4\" rating to the movie \"Freaks\" at 2013/5/4 6:33:32? Give his/her user id.", "sql": "SELECT T1.user_id FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE rating_score = 4 AND rating_timestamp_utc LIKE '2013-05-04 06:33:32' AND T2.movie_title LIKE 'Freaks'", "source_tables": ["movies", "ratings"]}, "evidence": "4 rating refers to rating_score = 4; the movie \"Freaks\" refers to movie_title = 'Freaks' ; at 2013/5/4 6:33:32 refers to rating_timestamp_utc = '2013-05-04 06:33:32'"}
{"sample_id": 61, "db_id": "movie_platform", "final": {"question": "How many movie lists with over 100 movies had user 85981819 created when he or she was a paying subscriber?", "sql": "SELECT COUNT(*) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 85981819 AND T1.list_movie_number > 100 AND T2.user_has_payment_method = 1", "source_tables": ["lists", "lists_users"]}, "evidence": "the user was a paying subscriber when he created the list refers to user_has_payment_method = 1;\u00a0 movie lists with over 100 refers to list_movie_number >100;\u00a0 user 85981819 refers to user_id = 85981819;"}
{"sample_id": 73, "db_id": "movie_platform", "final": {"question": "How many users were trialists when they rated the movie \"A Way of Life\"?", "sql": "SELECT COUNT(T1.user_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'When Will I Be Loved' AND T1.user_trialist = 1", "source_tables": ["movies", "ratings"]}, "evidence": "A Way of Life' refers to movie_title; the user was a trialist when he rated the movie refers to user_trialist = 1;"}
{"sample_id": 33, "db_id": "movie_platform", "final": {"question": "Among the lists created by user 4208563, which one has the highest number of followers? Indicate how many followers it has and whether the user was a subscriber or not when he created the list.", "sql": "SELECT T1.list_followers, T2.user_subscriber = 1 FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id AND T2.list_id = T2.list_id WHERE T2.user_id = 4208563 ORDER BY T1.list_followers DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "User 4208563 refers to user_id;highest number of followers refers to MAX(list_followers); user_subscriber = 1 means that the user was a subscriber when he created the list; user_subscriber = 0 means the user was not a subscriber when he created the list (to replace)"}
{"sample_id": 115, "db_id": "movie_platform", "final": {"question": "What's the number of the paying subscribers when rating a movie after the year 2014?", "sql": "SELECT COUNT(user_subscriber) FROM ratings_users WHERE user_has_payment_method = 1 AND rating_date_utc > '2014%'", "source_tables": ["ratings_users"]}, "evidence": "paying subscribers refers to user_has_payment_method = 1; rating a movie after the year 2014 refers to rating_date_utc>'2014%'"}
{"sample_id": 123, "db_id": "movie_platform", "final": {"question": "Show the portrait picture of the user who created the list \"Vladimir Vladimirovich Nabokov\".", "sql": "SELECT T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Vladimir Vladimirovich Nabokov'", "source_tables": ["lists_users", "lists"]}, "evidence": "the list \"Vladimir Vladimirovich Nabokov\" refers to list_title = 'Vladimir Vladimirovich Nabokov'; portrait picture refers to user_avatar_image_url"}
{"sample_id": 134, "db_id": "movie_platform", "final": {"question": "For all the movies that were released in 1995, how many lower than 3 ratings did the most popularity movie had?", "sql": "SELECT COUNT(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score < 3 AND T2.movie_release_year = 1995 AND T2.movie_popularity = ( SELECT MAX(movie_popularity) FROM movies WHERE movie_release_year = 1995 )", "source_tables": ["movies", "ratings"]}, "evidence": "released in 1995 refers to movie_release_year = '1995'; lower than 3 ratings refers to rating_score <3; most popularity movie refers to MAX(movie_popularity)"}
{"sample_id": 62, "db_id": "movie_platform", "final": {"question": "What's the description of user 85981819's movie list with the most followers?", "sql": "SELECT T1.list_description FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 85981819 ORDER BY T1.list_followers DESC LIMIT 1", "source_tables": ["lists", "lists_users"]}, "evidence": "user 85981819 refers to user_id = 85981819; most followers refers to Max(list_followers); description refers to list_descriptions;"}
{"sample_id": 195, "db_id": "book_publishing_company", "final": {"question": "Name all the authors for 'Sushi, Anyone?'.", "sql": "SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.title = 'Sushi, Anyone?'", "source_tables": ["titles", "authors", "titleauthor"]}, "evidence": "most year to date sales refers to MAX(ytd_sales); on contract refers to contract = 1; name of author = au_fname, au_lname"}
{"sample_id": 180, "db_id": "book_publishing_company", "final": {"question": "State the publisher name for publisher ID 877? Calculate its average year to date sales.", "sql": "SELECT T2.pub_name, AVG(T1.ytd_sales) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.pub_id = '0877' GROUP BY T2.pub_name", "source_tables": ["publishers", "titles"]}, "evidence": "publisher id refers to pub_id; publisher name refers to pub_name; average year to date sales = AVG(ytd_sales)"}
{"sample_id": 184, "db_id": "book_publishing_company", "final": {"question": "List all employees who are at the maximum level in their job designation.", "sql": "SELECT T1.fname, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl = T2.max_lvl", "source_tables": ["employee", "jobs"]}, "evidence": "maximum level in their job designation refers to job_lvl = MAX(max_lvl)"}
{"sample_id": 176, "db_id": "book_publishing_company", "final": {"question": "List all titles with sales of quantity more than 20 and store located in the CA state.", "sql": "SELECT T1.title, T2.qty FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T2.stor_id = T3.stor_id WHERE T2.qty > 20 AND T3.state = 'CA'", "source_tables": ["titles", "sales", "stores"]}, "evidence": "qty is abbreviation for quantity; sales of quantity more than 20 refers to qty>20; store refers to stor_name"}
{"sample_id": 173, "db_id": "book_publishing_company", "final": {"question": "Provide a list of titles together with its publisher name for all publishers located in the USA.", "sql": "SELECT T1.title, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'USA'", "source_tables": ["publishers", "titles"]}, "evidence": "publisher name refers to pub_name;"}
{"sample_id": 227, "db_id": "book_publishing_company", "final": {"question": "How many sales did the store in Remulade make?", "sql": "SELECT COUNT(T1.ord_num) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T2.city = 'Remulade'", "source_tables": ["sales", "stores"]}, "evidence": "Remulade is a city; sales in the store refers to ord_num"}
{"sample_id": 222, "db_id": "book_publishing_company", "final": {"question": "What's on the notes for the order happened on 1994/9/14?", "sql": "SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1994-09-14'", "source_tables": ["titles", "sales"]}, "evidence": "order happened on refers to ord_date"}
{"sample_id": 215, "db_id": "book_publishing_company", "final": {"question": "What's the royalty for the bestseller book?", "sql": "SELECT royalty FROM titles ORDER BY ytd_sales DESC LIMIT 1", "source_tables": ["titles"]}, "evidence": "qty is abbreviation for quantity; bestseller means with the most sales quantity; MAX(qty)"}
{"sample_id": 209, "db_id": "book_publishing_company", "final": {"question": "Please give more detailed information about the first three books that sell the best.", "sql": "SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id ORDER BY T2.qty DESC LIMIT 3", "source_tables": ["titles", "sales"]}, "evidence": "qty is abbreviation for quantity; sells the best mean with the most sales quantity; MAX(qty)"}
{"sample_id": 182, "db_id": "book_publishing_company", "final": {"question": "Which employee has the lowest job level. State the first name, last name and when he /she was hired.", "sql": "SELECT fname, lname, hire_date FROM employee ORDER BY job_lvl LIMIT 1", "source_tables": ["employee"]}, "evidence": "lowest job level refers to MIN(job_lvl)"}
{"sample_id": 213, "db_id": "book_publishing_company", "final": {"question": "Which one is the cheapest business book?", "sql": "SELECT title FROM titles WHERE type = 'business' ORDER BY price LIMIT 1", "source_tables": ["titles"]}, "evidence": "business books refers to type = 'business'; cheapest book refers to MIN(price)"}
{"sample_id": 192, "db_id": "book_publishing_company", "final": {"question": "Name all the authors for all business titles.", "sql": "SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.type = 'business'", "source_tables": ["titles", "authors", "titleauthor"]}, "evidence": "business title refers to title under business where type = 'business'"}
{"sample_id": 220, "db_id": "book_publishing_company", "final": {"question": "What's Pedro S Afonso's job title?", "sql": "SELECT T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Pedro' AND T1.minit = 'S' AND T1.lname = 'Afonso'", "source_tables": ["employee", "jobs"]}, "evidence": "job title means job description which refers to job_desc"}
{"sample_id": 235, "db_id": "book_publishing_company", "final": {"question": "Find the difference between the average royalty of titles published by US and non US publishers?", "sql": "SELECT (CAST(SUM(CASE WHEN T2.country = 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T2.country != 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country != 'USA' THEN 1 ELSE 0 END)) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id", "source_tables": ["publishers", "titles", "roysched"]}, "evidence": "US publisher refers publisher in the US where country = 'USA'; non-US publishers refers publisher not in the US where country! = 'USA'; difference = SUBTRACT(AVG(royalty) where country = 'USA', AVG(royalty) where country! = 'USA'))"}
{"sample_id": 188, "db_id": "book_publishing_company", "final": {"question": "For each publisher, state the type of titles they published order by the publisher name.", "sql": "SELECT DISTINCT T2.pub_name, T1.type FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T2.pub_name", "source_tables": ["publishers", "titles"]}, "evidence": "publisher name refers to pub_name"}
{"sample_id": 221, "db_id": "book_publishing_company", "final": {"question": "How many levels are there left for Diego W Roel to reach if he/she could go to the max level for his/her position?", "sql": "SELECT T2.max_lvl - T1.job_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Diego' AND T1.minit = 'W' AND T1.lname = 'Roel'", "source_tables": ["employee", "jobs"]}, "evidence": "max level for his position refers to max_lvl; job level refers to job_lvl; level left to reach the max = SUBTRACT(max_lvl, job_lvl)"}
{"sample_id": 186, "db_id": "book_publishing_company", "final": {"question": "Who are the employees working for publisher not located in USA? State the employee's name and publisher name.", "sql": "SELECT T1.fname, T1.lname, T2.pub_name FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country != 'USA'", "source_tables": ["publishers", "employee"]}, "evidence": "not located at USA refers to country! = 'USA'"}
{"sample_id": 200, "db_id": "book_publishing_company", "final": {"question": "Please list the first names of the employees who work as Managing Editor.", "sql": "SELECT T1.fname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Managing Editor'", "source_tables": ["employee", "jobs"]}, "evidence": "Managing Editor is a job description which refers to job_desc"}
{"sample_id": 211, "db_id": "book_publishing_company", "final": {"question": "What is the average quantity of each order for the book \"Life Without Fear\"?", "sql": "SELECT CAST(SUM(T2.qty) AS REAL) / COUNT(T1.title_id) FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T1.title = 'Life Without Fear'", "source_tables": ["titles", "sales"]}, "evidence": "qty is abbreviation for quantity; average quantity order = AVG(qty)"}
{"sample_id": 191, "db_id": "book_publishing_company", "final": {"question": "Among all employees, who have job level greater than 200. State the employee name and job description.", "sql": "SELECT T1.fname, T1.lname, T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl > 200", "source_tables": ["employee", "jobs"]}, "evidence": "job level greater than 200 refers to job_lvl>200; job description refers to job_desc"}
{"sample_id": 204, "db_id": "book_publishing_company", "final": {"question": "Please list the stores that ordered the book \"Life Without Fear\".", "sql": "SELECT T2.stor_name FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T3.title = 'Life Without Fear'", "source_tables": ["titles", "sales", "stores"]}, "evidence": "store name refers to stor_name"}
{"sample_id": 177, "db_id": "book_publishing_company", "final": {"question": "Name the store with the highest quantity in sales? What is the least quantity title from the store's sale?", "sql": "SELECT T3.stor_id, T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T3.stor_id = T1.stor_id WHERE T3.stor_id = ( SELECT stor_id FROM sales GROUP BY stor_id ORDER BY SUM(qty) DESC LIMIT 1 ) GROUP BY T3.stor_id, T2.title ORDER BY SUM(T1.qty) ASC LIMIT 1", "source_tables": ["titles", "sales", "stores"]}, "evidence": "qty is abbreviation for quantity; highest quantity refers to MAX(qty); least quantity refers to MIN(qty)"}
{"sample_id": 170, "db_id": "book_publishing_company", "final": {"question": "What is the title that have at least 10% royalty without minimum range amount.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange = 0 AND T2.royalty >= 10", "source_tables": ["titles", "roysched"]}, "evidence": "at least 10% royalty refers to royalty > = 10; minimum range is synonym for low range which refers to lorange; without minimum range amount refers to lorange <> 0"}
{"sample_id": 230, "db_id": "book_publishing_company", "final": {"question": "Find and list the full name of employees who were hired between 1990 and 1995. Also, arrange them in the descending order of job level.", "sql": "SELECT fname, minit, lname FROM employee WHERE STRFTIME('%Y', hire_date) BETWEEN '1990' AND '1995' ORDER BY job_lvl DESC", "source_tables": ["employee"]}, "evidence": "job level refers to job_lvl; YEAR(hire_date) between 1990 and 1995"}
{"sample_id": 229, "db_id": "book_publishing_company", "final": {"question": "Among all the employees, how many percent more for the publishers than designers?", "sql": "SELECT CAST(SUM(CASE WHEN T2.job_desc = 'publisher' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.job_desc = 'designer' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id", "source_tables": ["employee", "jobs"]}, "evidence": "publisher and designer are job descriptions which refers to job_desc; percentage more = 100*(SUBTRACT(SUM(CASE WHERE job_desc = 'publisher), SUM(CASE WHERE job_desc = 'designer'))"}
{"sample_id": 216, "db_id": "book_publishing_company", "final": {"question": "Which job level is O'Rourke at?", "sql": "SELECT job_lvl FROM employee WHERE lname = 'O''Rourke'", "source_tables": ["employee"]}, "evidence": "job level refers to job_lvl"}
{"sample_id": 187, "db_id": "book_publishing_company", "final": {"question": "List all employees working for publisher 'GGG&G'. State their name and job description.", "sql": "SELECT T1.fname, T1.lname, T3.job_desc FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN jobs AS T3 ON T1.job_id = T3.job_id WHERE T2.pub_name = 'GGG&G'", "source_tables": ["publishers", "employee", "jobs"]}, "evidence": "name = fname, lname; job description refers to job_desc; publisher refers pub_name"}
{"sample_id": 201, "db_id": "book_publishing_company", "final": {"question": "What is the highest level of job to get to for the employee who got hired the earliest?", "sql": "SELECT T2.max_lvl FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id ORDER BY T1.hire_date LIMIT 1", "source_tables": ["employee", "jobs"]}, "evidence": "highest job level refers to MAX(job_lvl); hired the earliest refers to MIN(hire_date)"}
{"sample_id": 185, "db_id": "book_publishing_company", "final": {"question": "Name the Chief Executive Officer and when he/she was hired.", "sql": "SELECT T1.fname, T1.lname, T1.hire_date FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Chief Financial Officier'", "source_tables": ["employee", "jobs"]}, "evidence": "Chief Financial Offer is a job description which refers to job_desc"}
{"sample_id": 197, "db_id": "book_publishing_company", "final": {"question": "List all titles which have year to date sales higher than the average order by pubisher name.", "sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.ytd_sales > ( SELECT AVG(ytd_sales) FROM titles )", "source_tables": ["publishers", "titles"]}, "evidence": "year to date sales refers to ytd_sales; average order = AVG(ytd_sales)"}
{"sample_id": 232, "db_id": "book_publishing_company", "final": {"question": "In 1994 which title had less order quanty than the average order quantity? Find the title name, type and price.", "sql": "SELECT DISTINCT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T2.ord_date LIKE '1994%' AND T2.Qty < ( SELECT CAST(SUM(T4.qty) AS REAL) / COUNT(T3.title_id) FROM titles AS T3 INNER JOIN sales AS T4 ON T3.title_id = T4.title_id )", "source_tables": ["titles", "sales"]}, "evidence": "orders in 1994 refers to YEAR(ord_date) = 1994; order quantity refers to number of order expressed by ord_num; average order quantity = DIVIDE(SUM(ord_num), COUNT(title_id))"}
{"sample_id": 171, "db_id": "book_publishing_company", "final": {"question": "State the title and royalty percentage for title ID BU2075 between 10000 to 50000 range.", "sql": "SELECT T1.title, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange > 10000 AND T2.hirange < 50000 AND T1.title_ID = 'BU2075'", "source_tables": ["titles", "roysched"]}, "evidence": "lorange mean low range; hirange mean high range; range refers to between the low and high range; lorange>10000; hirange<12000"}
{"sample_id": 189, "db_id": "book_publishing_company", "final": {"question": "Name the publisher which has the most titles published in 1991.", "sql": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991' GROUP BY T1.pub_id, T2.pub_name ORDER BY COUNT(T1.title_id) DESC LIMIT 1", "source_tables": ["publishers", "titles"]}, "evidence": "most title published refers to MAX(count(title_id); published in 1991 refers to YEAR(pubdate) = 1991"}
{"sample_id": 237, "db_id": "book_publishing_company", "final": {"question": "Which title is about helpful hints on how to use your electronic resources, which publisher published it and what is the price of this book?", "sql": "SELECT T1.title, T2.pub_name, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Helpful hints on how to use your electronic resources to the best advantage.'", "source_tables": ["publishers", "titles"]}, "evidence": "publisher refers to pub_name; about the title refers to notes"}
{"sample_id": 202, "db_id": "book_publishing_company", "final": {"question": "In which city is the store with the highest total sales quantity located?", "sql": "SELECT T2.city FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id GROUP BY T2.city ORDER BY SUM(T1.qty) DESC LIMIT 1", "source_tables": ["sales", "stores"]}, "evidence": "qty is abbreviation for quantity; highest sales quantity refers to MAX(qty)"}
{"sample_id": 206, "db_id": "book_publishing_company", "final": {"question": "In which country is the publisher of the book \"Life Without Fear\" located?", "sql": "SELECT T2.country FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Life Without Fear'", "source_tables": ["publishers", "titles"]}, "evidence": "Life Without Fear is book title"}
{"sample_id": 183, "db_id": "book_publishing_company", "final": {"question": "In which year has the most hired employees?", "sql": "SELECT STRFTIME('%Y', hire_date) FROM employee GROUP BY STRFTIME('%Y', hire_date) ORDER BY COUNT(emp_id) DESC LIMIT 1", "source_tables": ["employee"]}, "evidence": "most hired employees refers to MAX(count(emp_id))"}
{"sample_id": 219, "db_id": "book_publishing_company", "final": {"question": "Which publisher had the highest job level? Give his/her full name.", "sql": "SELECT T1.fname, T1.minit, T1.lname FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id ORDER BY T1.job_lvl DESC LIMIT 1", "source_tables": ["employee", "jobs"]}, "evidence": "highest job level refers to MAX(job_lvl)"}
{"sample_id": 225, "db_id": "book_publishing_company", "final": {"question": "What's the publisher of the book \"Silicon Valley Gastronomic Treats\"? Give the publisher's name.", "sql": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.title = 'Silicon Valley Gastronomic Treats'", "source_tables": ["publishers", "titles"]}, "evidence": "publisher name refers to pub_name; Silicon Valley Gastronomic Treats is the title of a book"}
{"sample_id": 168, "db_id": "book_publishing_company", "final": {"question": "What is the title with the most ordered quantity in year 1992?", "sql": "SELECT T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y', T1.ord_date) = '1992' ORDER BY T1.qty DESC LIMIT 1", "source_tables": ["titles", "sales"]}, "evidence": "total quantity refers to qty; most ordered quantity refers to order with the highest quantity where MAX(count(qty)); date refers to ord_date; year 1992 refers to YEAR(ord_date) = 1992"}
{"sample_id": 224, "db_id": "book_publishing_company", "final": {"question": "Tell me about the information of the French publisher.", "sql": "SELECT T1.pr_info FROM pub_info AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.country = 'France'", "source_tables": ["pub_info", "publishers"]}, "evidence": "French publisher means publisher in France where country = 'France'"}
{"sample_id": 178, "db_id": "book_publishing_company", "final": {"question": "Name the title and publisher for title ID BU 2075. Provide all the royalty percentage for all ranges.", "sql": "SELECT T1.title, T3.pub_name, T2.lorange, T2.hirange, T2.royalty FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id INNER JOIN publishers AS T3 ON T1.pub_id = T3.pub_id WHERE T1.title_id = 'BU2075'", "source_tables": ["publishers", "titles", "roysched"]}, "evidence": "name the publisher refers to pub_name"}
{"sample_id": 226, "db_id": "book_publishing_company", "final": {"question": "Which city did Victoria P Ashworth work in?", "sql": "SELECT T2.city FROM employee AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.fname = 'Victoria' AND T1.minit = 'P' AND T1.lname = 'Ashworth'", "source_tables": ["publishers", "employee"]}, "evidence": ""}
{"sample_id": 242, "db_id": "retail_complains", "final": {"question": "Which complaint is more urgent, complaint ID CR2400594 or ID CR2405641?", "sql": "SELECT CASE WHEN SUM(CASE WHEN \"Complaint ID\" = 'CR2400594' THEN priority END) > SUM(CASE WHEN \"Complaint ID\" = 'CR2405641' THEN priority END) THEN 'CR2400594' ELSE 'CR2405641' END FROM callcenterlogs", "source_tables": ["callcenterlogs"]}, "evidence": "more urgent refers to MAX(priority);"}
{"sample_id": 377, "db_id": "retail_complains", "final": {"question": "What is the oldest age of male clients?", "sql": "SELECT MAX(age) FROM client WHERE sex = 'Male'", "source_tables": ["client"]}, "evidence": "oldest age refers to max(age); male refers to sex = 'Male'"}
{"sample_id": 366, "db_id": "retail_complains", "final": {"question": "Between 1/1/2017 and 4/1/2017, what is the average server time of calls under the server DARMON?", "sql": "SELECT AVG(CAST(SUBSTR(ser_time, 4, 2) AS REAL)) FROM callcenterlogs WHERE \"Date received\" BETWEEN '2017-01-01' AND '2017-04-01'", "source_tables": ["callcenterlogs"]}, "evidence": "between 1/1/2017 and 4/1/2017 refers to Date received between '2017-01-01' and '2017-04-01'; average server time refers to avg(ser_time)"}
{"sample_id": 334, "db_id": "retail_complains", "final": {"question": "Among the female clients, how many of them have a complaint with a priority of 1?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T1.sex = 'Female' AND T2.priority = 1", "source_tables": ["client", "callcenterlogs"]}, "evidence": "female refers to sex = 'Female'"}
{"sample_id": 312, "db_id": "retail_complains", "final": {"question": "How many complaints from customers with a gmail.com email were received by the company in February 2017?", "sql": "SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE (T2.\"Date received\" LIKE '2017-02%' OR T2.\"Date received\" LIKE '2017-01%') AND T1.email LIKE '%@gmail.com'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "gmail.com email refers to email like '%gmail.com'; in February 2017 refers to \"Date received\" BETWEEN '2017-01-02' AND '2017-02-28';"}
{"sample_id": 273, "db_id": "retail_complains", "final": {"question": "Please list the full name, date of birth, and email id of the elderly clients in descending order of age.", "sql": "SELECT first, middle, last, year, month , day, email FROM client WHERE age > 65 ORDER BY age DESC", "source_tables": ["client"]}, "evidence": "full name = first, middle, last; date of birth = year, month, day; elderly clients refers to age > 65;"}
{"sample_id": 326, "db_id": "retail_complains", "final": {"question": "What is the birth date of the youngest client?", "sql": "SELECT day, month, year FROM client ORDER BY year DESC, month DESC, day DESC LIMIT 1", "source_tables": ["client"]}, "evidence": "birth date refers to year, month, day; youngest client refers to max(year, month, day)"}
{"sample_id": 391, "db_id": "retail_complains", "final": {"question": "In 2015, how many complaints about Billing disputes were sent by clients in Portland?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Portland' AND T2.\"Date received\" LIKE '2015%' AND T2.Issue = 'Billing disputes'", "source_tables": ["client", "events"]}, "evidence": "in 2015 refers to Date received LIKE'2015%'; about Billing disputes refers to Issue = 'Billing disputes'; Portland refers to city = 'Portland'"}
{"sample_id": 284, "db_id": "retail_complains", "final": {"question": "Calculate the average number of complaints received from New Bedford each year which are closed with explanation.", "sql": "SELECT STRFTIME('%Y', T3.\"Date received\") , CAST(SUM(CASE WHEN T3.\"Company response to consumer\" = 'Closed with explanation' THEN 1 ELSE 0 END) AS REAL) / COUNT(T3.\"Complaint ID\") AS average FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.\"rand client\" = T2.client_id INNER JOIN events AS T3 ON T1.\"Complaint ID\" = T3.\"Complaint ID\" WHERE T2.city = 'New Bedford' GROUP BY strftime('%Y', T3.\"Date received\")", "source_tables": ["client", "callcenterlogs", "events"]}, "evidence": "average = AVG(\"Complaint ID\"); New Bedford refers to city = 'New Bedford'; closed with explanation refers to Company response to consumer = 'Closed with explanation';"}
{"sample_id": 404, "db_id": "retail_complains", "final": {"question": "In complaints about the credit card product, list the phone number of the oldest client.", "sql": "SELECT T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card' ORDER BY T1.age DESC LIMIT 1", "source_tables": ["client", "events"]}, "evidence": "oldest refers to max(age)"}
{"sample_id": 372, "db_id": "retail_complains", "final": {"question": "Give me the social number and state of the client whose phone number is 100-121-8371.", "sql": "SELECT T1.social, T1.state FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T1.phone = '100-121-8371'", "source_tables": ["client", "state", "district"]}, "evidence": "social number refers to social"}
{"sample_id": 340, "db_id": "retail_complains", "final": {"question": "Compute the average time in minute for each age group", "sql": "SELECT CAST(SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END) AS teenagerAverageMins, CAST(SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adultAverageMins , CAST(SUM(CASE WHEN T1.age > 65 THEN 60 * strftime('%H', ser_time) + strftime('%M', ser_time) + strftime('%S', ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elderAverageMins FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\"", "source_tables": ["client", "callcenterlogs"]}, "evidence": "teenager refers to 13 < age < = 19; adult refers to 19 < age < = 65; elder refers to age < = 65; highest average time per complaint = max(divide(sum(ser_time), count(ser_time)))"}
{"sample_id": 244, "db_id": "retail_complains", "final": {"question": "How many complaints have the client Diesel Galloway filed?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'", "source_tables": ["client", "events"]}, "evidence": ""}
{"sample_id": 301, "db_id": "retail_complains", "final": {"question": "How many clients under the age of 35 gave Eagle National Mortgage 1 star?", "sql": "SELECT COUNT(T2.age) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle National Mortgage' AND T1.Stars = 1 AND T2.age < 35", "source_tables": ["client", "reviews"]}, "evidence": "age < 35; Eagle National Mortgage refers to Product = 'Eagle National Mortgage';"}
{"sample_id": 397, "db_id": "retail_complains", "final": {"question": "Among the female clients that age between 20 to 40, list the date when their complaints were received.", "sql": "SELECT DISTINCT T3.\"Date received\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID INNER JOIN callcenterlogs AS T3 ON T2.\"Complaint ID\" = T3.\"Complaint ID\" WHERE T1.age BETWEEN 20 AND 40 AND T1.sex = 'Female'", "source_tables": ["client", "callcenterlogs", "events"]}, "evidence": "female refers to sex = 'Female'"}
{"sample_id": 330, "db_id": "retail_complains", "final": {"question": "List the full names of all clients who live in the Pacific division.", "sql": "SELECT T2.first, T2.middle, T2.last FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.division = 'Pacific'", "source_tables": ["client", "district"]}, "evidence": "full name refers to first, last"}
{"sample_id": 304, "db_id": "retail_complains", "final": {"question": "What is the name of the state in which there have been the largest number of complaints with priority 0?", "sql": "SELECT T2.state FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.\"rand client\" = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T1.priority = 0 GROUP BY T2.state ORDER BY COUNT(T2.state) DESC LIMIT 1", "source_tables": ["client", "callcenterlogs", "state", "district"]}, "evidence": "largest number of complaints refers to MAX(COUNT(\"Complaint ID\") WHERE priority = 0);"}
{"sample_id": 318, "db_id": "retail_complains", "final": {"question": "Which region does Noah Thompson live in?", "sql": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Noah' AND T1.last = 'Thompson'", "source_tables": ["client", "district"]}, "evidence": ""}
{"sample_id": 249, "db_id": "retail_complains", "final": {"question": "For how long did the complaint filed on 2017/3/27 by Rachel Hicks last?", "sql": "SELECT T2.ser_time FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T1.first = 'Rachel' AND T1.last = 'Hicks' AND T2.\"Date received\" = '2017-03-27'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "how long did the complaint filed last refers to ser_time; on 2017/3/27 refers to \"Date received\" = '2017-03-27';"}
{"sample_id": 317, "db_id": "retail_complains", "final": {"question": "Which state has the highest number of clients who gave a 5-star review?", "sql": "SELECT T2.state_abbrev FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 GROUP BY T2.state_abbrev ORDER BY COUNT(T2.state_abbrev) DESC LIMIT 1", "source_tables": ["reviews", "district"]}, "evidence": "highest number of clients refers to MAX(COUNT(client_id)); 5-star review refers to stars = 5;"}
{"sample_id": 375, "db_id": "retail_complains", "final": {"question": "How many female clients are there older than 30?", "sql": "SELECT COUNT(sex) FROM client WHERE sex = 'Female' AND age > 30", "source_tables": ["client"]}, "evidence": "female refers to sex = 'Female'; older than 30 refers to age > 30"}
{"sample_id": 360, "db_id": "retail_complains", "final": {"question": "Write down the date received of complaints sent via Fax.", "sql": "SELECT T1.\"Date received\" FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.\"Submitted via\" = 'Fax'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "sent via Fax refers to Submitted via = 'Fax'"}
{"sample_id": 270, "db_id": "retail_complains", "final": {"question": "For all the complaint callers on 2017/3/27, what percentage of the clients are females?", "sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Date received\" = '2017-03-27'", "source_tables": ["client", "events"]}, "evidence": "on 2017/3/27 refers to \"Date received\" = '2017-03-27'; percentage = MULTIPLY(DIVIDE(SUM(sex = 'Female' ), COUNT(client_id)), 1.0); females refers to sex = 'Female';"}
{"sample_id": 313, "db_id": "retail_complains", "final": {"question": "What is the average number of stars given by Oregon clients in their reviews?", "sql": "SELECT CAST(SUM(T3.Stars) AS REAL) / COUNT(T3.Stars) AS average FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN reviews AS T3 ON T2.district_id = T3.district_id WHERE T1.State = 'Oregon'", "source_tables": ["state", "reviews", "district"]}, "evidence": "average = DIVIDE(SUM(State = 'Oregon'), COUNT(district_id)); Oregon refers to state = 'Oregon';"}
{"sample_id": 320, "db_id": "retail_complains", "final": {"question": "What are the products that people who were born after 2005 complain about?", "sql": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year > 2005", "source_tables": ["client", "events"]}, "evidence": "year > 2005;"}
{"sample_id": 296, "db_id": "retail_complains", "final": {"question": "In which region have the most 1-star reviews been done?", "sql": "SELECT T3.Region FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T1.Stars = 1 GROUP BY T3.Region ORDER BY COUNT(T3.Region) DESC LIMIT 1", "source_tables": ["state", "reviews", "district"]}, "evidence": "most 1-star reviews refers to MAX(COUNT(stars = 1));"}
{"sample_id": 294, "db_id": "retail_complains", "final": {"question": "How many complaints are not in process with an agent?", "sql": "SELECT COUNT(outcome) FROM callcenterlogs WHERE outcome != 'AGENT'", "source_tables": ["callcenterlogs"]}, "evidence": "not in process with an agent refers to outcome ! = 'AGENT';"}
{"sample_id": 369, "db_id": "retail_complains", "final": {"question": "Give me the full birthdate, email and phone number of the youngest client in Indianapolis .", "sql": "SELECT T1.year, T1.month, T1.day, T1.email, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' ORDER BY T1.year DESC, T1.month DESC, T1.day DESC LIMIT 1", "source_tables": ["client", "district"]}, "evidence": "full birthdate = year, month, day; youngest refers to max(year, month, day); in Indianapolis refers to city = 'Indianapolis'"}
{"sample_id": 254, "db_id": "retail_complains", "final": {"question": "Which division is Diesel Galloway in?", "sql": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.first = 'Diesel' AND T1.last = 'Galloway'", "source_tables": ["client", "district"]}, "evidence": ""}
{"sample_id": 344, "db_id": "retail_complains", "final": {"question": "What is the full name of client whose email address is emily.garcia43@outlook.com?", "sql": "SELECT first, middle, last FROM client WHERE email = 'emily.garcia43@outlook.com'", "source_tables": ["client"]}, "evidence": "full name refers to first middle last"}
{"sample_id": 327, "db_id": "retail_complains", "final": {"question": "How many times does the consumer have no dispute over a non-timely response from the company?", "sql": "SELECT COUNT(\"Timely response?\") FROM events WHERE \"Timely response?\" = 'No' AND \"Consumer disputed?\" = 'No'", "source_tables": ["events"]}, "evidence": "no dispute refers to Consumer disputed? = 'No'; non-timely response refers to Timely response? = 'No'"}
{"sample_id": 251, "db_id": "retail_complains", "final": {"question": "Please list the full names of all the clients whose complaints are still in progress.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Company response to consumer\" = 'In progress'", "source_tables": ["client", "events"]}, "evidence": "full name = first, middle, last; complaints are still in progress refers to \"Company response to consumer\" = 'In progress';"}
{"sample_id": 376, "db_id": "retail_complains", "final": {"question": "Please list all first and last names of clients who live in New York city.", "sql": "SELECT first, last FROM client WHERE city = 'New York City'", "source_tables": ["client"]}, "evidence": "New York City refers to city = 'New York City'"}
{"sample_id": 255, "db_id": "retail_complains", "final": {"question": "Please list the full names of all the male clients in the Pacific division.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Pacific' AND T1.sex = 'Male'", "source_tables": ["client", "district"]}, "evidence": "full names = first, middle, last; male refers to sex = 'Male';"}
{"sample_id": 337, "db_id": "retail_complains", "final": {"question": "What is the name of the state that the client with the email \"skylar.ramirez@gmail.com\" lives in?", "sql": "SELECT T3.state FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T3.email = 'skylar.ramirez@gmail.com'", "source_tables": ["state", "client", "district"]}, "evidence": ""}
{"sample_id": 240, "db_id": "retail_complains", "final": {"question": "On which day was the most verbose complaint received?", "sql": "SELECT \"Date received\" FROM callcenterlogs WHERE ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )", "source_tables": ["callcenterlogs"]}, "evidence": "day received refers to \"Date received\"; most verbose complaint refers to MAX(ser_time);"}
{"sample_id": 374, "db_id": "retail_complains", "final": {"question": "What is the social number of the client who has the longest delay in his/her complaint? Calculate the days of delay and state the company's response to the consumer.", "sql": "SELECT T1.social , 365 * (strftime('%Y', T2.\"Date sent to company\") - strftime('%Y', T2.\"Date received\")) + 30 * (strftime('%M', T2.\"Date sent to company\") - strftime('%M', T2.\"Date received\")) + (strftime('%d', T2.\"Date sent to company\") - strftime('%d', T2.\"Date received\")), T2.\"Company response to consumer\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID ORDER BY 365 * (strftime('%Y', T2.\"Date sent to company\") - strftime('%Y', T2.\"Date received\")) + 30 * (strftime('%M', T2.\"Date sent to company\") - strftime('%M', T2.\"Date received\")) + (strftime('%d', T2.\"Date sent to company\") - strftime('%d', T2.\"Date received\")) DESC LIMIT 1", "source_tables": ["client", "events"]}, "evidence": "social number refers to social; longest delay = max(subtract(Date sent to company, Date received)); days of delay = subtract(Date sent to company, Date received); company's response refers to 'Company response to consumer'"}
{"sample_id": 275, "db_id": "retail_complains", "final": {"question": "List all the states in the South region.", "sql": "SELECT state FROM state WHERE Region = 'South'", "source_tables": ["state"]}, "evidence": ""}
{"sample_id": 350, "db_id": "retail_complains", "final": {"question": "What are the complaint id of client who were born in 1931?", "sql": "SELECT T2.\"Complaint ID\" FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T1.year = 1931", "source_tables": ["client", "callcenterlogs"]}, "evidence": "in 1931 refers to year = 1931"}
{"sample_id": 252, "db_id": "retail_complains", "final": {"question": "Among the clients who did receive a timely response for their complaint, how many of them are from New York?", "sql": "SELECT COUNT(T1.city) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Timely response?\" = 'No' AND T1.city = 'New York City'", "source_tables": ["client", "events"]}, "evidence": "did not receive a timely response refers to \"Timely response?\" = 'No'; New York refers to city = 'New York';"}
{"sample_id": 324, "db_id": "retail_complains", "final": {"question": "What is the percentage of male clients complaining about their credit cards?", "sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'", "source_tables": ["client", "events"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(sex = 'Male'), COUNT(client_id)), 1.0); male refers to sex = 'Male'; credit cards refers to Product = 'Credit card';"}
{"sample_id": 357, "db_id": "retail_complains", "final": {"question": "Which product received the most complaints from elder clients?", "sql": "SELECT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.age > 65 ORDER BY T1.client_id DESC LIMIT 1", "source_tables": ["client", "events"]}, "evidence": "most complaints refers to max(client_id); elder client refers to age > 65"}
{"sample_id": 373, "db_id": "retail_complains", "final": {"question": "List the full names and phone numbers of clients that were from the Pacific.", "sql": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Pacific'", "source_tables": ["client", "district"]}, "evidence": "full name refers to first, middle, last; the Pacific refers to division = 'Pacific'"}
{"sample_id": 309, "db_id": "retail_complains", "final": {"question": "What is the full address of the customers who, having received a timely response from the company, have dispute about that response?", "sql": "SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Timely response?\" = 'Yes' AND T2.\"Consumer disputed?\" = 'Yes'", "source_tables": ["client", "events"]}, "evidence": "full address = address_1, address_2; received a timely response refers to Timely response? = 'Yes'; have dispute refers to \"Consumer disputed?\" = 'Yes';"}
{"sample_id": 295, "db_id": "retail_complains", "final": {"question": "How many Credit Card complaints did Sharon handle?", "sql": "SELECT COUNT(T1.\"Complaint ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.Product = 'Credit card' AND T1.server = 'SHARON'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "Credit Card refers to Product = 'Credit Card'; Sharon refers to server = 'SHARON';"}
{"sample_id": 268, "db_id": "retail_complains", "final": {"question": "For the client who made the complaint call \"CR0217298\", what was his/her birthday\uff1f", "sql": "SELECT T1.month, T1.day FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Complaint ID\" = 'CR0217298'", "source_tables": ["client", "events"]}, "evidence": "complaint call refers to Complaint ID; birthday = year, month, day;"}
{"sample_id": 401, "db_id": "retail_complains", "final": {"question": "Among the reviews from midwest region, what are the products that received 1 star?", "sql": "SELECT DISTINCT T3.Product FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN reviews AS T3 ON T2.district_id = T3.district_id WHERE T1.Region = 'Midwest' AND T3.Stars = 1", "source_tables": ["state", "reviews", "district"]}, "evidence": "1 star refers to Stars = 1"}
{"sample_id": 328, "db_id": "retail_complains", "final": {"question": "How many of the complaints are longer than 15 minutes?", "sql": "SELECT COUNT(ser_time) FROM callcenterlogs WHERE strftime('%M', ser_time) > '15'", "source_tables": ["callcenterlogs"]}, "evidence": "longer than 15 minutes refers to ser_time > '00:15:00'"}
{"sample_id": 282, "db_id": "retail_complains", "final": {"question": "Among the clients born between 1980 and 2000, list the name of male clients who complained through referral.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.year BETWEEN 1980 AND 2000 AND T1.sex = 'Male' AND T2.\"Submitted via\" = 'Referral'", "source_tables": ["client", "events"]}, "evidence": "born between 1980 and 2000 refers to year BETWEEN 1980 AND 2000; name = first, middle, last; male refers to sex = 'Male'; complained through refers to \"Submitted via\";"}
{"sample_id": 382, "db_id": "retail_complains", "final": {"question": "How many customers in the Northeast use Microsoft email?", "sql": "SELECT COUNT(T1.email) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast' AND T1.email LIKE '%@outlook.com'", "source_tables": ["client", "state", "district"]}, "evidence": "the Northeast refers to Region = 'Northeast'; Microsoft email refers to email like '%@outlook.com'"}
{"sample_id": 310, "db_id": "retail_complains", "final": {"question": "How many complaints from female clients born in the year 2000 were not sent through the web?", "sql": "SELECT COUNT(T2.\"Submitted via\") FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T1.year = 2000 AND T2.\"Submitted via\" != 'Web'", "source_tables": ["client", "events"]}, "evidence": "female refers to sex = 'Female'; sent through refers to \"Submitted via\"; not sent through web refers to \"Submitted via\" ! = 'Web';\n"}
{"sample_id": 279, "db_id": "retail_complains", "final": {"question": "Find and list the names of districts which has below-average stars for Eagle Capital.", "sql": "SELECT T2.division FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle Capital' AND T1.Stars > ( SELECT AVG(Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id )", "source_tables": ["reviews", "district"]}, "evidence": "below average = AVG(stars) < Stars; Eagle Capital refers to Product = 'Eagle Capital';"}
{"sample_id": 322, "db_id": "retail_complains", "final": {"question": "What was the issue that the client with the longest server time faced?", "sql": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T1.ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs )", "source_tables": ["callcenterlogs", "events"]}, "evidence": "longest server time refers to MAX(ser_time);"}
{"sample_id": 265, "db_id": "retail_complains", "final": {"question": "What was the review context from Jacksonville on 2017/7/22?", "sql": "SELECT T1.Reviews FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Jacksonville' AND T1.Date = '2017-07-22'", "source_tables": ["reviews", "district"]}, "evidence": "Jacksonville refers to city = 'Jacksonville'; on 2017/7/22 refers to Date = '2017-07-22';"}
{"sample_id": 365, "db_id": "retail_complains", "final": {"question": "Write the complaint ID, call ID, and final phone number of complaints through AVIDAN server from 1/1/2014 to 12/30/2014.", "sql": "SELECT \"Complaint ID\", call_id, phonefinal FROM callcenterlogs WHERE strftime('%Y', \"Date received\") = '2014' AND server = 'AVIDAN'", "source_tables": ["callcenterlogs"]}, "evidence": "final phone number refers to phonefinal; from 1/1/2014 to 12/30/2014 refers to Date received between '2014-01-01' and '2014-12-30'"}
{"sample_id": 395, "db_id": "retail_complains", "final": {"question": "List date of the review of the Eagle Capital from Indianapolis, Indiana.", "sql": "SELECT T2.Date FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Product = 'Eagle Capital' AND T1.city = 'Indianapolis' AND T1.state_abbrev = 'IN'", "source_tables": ["reviews", "district"]}, "evidence": "Eagle Capital refers to Product = 'Eagle Capital'; Indianapolis refers to city = 'Indianapolis'; Indiana refers to state_abbrev = 'IN'"}
{"sample_id": 405, "db_id": "retail_complains", "final": {"question": "In complaints received in 2014, how many of them were submitted via call?", "sql": "SELECT COUNT(T2.\"Complaint ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.\"Submitted via\" = 'Phone' AND strftime('%Y', T1.\"Date received\") = '2014'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "in 2014 refers to Date received LIKE '2014%'; submitted via call refers to Submitted via = 'Phone'"}
{"sample_id": 406, "db_id": "retail_complains", "final": {"question": "List the product and its issues of the complains of clients with age greater than the 60% of average age of all clients.", "sql": "SELECT DISTINCT T2.Product, T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.age * 100 > ( SELECT AVG(age) * 60 FROM client )", "source_tables": ["client", "events"]}, "evidence": "age greater than the 60% of average age refers to age > multiply(avg(age) , 0.6)"}
{"sample_id": 262, "db_id": "retail_complains", "final": {"question": "Did Ms. Lyric Emely Taylor provide the consent for result of the complaint call on 2016/5/20?", "sql": "SELECT CASE WHEN T2.\"Consumer consent provided?\" IN (NULL, 'N/A', '') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Lyric' AND T1.middle = 'Emely' AND T1.last = 'Taylor' AND T1.sex = 'Female' AND T2.\"Date received\" = '2016-05-20'", "source_tables": ["client", "events"]}, "evidence": "Ms refers to sex = 'Female'; \"Consumer consent provided?\" in (null, 'N/A', 'Empty') means that the company didn't get the permission of consent; \"Consumer consent provided?\" not in (null, 'N/A', 'Empty') means the customers provide the consent; on 2016/5/20 refers to Date received = '2016-05-20';"}
{"sample_id": 342, "db_id": "retail_complains", "final": {"question": "Calculate the percentage of male clients from Indianapolis City.", "sql": "SELECT CAST(SUM(CASE WHEN sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(client_id) FROM client WHERE city = 'Indianapolis'", "source_tables": ["client"]}, "evidence": "male refers to sex = 'Male'; Indianapolis City refers to city = 'Indianapolis'; percentage = divide(count(client_id where sex = 'Male' and city = 'Indianapolis') , count(client_id where city = 'Indianapolis')) * 100%"}
{"sample_id": 286, "db_id": "retail_complains", "final": {"question": "Find the number of service members who complained in Syracuse.", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Servicemember' AND T1.city = 'Syracuse'", "source_tables": ["client", "events"]}, "evidence": "service members refers to client.client_id; Syracuse refers to city = 'Syracuse';"}
{"sample_id": 311, "db_id": "retail_complains", "final": {"question": "List all the complaints narratives made by the customer named Brenda and last name Mayer.", "sql": "SELECT T2.\"Consumer complaint narrative\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Brenda' AND T1.last = 'Mayer'", "source_tables": ["client", "events"]}, "evidence": "complaints narratives refers to \"Consumer complaint narrative\";"}
{"sample_id": 289, "db_id": "retail_complains", "final": {"question": "List by their ID number the 3 longest complaints.", "sql": "SELECT \"Complaint ID\" FROM callcenterlogs ORDER BY ser_time DESC LIMIT 3", "source_tables": ["callcenterlogs"]}, "evidence": "ID number refers to \"Complaint ID\"; longest complaints refers to MAX(ser_time);"}
{"sample_id": 316, "db_id": "retail_complains", "final": {"question": "How many clients who live in Kansas City provided a 1-star review?", "sql": "SELECT COUNT(T1.Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Kansas City' AND T1.Stars = 1", "source_tables": ["reviews", "district"]}, "evidence": "1-star review refers stars = 1;"}
{"sample_id": 345, "db_id": "retail_complains", "final": {"question": "What is the first name of clients who have the highest priority?", "sql": "SELECT T1.first FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.priority = ( SELECT MAX(priority) FROM callcenterlogs )", "source_tables": ["client", "callcenterlogs"]}, "evidence": "first name refers to first; highest priority refers to priority = 2"}
{"sample_id": 297, "db_id": "retail_complains", "final": {"question": "In what years were the clients who demanded more problems with Certificate of deposit born?", "sql": "SELECT T1.year FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Sub-product\" = '(CD) Certificate of deposit' GROUP BY T1.year ORDER BY COUNT(T1.year) DESC LIMIT 1", "source_tables": ["client", "events"]}, "evidence": "more problems with Certificate refers to MAX(COUNT(\"Sub-product\" = '(CD) Certificate of deposit'));"}
{"sample_id": 384, "db_id": "retail_complains", "final": {"question": "What is the percentage of complaints about the late fee issue whose priority is 2 in 2017?", "sql": "SELECT CAST(SUM(CASE WHEN T1.priority = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.\"Complaint ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE strftime('%Y', T1.\"Date received\") = '2017'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "percentage = divide(count(Complaint ID where priority = 2) , count(Complaint ID)) * 100%; in 2017 refers to year(Date received) = 2017"}
{"sample_id": 264, "db_id": "retail_complains", "final": {"question": "Which district did the review on 2018/9/11 come from? Give the name of the city.", "sql": "SELECT T2.district_id, T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Date = '2018-09-11'", "source_tables": ["reviews", "district"]}, "evidence": "on 2018/9/11 refers to Date = '2017-07-22';"}
{"sample_id": 257, "db_id": "retail_complains", "final": {"question": "What is the percentage of the increase of complaints filed by the clients from New York from the year 2016 to the year 2017?", "sql": "SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', T2.\"Date received\") = '2017' THEN 1 ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.\"Date received\") = '2016' THEN 1 ELSE 0 END)) / SUM(CASE WHEN strftime('%Y', T2.\"Date received\") = '2016' THEN 1 ELSE 0 END) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City'", "source_tables": ["client", "events"]}, "evidence": "percentage of increase = MULTIPLY(DIVIDE(SUBTRACT(SUM(year(\"Date received\") = 2017), SUM(year(\"Date received\") = 2016)), SUM(year(\"Date received\") = 2016)), 1.0); New York refers to city = 'New York'; year(\"Date received\") BETWEEN 2016 AND 2017;"}
{"sample_id": 407, "db_id": "retail_complains", "final": {"question": "In reviews of product with 5 stars, what is the percentage of the reviews coming from the division of East North Central?", "sql": "SELECT CAST(SUM(CASE WHEN T1.division = 'East North Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.division) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T2.Stars = 5", "source_tables": ["reviews", "district"]}, "evidence": "5 stars refers to Stars = 5; percentage = divide(count(division = 'East North Central', count(division)) * 100%"}
{"sample_id": 347, "db_id": "retail_complains", "final": {"question": "Among the elderlies, state the last name of whose complaint is handled in server YIFAT?", "sql": "SELECT T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T1.age > 65 AND T2.server = 'YIFAT'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "elder refers to age < = 65; last name refers to last"}
{"sample_id": 271, "db_id": "retail_complains", "final": {"question": "What is the percentage of the complaint calls from Mr Mason Javen Lopez has got the consent provided by the customer?", "sql": "SELECT CAST(SUM(CASE WHEN T2.\"Consumer consent provided?\" = 'Consent provided' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.\"Consumer consent provided?\") FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.first = 'Mason' AND T1.middle = 'Javen' AND T1.last = 'Lopez'", "source_tables": ["client", "events"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(\"Consumer consent provided?\" = 'Consent provided'), COUNT(client_id)), 1.0); Mr refers to sex = 'Male'; consent provided by the customer refers to \"Consumer consent provided?\" = 'Consent provided';"}
{"sample_id": 302, "db_id": "retail_complains", "final": {"question": "How many male clients born in the year 1977 were given priority 0 in their complaints?", "sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T1.sex = 'Male' AND T2.priority = 0 AND T1.year = 1997", "source_tables": ["client", "callcenterlogs"]}, "evidence": "male refers to sex = 'Male';"}
{"sample_id": 389, "db_id": "retail_complains", "final": {"question": "From 2012 to 2015, how many complaints were submitted via email from female clients?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.\"Date received\") BETWEEN '2012' AND '2015' AND T2.\"Submitted via\" = 'Email' AND T1.sex = 'Male'", "source_tables": ["client", "events"]}, "evidence": "from 2012 to 2015 refers to Date received BETWEEN 2012 AND 2015; submitted via email refers to Submitted via = 'Email'; female refers to sex = 'Female'"}
{"sample_id": 292, "db_id": "retail_complains", "final": {"question": "List by their ID the complaints received by the company on 25/09/2014 that took the longest.", "sql": "SELECT \"Complaint ID\" FROM events WHERE strftime('%J', \"Date sent to company\") - strftime('%J', \"Date received\") = ( SELECT MAX(strftime('%J', \"Date sent to company\") - strftime('%J', \"Date received\")) FROM events WHERE \"Date sent to company\" = '2014-09-25' ) AND \"Date sent to company\" = '2014-09-25'", "source_tables": ["events"]}, "evidence": "ID of the complaints refers to \"Complaint ID\"; on 25/09/2014 refers to \"Date sent to company\" = '2014-09-25'; took the longest = MAX(SUBTRACT(\"Date sent to company\", \"Date received\"));"}
{"sample_id": 362, "db_id": "retail_complains", "final": {"question": "What is the email address of clients who submitted their complaints via postal mail?", "sql": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Submitted via\" = 'Postal mail'", "source_tables": ["client", "events"]}, "evidence": "via postal mail refers to Submitted via = 'Postal mail'"}
{"sample_id": 263, "db_id": "retail_complains", "final": {"question": "How many days delay for the complaint call from Mr. Brantley Julian Stanley on 2012/5/18?", "sql": "SELECT 365 * (strftime('%Y', T2.\"Date sent to company\") - strftime('%Y', T2.\"Date received\")) + 30 * (strftime('%M', T2.\"Date sent to company\") - strftime('%M', T2.\"Date received\")) + (strftime('%d', T2.\"Date sent to company\") - strftime('%d', T2.\"Date received\")) AS days FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Date received\" = '2012-05-18' AND T1.sex = 'Male' AND T1.first = 'Brantley' AND T1.middle = 'Julian' AND T1.last = 'Stanley'", "source_tables": ["client", "events"]}, "evidence": "days delay for the complaint = SUBTRACT(\"date sent to company\", \"Date received\"); Mr refers to sex = 'Male'; on 2012/5/18 refers to \"Date received\" = '2012-05-18';"}
{"sample_id": 392, "db_id": "retail_complains", "final": {"question": "In 2014, what is the percentage of complaints from consumers in Houston that the delay was over 5 days?", "sql": "SELECT CAST((SUM(CASE WHEN strftime('%J', T2.\"Date sent to company\") - strftime('%J', T2.\"Date received\") > 5 THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Houston' AND strftime('%Y', T2.\"Date received\") = '2014'", "source_tables": ["client", "events"]}, "evidence": "in 2014 refers to Date received LIKE'2014%'; Houston refers to city = 'Houston'; delay over 5 days refers to subtract(Date sent to company, Date received) > 5; percentage = divide(count(Complaint ID where subtract(Date sent to company , Date received) > 5) , count(Complaint ID)) * 100%"}
{"sample_id": 245, "db_id": "retail_complains", "final": {"question": "What is the detailed product of the complaint filed by Diesel Galloway on 2014/7/3?", "sql": "SELECT T2.\"Sub-product\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Diesel' AND T1.last = 'Galloway' AND T2.\"Date received\" = '2014-07-03'", "source_tables": ["client", "events"]}, "evidence": "detailed product refers to \"sub-product\"; on 2014/7/3 refers to \"Date received\" = '2014-07-03';"}
{"sample_id": 285, "db_id": "retail_complains", "final": {"question": "What percentage of consumers from Houston disputed complaints?", "sql": "SELECT CAST(SUM(CASE WHEN T2.\"Consumer disputed?\" = 'Yes' AND T1.city = 'Houston' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID", "source_tables": ["client", "events"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(\"Consumer disputed?\" = 'Yes' AND city = 'Houston'), COUNT(client_id)), 1.0); Houston refers to city = 'Houston';"}
{"sample_id": 333, "db_id": "retail_complains", "final": {"question": "What is the address of the client who made a complaint via postal mail on March 14, 2012?", "sql": "SELECT T1.address_1, T1.address_2 FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Date received\" = '2012-03-14' AND T2.\"Submitted via\" = 'Postal mail'", "source_tables": ["client", "events"]}, "evidence": "address refers to address_1, address_2; via postal mail refers to Submitted via = 'Postal mail'; March 14 2012 refers to Date received = '2012-03-14'"}
{"sample_id": 283, "db_id": "retail_complains", "final": {"question": "What is the medium through which most complaints are registered in Florida?", "sql": "SELECT T3.\"Submitted via\" FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.\"rand client\" = T2.client_id INNER JOIN events AS T3 ON T1.\"Complaint ID\" = T3.\"Complaint ID\" WHERE T2.state = 'FL' GROUP BY T1.\"Complaint ID\" ORDER BY COUNT(T1.\"Complaint ID\") DESC LIMIT 1", "source_tables": ["client", "callcenterlogs", "events"]}, "evidence": "medium refers to \"Submitted via\"; most complaints refers to MAX(Complaint ID); Florida refers to state = 'florida';"}
{"sample_id": 348, "db_id": "retail_complains", "final": {"question": "How many clients who live in New York City have the complaint outcome as \"AGENT\"?", "sql": "SELECT COUNT(T2.\"rand client\") FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T1.city = 'New York City' AND T2.outcome = 'AGENT'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "New York City refers to city = 'New York City'"}
{"sample_id": 288, "db_id": "retail_complains", "final": {"question": "Calculate the difference in the average age of elderly and middle-aged clients in the Northeast region.", "sql": "SELECT (CAST(SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age BETWEEN 35 AND 55 THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.age > 65 THEN T1.age ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END)) AS difference FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Northeast'", "source_tables": ["client", "state", "district"]}, "evidence": "difference in the average = SUBTRACT(AVG(age BETWEEN 35 AND 55), AVG( age > 65)); elderly refers to age > 65; middle-aged refers to age BETWEEN 35 AND 55;"}
{"sample_id": 331, "db_id": "retail_complains", "final": {"question": "What is the social number of the person who made the most complaints?", "sql": "SELECT T1.social FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID GROUP BY T1.client_id ORDER BY COUNT(T1.client_id) DESC LIMIT 1", "source_tables": ["client", "events"]}, "evidence": "social number refers to social; most complaints refers to max(count(event.Client_ID))"}
{"sample_id": 363, "db_id": "retail_complains", "final": {"question": "Calculate the average age of clients whose response is \"Closed with relief\".", "sql": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Company response to consumer\" = 'Closed with relief'", "source_tables": ["client", "events"]}, "evidence": "average age = avg(age where Company response to consumer = 'Closed with relief'); response \"Closed with relief\" refers to Company response to consumer = 'Closed with relief'"}
{"sample_id": 243, "db_id": "retail_complains", "final": {"question": "Please list the full names of all the male clients born after the year 1990.", "sql": "SELECT first, middle, last FROM client WHERE year > 1990", "source_tables": ["client"]}, "evidence": "full names = first, middle, last; male refers to sex = 'Male'; year > 1990;"}
{"sample_id": 258, "db_id": "retail_complains", "final": {"question": "What was the serve time for the complaint call from client \"C00007127\" on 2017/2/22?", "sql": "SELECT T1.ser_time FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.Client_ID = 'C00007127' AND T1.\"Date received\" = '2017-02-22'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "serve time refers to ser_time; longer ser_time means more verbose or longer complaint; on 2017/2/22 refers to \"Date received\" = '2017-02-22';"}
{"sample_id": 346, "db_id": "retail_complains", "final": {"question": "List down the email of client whose complaint is type \"PS\".", "sql": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.type = 'PS'", "source_tables": ["client", "callcenterlogs"]}, "evidence": ""}
{"sample_id": 361, "db_id": "retail_complains", "final": {"question": "What is the full name of clients who have issue about balance transfer?", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Balance transfer'", "source_tables": ["client", "events"]}, "evidence": "full name refers to first, middle, last; issue about balance transfer refers to Issue = 'Balance transfer'"}
{"sample_id": 308, "db_id": "retail_complains", "final": {"question": "How many reviews by people between 30 and 50 years include the word 'great'?", "sql": "SELECT COUNT(T1.Reviews) FROM reviews AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.age BETWEEN 30 AND 50 AND T1.Reviews LIKE '%great%'", "source_tables": ["client", "reviews"]}, "evidence": "between 30 and 50 years refers to age BETWEEN 30 AND 50; include the word great refers to Review like '%Great%';"}
{"sample_id": 303, "db_id": "retail_complains", "final": {"question": "List by name all customers who provided consent for the tag Older American.", "sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Tags = 'Older American' AND T2.\"Consumer consent provided?\" != 'N/A' AND T2.\"Consumer consent provided?\" IS NOT NULL AND T2.\"Consumer consent provided?\" != ''", "source_tables": ["client", "events"]}, "evidence": "name refers to first; provided consent refers to \"Consumer consent provided?\" not in ('N/A', null, 'empty');"}
{"sample_id": 267, "db_id": "retail_complains", "final": {"question": "How many stars did \"Eagle Capital\" received from Little Rock on 2013/4/4?", "sql": "SELECT COUNT(T1.Stars) FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Product = 'Eagle Capital' AND T2.city = 'Little Rock' AND T1.Date = '2013-04-04'", "source_tables": ["reviews", "district"]}, "evidence": "Eagle Capital refers to Product = 'Eagle Capital'; Little Rock is a city; on 2013/4/4 refers to Date = '2013-04-04';"}
{"sample_id": 341, "db_id": "retail_complains", "final": {"question": "What percentage of complaints are from the elderly?", "sql": "SELECT CAST(SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.age) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID", "source_tables": ["client", "events"]}, "evidence": "elder refers to age < = 65; percentage refers to divide(sum(age < = 65) , count(client_id)) * 100%"}
{"sample_id": 354, "db_id": "retail_complains", "final": {"question": "Write down the call id of clients whose first name start with alphabet \"B\".", "sql": "SELECT T2.call_id FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T1.first LIKE 'B%'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "first name start with alphabet \"B\" refers to first like 'B%'"}
{"sample_id": 336, "db_id": "retail_complains", "final": {"question": "List all the issues of the complaints made by Kaitlyn Eliza Elliott.", "sql": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Kaitlyn' AND T1.middle = 'Eliza' AND T1.last = 'Elliott'", "source_tables": ["client", "events"]}, "evidence": ""}
{"sample_id": 266, "db_id": "retail_complains", "final": {"question": "Which product received a review from Indianapolis on 2016/10/7?", "sql": "SELECT T1.Product FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.city = 'Indianapolis' AND T1.Date = '2016-10-07'", "source_tables": ["reviews", "district"]}, "evidence": "Indianapolis refers to state = 'Indianapolis'; on 2016/10/7 refers to Date = '2013-04-04';"}
{"sample_id": 371, "db_id": "retail_complains", "final": {"question": "What is the longest server time when the call is about the issue of arbitration?", "sql": "SELECT MAX(T1.ser_time) FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.issue = 'Arbitration'", "source_tables": ["callcenterlogs", "events"]}, "evidence": "longest server time refers to max(ser_time)"}
{"sample_id": 364, "db_id": "retail_complains", "final": {"question": "What is the average age of clients whose complaint type is \"TT\"?", "sql": "SELECT AVG(T1.age) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.type = 'TT'", "source_tables": ["client", "callcenterlogs"]}, "evidence": "average age = avg(age where type = 'TT')"}
{"sample_id": 290, "db_id": "retail_complains", "final": {"question": "How many clients have an email account other than gmail.com?", "sql": "SELECT COUNT(email) FROM client WHERE email NOT LIKE '%@gmail.com'", "source_tables": ["client"]}, "evidence": "email account other than gmail.com refers to email not like '%@gmail.com';"}
{"sample_id": 564, "db_id": "movies_4", "final": {"question": "List the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\".", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T2.job = 'Producer'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "List the names refers to person_name; producers refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: The Curse of the Black Pearl'"}
{"sample_id": 484, "db_id": "movies_4", "final": {"question": "What percentage of movies that came from Japan belong in the 'animation' genre?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Animation' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'Japan'", "source_tables": ["movie", "production_country", "movie_genres", "genre", "country"]}, "evidence": "from Japan refers to country_name = 'Japan'; in the 'animation' genre refers to genre_name = 'animation'; percentage = divide(sum(movie_id) when genre_name = 'animation', count(movie_id)) as percentage"}
{"sample_id": 523, "db_id": "movies_4", "final": {"question": "How many movies were produced by \"Eddie Murphy Productions\"?", "sql": "SELECT COUNT(T1.movie_id) FROM movie_company AS T1 INNER JOIN production_company AS T2 ON T1.company_id = T2.company_id WHERE T2.company_name = 'Eddie Murphy Productions'", "source_tables": ["movie_company", "production_company"]}, "evidence": "produced by \"Eddie Murphy Productions\" refers to company_name = 'Eddie Murphy Productions'"}
{"sample_id": 517, "db_id": "movies_4", "final": {"question": "What is the most common first name?", "sql": "SELECT person_name FROM person GROUP BY person_name ORDER BY COUNT(person_name) DESC LIMIT 1", "source_tables": ["person"]}, "evidence": "most common first name refers to max(count(person_name))"}
{"sample_id": 494, "db_id": "movies_4", "final": {"question": "State the genre of the movie title with a runtime of only 14 minutes.", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.runtime = 14", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "genre refers to genre_name; runtime of only 14 minutes refers to runtime = 14"}
{"sample_id": 532, "db_id": "movies_4", "final": {"question": "List the film with the highest budget in each genre.", "sql": "SELECT T3.genre_name, MAX(T1.budget) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id GROUP BY T3.genre_name", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "highest budget refers to max(budget); each genre refers to genre_name; film also means movie; list the film refers to title of movie"}
{"sample_id": 502, "db_id": "movies_4", "final": {"question": "Among the zero-budget movie titles, which one has made the highest revenue?", "sql": "SELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "zero-budget refers to budget = 0; highest revenue refers to max(revenue)"}
{"sample_id": 509, "db_id": "movies_4", "final": {"question": "Find out the language ID of the movie with the highest popularity.", "sql": "SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.popularity DESC LIMIT 1", "source_tables": ["movie", "movie_languages"]}, "evidence": "highest popularity refers to max(popularity)"}
{"sample_id": 435, "db_id": "movies_4", "final": {"question": "Calculate the average budget of the movies directed by Jaume Collet-Serra.", "sql": "SELECT CAST(SUM(T1.budget) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jaume Collet-Serra' AND T2.job = 'Director'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "directed by refers to job = 'Director'; average budget = AVG(budget)"}
{"sample_id": 477, "db_id": "movies_4", "final": {"question": "What are the genres of Sky Captain and the World of Tomorrow?", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "genres refers to genre_name; Sky Captain and the World of Tomorrow refers to title = 'Sky Captain and the World of Tomorrow'"}
{"sample_id": 413, "db_id": "movies_4", "final": {"question": "What was the job of Dariusz Wolski in the movie \"Pirates of the Caribbean: At World's End\"?", "sql": "SELECT T2.job FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T3.person_name = 'Dariusz Wolski'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "movie \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 427, "db_id": "movies_4", "final": {"question": "Tell the number of movies made by Paramount Animation.", "sql": "SELECT COUNT(T2.movie_id) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id WHERE T1.company_name = 'Paramount Animation'", "source_tables": ["movie_company", "production_company"]}, "evidence": "Paramount Animation refers to company_name = 'Paramount Animation'"}
{"sample_id": 434, "db_id": "movies_4", "final": {"question": "For the movie \"Reign of Fire\", which department was Marcia Ross in?", "sql": "SELECT T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T3.person_name = 'Marcia Ross' AND T1.title = 'Reign of Fire'", "source_tables": ["movie", "department", "movie_crew", "person"]}, "evidence": "movie \"Reign of Fire\" refers to title = 'Reign of Fire'; which department refers to department_name"}
{"sample_id": 422, "db_id": "movies_4", "final": {"question": "Give the name of the movie with a revenue of 559852396.", "sql": "SELECT title FROM movie WHERE revenue = 559852396", "source_tables": ["movie"]}, "evidence": "name of the movie refers to title; revenue of 559852396 refers to revenue = '559852396'"}
{"sample_id": 490, "db_id": "movies_4", "final": {"question": "Provide the genre ID of the movie with the title of \"The Dark Knight\".", "sql": "SELECT T2.genre_id FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Dark Knight'", "source_tables": ["movie", "movie_genres"]}, "evidence": "movie with the title of \"The Dark Knight\" refers to title = 'The Dark Knight'"}
{"sample_id": 421, "db_id": "movies_4", "final": {"question": "What is the average revenue of the movie in which Dariusz Wolski works as the director of photography?", "sql": "SELECT CAST(SUM(T1.revenue) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "director of photography refers to job = 'Director of Photography'; average revenue = divide(sum(revenue), count(movie_id))"}
{"sample_id": 473, "db_id": "movies_4", "final": {"question": "Which actor plays Optimus Prime?", "sql": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name = 'Optimus Prime (voice)'", "source_tables": ["movie_cast", "person"]}, "evidence": "Which actor refers to person_name; Optimus Prime refers to character_name = 'Optimus Prime (voice)'"}
{"sample_id": 445, "db_id": "movies_4", "final": {"question": "What is Walt Disney Pictures' most popular movie?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Walt Disney Pictures' ORDER BY T3.popularity DESC LIMIT 1", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "Walt Disney Pictures refers to company_name = 'Walt Disney Pictures'; most popular movie refers to max(popularity)"}
{"sample_id": 466, "db_id": "movies_4", "final": {"question": "Give the genre and popularity of movies whose revenue is at least 120,000,000 between 2012 and 2015.", "sql": "SELECT T3.genre_name, T1.popularity FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.revenue > 120000000 AND T1.release_date BETWEEN '2012-01-01' AND '2015-12-31'", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "genre refers to genre_name; revenue is at least 120,000,000 refers to revenue > = 120000000; between 2012 and 2015 refers to release_date BETWEEN '2012-01-01' AND '2015-12-31'"}
{"sample_id": 444, "db_id": "movies_4", "final": {"question": "Who played Captain Jack Sparrow in all of the Pirates of the Caribbean movies?", "sql": "SELECT DISTINCT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.character_name = 'Captain Jack Sparrow' AND T1.title LIKE 'Pirates of the Caribbean%'", "source_tables": ["movie", "movie_cast", "person"]}, "evidence": "Captain Jack Sparrow refers to character_name = 'Captain Jack Sparrow'; Pirates of the Caribbean movies refers to title LIKE 'Pirates of the Carribbean%'"}
{"sample_id": 491, "db_id": "movies_4", "final": {"question": "List down the movie titles within the genre of thriller.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Thriller'", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "genre of thriller refers to genre_name = 'Thriller'"}
{"sample_id": 412, "db_id": "movies_4", "final": {"question": "What is the name of the director of photography of the movie \"Pirates of the Caribbean: At World's End\"?", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Director of Photography'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "name of the director of photography refers to person_name where job = 'Director of Photography'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 461, "db_id": "movies_4", "final": {"question": "Give the names of the female cast in Movie No. 1865.", "sql": "SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN gender AS T3 ON T1.gender_id = T3.gender_id WHERE T1.movie_id = 1865 AND T3.gender = 'Female'", "source_tables": ["gender", "movie_cast", "person"]}, "evidence": "female cast refers to gender = 'Female'; name of cast refers to person_name; Movie No. 1865 refers to movie_id = 1865"}
{"sample_id": 449, "db_id": "movies_4", "final": {"question": "List the names of the production companies that made at least 200 movies.", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T2.movie_id) > 200", "source_tables": ["movie_company", "production_company"]}, "evidence": "names of the production companies refers to company_name; at least 200 movies refers to COUNT(company_name) > = 200"}
{"sample_id": 437, "db_id": "movies_4", "final": {"question": "What is the title of the movie that was made with the most money and resources?", "sql": "SELECT title FROM movie ORDER BY budget DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "made with the most money and resources refers to max(budget)"}
{"sample_id": 425, "db_id": "movies_4", "final": {"question": "Show the total number of keywords of the movie \"I Hope They Serve Beer in Hell\".", "sql": "SELECT COUNT(T2.keyword_id) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'I Hope They Serve Beer in Hell'", "source_tables": ["movie", "movie_keywords"]}, "evidence": "\"I Hope They Serve Beer in Hell\" refers to title = 'I Hope They Serve Beer in Hell';"}
{"sample_id": 555, "db_id": "movies_4", "final": {"question": "Which movies did the company Paramount Pictures produce in 2000?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Paramount Pictures' AND CAST(STRFTIME('%Y', T3.release_date) AS INT) = 2000", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "Which movies refers to title; company Paramount Pictures refers to company_name = 'Paramount Pictures'; in 2000 refers to release_date LIKE '2000%'"}
{"sample_id": 487, "db_id": "movies_4", "final": {"question": "What is the keyword ID of the movie with the title of \"Sin City\"?", "sql": "SELECT T2.keyword_id FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Sin City'", "source_tables": ["movie", "movie_keywords"]}, "evidence": "title of \"Sin City\" refers to title = 'Sin City'"}
{"sample_id": 515, "db_id": "movies_4", "final": {"question": "Calculate the revenues made by Fantasy Films and Live Entertainment.", "sql": "SELECT SUM(T3.revenue) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name IN ('Fantasy Films', 'Live Entertainment')", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "made by Fantasy Films refers to company_name = 'Fantasy Films'; Live Entertainment refers to company_name = 'Live Entertainment'"}
{"sample_id": 460, "db_id": "movies_4", "final": {"question": "Tally the movie ID and character name in the movie starring Jim Carrey.", "sql": "SELECT T2.movie_id, T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Jim Carrey'", "source_tables": ["movie_cast", "person"]}, "evidence": ""}
{"sample_id": 410, "db_id": "movies_4", "final": {"question": "Please list the titles of all the movie produced by production company \"Universal Pictures\".", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures'", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "\"Universal Pictures\" refers to company_name = 'Universal Pictures'"}
{"sample_id": 565, "db_id": "movies_4", "final": {"question": "Calculate the average income made by movies using the keyword \"paris\". List the title of the movies.", "sql": "SELECT AVG(T1.revenue), T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'paris'", "source_tables": ["movie", "keyword", "movie_keywords"]}, "evidence": "income refers to revenue; keyword \"paris\" refers to keyword_name = 'paris'; average income = AVG(revenue)"}
{"sample_id": 416, "db_id": "movies_4", "final": {"question": "Please list the names of all the producers in the movie \"Pirates of the Caribbean: At World's End\".", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "names refers to person_name; producers refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 452, "db_id": "movies_4", "final": {"question": "How many movies released in 1995 did Quentin Tarantino appear in?", "sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Quentin Tarantino' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 1995", "source_tables": ["movie", "movie_cast", "person"]}, "evidence": "released in 1995 refers to release_date LIKE '1995%'"}
{"sample_id": 428, "db_id": "movies_4", "final": {"question": "How many female characters are there in the movie \"Spider-Man 3\"?", "sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Spider-Man 3' AND T3.gender = 'Female'", "source_tables": ["movie", "gender", "movie_cast"]}, "evidence": "female characters refer to gender = 'Female'; \"Spider-Man 3\" refers to title = 'Spider-Man 3'"}
{"sample_id": 432, "db_id": "movies_4", "final": {"question": "Give the number of movies with \"saving the world\" as the keyword.", "sql": "SELECT COUNT(T2.movie_id) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id WHERE keyword_name = 'saving the world'", "source_tables": ["keyword", "movie_keywords"]}, "evidence": "\"saving the world\" as the keyword refers to keyword_name = 'saving the world'"}
{"sample_id": 443, "db_id": "movies_4", "final": {"question": "What is the name of the production company that made the most movies?", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1", "source_tables": ["movie_company", "production_company"]}, "evidence": "name of the production company refers to company_name; most movies refers to max(count(company_name))"}
{"sample_id": 528, "db_id": "movies_4", "final": {"question": "What is the original language of the movie with the tagline \"An offer you can't refuse.\"?", "sql": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.tagline LIKE 'An offer you can%t refuse.'", "source_tables": ["movie", "language", "language_role", "movie_languages"]}, "evidence": "language refers to language_name; original language refers to language_role = 'Original'"}
{"sample_id": 418, "db_id": "movies_4", "final": {"question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the title of the one with the highest average vote?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography' ORDER BY T1.vote_average DESC LIMIT 1", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "director of photography refers to job = 'Director of Photography'; highest average vote refers to max(vote_average)"}
{"sample_id": 488, "db_id": "movies_4", "final": {"question": "Look for the movie title with the keyword of \"angel\".", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'angel'", "source_tables": ["movie", "keyword", "movie_keywords"]}, "evidence": "keyword of \"angel\" refers to keyword_name = 'angel'"}
{"sample_id": 414, "db_id": "movies_4", "final": {"question": "Please list the names of all the crew members of the movie \"Pirates of the Caribbean: At World's End\".", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "names refers to person_name; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 448, "db_id": "movies_4", "final": {"question": "How many female crews are in the movie \"Mr. Smith Goes to Washington\"?", "sql": "SELECT COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Mr. Smith Goes to Washington' AND T3.gender = 'Female'", "source_tables": ["movie", "gender", "movie_cast"]}, "evidence": "female crews refers to gender = 'Female'; \"Mr. Smith Goes to Washington\" refers to title = 'Mr. Smith Goes to Washington'"}
{"sample_id": 495, "db_id": "movies_4", "final": {"question": "What is the genre of the movie title which was well-received by the audiences but made the lowest revenue?", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id ORDER BY T1.vote_average DESC, T1.revenue LIMIT 1", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "genre refers to genre_name; well-received by the audiences refers to max(vote_average); lowest revenue refers to min(revenue)"}
{"sample_id": 463, "db_id": "movies_4", "final": {"question": "List the director's name of the movies released between 1/01/1916 and 12/31/1925.", "sql": "SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN movie AS T3 ON T1.movie_id = T3.movie_id INNER JOIN movie_crew AS T4 ON T1.movie_id = T4.movie_id WHERE T4.job = 'Director' AND T3.release_date BETWEEN '1916-01-01' AND '1925-12-31'", "source_tables": ["movie", "movie_crew", "movie_cast", "person"]}, "evidence": "director's name refers to person_name where job = 'Director'; released between 1/01/1916 and 12/31/1925 refers to release_date BETWEEN '1916-01-02' AND '1925-12-30'"}
{"sample_id": 526, "db_id": "movies_4", "final": {"question": "How many movies have \"vi\" as their language code?", "sql": "SELECT COUNT(T1.movie_id) FROM movie_languages AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_code = 'vi'", "source_tables": ["language", "movie_languages"]}, "evidence": "\"vi\" as their language code refers to language_code = 'vi'"}
{"sample_id": 456, "db_id": "movies_4", "final": {"question": "How many animators does Movie No. 129 have?", "sql": "SELECT COUNT(movie_id) FROM movie_crew WHERE movie_id = 129 AND job = 'Animation'", "source_tables": ["movie_crew"]}, "evidence": "animators refers to job = 'Animation'; Movie No. 129 refers to movie_id = 129"}
{"sample_id": 467, "db_id": "movies_4", "final": {"question": "How many Indian movies between 1/2/1990 and 12/30/2003 have revenue of more than 75,000,000 and popularity of no less than 20?", "sql": "SELECT COUNT(T2.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.revenue > 75000000 AND T1.popularity >= 20 AND T1.release_date BETWEEN '1990-01-01' AND '2003-12-31'", "source_tables": ["movie", "production_country"]}, "evidence": "Indian movies refers to country_name = 'India'; between 1/2/1990 and 12/30/2003 refers to release_date BETWEEN '1990-01-02' AND '2003-12-30'; revenue of more than 75,000,000 refers to revenue > 75000000; popularity of no less than 20 refers to popularity > = 20"}
{"sample_id": 415, "db_id": "movies_4", "final": {"question": "How many crew members worked as producer in the movie \"Pirates of the Caribbean: At World's End\"?", "sql": "SELECT COUNT(T3.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Producer'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "worked as producer refers to job = 'Producer'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 520, "db_id": "movies_4", "final": {"question": "What is the longest runtime of all movies?", "sql": "SELECT MAX(runtime) FROM movie", "source_tables": ["movie"]}, "evidence": "longest runtime refers to max(runtime)"}
{"sample_id": 424, "db_id": "movies_4", "final": {"question": "How many movies were directed by Michael Bay?", "sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Michael Bay' AND T2.job = 'Director'", "source_tables": ["movie_crew", "person"]}, "evidence": "directed by refers to job = 'Director'"}
{"sample_id": 498, "db_id": "movies_4", "final": {"question": "List down the movie titles that were produced in Canada.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'Canada'", "source_tables": ["country", "movie", "production_country"]}, "evidence": "produced in Canada refers to country_name = 'Canada'"}
{"sample_id": 480, "db_id": "movies_4", "final": {"question": "Which movie has the keyword 'extremis?'", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'extremis'", "source_tables": ["movie", "keyword", "movie_keywords"]}, "evidence": "Which movie refers to title; keyword 'extremis' refers to keyword_name = 'extremis'"}
{"sample_id": 481, "db_id": "movies_4", "final": {"question": "List 10 movie titles that were produced in France.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France' LIMIT 10", "source_tables": ["country", "movie", "production_country"]}, "evidence": "France refers to country_name = 'France'"}
{"sample_id": 489, "db_id": "movies_4", "final": {"question": "Which keywords belong to the movie titles with the highest popularity?", "sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id ORDER BY T1.popularity DESC LIMIT 1", "source_tables": ["movie", "keyword", "movie_keywords"]}, "evidence": "Which keywords refers to keyword_name; highest popularity refers to max(popularity)"}
{"sample_id": 558, "db_id": "movies_4", "final": {"question": "How many production companies made more than 150 movies?", "sql": "SELECT COUNT(*) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(T1.company_name) > 150 )", "source_tables": ["movie_company", "production_company"]}, "evidence": "more than 150 movies refers to COUNT(company_name) > 150"}
{"sample_id": 453, "db_id": "movies_4", "final": {"question": "What is the title of the first crime movie ever released?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Crime' ORDER BY T1.release_date LIMIT 1", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "first crime movie ever released refers to min(release_date) and genre_name = 'Crime'"}
{"sample_id": 438, "db_id": "movies_4", "final": {"question": "How many movies have made at least 1 Billion at the box office?", "sql": "SELECT COUNT(movie_id) FROM movie WHERE revenue > 1000000000", "source_tables": ["movie"]}, "evidence": "have made at least 1 Billion at the box office refers to revenue > 1000000000"}
{"sample_id": 522, "db_id": "movies_4", "final": {"question": "Provide the overview for the movie \"The Pacifier\".", "sql": "SELECT overview FROM movie WHERE title = 'The Pacifier'", "source_tables": ["movie"]}, "evidence": "movie \"The Pacifier\" refers to title = 'The Pacifier'"}
{"sample_id": 561, "db_id": "movies_4", "final": {"question": "Which movies have the participation of actor Harrison Ford?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Harrison Ford'", "source_tables": ["movie", "movie_cast", "person"]}, "evidence": "Which movies refers to title; actor refers to person_name"}
{"sample_id": 514, "db_id": "movies_4", "final": {"question": "Work out the difference in revenues made between the English and Latin movies.", "sql": "SELECT SUM(CASE WHEN T3.language_name = 'English' THEN T1.revenue ELSE 0 END) - SUM(CASE WHEN T3.language_name = 'Latin' THEN T1.revenue ELSE 0 END) AS DIFFERENCE FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id", "source_tables": ["movie", "language", "movie_languages"]}, "evidence": "English refers to language_name = 'English'; Latin refers to language_name = 'Latin'; difference in revenues = subtract(sum(movie_id) when language_name = 'English', sum(movie_id) when language_name = 'Latin')"}
{"sample_id": 451, "db_id": "movies_4", "final": {"question": "What is the title of Jamie Foxx's most recent movie?", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jamie Foxx' ORDER BY T1.release_date DESC LIMIT 1", "source_tables": ["movie", "movie_cast", "person"]}, "evidence": "most recent movie refers to max(release_date)"}
{"sample_id": 475, "db_id": "movies_4", "final": {"question": "List all companies who worked in the movie 'Ultramarines: A Warhammer 40,000 Movie.'", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Ultramarines: A Warhammer 40,000 Movie'", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "all companies refers to company_name; movie 'Ultramarines: A Warhammer 40,000 Movie' refers to title = 'Ultramarines: A Warhammer 40,000 Movie'"}
{"sample_id": 538, "db_id": "movies_4", "final": {"question": "Provide the ID and ISO code of Belgium.", "sql": "SELECT COUNTry_id, COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Belgium'", "source_tables": ["country"]}, "evidence": "ID refers to country_id; ISO code refers to country_iso_code; Belgium refers to country_name = 'Belgium'"}
{"sample_id": 447, "db_id": "movies_4", "final": {"question": "Which production company produced the movie that made the most money at the box office?", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id GROUP BY T1.company_id ORDER BY SUM(T3.revenue) DESC LIMIT 1", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "Which production company refers to company_name; most money at the box office refers to max(revenue)"}
{"sample_id": 478, "db_id": "movies_4", "final": {"question": "Write all the keywords belonging to the movie 'Sky Captain and the World of Tomorrow.'", "sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.title = 'Sky Captain and the World of Tomorrow'", "source_tables": ["movie", "keyword", "movie_keywords"]}, "evidence": "keywords refers to keyword_name; movie 'Sky Captain and the World of Tomorrow' refers to title = 'Sky Captain and the World of Tomorrow'"}
{"sample_id": 472, "db_id": "movies_4", "final": {"question": "What is the percentage of romance films among films produced in India in 2015?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Romance' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_COUNTry AS T3 ON T1.movie_id = T3.movie_id INNER JOIN genre AS T4 ON T2.genre_id = T4.genre_id INNER JOIN COUNTry AS T5 ON T3.COUNTry_id = T5.COUNTry_id WHERE T5.COUNTry_name = 'India' AND T1.release_date BETWEEN '2015-01-01' AND '2015-12-31'", "source_tables": ["movie", "production_country", "movie_genres", "genre", "country"]}, "evidence": "romance films refers to genre_name = 'Romance'; in India refers to country_name = 'India'; 2015 refers to release_date BETWEEN '2015-01-01' AND '2015-01-31'; percentage = divide(sum(movie_id) when genre_name = 'Romance', count(movie_id)) as percentage"}
{"sample_id": 482, "db_id": "movies_4", "final": {"question": "Who is the director for the movie 'Transformers?'", "sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Transformers' AND T2.job = 'Director'", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "the director refers to person_name where job = 'Director'; movie 'Transformers' refers to title = 'Transformers'"}
{"sample_id": 450, "db_id": "movies_4", "final": {"question": "How many movies did Harrison Ford appear in total?", "sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Harrison Ford'", "source_tables": ["movie_cast", "person"]}, "evidence": ""}
{"sample_id": 518, "db_id": "movies_4", "final": {"question": "What is the average number of crews for a movie?", "sql": "SELECT CAST(SUM(CD) AS REAL) / COUNT(movie_id) FROM ( SELECT movie_id, COUNT(person_id) AS CD FROM movie_crew GROUP BY movie_id )", "source_tables": ["movie_crew"]}, "evidence": "average number of crews = divide(count(person_id), COUNT(movie_id))"}
{"sample_id": 542, "db_id": "movies_4", "final": {"question": "What is the original language of the \"Four Rooms\" movie?", "sql": "SELECT T3.language_name FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id INNER JOIN language_role AS T4 ON T2.language_role_id = T4.role_id WHERE T4.language_role = 'Original' AND T1.title = 'Four Rooms'", "source_tables": ["movie", "language", "language_role", "movie_languages"]}, "evidence": "language refers to language_name; original language refers to language_role = 'Original'; \"Four Rooms\" refers to title = 'Four Rooms'"}
{"sample_id": 479, "db_id": "movies_4", "final": {"question": "The movie 'Gojira ni-sen mireniamu' is from which country?", "sql": "SELECT T3.COUNTry_name FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T1.title = 'Gojira ni-sen mireniamu'", "source_tables": ["country", "movie", "production_country"]}, "evidence": "movie 'Gojira ni-sen mireniamu' refers to title = 'Gojira ni-sen mireniamu'; which country refers to country_name"}
{"sample_id": 512, "db_id": "movies_4", "final": {"question": "List down the tagline of the Polski movies.", "sql": "SELECT DISTINCT T1.tagline FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Polski'", "source_tables": ["movie", "language", "movie_languages"]}, "evidence": "Polski movies refers to language_name = 'Polski'"}
{"sample_id": 442, "db_id": "movies_4", "final": {"question": "Who is the person associated with the crew id 1325273?", "sql": "SELECT person_name FROM person WHERE person_id = 1325273", "source_tables": ["person"]}, "evidence": "Who is the person refers to person_name; crew id 1325273 refers to person_id = 1325273"}
{"sample_id": 457, "db_id": "movies_4", "final": {"question": "In Movie No. 19, how many people are there in Department No. 7? Please give me their job.", "sql": "SELECT COUNT(DISTINCT job) FROM movie_crew WHERE movie_id = 19 AND department_id = 7", "source_tables": ["movie_crew"]}, "evidence": "Movie No. 19 refers to movie_id = 19; Department No. 7 refers to department_id = 7"}
{"sample_id": 419, "db_id": "movies_4", "final": {"question": "When was the release date of the latest movie in which Dariusz Wolski worked as a crew member?", "sql": "SELECT T1.release_date FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' ORDER BY T1.release_date DESC LIMIT 1", "source_tables": ["movie", "movie_crew", "person"]}, "evidence": "release date of the latest movie refers to max(release_date)"}
{"sample_id": 486, "db_id": "movies_4", "final": {"question": "List down five movie titles that were released before 2000.", "sql": "SELECT title FROM movie WHERE CAST(STRFTIME('%Y', release_date) AS INT) < 2000 LIMIT 5", "source_tables": ["movie"]}, "evidence": "released before 2000 refers to release_date < '2000-01-01'"}
{"sample_id": 439, "db_id": "movies_4", "final": {"question": "When was the first movie released?", "sql": "SELECT MIN(release_date) FROM movie WHERE movie_status = 'Released'", "source_tables": ["movie"]}, "evidence": "when the first movie refers to release_date where min(release_date)"}
{"sample_id": 409, "db_id": "movies_4", "final": {"question": "How many production companies does the movie \"Four Rooms\" have?", "sql": "SELECT COUNT(CNAME) FROM ( SELECT T1.company_name AS CNAME FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms' )", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "movie \"Four Rooms\" refers to title = 'Four Rooms'"}
{"sample_id": 431, "db_id": "movies_4", "final": {"question": "What is the production company of the movie \"Crazy Heart\"?", "sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Crazy Heart'", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "movie \"Crazy Heart\" refers to title = 'Crazy Heart'; production company refers to company_name"}
{"sample_id": 505, "db_id": "movies_4", "final": {"question": "List down the movies produced by Lucasfilm.", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Lucasfilm'", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "movies refers to title; produced by Lucasfil refers to company_name = 'Lucasfilm'"}
{"sample_id": 411, "db_id": "movies_4", "final": {"question": "What is the title of the latest released movie produced by production company \"Universal Pictures\"?", "sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Universal Pictures' ORDER BY T3.release_date DESC LIMIT 1", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "\"Universal Pictures\" refers to company_name = 'Universal Pictures'; latest released refers to max(release_date)"}
{"sample_id": 535, "db_id": "movies_4", "final": {"question": "What percentage of films are made in the US?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.COUNTry_iso_code = 'US' THEN T1.movie_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id", "source_tables": ["country", "movie", "production_country"]}, "evidence": "films' and 'movies' are synonyms; made in the US refers to country_iso_code = 'US'; percentage = divide(sum(country_id) when country_iso_code = 'US', count(country_id)) * 100 as percentage"}
{"sample_id": 559, "db_id": "movies_4", "final": {"question": "What is the role of Mark Hammel?", "sql": "SELECT T2.job FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Mark Hammel'", "source_tables": ["movie_crew", "person"]}, "evidence": "role refers to job"}
{"sample_id": 543, "db_id": "movies_4", "final": {"question": "List the character names in the \"Open Water\" movie.", "sql": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Open Water'", "source_tables": ["movie", "movie_cast"]}, "evidence": "\"Open Water\" movie refers to title = 'Open Water'"}
{"sample_id": 553, "db_id": "movies_4", "final": {"question": "Which genre does the movie Dancer in the Dark belong to?", "sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.title = 'Dancer in the Dark'", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "genre refers to genre_name; movie Dancer in the Dark refers to title = 'Dancer in the Dark'"}
{"sample_id": 539, "db_id": "movies_4", "final": {"question": "List the character names played by Catherine Deneuve.", "sql": "SELECT T2.character_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Catherine Deneuve'", "source_tables": ["movie_cast", "person"]}, "evidence": ""}
{"sample_id": 563, "db_id": "movies_4", "final": {"question": "What is the average number of horror movies among all movies genre?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.genre_name = 'Horror' THEN T1.movie_id ELSE NULL END) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "horror movies refers to genre_name = 'horror'; average number = divide(sum(movie_id) when genre_name = 'horror', count(movie_id))"}
{"sample_id": 540, "db_id": "movies_4", "final": {"question": "List the movies in the Somali language.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Somali'", "source_tables": ["movie", "language", "movie_languages"]}, "evidence": "List the movies refers to title; Somali language refers to language_name = 'Somali'"}
{"sample_id": 507, "db_id": "movies_4", "final": {"question": "Write down the release date of the movies produced by Twentieth Century Fox Film Corporation.", "sql": "SELECT T3.release_date FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Twentieth Century Fox Film Corporation'", "source_tables": ["movie_company", "movie", "production_company"]}, "evidence": "produced by Twentieth Century Fox Film Corporation refers to company_name = 'Twentieth Century Fox Film Corporation'"}
{"sample_id": 417, "db_id": "movies_4", "final": {"question": "In how many movie does Dariusz Wolski work as the director of photography?", "sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_crew AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'", "source_tables": ["movie_crew", "person"]}, "evidence": "director of photography refers to job = 'Director of Photography'"}
{"sample_id": 547, "db_id": "movies_4", "final": {"question": "Provide the names and departments of the person who worked as a music editor in the \"Pirates of the Caribbean: At World's End\" movie.", "sql": "SELECT T3.person_name, T4.department_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id INNER JOIN department AS T4 ON T2.department_id = T4.department_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' AND T2.job = 'Music Editor'", "source_tables": ["movie", "department", "movie_crew", "person"]}, "evidence": "names refers to person_name; departments refers to department_name; worked as a music editor refers to job = 'Music Editor'; \"Pirates of the Caribbean: At World's End\" refers to title = 'Pirates of the Caribbean: At World''s End'"}
{"sample_id": 440, "db_id": "movies_4", "final": {"question": "How many crew are named John Young?", "sql": "SELECT COUNT(person_id) FROM person WHERE person_name = 'John Young'", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 446, "db_id": "movies_4", "final": {"question": "How many movies did Universal Studios release?", "sql": "SELECT COUNT(T2.movie_id) FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id WHERE T1.company_name = 'Universal Studios'", "source_tables": ["movie_company", "production_company"]}, "evidence": "Universal Studios refers to company_name = 'Universal Studios'"}
{"sample_id": 492, "db_id": "movies_4", "final": {"question": "Write down five rumoured movie titles within the genre of Drama.", "sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.movie_status = 'Rumored' AND T3.genre_name = 'Drama' LIMIT 5", "source_tables": ["movie", "genre", "movie_genres"]}, "evidence": "rumoured movie refers to movie_status = 'rumoured'; genre of Drama refers to genre_name = 'Drama'"}
{"sample_id": 613, "db_id": "codebase_comments", "final": {"question": "For the repository with '8094' watchers , how many solutions does it contain?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = 8094", "source_tables": ["solution", "repo"]}, "evidence": "repository refers to Repo.Id and RepoId; solutions a repository contains refers to Solution.Id;"}
{"sample_id": 674, "db_id": "codebase_comments", "final": {"question": "What is the task method of the tokenized name \"string extensions to pascal case\n\"?", "sql": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'string extensions to pascal case'", "source_tables": ["method"]}, "evidence": "method refers to Name; task of the method refers to the second part of the Name after the \".\"; tokenized name refers to NameTokenized; NameTokenized = 'string extensions to pascal case';"}
{"sample_id": 589, "db_id": "codebase_comments", "final": {"question": "Which method has the summary \"Write a command to the log\"?", "sql": "SELECT Name FROM Method WHERE Summary = 'Write a command to the log'", "source_tables": ["method"]}, "evidence": ""}
{"sample_id": 625, "db_id": "codebase_comments", "final": {"question": "How many percent more of the watchers for the repository of solution No.83855 than No.1502?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 83855 THEN T1.Watchers ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Watchers ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 83855), SUM(Solution.Id = 1502)), 100)), SUM(Soltution.Id = 1502);"}
{"sample_id": 662, "db_id": "codebase_comments", "final": {"question": "How many solutions are there whose respositories received the number of stars more than one third of the number of forks?", "sql": "SELECT COUNT(DISTINCT T1.Id) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars > CAST(T1.Forks AS REAL) / 3", "source_tables": ["solution", "repo"]}, "evidence": "number of solutions are there whose repositories received the number of stars more than one third of the number of forks refers to Stars>DIVIDE(Forks, 3);"}
{"sample_id": 608, "db_id": "codebase_comments", "final": {"question": "For the repository which got '8094' Stars, how many solutions does it contain?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 8094", "source_tables": ["solution", "repo"]}, "evidence": "repository refers to Repo.Id;"}
{"sample_id": 639, "db_id": "codebase_comments", "final": {"question": "What is the url for repository that has the longest processed time solution?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Solution )", "source_tables": ["solution", "repo"]}, "evidence": "Url for repository refers to Url; longest processed toe trefers to MAX(ProcessedTime);"}
{"sample_id": 567, "db_id": "codebase_comments", "final": {"question": "What is the task of the method whose tokenized name is \"online median filter test median window filling\"?", "sql": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'online median filter test median window filling'", "source_tables": ["method"]}, "evidence": "tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by \".\"; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'"}
{"sample_id": 682, "db_id": "codebase_comments", "final": {"question": "What is the github address of the solution path \"joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln\"?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'joeyrobert_bloomfilterDataTypes.BloomFilter.sln'", "source_tables": ["solution", "repo"]}, "evidence": "github address refers to Url; solution path refers to Path; Path = 'joeyrobert_bloomfilter\\DataTypes.BloomFilter.sln';"}
{"sample_id": 630, "db_id": "codebase_comments", "final": {"question": "What is the total processed time of all solutions from the repository with the most forks?", "sql": "SELECT SUM(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = ( SELECT MAX(Forks) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "total processed time = AVG(ProcessedTime where MAX(COUNT(Forks))); repository with the most forks refers to MAX(COUNT(Forks));"}
{"sample_id": 688, "db_id": "codebase_comments", "final": {"question": "What is the average processed time of the solution with a repository of 254 likes, 88 followers, and 254 watchers?", "sql": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.ProcessedTime) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 254 AND T1.Forks = 88 AND T1.Watchers = 254", "source_tables": ["solution", "repo"]}, "evidence": "average processed time = AVG(ProcessedTime);"}
{"sample_id": 633, "db_id": "codebase_comments", "final": {"question": "What are the \"en\" methods with solutions from repository \"1093\"", "sql": "SELECT DISTINCT T2.id FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 1093 AND T2.Lang = 'en'", "source_tables": ["solution", "method"]}, "evidence": "en methods refers to lang = 'en'; solution refers to Solution.Id; repository refers to RepoId; RepoId = 1093;"}
{"sample_id": 595, "db_id": "codebase_comments", "final": {"question": "Among the solutions that contain files within the repository needing the longest processed time to download, how many of them doesn't need to be\ncompiled if user wants to implement it?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo ) AND T2.WasCompiled = 1", "source_tables": ["solution", "repo"]}, "evidence": "longest processed time refers to max(Solution.ProcessedTime); needs to be compiled if user wants to implement it refers to WasCompiled = 0\uff1b"}
{"sample_id": 612, "db_id": "codebase_comments", "final": {"question": "Tell the path of the solution for the method \"ExportToRTF.RTFStyleSheet.H6Write\".", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'ExportToRTF.RTFStyleSheet.H6Write'", "source_tables": ["solution", "method"]}, "evidence": "path of the solution refers to Path; method refers to Name; Name = 'ExportToRTF.RTFStyleSheet.H6Write';"}
{"sample_id": 614, "db_id": "codebase_comments", "final": {"question": "Give the repository Url of the one with most solutions.", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1", "source_tables": ["solution", "repo"]}, "evidence": "repository URL refers to Url; repository Url with most solutions refers to MAX(COUNT(Solution.Id));"}
{"sample_id": 650, "db_id": "codebase_comments", "final": {"question": "What is the percentage of respositories that receive more than 2,000 stars?", "sql": "SELECT CAST(SUM(CASE WHEN Stars > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Stars) FROM Repo", "source_tables": ["repo"]}, "evidence": "stars>2000; percentage = DIVIDE(MULTIPLY(COUNT(Stars>2000), 100), COUNT(Id));"}
{"sample_id": 626, "db_id": "codebase_comments", "final": {"question": "How many percent more of the stars for the repository of solution No.51424 than No.167053?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 51424 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 167053 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 51424), SUM(Solution.Id = 167053)), 100)), SUM(Solution.Id = 167053);"}
{"sample_id": 680, "db_id": "codebase_comments", "final": {"question": "How many XML format does the github address \"https://github.com/dogeth/vss2git.git\" have?", "sql": "SELECT COUNT(T3.CommentIsXml) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/dogeth/vss2git.git' AND T3.CommentIsXml = 1", "source_tables": ["solution", "method", "repo"]}, "evidence": "Xml format refers to CommentisXml, github address refers to Url; Url = 'https://github.com/dogeth/vss2git.git';"}
{"sample_id": 599, "db_id": "codebase_comments", "final": {"question": "Among the repositories with over 200 likes, how many of them have files contained by solutions with a processed time of under 636439500080712000?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.ProcessedTime < 636439500080712000 AND T1.Stars > 200", "source_tables": ["solution", "repo"]}, "evidence": "over 200 likes refers to Stars > 200; ProcessedTime<636439500080712000;"}
{"sample_id": 634, "db_id": "codebase_comments", "final": {"question": "What are the paths of solutions in repository \"https://github.com/ecoffey/Bebop.git\"", "sql": "SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/ecoffey/Bebop.git'", "source_tables": ["solution", "repo"]}, "evidence": "path of solutions refers to Path; https://github.com/ecoffey/Bebop.git refers to Url; Url = 'https://github.com/ecoffey/Bebop.git';"}
{"sample_id": 620, "db_id": "codebase_comments", "final": {"question": "For the method which got the tokenized name as 't jadwal entity get single mpic', what is the path time for its solution?", "sql": "SELECT DISTINCT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 't jadwal entity get single mpic'", "source_tables": ["solution", "method"]}, "evidence": "tokenized name refers to NameTokenized; NameTokenized = 't jadwal entity get single mpic'; path time for its solution refers to ProcessedTime;"}
{"sample_id": 587, "db_id": "codebase_comments", "final": {"question": "What's the task of the method whose tokenized name is \"html parser feed\"?", "sql": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE NameTokenized = 'html parser feed'", "source_tables": ["method"]}, "evidence": "tokenized name refers to NameTokenized; task of the method refers to the second part of name deliminated by \".\"; for example, the task of 'LinqToDelicious.HttpWebRequestFactory.Create' is 'HttpWebRequestFactory'"}
{"sample_id": 663, "db_id": "codebase_comments", "final": {"question": "What is the task of method number 2?", "sql": "SELECT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Id = 2", "source_tables": ["method"]}, "evidence": "task of the method refers to the second part of the Name after the \".\"; method number refers to Method_100k.Id; Method_100k.Id = 2;"}
{"sample_id": 652, "db_id": "codebase_comments", "final": {"question": "Please provide the id of the respository that received the most forks among the respositories that receive 21 stars.", "sql": "SELECT Id FROM Repo WHERE Stars = 21 AND Forks = ( SELECT MAX(Forks) FROM Repo WHERE Stars = 21 )", "source_tables": ["repo"]}, "evidence": "repository that received the most forks refers to MAX(Forks);"}
{"sample_id": 643, "db_id": "codebase_comments", "final": {"question": "What is the solution's path of method \"HtmlSharp.HtmlParser.Feed\"?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'HtmlSharp.HtmlParser.Feed'", "source_tables": ["solution", "method"]}, "evidence": "solution's path refers to Path; method refers to Name; Name = 'HtmlSharp.HtmlParser.Feed';"}
{"sample_id": 676, "db_id": "codebase_comments", "final": {"question": "How many path does the github address \"https://github.com/jeffdik/tachy.git\" have?", "sql": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'", "source_tables": ["solution", "repo"]}, "evidence": "github address refers to Url; Url = 'https://github.com/jeffdik/tachy.git';"}
{"sample_id": 638, "db_id": "codebase_comments", "final": {"question": "List all the solutions ids of the repository with \"636430969128176000\" processed time", "sql": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = 636430969128176000", "source_tables": ["solution", "repo"]}, "evidence": "solution ids refers to Solution.Id;"}
{"sample_id": 648, "db_id": "codebase_comments", "final": {"question": "What is the percentage of the methods' solutions that need to be compiled among the methods whose comments is XML format?", "sql": "SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.CommentIsXml = 1", "source_tables": ["solution", "method"]}, "evidence": "comment is XML format refers to CommentIsXml = 1; solution needs to be compiled refesr to WasCompiled = 0; percentage = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);"}
{"sample_id": 580, "db_id": "codebase_comments", "final": {"question": "What is the average processed time of the solution paths inside the \"https://github.com/zphingphong/DiscardCustomerApp.git\"?", "sql": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git'", "source_tables": ["solution", "repo"]}, "evidence": "average processed time = avg(Solution.ProcessedTime);"}
{"sample_id": 681, "db_id": "codebase_comments", "final": {"question": "List 5 solution path that has sampling time of 636431758961741000.", "sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SampledAt = 636431758961741000 LIMIT 5", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; sampling time refers to SampledAt; SampledAt = '636431758961741000';"}
{"sample_id": 685, "db_id": "codebase_comments", "final": {"question": "Provide the github address with the summary of method \"A test for Decompose\n\".", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T3.Summary = 'A test for Decompose'", "source_tables": ["solution", "method", "repo"]}, "evidence": "github address refers to Url; summary of method refers to Summary; Summary = 'A test for Decompose';"}
{"sample_id": 616, "db_id": "codebase_comments", "final": {"question": "Among all the solution of the 'zh-cn' methods, which path is most often used?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'zh-cn' GROUP BY T1.Path ORDER BY COUNT(T1.Path) DESC LIMIT 1", "source_tables": ["solution", "method"]}, "evidence": "solution refers to SolutionId; zh-cn refers to Lang = 'zh-cn'; path that is most often used refers to MAX(COUNT(Path));"}
{"sample_id": 655, "db_id": "codebase_comments", "final": {"question": "Please provide the solution id of the respository among the respository that receive 238 forks.", "sql": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks = 238", "source_tables": ["solution", "repo"]}, "evidence": "solution id of the repository refers to solution.Id;"}
{"sample_id": 576, "db_id": "codebase_comments", "final": {"question": "What is the tokenized name of the solution whose path is \"maravillas_linq-to-delicious\\tasty.sln\"?", "sql": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious'", "source_tables": ["solution", "method"]}, "evidence": "tokenized name refers to NameTokenized"}
{"sample_id": 658, "db_id": "codebase_comments", "final": {"question": "Please provide the path of solution of method whose full comment is Feeds data into the parser.", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.FullComment = 'Feeds data into the parser'", "source_tables": ["solution", "method"]}, "evidence": "path of solution refers to Path; method refers to name; full comment = 'Feeds data into the parser';"}
{"sample_id": 673, "db_id": "codebase_comments", "final": {"question": "What is the comment format of method number 50 with the solution path \"managedfusion_managedfusion\\ManagedFusion.sln\"?", "sql": "SELECT CASE WHEN T2.CommentIsXml = 0 THEN 'isNotXMLFormat' WHEN T2.CommentIsXml = 1 THEN 'isXMLFormat' END format FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 50 AND T1.Path = 'managedfusion_managedfusionManagedFusion.sln'", "source_tables": ["solution", "method"]}, "evidence": "comment format refers to CommentIsXml; method number refers to Method_100k.Id; Method_100k.Id = 50; solution path refers to Path; Path = 'managedfusion_managedfusion\\ManagedFusion.sln';"}
{"sample_id": 586, "db_id": "codebase_comments", "final": {"question": "What is the language of the method used in the solution path \"opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln\"?", "sql": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'opendns_diagnosticappwindowsOpenDnsDiagnostic.sln'", "source_tables": ["solution", "method"]}, "evidence": "language refers to Lang;"}
{"sample_id": 597, "db_id": "codebase_comments", "final": {"question": "Please give the url of the repository whose files are contained in solution ID 9?", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 9", "source_tables": ["solution", "repo"]}, "evidence": ""}
{"sample_id": 571, "db_id": "codebase_comments", "final": {"question": "What is the most liked repository? Indicate its github address and the amount of stars it has received.", "sql": "SELECT Url, Stars FROM Repo WHERE Stars = ( SELECT MAX(Stars) FROM Repo )", "source_tables": ["repo"]}, "evidence": "more stars mean more people like this repository; most liked refers to max(Stars); the github address of repository refers to Url;"}
{"sample_id": 660, "db_id": "codebase_comments", "final": {"question": "What is the percentage of solutions for the method that needs to be compiled in the English methods?", "sql": "SELECT CAST(SUM(CASE WHEN T1.WasCompiled = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Lang) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'en'", "source_tables": ["solution", "method"]}, "evidence": "method that needs to be compiled refers to WasCompiled = 0; English method refers to Lang = 'en'; percentage of solutions = MULTIPLY(DIVIDE(SUM(WasCompiled = 0), COUNT(Solution.Id)), 100);"}
{"sample_id": 598, "db_id": "codebase_comments", "final": {"question": "Please list all the paths of the solutions containing files within the repository whose url is \"https://github.com/maxild/playground.git\".", "sql": "SELECT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/maxild/playground.git'", "source_tables": ["solution", "repo"]}, "evidence": ""}
{"sample_id": 679, "db_id": "codebase_comments", "final": {"question": "What are the solution path of the tokenized name \"matrix multiply\"?", "sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'matrix multiply'", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; tokenized name refers to NameTokenized; NameTokenized = 'matrix multiply';"}
{"sample_id": 670, "db_id": "codebase_comments", "final": {"question": "How many methods in the same repository share a tokenized name that begins with \"query language...\"?", "sql": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized LIKE 'query language%'", "source_tables": ["solution", "method"]}, "evidence": "methods refers to Name; tokenized name refers to NameTokenized; NameTokenized LIKE 'query language%';"}
{"sample_id": 629, "db_id": "codebase_comments", "final": {"question": "How many solutions are in \"https://github.com/derickbailey/presentations-and-training.git\"?", "sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/derickbailey/presentations-and-training.git'", "source_tables": ["solution", "repo"]}, "evidence": "solutions refers to Solution.Id; https://github.com/derickbailey/presentations-and-training.git refers to Url; Url; = 'https://github.com/derickbailey/presentations-and-training.git';"}
{"sample_id": 621, "db_id": "codebase_comments", "final": {"question": "Give the repository ID for the solution of method \"Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal\".", "sql": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal'", "source_tables": ["solution", "method"]}, "evidence": "repository ID refers to RepoID; method refers to Name; Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal';"}
{"sample_id": 566, "db_id": "codebase_comments", "final": {"question": "How many English language codes whose comments for the method are in the XML format?", "sql": "SELECT COUNT(Lang) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1", "source_tables": ["method"]}, "evidence": "English language refers to Lang = 'en'; the comments for this method is XML format refers to CommentIsXml = 1;"}
{"sample_id": 672, "db_id": "codebase_comments", "final": {"question": "How many methods in repository 150 did not have a comment and a summary?", "sql": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 150 AND T2.FullComment IS NULL AND T2.Summary IS NULL", "source_tables": ["solution", "method"]}, "evidence": "methods refers to Name; repository that did not have a comment and a summary refers to FullComment IS NULL AND Summary IS NULL;"}
{"sample_id": 606, "db_id": "codebase_comments", "final": {"question": "Give the tokenized name for the method \"Supay.Irc.Messages.KnockMessage.GetTokens\".", "sql": "SELECT NameTokenized FROM Method WHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens'", "source_tables": ["method"]}, "evidence": ""}
{"sample_id": 656, "db_id": "codebase_comments", "final": {"question": "Among the english methods,please list the tokenized names of methods whose solutions need to be compiled.", "sql": "SELECT NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE Lang = 'en' AND WasCompiled = 0", "source_tables": ["solution", "method"]}, "evidence": "english methods refers to lang = 'en'; tokenized name refers to NameTokenized; methods refers to Name; solution needs to be compiled refers to WasCompiled = 0;"}
{"sample_id": 678, "db_id": "codebase_comments", "final": {"question": "List 5 github address that the solutions can be implemented without the need of compilation.", "sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.WasCompiled = 1 LIMIT 5", "source_tables": ["solution", "repo"]}, "evidence": "github address refers to Url; solution can be implemented without the need of compliation refers to WasCompiled = 1;"}
{"sample_id": 585, "db_id": "codebase_comments", "final": {"question": "In \"maxild_playground\\Playground.sln\", what is the time of sampling for the method \"GitHubRepo.Cli.GitHubClientWrapper.GetReleases\"?", "sql": "SELECT T2.SampledAt FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maxild_playgroundPlayground.sln' AND T2.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases'", "source_tables": ["solution", "method"]}, "evidence": "the time of sampling refers to SampledAt; 'maxild_playground\\Playground.sln' is the path of a solution"}
{"sample_id": 689, "db_id": "codebase_comments", "final": {"question": "How many language code of method is used for the github address \"https://github.com/managedfusion/managedfusion.git\n\"?", "sql": "SELECT COUNT(DISTINCT T3.Lang) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId INNER JOIN Method AS T3 ON T2.Id = T3.SolutionId WHERE T1.Url = 'https://github.com/managedfusion/managedfusion.git'", "source_tables": ["solution", "method", "repo"]}, "evidence": "language code of method refers to Lang; github address refers to Url; Url = 'https://github.com/managedfusion/managedfusion.git';"}
{"sample_id": 647, "db_id": "codebase_comments", "final": {"question": "How many methods does solution 1 have? And please tell me if solution 1 needs to be compiled.", "sql": "SELECT COUNT(T2.SolutionId) , CASE WHEN T1.WasCompiled = 0 THEN 'Needs' ELSE 'NoNeeds' END needToCompile FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.SolutionId = 1", "source_tables": ["solution", "method"]}, "evidence": "method refers to Name; solution refers to Solution.Id; Solution.Id = 1; solution needs to be compiled refers to WasCompiled = 0;"}
{"sample_id": 684, "db_id": "codebase_comments", "final": {"question": "List all the tokenized name of the solution path \"jurney_P4Backup\\P4Backup\\P4Backup.sln\n\".", "sql": "SELECT DISTINCT T2.NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'jurney_P4BackupP4BackupP4Backup.sln'", "source_tables": ["solution", "method"]}, "evidence": "tokenized name refers to NameTokenized; solution path refers to Path; Path = 'jurney_P4Backup\\P4Backup\\P4Backup.sln';"}
{"sample_id": 636, "db_id": "codebase_comments", "final": {"question": "What is the repository id of the method with tokenized name \"crc parameters get hash code\"?", "sql": "SELECT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'crc parameters get hash code'", "source_tables": ["solution", "method"]}, "evidence": "repository id refers to RepoId; tokenized name refers to NameTokenized; NameTokenized = 'crc parameters get hash code';"}
{"sample_id": 568, "db_id": "codebase_comments", "final": {"question": "What is the time of sampling of the solution with the highest sampling time? Indicate the id number of the solution.", "sql": "SELECT DISTINCT SampledAt, SolutionId FROM Method WHERE SampledAt = ( SELECT MAX(SampledAt) FROM Method )", "source_tables": ["method"]}, "evidence": "highest sampling time refers to max(SampledAt); id number of the solution refers to SolutionId;"}
{"sample_id": 628, "db_id": "codebase_comments", "final": {"question": "List all the methods with a solution with a \"636449700980488000\" processed time.", "sql": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.ProcessedTime = 636449700980488000", "source_tables": ["solution", "method"]}, "evidence": "methods refers to Name; solution refers to SolutionId;"}
{"sample_id": 645, "db_id": "codebase_comments", "final": {"question": "Please provide the id of the solution whose repository has the most watchers.", "sql": "SELECT T2.Id FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT MAX(Watchers) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "id of the solution refers to Solution.Id; repository has the most watchers refers to MAX(Watchers);"}
{"sample_id": 591, "db_id": "codebase_comments", "final": {"question": "Please list the path of the solution that contains files found within the repository most people like.", "sql": "SELECT DISTINCT T2.Path FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "more stars mean more people like this repository; most people like refers to max(Stars);"}
{"sample_id": 575, "db_id": "codebase_comments", "final": {"question": "Which repository has the longest amount of processed time of downloading? Indicate whether the solution paths in the repository can be implemented without needs of compilation.", "sql": "SELECT DISTINCT T1.id, T2.WasCompiled FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.ProcessedTime = ( SELECT MAX(ProcessedTime) FROM Repo )", "source_tables": ["solution", "repo"]}, "evidence": "longest amount of processed time refers to max(ProcessedTime); the repository can be implemented without needs of compilation refers to WasCompiled = 1;"}
{"sample_id": 646, "db_id": "codebase_comments", "final": {"question": "Please provide the number of stars that the repository of the solution 20 have.", "sql": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 20", "source_tables": ["solution", "repo"]}, "evidence": "solution refers to Solution.ID; Solution.Id = 20;"}
{"sample_id": 667, "db_id": "codebase_comments", "final": {"question": "What is the solution path for method number 3?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 3", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; method number refers to Method_100k.Id; Method_100k.Id = 3;"}
{"sample_id": 619, "db_id": "codebase_comments", "final": {"question": "Show the solution path for the method \"Mosa.Platform.x86.Instructions.IMul.EmitLegacy\"?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy'", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; method refers to Name; Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';"}
{"sample_id": 609, "db_id": "codebase_comments", "final": {"question": "What is the solution path for the method \"IQ.Data.DbQueryProvider.CanBeEvaluatedLocally\"?", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'", "source_tables": ["solution", "method"]}, "evidence": "solution path refers to Path; method refers to Name; Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'"}
{"sample_id": 627, "db_id": "codebase_comments", "final": {"question": "How many percent more of the Forks for the repository of solution No.53546 than No.1502?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 53546 THEN T1.Forks ELSE 0 END) - SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 1502 THEN T1.Forks ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "source_tables": ["solution", "repo"]}, "evidence": "solution No. refers to Solution.Id; percentage = DIVIDE(MULTIPLY(SUBTRACT(SUM(Solution.Id = 53546), SUM(Solution.Id = 1502)), 100)), SUM(Solution.Id = 1502);"}
{"sample_id": 584, "db_id": "codebase_comments", "final": {"question": "How much is the processed time of the method whose tokenized name is \"about box1 dispose\"? Indicate the language of the method.", "sql": "SELECT DISTINCT T1.ProcessedTime, T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'about box1 dispose'", "source_tables": ["solution", "method"]}, "evidence": "language refers to Lang;"}
{"sample_id": 596, "db_id": "codebase_comments", "final": {"question": "What is the processed time to download the repository whose files are contained in the solution with the path \"jeffdik_tachy\\src\\Tachy.sln\".", "sql": "SELECT DISTINCT T2.ProcessedTime FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'jeffdik_tachysrcTachy.sln'", "source_tables": ["solution", "repo"]}, "evidence": ""}
{"sample_id": 601, "db_id": "codebase_comments", "final": {"question": "What is the average time needed for the solutions containing files within the repository whose url is \"https://github.com/jeffdik/tachy.git\" to be processd?", "sql": "SELECT CAST(SUM(T2.ProcessedTime) AS REAL) / COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Url = 'https://github.com/jeffdik/tachy.git'", "source_tables": ["solution", "repo"]}, "evidence": "average time = avg(ProcessedTime)\uff1b"}
{"sample_id": 569, "db_id": "codebase_comments", "final": {"question": "How many followers do the most followed repository on Github have? Give the github address of the repository.", "sql": "SELECT Forks, Url FROM Repo WHERE Forks = ( SELECT MAX(Forks) FROM Repo )", "source_tables": ["repo"]}, "evidence": "more forks refers to more people follow this repository; most followed repository refers to max(Forks);\u00a0 the github address of the repository refers to Url;"}
{"sample_id": 610, "db_id": "codebase_comments", "final": {"question": "For the method which got the tokenized name as 'interp parser expr', what is the processed time for its solution?", "sql": "SELECT T1.ProcessedTime FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'interp parser expr'", "source_tables": ["solution", "method"]}, "evidence": "tokenized name refers to NameTokenized; NameTokenized = 'interp parser expr'; processed time for its solution refers to ProcessedTime;"}
{"sample_id": 637, "db_id": "codebase_comments", "final": {"question": "How many methods with solutions with path 'maravillas_linq-to-delicious\\tasty.sln'?", "sql": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'maravillas_linq-to-delicious\\tasty.sln'", "source_tables": ["solution", "method"]}, "evidence": "solution refers to SolutionId;"}
{"sample_id": 654, "db_id": "codebase_comments", "final": {"question": "Please provide the path of solution of method whose tokenized name is html parser feed.", "sql": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'html parser feed'", "source_tables": ["solution", "method"]}, "evidence": "path of solution refers to Path; method refers to Name; tokenized name refers to NameTokenized; Name = ''html parser feed';"}
{"sample_id": 631, "db_id": "codebase_comments", "final": {"question": "List all the path of solution from all the \"it\" lang code method.", "sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'it'", "source_tables": ["solution", "method"]}, "evidence": "path of the solution refers to Path; solution refers to Solution.Id;"}
{"sample_id": 697, "db_id": "trains", "final": {"question": "Please list the IDs of all the trains that run in the east direction and have less than 4 cars.", "sql": "SELECT T1.id FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'east' AND T2.carsNum < 4", "source_tables": ["trains", "cars"]}, "evidence": "less than 4 cars refers to carsNum < 4"}
{"sample_id": 720, "db_id": "trains", "final": {"question": "Among the trains running west, how many trains have no more than one car with an open roof?", "sql": "SELECT SUM(CASE WHEN T1.direction = 'west' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) FROM cars WHERE roof = 'none' GROUP BY train_id HAVING COUNT(id) = 1 ) AS T2 ON T1.id = T2.train_id", "source_tables": ["trains", "cars"]}, "evidence": "running west refers to direction = 'west'; open roof refers to roof = 'none'"}
{"sample_id": 693, "db_id": "trains", "final": {"question": "Please list the IDs of all the trains with at least one car in a non-regular shape.", "sql": "SELECT train_id FROM cars WHERE shape IN ('elipse', 'bucket') GROUP BY train_id", "source_tables": ["cars"]}, "evidence": "non-regular shape refers to shape in ('elipse', 'bucket')"}
{"sample_id": 701, "db_id": "trains", "final": {"question": "In which direction does the train with an ellipse-shape car run?", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape = 'ellipse'", "source_tables": ["trains", "cars"]}, "evidence": "shape = 'ellipse'"}
{"sample_id": 714, "db_id": "trains", "final": {"question": "How many wheels do the long cars have?", "sql": "SELECT SUM(wheels) FROM cars WHERE len = 'long'", "source_tables": ["cars"]}, "evidence": "long cars refers to len = 'long'"}
{"sample_id": 696, "db_id": "trains", "final": {"question": "Among the trains that run in the east direction, how many of them have at least one car in a non-regular shape?", "sql": "SELECT SUM(CASE WHEN T1.shape IN ('bucket', 'elipse') THEN 1 ELSE 0 end)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "source_tables": ["trains", "cars"]}, "evidence": "non-regular shape refers to shape in ('elipse', 'bucket')"}
{"sample_id": 729, "db_id": "trains", "final": {"question": "List all the load shapes of all head cars of each train and identify which load shape has the highest number. Calculate the percentage of the trains with the said head car that are running eas", "sql": "SELECT DISTINCT T3.load_shape FROM ( SELECT load_shape, train_id FROM cars WHERE position = 1 ORDER BY train_id DESC ) AS T3 UNION ALL SELECT T4.load_shape FROM ( SELECT load_shape, train_id FROM cars WHERE position = 1 ORDER BY train_id DESC LIMIT 1 ) AS T4 UNION ALL SELECT (CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.id)) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_shape = ( SELECT T4.load_shape FROM ( SELECT load_shape, train_id FROM cars AS T WHERE position = 1 ORDER BY train_id DESC LIMIT 1 ) AS T4 )", "source_tables": ["trains", "cars"]}, "evidence": "which load shape has the highest number refers to MAX(load_shape); head car refers to position = 1; east is a direction; calculation = MULTIPLY(DIVIDE(count(direction = 'east' where MAX(load_shape) where position = 1 then id), count(id)), 100)"}
{"sample_id": 721, "db_id": "trains", "final": {"question": "Which direction does the majority of the trains that have 3 cars are running?", "sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id HAVING carsNum = 3 ) AS T2 ON T1.id = T2.train_id GROUP BY T1.direction", "source_tables": ["trains", "cars"]}, "evidence": "3 cars refers to carsNum = 3"}
{"sample_id": 726, "db_id": "trains", "final": {"question": "Among the trains running west, how many trains have three-wheeled, jagged roof cars?", "sql": "SELECT SUM(CASE WHEN T2.direction = 'west' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.wheels = 3 AND T1.roof = 'jagged'", "source_tables": ["trains", "cars"]}, "evidence": "west is an direction; three-wheeled refers to wheels = 3; jagged roof refers to roof = 'jagged'"}
{"sample_id": 710, "db_id": "trains", "final": {"question": "How many short cars are in the shape of hexagon?", "sql": "SELECT COUNT(id) FROM cars WHERE shape = 'hexagon' AND len = 'short'", "source_tables": ["cars"]}, "evidence": "short cars refers to len = 'short'; in the shape of hexagon refers to shape = 'hexagon'"}
{"sample_id": 724, "db_id": "trains", "final": {"question": "List all the directions of the trains that have empty cars.", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0", "source_tables": ["trains", "cars"]}, "evidence": "empty cars refers to load_num = 0"}
{"sample_id": 700, "db_id": "trains", "final": {"question": "Please list the directions in which the trains with at least one empty-loaded car run.", "sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.load_num = 0", "source_tables": ["trains", "cars"]}, "evidence": "at least one empty-loaded car run refers to load_num = 0"}
{"sample_id": 712, "db_id": "trains", "final": {"question": "What are the load shapes of all the short ellipse cars?", "sql": "SELECT load_shape FROM cars WHERE shape = 'ellipse' AND len = 'short'", "source_tables": ["cars"]}, "evidence": "short refers to len = 'short'; ellipse cars refers to shape = 'ellipse'"}
{"sample_id": 711, "db_id": "trains", "final": {"question": "How many trains are running west?", "sql": "SELECT COUNT(id) FROM trains WHERE direction = 'west'", "source_tables": ["trains"]}, "evidence": "west is a direction"}
{"sample_id": 727, "db_id": "trains", "final": {"question": "Provide the directions for all the trains that have 2 or less cars.", "sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.trailPosi <= 2", "source_tables": ["trains", "cars"]}, "evidence": "2 or less cars refers to trailPosi < = 2"}
{"sample_id": 728, "db_id": "trains", "final": {"question": "What is the percentage of all the trains with at least 4 cars? List the directions of the said trains.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.trailPosi >= 4 THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id UNION ALL SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, MAX(position) AS trailPosi FROM cars t GROUP BY train_id ) AS T2 ON T1.id = T2.train_id AND T2.trailPosi >= 4", "source_tables": ["trains", "cars"]}, "evidence": "at least 4 cars refers to trailPosi > = 4; calculation = MULTIPLY(DIVIDE(count(trailPosi > = 4 then id), count(id)), 100)"}
{"sample_id": 690, "db_id": "trains", "final": {"question": "How many trains are there that run in the east direction?", "sql": "SELECT COUNT(id) FROM trains WHERE direction = 'east'", "source_tables": ["trains"]}, "evidence": "east is a direction"}
{"sample_id": 713, "db_id": "trains", "final": {"question": "What are the ids of the train running east?", "sql": "SELECT id FROM trains WHERE direction = 'east'", "source_tables": ["trains"]}, "evidence": "east is a direction"}
{"sample_id": 719, "db_id": "trains", "final": {"question": "How many eastbound trains have rectangular-shaped head cars?", "sql": "SELECT COUNT(T.train_id) FROM (SELECT T1.train_id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T2.direction = 'east' AND T1.shape = 'rectangle' GROUP BY T1.train_id)as T", "source_tables": ["trains", "cars"]}, "evidence": "eastbound refers to direction = 'east'; head cars refers to position = 1"}
{"sample_id": 715, "db_id": "trains", "final": {"question": "Which direction do the majority of the trains are running?", "sql": "SELECT direction FROM trains GROUP BY direction ORDER BY COUNT(id) DESC", "source_tables": ["trains"]}, "evidence": "majority of train refers to MAX(count(id))"}
{"sample_id": 699, "db_id": "trains", "final": {"question": "Among the trains that run in the east direction, how many of them have more than 2 long cars?", "sql": "SELECT SUM(CASE WHEN T2.longCarsNum > 2 THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS longCarsNum FROM cars WHERE len = 'long' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T1.direction = 'west'", "source_tables": ["trains", "cars"]}, "evidence": "more than 2 long cars refers to longCarsNum > 2"}
{"sample_id": 691, "db_id": "trains", "final": {"question": "How many cars are there on train no.1?", "sql": "SELECT COUNT(id) FROM cars WHERE train_id = 1", "source_tables": ["cars"]}, "evidence": "train no.1 refers to train_id = 1"}
{"sample_id": 704, "db_id": "trains", "final": {"question": "How many cars on a train that runs in the east direction have a flat roof?", "sql": "SELECT SUM(CASE WHEN T1.roof = 'flat' THEN 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "source_tables": ["trains", "cars"]}, "evidence": "flat roof refers to roof = 'flat'"}
{"sample_id": 694, "db_id": "trains", "final": {"question": "How many cars on train no.1 have the roof open?", "sql": "SELECT COUNT(id) FROM cars WHERE train_id = 1 AND roof = 'none'", "source_tables": ["cars"]}, "evidence": "train no. 1 refers to train_id = 1; roof open refers to roof = 'none'"}
{"sample_id": 766, "db_id": "movie", "final": {"question": "What is the net worth of the actor starred in Misery who has a height ranging from 60 to 70 inches tall?", "sql": "SELECT T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Misery' AND T3.\"Height (Inches)\" BETWEEN 60 AND 70 AND T3.Gender = 'Male'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "Misery refers to Title = 'Misery'; height ranging from 60 to 70 inches refers to Height (Inches) BETWEEN 60 and 70"}
{"sample_id": 756, "db_id": "movie", "final": {"question": "Who played the No.1 character in the credit list of the movie which was released on \"2015/10/26\"?", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.\"Release Date\" = '2015-10-26' AND T2.creditOrder = '1'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "No.1 character refers to creditOrder = '1'; released on \"2015/10/26\" refers to Release Date = '2015-10-26'"}
{"sample_id": 775, "db_id": "movie", "final": {"question": "List the character's name of actress born in Sherman Oaks and starred in the movie Bruce Almighty with height greater than the 50% of average height of all actors listed.", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Gender = 'Female' AND T1.Title = 'Godzilla' AND T3.\"Birth City\" = 'Sherman Oaks' AND T3.\"Height (Inches)\" * 100 > ( SELECT AVG(\"Height (Inches)\") FROM actor ) * 50", "source_tables": ["movie", "characters", "actor"]}, "evidence": "actress refers to Gender = 'Female'; born in Sherman Oaks refers to Birth City = 'Sherman Oaks'; movie Bruce Almighty refers to Title = 'Bruce Almighty'; height greater than the 50% of average height refers to Height (Inches) > multiply(avg(Height (Inches)), 0.5)"}
{"sample_id": 745, "db_id": "movie", "final": {"question": "What is the MPAA rating for the movie with the character named \"Peter Quill\" in it?", "sql": "SELECT T1.\"MPAA Rating\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.\"Character Name\" = 'Peter Quill'", "source_tables": ["movie", "characters"]}, "evidence": "MPAA rating = 'G' means General audiences; MPAA rating = 'PG' means Parental guidance suggested; MPAA rating = 'R'means Restricted; MPAA rating = 'X' means No one under 17 admitted"}
{"sample_id": 749, "db_id": "movie", "final": {"question": "Who played the character named \"Chanice Kobolowski\"?", "sql": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.\"Character Name\" = 'Chanice Kobolowski'", "source_tables": ["characters", "actor"]}, "evidence": ""}
{"sample_id": 740, "db_id": "movie", "final": {"question": "Among the actors who starred in the movie Batman, which one of them is the tallest?", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman' ORDER BY T3.\"Height (Inches)\" DESC LIMIT 1", "source_tables": ["movie", "characters", "actor"]}, "evidence": "movie Batman refers to title = 'Batman'; tallest refers to max(height_inches)"}
{"sample_id": 759, "db_id": "movie", "final": {"question": "List down the movie ID of movie with a budget of 15000000 and a rating between 7 to 8.", "sql": "SELECT MovieID FROM movie WHERE Rating BETWEEN 7 AND 8 AND Budget = 15000000", "source_tables": ["movie"]}, "evidence": "a budget of 15000000 refers to Budget = 15000000; rating between 7 to 8 refers to Rating BETWEEN 7 and 8"}
{"sample_id": 751, "db_id": "movie", "final": {"question": "Show the birth city of the actor who played \"Gabriel Martin\".", "sql": "SELECT T2.\"Birth City\" FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.\"Character Name\" = 'Gabriel Martin'", "source_tables": ["characters", "actor"]}, "evidence": "\"Gabriel Martin\" refers to Character Name = 'Gabriel Martin'"}
{"sample_id": 774, "db_id": "movie", "final": {"question": "Among the movies with drama genre, what is the percentage of the actors with net worth greater than $400,000,000.00?", "sql": "SELECT SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) > 400000000 THEN 1 ELSE 0 END) - SUM(CASE WHEN CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) < 400000000 THEN 1 ELSE 0 END) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Genre = 'Drama'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "drama genre refers to Genre = 'Drama'; net worth greater than $400,000,000.00 refers to NetWorth > '$400,000,000.00'; percentage = divide(count(ActorID where NetWorth > '$400,000,000.00'), COUNT(ActorID))*100%"}
{"sample_id": 765, "db_id": "movie", "final": {"question": "What is the genre of PG rated movie starred by the actor with highest net worth?", "sql": "SELECT T1.Genre FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.\"MPAA Rating\" = 'PG' ORDER BY CAST(REPLACE(REPLACE(T3.NetWorth, ',', ''), '$', '') AS REAL) DESC LIMIT 1", "source_tables": ["movie", "characters", "actor"]}, "evidence": "PG rated refers to MPAA Rating = 'PG';\u00a0 highest net worth refers to max(NetWorth)"}
{"sample_id": 741, "db_id": "movie", "final": {"question": "How many movies star a male African American actor?", "sql": "SELECT COUNT(*) FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T2.Gender = 'Male' AND T2.Ethnicity = 'African American'", "source_tables": ["characters", "actor"]}, "evidence": "male refers to gender = 'Male'; African American refers to ethnicity = 'African American'"}
{"sample_id": 771, "db_id": "movie", "final": {"question": "Find the actor's name that played as Don Altobello in a drama movie that has a gross of 136766062.", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Gross = 136766062 AND T2.\"Character Name\" = 'Don Altobello' AND T1.Genre = 'Drama'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "actor's name refers to Name; as Don Altobello refers to Character Name = 'Don Altobello'; drama movie refers to Genre = 'Drama'"}
{"sample_id": 747, "db_id": "movie", "final": {"question": "Who was the actor that played in the movie \"Batman\" with the longest screentime?", "sql": "SELECT T2.Name FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID INNER JOIN movie AS T3 ON T3.MovieID = T1.MovieID WHERE T3.Title = 'Batman' ORDER BY T1.screentime DESC LIMIT 1", "source_tables": ["movie", "characters", "actor"]}, "evidence": "movie \"Batman\" refers to Title = 'Batman'; longest screentime refers to max(screentime)"}
{"sample_id": 744, "db_id": "movie", "final": {"question": "Which movie had the biggest budget? Give the name of the movie.", "sql": "SELECT Title FROM movie ORDER BY Budget DESC LIMIT 1", "source_tables": ["movie"]}, "evidence": "biggest budget refers to max(Budget); name of the movie refers to Title"}
{"sample_id": 762, "db_id": "movie", "final": {"question": "Among the actors born in New York City, list the genre of their movie with a rating greater than 5.", "sql": "SELECT T1.Genre FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.\"Birth City\" = 'New York City' AND T1.Rating > 5", "source_tables": ["movie", "characters", "actor"]}, "evidence": "born in New York City refers to Birth City = 'New York City'; rating greater than 5 refers to Rating > 5"}
{"sample_id": 736, "db_id": "movie", "final": {"question": "How many movies starring Morgan Freeman are suggested by parental guidance?", "sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Morgan Freeman' AND T1.\"MPAA Rating\" = 'PG'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "'suggested by parental guidance' refers to mpaa_rating = 'PG'"}
{"sample_id": 754, "db_id": "movie", "final": {"question": "Show the No.3 character name in the credit list of the movie \"G.I. Joe: The Rise of Cobra\".", "sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'G.I. Joe: The Rise of Cobra' AND T2.creditOrder = '3'", "source_tables": ["movie", "characters"]}, "evidence": "No.3 character refers to creditOrder = '3'; movie \"G.I. Joe: The Rise of Cobra\" refers to Title = 'G.I. Joe: The Rise of Cobra'"}
{"sample_id": 731, "db_id": "movie", "final": {"question": "Which character has the longest screen time in the movie Batman?", "sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Batman' ORDER BY T2.screentime DESC LIMIT 1", "source_tables": ["movie", "characters"]}, "evidence": "longest screen time refers to max(screentime); movie Batman refers to title = 'Batman'"}
{"sample_id": 737, "db_id": "movie", "final": {"question": "Among the movies starring Tom Cruise, which one of them has the best quality?", "sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise' ORDER BY T1.Rating DESC LIMIT 1", "source_tables": ["movie", "characters", "actor"]}, "evidence": "starring Tom Cruise refers to name = 'Tom Cruise'; best quality refers to max(rating)"}
{"sample_id": 767, "db_id": "movie", "final": {"question": "Count the male actors born in USA that starred in Ghost.", "sql": "SELECT COUNT(*) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Ghost' AND T3.Gender = 'Male' AND T3.\"Birth Country\" = 'USA'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "male refers to Gender = 'Male'; born in USA refers to Birth Country = 'USA'; Ghost refers to Title = 'Ghost'"}
{"sample_id": 755, "db_id": "movie", "final": {"question": "Who played the No.2 character in the credit list of the movie \"American Hustle\"?", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'American Hustle' AND T2.creditOrder = '2'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "No.2 character refers to creditOrder = '2'; movie \"American Hustle\" refers to Title = 'American Hustle'"}
{"sample_id": 733, "db_id": "movie", "final": {"question": "Please list the names of the actors who played a role in the movie Batman.", "sql": "SELECT T3.Name FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Batman'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "movie Batman refers to title = 'Batman'"}
{"sample_id": 753, "db_id": "movie", "final": {"question": "How tall is the actor who played \"Lurch\"?", "sql": "SELECT T2.\"Height (Inches)\" FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.\"Character Name\" = 'Lurch'", "source_tables": ["characters", "actor"]}, "evidence": "tall refers to Height (Inches); \"Lurch\" refers to Character Name = 'Lurch'"}
{"sample_id": 742, "db_id": "movie", "final": {"question": "What is the average rating of all the movies starring Tom Cruise?", "sql": "SELECT AVG(T1.Rating) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "starring Tom Cruise refers to name = 'Tom Cruise'; average rating = divide(sum(rating where name = 'Tom Cruise'), count(movieid where name = 'Tom Cruise'))"}
{"sample_id": 761, "db_id": "movie", "final": {"question": "What is the name of male and white actor with actor ID 439?", "sql": "SELECT Name FROM actor WHERE ActorID = 439 AND Gender = 'Male' AND Ethnicity = 'White'", "source_tables": ["actor"]}, "evidence": "male refers to Gender = 'Male'; white refers to Ethnicity = 'White'"}
{"sample_id": 773, "db_id": "movie", "final": {"question": "What is the runtime of the movie starred by Jackie Chan with a rating greater than 7?", "sql": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Jackie Chan' AND T1.Rating > 7", "source_tables": ["movie", "characters", "actor"]}, "evidence": "starred by Jackie Chan refers to Name = 'Jackie Chan'; rating greater than 7 refers to Rating > 7"}
{"sample_id": 758, "db_id": "movie", "final": {"question": "What is the percentage of the actors that showed up in the credit list of movie \"Dawn of the Planet of the Apes\" that were born after \"1970/1/1\"?", "sql": "SELECT CAST(SUM(CASE WHEN T3.\"Date of Birth\" > '1970-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.\"Date of Birth\") FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Dawn of the Planet of the Apes'", "source_tables": ["movie", "characters", "actor"]}, "evidence": "movie \"Dawn of the Planet of the Apes\" refers to Title = 'Dawn of the Planet of the Apes'; born after \"1970/1/1\" refers to Date of Birth > '1970/1/1'; percentage = divide(count(ActorID where Date of Birth > '1970/1/1'), count(ActorID))*100%"}
{"sample_id": 837, "db_id": "social_media", "final": {"question": "Among all the tweets posted on Mondays, how many of them are reshared?", "sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Weekday = 'Monday' AND IsReshare = 'TRUE'", "source_tables": ["twitter"]}, "evidence": "\"Monday\" is the Weekday; reshare refers to IsReshare = 'TRUE'"}
{"sample_id": 829, "db_id": "social_media", "final": {"question": "Write down the tweet text posted from Rawang, Selangor, Malaysia.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City = 'Rawang' AND T2.State = 'Selangor' AND T2.Country = 'Malaysia'", "source_tables": ["location", "twitter"]}, "evidence": "\"Rawang\" is the City; \"Selangor\" is the State; \"Malaysia\" is the Country"}
{"sample_id": 821, "db_id": "social_media", "final": {"question": "List down the text of tweets posted by unknown gender users.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Unknown'", "source_tables": ["user", "twitter"]}, "evidence": "unknown gender user refers to Gender = 'Unknown'"}
{"sample_id": 833, "db_id": "social_media", "final": {"question": "Calculate the average number of male users who posted tweets in a week.", "sql": "SELECT COUNT(DISTINCT T1.TweetID) / COUNT(DISTINCT T1.UserID) / 7 AS avg FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Day BETWEEN 1 AND 31", "source_tables": ["user", "twitter"]}, "evidence": "male user refers to Gender = 'Male'; average tweet in a week per user refers to Divide ( Divide(Count(TweetID), Count (UserID)), Divide(31, 7))"}
{"sample_id": 802, "db_id": "social_media", "final": {"question": "State the number of positive tweets from Ha Noi.", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Sentiment > 0 AND T2.State = 'Ha Noi'", "source_tables": ["location", "twitter"]}, "evidence": "positive tweet refers to Sentiment > 0; 'Ha Noi' is the State"}
{"sample_id": 782, "db_id": "social_media", "final": {"question": "How many tweets in total were posted by a user in Argentina?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "\"Argentina\" is the Country"}
{"sample_id": 814, "db_id": "social_media", "final": {"question": "What is the day of the week that tweet with ID tw-682712873332805633 was posted?", "sql": "SELECT Weekday FROM twitter WHERE TweetID = 'tw-682712873332805633'", "source_tables": ["twitter"]}, "evidence": "\"tw-682712873332805633\" is the TweetID; day of the week refers to Weekday"}
{"sample_id": 831, "db_id": "social_media", "final": {"question": "State the country where the most positive sentiment tweets were posted.", "sql": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Sentiment) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Sentiment > 0 GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "country with the most positive sentiment tweet refers to Country where Max(Count(Sentiment > 0))"}
{"sample_id": 849, "db_id": "social_media", "final": {"question": "Please list the top 3 cities with the most number of tweets posted in Canada.", "sql": "SELECT T.City FROM ( SELECT T2.City, COUNT(T1.TweetID) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country = 'Canada' GROUP BY T2.City ) T ORDER BY T.num DESC LIMIT 3", "source_tables": ["location", "twitter"]}, "evidence": "\"Canada\" is the Country; city with most number of tweets refers to City where Max(Count(TweetID))"}
{"sample_id": 835, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets that are not in English.", "sql": "SELECT text FROM twitter WHERE Lang != 'en'", "source_tables": ["twitter"]}, "evidence": "not in English refers to Lang <> en'"}
{"sample_id": 815, "db_id": "social_media", "final": {"question": "How many unique users have seen tweet with text `Happy New Year to all those AWS instances of ours!`?", "sql": "SELECT Reach FROM twitter WHERE text = 'Happy New Year to all those AWS instances of ours!'", "source_tables": ["twitter"]}, "evidence": "\"Happy New Year to all those AWS instances of ours!\" is the text; seen unique users refers to Reach"}
{"sample_id": 797, "db_id": "social_media", "final": {"question": "State the number of states in the United Kingdom.", "sql": "SELECT COUNT(State) AS State_number FROM location WHERE Country = 'United Kingdom'", "source_tables": ["location"]}, "evidence": "\"United Kingdom\" is the Country"}
{"sample_id": 787, "db_id": "social_media", "final": {"question": "Users in which country has posted more numbers of positive tweets, Argentina or Australia?", "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country IN ('Argentina', 'Australia') AND T1.Sentiment > 0 GROUP BY T2.Country ORDER BY COUNT(T1.TweetID) DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "\"Argentina\" and \"Australia\" are both Country; positive tweets refers to Sentiment > 0; Country posted more number of tweets refers to Country where Max(Count(TweetID))"}
{"sample_id": 784, "db_id": "social_media", "final": {"question": "Among all the tweets that are reshared, how many of them are posted by a user in Buenos Aires?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.IsReshare = 'TRUE'", "source_tables": ["location", "twitter"]}, "evidence": "reshared refers to Isreshare = 'TRUE'; 'Buenos Aires' is the City"}
{"sample_id": 820, "db_id": "social_media", "final": {"question": "What is the gender of the user who posted a tweet with ID tw-682714583044243456?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-682714583044243456'", "source_tables": ["user", "twitter"]}, "evidence": "\"tw-682714583044243456\" is the TweetID"}
{"sample_id": 776, "db_id": "social_media", "final": {"question": "How many tweets are in English?", "sql": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Lang = 'en'", "source_tables": ["twitter"]}, "evidence": "english is the language and refers to Lang = 'en'"}
{"sample_id": 816, "db_id": "social_media", "final": {"question": "Count the total number of tweet IDs in `en`.", "sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Lang = 'en'", "source_tables": ["twitter"]}, "evidence": "\"en\" is the language and refers to Lang = 'en'"}
{"sample_id": 851, "db_id": "social_media", "final": {"question": "Among all the tweets sent by male users in Argentina, what is the text of the one with the most number of likes?", "sql": "SELECT T2.text FROM user AS T1 INNER JOIN twitter AS T2 ON T1.UserID = T2.UserID INNER JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T3.Country = 'Argentina' AND T1.Gender = 'Male' ORDER BY T2.Likes DESC LIMIT 1", "source_tables": ["user", "location", "twitter"]}, "evidence": "male user refers to Gender = 'Male'; 'Argentina' is the Country; most number of likes refers to Max(Likes)"}
{"sample_id": 803, "db_id": "social_media", "final": {"question": "Show the text of the tweet with the highest klout from Connecticut.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.State = 'Connecticut' ORDER BY T1.Klout DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "highest klout refers to Max(Klout); 'Connecticut' is the State"}
{"sample_id": 818, "db_id": "social_media", "final": {"question": "How many tweets have been posted on Wednesday?", "sql": "SELECT COUNT(TweetID) FROM twitter WHERE Weekday = 'Wednesday'", "source_tables": ["twitter"]}, "evidence": "\"Wednesday\" is the Weekday"}
{"sample_id": 796, "db_id": "social_media", "final": {"question": "Give the number of users who do not show their genders.", "sql": "SELECT COUNT(UserID) AS user_number FROM user WHERE Gender = 'Unknown'", "source_tables": ["user"]}, "evidence": "do not show their gender refers to Gender = 'Unknown'"}
{"sample_id": 812, "db_id": "social_media", "final": {"question": "What is the percentage of male Twitter users from Florida?", "sql": "SELECT SUM(CASE WHEN T3.Gender = 'Male' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.State = 'Florida'", "source_tables": ["user", "location", "twitter"]}, "evidence": "\"Florida\" is the State; male user refers to Gender = 'Male'; percentage = Divide (Count(UserID where Gender = 'Male'), Count (UserID)) * 100"}
{"sample_id": 794, "db_id": "social_media", "final": {"question": "What is the average number of tweets posted by the users in a city in Argentina?", "sql": "SELECT SUM(CASE WHEN T2.City = 'Buenos Aires' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS avg FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina'", "source_tables": ["location", "twitter"]}, "evidence": "\"Argentina\" is the Country; average number of tweets in a city = Divide (Count(TweetID where Country = 'Argentina'), Count (City))"}
{"sample_id": 793, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets posted by male users from Buenos Aires.", "sql": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T2 ON T2.UserID = T1.UserID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T2.City = 'Buenos Aires' AND T3.Gender = 'Male'", "source_tables": ["user", "location", "twitter"]}, "evidence": "\"Buenos Aires\" is the City; male user refers to Gender = 'Male'"}
{"sample_id": 801, "db_id": "social_media", "final": {"question": "For the tweet which got a reach number of 547851, which country did it come from?", "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Reach = 547851", "source_tables": ["location", "twitter"]}, "evidence": "reach number of 547851 refers to Reach = 547851"}
{"sample_id": 778, "db_id": "social_media", "final": {"question": "How many tweets are seen by more than 1000 unique users?", "sql": "SELECT COUNT(TweetID) AS tweet_number FROM twitter WHERE Reach > 1000", "source_tables": ["twitter"]}, "evidence": "seen by more than 1000 unique users refers to Reach > 1000"}
{"sample_id": 800, "db_id": "social_media", "final": {"question": "How many reshared tweets are there in Texas?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.State = 'Texas' AND T1.IsReshare = 'TRUE'", "source_tables": ["location", "twitter"]}, "evidence": "reshared tweet refers to IsReshare = 'TRUE'; 'Texas' is the State"}
{"sample_id": 819, "db_id": "social_media", "final": {"question": "List down all of the texts posted on Twitter on Thursday.", "sql": "SELECT text FROM twitter WHERE Weekday = 'Thursday'", "source_tables": ["twitter"]}, "evidence": "\"Thursday\" is the Weekday"}
{"sample_id": 810, "db_id": "social_media", "final": {"question": "State the number of tweets from Michigan on Thursdays.", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.Weekday = 'Thursday' AND T2.State = 'Michigan'", "source_tables": ["location", "twitter"]}, "evidence": "\"Michigan\" is the State; 'Thursday' is the Weekday; number of tweets refers to Count(TweetID)"}
{"sample_id": 807, "db_id": "social_media", "final": {"question": "What is the gender of the user whose tweet got 535 retweets?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.RetweetCount = 535", "source_tables": ["user", "twitter"]}, "evidence": "tweet got 535 retweets refers to RetweetCount = 535"}
{"sample_id": 843, "db_id": "social_media", "final": {"question": "How many tweets in French were posted from Australia?", "sql": "SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Lang = 'fr' AND T2.Country = 'Australia'", "source_tables": ["location", "twitter"]}, "evidence": "\"French\" is the language and refers to Lang = 'fr'; 'Australia' is the Country"}
{"sample_id": 783, "db_id": "social_media", "final": {"question": "Users in which city of Argentina post the most tweets?", "sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' GROUP BY T2.City ORDER BY COUNT(T1.TweetID) DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "\"Argentina\" is the Country; post the most tweets refers to Max(Count(TweetID))"}
{"sample_id": 811, "db_id": "social_media", "final": {"question": "Which state was the tweet `tw-685681052912873473` from? Give the state code.", "sql": "SELECT T2.StateCode FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.TweetID = 'tw-685681052912873473'", "source_tables": ["location", "twitter"]}, "evidence": "tw-685681052912873473' is the TweetID"}
{"sample_id": 836, "db_id": "social_media", "final": {"question": "Please give the user ID of the user who has posted the most tweets.", "sql": "SELECT UserID FROM twitter GROUP BY UserID ORDER BY COUNT(DISTINCT TweetID) DESC LIMIT 1", "source_tables": ["twitter"]}, "evidence": "users with the most tweet refers to UserID where Max(Count (TweetID))"}
{"sample_id": 806, "db_id": "social_media", "final": {"question": "Give the name of the city of the user who tweeted `One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a`.", "sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T1.text = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a'", "source_tables": ["location", "twitter"]}, "evidence": "\"One of our favorite stories is @FINRA_News's move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a\" is the text"}
{"sample_id": 791, "db_id": "social_media", "final": {"question": "What is the gender of the user who has posted the tweet that is seen by the most number of unique users?", "sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Reach DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "seen by the most number of unique users refers to Max(Reach)"}
{"sample_id": 850, "db_id": "social_media", "final": {"question": "Please list all the cities from where tweets with neutral sentiments were posted.", "sql": "SELECT DISTINCT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE Sentiment = 0", "source_tables": ["location", "twitter"]}, "evidence": "neutral sentiment refers to Sentiment = 0"}
{"sample_id": 786, "db_id": "social_media", "final": {"question": "From which country is the tweet with the most likes posted?", "sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID ORDER BY T1.Likes DESC LIMIT 1", "source_tables": ["location", "twitter"]}, "evidence": "tweet with the most likes refers to Max(Likes)"}
{"sample_id": 788, "db_id": "social_media", "final": {"question": "Among all the tweets posted from Buenos Aires, how many of them were posted on Thursdays?", "sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.City = 'Buenos Aires' AND T1.Weekday = 'Thursday'", "source_tables": ["location", "twitter"]}, "evidence": "\"Buenos Aires\" is the City; posted on Thursday refers to Weekday = 'Thursday'"}
{"sample_id": 777, "db_id": "social_media", "final": {"question": "Please list the texts of all the tweets that are reshared.", "sql": "SELECT text FROM twitter WHERE IsReshare = 'TRUE'", "source_tables": ["twitter"]}, "evidence": "reshared refers to Isreshare = 'TRUE'"}
{"sample_id": 781, "db_id": "social_media", "final": {"question": "Please list all the cities in Argentina.", "sql": "SELECT City FROM location WHERE City IS NOT NULL AND Country = 'Argentina'", "source_tables": ["location"]}, "evidence": "\"Argentina\" is the Country"}
{"sample_id": 845, "db_id": "social_media", "final": {"question": "How many more tweets with a positive sentiment than the tweets with a neutral sentiment were posted by male users?", "sql": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Sentiment = 0 THEN 1 ELSE 0 END) AS diff FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'", "source_tables": ["user", "twitter"]}, "evidence": "positive sentiment tweet refers to Sentiment > 0; neutral sentiment refers to Sentiment = 0; male user refers to Gender = 'Male'; difference = Subtract (Count (TweetID where Sentiment > 0), Count (TweetID where Sentiment = 0))"}
{"sample_id": 840, "db_id": "social_media", "final": {"question": "What is the total number of tweets sent by male users on Mondays?", "sql": "SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Weekday = 'Monday'", "source_tables": ["user", "twitter"]}, "evidence": "male user refers to Gender = 'Male; 'Monday' is the Weekday; total number of tweet refers to Count (TweetID)"}
{"sample_id": 834, "db_id": "social_media", "final": {"question": "How many tweets have a klout of over 50?", "sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE Klout > 50", "source_tables": ["twitter"]}, "evidence": "klout of over 50 refers to Klout > 50"}
{"sample_id": 795, "db_id": "social_media", "final": {"question": "Among all the tweets with a positive sentiment, what is the percentage of those posted by a male user?", "sql": "SELECT SUM(CASE WHEN T2.Gender = 'Male' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS per FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Sentiment > 0", "source_tables": ["user", "twitter"]}, "evidence": "positive sentiment refers to Sentiment > 0; male user refers to Gender = 'Male'; percentage = Divide (Count(TweetID where Gender = 'Male'), Count (TweetID)) * 100"}
{"sample_id": 823, "db_id": "social_media", "final": {"question": "What gender of users posted the most tweets in `en`?", "sql": "SELECT T.Gender FROM ( SELECT T2.Gender, COUNT( text) AS num FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'en' GROUP BY T2.Gender ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["user", "twitter"]}, "evidence": "\"en\" is the language and refers to Lang = 'en'; most tweet in 'en' refers to Max(Count(text where Lang = 'en'))"}
{"sample_id": 869, "db_id": "cs_semester", "final": {"question": "Which professor advised Willie Rechert to work as a research assistant? Please give his or her full name.", "sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Willie' AND T3.l_name = 'Rechert'", "source_tables": ["ra", "student", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; prof_id refers to professor\u2019s ID; full name refers to f_name and l_name;"}
{"sample_id": 914, "db_id": "cs_semester", "final": {"question": "List the research assistants' full names, capabilities and GPAs who were under the supervision of Merwyn Conkay.", "sql": "SELECT T3.f_name, T3.l_name, T2.capability, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Merwyn' AND T1.last_name = 'Conkay'", "source_tables": ["ra", "student", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full names = f_name, l_name;"}
{"sample_id": 925, "db_id": "cs_semester", "final": {"question": "What is the name of the most difficult course?", "sql": "SELECT name FROM course WHERE diff = ( SELECT MAX(diff) FROM course )", "source_tables": ["course"]}, "evidence": "difficulty of a course refers to diff; most difficult course refers to MAX(diff);"}
{"sample_id": 880, "db_id": "cs_semester", "final": {"question": "Give the grade score for Rik Unsworth in \"Computer Network\".", "sql": "SELECT CASE grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 ELSE 1 END AS result FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE f_name = 'Rik' AND l_name = 'Unsworth' AND course_id IN ( SELECT course_id FROM course WHERE name = 'Computer Network' ) )", "source_tables": ["course", "student", "registration"]}, "evidence": "Academic grades awarded for participation in a course are A, B, C, D and F where Grade 'A' means excellent, Grade 'B' means good, Grade 'C' means fair, Grade 'D' means poorly pass, if grade is null or empty, it means that this student fails to pass this course in which grade = NULL;"}
{"sample_id": 945, "db_id": "cs_semester", "final": {"question": "Among the students with less than four intelligence, list the full name and phone number of students with a greater than 3 GPA.", "sql": "SELECT f_name, l_name, phone_number FROM student WHERE gpa > 3 AND intelligence < 4", "source_tables": ["student"]}, "evidence": "intelligence < 4; full name = f_name, l_name; gpa > 3;"}
{"sample_id": 955, "db_id": "cs_semester", "final": {"question": "Calculate the difference between the average satisfaction of the students with high salaries and no salary.", "sql": "SELECT AVG(T2.sat) - ( SELECT AVG(T2.sat) FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free' ) AS diff FROM RA AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high'", "source_tables": ["registration", "ra"]}, "evidence": "average satisfaction difference = SUBTRACT(AVG(sat where salary = 'high')), (AVG(sat where salary = 'free')); satisfaction refers to sat; no salary refers to salary = 'free';"}
{"sample_id": 896, "db_id": "cs_semester", "final": {"question": "Among the easiest courses, what is the name of the course where most students got an A?", "sql": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.diff = 1 GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "source_tables": ["course", "registration"]}, "evidence": "diff refers to difficulty; the easiest courses refers to diff = 1; A refers to an excellent grade in which grade = 'A' for the course;"}
{"sample_id": 948, "db_id": "cs_semester", "final": {"question": "What is the average capability of students with less than a 2.5 GPA?", "sql": "SELECT CAST(SUM(T1.capability) AS REAL) / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa < 2.5", "source_tables": ["student", "ra"]}, "evidence": "average capability = AVG(capability); gpa < 2.5;"}
{"sample_id": 964, "db_id": "cs_semester", "final": {"question": "List the student's first and last name that got a C in the course named \"Applied Deep Learning\".", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade = 'C'", "source_tables": ["course", "student", "registration"]}, "evidence": "student's first name refers to f_name; student's last name refers to l_name; got a C refers to grade = 'C';"}
{"sample_id": 957, "db_id": "cs_semester", "final": {"question": "Among the professors with more than average teaching ability, list the full name and email address of the professors who advise two or more students.", "sql": "SELECT T2.first_name, T2.last_name, T2.email FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability > ( SELECT AVG(teachingability) FROM prof ) GROUP BY T2.prof_id HAVING COUNT(T1.student_id) >= 2", "source_tables": ["ra", "prof"]}, "evidence": "more than average teaching ability refers to teachingability > AVG(teachingability); full_name of the professor = first_name, last_name; email address of the professor refers to email; advises two or more students refers to COUNT(student_id) > = 2;\n"}
{"sample_id": 928, "db_id": "cs_semester", "final": {"question": "Give the student's ID of students with 2.5 GPA and enrolled in C for Programmers.", "sql": "SELECT T2.student_id FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'C for Programmers' AND T1.gpa = 2.5", "source_tables": ["course", "student", "registration"]}, "evidence": ""}
{"sample_id": 899, "db_id": "cs_semester", "final": {"question": "What is the name of the course with the highest satisfaction from students?", "sql": "SELECT DISTINCT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.sat = 5", "source_tables": ["course", "registration"]}, "evidence": "sat refers to student's satisfaction degree with the course where sat = 5 stands for the highest satisfaction;"}
{"sample_id": 908, "db_id": "cs_semester", "final": {"question": "Name the professor who got graduation from the University of Boston.", "sql": "SELECT first_name, last_name FROM prof WHERE graduate_from = 'University of Boston'", "source_tables": ["prof"]}, "evidence": "Name the professor refers to full name which includes f_name and l_name;"}
{"sample_id": 937, "db_id": "cs_semester", "final": {"question": "What is the capability on research of the student named Alvera McQuillin?", "sql": "SELECT T2.capability FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T1.f_name = 'Alvera' AND T1.l_name = 'McQuillin'", "source_tables": ["student", "ra"]}, "evidence": "capability on research refers to capability;"}
{"sample_id": 929, "db_id": "cs_semester", "final": {"question": "Give the student's last name that gave the highest student satisfaction for the course \"Intro to Database 2\".", "sql": "SELECT T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to Database 2' ORDER BY T2.sat DESC LIMIT 1", "source_tables": ["course", "student", "registration"]}, "evidence": "student's last name refers to l_name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);"}
{"sample_id": 858, "db_id": "cs_semester", "final": {"question": "Which professor advised Faina Mallinar to become a research assistant? Please give his or her full name.", "sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Faina' AND T3.l_name = 'Mallinar'", "source_tables": ["ra", "student", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full name refers to f_name and l_name;"}
{"sample_id": 865, "db_id": "cs_semester", "final": {"question": "Which student failed the course Intro to Database 2? Please give his or her full name.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade IS NULL AND T3.name = 'Intro to Database 2'", "source_tables": ["course", "student", "registration"]}, "evidence": "If grade is NULL, it means that this student fails to pass the course; full name refers to f_name and l_name;"}
{"sample_id": 930, "db_id": "cs_semester", "final": {"question": "Among the students with high salary, what is total number of students with a GPA higher than 3?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T2.gpa > 3", "source_tables": ["student", "ra"]}, "evidence": "high salary refers to salary = 'high'; GPA higher than 3 refers to gpa > 3;"}
{"sample_id": 923, "db_id": "cs_semester", "final": {"question": "Mention the names and credits of course registered by the students who were under the supervision of female professor with the highest teaching ability.", "sql": "SELECT T5.name, T5.credit FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id INNER JOIN registration AS T4 ON T3.student_id = T4.student_id INNER JOIN course AS T5 ON T4.course_id = T5.course_id WHERE T2.gender = 'Female' ORDER BY T2.teachingability DESC LIMIT 1", "source_tables": ["course", "prof", "registration", "student", "ra"]}, "evidence": "female refers to gender = 'Female'; highest teaching ability refers to MAX(teachingability);"}
{"sample_id": 951, "db_id": "cs_semester", "final": {"question": "Give the full name and capability of students who failed in any courses.", "sql": "SELECT T2.f_name, T2.l_name, T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T2.student_id = T1.student_id INNER JOIN registration AS T3 ON T2.student_id = T3.student_id WHERE T3.grade IS NULL OR T3.grade = ''", "source_tables": ["registration", "student", "ra"]}, "evidence": "full name of students = f_name, l_name; failed refers to grade IS NULL;"}
{"sample_id": 882, "db_id": "cs_semester", "final": {"question": "State the name of research postgraduate student among Professor Zhihua Zhou's research assistants.", "sql": "SELECT T3.f_name, T3.l_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Zhihua' AND T3.type = 'RPG' AND T1.last_name = 'Zhou'", "source_tables": ["ra", "student", "prof"]}, "evidence": "research postgraduate student refers to type = 'RPG'; research assistant refers to the student who serves for research where the abbreviation is RA;"}
{"sample_id": 916, "db_id": "cs_semester", "final": {"question": "Among students registered for the most difficult course, list the students' full names who got grade A.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' ORDER BY T3.diff DESC LIMIT 1", "source_tables": ["course", "student", "registration"]}, "evidence": "difficulty refers to diff; most difficult course refers to MAX(diff); student's full names = f_name, l_name;"}
{"sample_id": 872, "db_id": "cs_semester", "final": {"question": "Give the number of research postgraduate students.", "sql": "SELECT COUNT(student_id) FROM student WHERE type = 'RPG'", "source_tables": ["student"]}, "evidence": "RPG is an abbreviated name of research postgraduate student in which type = 'RPG';"}
{"sample_id": 885, "db_id": "cs_semester", "final": {"question": "Give the phone number of the only student who obtained \"A\" in the course \"Intro to BlockChain\".", "sql": "SELECT T1.phone_number FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain' AND T2.grade = 'A'", "source_tables": ["course", "student", "registration"]}, "evidence": "A refers to an excellent grade in which grade = 'A' for the course;"}
{"sample_id": 936, "db_id": "cs_semester", "final": {"question": "List the course's name where students acquired a grade of D.", "sql": "SELECT T1.name FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'D'", "source_tables": ["course", "registration"]}, "evidence": ""}
{"sample_id": 962, "db_id": "cs_semester", "final": {"question": "Among students that gave satisfaction of value 4 for the course named \"Statistical Learning\", how many of them have a gpa of 3.8?", "sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Statistical learning' AND T2.sat = 4 AND T1.gpa = 3.8", "source_tables": ["course", "student", "registration"]}, "evidence": "satisfaction refers to sat;\n\nsat = 4; gpa = 3.8 "}
{"sample_id": 907, "db_id": "cs_semester", "final": {"question": "List the professors' IDs and students' IDs with the lowest research ability.", "sql": "SELECT prof_id, student_id FROM RA WHERE capability = ( SELECT MIN(capability) FROM RA )", "source_tables": ["ra"]}, "evidence": "the lowest research ability refers to MIN(capability); professor\u2019s ID refers to prof_id;"}
{"sample_id": 888, "db_id": "cs_semester", "final": {"question": "How many courses have the highest difficulty?", "sql": "SELECT COUNT(course_id) FROM course WHERE diff = 5", "source_tables": ["course"]}, "evidence": "diff refers to difficulty; diff is higher means the course is more difficult in which highest difficulty is expessed as diff = 5;"}
{"sample_id": 953, "db_id": "cs_semester", "final": {"question": "Find the full name and popularity of the professor who advises the most number of students.", "sql": "SELECT T1.first_name, T1.last_name, T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "source_tables": ["ra", "prof"]}, "evidence": "full name of the professor = first_name, last_name; most number of students refers to MAX(COUNT(student_id));"}
{"sample_id": 902, "db_id": "cs_semester", "final": {"question": "What is the popularity of the professor who advises the highest number of students with the highest research ability?", "sql": "SELECT T2.popularity FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id, T1.capability ORDER BY COUNT(T1.student_id) DESC, T1.capability DESC LIMIT 1", "source_tables": ["ra", "prof"]}, "evidence": "professor with the highest research ability refers to prof_id where MAX(capability);"}
{"sample_id": 959, "db_id": "cs_semester", "final": {"question": "What is the first and last name of students with highest gpa?", "sql": "SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )", "source_tables": ["student"]}, "evidence": "first name refers of students refers to f_name; last name of students refers to l_name; highest gpa refers to MAX(gpa);"}
{"sample_id": 938, "db_id": "cs_semester", "final": {"question": "Of courses with 3 credit, how many students have GPA of 3.2?", "sql": "SELECT COUNT(T1.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.credit = 3 AND T1.gpa = 3.2", "source_tables": ["course", "student", "registration"]}, "evidence": ""}
{"sample_id": 873, "db_id": "cs_semester", "final": {"question": "Which student has the highest gpa? Give the full name.", "sql": "SELECT f_name, l_name FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student )", "source_tables": ["student"]}, "evidence": "GPA is an abbreviated name of Grade Point Average where highest GPA = MAX(gpa); full name refers to f_name and l_name;"}
{"sample_id": 950, "db_id": "cs_semester", "final": {"question": "What is the difference in the average GPA of students who took the hardest and easiest courses?", "sql": "SELECT AVG(T1.gpa) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff IN (2, 1) GROUP BY T3.diff", "source_tables": ["course", "student", "registration"]}, "evidence": "difference in the average gpa = SUBTRACT(AVG(gpa WHERE MAX(diff)), AVG(gpa where min(diff))); difficulty of the course refers to diff; hardest course refers to MAX(diff); easiest course refers to MIN(diff);"}
{"sample_id": 904, "db_id": "cs_semester", "final": {"question": "How many students, who have a GPA between 3 to 4, failed a course?", "sql": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade IS NULL AND T1.gpa BETWEEN 3 AND 4", "source_tables": ["student", "registration"]}, "evidence": "GPA is an abbreviated name of Grade Point Average where GPA between 3 to 4 refers to gpa BETWEEN 3 AND 4; If grade is null or empty, it means that this student fails to pass this course;"}
{"sample_id": 926, "db_id": "cs_semester", "final": {"question": "Among the students with a gpa of 3.1 to 3.7, how many of them are undergraduate students?", "sql": "SELECT COUNT(student_id) FROM student WHERE gpa BETWEEN 3.1 AND 3.7 AND type = 'UG'", "source_tables": ["student"]}, "evidence": "gpa of 3.1 to 3.7 refers to gpa BETWEEN 3.1 AND 3.7; undergraduate students refers to type = 'UG';"}
{"sample_id": 933, "db_id": "cs_semester", "final": {"question": "In students with a grade of B, how many of them have an intellegence level of 3?", "sql": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.grade = 'B' AND T2.intelligence = 3", "source_tables": ["student", "registration"]}, "evidence": ""}
{"sample_id": 965, "db_id": "cs_semester", "final": {"question": "Among research postgraduate students, give the name of the course with the student satisfaction value of 1.", "sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.type = 'RPG'", "source_tables": ["course", "student", "registration"]}, "evidence": "research postgraduate students refers to type = 'RPG'; name of the course refers to name; satisfaction refers to sat; sat = 1;"}
{"sample_id": 935, "db_id": "cs_semester", "final": {"question": "Among professors with the highest popularity, how many of their students have research capability of 5?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.capability = 5 ORDER BY T2.popularity DESC LIMIT 1", "source_tables": ["ra", "prof"]}, "evidence": "highest popularity refers to MAX(popularity); research capability refers to capability; capability = 5;"}
{"sample_id": 922, "db_id": "cs_semester", "final": {"question": "Describe the full names, emails and intelligence of the students with the highest capability and salary.", "sql": "SELECT f_name, l_name, email, intelligence FROM student WHERE student_id IN ( SELECT student_id FROM RA WHERE salary = 'high' AND capability = ( SELECT MAX(capability) FROM RA ) )", "source_tables": ["student", "ra"]}, "evidence": "full names of the students = f_name; l_name; highest capability refers to MAX(capability); highest salary refers to salary = 'high';"}
{"sample_id": 913, "db_id": "cs_semester", "final": {"question": "Provide the full names and emails of unpaid research assistants.", "sql": "SELECT T2.f_name, T2.l_name, T2.email FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'free'", "source_tables": ["student", "ra"]}, "evidence": "full names = f_name, l_name; research assistant refers to the student who serves for research where the abbreviation is RA; unpaid research assistant refers to salary = 'free';"}
{"sample_id": 944, "db_id": "cs_semester", "final": {"question": "Calculate the average satisfaction of the good students with their courses.", "sql": "SELECT CAST(SUM(sat) AS REAL) / COUNT(course_id) FROM registration WHERE grade = 'B'", "source_tables": ["registration"]}, "evidence": "average satisfaction = DIVIDE(SUM(sat), COUNT(course_id)); satisfaction refers to sat; good student refers to grade = 'B';"}
{"sample_id": 862, "db_id": "cs_semester", "final": {"question": "Please list the full names of all the students who took the course Machine Learning Theory.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Machine Learning Theory'", "source_tables": ["course", "student", "registration"]}, "evidence": "full name refers to f_name and l_name;"}
{"sample_id": 877, "db_id": "cs_semester", "final": {"question": "For the professor who is working with Harrietta Lydford, how is his popularity?", "sql": "SELECT T1.popularity FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Harrietta' AND T3.l_name = 'Lydford'", "source_tables": ["ra", "student", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; higher popularity means more popular; prof_id refers to professor\u2019s ID;"}
{"sample_id": 884, "db_id": "cs_semester", "final": {"question": "Who were the students who failed the course \"Applied Deep Learning\"? Give the full name.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade IS NULL", "source_tables": ["course", "student", "registration"]}, "evidence": "If grade is null or empty, it means that this student fails to pass the course in which grade = NULL;"}
{"sample_id": 903, "db_id": "cs_semester", "final": {"question": "What is the average number of students who registered for the courses with a difficulty of 4?", "sql": "SELECT CAST(COUNT(T1.student_id) AS REAL) / COUNT(DISTINCT T2.course_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 4", "source_tables": ["course", "registration"]}, "evidence": "diff refers to difficulty; DIVIDE(COUNT(student_id where diff = 4), COUNT(course_id where diff = 4));"}
{"sample_id": 864, "db_id": "cs_semester", "final": {"question": "Please list the names of the courses taken by Laughton Antonio.", "sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.f_name = 'Laughton' AND T1.l_name = 'Antonio'", "source_tables": ["course", "student", "registration"]}, "evidence": ""}
{"sample_id": 883, "db_id": "cs_semester", "final": {"question": "Provide the number of students enrolled in the \"Statistical Learning\" course.", "sql": "SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T1.name = 'Statistical learning'", "source_tables": ["course", "registration"]}, "evidence": ""}
{"sample_id": 857, "db_id": "cs_semester", "final": {"question": "What is the phone number of Kerry Pryor?", "sql": "SELECT phone_number FROM student WHERE l_name = 'Pryor' AND f_name = 'Kerry'", "source_tables": ["student"]}, "evidence": ""}
{"sample_id": 901, "db_id": "cs_semester", "final": {"question": "Which of the two courses, \"Advanced Operating System\" or \"Intro to BlockChain', did most of the students receive an A in?", "sql": "SELECT T2.name FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.name IN ('Advanced Operating System', 'Intro to BlockChain') GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "source_tables": ["course", "registration"]}, "evidence": "A refers to an excellent grade in which grade = 'A';"}
{"sample_id": 918, "db_id": "cs_semester", "final": {"question": "Name the students of the Advanced Database Systems course with the highest satisfaction.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Advanced Database Systems' ORDER BY T2.sat DESC LIMIT 1", "source_tables": ["course", "student", "registration"]}, "evidence": "full the students = f_name, l_name; course refers to name; satisfaction refers to sat; highest satisfaction refers to MAX(sat);"}
{"sample_id": 911, "db_id": "cs_semester", "final": {"question": "Describe the names and credits of the least difficult courses.", "sql": "SELECT name, credit FROM course WHERE diff = ( SELECT MIN(diff) FROM course )", "source_tables": ["course"]}, "evidence": "diff refers to difficulty; the least difficult courses refer to MIN(diff);"}
{"sample_id": 874, "db_id": "cs_semester", "final": {"question": "For the 3-credit course with the easiest difficulty, how many students get an \"A\" in that course?", "sql": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T1.grade = 'A' AND T2.credit = '3' AND T2.diff = 1", "source_tables": ["course", "registration"]}, "evidence": "diff refers to difficulty; diff is higher means the course is more difficult in which easiest difficulty refers to diff = 1; 3-credit course refers to credit = '3'; get an \"A\" refers to grade = 'A' for the course;"}
{"sample_id": 875, "db_id": "cs_semester", "final": {"question": "How many students took the hardest course?", "sql": "SELECT COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.diff = 5", "source_tables": ["course", "registration"]}, "evidence": "diff refers to difficulty; diff is higher means the course is more difficult in which hardest difficulty is expressed as diff = 5;"}
{"sample_id": 906, "db_id": "cs_semester", "final": {"question": "What is the average GPA of the students with the highest research capability and high salary? List the full names of the students.", "sql": "SELECT AVG(T2.gpa), T2.f_name, T2.l_name FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.salary = 'high' AND T1.capability = 5 GROUP BY T2.student_id", "source_tables": ["student", "ra"]}, "evidence": "the highest research capability refers to capability = 5; high salary refers to salary = 'high'; prof_id refers to professor\u2019s ID; GPA is an abbreviated name of Grade Point Average where average GPA refers to AVG(gpa);"}
{"sample_id": 886, "db_id": "cs_semester", "final": {"question": "What is the percentage of Professor Ogdon Zywicki's research assistants are taught postgraduate students?", "sql": "SELECT CAST(SUM(CASE WHEN T3.type = 'TPG' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'", "source_tables": ["student", "ra", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; taught postgraduate student refers to type = 'TPG'; DIVIDE(COUNT(student_id where type = 'TPG' and first_name = 'Ogdon', last_name = 'Zywicki'), COUNT(first_name = 'Ogdon', last_name = 'Zywicki')) as percentage;"}
{"sample_id": 890, "db_id": "cs_semester", "final": {"question": "Among the most important courses, what is the name of the most difficult course?", "sql": "SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course )", "source_tables": ["course"]}, "evidence": "Higher credit means more important in which most important refers to MAX(credit); diff refers to difficulty; the most difficult course refers to MAX(diff);"}
{"sample_id": 919, "db_id": "cs_semester", "final": {"question": "Calculate the GPA of the semester for Laughton Antonio.", "sql": "SELECT CAST(SUM(T3.credit * CASE T1.grade WHEN 'A' THEN 4 WHEN 'B' THEN 3 WHEN 'C' THEN 2 WHEN 'D' THEN 1 ELSE 1 END) AS REAL) / COUNT(T3.credit) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T2.f_name = 'Laughton' AND T2.l_name = 'Antonio'", "source_tables": ["course", "student", "registration"]}, "evidence": "GPA of the semester = DIVIDE(SUM(MULTIPLY(credit, grade)), SUM(credit)); grade 'A' refers to gpa = 4; grade 'B' refers to gpa = 3; grade 'C' refers to gpa = 2; grade 'D' refers to gpa = 1;"}
{"sample_id": 898, "db_id": "cs_semester", "final": {"question": "How many students does Ogdon Zywicki advise?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki'", "source_tables": ["ra", "prof"]}, "evidence": "Ogdon Zywicki is a professor;"}
{"sample_id": 915, "db_id": "cs_semester", "final": {"question": "Describe the students' full names and grades in Intro to BlockChain course.", "sql": "SELECT T1.f_name, T1.l_name, T2.grade FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain'", "source_tables": ["course", "student", "registration"]}, "evidence": "student's full names = f_name, l_name;"}
{"sample_id": 946, "db_id": "cs_semester", "final": {"question": "Name the students with above-average capability.", "sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability > ( SELECT AVG(capability) FROM RA )", "source_tables": ["student", "ra"]}, "evidence": "name of the students = f_name, l_name; above average-capability refers to capability > AVG(capability);"}
{"sample_id": 947, "db_id": "cs_semester", "final": {"question": "For the students with an intelligence of 5, list the full name and courses taken by them who have less than a 3 GPA.", "sql": "SELECT T1.f_name, T1.l_name, T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.intelligence = 5 AND T1.gpa < 3", "source_tables": ["course", "student", "registration"]}, "evidence": "full name of the students = f_name, l_name; gpa < 3;"}
{"sample_id": 924, "db_id": "cs_semester", "final": {"question": "How many of the professors are female?", "sql": "SELECT COUNT(prof_id) FROM prof WHERE gender = 'Female'", "source_tables": ["prof"]}, "evidence": "female refers to gender = 'Female';"}
{"sample_id": 949, "db_id": "cs_semester", "final": {"question": "List the full name of the professors who advised students with intelligence 1.", "sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.intelligence = 1", "source_tables": ["ra", "student", "prof"]}, "evidence": "full name of the professors = first_name, last_name;"}
{"sample_id": 961, "db_id": "cs_semester", "final": {"question": "What is the salary range of the student with an email of grosellg@hku.hk?", "sql": "SELECT T1.salary FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.email = 'grosellg@hku.hk'", "source_tables": ["student", "ra"]}, "evidence": "salary range refers to salary;"}
{"sample_id": 859, "db_id": "cs_semester", "final": {"question": "How many research assistants does Sauveur Skyme have?", "sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Sauveur' AND T2.last_name = 'Skyme'", "source_tables": ["ra", "prof"]}, "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA;"}
{"sample_id": 894, "db_id": "cs_semester", "final": {"question": "How many students got an A in Applied Deep Learning?", "sql": "SELECT COUNT(T2.student_id) FROM course AS T1 INNER JOIN registration AS T2 ON T1.course_id = T2.course_id WHERE T2.grade = 'A' AND T1.name = 'Applied Deep Learning '", "source_tables": ["course", "registration"]}, "evidence": "A refers to an excellent grade in which grade = 'A' for the course;"}
{"sample_id": 1022, "db_id": "computer_student", "final": {"question": "Who are the top 5 professors who teaches the highest number of professional or master/undergraduate courses?", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' GROUP BY T2.p_id ORDER BY COUNT(T2.p_id) DESC LIMIT 5", "source_tables": ["course", "taughtby"]}, "evidence": "professors refers to course.p_id; highest number of professional or master/undergraduate courses refers to max(count(course.course_id)) where courseLevel = 'Level_500'"}
{"sample_id": 992, "db_id": "computer_student", "final": {"question": "Please list the IDs of the advisors of the students who are in the 5th year of their program.", "sql": "SELECT T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_5'", "source_tables": ["advisedby", "person"]}, "evidence": "IDs of the advisors refers to p_id_dummy; in the 5th year of their program refers to yearsInProgram = 'Year_5'"}
{"sample_id": 1013, "db_id": "computer_student", "final": {"question": "List the advisor IDs for students with eighth year of program and position status in faculty of those professors.", "sql": "SELECT T1.p_id_dummy, T2.hasPosition FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_8'", "source_tables": ["advisedby", "person"]}, "evidence": "advisor IDs refers to p_id_dummy and person.p_id where professor = 1; eighth year of program refers to yearsInprogram = 'Year_8'; position status in faculty of those professors refers to hasPosition"}
{"sample_id": 1014, "db_id": "computer_student", "final": {"question": "List any five of course IDs with professor IDs who taught master courses.", "sql": "SELECT T1.course_id, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' LIMIT 5", "source_tables": ["course", "taughtby"]}, "evidence": "professor IDs refers to taughtBy.p_id; master course refers to courseLevel = 'Level_500'"}
{"sample_id": 1023, "db_id": "computer_student", "final": {"question": "How many advisors are in charge of advising all the students in 1st year?", "sql": "SELECT COUNT(T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_1' AND T2.student = 1", "source_tables": ["advisedby", "person"]}, "evidence": "advisors refers to p_id_dummy; students in 1st year refers to student = 1 and yearsInProgram = 'Year_1'"}
{"sample_id": 1029, "db_id": "computer_student", "final": {"question": "Among the students being advised by advisors, which students' year in the program do the advisors advise the majority of?", "sql": "SELECT T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.student = 1 GROUP BY T2.yearsInProgram ORDER BY COUNT(T1.p_id_dummy) DESC LIMIT 1", "source_tables": ["advisedby", "person"]}, "evidence": "students refers to student = 1; students' year in the program do the advisors advise the majority of refers to max(count(yearsInProgram))"}
{"sample_id": 1005, "db_id": "computer_student", "final": {"question": "List the person IDs and course levels of the affiliated professors in faculty.", "sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_aff'", "source_tables": ["course", "taughtby", "person"]}, "evidence": "person IDs refers to person.p_id; affiliated professors in faculty refers to professor = 1 and hasPosition = 'Faculty_aff'"}
{"sample_id": 1011, "db_id": "computer_student", "final": {"question": "Find the professor ID and position in faculty who taught high-level undergraduate course of less than 10 in ID.", "sql": "SELECT T1.p_id, T1.hasPosition FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.courseLevel = 'Level_400' AND T2.course_id < 10", "source_tables": ["course", "taughtby", "person"]}, "evidence": "professor ID refers to person.p_id when professor = 1; position in faculty refers to hasPosition; high-level undergraduate course refers to courseLevel = 'Level_400'; less than 10 in ID refers to course.course_id < 10"}
{"sample_id": 1027, "db_id": "computer_student", "final": {"question": "What year in the program do the students with more than 2 advisors are in?", "sql": "SELECT T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.student = 1 GROUP BY T2.p_id HAVING COUNT(T2.p_id) > 2", "source_tables": ["advisedby", "person"]}, "evidence": "students refers to student = 1; more than 2 advisors refers to count(p_id_dummy) > 2"}
{"sample_id": 1015, "db_id": "computer_student", "final": {"question": "How many students are under advisor 415?", "sql": "SELECT COUNT(*) FROM advisedBy WHERE p_id_dummy = 415", "source_tables": ["advisedby"]}, "evidence": "advisor 415 refers to p_id_dummy = 415"}
{"sample_id": 1002, "db_id": "computer_student", "final": {"question": "Calculate the percentage of high-level undergraduate course.", "sql": "SELECT CAST(SUM(CASE  WHEN courseLevel = 'Level_400' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM course", "source_tables": ["course"]}, "evidence": "high-level undergraduate course refers to courseLevel = 'Level_400'; percentage = divide(count(course.course_id) when courseLevel = 'Level_400', count(course.course_id)) * 100%"}
{"sample_id": 1033, "db_id": "computer_student", "final": {"question": "What is the total of professional courses available at the university? List out all the course id.", "sql": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_500'", "source_tables": ["course"]}, "evidence": "professional courses refers to courseLevel = 'Level_500'; course id refers to course.course_id"}
{"sample_id": 993, "db_id": "computer_student", "final": {"question": "How many students are advised to teach by a professor teaching basic or medium undergraduate courses?", "sql": "SELECT COUNT(DISTINCT T4.p_id) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id INNER JOIN advisedBy AS T4 ON T4.p_id = T1.p_id WHERE T1.professor = 1 AND T3.courseLevel = 'Level_300'", "source_tables": ["course", "taughtby", "advisedby", "person"]}, "evidence": "students refers to advisedBy.p_id; professor refers to p_id_dummy and taughtBy.p_id and professor = 1; basic or medium undergraduate courses refers to courseLevel = 'Level_300'"}
{"sample_id": 982, "db_id": "computer_student", "final": {"question": "Which are the courses with the most number of professors? State the course ID and the level of the course.", "sql": "SELECT T1.course_id, T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.courseLevel ORDER BY COUNT(T1.course_id) DESC LIMIT 1", "source_tables": ["course", "taughtby"]}, "evidence": "courses refers taughtBy.course_id; most number of professors\u00a0 refers to max(count(taughtBy.p_id)); level of the course refers to courseLevel"}
{"sample_id": 973, "db_id": "computer_student", "final": {"question": "What are the courses taught by the advisors who gave advice to student with ID 376?", "sql": "SELECT T3.course_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN taughtBy AS T3 ON T2.p_id = T3.p_id WHERE T1.p_id = 141", "source_tables": ["taughtby", "advisedby", "person"]}, "evidence": "courses refers to course_id; advisors refers to p_id_dummy and taughtBy.p_id; student with ID 376 refers to advisedBy.p_id = 376"}
{"sample_id": 1018, "db_id": "computer_student", "final": {"question": "Which professor taught the least amount of courses?", "sql": "SELECT p_id FROM taughtBy GROUP BY p_id ORDER BY COUNT(course_id) ASC LIMIT 1", "source_tables": ["taughtby"]}, "evidence": "professor refers to taughtBy.p_id; least amount of courses refers to min(count(course_id))"}
{"sample_id": 998, "db_id": "computer_student", "final": {"question": "Please list the IDs of the top 3 professors that teaches the most courses.", "sql": "SELECT T1.p_id FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1 GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 3", "source_tables": ["taughtby", "person"]}, "evidence": "IDs of the professors refers to taughtBy.p_id and professor = 1; teaches the most courses refers to max(count(course_id))"}
{"sample_id": 984, "db_id": "computer_student", "final": {"question": "How many people teaches course no.11?", "sql": "SELECT COUNT(*) FROM taughtBy WHERE course_id = 11", "source_tables": ["taughtby"]}, "evidence": "people refers to taughtBy.p_id; course no.11 refers to course_id = 11"}
{"sample_id": 1028, "db_id": "computer_student", "final": {"question": "How many professors teaches basic or medium undergraduate courses?", "sql": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_300'", "source_tables": ["course", "taughtby"]}, "evidence": "professors refers to taughtBy.p_id; basic or medium undergraduate courses refers to couresLevel = 'Level_300'"}
{"sample_id": 1025, "db_id": "computer_student", "final": {"question": "Between the faculty employee professors, how many teaches high-level or harder undergraduate courses? Indicate each of the professors unique identifying number.", "sql": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_eme' AND T1.professor = 1 AND T3.courseLevel = 'Level_400'", "source_tables": ["course", "taughtby", "person"]}, "evidence": "faculty employee professors refers to hasPosition = 'Faculty_eme' and professor = 1; high-level or harder undergraduate courses refers to courseLevel = 'Level_400'; professors unique identifying number refers to person.p_id"}
{"sample_id": 970, "db_id": "computer_student", "final": {"question": "How many courses are there for basic or medium undergraduate courses?", "sql": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_300'", "source_tables": ["course"]}, "evidence": "basic or medium undergraduate courses refers to courseLevel = 'Level_300'; courses refers to course.course_id"}
{"sample_id": 994, "db_id": "computer_student", "final": {"question": "Among the courses that are basic or medium undergraduate courses, how many of them are taught by a faculty member?", "sql": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T2.p_id = T3.p_id WHERE T3.professor = 1 AND T1.courseLevel = 'Level_300'", "source_tables": ["course", "taughtby", "person"]}, "evidence": "courses that are basic or medium undergraduate courses refers to courseLevel = 'Level_300'; faculty member refers to hasPosition ! = 0"}
{"sample_id": 985, "db_id": "computer_student", "final": {"question": "Which course has more teachers, course no.16 or course no.18?", "sql": "SELECT course_id FROM taughtBy WHERE course_id = 11 OR course_id = 18 GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1", "source_tables": ["taughtby"]}, "evidence": "teachers refers to taughtBy.p_id; course no.16 refers to course_id = 16; course no.18 refers to course_id = 18"}
{"sample_id": 991, "db_id": "computer_student", "final": {"question": "Please list the levels of the all courses taught by teacher no.79.", "sql": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 79", "source_tables": ["course", "taughtby"]}, "evidence": "levels of the all courses refers to courseLevel; teacher no.79 refers to taughtBy.p_id = 79"}
{"sample_id": 1034, "db_id": "computer_student", "final": {"question": "What is the sum of year 1 and year 2 students?", "sql": "SELECT COUNT(*) FROM person WHERE yearsInProgram = 'Year_1' OR yearsInProgram = 'Year_2'", "source_tables": ["person"]}, "evidence": "year 1 and year 2 students refers to yearsInProgram = 'Year_1' and yearsInProgram = 'Year_2' and student = 1"}
{"sample_id": 987, "db_id": "computer_student", "final": {"question": "Please list the IDs of the teachers who have advised more than 4 others to teach.", "sql": "SELECT p_id_dummy FROM advisedBy GROUP BY p_id_dummy HAVING COUNT(p_id_dummy) > 4", "source_tables": ["advisedby"]}, "evidence": "teachers refers to p_id_dummy; have advised more than 4 others refers to count(advisedBy.p_id) > 4"}
{"sample_id": 1035, "db_id": "computer_student", "final": {"question": "How many courses were taught by a professor who is currently the member of faculty?", "sql": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0", "source_tables": ["taughtby", "person"]}, "evidence": "professor refers to professor = 1;\u00a0 member of faculty refers to hasPosition <> 0"}
{"sample_id": 1008, "db_id": "computer_student", "final": {"question": "List the course IDs and levels of person IDs from 40 to 50.", "sql": "SELECT T1.course_id, T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id BETWEEN 40 AND 50", "source_tables": ["course", "taughtby"]}, "evidence": "course IDs and levels refers to course.course_id and courseLevel; person IDs from 40 to 50 refers to taughtBy.p_id between 40 and 50"}
{"sample_id": 1009, "db_id": "computer_student", "final": {"question": "Describe the course level and list of person IDs who taught course ID of 147.", "sql": "SELECT T1.courseLevel, T1.course_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.p_id = 141", "source_tables": ["course", "taughtby"]}, "evidence": "person IDs refers to taughtBy.p_id; course ID of 147 refers to course.course_id = 147"}
{"sample_id": 1024, "db_id": "computer_student", "final": {"question": "How many professors teaches no more than two high-level or harder undergraduate courses?", "sql": "SELECT COUNT(*) FROM ( SELECT COUNT(T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400' GROUP BY T2.p_id HAVING COUNT(DISTINCT T1.course_id) <= 2 )", "source_tables": ["course", "taughtby"]}, "evidence": "professors refers to taughtBy.p_id; high-level or harder undergraduate courses\u00a0 refers to courseLevel = 'Level_400' ; no more than two refers to count(taughtBy.course_id) < = 2"}
{"sample_id": 1007, "db_id": "computer_student", "final": {"question": "List down the advised student IDs and IDs of employing professor in faculty.", "sql": "SELECT T1.p_id, T2.p_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE hasPosition = 'Faculty_eme'", "source_tables": ["advisedby", "person"]}, "evidence": "advised student IDs refers to person.p_id; IDs of employing professor in faculty refers to p_id_dummy and hasPosition = 'Faculty_eme'"}
{"sample_id": 974, "db_id": "computer_student", "final": {"question": "Name the advisors for students in Year 3 of the program.", "sql": "SELECT T1.p_id FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'", "source_tables": ["advisedby", "person"]}, "evidence": "advisors refers to p_id_dummy; students in Year 3 of the program refers to yearsInProgram = 'Year_3'"}
{"sample_id": 995, "db_id": "computer_student", "final": {"question": "For the professor who advised student no.6, please list the IDs of the courses he or she teaches.", "sql": "SELECT T2.course_id FROM taughtBy AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id INNER JOIN advisedBy AS T3 ON T3.p_id = T1.p_id WHERE T1.p_id = 9", "source_tables": ["course", "taughtby", "advisedby"]}, "evidence": "professor refers to p_id_dummy and professor = 1; student no.6 refers to advisedBy.p_id = 6; IDs of the courses refers to taughtBy.course_id"}
{"sample_id": 988, "db_id": "computer_student", "final": {"question": "How many basic or medium undergraduate courses are taught by a professor?", "sql": "SELECT COUNT(*) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.professor = 1", "source_tables": ["course", "taughtby", "person"]}, "evidence": "basic or medium undergraduate courses refers to courseLevel = 'Level_300'; professor refers to professor = 1"}
{"sample_id": 1021, "db_id": "computer_student", "final": {"question": "Among the faculty affiliated professor, how many professors teaches professional or master/undergraduate courses?", "sql": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T1.hasPosition = 'Faculty_aff' AND T1.professor = 1 AND T3.courseLevel = 'Level_500'", "source_tables": ["course", "taughtby", "person"]}, "evidence": "faculty affiliated professor refers to professor = 1 and hasPosition = 'Faculty_aff'; professional or master/undergraduate courses refers to courseLevel = 'Level_500'"}
{"sample_id": 1020, "db_id": "computer_student", "final": {"question": "Which professor teaches the highest number of professional or master/graduate courses?", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500' GROUP BY T2.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "source_tables": ["course", "taughtby"]}, "evidence": "professor refers to taughtBy.p_id; highest number of professional or master/graduate courses refers to max(count(taughtBy.course_id)) where courseLevel = 'Level_500'"}
{"sample_id": 1012, "db_id": "computer_student", "final": {"question": "List the professor ID who taught the course ID from 121 to 130 of basic undergraduate courses.", "sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_300' AND T1.course_id > 121 AND T1.course_id < 130", "source_tables": ["course", "taughtby"]}, "evidence": "professor ID refers to taughtBy.p_id; course ID from 121 to 130 of basic undergraduate courses refers to courseLevel = 'Level_300' and course.course_id between 121 and 130"}
{"sample_id": 978, "db_id": "computer_student", "final": {"question": "State the courses and level of courses by professors who are faculty employees.", "sql": "SELECT T3.course_id, T3.courseLevel FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T1.course_id WHERE T2.hasPosition = 'Faculty_eme'", "source_tables": ["course", "taughtby", "person"]}, "evidence": "professors who are faculty employees refers to professor = 1; faculty employees refers to hasPosition = 'Faculty_eme'"}
{"sample_id": 1000, "db_id": "computer_student", "final": {"question": "What is the average number of courses taught by a professor?", "sql": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) AS num FROM taughtBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.professor = 1", "source_tables": ["taughtby", "person"]}, "evidence": "professor refers to professor = 1; average number of courses = divide(count(taughtBy.course_id), count(taughtBy.p_id) where professor = 1 )"}
{"sample_id": 1017, "db_id": "computer_student", "final": {"question": "How many non-faculty members are not undergoing the phase of qualifications?", "sql": "SELECT COUNT(*) FROM person WHERE hasPosition = 0 AND inPhase = 0", "source_tables": ["person"]}, "evidence": "non-faculty members refers to hasPosition = 0; are not undergoing the phase of qualifications refers to inPhase = 0"}
{"sample_id": 1032, "db_id": "computer_student", "final": {"question": "How many courses were taught by more than 4 people?", "sql": "SELECT COUNT(*) FROM ( SELECT COUNT(course_id) FROM taughtBy GROUP BY course_id HAVING COUNT(course_id) > 4 )", "source_tables": ["taughtby"]}, "evidence": "courses refers to taughtBy.course_id; more than 4 people refers to count(taughtBy.p_id) > 4"}
{"sample_id": 980, "db_id": "computer_student", "final": {"question": "Provide the ID of professors who teach in both harder undergraduate course and master/graduate courses.", "sql": "SELECT DISTINCT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400' OR T1.courseLevel = 'Level_500'", "source_tables": ["course", "taughtby"]}, "evidence": "harder undergraduate course refers to courseLevel = 'Level_400'; master/graduate courses refers to courseLevel = 'Level_500'; ID of professors refers to taughtBy.p_id"}
{"sample_id": 1030, "db_id": "computer_student", "final": {"question": "How many students that are undergoing the pre-phase of qualification have advisors?", "sql": "SELECT COUNT(T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.inPhase = 'Pre_Quals' AND T2.student = 1", "source_tables": ["advisedby", "person"]}, "evidence": "students refers to student = 1 and ; undergoing the phase of pre-qualification refers to inPhase = 'Pre-Quals'; have advisors refers to advisedBy.p_id"}
{"sample_id": 1100, "db_id": "talkingdata", "final": {"question": "What is the average age of all the vivo device users?", "sql": "SELECT AVG(age) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "average age = AVG(age); vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1210, "db_id": "talkingdata", "final": {"question": "How many women have apps from the game-Finding fault category installed on their device?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T1.age < 23 AND T1.gender = 'F' AND T3.is_active = 0 AND T3.is_installed = 1", "source_tables": ["gender_age", "events_relevant", "app_events_relevant"]}, "evidence": "women refers to gender = 'F'; installed refers to is_installed = 1;"}
{"sample_id": 1082, "db_id": "talkingdata", "final": {"question": "Please list the ages of all the users who use a Galaxy Note 2.", "sql": "SELECT T2.age FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.device_model = 'Galaxy Note 2'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "Galaxy Note 2 refers to device_model = 'Galaxy Note 2';"}
{"sample_id": 1170, "db_id": "talkingdata", "final": {"question": "List down the labels' IDs and categories of the app ID \"5758400314709850000\".", "sql": "SELECT T1.label_id, T2.category FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T1.app_id = 5758400314709850000", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1132, "db_id": "talkingdata", "final": {"question": "Which category does the app id No.894384172610331000 belong to?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = '894384172610331000'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1166, "db_id": "talkingdata", "final": {"question": "How many events were participated by the users at longitude of \"-156\"?", "sql": "SELECT COUNT(event_id) FROM events WHERE longitude = -156", "source_tables": ["events"]}, "evidence": ""}
{"sample_id": 1204, "db_id": "talkingdata", "final": {"question": "How many apps are labeled 7?", "sql": "SELECT COUNT(app_id) FROM app_labels WHERE label_id = 7", "source_tables": ["app_labels"]}, "evidence": "labeled 7 refers to label_id = 7;"}
{"sample_id": 1192, "db_id": "talkingdata", "final": {"question": "Mention the group of age of users who use phone brand of LG.", "sql": "SELECT T1.\"group\" FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "group of age refers to group;"}
{"sample_id": 1164, "db_id": "talkingdata", "final": {"question": "How many events did the device ID \"3915082290673130000\" join?", "sql": "SELECT COUNT(event_id) FROM events WHERE device_id = 3915082290673130000", "source_tables": ["events"]}, "evidence": ""}
{"sample_id": 1154, "db_id": "talkingdata", "final": {"question": "Please list the event IDs of the events that have happened on the device of the oldest user.", "sql": "SELECT T2.event_id FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id ORDER BY T1.age DESC LIMIT 1", "source_tables": ["gender_age", "events"]}, "evidence": "oldest user refers to MAX(age);"}
{"sample_id": 1140, "db_id": "talkingdata", "final": {"question": "What is the age of the youngest female device user?", "sql": "SELECT MIN(age) FROM gender_age WHERE gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "youngest refers to MIN(age); female refers to gender = 'F';"}
{"sample_id": 1169, "db_id": "talkingdata", "final": {"question": "Provide the number of events participated by the device users at coordinates of (80,37).", "sql": "SELECT COUNT(event_id) FROM events WHERE longitude = 80 AND latitude = 37", "source_tables": ["events"]}, "evidence": "coordinates of (80,37) refers to longitude = 80 and latitude = 37;"}
{"sample_id": 1050, "db_id": "talkingdata", "final": {"question": "What is the age of the oldest active user that participated in the event held on 5/6/2016 at coordinates 121, 31?", "sql": "SELECT T3.age FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE T1.is_active = 1 AND T2.longitude = 121 AND T2.latitude = 31 AND SUBSTR(T2.timestamp, 1, 10) = '2016-05-06' ORDER BY T3.age DESC LIMIT 1", "source_tables": ["gender_age", "events_relevant", "app_events"]}, "evidence": "oldest user refers to MAX(age); active user refers to is_active = 1; on 5/6/2016 refers to timestamp LIKE '2016-05-06%'; coordinates 121, 31 refers to longitude = 121 AND latitude = 31;"}
{"sample_id": 1242, "db_id": "talkingdata", "final": {"question": "List all the devices' brands and models of events on 5/7/2016 at 6:03:22 AM.", "sql": "SELECT T1.phone_brand, T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T2.timestamp = '2016-05-07 06:03:22'", "source_tables": ["events_relevant", "phone_brand_device_model2"]}, "evidence": "devices' brands refers to phone_brand; models refers to device_model; on 5/7/2016 at 6:03:22 AM refers to timestamp = '2016-05-07 06:03:22';"}
{"sample_id": 1214, "db_id": "talkingdata", "final": {"question": "Locate all events on devices of women under 30 years old.", "sql": "SELECT T1.device_id FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T1.age < 30", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "locate = longitude, latitude; women refers to gender = 'F'; under 30 years old refers to age < 30;"}
{"sample_id": 1155, "db_id": "talkingdata", "final": {"question": "How many events have happened on the device of the youngest female user?", "sql": "SELECT COUNT(T1.event_id) FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F' GROUP BY T1.event_id, T2.age ORDER BY T2.age LIMIT 1", "source_tables": ["gender_age", "events"]}, "evidence": "youngest refers to MIN(age); female refers to gender = 'F';"}
{"sample_id": 1103, "db_id": "talkingdata", "final": {"question": "How many users installed the app but are not active?", "sql": "SELECT COUNT(app_id) FROM app_events WHERE is_installed = 1 AND is_active = 0", "source_tables": ["app_events"]}, "evidence": "installed refers to is_installed = 1; not active refers to is_active = 0;"}
{"sample_id": 1218, "db_id": "talkingdata", "final": {"question": "Please list any three events that have the longitude and latitude of 0.", "sql": "SELECT event_id FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3", "source_tables": ["events"]}, "evidence": ""}
{"sample_id": 1041, "db_id": "talkingdata", "final": {"question": "How many male users are in the age group of M32-38?", "sql": "SELECT COUNT(gender) FROM gender_age WHERE gender = 'M' AND \"group\" = 'M32-38'", "source_tables": ["gender_age"]}, "evidence": "male refers to gender = 'M'; age group refers to group; `group` = 'M32-38';"}
{"sample_id": 1238, "db_id": "talkingdata", "final": {"question": "How many events does the device \"4069764298338760000\" have?", "sql": "SELECT COUNT(event_id) FROM events WHERE device_id = 4069764298338760000", "source_tables": ["events"]}, "evidence": ""}
{"sample_id": 1046, "db_id": "talkingdata", "final": {"question": "What is the model of the oldest user's device?", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id ORDER BY T2.age DESC LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "model of the device refers to device_model; oldest user refers to MAX(age);"}
{"sample_id": 1119, "db_id": "talkingdata", "final": {"question": "What is the phone brand of the device model \"\u575a\u679c\u624b\u673a\"?", "sql": "SELECT phone_brand FROM phone_brand_device_model2 WHERE device_model = '\u575a\u679c\u624b\u673a'", "source_tables": ["phone_brand_device_model2"]}, "evidence": ""}
{"sample_id": 1042, "db_id": "talkingdata", "final": {"question": "How many female users over the age of 50 are there?", "sql": "SELECT COUNT(gender) FROM gender_age WHERE age > 50 AND gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F'; over the age of 50 refers to age > 50;"}
{"sample_id": 1235, "db_id": "talkingdata", "final": {"question": "What is the percentage of device users in the F27-28 age group who experienced an event on the 3rd of May 2016?", "sql": "SELECT SUM(IIF(T1.\"group\" = 'F27-28', 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE SUBSTR(T2.timestamp, 1, 10) = '2016-05-03'", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(`group` = 'F27-28'), COUNT(device_id)), 1.0); on the 3rd of May 2016 refers to timestamp = '2016-05-03%';"}
{"sample_id": 1044, "db_id": "talkingdata", "final": {"question": "What is the gender of the youngest user?", "sql": "SELECT gender FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age )", "source_tables": ["gender_age"]}, "evidence": "youngest user refers to MIN(age);"}
{"sample_id": 1123, "db_id": "talkingdata", "final": {"question": "Provide the number of events that happened on 2016/5/6.", "sql": "SELECT COUNT(event_id) FROM events WHERE SUBSTR(\"timestamp\", 1, 10) = '2016-05-06'", "source_tables": ["events"]}, "evidence": "on 2016/5/6 refers to timestamp = '2016/5/6 XX:XX:XX';"}
{"sample_id": 1185, "db_id": "talkingdata", "final": {"question": "State the gender of users who use the device \"-9222956879900150000\".", "sql": "SELECT gender FROM gender_age WHERE device_id = -9222956879900150000", "source_tables": ["gender_age"]}, "evidence": "device refers to device_id; device_id = -9222956879900150000;"}
{"sample_id": 1134, "db_id": "talkingdata", "final": {"question": "How many times is the number of active apps in the event that happened at 7:50:28 on 2016/5/2 than in the event that happened at 7:41:03 on 2016/5/2?", "sql": "SELECT SUM(IIF(timestamp = '2016-05-02 7:50:28', 1, 0)) / SUM(IIF(timestamp = '2016-05-02 7:41:03', 1, 0)) AS num FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.is_active = '1'", "source_tables": ["events", "app_events"]}, "evidence": "how many times = DIVIDE(SUM(IF(timestamp = '2016/5/2 7:50:28', 1,0)), SUM(IF(timestamp = '2016/5/2 7:41:03',1,0))); active refers to is_active = '1'; at 7:50:28 on 2016/5/2 refers to timestamp = '2016/5/2 7:50:28'; at 7:41:03 on 2016/5/2 refers to timestamp = '2016/5/2 7:41:03';"}
{"sample_id": 1122, "db_id": "talkingdata", "final": {"question": "Give the time stamp for event No.887711.", "sql": "SELECT timestamp FROM events WHERE event_id = '887711'", "source_tables": ["events"]}, "evidence": "event no. refers to event_id; event_id = '887711';"}
{"sample_id": 1127, "db_id": "talkingdata", "final": {"question": "Give the number of 30-year-old users who were active in the events on 2016/5/2.", "sql": "SELECT COUNT(T3.device_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE SUBSTR(\"timestamp\", 1, 10) = '2016-05-02' AND T1.is_active = 1 AND T3.age = '30'", "source_tables": ["gender_age", "events", "app_events"]}, "evidence": "30-year-old refers to age = '30'; active refers to is_active = 1; on 2016/5/2 refers to timestamp = '2016/5/2 XX:XX:XX';"}
{"sample_id": 1205, "db_id": "talkingdata", "final": {"question": "Identify by their id all the devices that are used by women who are in the age range of 29 to 31 years.", "sql": "SELECT device_id FROM gender_age_train WHERE age BETWEEN 29 AND 31 AND gender = 'F'", "source_tables": ["gender_age_train"]}, "evidence": "id refers to device_id; women refers to gender = 'F'; age range of 29 to 31 years refers to age between 29 and 31;"}
{"sample_id": 1208, "db_id": "talkingdata", "final": {"question": "On which brand of phone are the most applications installed?", "sql": "SELECT T.phone_brand FROM ( SELECT T1.phone_brand, COUNT(T4.is_active) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id INNER JOIN events_relevant AS T3 ON T2.device_id = T3.device_id INNER JOIN app_events_relevant AS T4 ON T3.event_id = T4.event_id WHERE T4.is_active = 1 GROUP BY T1.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "events_relevant", "app_events_relevant", "phone_brand_device_model2"]}, "evidence": "brand of phone refers to phone_brand; most applications are installed refers to MAX(COUNT(is_installed = 1));"}
{"sample_id": 1052, "db_id": "talkingdata", "final": {"question": "What are the categories of the top 2 oldest events?", "sql": "SELECT T4.category FROM events_relevant AS T1 INNER JOIN app_events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN app_labels AS T3 ON T3.app_id = T2.app_id INNER JOIN label_categories AS T4 ON T3.label_id = T4.label_id ORDER BY T1.timestamp LIMIT 2", "source_tables": ["events_relevant", "label_categories", "app_events_relevant", "app_labels"]}, "evidence": "oldest event refers to MIN(timestamp);"}
{"sample_id": 1086, "db_id": "talkingdata", "final": {"question": "To which categories does app user no.1977658975649780000 belong?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 1977658975649780000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "app no. refers to app_id; app_id = 1977658975649780000;"}
{"sample_id": 1056, "db_id": "talkingdata", "final": {"question": "What is the percentage of female OPPO users against the male OPPO users?", "sql": "SELECT SUM(IIF(T2.gender = 'F', 1, 0)) * 100 / COUNT(T2.device_id) AS perFemale , SUM(IIF(T2.gender = 'M', 1, 0)) * 100 / COUNT(T2.device_id) AS perMale FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'OPPO'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE phone_brand = 'OPPO' AND gender = 'F'), 100), COUNT(device_id)), '%') AS 'the percentage of female OPPO users'; DIVIDE(MULTIPLY(CONCAT(COUNT(device_id WHERE phone_brand = 'OPPO' AND gender = 'M'), 100), COUNT(device_id)), '%') AS 'the percentage of male OPPO users';"}
{"sample_id": 1117, "db_id": "talkingdata", "final": {"question": "Calculate the ratio in percentage between the average number of app users belonging to \"80s Japanese comic\" and \"90s Japanese comic\".", "sql": "SELECT SUM(IIF(T1.category = '80s Japanese comic', 1, 0)) / COUNT(T1.label_id) AS J8 , SUM(IIF(T1.category = '90s Japanese comic', 1, 0)) / COUNT(T1.label_id) AS J9 FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "ratio in percentage = DIVIDE(SUM(IF(category = '80s Japanese comic',1,0)), COUNT(app_id)) as '80s'; DIVIDE(SUM(IF(category = '90s Japanese comic',1,0)), COUNT(app_id)) as '90s'; 80s Japanese comic refers to category = '80s Japanese comic'; 90s Japanese comic refers to category = '80s Japanese comic';"}
{"sample_id": 1054, "db_id": "talkingdata", "final": {"question": "Which category has the highest number of users?", "sql": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id GROUP BY T1.app_id, T2.category ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["label_categories", "app_labels"]}, "evidence": "highest number of users refers to MAX(COUNT(app_id));"}
{"sample_id": 1199, "db_id": "talkingdata", "final": {"question": "How many users who are between 20 and 60 use phone brand of TCL?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 60 AND T2.phone_brand = 'TCL'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": ""}
{"sample_id": 1115, "db_id": "talkingdata", "final": {"question": "What is the age group of most OPPO users?", "sql": "SELECT T.\"group\" FROM ( SELECT T1.\"group\", COUNT(T1.\"group\") AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' GROUP BY T1.\"group\" ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "age group refers to group; most OPPO users refers to MAX(COUNT(phone_brand = 'OPPO')); OPPO users refers to phone_brand = 'OPPO';"}
{"sample_id": 1237, "db_id": "talkingdata", "final": {"question": "What is the most common age group among all device users?", "sql": "SELECT T.num FROM ( SELECT \"group\", COUNT(\"group\") AS num FROM gender_age GROUP BY \"group\" ) T", "source_tables": ["gender_age"]}, "evidence": "most common age group refers to MAX(COUNT(`group`));"}
{"sample_id": 1083, "db_id": "talkingdata", "final": {"question": "What is the device model of the device used by the oldest user?", "sql": "SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN ( SELECT device_id FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age ) )", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "oldest user refers to MAX(age);"}
{"sample_id": 1136, "db_id": "talkingdata", "final": {"question": "How many more devices are there of the brand vivo than of the brand LG?", "sql": "SELECT SUM(IIF(phone_brand = 'vivo', 1, 0)) - SUM(IIF(phone_brand = 'LG', 1, 0)) AS num FROM phone_brand_device_model2", "source_tables": ["phone_brand_device_model2"]}, "evidence": "how many more = SUBTRACT(SUM(IF(phone_brand = 'vivo',1,0)), SUM(IF(phone_brand = 'LG',1,0))); brand vivo refers to phone_brand = 'vivo'; brand LG refers to phone_brand = 'LG';"}
{"sample_id": 1057, "db_id": "talkingdata", "final": {"question": "What were the locations of the events on 8th May, 2016?", "sql": "SELECT longitude, latitude FROM \"events\" WHERE SUBSTR(\"timestamp\", 1, 10) = '2016-05-08'", "source_tables": ["events"]}, "evidence": "location = longitude, latitude; on 8th May, 2016 refers to `timestamp` LIKE '2016-05-08%';"}
{"sample_id": 1196, "db_id": "talkingdata", "final": {"question": "Among the users who are above 20, how many users use device model of ELIFE E7 Mini?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'ELIFE E7 Mini' AND T1.age > 20", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "above 20 refers to age > 20;"}
{"sample_id": 1068, "db_id": "talkingdata", "final": {"question": "Provide the phone brands and models of the users who were at the coordinates of (80,44).", "sql": "SELECT DISTINCT T1.phone_brand, T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T2.longitude = 80 AND T2.latitude = 44", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "models refers to device_model; coordinates of (80,44) refers to longitude = 80 AND latitude = 44;"}
{"sample_id": 1051, "db_id": "talkingdata", "final": {"question": "What is the most common device model among female users between the ages 27 to 28?", "sql": "SELECT T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.\"group\" = 'F27-28' AND T1.gender = 'F' ORDER BY T2.device_id DESC LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "most common device model refers to MAX(COUNT(device_id)); female refers to gender = 'F'; between the ages 27 to 28 refers to group = 'F27-28';"}
{"sample_id": 1070, "db_id": "talkingdata", "final": {"question": "Among HTC Butterfly phone users, list any five devices' IDs used by females.", "sql": "SELECT T2.device_id FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.device_model = 'Butterfly' AND T2.gender = 'F' AND T1.phone_brand = 'HTC' LIMIT 5", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "HTC Butterfly refers to phone_brand = 'HTC' AND device_model = 'Butterfly'; females refers to gender = 'F';"}
{"sample_id": 1143, "db_id": "talkingdata", "final": {"question": "For the device with an event occurring on 2016/5/1 at 0:55:25, what is the gender of its user?", "sql": "SELECT T1.gender FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE T2.timestamp = '2016-05-01 00:55:25'", "source_tables": ["gender_age", "events"]}, "evidence": "on 2016/5/1 at 0:55:25 refers to timestamp = '2016-05-01 00:55:25';"}
{"sample_id": 1175, "db_id": "talkingdata", "final": {"question": "How many OPPO users participated in events which were held around 12 AM on 1st May,2016?", "sql": "SELECT COUNT(T1.device_id) FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' AND STRFTIME('%Y-%m-%d', T1.\"timestamp\") = '2016-05-01'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "OPPO refers to phone_brand = 'OPPO'; around 12 AM on 1st May, 2016 refers to timestamp is '2016-05-01'"}
{"sample_id": 1094, "db_id": "talkingdata", "final": {"question": "Among the users who uses a vivo device, how many of them are female and under 30?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.phone_brand = 'vivo' AND T1.age < 30", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "vivo device refers to phone_brand = 'vivo'; female refers to gender = 'F'; under 30 refers to age < 30;"}
{"sample_id": 1150, "db_id": "talkingdata", "final": {"question": "How many categories in total do the app users who were not active when event no.2 happened belong to?", "sql": "SELECT COUNT(*) FROM ( SELECT COUNT(DISTINCT T1.category) AS result FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.event_id = 2 AND T3.is_active = 0 GROUP BY T1.category ) T", "source_tables": ["label_categories", "app_events", "app_labels"]}, "evidence": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1102, "db_id": "talkingdata", "final": {"question": "What is the age of the oldest male user of the app?", "sql": "SELECT MAX(age) FROM gender_age WHERE gender = 'M'", "source_tables": ["gender_age"]}, "evidence": "oldest user refers to MAX(age); male refers to gender = 'M';"}
{"sample_id": 1219, "db_id": "talkingdata", "final": {"question": "What is the difference between the events of device number -9222956879900150000 that can be located and those that are unable to be located?", "sql": "SELECT SUM(IIF(latitude != 0 AND longitude != 0, 1, 0)) - SUM(IIF(latitude = 0 AND longitude = 0, 1, 0)) AS diff FROM events WHERE device_id = '-922956879900150000'", "source_tables": ["events"]}, "evidence": "difference = SUBTRACT(SUM(latitude! = 0 and longitude! = 0), SUM(latitude = 0 and longitude = 0)); device number refers to device_id; device_id = -922956879900150000; can be location refers to latitude ! = 0 and longitude ! = 0; unable to be location refers to latitude = 0 and longitude = 0;"}
{"sample_id": 1200, "db_id": "talkingdata", "final": {"question": "Among the users who use SUGAR, calculate the percentage of those who are above 20 years old.", "sql": "SELECT SUM(IIF(T1.age > 20, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'SUGAR'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "SUGAR refers to phone_brand = 'SUGAR'; percentage = MULTIPLY(DIVIDE(SUM(age > 20), COUNT(device_id)) 1.0); above 20 years old refers to age > 20;"}
{"sample_id": 1096, "db_id": "talkingdata", "final": {"question": "What is the brand of the device used by the youngest female user?", "sql": "SELECT phone_brand FROM phone_brand_device_model2 WHERE device_id IN ( SELECT * FROM ( SELECT device_id FROM gender_age WHERE gender = 'F' ORDER BY age LIMIT 1 ) AS T )", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "brand of the device refers to phone_brand; youngest refers to MIN(age); female refers to gender = 'F';"}
{"sample_id": 1099, "db_id": "talkingdata", "final": {"question": "Among all the devices with event no.2 happening, what is the percentage of the device being a vivo phone?", "sql": "SELECT SUM(IIF(T2.phone_brand = 'vivo', 1, 0)) / COUNT(T1.device_id) AS per FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE T1.event_id = '2'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "event no. refers to event_id; event_id = '2'; percentage = SUM(IF(phone_brand = 'vivo',1,0)), COUNT(device_id) WHERE event_id = '2'; vivo phone refers to phone_brand = 'vivo';"}
{"sample_id": 1148, "db_id": "talkingdata", "final": {"question": "What are the categories that app user ID7324884708820020000 belongs to?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 7324884708820020000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "app user ID refers to app_id; app_id = 7324884708820020000;"}
{"sample_id": 1058, "db_id": "talkingdata", "final": {"question": "List the app users IDs and installed status for the event ID of 844.", "sql": "SELECT app_id , IIF(is_installed = 1, 'YES', 'NO') AS status FROM app_events WHERE event_id = 844", "source_tables": ["app_events"]}, "evidence": "app user IDs refers to app_id; is_installed = 1 means the app status is installed; is_installed = 0 means the app status is not installed;"}
{"sample_id": 1118, "db_id": "talkingdata", "final": {"question": "Among the female users that uses OPPO as their phone brand, what is the percentage of them of the user that uses R815T model to install the app?", "sql": "SELECT SUM(IIF(T1.phone_brand = 'OPPO', 1, 0)) / SUM(IIF(T1.device_id = 'R815T', 1, 0)) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "female refers to gender = 'F'; percentage = DIVIDE(SUM(IF(phone_brand = 'OPPO',1,0)), SUM(IF(device_id = 'R815T',1,0))); R815T refers to device_id = 'R815T';"}
{"sample_id": 1121, "db_id": "talkingdata", "final": {"question": "Which group does age 24 belong to?", "sql": "SELECT \"group\" FROM gender_age WHERE age = '24'", "source_tables": ["gender_age"]}, "evidence": ""}
{"sample_id": 1191, "db_id": "talkingdata", "final": {"question": "What is the category of the label that represented the behavior category of app id 5902120154267990000?", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 5902120154267990000", "source_tables": ["label_categories", "app_labels"]}, "evidence": "label that represented the behavior category refers to label_id;"}
{"sample_id": 1137, "db_id": "talkingdata", "final": {"question": "What is the ID of the device used by the youngest user?", "sql": "SELECT device_id FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age )", "source_tables": ["gender_age"]}, "evidence": "ID of the device refers to device_id; youngest user refers to MIN(age);"}
{"sample_id": 1088, "db_id": "talkingdata", "final": {"question": "Please list the location coordinates of all the devices with an inactive app user when event no.2 happened.", "sql": "SELECT DISTINCT T2.longitude, T2.latitude FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T2.event_id = 2 AND T1.is_active = 0", "source_tables": ["events", "app_events"]}, "evidence": "location coordinates = longitude, latitude; inactive refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1066, "db_id": "talkingdata", "final": {"question": "How many events did the 88-years-old male users participate on 4th May,2016?", "sql": "SELECT COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'M' AND SUBSTR(\"timestamp\", 1, 10) = '2016-05-04' AND T1.age = 88", "source_tables": ["gender_age", "events"]}, "evidence": "88-years-old refers to age = 88; male refers to gender = 'M'; on 4th May, 2016 refers to timestamp LIKE '2016-05-04%';"}
{"sample_id": 1129, "db_id": "talkingdata", "final": {"question": "Give the number of female users of \"E\u6d3e\" brand devices.", "sql": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.phone_brand = 'E\u6d3e'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "female refers to gender = 'F'; E\u6d3e brand refers to phone_brand = 'E\u6d3e';"}
{"sample_id": 1060, "db_id": "talkingdata", "final": {"question": "How many users used Vivo Xplay3S model?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = 'Xplay3S' AND phone_brand = 'vivo'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "Vivo Xplay3S model refers to phone_brand = 'vivo' AND device_model = 'Xplay3S';"}
{"sample_id": 1126, "db_id": "talkingdata", "final": {"question": "State the number of the \"\u9b45\u84ddNote 2\" users who are in the \"F29-32\" group.", "sql": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.\"group\" = 'F29-32' AND T2.device_model = '\u9b45\u84ddNote 2'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "\u9b45\u84ddNote 2 refers to device_model = '\u9b45\u84ddNote 2';"}
{"sample_id": 1159, "db_id": "talkingdata", "final": {"question": "What is the average age of the female users who uses a vivo device?", "sql": "SELECT AVG(T1.age) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T1.gender = 'F'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "average age = AVG(age); female refers to gender = 'F'; vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1087, "db_id": "talkingdata", "final": {"question": "Please list the categories of the app users who are not active when event no.2 happened.", "sql": "SELECT DISTINCT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.event_id = 2 AND T3.is_active = 0", "source_tables": ["label_categories", "app_events", "app_labels"]}, "evidence": "not active refers to is_active = 0; event no. refers to event_id; event_id = 2;"}
{"sample_id": 1222, "db_id": "talkingdata", "final": {"question": "Please list any three OPPO device models.", "sql": "SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 3", "source_tables": ["phone_brand_device_model2"]}, "evidence": "OPPO refers to phone_brand = 'OPPO';"}
{"sample_id": 1108, "db_id": "talkingdata", "final": {"question": "List 5 device models that users use to install the app and are active in using the app.", "sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.event_id INNER JOIN app_events AS T3 ON T2.event_id = T3.event_id WHERE T3.is_active = 1 AND T3.is_installed = 1 LIMIT 5", "source_tables": ["events", "phone_brand_device_model2", "app_events"]}, "evidence": "install refers to is_installed = 1; active refers to is_active = 1;"}
{"sample_id": 1131, "db_id": "talkingdata", "final": {"question": "How many users from the group \"F29-32\" who were active in the events on 2016/5/7?", "sql": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.event_id = T3.device_id WHERE SUBSTR(T2.\"timestamp\", 1, 10) = '2016-05-07' AND T1.is_active = '1' AND T3.\"group\" = 'F29-32'", "source_tables": ["gender_age", "events", "app_events"]}, "evidence": "active users refers to is_active = '1'; on 2016/5/7 refers to timestamp = '2016/5/7 XX:XX:XX';"}
{"sample_id": 1109, "db_id": "talkingdata", "final": {"question": "How many users belong to \"Financial Information\" category?", "sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Financial Information'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1180, "db_id": "talkingdata", "final": {"question": "Which phone brand and model was used for event ID \"6701\"?", "sql": "SELECT T2.phone_brand, T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.event_id = 6701", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "model refers to device_model;"}
{"sample_id": 1062, "db_id": "talkingdata", "final": {"question": "What are the labels' IDs of online shopping and online malls categories?", "sql": "SELECT label_id FROM label_categories WHERE category IN ('online shopping', 'online malls')", "source_tables": ["label_categories"]}, "evidence": ""}
{"sample_id": 1141, "db_id": "talkingdata", "final": {"question": "Among all the users who use a vivo device, what is the age of the youngest user?", "sql": "SELECT T1.age FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' ORDER BY T1.age LIMIT 1", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "vivo device refers to phone_brand = 'vivo'; youngest refers to MIN(age);"}
{"sample_id": 1163, "db_id": "talkingdata", "final": {"question": "What is the ratio of active and inactive app users of the event ID \"58\"?", "sql": "SELECT SUM(IIF(is_active = 1, 1, 0)) / SUM(IIF(is_active = 0, 1, 0)) AS per FROM app_events WHERE event_id = 58", "source_tables": ["app_events"]}, "evidence": "ratio = DIVIDE(SUM(is_active = 1), SUM(is_active = 0)); active refers to is_active = 1; inactive refers to is_active = 0;"}
{"sample_id": 1097, "db_id": "talkingdata", "final": {"question": "How many users in user group M23-26 use a vivo device?", "sql": "SELECT COUNT(T2.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.\"group\" = 'M23-26' AND T2.phone_brand = 'vivo'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "user group M23-26 refers to group = 'M23-26'; vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1198, "db_id": "talkingdata", "final": {"question": "Give the number of male users who use phone branded HTC.", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'M' AND T2.phone_brand = 'HTC'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1055, "db_id": "talkingdata", "final": {"question": "How many users belong to the MOBA category?", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id WHERE T1.category = 'MOBA'", "source_tables": ["label_categories", "app_labels"]}, "evidence": ""}
{"sample_id": 1072, "db_id": "talkingdata", "final": {"question": "What are the ages and genders of the LG L70 users?", "sql": "SELECT T2.age, T2.gender FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'LG' AND T1.device_model = 'L70'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "LG L70 refers to phone_brand = 'LG' AND device_model = 'L70';"}
{"sample_id": 1120, "db_id": "talkingdata", "final": {"question": "Give the number of device models for \"\u4e2d\u5174\" phone brand.", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = '\u4e2d\u5174'", "source_tables": ["phone_brand_device_model2"]}, "evidence": ""}
{"sample_id": 1045, "db_id": "talkingdata", "final": {"question": "What is the name of the category which most users belong to?", "sql": "SELECT T.category FROM ( SELECT T2.category, COUNT(T1.app_id) AS num FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id GROUP BY T1.app_id, T2.category ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["label_categories", "app_labels"]}, "evidence": "most users belong to refers to MAX(COUNT(app_id)); name of category refers to category;"}
{"sample_id": 1040, "db_id": "talkingdata", "final": {"question": "How many events were held at coordinate 97,40?", "sql": "SELECT COUNT(event_id) FROM \"events\" WHERE latitude = 40 AND longitude = 97", "source_tables": ["events"]}, "evidence": "coordinate 97,40 refers to longitude = 97 AND latitude = 40;"}
{"sample_id": 1190, "db_id": "talkingdata", "final": {"question": "What is the average age of the users who use model device of R7?", "sql": "SELECT SUM(T1.age) / COUNT(T1.device_id) AS avg FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'R7'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "average age = AVG(age);"}
{"sample_id": 1113, "db_id": "talkingdata", "final": {"question": "List at least 3 categories with the lowest number of users.", "sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id ORDER BY T2.label_id LIMIT 3", "source_tables": ["label_categories", "app_labels"]}, "evidence": "lowest number of users refers to MIN(COUNT(label_id));"}
{"sample_id": 1063, "db_id": "talkingdata", "final": {"question": "Describe the phone brands and models of the users who participated in events on 5th May, 2016 at the coordinates of (112,44).", "sql": "SELECT DISTINCT T2.phone_brand, T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T2.device_id = T1.device_id WHERE T1.timestamp LIKE '2016-05-05%' AND T1.longitude = 112 AND T1.latitude = 44", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "models refers to device_model; on 5th May, 2016 refers to timestamp LIKE '2016-05-05%'; coordinates of (112,44) refers to longitude = 112 AND latitude = 44;"}
{"sample_id": 1176, "db_id": "talkingdata", "final": {"question": "What is the ratio of male and female users of vivo X5pro model?", "sql": "SELECT SUM(IIF(T1.gender = 'M', 1, 0)) / SUM(IIF(T1.gender = 'F', 1, 0)) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T2.device_model = 'X5Pro'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "ratio = DIVIDE(SUM(gender = 'M' WHERE device_model = 'X5Pro'), SUM(gender = 'F' WHERE device_model = 'X5Pro')); male refers to gender = 'M'; female refers to gender = 'F'; vivo X5pro model refers to phone_brand = 'vivo' AND device_model = 'X5Pro';"}
{"sample_id": 1073, "db_id": "talkingdata", "final": {"question": "Calculate the percentage of the app user IDs under Industry tag category.", "sql": "SELECT SUM(IIF(T1.category = 'Industry tag', 1, 0)) * 100 / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "percentage = DIVIDE(MULTIPLY(CONCAT(COUNT(app_id WHERE category = 'Industry tag'), 100), COUNT(app_id)),'%');"}
{"sample_id": 1216, "db_id": "talkingdata", "final": {"question": "Calculate the average age of people who have apps installed but are not active on their devices.", "sql": "SELECT AVG(T1.age) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id INNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id WHERE T3.is_installed = 1 AND T3.is_active = 0", "source_tables": ["gender_age", "events_relevant", "app_events_relevant"]}, "evidence": "average age = AVG(age); installed refers to is_installed = 1; not active refers to is_active = 0;"}
{"sample_id": 1194, "db_id": "talkingdata", "final": {"question": "How many female users use device model of MI 3?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.device_model = 'MI 3'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "female refers to gender = 'F';"}
{"sample_id": 1167, "db_id": "talkingdata", "final": {"question": "How many app users belong to label ID of \"48\"?", "sql": "SELECT COUNT(app_id) FROM app_labels WHERE label_id = 48", "source_tables": ["app_labels"]}, "evidence": ""}
{"sample_id": 1090, "db_id": "talkingdata", "final": {"question": "Please list the IDs of the events happened on all the vivo devices.", "sql": "SELECT T2.event_id FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "IDs of the events refers to event_id; vivo devices refers to phone_brand = 'vivo';"}
{"sample_id": 1188, "db_id": "talkingdata", "final": {"question": "How many users who are under 30 years old use device model of Galaxy Note 2?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2' AND T1.age < 30", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "under 30 refers to age < 30;"}
{"sample_id": 1162, "db_id": "talkingdata", "final": {"question": "What is the label ID of \"Third-party card management\" category?", "sql": "SELECT label_id FROM label_categories WHERE category = 'Third-party card management'", "source_tables": ["label_categories"]}, "evidence": ""}
{"sample_id": 1091, "db_id": "talkingdata", "final": {"question": "Among the devices with event no.2 happening, how many of them are vivo devices?", "sql": "SELECT COUNT(T1.device_id) FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' AND T2.event_id = 2", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "event no. refers to event_id; event_id = 2; vivo devices refers to phone_brand = 'vivo';"}
{"sample_id": 1111, "db_id": "talkingdata", "final": {"question": "Provide the total number of the male users that use OPPO as their phone brand.", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' AND T1.gender = 'M'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "male refers to gender = 'Male';"}
{"sample_id": 1183, "db_id": "talkingdata", "final": {"question": "How many active users are there in the event?", "sql": "SELECT COUNT(app_id) FROM app_events WHERE is_active = 1", "source_tables": ["app_events"]}, "evidence": "active refers to is_active = 1;"}
{"sample_id": 1177, "db_id": "talkingdata", "final": {"question": "How many females use ZUK Z1 phones in the age group under 23?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' AND T2.device_model = 'Z1' AND T1.\"group\" = 'F23-' AND T2.phone_brand = 'ZUK'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "females refers to gender = 'F'; ZUK Z1 refers to phone_brand = 'ZUK' AND device_model = 'Z1'; under 23 refers to `group` = 'F23-' ;"}
{"sample_id": 1207, "db_id": "talkingdata", "final": {"question": "On what date were the most events logged on devices for 40-year-old male users?", "sql": "SELECT T.timestamp FROM ( SELECT T2.timestamp, COUNT(T2.event_id) AS num FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'M' AND T1.age = 40 GROUP BY T2.timestamp ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "events_relevant"]}, "evidence": "date refers to timestamp; most events refers to MAX(COUNT(event_id)); 40-year-old\u00a0 refers to age = 40; male refers to gender = 'M';"}
{"sample_id": 1157, "db_id": "talkingdata", "final": {"question": "Which category has more app users, Securities or Finance?", "sql": "SELECT IIF(SUM(IIF(T2.category = 'Securities', 1, 0)) - SUM(IIF(T2.category = 'Finance', 1, 0)) > 0, 'Securities', 'Finance') AS diff FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id", "source_tables": ["label_categories", "app_labels"]}, "evidence": "more app users refers to SUBTRACT(IF(SUM(category = 'Securities'), SUM(category = 'Finance')) > 0,'Securities','Finance') as more;"}
{"sample_id": 1093, "db_id": "talkingdata", "final": {"question": "How many events in total have happened on all the vivo devices in the year 2016?", "sql": "SELECT COUNT(T1.event_id) FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE STRFTIME('%Y', T1.timestamp) = '2016' AND T2.phone_brand = 'vivo'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "vivo devices refers to phone_brand = 'vivo'; in the year 2016 refers to year(timestamp) = 2016;"}
{"sample_id": 1146, "db_id": "talkingdata", "final": {"question": "Please list the location coordinates of all the Galaxy Note 2 devices when an event happened.", "sql": "SELECT T1.longitude, T1.latitude FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "location coordinates = longitude, latitude; Galaxy Note 2 refers to device_model = 'Galaxy Note 2';"}
{"sample_id": 1101, "db_id": "talkingdata", "final": {"question": "How many female users belong to the age group of 27 to 28?", "sql": "SELECT COUNT(device_id) FROM gender_age WHERE \"group\" = 'F27-28' AND gender = 'F'", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F'; age group of 27 to 28 refers to `group` = 'F27-28';"}
{"sample_id": 1152, "db_id": "talkingdata", "final": {"question": "Please list the models of all the devices with an event under the location coordinates (121, 31).", "sql": "SELECT T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.longitude = 121 AND T1.latitude = 31", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "models of the devices refers to device_model; location coordinates (121, 31) refers to longitude = 121 AND latitude = 31;"}
{"sample_id": 1095, "db_id": "talkingdata", "final": {"question": "What is the category that the most app users belong to?", "sql": "SELECT T.category FROM ( SELECT T1.category, COUNT(T2.app_id) AS num FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id GROUP BY T1.label_id ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["label_categories", "app_labels"]}, "evidence": "most app users refers to MAX(COUNT(app_id));"}
{"sample_id": 1125, "db_id": "talkingdata", "final": {"question": "Give the number of \"game-Fishing\" apps.", "sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-Fishing'", "source_tables": ["label_categories", "app_labels"]}, "evidence": "game-Fishing refers to category = 'game-Fishing';"}
{"sample_id": 1092, "db_id": "talkingdata", "final": {"question": "Please list the time when event no.2 happened on a vivo device.", "sql": "SELECT T1.timestamp FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T1.event_id = '2'", "source_tables": ["events", "phone_brand_device_model2"]}, "evidence": "time refers to timestamp; event no. refers to event_id; event_id = '2'; vivo device refers to phone_brand = 'vivo';"}
{"sample_id": 1203, "db_id": "talkingdata", "final": {"question": "Identify all installed and activated apps by their id.", "sql": "SELECT app_id FROM app_events WHERE is_active = 1 AND is_installed = 1", "source_tables": ["app_events"]}, "evidence": "installed refers to is_installed = 1; activated refers to is_active = 1; id refers to app_id;"}
{"sample_id": 1182, "db_id": "talkingdata", "final": {"question": "List out the time of the event id 12.", "sql": "SELECT timestamp FROM events WHERE event_id = 12", "source_tables": ["events"]}, "evidence": "time refers to timestamp;"}
{"sample_id": 1059, "db_id": "talkingdata", "final": {"question": "How many events were there on 30th April, 2016?", "sql": "SELECT COUNT(event_id) FROM events WHERE SUBSTR(\"timestamp\", 1, 10) = '2016-04-30'", "source_tables": ["events"]}, "evidence": "on 30th April, 2016 refers to `timestamp` LIKE '2016-04-30%';"}
{"sample_id": 1139, "db_id": "talkingdata", "final": {"question": "Is the oldest device user male or female?", "sql": "SELECT gender FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age )", "source_tables": ["gender_age"]}, "evidence": "MAX(Age) AND gender = 'M' means that the oldest device user is male; MAX(Age) AND gender = 'F' means that the oldest device user is female;"}
{"sample_id": 1181, "db_id": "talkingdata", "final": {"question": "Between device ID of \"-9215352913819630000\" and \"-9222956879900150000\", mention the age and gender of device user who participated more events.", "sql": "SELECT T.age, T.gender FROM ( SELECT T2.age, T2.gender, COUNT(T1.device_id) AS num FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.device_id BETWEEN -9215352913819630000 AND -9222956879900150000 GROUP BY T2.age, T2.gender ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["gender_age", "events"]}, "evidence": "more events refers to MAX(COUNT(event_id));"}
{"sample_id": 1039, "db_id": "talkingdata", "final": {"question": "What is the device id of the oldest user?", "sql": "SELECT device_id FROM gender_age WHERE age = ( SELECT MAX(age) FROM gender_age )", "source_tables": ["gender_age"]}, "evidence": "oldest user refers to MAX(age);"}
{"sample_id": 1184, "db_id": "talkingdata", "final": {"question": "How many devices belong to model \"A51\"?", "sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE device_model = 'A51'", "source_tables": ["phone_brand_device_model2"]}, "evidence": "model refers to device_model; device_model = 'A51';"}
{"sample_id": 1189, "db_id": "talkingdata", "final": {"question": "Among the users who use OPPO, calculate the percentage of those who are under 50 years old.", "sql": "SELECT SUM(IIF(T1.age < 50, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "OPPO refers to phone_brand = 'OPPO'; percentage = MULTIPLY(DIVIDE(SUM(age < 50), COUNT(device_id)), 1.0); under 50 years old refers to age < 50;"}
{"sample_id": 1220, "db_id": "talkingdata", "final": {"question": "Please list any three devices that are owned by female users.", "sql": "SELECT device_id FROM gender_age WHERE gender = 'F' LIMIT 3", "source_tables": ["gender_age"]}, "evidence": "female refers to gender = 'F';"}
{"sample_id": 1079, "db_id": "talkingdata", "final": {"question": "What is the age of the oldest device user?", "sql": "SELECT MAX(age) FROM gender_age", "source_tables": ["gender_age"]}, "evidence": "oldest device user refers to MAX(age);"}
{"sample_id": 1078, "db_id": "talkingdata", "final": {"question": "How many device users are male?", "sql": "SELECT COUNT(device_id) FROM gender_age WHERE gender = 'M'", "source_tables": ["gender_age"]}, "evidence": "male refers to gender = 'M';"}
{"sample_id": 1116, "db_id": "talkingdata", "final": {"question": "List at least 5 device models that are commonly used by female users.", "sql": "SELECT T.device_model FROM ( SELECT T2.device_model, COUNT(T2.device_model) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.gender = 'F' GROUP BY T2.device_model ) AS T ORDER BY T.num DESC LIMIT 5", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "device models that are commonly used refers to MAX(COUNT(device_model)); female refers to gender = 'F';"}
{"sample_id": 1067, "db_id": "talkingdata", "final": {"question": "Describe the ages, genders and numbers of events participated by the users at coordinates of (-102,38).", "sql": "SELECT DISTINCT T1.age, T1.gender, COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN \"events\" AS T2 ON T2.device_id = T1.device_id WHERE T2.longitude = -102 AND T2.latitude = 38 GROUP BY T1.age, T1.gender, T2.longitude, T2.latitude", "source_tables": ["gender_age", "events"]}, "evidence": "coordinates of (-102,38) refers to longitude = -102, latitude = 38;"}
{"sample_id": 1089, "db_id": "talkingdata", "final": {"question": "Among all the times event no.2 happened when the app user was not active, when was the earliest time this situation happened?", "sql": "SELECT T2.timestamp FROM app_events AS T1 INNER JOIN events AS T2 ON T2.event_id = T1.event_id WHERE T1.is_active = 0 AND T2.event_id = 2 ORDER BY T2.timestamp LIMIT 1", "source_tables": ["events", "app_events"]}, "evidence": "event no. refers to event_id; event_id = 2; not active refers to is_active = 0; earliest time refers to MIN(timestamp);"}
{"sample_id": 1213, "db_id": "talkingdata", "final": {"question": "How many people over the age of 50 do not have HTC One M8 Eye phones?", "sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age > 50 AND T2.device_model != 'One M8 Eye' AND T2.phone_brand != 'HTC'", "source_tables": ["gender_age", "phone_brand_device_model2"]}, "evidence": "over the age of 50 refers to age > 50; do not have HTC One M8 Eye phones refers to phone_brand ! = 'HTC' AND device_model ! = 'One M8 Eye';"}
{"sample_id": 1247, "db_id": "law_episode", "final": {"question": "What is the title of the episode with the keyword \"laundering money\"?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = 'laundering money'", "source_tables": ["keyword", "episode"]}, "evidence": "keyword \"laundering money\" refers to keyword = 'laundering money'"}
{"sample_id": 1325, "db_id": "law_episode", "final": {"question": "List the titles and air dates of episodes that were produced by Billy Fox.", "sql": "SELECT T1.title, T1.air_date FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.category = 'Produced by' AND T2.role = 'producer' AND T3.name = 'Billy Fox'", "source_tables": ["credit", "episode", "person"]}, "evidence": "produced refers to role = 'producer'"}
{"sample_id": 1320, "db_id": "law_episode", "final": {"question": "Write down the organization, year, award, and award category in which Rene Balcer is the winner.", "sql": "SELECT T2.organization, T2.year, T2.award, T2.award_category FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Rene Balcer' AND T2.result = 'Winner'", "source_tables": ["award", "person"]}, "evidence": "Rene Balcer refers to name = 'Rene Balcer'; the winner refers to result = 'Winner'"}
{"sample_id": 1294, "db_id": "law_episode", "final": {"question": "How many people did not enjoy the finale episode?", "sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 24 AND T2.stars = 1", "source_tables": ["episode", "vote"]}, "evidence": "did not enjoy refers to stars = 1; the finale episode refers to episode = 24"}
{"sample_id": 1351, "db_id": "law_episode", "final": {"question": "Which episode has the highest total number of viewer votes?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.title ORDER BY SUM(T1.votes) DESC LIMIT 1", "source_tables": ["episode", "vote"]}, "evidence": "episode refers to title; the highest total number of viewer votes refers to max(sum(votes))"}
{"sample_id": 1287, "db_id": "law_episode", "final": {"question": "In which organization did Constantine Makris win the most awards?", "sql": "SELECT T2.organization FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Constantine Makris' AND T2.result = 'Winner' GROUP BY T2.organization ORDER BY COUNT(T2.award_id) DESC LIMIT 1", "source_tables": ["award", "person"]}, "evidence": "win refers to result = 'Winner'; the most awards refers to max(count(award_id))"}
{"sample_id": 1333, "db_id": "law_episode", "final": {"question": "List out all the credit names for episode 9.", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 9", "source_tables": ["credit", "episode", "person"]}, "evidence": "credit name refers to name"}
{"sample_id": 1315, "db_id": "law_episode", "final": {"question": "What is the average star rating of the episodes Jim Bracchitta has worked on?", "sql": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T2.episode_id) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 AND T1.name = 'Jim Bracchitta'", "source_tables": ["credit", "vote", "person"]}, "evidence": "average star rating = divide(sum(stars), count(episode_id)) where name = 'Jim Bracchitta'"}
{"sample_id": 1259, "db_id": "law_episode", "final": {"question": "Which episode got the most 1 star votes? Give its title.", "sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 1 ORDER BY T1.votes DESC LIMIT 1", "source_tables": ["episode", "vote"]}, "evidence": "the most refers to max(votes); 1 star refers to stars = '1'"}
{"sample_id": 1321, "db_id": "law_episode", "final": {"question": "Give me the years and episode IDs in which Constantine Makris was the winner of the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years.", "sql": "SELECT t3.years, t3.episode_id FROM ( SELECT DISTINCT T2.year AS years, T2.episode_id, row_number() OVER (PARTITION BY T2.episode_id ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T1.name = 'Constantine Makris' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.episode_id HAVING COUNT(t3.years - t3.rm) >= 2", "source_tables": ["award", "person"]}, "evidence": "the winner refers to result = 'Winner'; the Television refers to award = 'Television'; Silver Gavel Award refers to award_category = 'Silver Gavel Award'; the American Bar Association Silver Gavel Awards for Media and the Arts refers to organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"}
{"sample_id": 1319, "db_id": "law_episode", "final": {"question": "Who is the winner of the Best Television Episode award for the Edgar category in 2000? Include his or her name and role.", "sql": "SELECT T1.name, T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 2000 AND T2.award_category = 'Edgar' AND T2.award = 'Best Television Episode'", "source_tables": ["award", "person"]}, "evidence": "the Best Television Episode award refers to award = 'Best Television Episode'; the Edgar category refers to award_category = 'Edgar'; in 2000 refers to year = 2000"}
{"sample_id": 1330, "db_id": "law_episode", "final": {"question": "What is the ratio of American casts on episode 2 of the series? Please include their roles.", "sql": "SELECT CAST(SUM(CASE WHEN T2.category = 'Cast' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category), T1.role FROM Award AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T2.episode_id = T3.episode_id INNER JOIN Person AS T4 ON T2.person_id = T4.person_id WHERE T3.episode = 2 AND T4.birth_country = 'USA'", "source_tables": ["credit", "award", "episode", "person"]}, "evidence": "American refers to birth_country = 'USA'; cast refers to category = 'Cast'; ratio = divide(count(person_id where birth_country = 'USA'), total(category)) where category = 'Cast'"}
{"sample_id": 1300, "db_id": "law_episode", "final": {"question": "What is the title of the 3 worst rated episodes?", "sql": "SELECT title FROM Episode ORDER BY rating LIMIT 3", "source_tables": ["episode"]}, "evidence": "worst rated refers to min(rating)"}
{"sample_id": 1272, "db_id": "law_episode", "final": {"question": "How many people have won at least 3 awards?", "sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.result = 'Winner' GROUP BY T1.person_id HAVING COUNT(T2.award_id) >= 3", "source_tables": ["award", "person"]}, "evidence": "won refers to result = 'Winner'; at least 3 awards refers to count(result) > 3"}
{"sample_id": 1257, "db_id": "law_episode", "final": {"question": "Was Anthony Azzara's role in episode tt0629204 displayed in the credits at the end of the episode?", "sql": "SELECT T1.credited FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Anthony Azzara' AND T1.episode_id = 'tt0629204'", "source_tables": ["credit", "person"]}, "evidence": "episode tt0629204 refers to episode_id = 'tt0629204'; credited refers to credited = 'true'; not credited refers to credited = ''"}
{"sample_id": 1289, "db_id": "law_episode", "final": {"question": "How many people were not credited at the end of the \"Admissions\" episode?", "sql": "SELECT COUNT(T2.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Admissions' AND T2.credited = 'false'", "source_tables": ["credit", "episode"]}, "evidence": "not credited refers to credited = ''; the \"Admissions\" episode refers to title = 'Admissions'"}
{"sample_id": 1310, "db_id": "law_episode", "final": {"question": "What role was Julia Roberts nominated for?", "sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.Result = 'Nominee' AND T1.name = 'Julia Roberts'", "source_tables": ["award", "person"]}, "evidence": "nominated refers to result = 'Nominee'"}
{"sample_id": 1349, "db_id": "law_episode", "final": {"question": "What is the date of birth of the actor who played the role of a \"writer\"?", "sql": "SELECT T2.birthdate FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.role = 'writer'", "source_tables": ["award", "person"]}, "evidence": "date of birth refers to birthdate"}
{"sample_id": 1305, "db_id": "law_episode", "final": {"question": "How many votes did the episode titled Juvenile get?", "sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Juvenile'", "source_tables": ["episode", "vote"]}, "evidence": "the episode titled Juvenile refers to title = 'Juvenile'"}
{"sample_id": 1307, "db_id": "law_episode", "final": {"question": "In what year did the episodes titled DWB get an award?", "sql": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.title = 'DWB' AND T1.result = 'Winner'", "source_tables": ["award", "episode"]}, "evidence": "titled DWB refers to title = 'DWB'; get an award refers to result = 'Winner'"}
{"sample_id": 1275, "db_id": "law_episode", "final": {"question": "Who is the tallest camera operator?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.role = 'camera operator' ORDER BY T2.height_meters DESC LIMIT 1", "source_tables": ["credit", "person"]}, "evidence": "who refers to name; the tallest refers to max(height_meters); camera operator refers to role = 'camera operator'"}
{"sample_id": 1314, "db_id": "law_episode", "final": {"question": "What are the names of all the people who worked on episode 19 of season 9?", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 19 AND T1.season = 9", "source_tables": ["credit", "episode", "person"]}, "evidence": ""}
{"sample_id": 1271, "db_id": "law_episode", "final": {"question": "What are the names of the person that were not credited at the end of episode tt0629391?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.credited = 'false' AND T1.episode_id = 'tt0629391'", "source_tables": ["credit", "person"]}, "evidence": "not credited refers to credited = ''; episode tt0629391 refers to episode_id = 'tt0629391'"}
{"sample_id": 1346, "db_id": "law_episode", "final": {"question": "Which continent was Michael Preston born on?", "sql": "SELECT birth_country FROM Person WHERE name = 'Michael Preston'", "source_tables": ["person"]}, "evidence": "continent refers to birth_country"}
{"sample_id": 1334, "db_id": "law_episode", "final": {"question": "List out all award titles nominated for episode 20.", "sql": "SELECT T2.award FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 20 AND T2.result IN ('Winner', 'Nominee')", "source_tables": ["award", "episode"]}, "evidence": "award title refers to title; nominated refers to result = 'Winner' or result = 'Nominee'"}
{"sample_id": 1301, "db_id": "law_episode", "final": {"question": "What is the full place of birth of Rene Chenevert Balcer?", "sql": "SELECT birth_place, birth_region FROM Person WHERE birth_name = 'Rene Chenevert Balcer'", "source_tables": ["person"]}, "evidence": "full place of birth refers to birth_place, birth_region; Rene Chenevert Balcer refers to birth_name = 'Rene Chenevert Balcer'"}
{"sample_id": 1337, "db_id": "law_episode", "final": {"question": "Which episodes are nominated for an awards but not win?", "sql": "SELECT T1.episode FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Nominee'", "source_tables": ["award", "episode"]}, "evidence": "nominated for an award but not win refers to result = 'Nominee'"}
{"sample_id": 1285, "db_id": "law_episode", "final": {"question": "How many awards did the \"Agony\" win?", "sql": "SELECT COUNT(T2.award) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Agony' AND T2.result = 'Winner'", "source_tables": ["award", "episode"]}, "evidence": "the \"Agony\" refers to title = 'Agony'; win refers to result = 'Winner'"}
{"sample_id": 1286, "db_id": "law_episode", "final": {"question": "Who is the narrator of the \"Flight\" episode?", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Flight' AND T2.role = 'Narrator'", "source_tables": ["credit", "episode", "person"]}, "evidence": "who refers to name; narrator refers to role = 'Narrator'; the \"Flight\" episode refers to title = 'Flight'"}
{"sample_id": 1338, "db_id": "law_episode", "final": {"question": "What is the average rating for each episode in season 9?", "sql": "SELECT SUM(rating) / COUNT(episode_id) FROM Episode WHERE season = 9", "source_tables": ["episode"]}, "evidence": "average rating = divide(sum(rating), count(episode_id))"}
{"sample_id": 1265, "db_id": "law_episode", "final": {"question": "For the episode with the most votes, give its air date.", "sql": "SELECT T2.air_date FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id GROUP BY T2.episode_id ORDER BY SUM(T1.votes) DESC LIMIT 1", "source_tables": ["episode", "vote"]}, "evidence": "the most votes refers to max(votes)"}
{"sample_id": 1262, "db_id": "law_episode", "final": {"question": "Describe what happened in the episode of award no.296.", "sql": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.award_id = 296", "source_tables": ["award", "episode"]}, "evidence": "description of what happened refers to summary; award no.296 refers to award_id = '296'"}
{"sample_id": 1250, "db_id": "law_episode", "final": {"question": "How many votes did the episode titled \"Cherished\" get in total?", "sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished'", "source_tables": ["episode", "vote"]}, "evidence": "titled \"Cherished\" refers to title = 'Cherished'"}
{"sample_id": 1317, "db_id": "law_episode", "final": {"question": "Write down the title, summary, and air date of the episode that garnered 72 10-star votes.", "sql": "SELECT T2.title, T2.summary, T2.air_date FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 10 AND T1.votes = 72", "source_tables": ["episode", "vote"]}, "evidence": "72 10-star votes refers to stars = 10 and votes = 72"}
{"sample_id": 1352, "db_id": "law_episode", "final": {"question": "Who was the actor who was portraying \"Alex Brown\" and has been credited?", "sql": "SELECT T1.name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T2.role = 'Alex Brown' AND T2.credited = 'true'", "source_tables": ["credit", "person"]}, "evidence": "who refers to name; portraying \"Alex Brown\" refers to role = 'Alex Brown'; has been credited refers to credited = 'true'"}
{"sample_id": 1308, "db_id": "law_episode", "final": {"question": "In which region were the assistant location managers born?", "sql": "SELECT T2.birth_region FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.role = 'president of NBC West Coast'", "source_tables": ["credit", "person"]}, "evidence": "region refers to birth_region; assistant location manager refers to role = 'assistant location manager'"}
{"sample_id": 1324, "db_id": "law_episode", "final": {"question": "On what episode did Julia Roberts win the \"Outstanding Guest Actress in a Drama Series\" award during the 1999 Primetime Emmy Awards? Tell me her role.", "sql": "SELECT T3.episode_id, T2.role FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id INNER JOIN Episode AS T3 ON T2.episode_id = T3.episode_id WHERE T2.year = 1999 AND T2.award = 'Outstanding Guest Actress in a Drama Series' AND T2.organization = 'Primetime Emmy Awards' AND T1.name = 'Julia Roberts' AND T2.result = 'Nominee'", "source_tables": ["award", "episode", "person"]}, "evidence": "win refers to result = 'Winner'; the \"Outstanding Guest Actress in a Drama Series\" award refers to award = 'Outstanding Guest Actress in a Drama Series'; the 1999 refers to year = 1999; Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'"}
{"sample_id": 1270, "db_id": "law_episode", "final": {"question": "Calculate the average number of cast members that appeared in the credit from the 185th to the 193rd episode.", "sql": "SELECT CAST(COUNT(T1.episode_id) AS REAL) / (193 - 185 + 1) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Cast' AND T1.credited = 'true' AND T2.number_in_series BETWEEN 185 AND 193", "source_tables": ["credit", "episode"]}, "evidence": "appeared in the credit refers to credited = 'TRUE'; from the 185th to the 193rd episode refers to number_in_series between 185 and 193; cast refers to category = 'Cast'; average number = divide(count(episode_id), 9)"}
{"sample_id": 1248, "db_id": "law_episode", "final": {"question": "Please list all the keywords for the episodes with a rating of over 8.", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.rating > 8", "source_tables": ["keyword", "episode"]}, "evidence": "a rating of over 8 refers to rating > 8"}
{"sample_id": 1357, "db_id": "law_episode", "final": {"question": "Which episode number has the second highest positive viewer comments and has been awarded \"Best Television Episode\"?", "sql": "SELECT T2.episode_id FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Best Television Episode' AND T1.result = 'Winner' ORDER BY T2.rating DESC LIMIT 2", "source_tables": ["award", "episode"]}, "evidence": "episode number refers to episode_id; awarded \"Best Television Episode\" refers to award = 'Best Television Episode' and result = 'Winner'; the second highest positive viewer comments refers to rating = 8.5"}
{"sample_id": 1323, "db_id": "law_episode", "final": {"question": "How many times was episode 20 of the Law and Order series nominated for the Primetime Emmy Awards in 1999?", "sql": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.year = 1999 AND T2.result = 'Nominee' AND T1.episode = 20 AND T2.organization = 'Primetime Emmy Awards' AND T1.series = 'Law and Order'", "source_tables": ["award", "episode"]}, "evidence": "nominated refers to result = 'nominee'; the Law and Order series refers to series = 'Law and Order'; the Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'; in 1999 refers to year = 1999"}
{"sample_id": 1283, "db_id": "law_episode", "final": {"question": "How many episodes are there in the 9th season of Law and Order? Calculate the average number of casts per season of the said series.", "sql": "SELECT SUM(CASE WHEN T2.season = 9 THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T2.season = 9 THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.episode_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Cast' AND T2.series = 'Law and Order'", "source_tables": ["credit", "episode"]}, "evidence": "the 9th season refers to season = 9; Law and Order refers to series = 'Law and Order'; cast refers to category = 'Cast'; average number of casts per season = divide(count(person_id), count(episode_id))"}
{"sample_id": 1269, "db_id": "law_episode", "final": {"question": "How many times is the number of keywords in \"Refuge: Part 1\" episode than \"Shield\" episode?", "sql": "SELECT CAST(SUM(CASE WHEN T1.title = 'Refuge: Part 1' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.title = 'Shield' THEN 1 ELSE 0 END) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id", "source_tables": ["keyword", "episode"]}, "evidence": "\"Refuge: Part 1\" episode refers to title = 'Refuge: Part 1'; \"Shield\" episode refers to title = 'Shield'; times = divide(count(keyword where title = 'Refuge: Part 1'), count(keyword where title = 'Shield'))"}
{"sample_id": 1356, "db_id": "law_episode", "final": {"question": "Which episode has the two keywords \"nun\" and \"priest\"?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword IN ('nun', 'priest')", "source_tables": ["keyword", "episode"]}, "evidence": "episode refers to title; the two keywords \"nun\" and \"priest\" refers to keyword = 'nun' or keyword = 'priest';"}
{"sample_id": 1284, "db_id": "law_episode", "final": {"question": "What are the keywords of the episode which received the 2nd-highest number of votes?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.votes NOT IN ( SELECT MAX(T1.votes) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ) ORDER BY T1.votes DESC LIMIT 1", "source_tables": ["keyword", "episode"]}, "evidence": "the 2nd-highest number of votes refers to second max(votes)"}
{"sample_id": 1309, "db_id": "law_episode", "final": {"question": "How many stars did the episodes in which Donna Villella worked?", "sql": "SELECT COUNT(T3.person_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T3.name = 'Donna Villella'", "source_tables": ["credit", "episode", "person"]}, "evidence": ""}
{"sample_id": 1350, "db_id": "law_episode", "final": {"question": "Which episode was nominated for the award for \"Outstanding Costume Design for a Series\"?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Costume Design for a Series'", "source_tables": ["award", "episode"]}, "evidence": "episode refers to title; \"Outstanding Costume Design for a Series\" refers to award = 'Outstanding Costume Design for a Series'"}
{"sample_id": 1293, "db_id": "law_episode", "final": {"question": "Who is the youngest person to ever play a \"clerk\" role in the series?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.role = 'Clerk' AND T2.birthdate IS NOT NULL ORDER BY T2.birthdate LIMIT 1", "source_tables": ["credit", "person"]}, "evidence": "who refers to name; the youngest person refers to max(birthdate); a \"clerk\" role refers to role = 'Clerk'"}
{"sample_id": 1335, "db_id": "law_episode", "final": {"question": "Which role have won at least two awards for the entire season and list out the name?", "sql": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id GROUP BY T2.role HAVING COUNT(T2.award_id) > 1", "source_tables": ["award", "person"]}, "evidence": "at least two awards refers to count(role) >1"}
{"sample_id": 1343, "db_id": "law_episode", "final": {"question": "What is the average star with highest percentage for episodes that have received award?", "sql": "SELECT T2.person_id FROM Vote AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.percent DESC LIMIT 1", "source_tables": ["award", "vote"]}, "evidence": "received award refers to result = 'Winner'; the highest percentage refers to max(percent); average star = divide(sum(stars), count(episode_id))"}
{"sample_id": 1328, "db_id": "law_episode", "final": {"question": "Who played the role of the \"president of NBC West Coast\" in the first episode?", "sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.episode = 1 AND T1.role = 'president of NBC West Coast'", "source_tables": ["credit", "episode", "person"]}, "evidence": "who refers to name; the role of the \"president of NBC West Coast\" refers to role = 'president of NBC West Coast'; the first episode refers to episode = 1"}
{"sample_id": 1342, "db_id": "law_episode", "final": {"question": "What is the episode that has mafia keyword?", "sql": "SELECT T1.episode FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.Keyword = 'mafia'", "source_tables": ["keyword", "episode"]}, "evidence": "mafia keyword refers to Keyword = 'mafia'"}
{"sample_id": 1274, "db_id": "law_episode", "final": {"question": "How many awards has Julia Roberts been nominated for?", "sql": "SELECT COUNT(T2.award_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.name = 'Julia Roberts' AND T2.result = 'Nominee'", "source_tables": ["award", "person"]}, "evidence": "been nominated refers to result = 'Nominee'"}
{"sample_id": 1254, "db_id": "law_episode", "final": {"question": "Who was credited as \"technical advisor\" in the episode titled \"Cherished\"?", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T2.credited = 'true' AND T2.role = 'technical advisor'", "source_tables": ["credit", "episode", "person"]}, "evidence": "who refers to name; credited refers to credited = 'true'; as \"technical advisor\" refers to role = 'technical advisor'; titled \"Cherished\" refers to title = 'Cherished'"}
{"sample_id": 1261, "db_id": "law_episode", "final": {"question": "For season 9, episode 17 of the show Law and Order, how many roles have been included in the credit?", "sql": "SELECT COUNT(T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 17 AND T2.credited = 'true'", "source_tables": ["credit", "episode"]}, "evidence": "Law and Order refers to series = 'Law and Order'; included in the credit refers to credited = 'true'"}
{"sample_id": 1268, "db_id": "law_episode", "final": {"question": "Display the number of 9-star votes the episode Sideshow received.", "sql": "SELECT T2.votes FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 9 AND T1.title = 'Sideshow'", "source_tables": ["episode", "vote"]}, "evidence": "9-star vote refers to stars = '9'; episode Sideshow refers to title = 'Sideshow'"}
{"sample_id": 1306, "db_id": "law_episode", "final": {"question": "In which episodes was Anthony Azzara not credited?", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T2.credited = 'false' AND T3.name = 'Anthony Azzara'", "source_tables": ["credit", "episode", "person"]}, "evidence": "which episode refers to title; not credited refers to credited = ''"}
{"sample_id": 1266, "db_id": "law_episode", "final": {"question": "Who was nominated for award no.313? Give the full name.", "sql": "SELECT T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award_id = 313", "source_tables": ["award", "person"]}, "evidence": "award no.313 refers to award_id = '313'; full name refers to name"}
{"sample_id": 1302, "db_id": "law_episode", "final": {"question": "What is the name of the actors born in the USA?", "sql": "SELECT name FROM Person WHERE birth_country = 'USA'", "source_tables": ["person"]}, "evidence": "born in the USA refers to birth_country = 'USA'"}
{"sample_id": 1296, "db_id": "law_episode", "final": {"question": "Who is the person who appeared the most in the series? Calculate in percentage how many times he or she appeared.", "sql": "SELECT T2.person_id, CAST(COUNT(T2.person_id) AS REAL) * 100 / ( SELECT COUNT(T2.person_id) AS num FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id ) AS per FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id GROUP BY T2.person_id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["credit", "person"]}, "evidence": "who refers to name; appear the most refers to max(count(person_id)); percentage = divide(count(person_id where max(count(person_id))), count(person_id)) * 100%"}
{"sample_id": 1347, "db_id": "law_episode", "final": {"question": "Who was the nominee playing the role of Katrina Ludlow in the Law & Order series?", "sql": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Nominee' AND T1.role = 'Katrina Ludlow' AND T1.series = 'Law and Order'", "source_tables": ["award", "person"]}, "evidence": "nominee refers to result = 'Nominee'; the role of Katrina Ludlow refers to role = 'Katrina Ludlow'"}
{"sample_id": 1288, "db_id": "law_episode", "final": {"question": "Who is the stunt coordinator in episode 3?", "sql": "SELECT T3.name FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.episode = 3 AND T2.role = 'stunt coordinator'", "source_tables": ["credit", "episode", "person"]}, "evidence": "who refers to name; stunt coordinator refers to role = 'stunt coordinator'"}
{"sample_id": 1297, "db_id": "law_episode", "final": {"question": "Which episodes of the Law & Order have been nominated for the Primetime Emmy Awards?", "sql": "SELECT DISTINCT episode_id FROM Award WHERE award_category = 'Primetime Emmy'", "source_tables": ["award"]}, "evidence": "episode refers to award; the Primetime Emmy Awards refers to award_category like 'Primetime Emmy'"}
{"sample_id": 1348, "db_id": "law_episode", "final": {"question": "Who played the role of a teleplay in the episode that won \"Best Television Episode\"?", "sql": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T1.award = 'Best Television Episode'", "source_tables": ["award", "person"]}, "evidence": "the role of a teleplay refers to role = 'teleplay'; won refers to result = 'Winner'; \"Best Television Episode\" refers to award = 'Best Television Episode'"}
{"sample_id": 1253, "db_id": "law_episode", "final": {"question": "How many people had filled a role in the episode titled \"Cherished\", but did not show up in the on-screen credits?", "sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished' AND T2.credited = 'false'", "source_tables": ["credit", "episode"]}, "evidence": "titled \"Cherished\" refers to title = 'Cherished'; did not show up in the on-screen credits refers to credited = ''"}
{"sample_id": 1282, "db_id": "law_episode", "final": {"question": "How many times did the episode titled \"Agony\" win an award?", "sql": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Agony' AND T2.result = 'Winner'", "source_tables": ["award", "episode"]}, "evidence": "titled \"Agony\" refers to title = 'Agony'; win an award refers to result = 'Winner'"}
{"sample_id": 1339, "db_id": "law_episode", "final": {"question": "What is the difference of 10 stars votes between the first episode and the last episode?", "sql": "SELECT SUM(CASE WHEN T2.episode = 24 THEN T1.votes ELSE 0 END) - SUM(CASE WHEN T2.episode = 1 THEN T1.votes ELSE 0 END) FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 10", "source_tables": ["episode", "vote"]}, "evidence": "the first episode refers to episode = 1; the last episode refers to episode = 24; 10 stars vote refers to stars = 10; the difference = subtract(votes where episode = 1, votes where episode = 24) where stars = 10"}
{"sample_id": 1249, "db_id": "law_episode", "final": {"question": "How many 10-star votes were given to the episode titled \"Cherished\"?", "sql": "SELECT T2.votes FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Cherished' AND T2.stars = 10", "source_tables": ["episode", "vote"]}, "evidence": "10-star vote refers to stars = 10; titled \"Cherished\" refers to title = 'Cherished'"}
{"sample_id": 1425, "db_id": "synthea", "final": {"question": "Who had to take Clopidogrel 75 MG Oral Tablet for over 10 years?", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet' AND strftime('%Y', T2.STOP) - strftime('%Y', T2.START) > 10", "source_tables": ["medications", "patients"]}, "evidence": "Who implies the full name of the patient which refers to first, last; Clopidogrel 75 MG Oral Tablet refers to medications where DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet'; for over 10 years refers to SUBTRACT(strftime('%Y', STOP), strftime('%Y', START)) > 10;"}
{"sample_id": 1380, "db_id": "synthea", "final": {"question": "How many allergies does Mrs. Saundra Monahan have?", "sql": "SELECT COUNT(DISTINCT T2.code) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Saundra' AND T1.last = 'Monahan'", "source_tables": ["allergies", "patients"]}, "evidence": "allergies refer to PATIENT from allergies;"}
{"sample_id": 1524, "db_id": "synthea", "final": {"question": "List all the full names of patients with a condition described as cystitis.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.patient WHERE T2.DESCRIPTION = 'Cystitis'", "source_tables": ["patients", "conditions"]}, "evidence": "full names = first, last; condition described as cystitis refers to conditions.DESCRIPTION = ''Cystitis';"}
{"sample_id": 1461, "db_id": "synthea", "final": {"question": "How long did Isadora Moen's allergy last? Tell me what kind of allergy she has.", "sql": "SELECT CASE WHEN SUBSTR(T1.STOP, -2, 1) != '9' THEN SUBSTR(T1.STOP, LENGTH(T1.STOP) - 1) + 2000 END - CASE WHEN SUBSTR(T1.START, -2, 1) = '9' THEN SUBSTR(T1.START, LENGTH(T1.START) - 1) + 1900 ELSE SUBSTR(T1.START, LENGTH(T1.START) - 1) + 2000 END AS years , T1.DESCRIPTION FROM allergies AS T1 INNER JOIN patients AS T2 ON T2.patient = T1.PATIENT WHERE T1.STOP IS NOT NULL AND T1.START IS NOT NULL AND T2.first = 'Isadora' AND T2.last = 'Moen'", "source_tables": ["allergies", "patients"]}, "evidence": "how long the allergies last = SUBTRACT(allergies.STOP, allergies.START); kind of allergy refers to allergies.DESCRIPTION;"}
{"sample_id": 1421, "db_id": "synthea", "final": {"question": "Provide the patients' full names who received the extraction of wisdom tooth.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Extraction of wisdom tooth'", "source_tables": ["patients", "procedures"]}, "evidence": "patient's full name refers to first, last; extraction of wisdom tooth refers to DESCRIPTION = 'Extraction of wisdom tooth' from procedures;"}
{"sample_id": 1396, "db_id": "synthea", "final": {"question": "What are the full names of the patients who started taking Yaz 28 Day Pack in 2011?", "sql": "SELECT DISTINCT T1.first, T1.last, T1.suffix FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Yaz 28 Day Pack' AND strftime('%Y', T2.START) = '2011'", "source_tables": ["medications", "patients"]}, "evidence": "full name refers to first, last; Yaz 28 Day Pack refers to DESCRIPTION = 'Yaz 28 Day Pack' from medications; started taking in 2011 refers to START like '2011%';"}
{"sample_id": 1517, "db_id": "synthea", "final": {"question": "List the full names of patients with nut allergy.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to nut'", "source_tables": ["allergies", "patients"]}, "evidence": "full names = first, last; nut allergy refers to allergies.DESCRIPTION = 'Allergy to nut';"}
{"sample_id": 1464, "db_id": "synthea", "final": {"question": "Please provide the dates on which Elly Koss was immunized with the influenza seasonal injectable preservative-free vaccine.", "sql": "SELECT T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' AND T1.first = 'Elly' AND T1.last = 'Koss'", "source_tables": ["immunizations", "patients"]}, "evidence": "date of immunization refers to immunizations.DATE; immunized with the influenza seasonal injectable preservative-free vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';"}
{"sample_id": 1454, "db_id": "synthea", "final": {"question": "How many patients of Irish ethnicity take medication for 'myocardial infarction'?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Myocardial Infarction' AND T1.ethnicity = 'irish'", "source_tables": ["medications", "patients"]}, "evidence": "take medication for myocardial infarction refers to medications.REASONDESCRIPTION = 'Myocardial Infarction';"}
{"sample_id": 1385, "db_id": "synthea", "final": {"question": "Calculate the average period of Mr. Wesley Lemke's care plans.", "sql": "SELECT CAST(SUM(strftime('%J', T2.STOP) - strftime('%J', T2.START)) AS REAL) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Wesley' AND T1.last = 'Lemke'", "source_tables": ["careplans", "patients"]}, "evidence": "DIVIDE(SUBTRACT(stop time - start time), COUNT(ID)));"}
{"sample_id": 1360, "db_id": "synthea", "final": {"question": "By how much did Elly Koss's weight increase from the observation in 2008 to the observation in 2009?", "sql": "SELECT SUM(CASE WHEN strftime('%Y', T2.date) = '2009' THEN T2.VALUE END) - SUM(CASE WHEN strftime('%Y', T2.date) = '2008' THEN T2.VALUE END) AS increase , T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Body Height'", "source_tables": ["patients", "observations"]}, "evidence": "SUBTRACT((DATE like '2009%'), (DATE like '2008%')) where DESCRIPTION = 'Body Weight';"}
{"sample_id": 1501, "db_id": "synthea", "final": {"question": "How many interactions did Lorri Simons have with medical professionals between 2010 and 2017? What percentage of encounters are attributed to prenatal visits?", "sql": "SELECT COUNT(T1.patient) , CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Prenatal visit' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Lorri' AND T1.last = 'Simonis' AND strftime('%Y', T2.DATE) BETWEEN '2010' AND '2017'", "source_tables": ["patients", "encounters"]}, "evidence": "between 2010 and 2017 refers to substr(encounters.DATE, 1, 4) between '2010' and '2017'; percentage = MULTIPLY(DIVIDE(COUNT(encounters.ID WHERE DESCRIPTION = 'Prenatal visit'), count(encounters.ID)), 1.0); prenatal visits refers to encounters.DESCRIPTION = 'Prenatal visit';"}
{"sample_id": 1416, "db_id": "synthea", "final": {"question": "What is the glucose level of the patient that lives at 365 Della Crossroad Suite 202, Deerfield, MA 01342 US?", "sql": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Glucose' AND T1.address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US'", "source_tables": ["patients", "observations"]}, "evidence": "glucose level refers to VALUE, UNITS where DESCRIPTION = 'Glucose' from observations; lives at 365 Della Crossroad Suite 202, Deerfield, MA 01342 US refers to address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US';"}
{"sample_id": 1543, "db_id": "synthea", "final": {"question": "What is the difference between the number of married patients and the number of single patients with diabetes?", "sql": "SELECT SUM(CASE WHEN T2.marital = 'M' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.marital = 'S' THEN 1 ELSE 0 END) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Diabetes'", "source_tables": ["patients", "conditions"]}, "evidence": "difference = SUBTRACT(patients.patient WHERE marital = 'M'), COUNT(patients.patient WHERE marital = 'S') WHERE conditions.DESCRIPTION = 'Diabetes'); married patients refers to marital = 'M'; single patients refers to marital = 'S'; diabetes refers to conditions.DESCRIPTION = 'Diabetes';"}
{"sample_id": 1540, "db_id": "synthea", "final": {"question": "Who is the patient with a body weight of 61.97 kg?", "sql": "SELECT T2.first, T2.last FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Body Weight' AND T1.UNITS = 'kg' AND T1.VALUE = 61.97", "source_tables": ["patients", "observations"]}, "evidence": "body weight of 61.97 kg refers to observations.DESCRIPTION = 'Body Weight' AND observations.VALUE = 61.97; observations.UNITS = 'kg'"}
{"sample_id": 1488, "db_id": "synthea", "final": {"question": "Name the reason Walter Bahringer visited medical professionals in July 2009.", "sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Walter' AND T1.last = 'Bahringer' AND T2.DATE LIKE '2009-07%'", "source_tables": ["patients", "encounters"]}, "evidence": "reason for visiting medical professionals refers to encounters.REASONDESCRIPTION;\u00a0 in July 2009 refers to\u00a0 substr(encounters.DATE, 1, 7) = '2009-07' ;"}
{"sample_id": 1457, "db_id": "synthea", "final": {"question": "How many women need to take 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]'?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]' AND T1.gender = 'F'", "source_tables": ["medications", "patients"]}, "evidence": "women refers to gender = 'F';\u00a0Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual] refers to medications.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]'"}
{"sample_id": 1364, "db_id": "synthea", "final": {"question": "For how long was Elly Koss required to take Acetaminophen?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description LIKE 'Acetaminophen%'", "source_tables": ["medications", "patients"]}, "evidence": "SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) where DESCRIPTION like 'Acetaminophen%';"}
{"sample_id": 1534, "db_id": "synthea", "final": {"question": "Who is the 44-year-old patient diagnosed with drug overdose?", "sql": "SELECT T2.first, T2.last FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Drug overdose' AND ROUND((strftime('%J', T2.deathdate) - strftime('%J', T2.birthdate)) / 365) = 44", "source_tables": ["patients", "conditions"]}, "evidence": "44-year-old = DIVIDE(SUBTRACT(julianday(conditions.START), julianday(patients.birthdate)), 365, 0) = 44;"}
{"sample_id": 1521, "db_id": "synthea", "final": {"question": "How many white patients whose birth year is 1935 have a stroke?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.patient WHERE strftime('%Y', T1.birthdate) = '1935' AND T1.race = 'white' AND T2.DESCRIPTION = 'Stroke'", "source_tables": ["patients", "conditions"]}, "evidence": "white refers to race = 'white'; birth year is 1935 refers to substr(birthdate, 1, 4) = '1935'; stroke refers to conditions.DESCRIPTION = 'Stroke';"}
{"sample_id": 1399, "db_id": "synthea", "final": {"question": "How many patients have the most prevalent conditions?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) ORDER BY T1.\"PREVALENCE RATE\" DESC LIMIT 1", "source_tables": ["all_prevalences", "conditions"]}, "evidence": "the most prevalent conditions refer to MAX(PREVALENCE RATE);"}
{"sample_id": 1477, "db_id": "synthea", "final": {"question": "List out patient names with calcium deficiency.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Calcium' AND T2.VALUE < 8.6", "source_tables": ["patients", "observations"]}, "evidence": "patient names = first, last; calcium deficiency refers to observations.DESCRIPTION = 'Calcium' and observations.VALUE < 8.6;"}
{"sample_id": 1495, "db_id": "synthea", "final": {"question": "How old was Mrs. Laronda Bernier at the time of her most recent medical encounter?", "sql": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Laronda' AND T1.last = 'Bernier' ORDER BY T2.DATE DESC LIMIT 1", "source_tables": ["patients", "encounters"]}, "evidence": "how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); most recent medical encounter refers to MIN(encounters.DATE);"}
{"sample_id": 1511, "db_id": "synthea", "final": {"question": "List out full name of patients who have \"Diabetic diet\" in the description of the care plan.", "sql": "SELECT DISTINCT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Diabetic diet'", "source_tables": ["careplans", "patients"]}, "evidence": "full name = first, last; Diabetic diet refers to careplans.DESCRIPTION = 'Diabetic diet';"}
{"sample_id": 1446, "db_id": "synthea", "final": {"question": "How many of the patients who have stopped taking medication for 'coronary heart disease' are still alive?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Coronary Heart Disease' AND T1.STOP IS NOT NULL AND T2.deathdate IS NULL", "source_tables": ["medications", "patients"]}, "evidence": "patients who have stopped taking medication for 'coronary heart disease' refer to PATIENT where REASONDESCRIPTION = 'Coronary Heart Disease' and STOP is not null from medications; if deathdate is null, it means this patient is still alive;"}
{"sample_id": 1386, "db_id": "synthea", "final": {"question": "State the average period of Ms. Angelena Kertzmann's several normal pregnancies.", "sql": "SELECT CAST(SUM(strftime('%J', T2.STOP) - strftime('%J', T2.START)) AS REAL) / COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Angelena' AND T1.last = 'Kertzmann' AND T2.description = 'Normal pregnancy'", "source_tables": ["patients", "conditions"]}, "evidence": "DIVIDE(SUBTRACT(stop time - start time), COUNT(DESCRIPTION = 'Normal pregnancy')));"}
{"sample_id": 1503, "db_id": "synthea", "final": {"question": "What is the start date of the care plan of the patient whose maiden name is Adams?", "sql": "SELECT DISTINCT T1.START FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.maiden = 'Adams'", "source_tables": ["careplans", "patients"]}, "evidence": "start date of the care plan refers to careplans.START;"}
{"sample_id": 1434, "db_id": "synthea", "final": {"question": "List down the first name of patients who have cystitis condition.", "sql": "SELECT DISTINCT T1.first FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Cystitis'", "source_tables": ["patients", "conditions"]}, "evidence": "cystitis refers to conditions where DESCRIPTION = 'Cystitis';"}
{"sample_id": 1513, "db_id": "synthea", "final": {"question": "How many Italian patients have the care plan code of 304510005?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'italian' AND T1.CODE = '304510005'", "source_tables": ["careplans", "patients"]}, "evidence": "Italian patients refers to ethnicity = 'italian';"}
{"sample_id": 1379, "db_id": "synthea", "final": {"question": "Give the number of claims did Ms. Abbie Cole have in the year of 2011.", "sql": "SELECT COUNT(T2.BILLABLEPERIOD) FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Abbie' AND T1.last = 'Cole' AND T2.BILLABLEPERIOD BETWEEN '2010-12-31' AND '2012-01-01'", "source_tables": ["claims", "patients"]}, "evidence": "in the year of 2011 refers to BILLABLEPERIOD between '2010-12-31' and '2012-01-01';"}
{"sample_id": 1458, "db_id": "synthea", "final": {"question": "What percentage of patients born in 'Pembroke MA US' have 'allergy to grass pollen'?", "sql": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Allergy to grass pollen' THEN 1 ELSE 0 END) AS REL) * 100 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.birthplace = 'Pembroke MA US'", "source_tables": ["allergies", "patients"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(patient WHERE allergies.DESCRIPTION = 'Allergy to grass pollen'), COUNT(patient) WHERE birthplace = 'Pembroke MA US'), 100.0); born in Pembroke MA US refers to birthplace = 'Pembroke MA US'; allergy to grass pollen refers to allergies.DESCRIPTION = 'Allergy to grass';"}
{"sample_id": 1530, "db_id": "synthea", "final": {"question": "Among the white patients, what is the average body height of the patients?", "sql": "SELECT AVG(T1.VALUE) FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.DESCRIPTION = 'Body Height'", "source_tables": ["patients", "observations"]}, "evidence": "white refers to race = 'white'; average body height = AVG(observations.VALUE WHERE observations.DESCRIPTION = 'Body Height'); body height refers to observations.DESCRIPTION = 'Body Height';"}
{"sample_id": 1455, "db_id": "synthea", "final": {"question": "How many patients with care plan for 'concussion with loss of consciousness' are married?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'M' AND T2.REASONDESCRIPTION = 'Concussion with loss of consciousness'", "source_tables": ["careplans", "patients"]}, "evidence": "concussion with loss of consciousness refers to careplans.DESCRIPTION = 'Concussion with loss of consciousness'; married refers to marital = 'M';"}
{"sample_id": 1442, "db_id": "synthea", "final": {"question": "Calculate the number of female patients who accepted \"HPV quadrivalent\" immunization.", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'HPV  quadrivalent' AND T1.gender = 'F'", "source_tables": ["immunizations", "patients"]}, "evidence": "female refers to gender = 'F'; \"HPV quadrivalent\" immunization refers to immunizations where DESCRIPTION = 'HPV quadrivalent';"}
{"sample_id": 1433, "db_id": "synthea", "final": {"question": "What are the birth date of patients who took outpatient encounter care plan?", "sql": "SELECT DISTINCT T1.birthdate FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Outpatient Encounter'", "source_tables": ["patients", "encounters"]}, "evidence": "outpatient encounter care plan refers to careplans where DESCRIPTION = 'Outpatient Encounter';"}
{"sample_id": 1483, "db_id": "synthea", "final": {"question": "How many unmarried women were checked for normal pregnancy?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Normal pregnancy' AND T2.gender = 'F' AND T2.marital = 'S'", "source_tables": ["patients", "conditions"]}, "evidence": "unmarried refers to marital = 'S'; women refers to gender = 'F'; normal pregnancy refers to conditions.DESCRIPTION = 'normal pregnancy';"}
{"sample_id": 1452, "db_id": "synthea", "final": {"question": "On what dates did the billable period begin for patients with the last name Dickinson?", "sql": "SELECT DISTINCT T2.BILLABLEPERIOD FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T1.last = 'Dickinson'", "source_tables": ["claims", "patients"]}, "evidence": "dates when the billable period begin refers to BILLABLEPERIOD;"}
{"sample_id": 1450, "db_id": "synthea", "final": {"question": "How many patients with a body weight of more than 100 kg have a 'diabetes self-management plan' care plan?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN observations AS T3 ON T2.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'Body Weight' AND T1.DESCRIPTION = 'Diabetes self management plan' AND T3.VALUE > 100 AND T3.UNITS = 'kg'", "source_tables": ["careplans", "patients", "observations"]}, "evidence": "body weight of more than 100 kg refers to observations.DESCRIPTION = 'Body Weight' AND observations.VALUE > 100 AND observations.UNITS = 'kg'; diabetes self-management plan refers to careplans.DESCRIPTION = 'Diabetes self management plan';"}
{"sample_id": 1520, "db_id": "synthea", "final": {"question": "Provide the full names of patients who have been taking Penicillin V Potassium 250 MG since 1948.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND strftime('%Y', T2.START) >= '1948'", "source_tables": ["medications", "patients"]}, "evidence": "full names = first, last; Penicillin V Potassium 250 MG refers to medications.DESCRIPTION = 'Penicillin V Potassium 250 MG'; since 1948 refers to substr(medications.START, 1, 4) > = '1948';"}
{"sample_id": 1359, "db_id": "synthea", "final": {"question": "According to the observation on 2008/3/11, what was the height of Elly Koss?", "sql": "SELECT T2.value, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.date = '2008-03-11' AND T2.description = 'Body Height'", "source_tables": ["patients", "observations"]}, "evidence": "2008/3/11 refers to date = '2008-03-11'; height refers to DESCRIPTION = 'Body Height' from observations;"}
{"sample_id": 1363, "db_id": "synthea", "final": {"question": "The highest Systolic Blood Pressure was observed in which patient? Please give his or her full name.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.VALUE = ( SELECT MAX(VALUE) FROM observations WHERE description = 'Systolic Blood Pressure' ) LIMIT 1", "source_tables": ["patients", "observations"]}, "evidence": "the highest Systolic Blood Pressure refers to MAX(DESCRIPTION = 'Systolic Blood Pressure') from observations; full name refers to first, last;"}
{"sample_id": 1378, "db_id": "synthea", "final": {"question": "Give the procedure description of Ms. Jacquelyn Shanahan on 2009/8/9.", "sql": "SELECT DISTINCT T2.description FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' AND T2.DATE = '2009-08-09'", "source_tables": ["patients", "procedures"]}, "evidence": "on 2009/8/9 refers to DATE = '2009-08-09';"}
{"sample_id": 1523, "db_id": "synthea", "final": {"question": "List the patient ids whose disease has the most occurrences.", "sql": "SELECT T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN all_prevalences AS T3 ON T3.ITEM = T2.DESCRIPTION ORDER BY T3.OCCURRENCES DESC LIMIT 1", "source_tables": ["patients", "all_prevalences", "conditions"]}, "evidence": "patient ids refers to patients.patient; disease with the most occurrence refers to MAX(all_prevalences.OCCURENCES);"}
{"sample_id": 1496, "db_id": "synthea", "final": {"question": "What condition forced Mrs. Joye Homenick to seek medical attention in 2017?", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Joye' AND T1.last = 'Homenick' AND strftime('%Y', T2.START) = '2017'", "source_tables": ["patients", "conditions"]}, "evidence": "condition refers to conditions.DESCRIPTION; in 2017 refers to substr(conditions.START, 1, 4) = '2017';"}
{"sample_id": 1423, "db_id": "synthea", "final": {"question": "Name the patients who had an allergy to soy.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to soya'", "source_tables": ["allergies", "patients"]}, "evidence": "allergy to soy refers to allergies where DESCRIPTION = 'Allergy to soya';"}
{"sample_id": 1468, "db_id": "synthea", "final": {"question": "In 2010, how many single patients took Nitrofurantoin 5 mg/ML [Furadantin] to cure cystitis?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'S' AND T2.REASONDESCRIPTION = 'Cystitis' AND T2.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]' AND strftime('%Y', T2.START) = '2010'", "source_tables": ["medications", "patients"]}, "evidence": "in 2010 refers to substr(medications.START, 1, 4) = '2010' AND substr(medications.stop, 1, 4) = '2010'; Nitrofurantoin 5 mg/ML [Furadantin] refers to medications.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]'; cystitis refers to medications.REASONDESCRIPTION = 'Cystitis';"}
{"sample_id": 1470, "db_id": "synthea", "final": {"question": "From 1/9/2011 to 8/29/2012, how many German patients have their outpatient encounters?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.ethnicity = 'german' AND T2.DATE BETWEEN '2011-01-09' AND '2012-08-29' AND T2.DESCRIPTION = 'Outpatient Encounter'", "source_tables": ["patients", "encounters"]}, "evidence": "From 1/9/2011 to 8/29/2012 refers to encounters.DATE between '2011-09-01' and '2012-08-29'; German patients refers to ethnicity = 'german'; outpatient encounters refers to encounters.DESCRIPTION = 'Outpatient Encounter';"}
{"sample_id": 1408, "db_id": "synthea", "final": {"question": "Count all of the living patients that had a stroke.", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.description = 'Stroke' AND T2.deathdate IS NULL", "source_tables": ["patients", "conditions"]}, "evidence": "if deathdate is null, it means this patient is still alive or living; stroke refers to conditions where DESCRIPTION = 'Stroke';"}
{"sample_id": 1505, "db_id": "synthea", "final": {"question": "What is the percentage of Hispanic patients who stopped their care plan in 2011?", "sql": "SELECT CAST(SUM(CASE WHEN T2.race = 'hispanic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.stop) = '2011'", "source_tables": ["careplans", "patients"]}, "evidence": "Hispanic patients refers to ethnicity = 'hispanic'; percentage = MULTIPLY(DIVIDE(COUNT(careplans.PATIENT WHERE ethnicity = 'hispanic'), COUNT(careplans.PATIENT)), 1.0); stopped their care plan in 2011 refers to substr(careplans.stop, 1, 4) = '2011';"}
{"sample_id": 1499, "db_id": "synthea", "final": {"question": "How many patients sought medical attention due to a second-degree burn? Describe the care plan recommended to them.", "sql": "SELECT COUNT(DISTINCT T2.PATIENT), T2.DESCRIPTION FROM encounters AS T1 INNER JOIN careplans AS T2 ON T1.PATIENT = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Second degree burn'", "source_tables": ["careplans", "encounters"]}, "evidence": "second-degree burn refers to encounters.REASONDESCRIPTION = 'Second degree burn'; ;"}
{"sample_id": 1411, "db_id": "synthea", "final": {"question": "What is the medicine prescribed for the patient with social security number 999-94-3751?", "sql": "SELECT T1.DESCRIPTION FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ssn = '999-94-3751'", "source_tables": ["medications", "patients"]}, "evidence": "medicine prescribed refers to DESCRIPTION from medications; social security number 999-94-3751 refers to ssn = '999-94-3751';"}
{"sample_id": 1498, "db_id": "synthea", "final": {"question": "How long did Elly Koss have to take Acetaminophen 160 MG?", "sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND last = 'Koss' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'", "source_tables": ["medications", "patients"]}, "evidence": "how long = SUBTRACT(julianday(medications.stop), julianday(medications.START)); Acetaminophen 160 MG refers to medications.DESCRIPTION = 'Acetaminophen 160 MG';"}
{"sample_id": 1538, "db_id": "synthea", "final": {"question": "Calculate the average age of the male patients that have hypertension.", "sql": "SELECT SUM(CASE WHEN T2.deathdate IS NULL THEN ROUND((strftime('%J', date('now')) - strftime('%J', T2.birthdate)) / 365) ELSE ROUND((strftime('%J', T2.deathdate) - strftime('%J', T2.birthdate)) / 365) END) / COUNT(T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Hypertension' AND T2.gender = 'M'", "source_tables": ["patients", "conditions"]}, "evidence": "average age = AVG(DIVIDE(SUBTRACT(deathdate is null WHERE (julianday(substr(datetime('now'), 1, 10)))), julianday(patients.birthdate)), 365); male refers to gender = 'M'; hypertension refers to conditions.DESCRIPTION = 'Hypertension'"}
{"sample_id": 1410, "db_id": "synthea", "final": {"question": "Among the patients with hypertension, what is the average of their diastolic blood pressure?", "sql": "SELECT AVG(T1.VALUE) FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN conditions AS T3 ON T2.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'Hypertension' AND T1.DESCRIPTION = 'Diastolic Blood Pressure'", "source_tables": ["patients", "observations", "conditions"]}, "evidence": "hypertension refers to conditions where DESCRIPTION = 'Hypertension'; average diastolic blood pressure refers to AVG(VALUE) where DESCRIPTION = 'Diastolic Blood Pressure' from observations;"}
{"sample_id": 1404, "db_id": "synthea", "final": {"question": "Among the patients with prediabetes, how many are female?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.gender = 'F' AND T1.DESCRIPTION = 'Prediabetes'", "source_tables": ["patients", "conditions"]}, "evidence": "patients with prediabetes refer to PATIENT from conditions where DESCRIPTION = 'Prediabetes'; female refers to gender = 'F';"}
{"sample_id": 1435, "db_id": "synthea", "final": {"question": "How many stroke patients have married?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Stroke' AND T1.marital = 'M'", "source_tables": ["patients", "conditions"]}, "evidence": "stroke refers to conditions where DESCRIPTION = 'Stroke'; married refers to the marital status of the patient in which marital = 'M';"}
{"sample_id": 1537, "db_id": "synthea", "final": {"question": "What is the care plan for the patient with social security number 999-15-3685?", "sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ssn = '999-15-3685'", "source_tables": ["careplans", "patients"]}, "evidence": "social security number refers to ssn; ssn = '999-15-3685';"}
{"sample_id": 1422, "db_id": "synthea", "final": {"question": "Provide the body weight of Elly Koss in every observation.", "sql": "SELECT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.DESCRIPTION = 'Body Weight'", "source_tables": ["patients", "observations"]}, "evidence": "body weight VALUE and UNITS where DESCRIPTION = 'Body Weight' from observations;"}
{"sample_id": 1527, "db_id": "synthea", "final": {"question": "Describe the care plans of patient Major D'Amore's plan of care.", "sql": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'", "source_tables": ["careplans", "patients"]}, "evidence": ""}
{"sample_id": 1448, "db_id": "synthea", "final": {"question": "Indicate the full name of the patients who have 3 different allergies.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT GROUP BY T1.patient ORDER BY COUNT(DISTINCT T2.DESCRIPTION) > 3", "source_tables": ["allergies", "patients"]}, "evidence": "full name refers to first, last; have 3 different allergies refer to allergies where COUNT(DESCRIPTION) > 3;"}
{"sample_id": 1491, "db_id": "synthea", "final": {"question": "Please include the full name of the patient who received a lung transplant.", "sql": "SELECT T2.first, T2.last FROM procedures AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Transplant of lung (procedure)'", "source_tables": ["patients", "procedures"]}, "evidence": "full name = first, last; lung transplant refers to procedures.DESCRIPTION = 'Transplant of lung (procedure)';"}
{"sample_id": 1516, "db_id": "synthea", "final": {"question": "How many male patients have prediabetes condition?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 WHERE T2.DESCRIPTION = 'Prediabetes' AND T1.gender = 'M'", "source_tables": ["patients", "conditions"]}, "evidence": "male refers to gender = 'M'; prediabetes condition refers to conditions.DESCRIPTION = 'Prediabetes';"}
{"sample_id": 1426, "db_id": "synthea", "final": {"question": "Which procedures and medications were received by the patient with the third-degree burn?", "sql": "SELECT DISTINCT T1.DESCRIPTION, T3.DESCRIPTION FROM procedures AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN medications AS T3 ON T2.patient = T3.PATIENT WHERE T2.DESCRIPTION = 'Third degree burn'", "source_tables": ["medications", "procedures", "conditions"]}, "evidence": "procedures refer to DESCRIPTION from procedures; medications refers to DESCRIPTION from medications; third-degree burn refers to conditions where DESCRIPTION = 'Third degree burn';"}
{"sample_id": 1478, "db_id": "synthea", "final": {"question": "List out 5 most common conditions for underweight patient.", "sql": "SELECT DISTINCT T2.DESCRIPTION, T2.VALUE, T2.UNITS FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Body Mass Index' GROUP BY T2.VALUE ORDER BY COUNT(T2.VALUE) LIMIT 5", "source_tables": ["patients", "observations"]}, "evidence": "most common condition refers to MAX(COUNT(conditions.DESCRIPTION)); underweight patient refers to MIN(observations.VALUE WHERE observations.DESCRIPTION = 'Body Mass Index');"}
{"sample_id": 1388, "db_id": "synthea", "final": {"question": "How many patients have diabetes that started in 1988?", "sql": "SELECT COUNT(PATIENT) FROM conditions WHERE DESCRIPTION = 'Diabetes' AND strftime('%Y', START) = '1988'", "source_tables": ["conditions"]}, "evidence": "diabetes that started in 1988 refers to DESCRIPTION = 'Diabetes' from conditions and START like '1988%';"}
{"sample_id": 1392, "db_id": "synthea", "final": {"question": "What is/are the ids of the tallest patient/s?", "sql": "SELECT PATIENT FROM observations WHERE DESCRIPTION = 'Body Height' AND UNITS = 'cm' ORDER BY VALUE DESC LIMIT 1", "source_tables": ["observations"]}, "evidence": "id of the tallest patient/s refers to PATIENT from observations where MAX(DESCRIPTION = 'Body Height');"}
{"sample_id": 1482, "db_id": "synthea", "final": {"question": "How many male patients are diagnosed with hypertension as compared to female patients?", "sql": "SELECT COUNT(DISTINCT CASE WHEN T2.gender = 'M' THEN T2.patient END) AS Male , COUNT(DISTINCT CASE WHEN T2.gender = 'F' THEN T2.patient END) AS Female FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Hypertension'", "source_tables": ["patients", "conditions"]}, "evidence": "male refers to gender = 'M'; diagnosed with hypertension refers to conditions.DESCRIPTION = 'Hypertension'; female refers to gender = 'F'; number of male patients with hypertension = count(patient WHERE gender = 'M' AND conditions.DESCRIPTION = 'Hypertension'); number of female patients with hypertension = count(patient WHERE gender = 'F' AND conditions.DESCRIPTION = 'Hypertension');"}
{"sample_id": 1436, "db_id": "synthea", "final": {"question": "List down the address of patients who have billable period in 2010.", "sql": "SELECT DISTINCT T1.address FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T2.BILLABLEPERIOD LIKE '2010%'", "source_tables": ["claims", "patients"]}, "evidence": ""}
{"sample_id": 1424, "db_id": "synthea", "final": {"question": "How many times did Keven Kuhn receive DTaP immunization?", "sql": "SELECT COUNT(T2.CODE) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.DESCRIPTION = 'DTaP'", "source_tables": ["immunizations", "patients"]}, "evidence": "DTaP immunization refers to immunizations where DESCRIPTION = 'DTaP';"}
{"sample_id": 1526, "db_id": "synthea", "final": {"question": "Indicate the start date of patient Walter Bahringer's care plan.", "sql": "SELECT DISTINCT T2.start FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Walter' AND T1.last = 'Bahringer'", "source_tables": ["careplans", "patients"]}, "evidence": "start date of the care plan refers to careplans.START;"}
{"sample_id": 1472, "db_id": "synthea", "final": {"question": "Give me the reason, name of the drug, and duration of medication under encounter ID 23c293ec-dbae-4a22-896e-f12cf3c8bac3. Tell me if the patient is still alive.", "sql": "SELECT T2.REASONDESCRIPTION, T2.DESCRIPTION , strftime('%J', T2.STOP) - strftime('%J', T2.START) AS days , CASE WHEN T1.deathdate IS NULL THEN 'alive' ELSE 'dead' END FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.ENCOUNTER = '23c293ec-dbae-4a22-896e-f12cf3c8bac3'", "source_tables": ["medications", "patients"]}, "evidence": "reason refers to medications.REASONDESCRIPTION; name of the drug refers to medications.DESCRIPTION; duration of medication = SUBTRACT(julianday(medications.STOP, julianday(medications.START))); ecounter ID refers to encounters.ID; encounters.ID = '23c293ec-dbae-4a22-896e-f12cf3c8bac3'; if patients.deathdate is null then the patient is alive; if patients.deathdate is not null then the patient is not alive;"}
{"sample_id": 1533, "db_id": "synthea", "final": {"question": "How many patients who are allergic to peanuts have asthma?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN allergies AS T3 ON T2.patient = T3.PATIENT WHERE T1.DESCRIPTION = 'Asthma' AND T3.DESCRIPTION = 'Allergy to peanuts'", "source_tables": ["allergies", "patients", "conditions"]}, "evidence": "allergic to peanuts refers to allergies.DESCRIPTION = 'Allergy to peanuts'; asthma refers to conditions.DESCRIPTION = 'Asthma';"}
{"sample_id": 1371, "db_id": "synthea", "final": {"question": "According to all the observations of Elly Koss, what was her average weight?", "sql": "SELECT AVG(T2.VALUE), T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Body Weight'", "source_tables": ["patients", "observations"]}, "evidence": "DIVIDE(SUM(VALUE), COUNT(VALUE)) WHERE DESCRIPTION = 'Body Weight';"}
{"sample_id": 1480, "db_id": "synthea", "final": {"question": "What care plans have been received by Mrs. Elly Koss during year 1970?", "sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND strftime('%Y', T2.START) = '2013'", "source_tables": ["careplans", "patients"]}, "evidence": "during year 1970 refers to substr(careplans.START, 1, 4) = '1970' and substr(careplans.STOP, 1, 4) = '1970';"}
{"sample_id": 1362, "db_id": "synthea", "final": {"question": "For how many times had Elly Koss have her Systolic Blood Pressure observed?", "sql": "SELECT COUNT(T2.description) FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Systolic Blood Pressure'", "source_tables": ["patients", "observations"]}, "evidence": "Systolic Blood Pressure refers to DESCRIPTION = 'Systolic Blood Pressure';"}
{"sample_id": 1484, "db_id": "synthea", "final": {"question": "List out the procedure and medicine prescribed for drug overdose patients.", "sql": "SELECT DISTINCT T2.DESCRIPTION, T3.DESCRIPTION FROM encounters AS T1 INNER JOIN procedures AS T2 ON T1.PATIENT = T2.PATIENT INNER JOIN medications AS T3 ON T1.PATIENT = T3.PATIENT WHERE T1.REASONDESCRIPTION = 'Drug overdose'", "source_tables": ["medications", "encounters", "procedures"]}, "evidence": "procedure refers to procedures.DESCRIPTION; medicine prescribed refers to medications.DESCRIPTION; drug overdose refers to encounters.REASONDESCRIPTION = 'Drug overdose';"}
{"sample_id": 1449, "db_id": "synthea", "final": {"question": "How many patients with 'allergy to eggs' have been immunized with 'Td (adult) preservative free'?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN immunizations AS T3 ON T2.patient = T3.PATIENT WHERE T1.DESCRIPTION = 'Allergy to eggs' AND T3.DESCRIPTION = 'Td (adult) preservative free'", "source_tables": ["immunizations", "allergies", "patients"]}, "evidence": "allergy to eggs' refers to allergies where DESCRIPTION = 'Allergy to eggs'; immunized with 'Td (adult) preservative free' refers to immunizations where DESCRIPTION = 'Td (adult) preservative free';"}
{"sample_id": 1494, "db_id": "synthea", "final": {"question": "Identify the allergy period for Isadora Moen and what triggered it.", "sql": "SELECT T2.START, T2.STOP, T2.DESCRIPTION FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Isadora' AND T1.last = 'Moen'", "source_tables": ["allergies", "patients"]}, "evidence": "allergy period = SUBTRACT(allergies.START, allergies.STOP); what triggered the allergy refers to allergies.DESCRIPTION;"}
{"sample_id": 1515, "db_id": "synthea", "final": {"question": "How many black patients stopped their care plan in 2017?", "sql": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'black' AND strftime('%Y', T1.STOP) = '2017'", "source_tables": ["careplans", "patients"]}, "evidence": "black refers to race = 'black'; stopped their care plan in 2017 refers to substr(careplans.STOP, 1, 4) = '2017';"}
{"sample_id": 1401, "db_id": "synthea", "final": {"question": "List the ids of all the patients with condition that has a prevalence percentage of 18.8%.", "sql": "SELECT DISTINCT T1.PATIENT FROM conditions AS T1 INNER JOIN all_prevalences AS T2 ON lower(T2.ITEM) = lower(T1.DESCRIPTION) WHERE T2.\"PREVALENCE PERCENTAGE\" = CAST(18.8 AS float)", "source_tables": ["all_prevalences", "conditions"]}, "evidence": "ids of the patients refer to PATIENT from conditions; condition that has a prevalence percentage of 18.8% refers to PREVALENCE PERCENTAGE = 18.8;"}
{"sample_id": 1395, "db_id": "synthea", "final": {"question": "How many of the patients born in 1920s had pneumonia?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE DESCRIPTION = 'Pneumonia' AND strftime('%Y', T1.birthdate) LIKE '192%'", "source_tables": ["patients", "conditions"]}, "evidence": "patients born in 1920s refer to patient where birthdate like '192%'; pneumonia refers to DESCRIPTION = 'Pneumonia' from conditions;"}
{"sample_id": 1361, "db_id": "synthea", "final": {"question": "During all the observations of Elly Koss, what was the highest Systolic Blood Pressure observed?", "sql": "SELECT T2.value, T2.units FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.description = 'Systolic Blood Pressure' ORDER BY T2.VALUE DESC LIMIT 1", "source_tables": ["patients", "observations"]}, "evidence": "the highest Systolic Blood Pressure refers to MAX(DESCRIPTION = 'Systolic Blood Pressure') from observations;"}
{"sample_id": 1403, "db_id": "synthea", "final": {"question": "Among the patients who were immunized with meningococcal MCV4P, how many have viral sinusitis disorder after getting the immunization?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'meningococcal MCV4P' AND T2.DESCRIPTION = 'Viral sinusitis (disorder)'", "source_tables": ["immunizations", "conditions"]}, "evidence": "immunized with meningococcal MCV4P refers to DESCRIPTION = 'meningococcal MCV4P' from immunizations; viral sinusitis disorder refers to DESCRIPTION = 'Viral sinusitis (disorder)' from conditions;"}
{"sample_id": 1418, "db_id": "synthea", "final": {"question": "Among the patients with acute bronchitis, what is the percentage of Asian women?", "sql": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' AND T2.race = 'asian' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Acute bronchitis (disorder)'", "source_tables": ["patients", "conditions"]}, "evidence": "DIVIDE(COUNT(PATIENT where gender = 'F' and race = 'asian'), COUNT(PATIENT)) as percentage where DESCRIPTION = 'Acute bronchitis (disorder)' ;"}
{"sample_id": 1382, "db_id": "synthea", "final": {"question": "Describe the encounter of Mr. Hubert Baumbach on 2008/10/25.", "sql": "SELECT T2.description FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1.first = 'Hubert' AND T1.last = 'Baumbach' AND T2.date = '2008-10-25'", "source_tables": ["patients", "encounters"]}, "evidence": "encounter refers to DESCRIPTION from encounters; on 2008/10/25 refers to DATE = '2008-10-25';"}
{"sample_id": 1389, "db_id": "synthea", "final": {"question": "How many patients are allergic to eggs?", "sql": "SELECT COUNT(PATIENT) FROM allergies WHERE DESCRIPTION = 'Allergy to eggs'", "source_tables": ["allergies"]}, "evidence": "allergic to eggs refer to DESCRIPTION = 'Allergy to eggs' from allergies;"}
{"sample_id": 1485, "db_id": "synthea", "final": {"question": "What is the average body mass index for patients with higher total cholesterol?", "sql": "SELECT SUM(T1.VALUE) / COUNT(T1.PATIENT) FROM observations AS T1 INNER JOIN ( SELECT DISTINCT PATIENT FROM observations WHERE DESCRIPTION = 'Total Cholesterol' AND VALUE > 200 ) AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.DESCRIPTION = 'Body Mass Index'", "source_tables": ["observations"]}, "evidence": "average body mass index = DIVIDE(SUM(observations.VALUE), COUNT(PATIENT) WHERE observations.DESCRIPTION = 'Body Mass Index'); body mass index refers to observations.DESCRIPTION = 'Body Mass Index'; higher total cholesterol refers to observations.DESCRIPTION = 'Total Cholesterol' and observations.VALUE > = 200;"}
{"sample_id": 1465, "db_id": "synthea", "final": {"question": "From 7/9/2010 to 10/29/2013, how many black patients were immunized with the meningococcal MCV4P vaccine?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'meningococcal MCV4P' AND T2.DATE BETWEEN '2010-07-09' AND '2013-10-29' AND T1.race = 'black'", "source_tables": ["immunizations", "patients"]}, "evidence": "From 7/9/2010 to 10/29/2013 refers to DATE between '2010-07-09' and '2013-10-29'; black patients refers to race = 'black'; immunized with the meningococcal MCV4P vaccine refers to immunizations.DESCRIPTION = 'meningococcal MCV4P';"}
{"sample_id": 1453, "db_id": "synthea", "final": {"question": "List the full name of all patients with 'otitis media'.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Otitis media'", "source_tables": ["patients", "conditions"]}, "evidence": "full name = first, last; otitis media refers to conditions.DESCRIPTION = 'Otitis media';"}
{"sample_id": 1376, "db_id": "synthea", "final": {"question": "What is the prevalence percentage of condition no. 64859006?", "sql": "SELECT DISTINCT T1.\"PREVALENCE PERCENTAGE\" FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) WHERE T2.code = '64859006'", "source_tables": ["all_prevalences", "conditions"]}, "evidence": "condition no. 64859006 refers to conditions where CODE = '64859006';"}
{"sample_id": 1525, "db_id": "synthea", "final": {"question": "How many male patients have been described as immune to quadrivalent HPV?", "sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'HPV  quadrivalent' AND T1.gender = 'M'", "source_tables": ["immunizations", "patients"]}, "evidence": "male refers to gender = 'M'; immune to quadrivalent HPV refers to immunizations.DESCRIPTION = 'HPV quadrivalent';"}
{"sample_id": 1479, "db_id": "synthea", "final": {"question": "How many mothers have taken immunization during prenatal visit?", "sql": "SELECT COUNT(DISTINCT T2.PATIENT) FROM encounters AS T1 INNER JOIN immunizations AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.REASONDESCRIPTION = 'Normal pregnancy' AND T1.DATE = T2.DATE", "source_tables": ["immunizations", "encounters"]}, "evidence": "expecting mothers can be attributed to encounters.REASONDESCRIPTION = 'Normal pregnancy';"}
{"sample_id": 1451, "db_id": "synthea", "final": {"question": "What gender is more prone to 'dander (animal) allergy'?", "sql": "SELECT T1.gender FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Dander (animal) allergy' GROUP BY T1.gender ORDER BY COUNT(T1.gender) DESC LIMIT 1", "source_tables": ["allergies", "patients"]}, "evidence": "gender who is more prone to dander (animal) allergy refers to MAX(COUNT(Gender WHERE allergies.DESCRIPTION = 'Dander (animal) allergy'));"}
{"sample_id": 1486, "db_id": "synthea", "final": {"question": "What is the difference between average glucose reading for patients in the 20s and 50s?", "sql": "SELECT SUM(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 20 AND 30 THEN T2.VALUE ELSE 0 END) / COUNT(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 20 AND 30 THEN T2.PATIENT END) - SUM(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 50 AND 60 THEN T2.VALUE ELSE 0 END) / COUNT(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 50 AND 60 THEN T2.PATIENT END) AS difference FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Glucose'", "source_tables": ["patients", "observations"]}, "evidence": "sum(case when t2.DATE-t1.birthdate between 20 and 29 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 20 and 29 then t2.PATIENT else null end)-sum(case when t2.DATE-t1.birthdate between 50 and 59 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 50 and 59 then t2.PATIENT else null end)"}
{"sample_id": 1475, "db_id": "synthea", "final": {"question": "How many types of medication have been prescribed to Mr. Major D'Amore since his visit to the hospital?", "sql": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'", "source_tables": ["medications", "patients"]}, "evidence": "types of medications refers to medications.DESCRIPTION;"}
{"sample_id": 1481, "db_id": "synthea", "final": {"question": "What is the care plan, procedure, medication and the patient's full name for encounter 6f2e3935-b203-493e-a9c0-f23e847b9798?", "sql": "SELECT DISTINCT T3.DESCRIPTION, T4.DESCRIPTION, T5.DESCRIPTION, T1.first, T1.last FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT INNER JOIN careplans AS T3 ON T1.patient = T3.PATIENT INNER JOIN procedures AS T4 ON T1.patient = T4.PATIENT INNER JOIN medications AS T5 ON T1.patient = T5.PATIENT WHERE T2.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798'", "source_tables": ["medications", "encounters", "careplans", "patients", "procedures"]}, "evidence": "car plan refers to careplans.DESCRIPTION; procedure refers to procedures.DESCRIPTION; medication refers to medications.DESCRIPTION; full name = first, last; encounter refers to encounters.ID; encounters.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798';"}
{"sample_id": 1406, "db_id": "synthea", "final": {"question": "What is the age of the patient with hypertension named Giovanni Russel?", "sql": "SELECT strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) AS age FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Giovanni' AND T2.last = 'Russel' AND T1.DESCRIPTION = 'Hypertension'", "source_tables": ["patients", "conditions"]}, "evidence": "age refers to SUBTRACT(strftime('%Y', deathdate), strftime('%Y', birthdate)); hypertension refers to conditions where DESCRIPTION = 'Hypertension';"}
{"sample_id": 1367, "db_id": "synthea", "final": {"question": "What medication did Elly Koss take when she had Streptococcal sore throat?", "sql": "SELECT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.reasondescription = 'Streptococcal sore throat (disorder)'", "source_tables": ["medications", "patients"]}, "evidence": "medication refers to DESCRIPTION from medications; Streptococcal sore throat refers to REASONDESCRIPTION like 'Streptococcal sore throat%';"}
{"sample_id": 1504, "db_id": "synthea", "final": {"question": "Among the male patients, who has the earliest starting date of the care plan?", "sql": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.gender = 'M' ORDER BY T1.START LIMIT 1", "source_tables": ["careplans", "patients"]}, "evidence": "male patients refers to gender = 'M'; earliest starting date of the care plan refers to MIN(careplans.START);"}
{"sample_id": 1437, "db_id": "synthea", "final": {"question": "List down the last name of patients who are allergic to dairy products.", "sql": "SELECT DISTINCT T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Allergy to dairy product'", "source_tables": ["allergies", "patients"]}, "evidence": "allergic to dairy products refers to allergies where DESCRIPTION = 'Allergy to dairy product';"}
{"sample_id": 1372, "db_id": "synthea", "final": {"question": "Among all the patients who once had cystitis, what was the percentage of them being married?", "sql": "SELECT CAST(SUM(CASE WHEN T1.marital = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.description = 'Cystitis'", "source_tables": ["patients", "conditions"]}, "evidence": "DIVIDE(COUNT(marital = 'M'), COUNT(patient)) as percentage where DESCRIPTION = 'Cystitis';\n"}
{"sample_id": 1365, "db_id": "synthea", "final": {"question": "Please list all the medication that are prescribed to Elly Koss.", "sql": "SELECT DISTINCT T2.description FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss'", "source_tables": ["medications", "patients"]}, "evidence": "medication that are prescribed refers to DESCRIPTION from medications;"}
{"sample_id": 1444, "db_id": "synthea", "final": {"question": "Calculate the total type of allergies for German people.", "sql": "SELECT COUNT(DISTINCT T2.DESCRIPTION) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T1.ethnicity = 'german'", "source_tables": ["allergies", "patients"]}, "evidence": "type of allergies refers to DESCRIPTION from allergies; German people refer to PATIENT where ethnicity = 'german';"}
{"sample_id": 1443, "db_id": "synthea", "final": {"question": "List down the encounter descriptions of patients who were born in Pittsfield MA US.", "sql": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.birthplace = 'Pittsfield MA US'", "source_tables": ["patients", "encounters"]}, "evidence": "born in Pittsfield MA US refers to birthplace = 'Pittsfield MA US';"}
{"sample_id": 1532, "db_id": "synthea", "final": {"question": "Provide the allergen of the Dominican patient named Dirk Languish.", "sql": "SELECT T1.DESCRIPTION FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Dirk' AND T2.last = 'Langosh' AND T2.ethnicity = 'dominican'", "source_tables": ["allergies", "patients"]}, "evidence": "allergen refers to allergies.DESCRIPTION;"}
{"sample_id": 1381, "db_id": "synthea", "final": {"question": "Provide the name of the patient who had a claim on 1947/9/11.", "sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T2.billableperiod = '1947-09-11'", "source_tables": ["claims", "patients"]}, "evidence": "name of the patient implies full name and refers to first, last; on 1947/9/11 refers to BILLABLEPERIOD = '1947-09-11';"}
{"sample_id": 1497, "db_id": "synthea", "final": {"question": "When did Mrs. Joye Homenick receive her most recent influenza seasonal vaccine?", "sql": "SELECT T2.DATE FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' AND T1.first = 'Joye' AND T1.last = 'Homenick' ORDER BY T2.DATE DESC LIMIT 1", "source_tables": ["immunizations", "patients"]}, "evidence": "when a patient received her most recent vaccine refers to MAX(immunications.DATE); influenza seasonal vaccine refers to immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';"}
{"sample_id": 1429, "db_id": "synthea", "final": {"question": "What is the prevalence rate of the patients' diseases started on 9th May 2014?", "sql": "SELECT T2.\"PREVALENCE RATE\" FROM conditions AS T1 INNER JOIN all_prevalences AS T2 ON lower(T1.DESCRIPTION) = lower(T2.ITEM) WHERE T1.START = '2014-05-09'", "source_tables": ["all_prevalences", "conditions"]}, "evidence": "diseases started on 9th May 2014 refer to DESCRIPTION from conditions where START = '5/9/2014';"}
{"sample_id": 1374, "db_id": "synthea", "final": {"question": "How many care plans has Mrs. Norman Berge taken?", "sql": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Norman' AND T1.last = 'Berge'", "source_tables": ["careplans", "patients"]}, "evidence": ""}
{"sample_id": 1368, "db_id": "synthea", "final": {"question": "Please give the full names of all the patients who had been prescribed with Acetaminophen.", "sql": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.description LIKE 'Acetaminophen%'", "source_tables": ["medications", "patients"]}, "evidence": "full name refers to first, last; prescribed with Acetaminophen refer to DESCRIPTION like 'Acetaminophen%' from medications;"}
{"sample_id": 1390, "db_id": "synthea", "final": {"question": "What is the id of the patient whose hypertension started most recently?", "sql": "SELECT PATIENT FROM conditions WHERE START = ( SELECT MAX(START) FROM conditions WHERE DESCRIPTION = 'Hypertension' )", "source_tables": ["conditions"]}, "evidence": "id of the patient refers to PATIENT from conditions;\u00a0 hypertension refers to DESCRIPTION = 'Hypertension'; most recently refers to MAX(START);"}
{"sample_id": 1587, "db_id": "car_retails", "final": {"question": "From 2003 to 2004, how many customers have paid more than three times?", "sql": "SELECT COUNT(customernumber) FROM ( SELECT customernumber FROM payments WHERE STRFTIME('%Y', paymentDate) >= '2003' AND STRFTIME('%Y', paymentDate) <= '2004' GROUP BY customernumber HAVING COUNT(customernumber) > 3 ) T", "source_tables": ["payments"]}, "evidence": "paymentdate BETWEEN '2003-01-01' AND '2004-12-31'; customers who have paid more than three times refers to (COUNT(customernumber)>3);"}
{"sample_id": 1582, "db_id": "car_retails", "final": {"question": "State top 3 emails of UK Sales Rep who have the highest credit limit.", "sql": "SELECT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' GROUP BY T1.customerName, T2.email ORDER BY SUM(T1.creditLimit) DESC LIMIT 3", "source_tables": ["customers", "employees"]}, "evidence": "UK is a country; Sales Rep is a job title;"}
{"sample_id": 1648, "db_id": "car_retails", "final": {"question": "Which customer ordered 1939 'Chevrolet Deluxe Coupe' at the highest price?", "sql": "SELECT t4.customerName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode INNER JOIN orders AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN customers AS t4 ON t3.customerNumber = t4.customerNumber WHERE t1.productName = '1939 Chevrolet Deluxe Coupe' ORDER BY t2.priceEach DESC LIMIT 1", "source_tables": ["customers", "products", "orderdetails", "orders"]}, "evidence": "1939 'Chevrolet Deluxe Coupe' refers to productName; the highest price refers to MAX(priceEach)"}
{"sample_id": 1665, "db_id": "car_retails", "final": {"question": "How many 2001 Ferrari Enzo were ordered?", "sql": "SELECT SUM(t1.orderNumber) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t2.productName = '2001 Ferrari Enzo'", "source_tables": ["products", "orderdetails"]}, "evidence": "2001 Ferrari Enzo refers to productName;"}
{"sample_id": 1589, "db_id": "car_retails", "final": {"question": "Among the motorcycles with product scale of 1:10, which of them is the most ordered by American customers?", "sql": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T1.productLine = 'Motorcycles' AND T1.productScale = '1:10' AND T4.country = 'USA' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1", "source_tables": ["customers", "products", "orderdetails", "orders"]}, "evidence": "motorcycle is a product line; American is a nationality of country = 'USA';"}
{"sample_id": 1666, "db_id": "car_retails", "final": {"question": "Which 5 products has the lowest amount of orders? List the product names.", "sql": "SELECT t2.productName FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode GROUP BY t2.productName ORDER BY SUM(t1.quantityOrdered) ASC LIMIT 5", "source_tables": ["products", "orderdetails"]}, "evidence": "The lowest amount of orders refers to MIN(quantityOrdered);"}
{"sample_id": 1565, "db_id": "car_retails", "final": {"question": "Please list different customer names with the payment amount of over 50,000.", "sql": "SELECT DISTINCT T2.customerName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.amount > 50000", "source_tables": ["customers", "payments"]}, "evidence": "amount > 50000;"}
{"sample_id": 1586, "db_id": "car_retails", "final": {"question": "Among the German customers, how many of the them has credit limit of zero?", "sql": "SELECT COUNT(customerNumber) FROM customers WHERE creditLimit = 0 AND country = 'Germany'", "source_tables": ["customers"]}, "evidence": "German is a nationality of country = 'Germany'; CREDITLIMIT = 0"}
{"sample_id": 1646, "db_id": "car_retails", "final": {"question": "Name the Sales Manager of Europe, Middle East, and Africa region. In which office does he/she report to?", "sql": "SELECT t2.firstName, t2.lastName FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode WHERE t2.jobTitle = 'Sale Manager (EMEA)'", "source_tables": ["employees", "offices"]}, "evidence": "Sales Manager refers to jobTitle; Europe, Middle East, and Africa region refers to territory = 'EMEA';"}
{"sample_id": 1651, "db_id": "car_retails", "final": {"question": "How much did customer 103 pay in total?", "sql": "SELECT SUM(t.amount) FROM payments t WHERE t.customerNumber = '103'", "source_tables": ["payments"]}, "evidence": "Pay in total refers to SUM(amount);"}
{"sample_id": 1618, "db_id": "car_retails", "final": {"question": "For the productline where the product No.S18_2949 was produced, what's the text description for that product line?", "sql": "SELECT t1.textDescription FROM productlines AS t1 INNER JOIN products AS t2 ON t1.productLine = t2.productLine WHERE t2.productCode = 'S18_2949'", "source_tables": ["productlines", "products"]}, "evidence": ""}
{"sample_id": 1558, "db_id": "car_retails", "final": {"question": "How many distinct orders were there in 2003 when the quantity ordered was less than 30?", "sql": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered < 30 AND STRFTIME('%Y', T2.orderDate) = '2003'", "source_tables": ["orderdetails", "orders"]}, "evidence": "year(orderDate) = '2003'; quantityOrdered < 30;"}
{"sample_id": 1598, "db_id": "car_retails", "final": {"question": "Calculate the average amount of payments made by customers during the first half of 2004.", "sql": "SELECT AVG(amount) FROM payments WHERE paymentDate BETWEEN '2004-01-01' AND '2004-06-30'", "source_tables": ["payments"]}, "evidence": "average amount of payments = DIVIDE(SUM(amount), COUNT(customerNumber); first half of 2014 refers to paymentDate > = '2004-01-01' AND paymentDate < '2004-07-01;"}
{"sample_id": 1573, "db_id": "car_retails", "final": {"question": "State the email of those who are staff of Murphy Diane whose number is 1002 and living in San Francisco", "sql": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1002 AND T2.city = 'San Francisco'", "source_tables": ["employees", "offices"]}, "evidence": "staff of refers to reportsTO; San Francisco is a city;"}
{"sample_id": 1551, "db_id": "car_retails", "final": {"question": "Which countries do the top 5 highest paying customers in a single payment come from? Indicate their entire address.", "sql": "SELECT DISTINCT T2.country, T2.addressLine1, T2.addressLine2 FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber ORDER BY T1.amount DESC LIMIT 5", "source_tables": ["customers", "payments"]}, "evidence": "highest paying customer refers to MAX(amount); entire address = addressLine1+addressLine2;"}
{"sample_id": 1544, "db_id": "car_retails", "final": {"question": "List the country and how many customers are there.", "sql": "SELECT country, COUNT(customerNumber) FROM customers GROUP BY country", "source_tables": ["customers"]}, "evidence": ""}
{"sample_id": 1624, "db_id": "car_retails", "final": {"question": "How do I contact the President of the company?", "sql": "SELECT t.email FROM employees t WHERE t.jobTitle = 'President'", "source_tables": ["employees"]}, "evidence": "President refers to the jobTitle;"}
{"sample_id": 1649, "db_id": "car_retails", "final": {"question": "What is the percentage of the payment amount in 2004 was made by Atelier graphique?", "sql": "SELECT SUM(CASE WHEN t1.customerName = 'Atelier graphique' THEN t2.amount ELSE 0 END) * 100 / SUM(t2.amount) FROM customers AS t1 INNER JOIN payments AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t2.paymentDate) = '2004'", "source_tables": ["customers", "payments"]}, "evidence": "DIVIDE(SUM(amount) where customerName = 'Atelier graphique'), (SUM(amount)) as percentage where year(paymentDate) = 2004;"}
{"sample_id": 1635, "db_id": "car_retails", "final": {"question": "Which product did Cruz & Sons Co. ask for the biggest amount in a single order?", "sql": "SELECT t4.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode WHERE t3.customerName = 'Cruz & Sons Co.' ORDER BY t1.priceEach * t1.quantityOrdered DESC LIMIT 1", "source_tables": ["products", "customers", "orderdetails", "orders"]}, "evidence": "Cruz & Sons Co. is name of customer; the biggest amount refers to MAX(quantityOrdered)."}
{"sample_id": 1628, "db_id": "car_retails", "final": {"question": "How many customers have an employee who reports to William Patterson as their sales representitive?", "sql": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'William' AND t2.lastName = 'Patterson'", "source_tables": ["customers", "employees"]}, "evidence": "reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1569, "db_id": "car_retails", "final": {"question": "How many French customers shipped 2 orders which have been cancelled?", "sql": "SELECT COUNT(T2.country) FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'Shipped' AND T2.country = 'France' GROUP BY T2.customerNumber HAVING COUNT(T1.status) = 2", "source_tables": ["customers", "orders"]}, "evidence": "French is a nationality of country = 'France'; cancelled orders refers to status = 'Cancelled';"}
{"sample_id": 1647, "db_id": "car_retails", "final": {"question": "List the name of employees in Japan office and who are they reporting to.", "sql": "SELECT t2.firstName, t2.lastName, t2.reportsTo FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode WHERE t1.country = 'Japan'", "source_tables": ["employees", "offices"]}, "evidence": "Japan is the name of the country; 'reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1555, "db_id": "car_retails", "final": {"question": "Which of the customers, whose Tokyo-based sales representative reports to the Vice President of Sales whose employee number is 1056, has paid the highest payment? List the customer's name, the contact person and calculate the total amount of that customer's total payments.", "sql": "SELECT T2.customerName, T2.contactFirstName, T2.contactLastName, SUM(T3.amount) FROM employees AS T1 INNER JOIN customers AS T2 ON T2.salesRepEmployeeNumber = T1.employeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN offices AS T4 ON T1.officeCode = T4.officeCode WHERE T4.city = 'Tokyo' AND T1.reportsTo = 1056 GROUP BY T2.customerName, T2.contactFirstName, T2.contactLastName ORDER BY amount DESC LIMIT 1", "source_tables": ["customers", "payments", "employees", "offices"]}, "evidence": "Tokyo is a city; 'reportsTO' is the leader of the 'employeeNumber'; highest payment refers to MAX(amount); total amount of payments = SUM(amount);"}
{"sample_id": 1644, "db_id": "car_retails", "final": {"question": "List all customer names with orders that are disputed.", "sql": "SELECT t3.firstName, t3.lastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber INNER JOIN employees AS t3 ON t2.salesRepEmployeeNumber = t3.employeeNumber WHERE t1.status = 'Disputed'", "source_tables": ["customers", "employees", "orders"]}, "evidence": "Orders that are disputed refer to status = 'Disputed'; the sales representative means employees; names refers to firstName, lastName."}
{"sample_id": 1634, "db_id": "car_retails", "final": {"question": "Which product did Cruz & Sons Co. order on 2003/3/3?", "sql": "SELECT t4.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'", "source_tables": ["products", "customers", "orderdetails", "orders"]}, "evidence": "Cruz & Sons Co. is name of customer; 2003/3/3 refers to orderDate;"}
{"sample_id": 1545, "db_id": "car_retails", "final": {"question": "Which different vendor has the most amount of orders? Calculate the total estimated earnings.", "sql": "SELECT DISTINCT T1.productVendor, T1.MSRP - T1.buyPrice FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode GROUP BY T1.productVendor, T1.MSRP, T1.buyPrice ORDER BY COUNT(T2.quantityOrdered) DESC LIMIT 1", "source_tables": ["products", "orderdetails"]}, "evidence": "amount of order refers to quantityOrdered; most amount of orders refers to SUM(QuantityOrdered); estimated earnings refers to expected profits; expected profits = SUBTRACT(msrp, buyPrice);"}
{"sample_id": 1547, "db_id": "car_retails", "final": {"question": "What was the total price of the products shipped to Rovelli Gifts Distributors Ltd. between 1/1/2003 and 12/31/2003?", "sql": "SELECT T3.priceEach * T3.quantityOrdered FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.customerName = 'Rovelli Gifts' AND T2.status = 'Shipped' AND STRFTIME('%Y', T2.shippedDate) = '2003'", "source_tables": ["customers", "orderdetails", "orders"]}, "evidence": "Mini Gifts Distributors Ltd. Is the customer name; shippedDate between '2003-01-01' and '2003-12-31'; total price = MULTIPLY(quantityOrdered, priceEach);"}
{"sample_id": 1613, "db_id": "car_retails", "final": {"question": "How many products with the highest expected profits were sold in total?", "sql": "SELECT SUM(t2.quantityOrdered) FROM orderdetails AS t2 INNER JOIN ( SELECT t1.productCode FROM products AS t1 ORDER BY t1.MSRP - t1.buyPrice DESC LIMIT 1 ) AS t3 ON t2.productCode = t3.productCode", "source_tables": ["products", "orderdetails"]}, "evidence": "Products refer to productCode; Expected profits = SUBTRACT(MSRP, buyPrice);"}
{"sample_id": 1612, "db_id": "car_retails", "final": {"question": "Compared with the orders happened on 2005-04-08 and two days later, which day's order had a higher value?", "sql": "SELECT T2.orderDate FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-08' OR STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-10' ORDER BY T1.quantityOrdered * T1.priceEach DESC LIMIT 1", "source_tables": ["orderdetails", "orders"]}, "evidence": "2005-04-08 and two days later refer to orderDate = '2005-04-08' and orderDate = '2005-04-10'; order with a higher value refers to MAX(Total price) = MULTIPLY(quantityOrdered, priceEach); "}
{"sample_id": 1564, "db_id": "car_retails", "final": {"question": "How many sales representatives who have office code is 1?", "sql": "SELECT COUNT(officeCode) FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode = 1", "source_tables": ["employees"]}, "evidence": "sales representative refers to jobTitle = 'Sales Rep';"}
{"sample_id": 1626, "db_id": "car_retails", "final": {"question": "If I'm from the Muscle Machine Inc, to which e-mail adress should I write a letter if I want to reach the superior of my sales representitive?", "sql": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'", "source_tables": ["customers", "employees"]}, "evidence": "Muscle Machine Inc is name of customer; superior refers to 'reportsTO', who is the leader of the 'employeeNumber'"}
{"sample_id": 1606, "db_id": "car_retails", "final": {"question": "What profit can the seller Carousel DieCast Legends make from the sale of the product described as \"The perfect holiday or anniversary gift for executives\"?", "sql": "SELECT SUM(T2.MSRP - T2.buyPrice) FROM productlines AS T1 INNER JOIN products AS T2 ON T1.productLine = T2.productLine WHERE T2.productVendor = 'Carousel DieCast Legends' AND T1.textDescription LIKE '%perfect holiday or anniversary gift for executives%'", "source_tables": ["productlines", "products"]}, "evidence": "seller and product vendor are synonyms; Carousel DieCast Legends is a product vendor; profit = SUM(SUBTRACT(msrp, buyPrice));"}
{"sample_id": 1553, "db_id": "car_retails", "final": {"question": "Of all the classic cars, with a product scale of 1:18, which product is the most ordered product by customers?", "sql": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productScale = '1:18' AND T1.productLine = 'Classic Cars' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1", "source_tables": ["products", "orderdetails"]}, "evidence": "classic car is a product line; most ordered product refers to MAX(quantityOrdered);"}
{"sample_id": 1566, "db_id": "car_retails", "final": {"question": "Please calculate the total payment amount of customers who come from the USA.", "sql": "SELECT SUM(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.country = 'USA'", "source_tables": ["customers", "payments"]}, "evidence": "USA is a country; total amount payment refers to SUM(amount);"}
{"sample_id": 1574, "db_id": "car_retails", "final": {"question": "Determine the email and Code of employee who are working at United State, state MA", "sql": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.state = 'MA' AND T2.country = 'USA'", "source_tables": ["employees", "offices"]}, "evidence": "code of employee refers to employeeNumber; United States of America refers to country = 'USA';"}
{"sample_id": 1636, "db_id": "car_retails", "final": {"question": "When were the products ordered by Cruz & Sons Co. on 2003-03-03 shipped?", "sql": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Cruz & Sons Co.' AND t1.orderDate = '2003-03-03'", "source_tables": ["customers", "orders"]}, "evidence": "Cruz & Sons Co. is name of customer; ordered on 2003-03-03 refers to orderDate;"}
{"sample_id": 1550, "db_id": "car_retails", "final": {"question": "What is the average, highest and lowest annual payments collected between 1/1/2003 to 12/31/2005?", "sql": "SELECT CAST(SUM(T1.amount) AS REAL) / 3, MAX(T1.amount) , MIN(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate BETWEEN '2003-01-01' AND '2005-12-31'", "source_tables": ["customers", "payments"]}, "evidence": "paymentDate BETWEEN '2003-01-01' AND '2005-12-31'; average annual payments = DIVIDE(SUM(amount), 3);"}
{"sample_id": 1596, "db_id": "car_retails", "final": {"question": "From which branch does the sales representative employee who made the most sales in 2005? Please indicates its full address and phone number.", "sql": "SELECT T3.addressLine1, T3.addressLine2, T3.phone FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber INNER JOIN customers AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN employees AS T4 ON T3.salesRepEmployeeNumber = T4.employeeNumber INNER JOIN offices AS T5 ON T4.officeCode = T5.officeCode WHERE STRFTIME('%Y', T2.orderDate) = '2005' AND T4.jobTitle = 'Sales Rep' ORDER BY T1.quantityOrdered DESC LIMIT 1", "source_tables": ["orderdetails", "employees", "offices", "customers", "orders"]}, "evidence": "orderDate between '2005-01-01' and '2005-12-31'; full address = addressLine1+addressLine2;"}
{"sample_id": 1579, "db_id": "car_retails", "final": {"question": "List out 3 customer numbers who have highest amount payment", "sql": "SELECT customerNumber FROM payments ORDER BY amount DESC LIMIT 3", "source_tables": ["payments"]}, "evidence": "amount of payment refers to amount;"}
{"sample_id": 1621, "db_id": "car_retails", "final": {"question": "What was the latest order that customer No.114 made? Give the name of the product.", "sql": "SELECT t3.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t1.productCode = t3.productCode WHERE t2.customerNumber = '114' ORDER BY t2.orderDate DESC LIMIT 1", "source_tables": ["products", "orderdetails", "orders"]}, "evidence": "The latest refers to the most recent orderDate;"}
{"sample_id": 1595, "db_id": "car_retails", "final": {"question": "What is the total actual profit gained from orders made by American customers from 2003-01-06 to 2005-05-09?", "sql": "SELECT SUM(T2.priceEach - T1.buyPrice) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T3.orderDate > '2003-01-05' AND T3.orderDate < '2005-05-10'", "source_tables": ["customers", "products", "orderdetails", "orders"]}, "evidence": "total actual profit = SUM(SUBTRACT(priceEach, buyPrice)); American is a nationality of country = 'USA'; orderDate BETWEEN '2003-01-06' AND '2005-05-09';"}
{"sample_id": 1669, "db_id": "car_retails", "final": {"question": "Calculate the total price of shipped orders belonging to Land of Toys Inc. under the classic car line of products.", "sql": "SELECT SUM(t3.priceEach * t3.quantityOrdered) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber INNER JOIN orderdetails AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN products AS t4 ON t3.productCode = t4.productCode WHERE t4.productLine = 'Classic Cars' AND t1.customerName = 'Land of Toys Inc.' AND t2.status = 'Shipped'", "source_tables": ["products", "customers", "orderdetails", "orders"]}, "evidence": "SUM(MULTIPLY(quantityOrdered, priceEach)) where productLine = 'Classic Cars'; status = 'Shipped'; customername = 'Land of Toys Inc';"}
{"sample_id": 1645, "db_id": "car_retails", "final": {"question": "What is the percentage of employees are in Paris office?", "sql": "SELECT CAST(COUNT(CASE WHEN t1.city = 'Paris' THEN t2.employeeNumber ELSE NULL END) AS REAL) * 100 / COUNT(t2.employeeNumber) FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode", "source_tables": ["employees", "offices"]}, "evidence": "DIVIDE(COUNT(employeeNumber) when city = 'Paris'), (COUNT(employeeNumber)) as percentage;"}
{"sample_id": 1609, "db_id": "car_retails", "final": {"question": "How many kinds of products did order No. 10252 contain?", "sql": "SELECT COUNT(t.productCode) FROM orderdetails t WHERE t.orderNumber = '10252'", "source_tables": ["orderdetails"]}, "evidence": "Products refer to productCode;"}
{"sample_id": 1654, "db_id": "car_retails", "final": {"question": "Among the customers of empolyee 1370, who has the highest credit limit?Please list the full name of the contact person.", "sql": "SELECT t2.contactFirstName, t2.contactLastName FROM employees AS t1 INNER JOIN customers AS t2 ON t1.employeeNumber = t2.salesRepEmployeeNumber WHERE t1.employeeNumber = '1370' ORDER BY t2.creditLimit DESC LIMIT 1", "source_tables": ["customers", "employees"]}, "evidence": "Employee 1370 refers to employeeNumber = '1370';"}
{"sample_id": 1559, "db_id": "car_retails", "final": {"question": "What is the total value of cancelled orders?", "sql": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T2.status = 'Cancelled'", "source_tables": ["orderdetails", "orders"]}, "evidence": "total value = SUM(MULTIPLY(quantityOrdered, priceEach)); cancelled orders refers to status = 'Cancelled';"}
{"sample_id": 1562, "db_id": "car_retails", "final": {"question": "How many orders which expected profits greater than 100?", "sql": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.MSRP - T2.buyPrice > 100", "source_tables": ["products", "orderdetails"]}, "evidence": "expected profits greater than 100 = (SUBTRACT(msrp, buyPrice))>100;"}
{"sample_id": 1567, "db_id": "car_retails", "final": {"question": "What are the total payments of customers with no credit limit in 2003?", "sql": "SELECT SUM(amount) FROM payments WHERE STRFTIME('%Y', paymentDate) = '2003' AND customerNumber IN ( SELECT customerNumber FROM customers WHERE creditLimit = 0 )", "source_tables": ["customers", "payments"]}, "evidence": "total payment refers to SUM(amount); no credit limit refers to creditLimit = 0; year(paymentDate) = '2003';"}
{"sample_id": 1657, "db_id": "car_retails", "final": {"question": "How many motorcycles have been ordered in 2004?", "sql": "SELECT SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE t3.productLine = 'motorcycles' AND STRFTIME('%Y', t1.orderDate) = '2004'", "source_tables": ["products", "orderdetails", "orders"]}, "evidence": "Motorcycles refer to productLine = 'motorcycles'; ordered in 2004 refers to year(orderDate) = 2004;"}
{"sample_id": 1576, "db_id": "car_retails", "final": {"question": "How many employees who are living in Australia and have the credit limit under 200000? State their email address and countries where they are working.", "sql": "SELECT T2.email, T3.country FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber INNER JOIN offices AS T3 ON T2.officeCode = T3.officeCode WHERE T3.country = 'Australia' AND T1.creditLimit < 200000 AND T2.jobTitle = 'Sales Rep'", "source_tables": ["customers", "employees", "offices"]}, "evidence": "Australia is a country; creditLimit < 20000;"}
{"sample_id": 1607, "db_id": "car_retails", "final": {"question": "Of the clients whose businesses are located in the city of Boston, calculate which of them has a higher average amount of payment.", "sql": "SELECT T1.customerNumber FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.city = 'Boston' GROUP BY T1.customerNumber ORDER BY SUM(T2.amount) / COUNT(T2.paymentDate) DESC LIMIT 1", "source_tables": ["customers", "payments"]}, "evidence": "average amount payment = AVG(amount);"}
{"sample_id": 1638, "db_id": "car_retails", "final": {"question": "Name the product from the 'Classic Cars' production line that has the greatest expected profit.", "sql": "SELECT t.productName, t.MSRP - t.buyPrice FROM products AS t WHERE t.productLine = 'Classic Cars' ORDER BY t.MSRP - t.buyPrice DESC LIMIT 1", "source_tables": ["products"]}, "evidence": "The greatest expected profit refers to MAX(SUBTRACT(MSRP, buyPrice);"}
{"sample_id": 1570, "db_id": "car_retails", "final": {"question": "Please calculate the average total price of shipped orders from German customers.", "sql": "SELECT SUM(T3.quantityOrdered * T3.priceEach) / COUNT(T2.orderNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T2.status = 'Shipped' AND T1.country = 'Germany'", "source_tables": ["customers", "orderdetails", "orders"]}, "evidence": "average total price = DIVIDE(MULTIPLY(quantityOrdered, priceEach)), COUNT(orderNumber)); German is a nationality of country = 'Germany'; shipped orders refers to status = 'Shipped';"}
{"sample_id": 1662, "db_id": "car_retails", "final": {"question": "List out sale rep that has sold 1969 Harley Davidson Ultimate Chopper. List out their names and quantity sold throughout the year.", "sql": "SELECT t5.firstName, t5.lastName, SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode INNER JOIN orders AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN customers AS t4 ON t3.customerNumber = t4.customerNumber INNER JOIN employees AS t5 ON t4.salesRepEmployeeNumber = t5.employeeNumber WHERE t1.productName = '1969 Harley Davidson Ultimate Chopper' GROUP BY t5.lastName, t5.firstName", "source_tables": ["products", "orderdetails", "employees", "customers", "orders"]}, "evidence": "1969 Harley Davidson Ultimate Chopper refers to the name of the product; sale rep refers to employee; 2003 refers to year(orderDate) = 2003; quantity sold refers to quantityOrdered; their names refer to the name of customers; "}
{"sample_id": 1577, "db_id": "car_retails", "final": {"question": "State 10 emails of UK Sales Rep who have the lowest credit limit.", "sql": "SELECT DISTINCT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' ORDER BY T1.creditLimit LIMIT 10", "source_tables": ["customers", "employees"]}, "evidence": "UK is a country; Sales Rep is a job title;"}
{"sample_id": 1608, "db_id": "car_retails", "final": {"question": "Calculate the total quantity ordered for 18th Century Vintage Horse Carriage and the average price.", "sql": "SELECT SUM(T2.quantityOrdered) , SUM(T2.quantityOrdered * T2.priceEach) / SUM(T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productName = '18th Century Vintage Horse Carriage'", "source_tables": ["products", "orderdetails"]}, "evidence": "18th Century Vintage Horse Carriage is a product name; average price = AVG(priceEach);"}
{"sample_id": 1637, "db_id": "car_retails", "final": {"question": "What is the amount of customers of 1957 Chevy Pickup by customers in a month?", "sql": "SELECT COUNT(T2.customerNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.productCode IN ( SELECT productCode FROM products WHERE productName = '1957 Chevy Pickup' )", "source_tables": ["products", "orderdetails", "orders"]}, "evidence": ""}
{"sample_id": 1640, "db_id": "car_retails", "final": {"question": "Among all orders shipped, calculate the percentage of orders shipped at least 3 days before the required date.", "sql": "SELECT COUNT(CASE WHEN JULIANDAY(t1.shippeddate) - JULIANDAY(t1.requireddate) > 3 THEN T1.customerNumber ELSE NULL END) FROM orders AS T1 INNER JOIN orderdetails AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.status = 'Shipped'", "source_tables": ["orderdetails", "orders"]}, "evidence": "Orders shipped refer to status = 'Shipped'; at least 3 days before the required date refers to SUBTRACT(shippedDate, requiredDate)>3; DIVIDE(COUNT(orderNumber where SUBTRACT(shippedDate, requiredDate)>3), (COUNT(orderNumber) as percentage;"}
{"sample_id": 1601, "db_id": "car_retails", "final": {"question": "On what date did the customer with the lowest credit limit serviced by sales representative Barry Jones make payments for his/her orders?", "sql": "SELECT T3.paymentDate FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber WHERE T1.firstName = 'Barry' AND T1.lastName = 'Jones' AND T1.jobTitle = 'Sales Rep' ORDER BY T2.creditLimit ASC LIMIT 1", "source_tables": ["customers", "payments", "employees"]}, "evidence": ""}
{"sample_id": 1594, "db_id": "car_retails", "final": {"question": "What is the highest amount of order made by the sales representative in Boston? Please give the name of the product and amount.", "sql": "SELECT T2.productName, T1.quantityOrdered * T1.priceEach FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T1.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T4.city = 'Boston' AND T4.salesRepEmployeeNumber IN ( SELECT employeeNumber FROM employees WHERE jobTitle = 'Sales Rep' ) ORDER BY T1.quantityOrdered DESC LIMIT 1", "source_tables": ["products", "orderdetails", "employees", "customers", "orders"]}, "evidence": "Boston is a city; amount of order = MULTIPLY(quantityOrdered, priceEach);"}
{"sample_id": 1667, "db_id": "car_retails", "final": {"question": "List down the customer names with a disputed order status.", "sql": "SELECT t1.customerName FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'Disputed'", "source_tables": ["customers", "orders"]}, "evidence": ""}
{"sample_id": 1643, "db_id": "car_retails", "final": {"question": "For the order has the most product ordered, name the customer who placed the order.", "sql": "SELECT T2.firstName, T2.lastName FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.employeeNumber = ( SELECT MAX(employeeNumber) FROM employees )", "source_tables": ["employees", "offices"]}, "evidence": "The largest order in terms of total price refers to MAX(SUM(MULTIPLY(quantityOrdered, priceEach))."}
{"sample_id": 1639, "db_id": "car_retails", "final": {"question": "List all the name of customers who have orders that are still processing.", "sql": "SELECT t2.customerName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.status = 'In Process'", "source_tables": ["customers", "orders"]}, "evidence": "Still processing refers to status = 'In Process';"}
{"sample_id": 1588, "db_id": "car_retails", "final": {"question": "What is the average actual profit by 1937 Lincoln Berline?", "sql": "SELECT SUM(T1.priceEach - T2.buyPrice) / COUNT(*) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productName = '1937 Lincoln Berline'", "source_tables": ["products", "orderdetails"]}, "evidence": "average actual profit = AVG(SUBTRACT(priceEach, buyPrice)); 1937 Lincoln Berline is a product name;"}
{"sample_id": 1623, "db_id": "car_retails", "final": {"question": "To whom does Steve Patterson report? Please give his or her full name.", "sql": "SELECT t2.firstName, t2.lastName FROM employees AS t1 INNER JOIN employees AS t2 ON t2.employeeNumber = t1.reportsTo WHERE t1.firstName = 'Steve' AND t1.lastName = 'Patterson'", "source_tables": ["employees"]}, "evidence": "reportsTO' is the leader of the 'employeeNumber';"}
{"sample_id": 1571, "db_id": "car_retails", "final": {"question": "List out full name of employees who are working in Tokyo?", "sql": "SELECT T1.firstName, T1.lastName FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo'", "source_tables": ["employees", "offices"]}, "evidence": "Tokyo is a city; full name = firstName+lastName;"}
{"sample_id": 1614, "db_id": "car_retails", "final": {"question": "How much did Petit Auto pay on 2004-08-09?", "sql": "SELECT t1.amount FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Petit Auto' AND t1.paymentDate = '2004-08-09'", "source_tables": ["customers", "payments"]}, "evidence": "Petit Auto is name of customer; paymentDate = '2004-08-09';"}
{"sample_id": 1603, "db_id": "car_retails", "final": {"question": "What is the full address of the customer who commented that DHL be used for the order that was shipped on April 4, 2005?", "sql": "SELECT T1.addressLine1, T1.addressLine2 FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.shippedDate = '2005-04-04' AND T2.status = 'Shipped'", "source_tables": ["customers", "orders"]}, "evidence": "full address = addressLine1+addressLine2; shippedDate = '2005-04-04';"}
{"sample_id": 1580, "db_id": "car_retails", "final": {"question": "Determine the email and Code of employee who are working at United State, state CA", "sql": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.country = 'USA' AND T2.state = 'CA' GROUP BY T1.email, T1.officeCode", "source_tables": ["employees", "offices"]}, "evidence": "United States of America refers to country = 'USA'; code of employee refers to employeeNumber;"}
{"sample_id": 1561, "db_id": "car_retails", "final": {"question": "How many Planes orders were there?", "sql": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Planes'", "source_tables": ["products", "orderdetails"]}, "evidence": "Planes is a product line;"}
{"sample_id": 1591, "db_id": "car_retails", "final": {"question": "For the planes which has the hightest total price, how much it exceeds the average?", "sql": "SELECT MAX(quantityOrdered * priceEach) - AVG(priceEach) FROM orderdetails WHERE productCode IN ( SELECT productCode FROM products WHERE productLine = 'Planes' )", "source_tables": ["products", "orderdetails"]}, "evidence": "plane is a product line; total price = MULTIPLY(quantityOrdered, priceEach); how much the total price exceeds the average = SUBTRACT(MAX(MULTIPLY(quantityOrdered, priceEach))), AVG(priceEach));"}
{"sample_id": 1620, "db_id": "car_retails", "final": {"question": "How many French customers does Gerard Hernandez take care of?", "sql": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.country = 'France' AND t2.firstName = 'Gerard' AND t2.lastName = 'Hernandez'", "source_tables": ["customers", "employees"]}, "evidence": "Gerakd Hermandez is an employee; French customer refers to customer from France where country = 'France'"}
{"sample_id": 1615, "db_id": "car_retails", "final": {"question": "What was the contact name for the check \"NR157385\"?", "sql": "SELECT t2.contactFirstName, t2.contactLastName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'NR157385'", "source_tables": ["customers", "payments"]}, "evidence": "Contact name refers to customerName;"}
{"sample_id": 1581, "db_id": "car_retails", "final": {"question": "List out full name of employees who are working in Boston?", "sql": "SELECT T1.firstName, T1.lastName FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Boston'", "source_tables": ["employees", "offices"]}, "evidence": "full name = contactFirstName, contactLastName; Boston is a city;"}
{"sample_id": 1602, "db_id": "car_retails", "final": {"question": "To whom does the employee have to inform that is the sales representative of the French customer?", "sql": "SELECT T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber WHERE T2.country = 'France'", "source_tables": ["customers", "employees"]}, "evidence": "inform refers to reportsTo; 'reportsTO' is the leader of the 'employeeNumber'; France is a country; country = 'France';"}
{"sample_id": 1746, "db_id": "restaurant", "final": {"question": "Give the review of the restaurant at 430, Broadway.", "sql": "SELECT T1.review FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'Broadway' AND T2.street_num = 430", "source_tables": ["location", "generalinfo"]}, "evidence": "430 Broadway refers to street_num = 430 and street_name = 'Broadway'"}
{"sample_id": 1692, "db_id": "restaurant", "final": {"question": "Which restaurant on the street Alameda de las Pulgas in the city of Menlo Park is the worst rated?", "sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'avenida de las pulgas' AND T2.city = 'menlo park' ORDER BY review LIMIT 1", "source_tables": ["location", "generalinfo"]}, "evidence": "restaurant refers to label; street Alameda de las Pulgas refers to street_name = 'avenida de las pulgas'; the worst rated refers to min(review)"}
{"sample_id": 1767, "db_id": "restaurant", "final": {"question": "How many American restaurants are located in Front, San Francisco?", "sql": "SELECT COUNT(T2.food_type = 'american') FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'front'", "source_tables": ["location", "generalinfo"]}, "evidence": "American restaurant refers to food_type = 'american'; Front refers to street_name = 'front'; San Francisco refers to city = 'san francisco'"}
{"sample_id": 1740, "db_id": "restaurant", "final": {"question": "List street names in San Francisco city.", "sql": "SELECT street_name FROM location WHERE city = 'San Francisco'", "source_tables": ["location"]}, "evidence": ""}
{"sample_id": 1743, "db_id": "restaurant", "final": {"question": "How many labels of the restaurant have an unknown country?", "sql": "SELECT COUNT(T1.label) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'unknown'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "unknown county refers to county = 'unknown'"}
{"sample_id": 1768, "db_id": "restaurant", "final": {"question": "List the restaurant's ID that has a review greater than the 70% of average review of all American restaurants with street number greater than 2000.", "sql": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.food_type = 'american' AND T1.street_num > 2000 GROUP BY T1.id_restaurant ORDER BY AVG(T2.review) * 0.7 DESC", "source_tables": ["location", "generalinfo"]}, "evidence": "American restaurant refers to food_type = 'american'; street number greater than 2000 refers to street_num > 2000; review greater than the 70% of average review refers to review > multiply(avg(review), 0.7)"}
{"sample_id": 1756, "db_id": "restaurant", "final": {"question": "Give the review of the restaurant located in Ocean St., Santa Cruz.", "sql": "SELECT T2.review FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'santa cruz' AND T1.street_name = 'ocean st'", "source_tables": ["location", "generalinfo"]}, "evidence": "Ocean St. refers to street_name = 'ocean st'; Santa Cruz refers to city = 'santa cruz'"}
{"sample_id": 1717, "db_id": "restaurant", "final": {"question": "Which county and region does the street E. El Camino Real belong to?", "sql": "SELECT DISTINCT T2.county, T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'E. El Camino Real'", "source_tables": ["location", "geographic"]}, "evidence": "street E. El Camino Real refers to street_name = 'E. El Camino Real'"}
{"sample_id": 1710, "db_id": "restaurant", "final": {"question": "What are the restaurants that are located at \"19th St. Oakland\"?", "sql": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'Oakland' AND T2.street_name = '19th St'", "source_tables": ["location", "generalinfo"]}, "evidence": "restaurant refers to label; \"19th St. Oakland\" refers to street_name = '19th St' AND city = 'Oakland'"}
{"sample_id": 1785, "db_id": "restaurant", "final": {"question": "Which region has the highest number of restaurants?", "sql": "SELECT T1.region FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city GROUP BY T1.region ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1", "source_tables": ["location", "geographic"]}, "evidence": "the highest number refers to max(count(id_restaurant))"}
{"sample_id": 1741, "db_id": "restaurant", "final": {"question": "List restaurant ids located in Danville city.", "sql": "SELECT id_restaurant FROM location WHERE city = 'Danville'", "source_tables": ["location"]}, "evidence": ""}
{"sample_id": 1725, "db_id": "restaurant", "final": {"question": "How many restaurants are on Irving Street?", "sql": "SELECT COUNT(id_restaurant) FROM location WHERE street_name = 'irving'", "source_tables": ["location"]}, "evidence": "Irving Street refers to street_name = 'irving'"}
{"sample_id": 1764, "db_id": "restaurant", "final": {"question": "What is the restaurant's name and ID located at Ocean Avenue, San Francisco?", "sql": "SELECT T2.label, T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'ocean avenue'", "source_tables": ["location", "generalinfo"]}, "evidence": "restaurant's name refers to label; Ocean Avenue refers to street_name = 'ocean avenue'; San Francisco refers to city = 'san francisco'"}
{"sample_id": 1700, "db_id": "restaurant", "final": {"question": "Please list all of the restaurants that serve European food.", "sql": "SELECT label FROM generalinfo WHERE food_type = 'european'", "source_tables": ["generalinfo"]}, "evidence": "restaurant refers to label; European food refers to food_type = 'european'"}
{"sample_id": 1678, "db_id": "restaurant", "final": {"question": "At what numbers on 9th Avenue of San Francisco there are restaurants?", "sql": "SELECT id_restaurant FROM location WHERE City = 'san francisco' AND street_name = '9th avenue'", "source_tables": ["location"]}, "evidence": "9th Avenue refers to street_name = '9th avenue'; San Francisco refers to City = 'san francisco'"}
{"sample_id": 1723, "db_id": "restaurant", "final": {"question": "Which chicken restaurant has the highest review?", "sql": "SELECT label FROM generalinfo WHERE food_type = 'chicken' ORDER BY review DESC LIMIT 1", "source_tables": ["generalinfo"]}, "evidence": "chicken restaurant refers to food_type = 'chicken'; the highest review refers to max(review)"}
{"sample_id": 1712, "db_id": "restaurant", "final": {"question": "Please name any three restaurants that have an unidentified region.", "sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.region = 'unknown' LIMIT 3", "source_tables": ["location", "geographic", "generalinfo"]}, "evidence": "restaurant name refers to label; unidentified region refers to region = 'unknown'"}
{"sample_id": 1730, "db_id": "restaurant", "final": {"question": "List all of the restaurant addresses from an unknown region.", "sql": "SELECT T2.street_name FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.region = 'unknown'", "source_tables": ["location", "geographic"]}, "evidence": "restaurant address refers to street_num, street_name; unknown region refers to region = 'unknown'"}
{"sample_id": 1783, "db_id": "restaurant", "final": {"question": "What is the full address of the most popular restaurant among the diners?", "sql": "SELECT T2.street_name, T2.street_num, T2.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant ORDER BY T1.review DESC LIMIT 1", "source_tables": ["location", "generalinfo"]}, "evidence": "full address refers to street_num, street_name, city; the most popular refers to max(review)"}
{"sample_id": 1714, "db_id": "restaurant", "final": {"question": "How many Thai restaurants can be found in San Pablo Ave, Albany?", "sql": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T1.city = 'albany' AND T2.street_name = 'san pablo ave'", "source_tables": ["location", "generalinfo"]}, "evidence": "Thai restaurant refers to food_type = 'thai'; San Pablo Ave Albany refers to street_name = 'san pablo ave' AND T1.city = 'albany'"}
{"sample_id": 1754, "db_id": "restaurant", "final": {"question": "Among the restaurants on street number below 1000, how many of them are in Railroad St.?", "sql": "SELECT COUNT(city) FROM location WHERE street_name = 'railroad' AND street_num < 1000", "source_tables": ["location"]}, "evidence": "street number below 1000 refers to street_num < 1000; Railroad St. refers to street_name = 'railroad'"}
{"sample_id": 1718, "db_id": "restaurant", "final": {"question": "What is the name of the least popular Indian restaurant on Shattuck Avenue in Berkeley?", "sql": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'berkeley' AND T2.street_name = 'shattuck ave' AND T1.food_type = 'Indian restaurant' ORDER BY T1.review LIMIT 1", "source_tables": ["location", "generalinfo"]}, "evidence": "restaurant name refers to label; the least popular refers to min(review); Indian restaurant refers to food_type = 'Indian restaurant'; Shattuck Avenue in Berkeley refers to street_name = 'shattuck ave' and city = 'berkeley'"}
{"sample_id": 1757, "db_id": "restaurant", "final": {"question": "Give the street number of a bar in Oakland with a 2.7 review.", "sql": "SELECT T2.street_num FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.review = 2.7 AND T2.city = 'oakland' AND T1.food_type = 'bar'", "source_tables": ["location", "generalinfo"]}, "evidence": "street number refers to street_num; bar refers to food_type = 'bar'; Oakland refers to city = 'oakland'; 2.7 review refers to review = 2.7"}
{"sample_id": 1699, "db_id": "restaurant", "final": {"question": "What percentage of streets named 11th Street are in Alameda County?", "sql": "SELECT CAST(SUM(IIF(T1.street_name = '11th st', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.County = 'alameda county'", "source_tables": ["location", "geographic"]}, "evidence": "street named 11th Street refers to street_name = '11th st'; percentage = divide(count(street_name = '11th st' and County = 'alameda county'), count(street_name where County = 'alameda county')) * 100%"}
{"sample_id": 1709, "db_id": "restaurant", "final": {"question": "What is the full address of Albert's Caf\u00e9?", "sql": "SELECT T2.street_num, T2.street_name, T1.city FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'Albert''s Caf\u00e9'", "source_tables": ["location", "generalinfo"]}, "evidence": "full address = street_num, street_name, city; Albert's Caf\u00e9 refers to label = 'Albert's Caf\u00e9'"}
{"sample_id": 1735, "db_id": "restaurant", "final": {"question": "What is the county of the Sankee restaurant?", "sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'sankee'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Sankee restaurant refers to label = 'sankee'"}
{"sample_id": 1722, "db_id": "restaurant", "final": {"question": "Which street has the most restaurants?", "sql": "SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(street_name) DESC LIMIT 1", "source_tables": ["location"]}, "evidence": "street refers to street_name; the most restaurants refers to max(count(street_name))"}
{"sample_id": 1726, "db_id": "restaurant", "final": {"question": "Provide a list of restaurants from Marin county.", "sql": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'marin county'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "restaurant refers to label"}
{"sample_id": 1739, "db_id": "restaurant", "final": {"question": "List all the average reviews of Chinese restaurants for each county from highest to lowest.", "sql": "SELECT AVG(T1.review) FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'chinese' GROUP BY T1.id_restaurant ORDER BY AVG(T1.review) DESC", "source_tables": ["geographic", "generalinfo"]}, "evidence": "Chinese restaurant refers to food_type = 'chinese'; average review refers to divide(sum(review), count(review))"}
{"sample_id": 1732, "db_id": "restaurant", "final": {"question": "What type of restaurant is most common in Monterey county?", "sql": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'Monterey' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "type refers to food_type; most common refers to max(count(food_type))"}
{"sample_id": 1724, "db_id": "restaurant", "final": {"question": "Which county is El Cerrito from?", "sql": "SELECT county FROM geographic WHERE city = 'el cerrito'", "source_tables": ["geographic"]}, "evidence": "El Cerrito refers to city = 'el cerrito'"}
{"sample_id": 1677, "db_id": "restaurant", "final": {"question": "How many restaurants can we find at number 871 on its street?", "sql": "SELECT COUNT(id_restaurant) FROM location WHERE street_num = 871", "source_tables": ["location"]}, "evidence": "number 871 on its street refers to street_num = 871"}
{"sample_id": 1728, "db_id": "restaurant", "final": {"question": "List all the streets with more than 10 restaurants in Alameda county.", "sql": "SELECT T2.street_name FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.county = 'alameda county' GROUP BY T2.street_name HAVING COUNT(T2.id_restaurant) > 10", "source_tables": ["location", "geographic"]}, "evidence": "street refers to street_name; more than 10 restaurants refers to count(id_restaurant) > 10"}
{"sample_id": 1747, "db_id": "restaurant", "final": {"question": "Indicate the address of the restaurant with the most popular reviews.", "sql": "SELECT T2.street_num, T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant ORDER BY T1.review DESC LIMIT 1", "source_tables": ["location", "generalinfo"]}, "evidence": "address refers to street_num, street_name; the most popular review refers to max(review)"}
{"sample_id": 1711, "db_id": "restaurant", "final": {"question": "What kind of restaurants can be found at \"106 E 25th Ave\"?", "sql": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_num = 106 AND T2.street_name = 'e 25th ave'", "source_tables": ["location", "generalinfo"]}, "evidence": "kind of restaurant refers to food_type; \"106 E 25th Ave\" refers to street_name = 'e 25th ave'"}
{"sample_id": 1687, "db_id": "restaurant", "final": {"question": "What is the rating of each restaurant reviews on Atlantic Ave?", "sql": "SELECT T1.review FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'atlantic ave'", "source_tables": ["location", "generalinfo"]}, "evidence": "Atlantic Ave refers to street_name = 'atlantic ave'; rating refers to review"}
{"sample_id": 1771, "db_id": "restaurant", "final": {"question": "How many cities are there in Monterey?", "sql": "SELECT COUNT(DISTINCT city) FROM geographic WHERE region = 'monterey'", "source_tables": ["geographic"]}, "evidence": "Monterey refers to region = 'monterey'"}
{"sample_id": 1693, "db_id": "restaurant", "final": {"question": "On what street in Tuolumne County is Good Heavens restaurant located?", "sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T2.city = T3.city WHERE T2.label = 'good heavens' AND T3.county = 'tuolumne county'", "source_tables": ["location", "geographic", "generalinfo"]}, "evidence": "street refers to street_name; Good Heavens restaurant refers to label = 'good heavens'"}
{"sample_id": 1694, "db_id": "restaurant", "final": {"question": "Indicate the street numbers where Aux Delices Vietnamese Restaurant are located.", "sql": "SELECT DISTINCT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'aux delices vietnamese restaurant'", "source_tables": ["location", "generalinfo"]}, "evidence": "street numbers refers to street_num; Aux Delices Vietnamese Restaurant refers to label = 'aux delices vietnamese restaurant'"}
{"sample_id": 1704, "db_id": "restaurant", "final": {"question": "What is the county and region of Davis City?", "sql": "SELECT county, region FROM geographic WHERE city = 'Davis'", "source_tables": ["geographic"]}, "evidence": ""}
{"sample_id": 1703, "db_id": "restaurant", "final": {"question": "Please list any five cities that have an unidentified county and region.", "sql": "SELECT city FROM geographic WHERE county = 'unknown' AND region = 'unknown' LIMIT 5", "source_tables": ["geographic"]}, "evidence": "unidentified county and region refers to county = 'unknown' AND region = 'unknown'"}
{"sample_id": 1738, "db_id": "restaurant", "final": {"question": "What percentage of restaurants are from the Bay Area?", "sql": "SELECT CAST(SUM(IIF(T1.region = 'bay area', 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city", "source_tables": ["location", "geographic"]}, "evidence": "Bay Area refers to region = 'bay area'; percentage = divide(count(id_restaurant where region = 'bay area'), count(id_restaurant)) * 100%"}
{"sample_id": 1707, "db_id": "restaurant", "final": {"question": "How many American food restaurants are unpopular in Carmel?", "sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' AND review = ( SELECT MIN(review) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' )", "source_tables": ["generalinfo"]}, "evidence": "American Food Restaurant refers to food_type = 'ameraican'; unpopular refers to min(review); Carmel refers to city = 'Carmel'"}
{"sample_id": 1670, "db_id": "restaurant", "final": {"question": "How many restaurants have not obtained a minimum of 3 in their reviews?", "sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE review < 3", "source_tables": ["generalinfo"]}, "evidence": "have not obtained a minimum of 3 in review refers to review < 3"}
{"sample_id": 1755, "db_id": "restaurant", "final": {"question": "What is the name of the 24 hour diner at San Francisco?", "sql": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner' AND city = 'san francisco'", "source_tables": ["generalinfo"]}, "evidence": "name refers to label; 24 hour diner refers to food_type = '24 hour diner'; San Francisco refers to city = 'san francisco'"}
{"sample_id": 1674, "db_id": "restaurant", "final": {"question": "What counties are not in the Bay Area Region?", "sql": "SELECT DISTINCT county FROM geographic WHERE region != 'bay area'", "source_tables": ["geographic"]}, "evidence": "not in the Bay Area region refers to region ! = 'bay area'"}
{"sample_id": 1688, "db_id": "restaurant", "final": {"question": "Identify all restaurants in Contra Costa County by id.", "sql": "SELECT T1.id_restaurant FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'contra costa county'", "source_tables": ["location", "geographic"]}, "evidence": ""}
{"sample_id": 1750, "db_id": "restaurant", "final": {"question": "How many of the cities are in a Bay Area?", "sql": "SELECT COUNT(city) FROM geographic WHERE region = 'bay area'", "source_tables": ["geographic"]}, "evidence": "Bay Area refers to region = 'bay area'"}
{"sample_id": 1731, "db_id": "restaurant", "final": {"question": "What is the review of the restaurant at 8440 Murray Ave?", "sql": "SELECT T2.review FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'murray ave' AND T1.street_num = 8440", "source_tables": ["location", "generalinfo"]}, "evidence": "8440 Murray Ave refers to street_num = 8440 and street_name = 'murray ave'"}
{"sample_id": 1782, "db_id": "restaurant", "final": {"question": "How many types of restaurants are there in the Yosemite and Mono Lake area?", "sql": "SELECT COUNT(T2.food_type) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'yosemite and mono lake area'", "source_tables": ["geographic", "generalinfo"]}, "evidence": ""}
{"sample_id": 1685, "db_id": "restaurant", "final": {"question": "List all counties where there is no Bakers Square Restaurant & Pie Shop.", "sql": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label != 'bakers square restaurant & pie shop'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "no Bakers Square Restaurant & Pie Shop refers to label <> 'bakers square restaurant & pie shop'"}
{"sample_id": 1761, "db_id": "restaurant", "final": {"question": "Among all indian restaurants in Castro St., Mountainview, how many of them is about cookhouse in their label?", "sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'castro st' AND T1.city = 'mountain view' AND T2.food_type = 'indian' AND T2.label LIKE '%cookhouse%'", "source_tables": ["location", "generalinfo"]}, "evidence": "indian restaurant refers to food_type = 'indian'; Castro St. refers to street_name = 'castro st'; Mountainview refers to city = 'mountainview'; have the word \"Indian\" in label refers to label = 'indian'"}
{"sample_id": 1690, "db_id": "restaurant", "final": {"question": "What restaurant on Drive Street in San Rafael doesn't serve American food?", "sql": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'drive' AND T1.food_type != 'american' AND T2.city = 'san rafael'", "source_tables": ["location", "generalinfo"]}, "evidence": "Drive Street refers to street_name = 'drive'; San Rafael refers to city = 'san rafael'; American food refers to food_type\u00a0<> 'american'"}
{"sample_id": 1736, "db_id": "restaurant", "final": {"question": "How many streets with restaurants are there in the Northern California region?", "sql": "SELECT COUNT(T1.city) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city WHERE T1.region = 'northern california'", "source_tables": ["location", "geographic"]}, "evidence": ""}
{"sample_id": 1786, "db_id": "restaurant", "final": {"question": "List the full address of all the American restaurants with a review of 4 or more?", "sql": "SELECT T1.street_num, T1.street_name, T1.city FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.review >= 4", "source_tables": ["location", "generalinfo"]}, "evidence": "full address refers to street_num, street_name, city; American restaurant refers to food_type = 'american'; a review of 4 or more refers to review > 4"}
{"sample_id": 1713, "db_id": "restaurant", "final": {"question": "What is the name of the Chinese restaurant that can be found at 104 San Tomas Aquino Road, Campbell?", "sql": "SELECT T1.label FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_num = 104 AND T1.city = 'campbell' AND T2.street_name = 'san tomas aquino road'", "source_tables": ["location", "generalinfo"]}, "evidence": "restaurant name refers to label; Chinese restaurant refers to food_type = 'chinese'; 104 San Tomas Aquino Road Campbell refers to street_num = 104 AND street_name = 'san tomas aquino road' AND city = 'campbell'"}
{"sample_id": 1776, "db_id": "restaurant", "final": {"question": "How many Chinese restaurants are there on 1st st, Livermore?", "sql": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'livermore' AND T1.food_type = 'chinese' AND T2.street_name = '1st st'", "source_tables": ["location", "generalinfo"]}, "evidence": "Chinese restaurant refers to food_type = 'chinese'; 1st st refers to street_name = '1st st'; Livermore refers to city = 'livermore'"}
{"sample_id": 1672, "db_id": "restaurant", "final": {"question": "How many restaurants in the city of Richmond serve Mediterranean food?", "sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'mediterranean' AND city = 'richmond'", "source_tables": ["generalinfo"]}, "evidence": "Mediterranean food refers to food_type = \u00a0 'mediterranean'"}
{"sample_id": 1696, "db_id": "restaurant", "final": {"question": "In which regions are there no pizza restaurants?", "sql": "SELECT DISTINCT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'pizza' AND T2.region != 'unknown'", "source_tables": ["geographic", "generalinfo"]}, "evidence": "no pizza restaurants refers to food_type = 'pizza'"}
{"sample_id": 1752, "db_id": "restaurant", "final": {"question": "What is the city located in Bay Area of Santa Clara?", "sql": "SELECT city FROM geographic WHERE region = 'bay area' AND county = 'santa clara county'", "source_tables": ["geographic"]}, "evidence": "Bay Area refers to region = 'bay area'; Santa Clara refers to county = 'santa clara county'"}
{"sample_id": 1766, "db_id": "restaurant", "final": {"question": "List the food type of the restaurant located in 22779 6th St., Hayward City.", "sql": "SELECT T2.food_type FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_num = 22779 AND T1.street_name = '6th St' AND T2.city = 'hayward'", "source_tables": ["location", "generalinfo"]}, "evidence": "22779 refers to street_num = 22779; 6th St. refers to street_name = '6th St'"}
{"sample_id": 1778, "db_id": "restaurant", "final": {"question": "In the Bay Area, what is the most common type of food served by restaurants?", "sql": "SELECT T2.food_type FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area' GROUP BY T2.food_type ORDER BY COUNT(T2.food_type) DESC LIMIT 1", "source_tables": ["geographic", "generalinfo"]}, "evidence": "the Bay Area refers to region = 'bay area'; the most common type of food refers to max(count(food_type))"}
{"sample_id": 1781, "db_id": "restaurant", "final": {"question": "List all the streets where pizza-serving restaurants are found in San Jose.", "sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'pizza' AND T1.city = 'san jose'", "source_tables": ["location", "generalinfo"]}, "evidence": "street refers to street_name; pizza-serving restaurant refers to food_type = 'pizza'; San Jose refers to city = 'san jose'"}
{"sample_id": 1774, "db_id": "restaurant", "final": {"question": "How many restaurants can you find in Concord?", "sql": "SELECT COUNT(id_restaurant) FROM location WHERE city = 'concord'", "source_tables": ["location"]}, "evidence": "Concord refers to city = 'concord'"}
{"sample_id": 1671, "db_id": "restaurant", "final": {"question": "What types of food are served at the 4 top-reviewed restaurants?", "sql": "SELECT food_type FROM generalinfo WHERE review = ( SELECT MAX(review) FROM generalinfo ) LIMIT 4", "source_tables": ["generalinfo"]}, "evidence": "top-reviewed refers to review = 4; type of food refers to food_type\n\n"}
{"sample_id": 1749, "db_id": "restaurant", "final": {"question": "Find the percentage of restaurant in Napa Valley.", "sql": "SELECT CAST(SUM(IIF(region = 'Napa Valley', 1, 0)) AS REAL) * 100 / COUNT(region) FROM geographic", "source_tables": ["geographic"]}, "evidence": "Napa Valley refers to region = 'Napa Valley'; percentage = divide(count(id_restaurant where region = 'Napa Valley'), count(id_restaurant)) * 100%"}
{"sample_id": 1775, "db_id": "restaurant", "final": {"question": "In which region can you find the top 4 most popular restaurants?", "sql": "SELECT T2.region FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city ORDER BY T1.review DESC LIMIT 4", "source_tables": ["geographic", "generalinfo"]}, "evidence": "the top 4 most popular restaurant refers to top 4 max(review)"}
{"sample_id": 1742, "db_id": "restaurant", "final": {"question": "How many cities are located in the Bay Area?", "sql": "SELECT COUNT(city) FROM geographic WHERE region = 'bay area'", "source_tables": ["geographic"]}, "evidence": "the Bay Area refers to region = 'bay area'"}
{"sample_id": 1684, "db_id": "restaurant", "final": {"question": "In which streets of the city of San Francisco are there restaurants that serve seafood?", "sql": "SELECT T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T2.food_type = 'seafood' AND street_name IS NOT NULL", "source_tables": ["location", "generalinfo"]}, "evidence": "street refers to street_name; seafood refers to food_type = 'seafood'"}
{"sample_id": 1708, "db_id": "restaurant", "final": {"question": "What is the percentage of restaurants that serve American food in Dublin city?", "sql": "SELECT CAST(SUM(IIF(food_type = 'american food', 1, 0)) AS REAL) * 100 / COUNT(id_restaurant) FROM generalinfo WHERE city = 'dublin'", "source_tables": ["generalinfo"]}, "evidence": "American food refers to food_type = 'american food'; percentage = divide(count(id_restaurant), count(id_restaurant where food_type = 'american food')) where city = 'dublin' * 100%"}
{"sample_id": 1943, "db_id": "soccer_2016", "final": {"question": "Who among the players won both \"Man of the Series\" and \"Orange Cap\" in the same season?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Man_of_the_Series = T2.Orange_Cap", "source_tables": ["season", "player"]}, "evidence": "Who refers to Player_Name;"}
{"sample_id": 1854, "db_id": "soccer_2016", "final": {"question": "Among the players born in 1977, what is the percentage of the players with a role as a captain?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Role_Desc = 'Captain' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Role_Id) FROM Rolee AS T1 INNER JOIN Player_Match AS T2 ON T2.Role_Id = T1.Role_Id INNER JOIN Player AS T3 ON T3.Player_Id = T2.Player_Id WHERE T3.DOB LIKE '1977%'", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "born in 1977 refers to DOB LIKE '1977%'; a role as a captain refers to Role_Desc = 'Captain'; percentage = divide(count(Role_Id where Role_Desc = 'Captain'), count(Role_Id)) * 100% where DOB LIKE '1977%'"}
{"sample_id": 1968, "db_id": "soccer_2016", "final": {"question": "How old is Ishan Kishan in 2022?", "sql": "SELECT 2022 - SUBSTR(DOB, 1, 4) FROM Player WHERE Player_Name = 'Ishan Kishan'", "source_tables": ["player"]}, "evidence": "old refers to SUBTRACT(2022, SUBSTR(DOB, 1, 4)); Ishan Kishan refers to Player_Name = 'Ishan Kishan';"}
{"sample_id": 2024, "db_id": "soccer_2016", "final": {"question": "How many matches did team Kings XI Punjab win in season year 2008?", "sql": "SELECT COUNT(DISTINCT T2.Match_Id) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Kings XI Punjab' AND T4.Season_Year = 2008", "source_tables": ["season", "match", "player_match", "team"]}, "evidence": "in season year 2008 refers to Season_Year = 2008; team Kings XI Punjab refers to Team_Name = 'Kings XI Punjab'"}
{"sample_id": 1996, "db_id": "soccer_2016", "final": {"question": "What is the venue for the match ID 829768?", "sql": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id WHERE T2.match_id = 829768", "source_tables": ["match", "venue"]}, "evidence": "\nvenue refers to Venue_Name"}
{"sample_id": 2007, "db_id": "soccer_2016", "final": {"question": "How old is SC Ganguly in 2008?", "sql": "SELECT 2008 - strftime('%Y', DOB) FROM Player WHERE Player_Name = 'SC Ganguly'", "source_tables": ["player"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; old refers to SUBTRACT(2008, strftime('%Y',DOB))"}
{"sample_id": 1926, "db_id": "soccer_2016", "final": {"question": "In what percentage of games played at the Dr DY Patil Sports Academy venue did the winning team win by a margin of less than 10?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.Win_Margin < 10 THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(T1.Venue_Id) FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Venue_Name = 'Dr DY Patil Sports Academy'", "source_tables": ["match", "venue"]}, "evidence": "Dr DY Patil Sports Academy venue refers to Venue_Name = 'Dr DY Patil Sports Academy'; win by a margin of less than 10 refers to Win_Margin < 10; percentage = divide(count(Venue_Id) when Win_Margin < 10, sum(Venue_Id)) as percentage"}
{"sample_id": 1915, "db_id": "soccer_2016", "final": {"question": "Indicate the name of the most versatile players of the Delhi Daredevils.", "sql": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Team AS T2 ON T1.Team_Id = T2.Team_Id INNER JOIN Player AS T3 ON T1.Player_Id = T3.Player_Id WHERE T2.Team_Name = 'Delhi Daredevils' GROUP BY T3.Player_Name ORDER BY COUNT(T1.Role_Id) DESC LIMIT 1", "source_tables": ["player", "player_match", "team"]}, "evidence": "if a player has multiple roles in a match, it means this player is versatile; name refers to Player_Name; most versatile player refers to MAX(COUNT(Role_id)); Delhi Daredevils refers to Team_Name = 'Delhi Daredevils'"}
{"sample_id": 1834, "db_id": "soccer_2016", "final": {"question": "Who is the player who won the first ever \"man of the match\" award?", "sql": "SELECT Player_Name FROM Player WHERE Player_Id = ( SELECT Man_of_the_Match FROM \"Match\" ORDER BY match_date ASC LIMIT 1 )", "source_tables": ["match", "player"]}, "evidence": "name of the player refers to Player_Name; the first ever refers to min(match_date); \"man of the match\" award refers to Player_Id in 'Man_of_the_Match'"}
{"sample_id": 2012, "db_id": "soccer_2016", "final": {"question": "What are the names of players who participated in season year 2008?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T4.Season_Year = 2008 GROUP BY T1.Player_Name", "source_tables": ["season", "match", "player_match", "player"]}, "evidence": "season year 2008 refers to Season_Year = 2008"}
{"sample_id": 2010, "db_id": "soccer_2016", "final": {"question": "List the name of England players.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'England'", "source_tables": ["country", "player"]}, "evidence": "England players refers to Country_Name = 'England'"}
{"sample_id": 1987, "db_id": "soccer_2016", "final": {"question": "How many of the matches are Superover?", "sql": "SELECT SUM(CASE WHEN T2.win_type = 'wickets' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id", "source_tables": ["win_by", "match"]}, "evidence": "are Superover refers to win_type = 'wickets';"}
{"sample_id": 2036, "db_id": "soccer_2016", "final": {"question": "How many matches have 7 points of winning margin?", "sql": "SELECT COUNT(Match_Id) FROM Match WHERE win_margin = 7", "source_tables": ["match"]}, "evidence": "have 7 points of winning margin refers to win_margin = 7;"}
{"sample_id": 1799, "db_id": "soccer_2016", "final": {"question": "What is the name of the player who won the \"man of the match\" award in the match on 2008/4/18?", "sql": "SELECT T2.Player_Name FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T1.Match_Date = '2008-04-18'", "source_tables": ["match", "player"]}, "evidence": "name of player refers to Player_Name; on 2008/4/18 refers to Match_Date = '2008-04-18'"}
{"sample_id": 1978, "db_id": "soccer_2016", "final": {"question": "List the IDs and names of the umpires from New Zealand.", "sql": "SELECT T1.Umpire_Id, T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'", "source_tables": ["umpire", "country"]}, "evidence": "New Zealand refers to Country_Name = 'New Zealand'; ID of the umpire refers to Umpire_Id; name of the umpire refers to Umpire_Name"}
{"sample_id": 1923, "db_id": "soccer_2016", "final": {"question": "In which country do most players have the 'slow left-arm chinaman' bowling style?", "sql": "SELECT T3.Country_Name FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Bowling_skill = 'Slow left-arm chinaman'", "source_tables": ["bowling_style", "country", "player"]}, "evidence": "'slow left-arm chinaman' bowling style refers to Bowling_skill = 'Slow left-arm chinaman'; most players\u00a0 refers to max(count(Country_Id))"}
{"sample_id": 2032, "db_id": "soccer_2016", "final": {"question": "What are the names of players who had been man of the match more than 5 times in season year 2008?", "sql": "SELECT CASE WHEN COUNT(T2.Man_of_the_Match) > 5 THEN T1.Player_Name ELSE 0 END FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match INNER JOIN Player_Match AS T3 ON T3.Player_Id = T1.Player_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T4.Season_Year = 2008", "source_tables": ["season", "match", "player_match", "player"]}, "evidence": "man of the match more than 5 times refers to COUNT(Man_of_the_Match) > 5; in season year 2008 refers to Season_Year = 2008; name of player refers to Player_Name;"}
{"sample_id": 1853, "db_id": "soccer_2016", "final": {"question": "List the names of the first andthe second teams that played a match with the point of the winning margin lower than the 30% of the average winning margin of the matches held in 2011.", "sql": "SELECT DISTINCT CASE WHEN T1.Win_Margin < ( SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%' ) THEN T2.Team_Name END, CASE WHEN T1.Win_Margin < ( SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%' ) THEN T3.Team_Name END FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T1.Match_Date LIKE '2011%'", "source_tables": ["match", "team"]}, "evidence": "name of the team refers to Team_Name; in 2011 refers to Match_Date LIKE '2011%'; the point of winning margin lower than 30% of the average winning margin refers to Win_Margin < multiply(avg(Win_Margin), 0.3) where Match_Date LIKE '2011%'"}
{"sample_id": 1999, "db_id": "soccer_2016", "final": {"question": "What is the difference between the number of matches where SC Ganguly played as a Captain and those matches where he played other roles?", "sql": "SELECT SUM(CASE WHEN T3.Role_Id = 1 THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.Role_Id > 1 THEN 1 ELSE 0 END) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'SC Ganguly'", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; played as a Captain refers to Role_Id = 1; played other roles refers to Role_Id > 1; difference refers to SUBTRACT(COUNT(Role_Id = 1), COUNT(Role_Id > 1))"}
{"sample_id": 1979, "db_id": "soccer_2016", "final": {"question": "Who was the captain-keeper of Rising Pune Supergiants?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id WHERE T3.Team_Name = 'Rising Pune Supergiants' AND T4.Role_Desc = 'CaptainKeeper' GROUP BY T1.Player_Name", "source_tables": ["rolee", "player_match", "player", "team"]}, "evidence": "captain-keeper refers to Role_Desc = 'CaptainKeeper'; Rising Pune Supergiants refers to Role_Desc = 'CaptainKeeper'"}
{"sample_id": 1857, "db_id": "soccer_2016", "final": {"question": "Describe any five matches IDs that reached over ID 20.", "sql": "SELECT Match_Id FROM Ball_by_Ball WHERE Over_Id = 20 GROUP BY Match_Id LIMIT 5", "source_tables": ["ball_by_ball"]}, "evidence": "reached over ID 20 refers to Over_Id = 20"}
{"sample_id": 1895, "db_id": "soccer_2016", "final": {"question": "Of the wickets taken in the third overs, how many are without the involvement of fielders?", "sql": "SELECT SUM(CASE WHEN Fielders = '' THEN 1 ELSE 0 END) FROM Wicket_Taken WHERE Over_Id = 3", "source_tables": ["wicket_taken"]}, "evidence": "third overs refers to Over_Id = 3; without the involvement of fielders refers to Fielders = ''"}
{"sample_id": 1805, "db_id": "soccer_2016", "final": {"question": "Give the name of the youngest player.", "sql": "SELECT Player_Name FROM Player ORDER BY DOB DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "name of player refers to Player_Name; the youngest refers to max(DOB)"}
{"sample_id": 2011, "db_id": "soccer_2016", "final": {"question": "What is the venue name of Bandladore?", "sql": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_ID = T2.City_ID WHERE T2.City_Name = 'Bangalore'", "source_tables": ["city", "venue"]}, "evidence": "Bandladore refers to City_Name = 'Bangalore'"}
{"sample_id": 2021, "db_id": "soccer_2016", "final": {"question": "How many players have left arm fast in bowling skill?", "sql": "SELECT COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_skill = 'Left-arm fast'", "source_tables": ["bowling_style", "player"]}, "evidence": "have left arm fast in bowling skill refers to Bowling_skill = 'Left-arm fast';"}
{"sample_id": 1898, "db_id": "soccer_2016", "final": {"question": "In the players, how many were out by hit wicket?", "sql": "SELECT Player_Out FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE Out_Name = 'hit wicket'", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "out by hit wicket refers to Out_Name = 'hit wicket'"}
{"sample_id": 1813, "db_id": "soccer_2016", "final": {"question": "What is the nationality of the 7th season Purple Cap winner?", "sql": "SELECT T3.Country_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Season_Id = 7 AND T1.Purple_Cap IS NOT NULL", "source_tables": ["season", "country", "player"]}, "evidence": "nationality refers to Country_Name; the 7th season refers to Season_Id = 7; Purple Cap winner refers to Purple_Cap IS NOT NULL"}
{"sample_id": 2033, "db_id": "soccer_2016", "final": {"question": "What is the average of Indian players that were born between 1975 and 1985 among all players?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE strftime('%Y', T1.DOB) BETWEEN '1975' AND '1985'", "source_tables": ["country", "player"]}, "evidence": "Indian players refers to Country_Name = 'India'; born between 1975 and 1985 refers to strftime('%Y',T1.DOB) between '1975' and '1985'; average refers to DIVIDE(COUNT(Country_Name = 'India'), COUNT(Player_Id))"}
{"sample_id": 1974, "db_id": "soccer_2016", "final": {"question": "Among the\" Mumbai Indians\" team that played in 2009, how many percent of the matches did they win?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = T2.Team_Id THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T1.Team_1 = T2.Team_Id OR T1.Team_2 = T2.Team_Id WHERE T2.Team_Name = 'Mumbai Indians' AND T1.Match_Date LIKE '2009%'", "source_tables": ["match", "team"]}, "evidence": "played in 2009 Match_Date like '2009%'; Mumbai Indians\" team refers to Team_Name = 'Mumbai Indians'; percent of the matches did they win refers to DIVIDE(COUNT(Match_Winner = Team_Id), COUNT(Match_Id))"}
{"sample_id": 1893, "db_id": "soccer_2016", "final": {"question": "Among the matches, what percentage have a winning margin above 100?", "sql": "SELECT CAST(COUNT(CASE WHEN Win_Margin > 100 THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(Match_Id) FROM \"Match\"", "source_tables": ["match"]}, "evidence": "winning margin above 100 refers to Win_Margin > 100; percentage = divide(count(Match_Id) when Win_Margin > 100, count(Match_Id)) as percentage"}
{"sample_id": 1904, "db_id": "soccer_2016", "final": {"question": "Give the name of the venue where the most number of matches are held.", "sql": "SELECT T2.Venue_Name FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id GROUP BY T2.Venue_Name ORDER BY COUNT(T2.Venue_Id) DESC LIMIT 1", "source_tables": ["match", "venue"]}, "evidence": "name of the venue refers to Venue_Name; most number of matches refers to max(count(Venue_Id))"}
{"sample_id": 1867, "db_id": "soccer_2016", "final": {"question": "List the names and countries of the players from Gujarat Lions who played in the match held on 11th April 2016.", "sql": "SELECT T4.Player_Name, T5.Country_Name FROM Player_Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_Id INNER JOIN Match AS T3 ON T3.Match_Id = T1.Match_Id INNER JOIN Player AS T4 ON T4.Player_Id = T1.Player_Id INNER JOIN Country AS T5 ON T5.Country_Id = T4.Country_Name WHERE T2.Team_Name = 'Gujarat Lions' AND T3.Match_Date = '2016-04-11'", "source_tables": ["match", "player", "team", "player_match", "country"]}, "evidence": "player's name refers to Player_Name; country refers to Country_Name; Gujarat Lions refers to Team_Name = 'Gujarat Lions'; on 11th April 2016 refers to Match_Date = '2016-04-11'"}
{"sample_id": 1906, "db_id": "soccer_2016", "final": {"question": "Write the name of the player who was the man of the series more than one time.", "sql": "SELECT T2.Player_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Man_of_the_Series > 1", "source_tables": ["season", "player"]}, "evidence": "name of the player refers to Player_Name; man of the series more than one time refers to count(Man_of_the_Series) > 1"}
{"sample_id": 1871, "db_id": "soccer_2016", "final": {"question": "Which team did CK Kapugedera belong to? How many matches did he play?", "sql": "SELECT T3.Team_Name, COUNT(T2.Match_Id) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Team AS T3 ON T3.Team_Id = T2.Team_Id WHERE T1.Player_Name = 'CK Kapugedera'", "source_tables": ["player_match", "player", "team"]}, "evidence": "team refers to Team_Name; CK Kapugedera refers to Player_Name = 'CK Kapugedera'"}
{"sample_id": 2041, "db_id": "soccer_2016", "final": {"question": "How many of the players are from Sri Lanka?", "sql": "SELECT COUNT(*) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'Sri Lanka'", "source_tables": ["country", "player"]}, "evidence": "from Sri Lanka refers to Country_Name = 'Sri Lanka';"}
{"sample_id": 1860, "db_id": "soccer_2016", "final": {"question": "Provide the match IDs which were held on 18th April 2015.", "sql": "SELECT Match_Id FROM Match WHERE Match_Date LIKE '%2015-04-18%'", "source_tables": ["match"]}, "evidence": "on 18th April 2015 refers to DATE(Match_Date) = '2015-04-18'"}
{"sample_id": 1976, "db_id": "soccer_2016", "final": {"question": "Who is the eldest player and where did he/she come from?", "sql": "SELECT T1.Player_Name, T2.Country_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id ORDER BY T1.DOB LIMIT 1", "source_tables": ["country", "player"]}, "evidence": "eldest player refers to MIN(DOB); where he/she come from refers to Country_Name"}
{"sample_id": 2017, "db_id": "soccer_2016", "final": {"question": "How many players played as a captain in season year 2008?", "sql": "SELECT COUNT(T1.Player_Id) FROM Player_Match AS T1 INNER JOIN Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Captain' AND T2.Match_Date LIKE '2008%'", "source_tables": ["rolee", "match", "player_match"]}, "evidence": "played as a captain refers to Role_Desc = 'Captain'; in season year 2008 refers Match_Date like '2008%'"}
{"sample_id": 1861, "db_id": "soccer_2016", "final": {"question": "List the match IDs which had players out by hit wickets.", "sql": "SELECT T1.Match_Id FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'hit wicket'", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "had players out by hit wickets refers to Out_Name = 'hit wicket'"}
{"sample_id": 1941, "db_id": "soccer_2016", "final": {"question": "Tally the match IDs in which V Kohli is the \"Man of the Match\".", "sql": "SELECT T1.Match_Id FROM \"Match\" AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Match = T2.Player_Id WHERE T2.Player_Name = 'V Kohli'", "source_tables": ["match", "player"]}, "evidence": ""}
{"sample_id": 2034, "db_id": "soccer_2016", "final": {"question": "Calculate the percentage of left hand batting style players among all players.", "sql": "SELECT CAST(SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id", "source_tables": ["batting_style", "player"]}, "evidence": "left hand batting style players refers to Batting_hand = 'Left-hand bat'; percentage refers to DIVIDE(COUNT(Batting_hand = 'Left-hand bat'), COUNT(Player_Id)) * 100.0"}
{"sample_id": 1887, "db_id": "soccer_2016", "final": {"question": "Is SuperSport Park located at Centurion?", "sql": "SELECT T2.City_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T1.Venue_Name LIKE 'St George%'", "source_tables": ["city", "venue"]}, "evidence": "SuperSport Park refers to Venue_Name = 'SuperSport Park'; Centurion refers to City_Name = 'Centurion'"}
{"sample_id": 2015, "db_id": "soccer_2016", "final": {"question": "List the names of players who played as a keeper.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Keeper' GROUP BY T1.Player_Name", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "played as a keeper refers to Role_Desc = 'Keeper'; name of player refers to Player_Name;"}
{"sample_id": 2014, "db_id": "soccer_2016", "final": {"question": "What is the role of SC Ganguly?", "sql": "SELECT T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'SC Ganguly' GROUP BY T3.Role_Desc", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; role refers to Role_Desc"}
{"sample_id": 1838, "db_id": "soccer_2016", "final": {"question": "What is the percentage of all right-handed batting players among all the other players?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Player_Id) FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T2.Batting_hand = T1.Batting_Id", "source_tables": ["batting_style", "player"]}, "evidence": "right-handed batting refers to Batting_hand = 'Right-hand bat'; percentage = divide(count(Player_Id where Batting_hand = 'Right-hand bat'), count(Player_Id)) * 100%"}
{"sample_id": 2019, "db_id": "soccer_2016", "final": {"question": "What type did match ID 336000 win?", "sql": "SELECT T2.Win_Type FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T1.Match_Id = 336000", "source_tables": ["win_by", "match"]}, "evidence": "type of match won refers to Win_Type"}
{"sample_id": 1875, "db_id": "soccer_2016", "final": {"question": "List down the ID of toss winners who decided to bat after winning the \"toss of the coin\".", "sql": "SELECT Toss_Winner FROM Match WHERE Toss_Decide = 2", "source_tables": ["match"]}, "evidence": "decided to bat refers to Toss_Decide = 2; ID of toss winners refers to Toss_winner"}
{"sample_id": 1935, "db_id": "soccer_2016", "final": {"question": "How many times did the matches were held in MA Chidambaram Stadium from 5/9/2009 to 8/8/2011?", "sql": "SELECT SUM(CASE WHEN Venue_Name = 'MA Chidambaram Stadium' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE Match_Date BETWEEN '2009-05-09' AND '2011-08-08'", "source_tables": ["match", "venue"]}, "evidence": "MA Chidambaram Stadium refers to Venue_Name = 'MA Chidambaram Stadium' ; from 5/9/2009 to 8/8/2011 refers to Match_Date between '2009-05-09' and '2011-08-08'"}
{"sample_id": 1899, "db_id": "soccer_2016", "final": {"question": "On average, how many players from each country bat with their right hand?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Country_Name) FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T1.Batting_id = T2.Batting_hand", "source_tables": ["batting_style", "player"]}, "evidence": "bat with their right hand refers to Batting_hand = 'Right-hand bat'; average = divide(count(Player_Id) when Batting_hand = 'Right-hand bat', count(Country_Name))"}
{"sample_id": 1939, "db_id": "soccer_2016", "final": {"question": "Write down the name of players whose bowling skill is Legbreak.", "sql": "SELECT T2.Player_Name FROM Bowling_Style AS T1 INNER JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill WHERE T1.Bowling_skill = 'Legbreak'", "source_tables": ["bowling_style", "player"]}, "evidence": "name of players refers to Player_Name"}
{"sample_id": 1843, "db_id": "soccer_2016", "final": {"question": "List the player's name of Mumbai Indians in the match ID 335990.", "sql": "SELECT T3.Team_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Team AS T3 ON T3.Team_Id = T2.Team_Id WHERE T2.Match_Id = 335990 AND T3.Team_Name = 'Mumbai Indians' GROUP BY T3.Team_Name", "source_tables": ["player_match", "player", "team"]}, "evidence": "Mumbai Indians refers to Team_Name = 'Mumbai Indians'; match ID 335990 refers to Match_Id = 335990"}
{"sample_id": 1959, "db_id": "soccer_2016", "final": {"question": "Which country is umpire TH Wijewardene from?", "sql": "SELECT T2.Country_Name FROM Umpire AS T1 INNER JOIN country AS T2 ON T2.Country_Id = T1.Umpire_Country WHERE T1.Umpire_Name = 'TH Wijewardene'", "source_tables": ["umpire", "country"]}, "evidence": "country refers to Country_Name"}
{"sample_id": 1829, "db_id": "soccer_2016", "final": {"question": "How many Orange Cap awards were won by CH Gayle?", "sql": "SELECT SUM(CASE WHEN T1.Player_Name = 'CH Gayle' THEN 1 ELSE 0 END) AS cnt FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Orange_Cap", "source_tables": ["season", "player"]}, "evidence": "CH Gayle refers to Player_Name = 'CH Gayle'"}
{"sample_id": 1901, "db_id": "soccer_2016", "final": {"question": "In the matches where the winning margin is less than fifty, how many teams won by wicket?", "sql": "SELECT COUNT(T2.Win_Id) FROM \"Match\" AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T2.Win_Type = 'wickets' AND T1.Win_Margin < 50", "source_tables": ["win_by", "match"]}, "evidence": "winning margin is less than fifty refers to Win_Margin < 50; won by wicket refers to Win_Type = 'wickets'"}
{"sample_id": 1911, "db_id": "soccer_2016", "final": {"question": "How many first teams chose to bat after winning the toss?", "sql": "SELECT COUNT(Team_1) FROM \"Match\" WHERE Team_1 = Toss_Winner AND Toss_Decide = 2", "source_tables": ["match"]}, "evidence": "first teams refers to Team_1; chose to bat after winning the toss refers to Toss_Winner and Toss_Decide = 2"}
{"sample_id": 1957, "db_id": "soccer_2016", "final": {"question": "How many players bowl in the legbreak style?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_skill = 'Legbreak'", "source_tables": ["bowling_style", "player"]}, "evidence": "legbreak style refers to Bowling_skill = 'Legbreak'"}
{"sample_id": 1787, "db_id": "soccer_2016", "final": {"question": "How many players were born after the year 1985?", "sql": "SELECT COUNT(Player_Id) FROM Player WHERE SUBSTR(DOB, 1, 4) > 1985", "source_tables": ["player"]}, "evidence": "born after the year 1985 refers to SUBSTR(DOB, 1, 4) > 1985"}
{"sample_id": 2009, "db_id": "soccer_2016", "final": {"question": "How many players are Indians?", "sql": "SELECT COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'India'", "source_tables": ["country", "player"]}, "evidence": "are Indians refers to Country_Name = 'India'"}
{"sample_id": 1816, "db_id": "soccer_2016", "final": {"question": "State the name of the city with the most venues.", "sql": "SELECT T1.City_Name FROM City AS T1 INNER JOIN Venue AS T2 ON T1.City_Id = T2.City_Id GROUP BY T1.City_Id ORDER BY COUNT(T2.Venue_Id) DESC LIMIT 1", "source_tables": ["city", "venue"]}, "evidence": "name of the city refers to City_Name; the most venues refers to max(count(Venue_Id))"}
{"sample_id": 1949, "db_id": "soccer_2016", "final": {"question": "Which year do the majority of the players were born?", "sql": "SELECT DOB FROM Player GROUP BY DOB ORDER BY COUNT(DOB) DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "year refers to DOB; majority of the players refers to max(count(Player_Id))"}
{"sample_id": 1849, "db_id": "soccer_2016", "final": {"question": "What is the role of K Goel in the match ID 335992?", "sql": "SELECT T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Rolee AS T3 ON T3.Role_Id = T2.Role_Id WHERE T2.Match_Id = 335992 AND T1.Player_Name = 'K Goel'", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "role refers to Role_Desc; K Goel refers to Player_Name = 'K Goel'; match ID 335992 refers to Match_Id = 335992"}
{"sample_id": 1815, "db_id": "soccer_2016", "final": {"question": "How many Indian cities are there in the database?", "sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id", "source_tables": ["city", "country"]}, "evidence": "Indian refers to Country_Name = 'India'"}
{"sample_id": 1877, "db_id": "soccer_2016", "final": {"question": "List down the DOB of players who received the \"man of the match\" award.", "sql": "SELECT T2.DOB FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match", "source_tables": ["match", "player"]}, "evidence": ""}
{"sample_id": 1802, "db_id": "soccer_2016", "final": {"question": "Among all the matches SC Ganguly has played in, what is the highest winning margin?", "sql": "SELECT MAX(T3.Win_Margin) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE T1.Player_Name = 'SC Ganguly'", "source_tables": ["match", "player_match", "player"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; the highest winning margin refers to max(Win_Margin)"}
{"sample_id": 1869, "db_id": "soccer_2016", "final": {"question": "Where did BR Doctrove come from?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Umpire AS T2 ON T2.Umpire_Country = T1.Country_Id WHERE T2.Umpire_Name = 'BR Doctrove'", "source_tables": ["umpire", "country"]}, "evidence": "the country the umpire comes from refers to Country_Name; BR Doctrove refers to Umpire_Name = 'BR Doctrove'"}
{"sample_id": 1796, "db_id": "soccer_2016", "final": {"question": "Please list the bowling skills of all the players from Australia.", "sql": "SELECT T2.Bowling_Skill FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id INNER JOIN Country AS T3 ON T1.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'Australia' GROUP BY T2.Bowling_Skill", "source_tables": ["bowling_style", "country", "player"]}, "evidence": "Australia refers to Country_Name = 'Australia'"}
{"sample_id": 2022, "db_id": "soccer_2016", "final": {"question": "What is the outcome type of match ID 392195?", "sql": "SELECT T2.Outcome_Type FROM Match AS T1 INNER JOIN Outcome AS T2 ON T1.Outcome_type = T2.Outcome_Id WHERE T1.Match_Id = '392195'", "source_tables": ["match", "outcome"]}, "evidence": ""}
{"sample_id": 1817, "db_id": "soccer_2016", "final": {"question": "What is the batting hand of MK Pandey?", "sql": "SELECT T2.Batting_hand FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T1.Player_Name = 'MK Pandey'", "source_tables": ["batting_style", "player"]}, "evidence": "MK Pandey refers to Player_Name = 'MK Pandey'"}
{"sample_id": 1833, "db_id": "soccer_2016", "final": {"question": "Which team has the highest number of losses of all time?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN ( SELECT COUNT(Team_1) AS a, Team_1 FROM Match WHERE Team_1 <> Match_Winner GROUP BY Team_1 UNION SELECT COUNT(Team_2) AS a, Team_2 FROM Match WHERE Team_2 <> Match_Winner GROUP BY Team_2 ORDER BY a DESC LIMIT 1 ) AS T2 ON T1.Team_Id = T2.Team_1", "source_tables": ["match", "team"]}, "evidence": "name of the team refers to Team_Name; the highest number of losses refers to max(add(count(Team_1 where Team_Id = Team_1 and Team_1 <> Match_Winner), count(Team_2 where Team_Id = Team_2 and Team_2 <> Match_Winner)))"}
{"sample_id": 1809, "db_id": "soccer_2016", "final": {"question": "For the game on 2008/5/12, who was the man of the match?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Match_Date = '2008-05-12'", "source_tables": ["match", "player"]}, "evidence": "on 2008/5/12 refers to Match_Date = '2008-05-12'; name refers to Player_Name;"}
{"sample_id": 1942, "db_id": "soccer_2016", "final": {"question": "From 2011 to 2012, how many Australian players became the \"Man of the Match\"?", "sql": "SELECT SUM(CASE WHEN T1.Match_Date BETWEEN '2011%' AND '2012%' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match INNER JOIN Country AS T3 ON T3.Country_Id = T2.Country_Name WHERE T3.Country_Name = 'Australia'", "source_tables": ["country", "match", "player"]}, "evidence": "From 2011 to 2012 refers to Match_Date between '2011%' and '2012%'; Australian players refers to Country_Name = 'Australia'"}
{"sample_id": 1962, "db_id": "soccer_2016", "final": {"question": "List all the names of the winning team's players in the first match of season 1.", "sql": "SELECT T3.Player_Name FROM \"Match\" AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Winner = T2.Team_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id WHERE T1.Season_Id = 1 ORDER BY T1.Match_Date LIMIT 1", "source_tables": ["match", "player_match", "player"]}, "evidence": "names refers to Player_Name; winning team's refers to Match_Winner; first match of season 1 refers to Season_Id = 1 and min(Match_Date)"}
{"sample_id": 1928, "db_id": "soccer_2016", "final": {"question": "List the player's ID of the top five players, by descending order, in terms of bowling skill.", "sql": "SELECT Player_Id FROM Player ORDER BY Bowling_skill DESC LIMIT 5", "source_tables": ["player"]}, "evidence": "player's ID refers to Player_Id"}
{"sample_id": 1973, "db_id": "soccer_2016", "final": {"question": "Among the players from South Africa, provide the players' names who were born in 1984.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'South Africa' AND T1.DOB LIKE '1984%'", "source_tables": ["country", "player"]}, "evidence": "from South Africa refers to Country_Name = 'South Africa'; born in 1984 refers to DOB like '1984%';"}
{"sample_id": 1851, "db_id": "soccer_2016", "final": {"question": "How many matches were held at the venue named \"Newlands\"?", "sql": "SELECT SUM(CASE WHEN T2.Venue_Name = 'Newlands' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id", "source_tables": ["match", "venue"]}, "evidence": "the venue named \"Newlands\" refers to Venue_Name = 'Newlands'"}
{"sample_id": 1791, "db_id": "soccer_2016", "final": {"question": "How many players are from Australia?", "sql": "SELECT COUNT(CASE WHEN T2.Country_Name = 'Australia' THEN T1.Player_Id ELSE NULL END) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id", "source_tables": ["country", "player"]}, "evidence": "Australia refers to Country_Name = 'Australia'"}
{"sample_id": 1924, "db_id": "soccer_2016", "final": {"question": "In which venue did Kochi Tuskers Kerala play most of their matches?", "sql": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id INNER JOIN Team AS T3 ON T2.Team_1 = T3.Team_Id WHERE T3.Team_Name = 'Kochi Tuskers Kerala' GROUP BY T1.Venue_Name", "source_tables": ["match", "team", "venue"]}, "evidence": "Kochi Tuskers Kerala refers to Team_Name = 'Kochi Tuskers Kerala'; most of their matches refers to max(Venue_Id)"}
{"sample_id": 1970, "db_id": "soccer_2016", "final": {"question": "How many matches in 2009 had win margins of less than 10?", "sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE Match_Date LIKE '2009%' AND Win_Margin < 10", "source_tables": ["match"]}, "evidence": "in 2009 refers to Match_Date like '2009%'; win margins of less than 10 refers to Win_Margin < 10;"}
{"sample_id": 1814, "db_id": "soccer_2016", "final": {"question": "Which country does Ranchi city belong to?", "sql": "SELECT T2.Country_Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id WHERE T1.City_Name = 'Ranchi'", "source_tables": ["city", "country"]}, "evidence": "country refers to Country_Name; Ranchi city refers to City_Name = 'Ranchi'"}
{"sample_id": 1803, "db_id": "soccer_2016", "final": {"question": "What is the average winning margin of all the matches SC Ganguly has played in?", "sql": "SELECT CAST(SUM(T3.Win_Margin) AS REAL) / COUNT(*) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE T1.Player_Name = 'SC Ganguly'", "source_tables": ["match", "player_match", "player"]}, "evidence": "SC Ganguly refers to Player_Name = 'SC Ganguly'; the average winning margin = divide(sum(Win_Margin), count(Match_Id)) where Player_Name = 'SC Ganguly'"}
{"sample_id": 1856, "db_id": "soccer_2016", "final": {"question": "List the over IDs, ball IDs, and innings numbers of the match ID \"336004\" while the batsman got the maximum scores.", "sql": "SELECT Over_Id, Ball_Id, Innings_No FROM Batsman_Scored WHERE Match_Id = 336004 ORDER BY Runs_Scored DESC LIMIT 1", "source_tables": ["batsman_scored"]}, "evidence": "over ID refers to Over_Id; ball ID refers to Ball_Id; innings number refers to Innings_No; match ID \"336004\" refers to Match_Id = 336004; batsman got the maximum scores refers to max(Runs_Scored)"}
{"sample_id": 2005, "db_id": "soccer_2016", "final": {"question": "How many victory matches were there in 2008?", "sql": "SELECT COUNT(Match_Id) FROM Match WHERE Match_Date LIKE '2008%' AND Match_Winner IS NOT NULL", "source_tables": ["match"]}, "evidence": "in 2008 refers to Match_Date like '2008%'"}
{"sample_id": 1914, "db_id": "soccer_2016", "final": {"question": "How many times has SR Watson been named 'Man of the Match'?", "sql": "SELECT SUM(CASE WHEN T2.Player_Name = 'SR Watson' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Match = T2.Player_Id", "source_tables": ["match", "player"]}, "evidence": ""}
{"sample_id": 1910, "db_id": "soccer_2016", "final": {"question": "Identify by their ID all the overs in which the player with ID 7 was on strike.", "sql": "SELECT DISTINCT Over_Id FROM Ball_by_Ball WHERE Striker = 7", "source_tables": ["ball_by_ball"]}, "evidence": "Identify by their ID all the overs refers to Over_Id; player with ID 7 was on strike refers to Striker = 7"}
{"sample_id": 1963, "db_id": "soccer_2016", "final": {"question": "Who is the youngest player to have won the Purple Cap?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Season AS T2 ON T1.Player_Id = T2.Purple_Cap ORDER BY T2.Season_Year - SUBSTR(T1.DOB, 1, 4) LIMIT 1", "source_tables": ["season", "player"]}, "evidence": "Who refers to Player_Name; youngest player to have won the Purple Cap refers to min(subtract(Season_Year, DOB))"}
{"sample_id": 1950, "db_id": "soccer_2016", "final": {"question": "What is the date of the match that has the highest wager on the final result of a game?", "sql": "SELECT Match_Date FROM \"Match\" ORDER BY Win_Margin DESC LIMIT 1", "source_tables": ["match"]}, "evidence": "date of the match refers to Match_Date; highest wager refers to max(Win_Margin)"}
{"sample_id": 1824, "db_id": "soccer_2016", "final": {"question": "List the id of the player who won the Orange Cap for 2 consecutive seasons.", "sql": "SELECT Orange_Cap FROM Season GROUP BY Orange_Cap HAVING COUNT(Season_Year) > 1", "source_tables": ["season"]}, "evidence": "id of the player who won the Orange Cap refers to Orange_Cap; for 2 consecutive seasons refers to count(Season_Year) > 1"}
{"sample_id": 1855, "db_id": "soccer_2016", "final": {"question": "How many overs were there in the first innings of match ID \"335996\"?", "sql": "SELECT COUNT(Over_Id) FROM Ball_by_Ball WHERE Match_Id = 335996 AND Innings_No = 1", "source_tables": ["ball_by_ball"]}, "evidence": "the first innings refers to Innings_No = 1; match ID \"335996\" refers to Match_Id = 335996"}
{"sample_id": 1916, "db_id": "soccer_2016", "final": {"question": "What is the name of the player who has been chosen the most times for 'Man of the Series'?", "sql": "SELECT T3.Player_Name FROM Season AS T1 INNER JOIN Match AS T2 ON T1.Man_of_the_Series = T2.Man_of_the_Match INNER JOIN Player AS T3 ON T2.Man_of_the_Match = T3.Player_Id GROUP BY T3.Player_Name ORDER BY COUNT(T1.Man_of_the_Series) DESC LIMIT 1", "source_tables": ["season", "match", "player"]}, "evidence": "name of the player refers to Player_Name; most times for 'Man of the Series' refers to max(count(Man_of_the_Match))"}
{"sample_id": 2001, "db_id": "soccer_2016", "final": {"question": "How many players were born in 1970?", "sql": "SELECT COUNT(Player_Name) FROM Player WHERE DOB LIKE '1970%'", "source_tables": ["player"]}, "evidence": "born in 1970 refers to DOB like '1970%';"}
{"sample_id": 1864, "db_id": "soccer_2016", "final": {"question": "Among the players who were born in 1977, provide names and birthdates of the players from England.", "sql": "SELECT T2.Player_Name, T2.DOB FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.DOB LIKE '1977%' AND T1.Country_Name = 'England'", "source_tables": ["player", "country"]}, "evidence": "born in 1977 refers to DOB LIKE '1977%'; name refers to Player_Name; birthdate refers to DOB; England refers to Country_Name = 'England'"}
{"sample_id": 1948, "db_id": "soccer_2016", "final": {"question": "What is the id of the team with the highest number of matches won?", "sql": "SELECT Match_Id FROM \"Match\" ORDER BY Match_Winner DESC LIMIT 1", "source_tables": ["match"]}, "evidence": "id of the team refers to Team_Id; highest number of matches won refers to max(count(Match_Winner))"}
{"sample_id": 1932, "db_id": "soccer_2016", "final": {"question": "What is the total number of runs scored by the batsmen during the 2nd inning of the match ID 335988?", "sql": "SELECT SUM(Runs_Scored) FROM Batsman_Scored WHERE Match_Id = 335988 AND Innings_No = 2", "source_tables": ["batsman_scored"]}, "evidence": "number of runs refers to Runs_Scored; 2nd inning refers to Innings_No = 2"}
{"sample_id": 1951, "db_id": "soccer_2016", "final": {"question": "Which season has the fewest number of matches?", "sql": "SELECT Season_Id FROM \"Match\" GROUP BY Season_Id ORDER BY COUNT(Match_Id) LIMIT 1", "source_tables": ["match"]}, "evidence": "fewest number of matches refers to min(count(Match_Id))"}
{"sample_id": 1972, "db_id": "soccer_2016", "final": {"question": "How many matches did Mohammad Hafeez play?", "sql": "SELECT SUM(CASE WHEN T2.Player_Name = 'Mohammad Hafeez' THEN 1 ELSE 0 END) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id", "source_tables": ["player_match", "player"]}, "evidence": "Mohammad Hafeez refers to Player_Name = 'Mohammad Hafeez';"}
{"sample_id": 1982, "db_id": "soccer_2016", "final": {"question": "Name the teams played in a match which resulted in a tie in 2015.", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 OR T1.Team_Id = T2.Team_2 INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE SUBSTR(T2.Match_Date, 1, 4) = '2015' AND T3.Win_Type = 'Tie' LIMIT 1", "source_tables": ["win_by", "match", "team"]}, "evidence": "resulted in a tie refers to Win_Type = 'Tie'; in 2015 refers to SUBSTR(Match_Date, 1, 4) = 2015"}
{"sample_id": 1969, "db_id": "soccer_2016", "final": {"question": "Calculate the win rate of the toss-winners in 2012.", "sql": "SELECT CAST(SUM(CASE WHEN Toss_Winner = Match_Winner THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Match_Date LIKE '2012%' THEN 1 ELSE 0 END) FROM \"Match\"", "source_tables": ["match"]}, "evidence": "in 2012 refers to Match_Date like '2012%'; win rate refers to DIVIDE(COUNT(Toss_Winner = Match_Winner), COUNT(Match_Date like '2012%'))"}
{"sample_id": 1812, "db_id": "soccer_2016", "final": {"question": "Give the date of birth of the 2014 Orange Cap winner.", "sql": "SELECT T2.DOB FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id WHERE T1.Season_Year = 2014 AND T1.Orange_Cap IS NOT NULL", "source_tables": ["season", "player"]}, "evidence": "date of birth refers to DOB; 2014 refers to Season_Year = 2014; Orange Cap winner refers to Orange_Cap IS NOT NULL"}
{"sample_id": 1885, "db_id": "soccer_2016", "final": {"question": "List down all of the venues in Mumbai.", "sql": "SELECT T2.Venue_Name FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id WHERE T1.City_Name = 'Mumbai'", "source_tables": ["city", "venue"]}, "evidence": "venues refers to Venue_Name; Mumbai refers to City_Name = 'Mumbai'"}
{"sample_id": 1937, "db_id": "soccer_2016", "final": {"question": "Which team wins the toss during the match ID 336011, and can you tell me whether they decided to bat or field?", "sql": "SELECT T2.Toss_Name, T1.Toss_Decide, T1.Toss_Winner FROM \"Match\" AS T1 INNER JOIN Toss_Decision AS T2 ON T1.Toss_Decide = T2.Toss_Id WHERE T1.Match_Id = '336011'", "source_tables": ["match", "toss_decision"]}, "evidence": "wins the toss refers to Toss_Winner; whether they decided to bat or field refers to Toss_Name"}
{"sample_id": 1801, "db_id": "soccer_2016", "final": {"question": "What is the role of SC Ganguly in the match on 2008/4/18?", "sql": "SELECT T2.Role_Id FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id INNER JOIN Match AS T4 ON T2.Match_Id = T4.Match_Id WHERE T1.Player_Name = 'SC Ganguly' AND T4.Match_Date = '2008-04-18'", "source_tables": ["rolee", "match", "player_match", "player"]}, "evidence": "role refers to of Role_Id; SC Ganguly refers to Player_Name = 'SC Ganguly'; on 2008/4/18 refers to Match_Date = '2008-04-18'"}
{"sample_id": 2039, "db_id": "soccer_2016", "final": {"question": "In the match ID 419135, who won by runs?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Win_By AS T3 ON T2.win_type = T3.win_id WHERE T2.Match_Id = 419135", "source_tables": ["win_by", "match", "team"]}, "evidence": "who refers to Team_Name"}
{"sample_id": 1826, "db_id": "soccer_2016", "final": {"question": "How many umpires are from South Africa?", "sql": "SELECT SUM(CASE WHEN T1.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN Umpire AS T2 ON T1.Country_ID = T2.Umpire_Country", "source_tables": ["umpire", "country"]}, "evidence": "South Africa refers to Country_Name = 'South Africa'"}
{"sample_id": 2038, "db_id": "soccer_2016", "final": {"question": "Who is the winning team in a match held on April 26, 2009 with a winning margin of 6 points?", "sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner WHERE T2.Win_Margin = 6 AND T2.Match_Date = '2009-04-26'", "source_tables": ["match", "team"]}, "evidence": "winning margin of 6 points refers to Win_Margin = 6; held on April 26, 2009 refers to Match_Date = '2009-04-26'"}
{"sample_id": 1990, "db_id": "soccer_2016", "final": {"question": "How many venues are located at Centurion, South Africa?", "sql": "SELECT COUNT(T1.Venue_name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id INNER JOIN Country AS T3 ON T2.Country_Id = T3.Country_Id WHERE T3.country_name = 'South Africa' AND T2.city_name = 'Centurion'", "source_tables": ["city", "country", "venue"]}, "evidence": "venues are located at Centurion refers to city_name = 'Centurion'; South Africa refers to country_name = 'South Africa'"}
{"sample_id": 1945, "db_id": "soccer_2016", "final": {"question": "Write down the player names and IDs of the English umpires.", "sql": "SELECT T1.Umpire_Name, T1.Umpire_Id FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'England'", "source_tables": ["umpire", "country"]}, "evidence": "English umpires refers to Country_Name = 'England'"}
{"sample_id": 1956, "db_id": "soccer_2016", "final": {"question": "List the names of all the umpires from England.", "sql": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN country AS T2 ON T2.Country_Id = T1.Umpire_Country WHERE T2.Country_Name = 'England'", "source_tables": ["umpire", "country"]}, "evidence": "from England refers to Country_Name = 'England'"}
{"sample_id": 1828, "db_id": "soccer_2016", "final": {"question": "In which country do the majority of the players are from?", "sql": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name GROUP BY T2.Country_Name ORDER BY COUNT(T2.Country_Name) DESC LIMIT 1", "source_tables": ["player", "country"]}, "evidence": "country refers to Country_Name; the majority of the players\u00a0 refers to max(count(Country_Name))"}
{"sample_id": 1825, "db_id": "soccer_2016", "final": {"question": "How many matches were played in Season 7?", "sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE Season_Id = 7", "source_tables": ["match"]}, "evidence": "Season 7 refers to Season_Id = 7"}
{"sample_id": 1975, "db_id": "soccer_2016", "final": {"question": "What is the ratio of players with batting hands of left and right?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id", "source_tables": ["batting_style", "player"]}, "evidence": "batting hands of left refers to Batting_hand = 'Left-hand bat'; right refers to Batting_hand = 2; ratio refers to DIVIDE(COUNT(Batting_hand = 'Right-hand bat'), COUNT(Batting_hand = 2))"}
{"sample_id": 1903, "db_id": "soccer_2016", "final": {"question": "Which player became the man of the series in the year 2012? Give the name and country of this player.", "sql": "SELECT T2.Player_Name, T3.Country_Name FROM Season AS T1 INNER JOIN Player AS T2 ON T1.Man_of_the_Series = T2.Player_Id INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T1.Season_Year = 2012", "source_tables": ["season", "country", "player"]}, "evidence": "year 2012 refers to Season_Year = 2012; name of player refers to Player_Name.; country of this player refers to Country_Name"}
{"sample_id": 1820, "db_id": "soccer_2016", "final": {"question": "Who is the oldest player?", "sql": "SELECT Player_Name FROM Player ORDER BY DOB ASC LIMIT 1", "source_tables": ["player"]}, "evidence": "name of the player refers to Player_Name; the oldest refers to min(DOB)"}
{"sample_id": 1865, "db_id": "soccer_2016", "final": {"question": "Who got the Man of the Series Award in 2010?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T2.Man_of_the_Match = T1.Player_Id INNER JOIN Season AS T3 ON T3.Season_Id = T2.Season_Id WHERE T3.Season_Year = 2010 GROUP BY T1.Player_Name", "source_tables": ["season", "match", "player"]}, "evidence": "player's name refers to Player_Name; got the Man of the Series Award refers to Man_of_the_Match = Player_Id; in 2010 refers to Season_Year = 2010"}
{"sample_id": 1852, "db_id": "soccer_2016", "final": {"question": "Provide the point of the winning margin in a match between Mumbai Indians and Royal Challengers Bangalore on May 28, 2008.", "sql": "SELECT T1.Win_Margin FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE (T2.Team_Name = 'Mumbai Indians' AND T3.Team_Name = 'Royal Challengers Bangalore' AND T1.Match_Date = '2008-05-28') OR (T2.Team_Name = 'Royal Challengers Bangalore' AND T3.Team_Name = 'Mumbai Indians' AND T1.Match_Date = '2008-05-28')", "source_tables": ["match", "team"]}, "evidence": "point of the winning margin refers to Win_Margin; Mumbai Indians refers to Team_Name = 'Mumbai Indians'; Royal Challengers Bangalore refers to Team_Name = 'Royal Challengers Bangalore'; on May 28 2008 refers to Match_Date = '2008-05-28'"}
{"sample_id": 1938, "db_id": "soccer_2016", "final": {"question": "Among the South African players, how many were born before 4/11/1980?", "sql": "SELECT SUM(CASE WHEN T1.DOB < '1980-4-11' THEN 1 ELSE 0 END) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'South Africa'", "source_tables": ["country", "player"]}, "evidence": "South African players refers to Country_Name = 'South Africa'; born before 4/11/1980 refers to DOB < '1980-4-11'"}
{"sample_id": 1884, "db_id": "soccer_2016", "final": {"question": "What is the city of M Chinnaswamy Stadium?", "sql": "SELECT T1.City_Name FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id WHERE T2.Venue_Name = 'M Chinnaswamy Stadium'", "source_tables": ["city", "venue"]}, "evidence": "city refers to City_Name; M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'"}
{"sample_id": 1822, "db_id": "soccer_2016", "final": {"question": "How many players were born in the 90s?", "sql": "SELECT COUNT(Player_Id) AS cnt FROM Player WHERE DOB BETWEEN '1990-01-01' AND '1999-12-31'", "source_tables": ["player"]}, "evidence": "born in the 90s refers to DOB > = '1990-01-01' AND DOB < = '1999-12-31'"}
{"sample_id": 1998, "db_id": "soccer_2016", "final": {"question": "Among the matches in 2013, what is the percentage of winning of the team \"Mumbai Indians\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Match_Winner = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date LIKE '2013%'", "source_tables": ["match", "team"]}, "evidence": "in 2013 refers to Match_Date like '2013%'; winning of the team \"Mumbai Indians\" refers to Match_Winner = 7; percentage refers to DIVIDE(COUNT(Match_Winner = 7), COUNT(Match_Winner))"}
{"sample_id": 1985, "db_id": "soccer_2016", "final": {"question": "Count the matches with a total of two innings.", "sql": "SELECT COUNT(Match_Id) FROM Wicket_Taken WHERE innings_no = 2", "source_tables": ["wicket_taken"]}, "evidence": "total of two innings refers to innings_no = 2;"}
{"sample_id": 2004, "db_id": "soccer_2016", "final": {"question": "What is the city name of country ID 3?", "sql": "SELECT City_Name FROM City WHERE Country_ID = 3", "source_tables": ["city"]}, "evidence": ""}
{"sample_id": 1919, "db_id": "soccer_2016", "final": {"question": "List all Zimbabwean players.", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'Zimbabwea'", "source_tables": ["country", "player"]}, "evidence": "Zimbabwean refers to Country_Name = 'Zimbabwea'; players refers to Player_Name"}
{"sample_id": 1836, "db_id": "soccer_2016", "final": {"question": "How many players with left-hand batting style are from India?", "sql": "SELECT SUM(CASE WHEN T1.Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS cnt FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T1.Batting_Id = T2.Batting_hand INNER JOIN Country AS T3 ON T2.Country_Name = T3.Country_Id WHERE T3.Country_Name = 'India'", "source_tables": ["country", "batting_style", "player"]}, "evidence": "left-hand batting style refers to Batting_hand = 'Left-hand bat'; India refers to Country_Name = 'India'"}
{"sample_id": 1925, "db_id": "soccer_2016", "final": {"question": "In how many games in which the batting team was the Delhi Daredevils were no runs scored?", "sql": "SELECT COUNT(T1.Runs_Scored) FROM Batsman_Scored AS T1 INNER JOIN Ball_by_Ball AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Team AS T4 ON T3.Team_1 = T4.Team_Id WHERE T2.Team_Batting = 1 OR T2.Team_Batting = 2 AND T4.Team_Name = 'Delhi Daredevils'", "source_tables": ["match", "ball_by_ball", "team", "batsman_scored"]}, "evidence": "batting team was the Delhi Daredevils refers to Team_Name = 'Delhi Daredevils' and Team_1 = Team_Id where Team_Batting = 1 or Team_2 = Team_Id where Team_Batting = 2; no runs scored refers to Runs_Scored = 0"}
{"sample_id": 1846, "db_id": "soccer_2016", "final": {"question": "List the cities located in U.A.E.", "sql": "SELECT T1.City_Name FROM City AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Country_id WHERE T2.Country_Name = 'U.A.E'", "source_tables": ["city", "country"]}, "evidence": "city refers to City_Name; U.A.E refers to Country_Name = 'U.A.E'"}
{"sample_id": 1806, "db_id": "soccer_2016", "final": {"question": "How many times has Sunrisers Hyderabad been the toss winner of a game?", "sql": "SELECT SUM(CASE WHEN Toss_Winner = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad' ) THEN 1 ELSE 0 END) FROM \"Match\"", "source_tables": ["match", "team"]}, "evidence": "Sunrisers Hyderabad refers to Team_Name = 'Sunrisers Hyderabad'; time of toss winner refers to count(Toss_Winner)"}
{"sample_id": 1912, "db_id": "soccer_2016", "final": {"question": "How many games were played in March 2010?", "sql": "SELECT SUM(CASE WHEN Match_Date LIKE '2010-03%' THEN 1 ELSE 0 END) FROM \"Match\"", "source_tables": ["match"]}, "evidence": "were played in March 2010 refers to Match_Date = '2010-03%'"}
{"sample_id": 1894, "db_id": "soccer_2016", "final": {"question": "List the name of the players born between 1970 and 1990 in descending order of age.", "sql": "SELECT Player_Name FROM Player WHERE DOB BETWEEN '1970-01-01' AND '1990-12-31' ORDER BY DOB DESC", "source_tables": ["player"]}, "evidence": "name of the players refers to Player_Name; born between 1970 and 1990 refers to DOB between '1970-01-01' and '1990-12-31'"}
{"sample_id": 1966, "db_id": "soccer_2016", "final": {"question": "List the ball IDs, scores, and innings numbers in the over ID 20 of match ID \"335988\".", "sql": "SELECT Ball_Id, Runs_Scored, Innings_No FROM Batsman_Scored WHERE Match_Id = 335988 AND Over_Id = 20", "source_tables": ["batsman_scored"]}, "evidence": "innings numbers refers to Innings_No"}
{"sample_id": 1790, "db_id": "soccer_2016", "final": {"question": "Please list the IDs of all the matches in the year 2008.", "sql": "SELECT Match_Id FROM \"Match\" WHERE SUBSTR(Match_Date, 1, 4) = '2008'", "source_tables": ["match"]}, "evidence": "ID of matches refers to Match_Id; in the year 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008'"}
{"sample_id": 1930, "db_id": "soccer_2016", "final": {"question": "What is the name of the youngest player?", "sql": "SELECT Player_Name FROM Player ORDER BY DOB DESC LIMIT 1", "source_tables": ["player"]}, "evidence": "name refers to Player_Name; youngest player refers to max(DOB)"}
{"sample_id": 1810, "db_id": "soccer_2016", "final": {"question": "State the name of captain keeper of the match no.419117.", "sql": "SELECT T3.Player_Name FROM Player_Match AS T1 INNER JOIN Rolee AS T2 ON T1.Role_Id = T2.Role_Id INNER JOIN Player AS T3 ON T1.Player_Id = T3.Player_Id WHERE T1.Match_Id = '419117' AND T2.Role_Desc = 'CaptainKeeper'", "source_tables": ["rolee", "player_match", "player"]}, "evidence": "name refers to Player_Name; captain keeper refers to Role_Desc = 'CaptainKeeper'; match no.419117 refers to Match_Id = '419117'"}
{"sample_id": 1880, "db_id": "soccer_2016", "final": {"question": "List down names of teams that have played as second team against Pune Warriors.", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_2 WHERE T1.Team_1 = ( SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors' ) GROUP BY T2.Team_Name", "source_tables": ["match", "team"]}, "evidence": "names of teams refers to Team_Name; second team refers to Team_2; Pune Warriors refers to Team_Name = 'Pune Warriors'"}
{"sample_id": 1981, "db_id": "soccer_2016", "final": {"question": "Provide match ID which had the extra type of penalty.", "sql": "SELECT T1.Match_Id FROM Extra_Runs AS T1 INNER JOIN Extra_Type AS T2 ON T1.Extra_Type_Id = T2.Extra_Id WHERE T2.Extra_Name = 'penalty'", "source_tables": ["extra_type", "extra_runs"]}, "evidence": "extra type of penalty refers to Extra_Name = 'penalty';"}
{"sample_id": 2016, "db_id": "soccer_2016", "final": {"question": "What are the names of players in team 1?", "sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id WHERE T3.Team_Id = 1 GROUP BY T1.Player_Name", "source_tables": ["player_match", "player", "team"]}, "evidence": "in team 1 refers to Team_Id = 1; name of player refers to Player_Name;"}
{"sample_id": 1921, "db_id": "soccer_2016", "final": {"question": "How many games were not won by runs?", "sql": "SELECT SUM(CASE WHEN T2.Win_Type != 'runs' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id", "source_tables": ["win_by", "match"]}, "evidence": "not won by runs refers to Win_Type ! = 'runs'"}
{"sample_id": 2002, "db_id": "soccer_2016", "final": {"question": "How many players were born in the 80s and have bowling skill of 2?", "sql": "SELECT COUNT(Player_Name) FROM Player WHERE DOB LIKE '198%' AND Bowling_skill = 2", "source_tables": ["player"]}, "evidence": "born in the 80s refers to DOB like '198%'; have bowling skill of 2 refers to Bowling_skill = 2;"}
{"sample_id": 1879, "db_id": "soccer_2016", "final": {"question": "How many matches have Mumbai Indians won?", "sql": "SELECT SUM(CASE WHEN T2.Team_Name = 'Mumbai Indians' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner", "source_tables": ["match", "team"]}, "evidence": "Mumbai Indians refers to Team_Name = 'Mumbai Indians'; won refers to Match_Winner"}
{"sample_id": 1821, "db_id": "soccer_2016", "final": {"question": "How many matches were played on May 2008?", "sql": "SELECT SUM(CASE WHEN SUBSTR(Match_Date, 7, 1) = '5' THEN 1 ELSE 0 END) FROM \"Match\" WHERE SUBSTR(Match_Date, 1, 4) = '2008'", "source_tables": ["match"]}, "evidence": "in May 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'"}
{"sample_id": 1917, "db_id": "soccer_2016", "final": {"question": "In what year did SP Narine win the Orange Cap?", "sql": "SELECT T4.Season_Year, T4.Orange_Cap FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id INNER JOIN Season AS T4 ON T3.Season_Id = T4.Season_Id WHERE T1.Player_Name = 'SP Narine' GROUP BY T4.Season_Year, T4.Orange_Cap", "source_tables": ["season", "match", "player_match", "player"]}, "evidence": "year refers to Season_Year"}
{"sample_id": 1845, "db_id": "soccer_2016", "final": {"question": "How many of the matches are Superover?", "sql": "SELECT SUM(CASE WHEN T2.Outcome_Type = 'Superover' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Outcome AS T2 ON T2.Outcome_Id = T1.Outcome_type", "source_tables": ["match", "outcome"]}, "evidence": "Superover refers to Outcome_Type = 'Superover'"}
{"sample_id": 1891, "db_id": "soccer_2016", "final": {"question": "Calculate the average runs scored during the first half of all first innings.", "sql": "SELECT CAST(SUM(CASE WHEN 1 < Over_Id AND Over_Id < 25 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(Runs_Scored) FROM Batsman_Scored WHERE Innings_No = 1", "source_tables": ["batsman_scored"]}, "evidence": "first half refers to 1 < Over_Id and Over_Id < 25; average = divide(sum(Over_Id) when 1 < Over_Id and Over_Id < 25, sum(Runs_Scored)) as percentage; first innings refers to Innings_No = 1"}
{"sample_id": 1842, "db_id": "soccer_2016", "final": {"question": "Give the country where St. George's Park is located.", "sql": "SELECT T3.Country_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Country AS T3 ON T3.Country_Id = T2.Country_id WHERE T1.Venue_Name = 'St George''s Park'", "source_tables": ["city", "country", "venue"]}, "evidence": "country refers to Country_Name; St. George's Park refers to Venue_Name = 'St George''s Park'"}
{"sample_id": 1882, "db_id": "soccer_2016", "final": {"question": "What are the match IDs that were played at Brabourne Stadium?", "sql": "SELECT T1.Match_Id FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id WHERE T2.Venue_Name = 'Brabourne Stadium'", "source_tables": ["match", "venue"]}, "evidence": "at Brabourne Stadium refers to Venue_Name = 'Brabourne Stadium'"}
{"sample_id": 1823, "db_id": "soccer_2016", "final": {"question": "How many matches did Team 10 play in 2012?", "sql": "SELECT SUM(CASE WHEN Team_1 = 10 OR Team_2 = 10 THEN 1 ELSE 0 END) FROM \"Match\" WHERE SUBSTR(Match_Date, 1, 4) = '2012'", "source_tables": ["match"]}, "evidence": "Team 10 refers to Team_1 = 10 OR Team_2 = 10; in 2012 refers to SUBSTR(Match_Date, 1, 4) = '2012'"}
{"sample_id": 2035, "db_id": "soccer_2016", "final": {"question": "What is the percentage of matches that are won by runs?", "sql": "SELECT CAST(SUM(CASE WHEN T1.win_type = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Win_Type) FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id", "source_tables": ["win_by", "match"]}, "evidence": "won by runs refers to win_type = 1; percentage refers to DIVIDE(COUNT(win_type = 1), COUNT(Win_Type)) * 100"}
{"sample_id": 1830, "db_id": "soccer_2016", "final": {"question": "Which season played the highest number of matches at M Chinnaswamy Stadium?", "sql": "SELECT T1.Season_Id FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'M Chinnaswamy Stadium' GROUP BY T1.Season_Id ORDER BY COUNT(T1.Season_Id) DESC LIMIT 1", "source_tables": ["match", "venue"]}, "evidence": "season refers to Season_Id; the highest number of matches refers to max(count(Season_Id)); M Chinnaswamy Stadium refers to Venue_Name = 'M Chinnaswamy Stadium'"}
{"sample_id": 1837, "db_id": "soccer_2016", "final": {"question": "Who is the player that has the highest number of roles as a captain for Deccan Chargers?", "sql": "SELECT T4.Player_Name FROM Team AS T1 INNER JOIN Player_Match AS T2 ON T1.Team_id = T2.Team_id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id INNER JOIN Player AS T4 ON T2.Player_Id = T4.Player_Id WHERE T1.Team_Name = 'Deccan Chargers' AND T1.Team_Id = 8 AND T3.Role_Desc = 'Captain' AND T3.Role_Id = 1 GROUP BY T4.Player_Id ORDER BY COUNT(T3.Role_Id) DESC LIMIT 1", "source_tables": ["rolee", "player", "player_match", "team"]}, "evidence": "name of the player refers to Player_Name; the highest number of roles refers to max(count(Role_Id)); as a captain refers to Role_Desc = 'Captain'; Deccan Chargers refers to Team_Name = 'Deccan Chargers'"}
{"sample_id": 2030, "db_id": "soccer_2016", "final": {"question": "Count the matches that were won by wickets in all season.", "sql": "SELECT COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T2.Win_type = 'wickets'", "source_tables": ["win_by", "match"]}, "evidence": "won by wickets refers to Win_type = 'wickets';"}
{"sample_id": 1839, "db_id": "soccer_2016", "final": {"question": "Name the player who is born on July 7, 1981.", "sql": "SELECT Player_name FROM Player WHERE DOB = '1981-07-07'", "source_tables": ["player"]}, "evidence": "name of the player refers to Player_Name; born on July 7 1981 refers to DOB = '1981-07-07'"}
{"sample_id": 1983, "db_id": "soccer_2016", "final": {"question": "Calculate the average players out in the first innings per match. How many of them were out by the leg before wicket?", "sql": "SELECT CAST(COUNT(T1.Player_Out) AS REAL) / COUNT(T1.Match_Id), SUM(CASE WHEN T2.Out_Name = 'lbw' THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T1.Kind_Out = T2.Out_Id WHERE T1.Innings_No = 2", "source_tables": ["wicket_taken", "out_type"]}, "evidence": "out by the leg refers to Out_Name = 'lbw'; out in the first innings refers to Innings_No = 2;"}
{"sample_id": 2023, "db_id": "soccer_2016", "final": {"question": "Who is the youngest player and which city did he/she come from?", "sql": "SELECT T3.City_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id INNER JOIN City AS T3 ON T2.Country_Id = T3.Country_Id ORDER BY T1.DOB LIMIT 1", "source_tables": ["country", "city", "player"]}, "evidence": "youngest player refers to MIN(DOB); city refers to City_Name"}
{"sample_id": 1886, "db_id": "soccer_2016", "final": {"question": "List down all of the winning teams' IDs that played in St George's Park.", "sql": "SELECT T2.Match_Winner FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Venue_Name LIKE 'St George%'", "source_tables": ["match", "venue"]}, "evidence": "winning teams' refers to Match_Winner; played in St George's Park refers to Venue_Name like 'St George%'"}
{"sample_id": 1841, "db_id": "soccer_2016", "final": {"question": "List the first team's name in the match with the highest winning margin.", "sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 ORDER BY T1.Win_Margin DESC LIMIT 1", "source_tables": ["match", "team"]}, "evidence": "team's name refers to Team_Name; first team refers to Team_Id = Team_1; the highest winning margin refers to max(Win_Margin)"}
{"sample_id": 1933, "db_id": "soccer_2016", "final": {"question": "Between match nos. 335989 and 337000, how many times did a batsman score more than 3 runs during over no. 1, ball no. 1, and inning no. 1 of the matches?", "sql": "SELECT SUM(CASE WHEN Runs_Scored > 3 THEN 1 ELSE 0 END) FROM Batsman_Scored WHERE 335989 < Match_Id < 337000 AND Innings_No = 1 AND Over_Id = 1 AND Ball_Id = 1", "source_tables": ["batsman_scored"]}, "evidence": "Between match no. 335989 and 337000 refers to 335989 < Match_Id < 337000; batsman score more than 3 runs during over no. 1, ball no. 1, and inning no. 1 of the matches refers to Runs_Scored > 3 and\u00a0 Over_Id = 1 and Ball_Id = 1 and Innings_No = 1"}
{"sample_id": 2067, "db_id": "music_tracker", "final": {"question": "Find the average number of downloads for Single-Tables released by '2Pac' between 2001 and 2013.", "sql": "SELECT AVG(totalSnatched) FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'Single' AND groupYear BETWEEN 2001 AND 2013", "source_tables": ["torrents"]}, "evidence": "2Pac is an artist; releaseType = 'single'; between 2001 and 2013 refers to groupYear between 2001 and 2013; average number of downloads = AVG(totalSnatched);"}
{"sample_id": 2047, "db_id": "music_tracker", "final": {"question": "What is the tag of the album with the highest amount of downloads?", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "album refers to releaseType; the highest amount of downloads refers to MAX(totalSnatched);"}
{"sample_id": 2064, "db_id": "music_tracker", "final": {"question": "Provide the name of the artist who released his or her Single-Table in 2012 with the highest number of downloads. Name the Single-Table title as well.", "sql": "SELECT artist, groupName FROM torrents WHERE groupYear = 2012 AND releaseType LIKE 'Single' ORDER BY totalSnatched DESC LIMIT 1", "source_tables": ["torrents"]}, "evidence": "title refers to groupName; the highest number of downloads refers to MAX(totalSnatched where groupYear = 2012 and releaseType = 'single');"}
{"sample_id": 2068, "db_id": "music_tracker", "final": {"question": "Provide the title, release year and the tag associated with the live album that has the highest number of downloads?", "sql": "SELECT T1.groupName, T1.groupYear, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'live album' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "release year refers to groupYear; title of live album refers to groupName where releaseType = 'live album'; the highest number of downloads refers to MAX(totalSnatched);"}
{"sample_id": 2057, "db_id": "music_tracker", "final": {"question": "How many tags does the release \"city funk\" have\uff1f", "sql": "SELECT COUNT(T2.tag) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'city funk'", "source_tables": ["torrents", "tags"]}, "evidence": "release \"city funk\" refers to groupName = 'city funk';"}
{"sample_id": 2081, "db_id": "music_tracker", "final": {"question": "How many singles were released in 1979?", "sql": "SELECT COUNT(releaseType) FROM torrents WHERE releaseType LIKE 'single' AND groupYear = 1979", "source_tables": ["torrents"]}, "evidence": "releaseType = 'single'; groupYear = 1979;"}
{"sample_id": 2084, "db_id": "music_tracker", "final": {"question": "Please list all tags of kurtis blow from 2000 to 2010.", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 2000 AND 2010 AND T1.artist LIKE 'kurtis blow'", "source_tables": ["torrents", "tags"]}, "evidence": "kurtis blow is an artist; from 2000 to 2010 refers to groupYear between 2000 and 2010;"}
{"sample_id": 2051, "db_id": "music_tracker", "final": {"question": "What are the tags of the top 5 least downloaded live albums?", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched LIMIT 5", "source_tables": ["torrents", "tags"]}, "evidence": "least downloaded album refers to MIN(totalSnatched where releaseType = 'album');"}
{"sample_id": 2050, "db_id": "music_tracker", "final": {"question": "Name all the release titles of the \"ep's\" under the alternative tag.", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'alternative' AND T1.releaseType = 'ep'", "source_tables": ["torrents", "tags"]}, "evidence": "release titles of the \"ep's\" refer to groupName where releaseType = 'ep';"}
{"sample_id": 2055, "db_id": "music_tracker", "final": {"question": "Please list the releases that have been downloaded for more than 20000 times.", "sql": "SELECT groupName FROM torrents WHERE totalSnatched > 20000", "source_tables": ["torrents"]}, "evidence": "releases refer to groupName; downloaded for more than 20000 times refers to totalSnatched > 20000;"}
{"sample_id": 2046, "db_id": "music_tracker", "final": {"question": "How many times was the album released by blowfly in 1980 downloaded?", "sql": "SELECT totalSnatched FROM torrents WHERE artist LIKE 'blowfly' AND groupYear = 1980", "source_tables": ["torrents"]}, "evidence": "blowfly is an artist; groupYear = 1980; album refers to releaseType; downloaded refers to totalSnatched;"}
{"sample_id": 2077, "db_id": "music_tracker", "final": {"question": "Which artist has id \"16\"? Provide her or his tag genre.", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.id = 16", "source_tables": ["torrents", "tags"]}, "evidence": "FALSE;"}
{"sample_id": 2053, "db_id": "music_tracker", "final": {"question": "How many releases are tagged \"1980s\"?", "sql": "SELECT COUNT(id) FROM tags WHERE tag LIKE '1980s'", "source_tables": ["tags"]}, "evidence": "tag = '1980s';"}
{"sample_id": 2072, "db_id": "music_tracker", "final": {"question": "Among the artists from 1980 to 1982. Which artist was tagged as \"disco\"?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'disco' AND T1.groupYear BETWEEN 1980 AND 1982", "source_tables": ["torrents", "tags"]}, "evidence": "from 1980 to 1982 refers to groupYear between 1980 and 1982; tag = 'disco';"}
{"sample_id": 2083, "db_id": "music_tracker", "final": {"question": "How many christmas albums were released in 2004?", "sql": "SELECT COUNT(T1.id) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'christmas' AND T1.groupYear = 2004 AND T1.releaseType LIKE 'album'", "source_tables": ["torrents", "tags"]}, "evidence": "album refers to releaseType; groupYear = 2004; tag = 'christmas';"}
{"sample_id": 2088, "db_id": "music_tracker", "final": {"question": "Which artists have released singles with the tag 1970s?", "sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' AND T2.tag LIKE '1970s'", "source_tables": ["torrents", "tags"]}, "evidence": "releaseType = 'single';"}
{"sample_id": 2060, "db_id": "music_tracker", "final": {"question": "How many releases by the artist michael jackson are tagged \"pop\"?", "sql": "SELECT COUNT(T1.groupName) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'pop' AND T1.artist = 'michael jackson'", "source_tables": ["torrents", "tags"]}, "evidence": "tag = 'pop';"}
{"sample_id": 2063, "db_id": "music_tracker", "final": {"question": "Name the title of the top three releases with the highest number of downloads.", "sql": "SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 3", "source_tables": ["torrents"]}, "evidence": "title refers to groupName; the highest number of downloads refers to MAX(totalSnatched);"}
{"sample_id": 2079, "db_id": "music_tracker", "final": {"question": "List the name of artists who have released albums and mixtape from 1980 to 1985 in \"dance\" genre.", "sql": "SELECT COUNT(T1.artist) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'dance' AND T1.groupYear BETWEEN 1980 AND 1985 AND T1.releaseType LIKE 'album' OR T1.releaseType LIKE 'mixtape'", "source_tables": ["torrents", "tags"]}, "evidence": "albums and mixtape refer to releaseType; from 1980 to 1985 refers to groupYear between 1980 and 1985; tag = 'dance';"}
{"sample_id": 2048, "db_id": "music_tracker", "final": {"question": "What are the top 5 tags with the highest amount of downloads?", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched DESC LIMIT 5", "source_tables": ["torrents", "tags"]}, "evidence": "the highest amount of downloads refers to MAX(totalSnatched);"}
{"sample_id": 2058, "db_id": "music_tracker", "final": {"question": "Please list the titles of all the releases with the tag \"1980s\".", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s'", "source_tables": ["torrents", "tags"]}, "evidence": "titles refer to groupName;"}
{"sample_id": 2069, "db_id": "music_tracker", "final": {"question": "Provide the name of artists who released at least two bootlegs in 2016.", "sql": "SELECT artist FROM torrents WHERE groupYear = 2016 AND releaseType LIKE 'bootleg' GROUP BY artist HAVING COUNT(releaseType) > 2", "source_tables": ["torrents"]}, "evidence": "at least two bootlegs refer to COUNT(releaseType = 'bootleg')\u2265 2; groupYear = 2016;"}
{"sample_id": 2056, "db_id": "music_tracker", "final": {"question": "What are the tags of the release \"sugarhill gang\"?", "sql": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'sugarhill gang'", "source_tables": ["torrents", "tags"]}, "evidence": "release \"sugarhill gang\" refers to groupName = 'sugarhill gang';"}
{"sample_id": 2085, "db_id": "music_tracker", "final": {"question": "Which album title and tag that millie jackson released in 1980?", "sql": "SELECT T1.groupName, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 1980 AND T1.artist LIKE 'millie jackson' AND T1.releaseType LIKE 'album'", "source_tables": ["torrents", "tags"]}, "evidence": "millie jackson is an artist; album title refers to groupName where releaseType = 'album'; groupYear = 1980;"}
{"sample_id": 2071, "db_id": "music_tracker", "final": {"question": "Indicates groups with id from 10 to 20 with singles downloaded at least 20.", "sql": "SELECT groupName FROM torrents WHERE totalSnatched >= 20 AND releaseType LIKE 'single' AND id BETWEEN 10 AND 20", "source_tables": ["torrents"]}, "evidence": "releaseType = 'single'; downloaded at least 20 refers to totalSnatched \u2265 20; id from 10 to 20 refer to id between 10 and 20; groups refer to groupName;"}
{"sample_id": 2059, "db_id": "music_tracker", "final": {"question": "Among the releases with the tag \"1980s\", which one of them is the most downloaded? Please give its title.", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = '1980s' ORDER BY T1.totalSnatched DESC LIMIT 1", "source_tables": ["torrents", "tags"]}, "evidence": "title refers to groupName; the most downloaded refers to MAX(totalSnatched);"}
{"sample_id": 2086, "db_id": "music_tracker", "final": {"question": "Please list all release titles whose tag is jazz in 2005.", "sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 2005 AND T2.tag LIKE 'jazz'", "source_tables": ["torrents", "tags"]}, "evidence": "release titles refer to groupName; groupYear = 2005;"}
{"sample_id": 2146, "db_id": "world_development_indicators", "final": {"question": "What percentage of upper middle income countries which have the CO2 emissions from liquid fuel consumption (% of total)\n\nless than 80%?", "sql": "SELECT SUM(CASE WHEN T2.IndicatorName = 'CO2 emissions FROM liquid fuel consumption (% of total)' AND t2.Value < 80 THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.CountryCode) persent FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income'", "source_tables": ["country", "indicators"]}, "evidence": "IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; less than 80% implies Value<80%; IncomeGroup = 'Upper middle income'; DIVIDE(COUNT(CountryCode where IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; Value<80%; IncomeGroup = 'Upper middle income'), COUNT(CountryCode where IncomeGroup = 'Upper middle income'));"}
{"sample_id": 2192, "db_id": "world_development_indicators", "final": {"question": "What upper middle income country under East Asia & Pacific region which covers the topic about Social Protection & Labor: Migration\n? Indicate the short name of the said country.", "sql": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN footnotes AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T1.IncomeGroup = 'Upper middle income' AND T1.Region = 'East Asia & Pacific' AND T3.Topic = 'Social Protection & Labor: Migration'", "source_tables": ["footnotes", "series", "country"]}, "evidence": "upper middle income country refers to incomegroup = 'Upper middle income'"}
{"sample_id": 2147, "db_id": "world_development_indicators", "final": {"question": "What is indicator code of Rural population?", "sql": "SELECT DISTINCT IndicatorCode FROM Indicators WHERE IndicatorName = 'Rural population'", "source_tables": ["indicators"]}, "evidence": "IndicatorName = 'Rural population';"}
{"sample_id": 2139, "db_id": "world_development_indicators", "final": {"question": "Which country has the highest value of Merchandise imports by the reporting economy (current US$)?", "sql": "SELECT CountryName FROM Indicators WHERE IndicatorName = 'Merchandise imports by the reporting economy (current US$)' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "country refers to CountryName; the highest value implies MAX(Value); IndicatorName = 'Merchandise imports by the reporting economy (current US$)';"}
{"sample_id": 2103, "db_id": "world_development_indicators", "final": {"question": "For how many consecutive years did Aruba get a footnote on the series code BX.KLT.DINV.CD.WD?", "sql": "SELECT COUNT(T2.Year) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'BX.KLT.DINV.CD.WD'", "source_tables": ["footnotes", "country"]}, "evidence": "Aruba is the name of country where ShortName = 'Aruba'"}
{"sample_id": 2129, "db_id": "world_development_indicators", "final": {"question": "Please calculate the percentage of Sub-Saharan African countries which are in the Special trade system.", "sql": "SELECT  CAST(SUM(CASE WHEN Region = 'Sub-Saharan Africa' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) FROM Country WHERE SystemOfTrade = 'Special trade system'", "source_tables": ["country"]}, "evidence": "Sub-Saharan African is the name of the region; SystemOfTrade = 'Special trade system'; countries refer to CountryCode; DIVIDE(COUNT (CountryCode where SystemOfTrade = 'Special trade system' and Region = 'Sub-Saharan Africa'), COUNT(CountryCode where Region = 'Sub-Saharan Africa')) as percentage;"}
{"sample_id": 2095, "db_id": "world_development_indicators", "final": {"question": "Please list the descriptions of the series code SM.POP.TOTL for all the countries that are under the lending category of the International Development Associations.", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.LendingCategory = 'IDA' AND T2.Seriescode = 'SM.POP.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": "Countries are the Countrycode; International Development Associations refers to lendingcategory = 'IDA'"}
{"sample_id": 2241, "db_id": "world_development_indicators", "final": {"question": "For the country that has notes on the indicator Inflation, consumer prices, in which region is it in?", "sql": "SELECT T1.Region FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.IndicatorName = 'Inflation, consumer prices (annual %)'", "source_tables": ["series", "countrynotes", "country"]}, "evidence": "indicator Inflation, consumer prices refers to IndicatorName = 'Inflation, consumer prices (annual %)'"}
{"sample_id": 2106, "db_id": "world_development_indicators", "final": {"question": "List the East Asia & Pacific countries which are under the High income: nonOECD group. Please include their alpha code.", "sql": "SELECT CountryCode, Alpha2Code FROM Country WHERE Region = 'East Asia & Pacific' AND IncomeGroup = 'High income: nonOECD'", "source_tables": ["country"]}, "evidence": "the East Asia & Pacific countries are where Region = 'East Asia & Pacific'; High income: nonOECD group is where IncomeGroup = 'High income: nonOECD'"}
{"sample_id": 2205, "db_id": "world_development_indicators", "final": {"question": "How many nations in East Asia and the Pacific have completed their external debt reporting on time?", "sql": "SELECT COUNT(CountryCode)  FROM Country WHERE Region = 'East Asia & Pacific' AND ExternalDebtReportingStatus = 'Estimate'", "source_tables": ["country"]}, "evidence": "in East Asia and the Pacific refers to region = 'East Asia & Pacific'; have completed their external debt reporting on time refers to ExternalDebtReportingStatus = 'Estimate'"}
{"sample_id": 2173, "db_id": "world_development_indicators", "final": {"question": "State the currency of Malaysia and what are the indicator code used by this country in 1970?", "sql": "SELECT T1.currencyunit, T2.IndicatorCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.TableName = 'Malaysia' AND T2.Year = 1970", "source_tables": ["country", "indicators"]}, "evidence": "Malaysia is the name of the country; currency refers to CurrencyUnit; Year = '1970';"}
{"sample_id": 2160, "db_id": "world_development_indicators", "final": {"question": "Mention the series code of countries using pound sterling as their currency unit. Which country belongs to high income group among them.", "sql": "SELECT DISTINCT T1.CountryCode, T1.CurrencyUnit, T1.IncomeGroup FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Pound sterling' AND T1.IncomeGroup LIKE '%high income%'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2202, "db_id": "world_development_indicators", "final": {"question": "Which countries in the upper middle income category still have unfinished external debt reporting? Please provide the country codes in your answer.", "sql": "SELECT CountryCode FROM Country WHERE IncomeGroup = 'Upper middle income' AND ExternalDebtReportingStatus = 'Preliminary'", "source_tables": ["country"]}, "evidence": "in the upper middle income category refers to incomegroup = 'Upper middle income'; still have unfinished external debt reporting refers to ExternalDebtReportingStatus = 'Preliminary'"}
{"sample_id": 2243, "db_id": "world_development_indicators", "final": {"question": "What's the agregation method for the indicator whose value is 133 in 1960 for the Arab World?", "sql": "SELECT T2.AggregationMethod FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName INNER JOIN Country AS T3 ON T1.CountryCode = T3.CountryCode WHERE T3.ShortName = 'Arab World' AND T1.Value = 133 AND T1.Year = 1960", "source_tables": ["series", "country", "indicators"]}, "evidence": "in 1960 refers to Year = 1960; for the Arab World refers to CountryName = 'Arab World'"}
{"sample_id": 2179, "db_id": "world_development_indicators", "final": {"question": "How much is the total urban population of middle income countries in 1960?", "sql": "SELECT SUM(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup LIKE '%middle income' AND T2.Year = 1960 AND T2.IndicatorName = 'Urban population'", "source_tables": ["country", "indicators"]}, "evidence": "IncomeGroup = 'Middle income'; Year = 1960; urban population refers to IndicatorName;"}
{"sample_id": 2156, "db_id": "world_development_indicators", "final": {"question": "List out the country name of upper middle income group. Which country has the earliest national account base year? List out the region where this country locates.", "sql": "SELECT DISTINCT T1.CountryName FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IncomeGroup = 'Upper middle income' UNION SELECT longname FROM ( SELECT longname FROM country WHERE NationalAccountsBaseYear <> '' ORDER BY NationalAccountsBaseYear ASC LIMIT 1 )", "source_tables": ["country", "indicators"]}, "evidence": "IncomeGroup = 'Upper middle income'; the earliest national account base year refers to MIN(NationalAccountsBaseYear); \n"}
{"sample_id": 2228, "db_id": "world_development_indicators", "final": {"question": "From 1975 to 1980, how much is the total amount CO2 emmission in kiloton of the the world? Indicate which year the world recorded its highest CO2 emmissions.", "sql": "SELECT SUM(T1.Value), T1.Year FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year >= 1975 AND T1.Year < 1981 AND T1.CountryCode = 'WLD' AND T2.SpecialNotes = 'World aggregate.'", "source_tables": ["country", "indicators"]}, "evidence": "from 1975 to 1980 refers to Year between 1975 and 1980; the total amount CO2 emmission in kiloton of the the world refers to sum(value where IndicatorName like 'CO2%'); the world recorded its highest CO2 emmissions refers to max(value where IndicatorName like 'CO2%')"}
{"sample_id": 2186, "db_id": "world_development_indicators", "final": {"question": "What country have the series code of SP.DYN.CBRT.IN?", "sql": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'SP.DYN.CBRT.IN'", "source_tables": ["countrynotes", "country"]}, "evidence": "what country refers to ShortName"}
{"sample_id": 2170, "db_id": "world_development_indicators", "final": {"question": "What are the footnote description of Finland in year 2000?", "sql": "SELECT DISTINCT T2.Description FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.TableName = 'Finland' AND T2.Year = 'YR2000'", "source_tables": ["footnotes", "country"]}, "evidence": "Finland is the short name of the country; year 2000 refers to Year = 'YR2000';"}
{"sample_id": 2220, "db_id": "world_development_indicators", "final": {"question": "How many countries have a latest population census in 2011? Indicate their full names.", "sql": "SELECT COUNT(LongName) FROM country WHERE LatestPopulationCensus = '2011' UNION ALL SELECT LongName FROM country WHERE LatestPopulationCensus = '2011'", "source_tables": ["country"]}, "evidence": "have a latest population census in 2011 refers to LatestPopulationCensus = '2011'; full name refers to LongName"}
{"sample_id": 2122, "db_id": "world_development_indicators", "final": {"question": "What are the sources for the data of children who finished primary school education in Latin America & Caribbean countries?", "sql": "SELECT DISTINCT T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode INNER JOIN Country AS T3 ON T1.Countrycode = T3.CountryCode WHERE T3.Region = 'Latin America & Caribbean' AND T2.IndicatorName = 'Children out of school, primary'", "source_tables": ["footnotes", "series", "country"]}, "evidence": "Latin America & Caribbean is the name of the region; children who finished primary school education refer to IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'; sources refer to Description;"}
{"sample_id": 2121, "db_id": "world_development_indicators", "final": {"question": "Find the countries in south Asia which are in the low-income group. What is the source of their recent income and expenditure data? List it alongside the table name of the countries.", "sql": "SELECT TableName, SourceOfMostRecentIncomeAndExpenditureData FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income'", "source_tables": ["country"]}, "evidence": "South Asia is the name of the region; IncomeGroup = 'Low income';"}
{"sample_id": 2197, "db_id": "world_development_indicators", "final": {"question": "What South Asian nations have low incomes? Please include the entire names of the nations in your answer.", "sql": "SELECT LongName FROM Country WHERE IncomeGroup = 'Low income' AND Region = 'South Asia'", "source_tables": ["country"]}, "evidence": "South Asian nations refers to region = 'South Asia'; have low incomes refers to incomegroup = 'Low income'; the entire names refers to longname"}
{"sample_id": 2127, "db_id": "world_development_indicators", "final": {"question": "How many low income countries are there in South Asia?", "sql": "SELECT COUNT(CountryCode) FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income'", "source_tables": ["country"]}, "evidence": "South Asia is the name of the region; IncomeGroup = 'Low income';"}
{"sample_id": 2142, "db_id": "world_development_indicators", "final": {"question": "Which country had the highest value of indicator belongs to Private Sector & Trade: Exports topic? Please list the country name and indicator name.", "sql": "SELECT T1.CountryName, T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.Topic = 'Private Sector & Trade: Exports' ORDER BY T1.Value DESC LIMIT 1", "source_tables": ["series", "indicators"]}, "evidence": "country refers to CountryName;"}
{"sample_id": 2162, "db_id": "world_development_indicators", "final": {"question": "How many of the countries name start with alphabet A? List down the Alpha2Code of them.", "sql": "SELECT COUNT(ShortName) FROM Country WHERE ShortName LIKE 'A%' UNION SELECT alpha2code FROM country WHERE shortname LIKE 'A%'", "source_tables": ["country"]}, "evidence": "countries name starts with alphabet A refers to shortname like 'A%';"}
{"sample_id": 2213, "db_id": "world_development_indicators", "final": {"question": "How many countries are having their country's footnotes described as \"unspecified\"? Please provide the full names of any three of those countries.", "sql": "SELECT COUNT(DISTINCT T1.CountryCode)  FROM Country AS T1 INNER JOIN Footnotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Unspecified' OR T2.Description = 'Not specified' UNION SELECT T1.LongName FROM Country AS T1 INNER JOIN Footnotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Unspecified' OR T2.Description = 'Not specified' LIMIT 4", "source_tables": ["footnotes", "country"]}, "evidence": "described as \"unspecified\" refers to Description = 'Not specified'; full names refers to LongName"}
{"sample_id": 2246, "db_id": "world_development_indicators", "final": {"question": "What is the average value of Adolescent fertility rate in the country whose Alpha2Code is 1A?", "sql": "SELECT CAST(SUM(T2.Value) AS REAL) * 100 / COUNT(T2.Year) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'", "source_tables": ["country", "indicators"]}, "evidence": "average value = AVG(Value) where IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'"}
{"sample_id": 2211, "db_id": "world_development_indicators", "final": {"question": "Please provide the subject of series of Austria.", "sql": "SELECT DISTINCT T3.Topic FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.Countrycode = T2.CountryCode INNER JOIN Series AS T3 ON T1.Seriescode = T3.SeriesCode WHERE T2.ShortName = 'Austria'", "source_tables": ["series", "countrynotes", "country"]}, "evidence": "subject refers to topic; Austria refers to shortname = 'Austria'"}
{"sample_id": 2144, "db_id": "world_development_indicators", "final": {"question": "Please list out all annual indicator names of Sudan in 1961?", "sql": "SELECT T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.CountryName = 'Sudan' AND T1.Year = 1961 AND T2.Periodicity = 'Annual'", "source_tables": ["series", "indicators"]}, "evidence": "Sudan is the name of the country; Periodicity = 'Annual'; Year = '1961'"}
{"sample_id": 2201, "db_id": "world_development_indicators", "final": {"question": "What are the subjects of series that have a restricted type of license?", "sql": "SELECT DISTINCT Topic FROM Series WHERE LicenseType = 'Restricted'", "source_tables": ["series"]}, "evidence": "subjects refers to topic; a restricted type of license refers to\u00a0 licenseType = 'Restricted'"}
{"sample_id": 2185, "db_id": "world_development_indicators", "final": {"question": "What is the ratio between country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971? List the country with the highest number of infant deaths in 1971 and the lowest number of infant deaths in 1971.", "sql": "SELECT CAST(MAX(value) AS REAL) / MIN(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' UNION ALL SELECT countryname FROM ( SELECT countryname, MAX(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' ) UNION SELECT countryname FROM ( SELECT countryname, MIN(value) FROM indicators WHERE indicatorname = 'Number of infant deaths' AND year = '1971' )", "source_tables": ["indicators"]}, "evidence": "ratio = divide(max(value where indicatorname = 'Number of infant deaths' and year = '1971'), min(value where indicatorname = 'Number of infant deaths' and year = '1971')); the highest number of infant deaths in 1971 refers to max(value where indicatorname = 'Number of infant deaths' and year = '1971'); the lowest number of infant deaths in 1971 refers to min(value where indicatorname = 'Number of infant deaths' and year = '1971')"}
{"sample_id": 2130, "db_id": "world_development_indicators", "final": {"question": "Please calculate the average of Arms imports (SIPRI trend indicator values) of the European & Central Asian countries.", "sql": "SELECT CAST(SUM(T2.Value) AS REAL) / COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Region = 'Europe & Central Asia' AND T2.IndicatorName = 'Arms imports (SIPRI trend indicator values)'", "source_tables": ["country", "indicators"]}, "evidence": "European & Central Asian is the name of the region; IndicatorName = 'Arms imports (SIPRI trend indicator values)'; countries refer to CountryCode; DIVIDE(Sum(Value), Count(CountryCode));"}
{"sample_id": 2180, "db_id": "world_development_indicators", "final": {"question": "Name the country with fastest growth in adjusted net national income in 1980 and state the currency used by this country.", "sql": "SELECT T2.countryname, T1.CurrencyUnit FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Adjusted net national income (annual % growth)' AND T2.Year = 1980 AND T1.CurrencyUnit != '' ORDER BY T2.Value DESC LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "fastest growth refers to MAX(Value); IndicatorName = 'Adjusted net national income (annual % growth)'; Year = '1980'; currency refers to CurrencyUnit;"}
{"sample_id": 2234, "db_id": "world_development_indicators", "final": {"question": "What's the long name of the country that got 3000000 on the indicator Arms exports in 1960?", "sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Arms exports (SIPRI trend indicator values)' AND T2.Year = 1960 AND T2.Value = 3000000", "source_tables": ["country", "indicators"]}, "evidence": "long name refers to CountryName; got 3000000 on the indicator Arms exports refers to value where IndicatorName = 'Arms exports (SIPRI trend indicator values)' = 3000000; in 1960 refers to Year = 1960"}
{"sample_id": 2227, "db_id": "world_development_indicators", "final": {"question": "Which country has the highest population in largest city for 19 consecutive years starting from 1960? Indicate the region to which the country is located.", "sql": "SELECT T2.CountryCode, T2.Region FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Population in largest city' AND T1.Year >= 1960 AND T1.Year < 1980 ORDER BY T2.Region DESC LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "the highest population in largest city refers to max(value where IndicatorName = 'Population in largest city'); for 19 consecutive years starting from 1960 refers to Year BETWEEN'1960' and '1979'"}
{"sample_id": 2113, "db_id": "world_development_indicators", "final": {"question": "What is the series note description of the series \"SP.DYN.TO65.MA.ZS\" which covers the topic \"Health: Mortality\" in 1967?", "sql": "SELECT T2.Description FROM Series AS T1 INNER JOIN SeriesNotes AS T2 ON T1.SeriesCode = T2.Seriescode WHERE T1.SeriesCode = 'SP.DYN.TO65.MA.ZS' AND T1.Topic = 'Health: Mortality' AND T2.Year = 'YR1967'", "source_tables": ["series", "seriesnotes"]}, "evidence": "in 1967 refers to Year = 'YR1967'"}
{"sample_id": 2099, "db_id": "world_development_indicators", "final": {"question": "What is the description of the footnote on the series code AG.LND.FRST.K2 in 1990 for Aruba?", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2' AND T2.Year = 'YR1990'", "source_tables": ["footnotes", "country"]}, "evidence": "Year = 1990; Aruba is the name of country where ShortName = 'Aruba'"}
{"sample_id": 2229, "db_id": "world_development_indicators", "final": {"question": "Which country has the smallest land area in square kilometers for 19 consecutive years starting from year 1961? Indicate how much is its land area in square kilometers in those years and the income group of the country.", "sql": "SELECT T1.CountryName, SUM(T1.Value) area, T2.IncomeGroup FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Land area (sq. km)' AND T1.Year >= 1961 AND T1.Year < 1980 GROUP BY T1.CountryCode ORDER BY SUM(T1.Value) ASC LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "the smallest land area in square kilometers refers to min(value where IndicatorName like 'Land area (sq. km)'); for 19 consecutive years starting from year 1961 refers to Year between 1961 and 1979"}
{"sample_id": 2150, "db_id": "world_development_indicators", "final": {"question": "List out the long name of countries using series code as DT.DOD.DSTC.CD", "sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'DT.DOD.DSTC.CD'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2204, "db_id": "world_development_indicators", "final": {"question": "Which form of government has more countries that have completed the actual external debt reporting between the two types of government accounting concepts, budgetary central government vs. consolidated central government?", "sql": "SELECT SUM(CASE WHEN GovernmentAccountingConcept = 'Budgetary central government' THEN 1 ELSE 0 END), SUM(CASE WHEN GovernmentAccountingConcept = 'Consolidated central government' THEN 1 ELSE 0 END) central_nums FROM country WHERE ExternalDebtReportingStatus = 'Actual'", "source_tables": ["country"]}, "evidence": "have completed the actual external debt reporting refers to ExternalDebtReportingStatus = 'Actual'"}
{"sample_id": 2215, "db_id": "world_development_indicators", "final": {"question": "What portion of the nations in Latin America and the Caribbean had more than 50% of their land used for agriculture in 1961?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Value > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.CountryCode) FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year = 1961 AND T2.Region = 'Latin America & Caribbean' AND indicatorname = 'Agricultural land (% of land area)'", "source_tables": ["country", "indicators"]}, "evidence": "portion = divide(count(CountryName where Year = '1961' and Value>50), count(CountryName))*100%; nations in Latin America and the Caribbean refers to region = 'Latin America & Caribbean';\u00a0 more than 50% of their land used for agriculture refers to value where indicatorname = 'Agricultural land (% of land area)'>50; in 1961 refers to Year = '1961'"}
{"sample_id": 2235, "db_id": "world_development_indicators", "final": {"question": "Please list the Alpha2Codes of all the countries that have an indicator on Rural population in 1960.", "sql": "SELECT T1.Alpha2Code FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Rural population' AND T2.Year = 1960", "source_tables": ["country", "indicators"]}, "evidence": "in 1960 refers to year = '1960'"}
{"sample_id": 2195, "db_id": "world_development_indicators", "final": {"question": "What country in the region of Sub-Saharan Africa has a series code of \"SP.DYN.AMRT.FE\"? Indicate the long name of the country", "sql": "SELECT DISTINCT T3.LongName FROM SeriesNotes AS T1 INNER JOIN CountryNotes AS T2 ON T1.SeriesCode = T2.Seriescode INNER JOIN Country AS T3 ON T2.Countrycode = T3.CountryCode WHERE T3.Region = 'Sub-Saharan Africa' AND T1.SeriesCode = 'SP.DYN.AMRT.FE'", "source_tables": ["country", "seriesnotes", "countrynotes"]}, "evidence": ""}
{"sample_id": 2222, "db_id": "world_development_indicators", "final": {"question": "In Sub-Saharan Africa, how many female out-of-school children of primary school age are there in the country with the higest number of female out-of-school children of primary school age? Indicate the year of when it was recorded.", "sql": "SELECT MAX(T1.value), T1.year FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Sub-Saharan Africa' AND T1.IndicatorName = 'Out-of-school children of primary school age, female (number)'", "source_tables": ["country", "indicators"]}, "evidence": "in Sub-Saharan Africa refers to Region = 'Sub-Saharan Africa'; the higest number of female out-of-school children of primary school age refers to max(value where IndicatorName = 'Out-of-school children of primary school age, female (number)')"}
{"sample_id": 2111, "db_id": "world_development_indicators", "final": {"question": "In 1970, how many Middle Eastern & North African countries whose value for CO2 emissions from gaseous fuel consumption (kt) indicator is more than 600?", "sql": "SELECT COUNT(T2.CountryCode)  FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T1.IndicatorName = 'CO2 emissions FROM gaseous fuel consumption (kt)' AND T1.Year = 1970 AND T1.Value > 600", "source_tables": ["country", "indicators"]}, "evidence": "Year = 1970; Middle East & North Africa is the name of the region where Region = 'Middle East & North Africa'; CO2 emissions from gaseous fuel consumption (kt) is the name of indicator where IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'"}
{"sample_id": 2209, "db_id": "world_development_indicators", "final": {"question": "What was the deposit interest rate in the Commonwealth of Australia in 1979 in percentage?", "sql": "SELECT T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.LongName = 'Commonwealth of Australia' AND T1.IndicatorName = 'Deposit interest rate (%)' AND T1.Year = 1979", "source_tables": ["country", "indicators"]}, "evidence": "deposit interest rate refers to value where IndicatorName = 'Deposit interest rate (%)'; in the Commonwealth of Australia refers to\u00a0 LongName = 'Commonwealth of Australia'; in 1979 refers to Year = '1979'"}
{"sample_id": 2184, "db_id": "world_development_indicators", "final": {"question": "Which country have the highest CO2 emissions in 1960?", "sql": "SELECT CountryName FROM Indicators WHERE Year = 1960 AND IndicatorName = 'CO2 emissions (metric tons per capita)' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "which country refers to countryname; the highest CO2 emissions refers to max(value where indicatorname = 'CO2 emissions (metric tons per capita)'); in 1960 refers to year = '1970'"}
{"sample_id": 2148, "db_id": "world_development_indicators", "final": {"question": "How many country uses the 2008 System of National Accounts methodology? List our their table name.", "sql": "SELECT TableName  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 2008 System of National Accounts methodology.'", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 2134, "db_id": "world_development_indicators", "final": {"question": "How many annual indicators use the Sum aggregation method from 2001 to 2003?", "sql": "SELECT COUNT(DISTINCT T2.SeriesCode)  FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year IN ('YR2001', 'YR2002', 'YR2003') AND T2.Periodicity = 'Annual' AND T2.AggregationMethod = 'Sum'", "source_tables": ["footnotes", "series"]}, "evidence": "Annual refers to Periodicity; from 2001 to 2003 implies Year = 'YR2001', Year = 'YR2002' , Year = 'YR2003';"}
{"sample_id": 2196, "db_id": "world_development_indicators", "final": {"question": "How many countries are using the same type of currency? Please list the short names of any 3 countries.", "sql": "SELECT ShortName FROM country WHERE currencyunit = 'U.S. dollar' LIMIT 3", "source_tables": ["country"]}, "evidence": "any 3 countries refers to count(shortname)>3"}
{"sample_id": 2090, "db_id": "world_development_indicators", "final": {"question": "Among the countries in the group of Heavily Indebted Poor Countries, how many of them are under the lending category of the International Development Associations?", "sql": "SELECT COUNT(CountryCode) FROM Country WHERE LendingCategory = 'IDA' AND OtherGroups = 'HIPC'", "source_tables": ["country"]}, "evidence": "group of Heavily Indebted Poor Countries is OtherGroups = 'HIPC'; International Development Associations refers to lendingcategory = 'IDA'"}
{"sample_id": 2153, "db_id": "world_development_indicators", "final": {"question": "List out the country name of lower earning countries", "sql": "SELECT DISTINCT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income'", "source_tables": ["country", "indicators"]}, "evidence": "lower earning countries refer to IncomeGroup = 'Low income';"}
{"sample_id": 2237, "db_id": "world_development_indicators", "final": {"question": "By how much did the indicator on Adolescent fertility rate increase from 1960 to 1961 in the country whose Alpha2Code is 1A?", "sql": "SELECT ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1961 ) - ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 ) DIFF", "source_tables": ["country", "indicators"]}, "evidence": "by how much = subtract(sum(value where Year = 1961), sum(value where Year = 1960)); indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'"}
{"sample_id": 2158, "db_id": "world_development_indicators", "final": {"question": "List out the table name and currency unit of countries using series code as FP.CPI.TOTL", "sql": "SELECT T1.TableName, T1.CurrencyUnit FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.SeriesCode = 'FP.CPI.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2109, "db_id": "world_development_indicators", "final": {"question": "What are the Indicator names and aggregation methods when the topic is Economic Policy & Debt: Balance of payments: Capital & financial account?", "sql": "SELECT IndicatorName, AggregationMethod FROM Series WHERE Topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account'", "source_tables": ["series"]}, "evidence": ""}
{"sample_id": 2232, "db_id": "world_development_indicators", "final": {"question": "How many countries in the North America Region has completed the vital registration?", "sql": "SELECT COUNT(CountryCode) FROM Country WHERE VitalRegistrationComplete = 'Yes' AND Region = 'North America'", "source_tables": ["country"]}, "evidence": "has completed the vital registration refers to VitalRegistrationComplete = 'Yes'"}
{"sample_id": 2151, "db_id": "world_development_indicators", "final": {"question": "Mention the series code of countries using Hong Kong dollar as their currency unit.", "sql": "SELECT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Hong Kong dollar'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2226, "db_id": "world_development_indicators", "final": {"question": "What is the lending category of the country with a cereal production of 6140000 metric tons for the year 1966?", "sql": "SELECT T1.LendingCategory FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Cereal production (metric tons)' AND T2.Value = 6140000 AND T2.Year = 1966", "source_tables": ["country", "indicators"]}, "evidence": "cereal production of 6140000 metric tons refers value where IndicatorName = 'Cereal production (metric tons)'> 6140000; the year 1966 refers to Year = '1966'"}
{"sample_id": 2131, "db_id": "world_development_indicators", "final": {"question": "Which upper middle income country has the lowest value of CO2 emissions (kt)?", "sql": "SELECT T1.CountryCode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income' AND T2.IndicatorName = 'CO2 emissions (kt)' ORDER BY T2.Value ASC LIMIT 1", "source_tables": ["country", "indicators"]}, "evidence": "IncomeGroup = 'Upper middle income'; IndicatorName = 'CO2 emissions (kt); the lowest value refers to MIN(Value);"}
{"sample_id": 2190, "db_id": "world_development_indicators", "final": {"question": "In 1960, what is largest population for country with upper middle income?", "sql": "SELECT MAX(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income' AND T2.Year = 1960 AND T2.IndicatorName = 'Population, total'", "source_tables": ["country", "indicators"]}, "evidence": "in 1960 refers to year = '1960'; the largest population refers to max(value where IndicatorName = 'Population, total'); country with upper middle income refers to incomegroup = 'Upper middle income'"}
{"sample_id": 2145, "db_id": "world_development_indicators", "final": {"question": "From 1960 to 1965, which country has the lowest value of indicator belongs to Health: Population: Structure?", "sql": "SELECT CountryName FROM Indicators WHERE Value = ( SELECT MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year >= 1960 AND T1.Year < 1966 AND T2.Topic = 'Health: Population: Structure' )", "source_tables": ["series", "indicators"]}, "evidence": "From 1960 to 1965 refers to Year between '1960' and '1965'; the lowest value implies MIN(Value); country refers to CountryName;"}
{"sample_id": 2152, "db_id": "world_development_indicators", "final": {"question": "List out the table name of countries using series code as SP.DYN.TO65.MA.ZS", "sql": "SELECT T1.TableName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SP.DYN.TO65.MA.ZS'", "source_tables": ["countrynotes", "country"]}, "evidence": ""}
{"sample_id": 2238, "db_id": "world_development_indicators", "final": {"question": "What is the note for Australia on the indicator SP.ADO.TFRT?", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SP.ADO.TFRT' AND T1.ShortName = 'Australia'", "source_tables": ["countrynotes", "country"]}, "evidence": "note refers to Description; for Australia refers to ShortName = 'Australia'; indicator SP.ADO.TFRT refers to Seriescode = 'SP.ADO.TFRT'"}
{"sample_id": 2120, "db_id": "world_development_indicators", "final": {"question": "Which countries have a fertility rate between 4 and 5 in 1979? List their names.", "sql": "SELECT CountryName FROM Indicators WHERE Year = 1979 AND IndicatorName = 'Fertility rate, total (births per woman)' AND value >= 4 AND Value <= 5", "source_tables": ["indicators"]}, "evidence": "Year = 1979; fertility rate refers to IndicatorName = 'Fertility rate, total (births per woman)'; Value is between 4 and 5;"}
{"sample_id": 2175, "db_id": "world_development_indicators", "final": {"question": "How many countries have country note description as \"Sources: UN Energy Statistics (2014)\"? List the currency of these countries.", "sql": "SELECT COUNT(DISTINCT T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Sources: UN Energy Statistics (2014)' UNION SELECT DISTINCT t1.CurrencyUnit FROM country AS t1 INNER JOIN countrynotes AS t2 ON t1.CountryCode = t2.Countrycode WHERE t2.Description = 'Sources: UN Energy Statistics (2014)'", "source_tables": ["countrynotes", "country"]}, "evidence": "countries refer to CountryCode; currency refers to CurrencyUnit;"}
{"sample_id": 2128, "db_id": "world_development_indicators", "final": {"question": "Please list the short name of countries which have the latest trade data after 2010.", "sql": "SELECT ShortName FROM Country WHERE LatestTradeData > 2010", "source_tables": ["country"]}, "evidence": "the latest trade data after 2010 implies LatestTradeData > 2010;"}
{"sample_id": 2096, "db_id": "world_development_indicators", "final": {"question": "How many low-income countries under the lending category of the International Development Associations have a note on the series code SM.POP.TOTL?", "sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.LendingCategory = 'IDA' AND T2.Seriescode = 'SM.POP.TOTL' AND IncomeGroup = 'Low income'", "source_tables": ["countrynotes", "country"]}, "evidence": "low-income countries are where the incomegroup = Low income"}
{"sample_id": 2093, "db_id": "world_development_indicators", "final": {"question": "Please list the countries in Latin America & Caribbean with a note on the series code SM.POP.TOTL.", "sql": "SELECT T1.SHORTNAME, T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND T2.Seriescode = 'SM.POP.TOTL'", "source_tables": ["countrynotes", "country"]}, "evidence": "Countries refer to the ShortName; Latin America & Caribbean is the name of the region"}
{"sample_id": 2224, "db_id": "world_development_indicators", "final": {"question": "Among the countries who uses the 1968 System of National Accounts methodology, how many are in the Middle East & North Africa? Name the country with the highest CO2 emissions from solid fuel consumption in kiloton.", "sql": "SELECT COUNT(DISTINCT T1.CountryCode) FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T2.SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.' AND T1.IndicatorName = 'CO2 emissions FROM solid fuel consumption (kt)' UNION SELECT * FROM ( SELECT T1.CountryName FROM indicators AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Middle East & North Africa' AND T2.SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.' AND T1.IndicatorName = 'CO2 emissions FROM solid fuel consumption (kt)' GROUP BY T1.CountryName ORDER BY SUM(T1.value) DESC LIMIT 1 )", "source_tables": ["country", "indicators"]}, "evidence": "uses the 1968 System of National Accounts methodology refers to SystemOfNationalAccounts = '1968 System of National Accounts methodology'; in the Middle East & North Africa refers to Region = 'Middle East & North Africa'; the highest CO2 emissions from solid fuel consumption in kiloton refers to max(value where IndicatorName = 'CO2 emissions from solid fuel consumption (kt)')"}
{"sample_id": 2091, "db_id": "world_development_indicators", "final": {"question": "Please list the countries under the lending category of the International Development Associations and have a external debt reporting finished by estimation.", "sql": "SELECT ShortName, ExternalDebtReportingStatus FROM Country WHERE LendingCategory = 'IDA'", "source_tables": ["country"]}, "evidence": "countries refer to the ShortName; International Development Associations refers to lendingcategory = 'IDA'; have a external debt reporting finished by estimation refers to ExternalDebtReportingStatus = 'Estimate'"}
{"sample_id": 2107, "db_id": "world_development_indicators", "final": {"question": "In which country's latest trade data and latest water withdrawal data were both updated in the year 2013? Give its long name and Alpha 2 code.", "sql": "SELECT LongName, Alpha2Code FROM Country WHERE LatestTradeData = 2013 AND LatestWaterWithdrawalData = 2013", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 2119, "db_id": "world_development_indicators", "final": {"question": "How many countries have reached their Adjusted net national income per capita (constant 2005 US$) indicator value to more than 1,000 but have not finished their external debt reporting?", "sql": "SELECT COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)' AND T1.ExternalDebtReportingStatus = 'Preliminary' AND T2.Value > 1000", "source_tables": ["country", "indicators"]}, "evidence": "Adjusted net national income per capita (constant 2005 US$) is the IndicatorName; have not finished their external debt reporting means ExternalDebtReportingStatus = 'Preliminary'"}
{"sample_id": 2181, "db_id": "world_development_indicators", "final": {"question": "How many countries using the 1993 System of National Accounts methodology?", "sql": "SELECT COUNT(CountryCode) FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1993 System of National Accounts methodology.'", "source_tables": ["country"]}, "evidence": "use the 1993 System of National Accounts methodology refers to SystemOfNationalAccounts = '1993 System of National Accounts methodology.'"}
{"sample_id": 2105, "db_id": "world_development_indicators", "final": {"question": "What are the special notes for the country whose average adolescent fertility rate is the highest?", "sql": "SELECT DISTINCT T1.SpecialNotes FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Value = ( SELECT Value FROM Indicators WHERE IndicatorName LIKE 'Adolescent fertility rate%' ORDER BY Value DESC LIMIT 1 )", "source_tables": ["country", "indicators"]}, "evidence": "the average adolescent fertility rate is DIVIDE(SUM(value), SUM(IndicatorName like 'adolescent fertility rate%')); MAX(average adolescent fertility rate)"}
{"sample_id": 2097, "db_id": "world_development_indicators", "final": {"question": "Among the countries in the High income: OECD group whose currency unit is Euro, how many of them have a note on the series code SP.DYN.AMRT.FE?", "sql": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.IncomeGroup = 'High income: OECD' AND T1.CurrencyUnit = 'Euro' AND T2.Seriescode = 'SP.DYN.AMRT.FE'", "source_tables": ["countrynotes", "country"]}, "evidence": "countries refer to Countrycode; in the high income refers to incomegroup = 'High'; with notes refers to description IS NOT NULL; series code SP.DYN.AMRT.FE refers to Seriescode = 'SP.DYN.AMRT.FE'"}
{"sample_id": 2223, "db_id": "world_development_indicators", "final": {"question": "What is the series code for number of infant deaths in year 1965 for the country whose full name is Islamic State of Afghanistan?", "sql": "SELECT DISTINCT T3.Seriescode FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T2.IndicatorName = 'Number of infant deaths' AND T1.LongName = 'Islamic State of Afghanistan' AND T2.Year = 1965", "source_tables": ["countrynotes", "country", "indicators"]}, "evidence": "number of infant deaths refers to IndicatorName = 'Number of infant deaths'; in year 1965 refers to Year = '1965'; full name is Islamic State of Afghanistan refers to LongName = 'Islamic State of Afghanistan'"}
{"sample_id": 2207, "db_id": "world_development_indicators", "final": {"question": "From 1961 to 1980, what was the highest percentage of land used for agriculture in the Republic of Benin?", "sql": "SELECT MAX(T1.Value) FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Year >= 1961 AND T1.Year < 1981 AND T1.IndicatorName LIKE 'Agricultural land (% of land area)' AND T2.LongName = 'Republic of Benin'", "source_tables": ["country", "indicators"]}, "evidence": "from 1961 to 1980 refers to year between '1961' and '1980'; the highest percentage of land used for agriculture refers to max(value where IndicatorName = 'Agricultural land (% of land area)'); in the Republic of Benin refers to longname = 'Republic of Benin'"}
{"sample_id": 2118, "db_id": "world_development_indicators", "final": {"question": "What is the topic of the series when the Total reserves minus gold (current US$) indicator of Haiti hit the value of 3,000,000 in 1961? Please include its series code and license type.", "sql": "SELECT T2.Topic, T2.Seriescode, T2.LicenseType FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year = 1961 AND T1.CountryName = 'Haiti' AND T1.IndicatorName = 'Total reserves minus gold (current US$)' AND T1.Value = 3000000", "source_tables": ["series", "indicators"]}, "evidence": "Total reserves minus gold (current US$) is the IndicatorName; Haiti is the CountryName; Year = 1961"}
{"sample_id": 2116, "db_id": "world_development_indicators", "final": {"question": "What is the short name of the country in which the \"Net bilateral aid flows from DAC donors, Sweden (current US$)\" indicator hit the 570,000 value in 1970?", "sql": "SELECT T2.ShortName FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Net bilateral aid flows FROM DAC donors, Sweden (current US$)' AND T1.Year = 1970 AND T1.Value = 570000", "source_tables": ["country", "indicators"]}, "evidence": "Net bilateral aid flows from DAC donors, Sweden (current US$) is the name of indicator where IndicatorName = 'Net bilateral aid flows from DAC donors, Sweden (current US$)'; Year = 1970; Value > 570,000"}
{"sample_id": 2141, "db_id": "world_development_indicators", "final": {"question": "From 1968 to 1970, what are indicator names whose license type is open and values are less than 100?", "sql": "SELECT DISTINCT T1.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year >= 1968 AND T1.Year < 1971 AND T2.LicenseType = 'Open' AND T1.Value < 100", "source_tables": ["series", "indicators"]}, "evidence": "From 1968 to 1970 refers to Year between '1968' and '1970'; values are less than 100 imply Value<100;"}
{"sample_id": 2231, "db_id": "world_development_indicators", "final": {"question": "What's the lastest household survey in Angola and when did it take place?", "sql": "SELECT LatestHouseholdSurvey, PppSurveyYear FROM Country WHERE ShortName = 'Angola'", "source_tables": ["country"]}, "evidence": "in Angola refers to ShortName = 'Angola'; when refers to PppSurveyYear"}
{"sample_id": 2167, "db_id": "world_development_indicators", "final": {"question": "Which low income country has a series code of DT.DOD.DECT.CD? Name the country code of it.", "sql": "SELECT T1.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.IncomeGroup = 'Low income' AND T2.Seriescode = 'DT.DOD.DECT.CD'", "source_tables": ["countrynotes", "country"]}, "evidence": "IncomeGroup = 'Low income';"}
{"sample_id": 2123, "db_id": "world_development_indicators", "final": {"question": "List the sources for the Net Migration in South American countries in 2002.", "sql": "SELECT T2.Source FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode INNER JOIN Country AS T3 ON T1.Countrycode = T3.CountryCode INNER JOIN SeriesNotes AS T4 ON T2.SeriesCode = T4.Seriescode WHERE T4.Year LIKE '%2002%' AND T2.IndicatorName = 'Net migration'", "source_tables": ["seriesnotes", "series", "countrynotes", "country"]}, "evidence": "South American is the name of the region; Year contains '2002'; sources refer to Description; IndicatorName = 'Net migration';"}
{"sample_id": 2239, "db_id": "world_development_indicators", "final": {"question": "Please list the notes for Aruba on the indicators under the topic of Environment: Energy production & use.", "sql": "SELECT T2.Description FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T1.ShortName = 'Aruba' AND T3.Topic = 'Environment: Energy production & use'", "source_tables": ["series", "countrynotes", "country"]}, "evidence": "note refers to Description; for Aruba refers to ShortName = 'Aruba'"}
{"sample_id": 2102, "db_id": "world_development_indicators", "final": {"question": "How many footnotes did Aruba got on different series code in the year 2002?", "sql": "SELECT COUNT(T2.SeriesCode) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Year = 'YR2002'", "source_tables": ["footnotes", "country"]}, "evidence": "Aruba is the name of country where ShortName = 'Aruba'"}
{"sample_id": 2200, "db_id": "world_development_indicators", "final": {"question": "Which country has the lowest percentage of arable land?", "sql": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'Arable land (% of land area)' ORDER BY Value DESC LIMIT 1", "source_tables": ["indicators"]}, "evidence": "which country refers to countryname; the lowest percentage of arable land refers to min(value where indicatorname = 'Arable land (% of land area)')"}
{"sample_id": 2245, "db_id": "world_development_indicators", "final": {"question": "What is the percentage of increase of the indicator on Adolescent fertility rate from 1960 to 1961 in the country whose Alpha2Code is 1A?", "sql": "SELECT (( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1961 ) - ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )) * 1.0 / ( SELECT SUM(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )", "source_tables": ["country", "indicators"]}, "evidence": "the percentage of increase from 1960 to 1961 = divide(subtract(sum(value where Year = 1961), sum(Value where Year = 1960)), sum(Value where Year = 1960)) *100%; indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'\n\n"}
{"sample_id": 2183, "db_id": "world_development_indicators", "final": {"question": "Which country have conducted population census from 2010 until 2012 and have completed vital registration?", "sql": "SELECT ShortName, LongName FROM Country WHERE LatestPopulationCensus >= 2010 AND LatestPopulationCensus < 2013 AND VitalRegistrationComplete = 'Yes'", "source_tables": ["country"]}, "evidence": "from 2010 until 2012 refers to LatestPopulationCensus between '2010' and '2012'; have completed vital registration refers to VitalRegistrationComplete = 'Yes'; CountryName = ShortName + LongName"}
{"sample_id": 2140, "db_id": "world_development_indicators", "final": {"question": "Please list annual indicator names which have values of more than 100 in 1965.", "sql": "SELECT DISTINCT T2.IndicatorName FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T1.Year = 1965 AND T1.Value > 100 AND T2.Periodicity = 'Annual'", "source_tables": ["series", "indicators"]}, "evidence": "Annual refers to Periodicity; values of more than 100 implies Value>100; Year = '1965';"}
{"sample_id": 2233, "db_id": "world_development_indicators", "final": {"question": "In which years does the country whose Alpha2Code is 1A have a result of the indicator Adolescent fertility rate?", "sql": "SELECT T2.Year FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'", "source_tables": ["country", "indicators"]}, "evidence": "indicator Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'\n\n"}
{"sample_id": 2125, "db_id": "world_development_indicators", "final": {"question": "In the countries for which the latest trade data are from 2013, what was the GDP growth in 2014? List them in the ascending order of GDP.", "sql": "SELECT DISTINCT T1.CountryCode, T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.LatestTradeData = 2013 AND T2.IndicatorName LIKE 'GDP growth (annual %)' AND T2.year = 2014 AND T2.Value > 0 ORDER BY T2.Value ASC", "source_tables": ["country", "indicators"]}, "evidence": "IndicatorName = 'GDP growth (annual %)'; Year = 2014;"}
{"sample_id": 2203, "db_id": "world_development_indicators", "final": {"question": "What is the percentage of countries in the Middle East and North Africa that have finished reporting on their real external debt?", "sql": "SELECT CAST(SUM(CASE WHEN ExternalDebtReportingStatus = 'Actual' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) FROM Country WHERE region = 'Middle East & North Africa'", "source_tables": ["country"]}, "evidence": "percentage = divide(count(countrycode where\u00a0 ExternalDebtReportingStatus = 'Actual' ), count(countrycode))*100%; in the Middle East and North Africa refers to region = 'Middle East & North Africa'; have finished reporting on their real external debt refers to ExternalDebtReportingStatus = 'Actual'"}
{"sample_id": 2194, "db_id": "world_development_indicators", "final": {"question": "What country has the latest trade data with a series code of \"SP.DYN.CDRT.IN\n\"? List the table name of the country.", "sql": "SELECT DISTINCT T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.LatestTradeData = 2013 AND T2.IndicatorCode = 'SP.DYN.CDRT.IN'", "source_tables": ["country", "indicators"]}, "evidence": "the latest trade data refers to LatestTradeData = '2013'; with a series code of \"SP.DYN.CDRT.IN\n\" refers to indicatorcode = 'SP.DYN.CDRT.IN'"}
{"sample_id": 2305, "db_id": "movielens", "final": {"question": "Who are cast members in an English movie which has a running time equal to 2? Please list their IDs.", "sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 2 AND T1.isEnglish = 'T'", "source_tables": ["movies2actors", "movies"]}, "evidence": "isEnglish = 'T' means English movie"}
{"sample_id": 2283, "db_id": "movielens", "final": {"question": "How many different female users have rated movies from France?", "sql": "SELECT COUNT(DISTINCT T2.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T3.country = 'France'", "source_tables": ["u2base", "users", "movies"]}, "evidence": "France is a country; Female users mean that u_gender = 'F'"}
{"sample_id": 2255, "db_id": "movielens", "final": {"question": "List the top 5 movies from other countries which to language is not in English.", "sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'other' AND T2.isEnglish = 'F' LIMIT 5", "source_tables": ["u2base", "movies"]}, "evidence": "not in English can be represented by isEnglish = 'F'"}
{"sample_id": 2291, "db_id": "movielens", "final": {"question": "How many of the users who rate the movie with the id '2462959' are female?", "sql": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.userid = 2462959 AND T1.u_gender = 'F'", "source_tables": ["u2base", "users"]}, "evidence": "Female users mean that u_gender = 'F'"}
{"sample_id": 2309, "db_id": "movielens", "final": {"question": "How many actors have acted in both US or UK films?", "sql": "SELECT COUNT(T1.actorid) FROM movies2actors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' OR T2.country = 'UK'", "source_tables": ["movies2actors", "movies"]}, "evidence": "US and UK are 2 countries"}
{"sample_id": 2247, "db_id": "movielens", "final": {"question": "List the different director IDs of the movies whose user rating is more than 4.", "sql": "SELECT DISTINCT T2.directorid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating > 4", "source_tables": ["u2base", "movies2directors"]}, "evidence": ""}
{"sample_id": 2344, "db_id": "movielens", "final": {"question": "What is the total amount male and female actors who were casted in movie ID 1684910 and what is the proportion between the highest quality actors against the worst quality of actors? Indicate your answer in percentage. List the the director as well as the genre.", "sql": "SELECT SUM(IIF(a_gender = 'M', 1, 0)) , SUM(IIF(a_gender = 'F', 1, 0)) , CAST(SUM(IIF(a_quality = 5, 1, 0)) AS REAL) * 100 / COUNT(*) , CAST(SUM(IIF(a_quality = 0, 1, 0)) AS REAL) * 100 / COUNT(*), ( SELECT directorid FROM movies2directors WHERE movieid = 1684910 ) , ( SELECT genre FROM movies2directors WHERE movieid = 1684910 ) FROM actors WHERE actorid IN ( SELECT actorid FROM movies2actors WHERE movieid = 1684910 )", "source_tables": ["movies2actors", "movies2directors", "actors"]}, "evidence": "Female actors mean that a_gender = 'F'; Male actors mean that a_gender = 'M'; a_quality = 5 refers to act the best, a_quality = 0 refers to act the worst"}
{"sample_id": 2250, "db_id": "movielens", "final": {"question": "How many movies from the USA which user rating is less than 3?", "sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' AND T1.rating < 3", "source_tables": ["u2base", "movies"]}, "evidence": ""}
{"sample_id": 2327, "db_id": "movielens", "final": {"question": "What's the ratio of gender in actors to actress in all the UK movies?", "sql": "SELECT CAST(SUM(IIF(T3.a_gender = 'M', 1, 0)) AS REAL) / SUM(IIF(T3.a_gender = 'F', 1, 0)) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'", "source_tables": ["movies2actors", "movies", "actors"]}, "evidence": "UK is a country; Male actors mean that a_gender = 'M'; Female actors mean that a_gender = 'F'; ratio; ratio of gender in actors = count(a_gender = 'M') / a_gender = 'F'"}
{"sample_id": 2312, "db_id": "movielens", "final": {"question": "How many American comedies are there?", "sql": "SELECT COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.genre = 'comedy'", "source_tables": ["movies", "movies2directors"]}, "evidence": "USA is a country"}
{"sample_id": 2340, "db_id": "movielens", "final": {"question": "How many horror movies were made by the worst directors?", "sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T1.directorid = T3.directorid WHERE T1.genre = 'horror' AND T3.d_quality = 0", "source_tables": ["movies", "movies2directors", "directors"]}, "evidence": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst"}
{"sample_id": 2332, "db_id": "movielens", "final": {"question": "How many of the worst actors are men and how many of the worst actors are women? Indicate your answer in ratio form.", "sql": "SELECT CAST(SUM(IIF(a_gender = 'M', 1, 0)) AS REAL) / SUM(IIF(a_gender = 'F', 1, 0)) FROM actors WHERE a_quality = 0", "source_tables": ["actors"]}, "evidence": "The worst actors means a_quality = 0; Men and male share the same meaning; men actors refers to a_gender = 'M'"}
{"sample_id": 2266, "db_id": "movielens", "final": {"question": "List down the ID of movies with running time of 3 and average revenue of 1?", "sql": "SELECT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN directors AS T3 ON T2.directorid = T3.directorid WHERE T1.runningtime = 3 AND T3.avg_revenue = 1", "source_tables": ["movies", "movies2directors", "directors"]}, "evidence": ""}
{"sample_id": 2334, "db_id": "movielens", "final": {"question": "What is the most popular genre of film directed by directors?", "sql": "SELECT genre FROM movies2directors GROUP BY genre ORDER BY COUNT(movieid) DESC LIMIT 1", "source_tables": ["movies2directors"]}, "evidence": "Most popular genre indicates that the genre has the most number of movies"}
{"sample_id": 2322, "db_id": "movielens", "final": {"question": "Please give the ids of the oldest films that got the most ratings.", "sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 5 AND T2.year = 1", "source_tables": ["u2base", "movies"]}, "evidence": "Films and movies share the same meaning; oldest film refers to the movie with year = 1"}
{"sample_id": 2260, "db_id": "movielens", "final": {"question": "Among the worst actresses, how many of them got a rating of more than 3 to the movies they starred?", "sql": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid INNER JOIN users AS T4 ON T1.userid = T4.userid WHERE T3.a_quality = 0 AND T1.rating > 3 AND T4.u_gender = 'F'", "source_tables": ["u2base", "movies2actors", "users", "actors"]}, "evidence": "Worst actresses means a_quality is the least; The least a_quality is 0"}
{"sample_id": 2304, "db_id": "movielens", "final": {"question": "Please list the actor IDs whose movies have the newest published date.", "sql": "SELECT T1.actorid FROM movies2actors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4", "source_tables": ["movies2actors", "movies"]}, "evidence": "Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date"}
{"sample_id": 2297, "db_id": "movielens", "final": {"question": "Please list all horror films that have a rating of 1.", "sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating = 1 AND T2.genre = 'Horror'", "source_tables": ["u2base", "movies2directors"]}, "evidence": ""}
{"sample_id": 2341, "db_id": "movielens", "final": {"question": "What are the genres of all the English-language foreign films having a runtime of two hours or less? List each one.", "sql": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime <= 2 AND T1.isEnglish = 'T' AND T1.country = 'other'", "source_tables": ["movies", "movies2directors"]}, "evidence": "isEnglish = 'T' means films in English; Film and movie share the same meaning"}
{"sample_id": 2272, "db_id": "movielens", "final": {"question": "Please list down ID of movies acted by top 5 actors based on actor rating.", "sql": "SELECT T2.movieid FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid GROUP BY T2.actorid ORDER BY AVG(T1.a_quality) DESC LIMIT 5", "source_tables": ["movies2actors", "actors"]}, "evidence": ""}
{"sample_id": 2326, "db_id": "movielens", "final": {"question": "Which Crime film got the lowest average rating?", "sql": "SELECT T2.movieid FROM u2base AS T2 INNER JOIN movies2directors AS T3 ON T2.movieid = T3.movieid WHERE T3.genre = 'Crime' GROUP BY T2.movieid ORDER BY AVG(T2.rating) LIMIT 1", "source_tables": ["u2base", "movies2directors"]}, "evidence": ""}
{"sample_id": 2289, "db_id": "movielens", "final": {"question": "Among the films directed by directors who direct the best, how many of them have an average rating of over 3.5?", "sql": "SELECT COUNT(*) FROM ( SELECT DISTINCT T2.movieid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.d_quality = 5 GROUP BY T2.movieid HAVING AVG(T3.rating) > 3.5 ) AS T1", "source_tables": ["u2base", "movies2directors", "directors"]}, "evidence": "d_quality = 5 refers to direct the best, d_quality = 0 refers to direct the worst"}
{"sample_id": 2258, "db_id": "movielens", "final": {"question": "Among the most rated UK movies, how many of them has running time of less than 2?", "sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T2.runningtime < 2 AND T1.rating = 5", "source_tables": ["u2base", "movies"]}, "evidence": "UK is a country"}
{"sample_id": 2274, "db_id": "movielens", "final": {"question": "What is the percentage of female audiences who viewed movies with rating 2?", "sql": "SELECT CAST(SUM(IIF(T2.u_gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T2.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 2", "source_tables": ["u2base", "users"]}, "evidence": "The audience and users are the same meaning; Female users refers to u_gender = 'F'; Percentage of female users = count(female users) / count(all users); count(all users) = count(female users) + count(male users)"}
{"sample_id": 2279, "db_id": "movielens", "final": {"question": "Please list the ID of the movie that has been mostly rated by female users.", "sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T2.u_gender = 'F' GROUP BY T1.movieid ORDER BY COUNT(T2.userid) DESC LIMIT 1", "source_tables": ["u2base", "users"]}, "evidence": "Female users refers to u_gender = 'F'"}
{"sample_id": 2342, "db_id": "movielens", "final": {"question": "Among the English comedy movies produced in the UK, how many movies with a running time of 3 was rated the highest by users between the age 45-50? Indicate the movie names.", "sql": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid INNER JOIN u2base AS T3 ON T1.movieid = T3.movieid INNER JOIN users AS T4 ON T3.userid = T4.userid WHERE T1.country = 'UK' AND T2.genre = 'Comedy' AND T1.runningtime = 3 AND T3.rating = 5 AND T4.age BETWEEN 45 AND 50 AND T1.isEnglish = 'T'", "source_tables": ["u2base", "movies", "movies2directors", "users"]}, "evidence": "UK is a country"}
{"sample_id": 2343, "db_id": "movielens", "final": {"question": "What is the percentage difference of English and non-English-language crime movies in other countries in year 3?", "sql": "SELECT CAST(SUM(IIF(T1.isEnglish = 'T', 1, 0)) - SUM(IIF(T1.isEnglish = 'F', 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'other' AND T1.year = 3", "source_tables": ["movies", "movies2directors"]}, "evidence": "non-English-language refers to isEnglish = 'F'; The percentage difference can be computed by [count(isEnglish = 'T' in movies) - count(isEnglish = 'F' in movies) / (all movies)] * 100%"}
{"sample_id": 2262, "db_id": "movielens", "final": {"question": "What are the ID of actors that had worked together with director 22397? What was the genre of that movie?", "sql": "SELECT T2.actorid, T4.genre FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid INNER JOIN movies2directors AS T4 ON T1.movieid = T4.movieid WHERE T4.directorid = 22397", "source_tables": ["movies2actors", "movies", "movies2directors", "actors"]}, "evidence": ""}
{"sample_id": 2286, "db_id": "movielens", "final": {"question": "How many distinct movies in English stars a male actor who acts the best?", "sql": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T3.isEnglish = 'T' AND T1.a_gender = 'M' AND T1.a_quality = 5", "source_tables": ["movies2actors", "movies", "actors"]}, "evidence": "Male actors mean that a_gender = 'M'; isEnglish = 'T' means movies in English"}
{"sample_id": 2338, "db_id": "movielens", "final": {"question": "Which movies have received the greatest ratings from female users whose occupations fall within the category of 3?", "sql": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.u_gender = 'F' AND T1.occupation = 3 AND T2.rating = 5", "source_tables": ["u2base", "users", "movies"]}, "evidence": "Female users mean that u_gender = 'F'"}
{"sample_id": 2261, "db_id": "movielens", "final": {"question": "What is the ID of audiences that gave the most rating of 5?", "sql": "SELECT userid FROM u2base WHERE rating = 5 GROUP BY userid ORDER BY COUNT(movieid) DESC LIMIT 1", "source_tables": ["u2base"]}, "evidence": "The audience and users are the same meaning"}
{"sample_id": 2277, "db_id": "movielens", "final": {"question": "Among the action movies from the USA, how many of them are not in English?", "sql": "SELECT COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T1.isEnglish = 'F' AND T2.genre = 'Action'", "source_tables": ["movies", "movies2directors"]}, "evidence": "USA is a country; not in English can be represented by isEnglish = 'F'"}
{"sample_id": 2275, "db_id": "movielens", "final": {"question": "What is the difference of female and male audiences in number who viewed horror movies?", "sql": "SELECT SUM(IIF(T2.u_gender = 'F', 1, 0)) - SUM(IIF(T2.u_gender = 'M', 1, 0)) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid INNER JOIN movies2directors AS T3 ON T3.movieid = T1.movieid WHERE T3.genre = 'horror'", "source_tables": ["u2base", "users", "movies2directors"]}, "evidence": "The audience and users are the same meaning; Difference of female and male audiences = count(female users) - count(male users); Female users refers to u_gender = 'F'; Male users refers to u_gender = 'M'"}
{"sample_id": 2333, "db_id": "movielens", "final": {"question": "Which actor has appeared in the most films?", "sql": "SELECT actorid FROM movies2actors GROUP BY actorid ORDER BY COUNT(movieid) DESC LIMIT 1", "source_tables": ["movies2actors"]}, "evidence": ""}
{"sample_id": 2308, "db_id": "movielens", "final": {"question": "Please list movie IDs which has the oldest publication date and the cast numbers are zero.", "sql": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.cast_num = 0", "source_tables": ["movies2actors", "movies"]}, "evidence": "Year contains relative value, higher year value refers to newer date; Year = 1 refer to oldest date"}
{"sample_id": 2317, "db_id": "movielens", "final": {"question": "What's different average revenue status for director who directed the movie that got the most 1 ratings?", "sql": "SELECT DISTINCT T1.avg_revenue FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5", "source_tables": ["movies2directors", "directors"]}, "evidence": ""}
{"sample_id": 2300, "db_id": "movielens", "final": {"question": "Which genre contains the greatest number of non-English films?", "sql": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.isEnglish = 'F' GROUP BY T2.genre ORDER BY COUNT(T1.movieid) DESC LIMIT 1", "source_tables": ["movies", "movies2directors"]}, "evidence": "isEnglish = 'F' means non-English"}
{"sample_id": 2301, "db_id": "movielens", "final": {"question": "List the cast and the director of the movie with the id 1949144.", "sql": "SELECT T1.actorid, T2.directorid FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.movieid = 1949144", "source_tables": ["movies2actors", "movies2directors"]}, "evidence": ""}
{"sample_id": 2276, "db_id": "movielens", "final": {"question": "Please list the genre of the movies that are the newest and is in English.", "sql": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 4 AND T1.isEnglish = 'T'", "source_tables": ["movies", "movies2directors"]}, "evidence": "Year contains relative value, higher year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; In English means isEnglish = T"}
{"sample_id": 2293, "db_id": "movielens", "final": {"question": "List the ids and ratings of each actors played in the movie with the id 1722327?", "sql": "SELECT T1.actorid, T1.a_quality FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1722327", "source_tables": ["movies2actors", "actors"]}, "evidence": ""}
{"sample_id": 2280, "db_id": "movielens", "final": {"question": "Among divergent movies that got the highest rating, how many of them are from the UK?", "sql": "SELECT COUNT(DISTINCT T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'UK' AND T1.rating = 5", "source_tables": ["u2base", "movies"]}, "evidence": "UK is a country"}
{"sample_id": 2335, "db_id": "movielens", "final": {"question": "What are the most common film genres made by the worst directors?", "sql": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 0 GROUP BY T2.genre ORDER BY COUNT(T2.movieid) DESC LIMIT 1", "source_tables": ["movies2directors", "directors"]}, "evidence": "d_quality = 5 refers to the best directors, d_quality = 0 refers to the worst directors"}
{"sample_id": 2263, "db_id": "movielens", "final": {"question": "Please list down the ID of actors and directors in action movies.", "sql": "SELECT T2.actorid, T1.directorid FROM movies2directors AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.genre = 'Action'", "source_tables": ["movies2actors", "movies2directors"]}, "evidence": ""}
{"sample_id": 2302, "db_id": "movielens", "final": {"question": "Among the actors who acted in UK movies, what percentage of actors received a rating of at least 3?", "sql": "SELECT CAST(SUM(IIF(T3.a_quality >= 3, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'", "source_tables": ["movies2actors", "movies", "actors"]}, "evidence": "UK is a country"}
{"sample_id": 2294, "db_id": "movielens", "final": {"question": "Which directors with the best quality directed the most films?", "sql": "SELECT T1.directorid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5 GROUP BY T1.directorid ORDER BY COUNT(T2.movieid) DESC LIMIT 1", "source_tables": ["movies2directors", "directors"]}, "evidence": "d_quality = 5 refers to direct the best"}
{"sample_id": 2298, "db_id": "movielens", "final": {"question": "List the IDs of all the directors who worked on French films.", "sql": "SELECT T2.directorid FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France'", "source_tables": ["movies", "movies2directors"]}, "evidence": "France is a country"}
{"sample_id": 2269, "db_id": "movielens", "final": {"question": "What is the ID of actors that acted in the movies most viewed by audience with occupation 5?", "sql": "SELECT T3.actorid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid INNER JOIN movies2actors AS T3 ON T2.movieid = T3.movieid WHERE T1.occupation = 5 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1", "source_tables": ["u2base", "movies2actors", "users"]}, "evidence": "The audience and users are the same meaning"}
{"sample_id": 2336, "db_id": "movielens", "final": {"question": "What non-English American film/s has received the lowest user ratings? Mention the movie's I.D.", "sql": "SELECT T2.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.isEnglish = 'F' AND T1.country = 'USA' ORDER BY T2.rating LIMIT 1", "source_tables": ["u2base", "movies"]}, "evidence": "USA is a country; non-English means isEnglish = 'F'"}
{"sample_id": 2252, "db_id": "movielens", "final": {"question": "What is the average occupation of users whose ratings are not more than 2 ?", "sql": "SELECT AVG(T2.occupation) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating < 2", "source_tables": ["u2base", "users"]}, "evidence": ""}
{"sample_id": 2268, "db_id": "movielens", "final": {"question": "What is the favourite movie genre for audiences of age 18?", "sql": "SELECT T1.genre FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN users AS T3 ON T2.userid = T3.userid WHERE T3.age = 18 GROUP BY T1.genre ORDER BY COUNT(T1.movieid) DESC LIMIT 1", "source_tables": ["u2base", "users", "movies2directors"]}, "evidence": "The audience and users are the same meaning"}
{"sample_id": 2299, "db_id": "movielens", "final": {"question": "List all of the user ids and ages who rated movies with the id 1695219?", "sql": "SELECT T2.userid, T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.movieid = 1695219", "source_tables": ["u2base", "users"]}, "evidence": ""}
{"sample_id": 2307, "db_id": "movielens", "final": {"question": "How many American movies have cast number more than 1?", "sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'USA' AND T2.cast_num > 1", "source_tables": ["movies2actors", "movies"]}, "evidence": "USA is a country"}
{"sample_id": 2316, "db_id": "movielens", "final": {"question": "What is the disparate number of the comedy films that got the 1 rating?", "sql": "SELECT COUNT(DISTINCT T1.movieid) FROM movies2directors AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T2.rating = 1 AND T1.genre = 'comedy'", "source_tables": ["u2base", "movies2directors"]}, "evidence": ""}
{"sample_id": 2296, "db_id": "movielens", "final": {"question": "How many of the movies rated 5 are rated by a user between the ages of 25 and 35?", "sql": "SELECT COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.age BETWEEN 25 AND 35", "source_tables": ["u2base", "users"]}, "evidence": ""}
{"sample_id": 2339, "db_id": "movielens", "final": {"question": "How many female actresses appeared in the movie 2312852, what country was it in, and what was it's running time?", "sql": "SELECT SUM(IIF(T1.a_gender = 'F', 1, 0)) , T3.country, T3.runningtime FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T2.movieid = 2312852 GROUP BY T3.country, T3.runningtime", "source_tables": ["movies2actors", "movies", "actors"]}, "evidence": "female actresses mean that a_gender = 'F'"}
{"sample_id": 2284, "db_id": "movielens", "final": {"question": "For different directors who direct well, how many of them have directed an action film?", "sql": "SELECT COUNT(DISTINCT T2.directorid) FROM movies2directors AS T2 INNER JOIN directors AS T3 ON T2.directorid = T3.directorid WHERE T2.genre = 'Action' AND T3.d_quality = 4", "source_tables": ["movies2directors", "directors"]}, "evidence": "direct well means the quality of directing is good, which means d_quality = 4."}
{"sample_id": 2315, "db_id": "movielens", "final": {"question": "Please calculate negative critical reception of American movies", "sql": "SELECT CAST(SUM(IIF(T1.rating = 1, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA'", "source_tables": ["u2base", "movies"]}, "evidence": "'negative critical reception' refers to percentage of movies with a rating of 1, which = [count(rating = 1) / count(all movies)] * 100% "}
{"sample_id": 2267, "db_id": "movielens", "final": {"question": "UK produced what genre of movies?", "sql": "SELECT T2.genre FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'UK'", "source_tables": ["movies", "movies2directors"]}, "evidence": "UK is a country"}
{"sample_id": 2455, "db_id": "superstore", "final": {"question": "Who ordered the order ID CA-2011-118976 from the East region?", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Order ID\" = 'CA-2011-118976' AND T2.Region = 'East'", "source_tables": ["people", "east_superstore"]}, "evidence": "Who refers to \"Customer Name\""}
{"sample_id": 2450, "db_id": "superstore", "final": {"question": "List the product's name bought by the customer named Bill Shonely from the Central region.", "sql": "SELECT DISTINCT T3.\"Product Name\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Bill Shonely' AND T2.Region = 'Central'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": ""}
{"sample_id": 2373, "db_id": "superstore", "final": {"question": "What is the total sales of 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' in the Central region?", "sql": "SELECT SUM(T1.Sales) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' AND T2.Region = 'Central'", "source_tables": ["central_superstore", "product"]}, "evidence": "'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' is the \"Product Name\";"}
{"sample_id": 2391, "db_id": "superstore", "final": {"question": "Provide the names of the products with a profit greater than 98% of the average profit of all products in the East region.", "sql": "SELECT DISTINCT T2.\"Product Name\" FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Region = 'East' AND T1.Profit > ( SELECT AVG(Profit) * 0.98 FROM east_superstore )", "source_tables": ["product", "east_superstore"]}, "evidence": "names of the products refers to \"Product Name\";\u00a0 profit greater than 98% of the average profit refers to Profit > MULTIPLY(AVG(Profit), 0.98)"}
{"sample_id": 2368, "db_id": "superstore", "final": {"question": "Name 10 products that were shipped first class from the East region.", "sql": "SELECT T2.\"Product Name\" FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Mode\" = 'First Class' AND T2.Region = 'East' LIMIT 10", "source_tables": ["product", "east_superstore"]}, "evidence": "shipped first class refers to \"Ship Mode\" = 'First Class'; Region = 'East'"}
{"sample_id": 2407, "db_id": "superstore", "final": {"question": "List the name of all products in the west superstore that customers chose for same-day shipment in the year 2013.", "sql": "SELECT T2.\"Product Name\" FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Mode\" = 'Same Day' AND T1.\"Ship Date\" LIKE '2013%'", "source_tables": ["west_superstore", "product"]}, "evidence": "name of all products refers to Product Name; same-day shipment refers to \"Ship Mode\" = 'Same Day'; year 2013 refers to \"Ship Date\" BETWEEN '2013-01-01' AND '2013-12-31'"}
{"sample_id": 2392, "db_id": "superstore", "final": {"question": "Name the customers from the Eastern region whose orders cost above 80000.", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Region = 'East' AND T1.Sales / (1 - T1.Discount) * T1.Quantity - T1.Profit > 80000", "source_tables": ["people", "east_superstore"]}, "evidence": "cost above 80000 refers to SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit) > 80000"}
{"sample_id": 2452, "db_id": "superstore", "final": {"question": "Among the customers from Houston, Texas, what is the total profit of their orders in the Central region?", "sql": "SELECT SUM(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.City = 'Houston' AND T1.State = 'Texas' AND T2.Region = 'Central'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "customers from Houston, Texas refers to State = 'Texas' and City = 'Houston'; total profit = sum(Profit)"}
{"sample_id": 2460, "db_id": "superstore", "final": {"question": "Among the customers from Indiana, what is the percentage of their purchased orders in the Central region with no discount?", "sql": "SELECT CAST(SUM(CASE  WHEN T2.Discount = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.Region = 'Central' AND T1.State = 'Indiana'", "source_tables": ["people", "central_superstore"]}, "evidence": "Indiana refers to State = 'Indiana'; no discount refers to Discount = 0; percentage = divide(sum(Discount) when Discount = 0, count(Discount)) as percentage"}
{"sample_id": 2413, "db_id": "superstore", "final": {"question": "What is the total sales of furniture products in the east superstore in the year 2016.\n", "sql": "SELECT SUM(T1.Sales) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE STRFTIME('%Y', T1.\"Order Date\") = '2016' AND T2.Category = 'Furniture'", "source_tables": ["product", "east_superstore"]}, "evidence": "furniture products refers to Category = 'Furnitures'; in the year 2016 refers to \"Order Date\" BETWEEN '2016-01-01' AND '2016-12-31'"}
{"sample_id": 2421, "db_id": "superstore", "final": {"question": "Calculate the difference between the total sales in the East superstore and the total sales in the West superstore.", "sql": "SELECT SUM(T1.Sales) - SUM(T2.Sales) AS difference FROM east_superstore AS T1 INNER JOIN west_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\"", "source_tables": ["west_superstore", "east_superstore"]}, "evidence": "East superstore refers to Region = 'East'; West superstore refers to Region = 'West'; difference = subtract(sum(Sales) when Region = 'East', sum(Sales) when Region = 'West')"}
{"sample_id": 2434, "db_id": "superstore", "final": {"question": "How many of the \"Hon Pagoda Stacking Chairs\" have been sold in total in the west superstore?", "sql": "SELECT SUM(T1.Quantity) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Hon Pagoda Stacking Chairs'", "source_tables": ["west_superstore", "product"]}, "evidence": "Hon Pagoda Stacking Chairs' is the \"Product Name\"; west superstore refers to Region = 'West'"}
{"sample_id": 2428, "db_id": "superstore", "final": {"question": "What is the shipment duration for order number CA-2011-134103?", "sql": "SELECT DISTINCT strftime('%J', \"Ship Date\") - strftime('%J', \"Order Date\") AS duration FROM central_superstore WHERE \"Order ID\" = 'CA-2011-134103'", "source_tables": ["central_superstore"]}, "evidence": "shipment duration = subtract(\"Ship Date\", \"Order Date\"); order number CA-2011-134103 refers to \"Order ID\" = 'CA-2011-134103'"}
{"sample_id": 2361, "db_id": "superstore", "final": {"question": "What is the name of the product that has the highest original price?", "sql": "SELECT T2.\"Product Name\" FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" ORDER BY (T1.Sales / (1 - T1.Discount)) DESC LIMIT 1", "source_tables": ["product", "east_superstore"]}, "evidence": "has the highest original price refers to MAX(DIVIDE(Sales, SUTRACT(1, discount))); name of the product refers to \"Product Name\""}
{"sample_id": 2353, "db_id": "superstore", "final": {"question": "Please list the names of all the customers who had ordered the product \"Telescoping Adjustable Floor Lamp\".", "sql": "SELECT DISTINCT T1.\"Customer Name\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T3.\"Product Name\" = 'Telescoping Adjustable Floor Lamp'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "\"Telescoping Adjustable Floor Lamp\" is a product name; names of all the customers refers to \"Customer Name\""}
{"sample_id": 2400, "db_id": "superstore", "final": {"question": "Calculate the total cost of the orders by Brad Thomas in 2016.", "sql": "SELECT SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) AS cost FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T1.\"Product ID\" = T3.\"Product ID\" AND T1.Region = T3.Region WHERE T1.Region = 'East' AND T2.\"Customer Name\" = 'Brad Thomas' AND strftime('%Y', T1.\"Order Date\") = '2016'", "source_tables": ["people", "product", "east_superstore"]}, "evidence": "Brad Thomas is the \"Customer Name\"; in 2016 refers to strftime('%Y', \"Order Date\") = '2016'; total cost refers to SUM(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))"}
{"sample_id": 2381, "db_id": "superstore", "final": {"question": "What are the total sales of the accumulated orders of Hon Valutask Swivel Chairs in the West region?", "sql": "SELECT SUM(T1.Sales) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Hon Valutask Swivel Chairs' AND T1.Region = 'West'", "source_tables": ["west_superstore", "product"]}, "evidence": "'Hon Valutask Swivel Chairs' is the \"Product Name\""}
{"sample_id": 2349, "db_id": "superstore", "final": {"question": "Please list the IDs of the orders made by Aimee Bixby with more than 3 kinds of products ordered.", "sql": "SELECT DISTINCT T2.\"Order ID\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' GROUP BY T2.\"Product ID\" HAVING COUNT(T2.\"Product ID\") > 3", "source_tables": ["people", "central_superstore"]}, "evidence": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; with more than 3 kinds of products ordered refers to count(\"Product ID\") > 3;"}
{"sample_id": 2395, "db_id": "superstore", "final": {"question": "Calculate the total profit by Cisco SPA301 for all regions.", "sql": "SELECT SUM(T1.Profit) + SUM(T2.Profit) + SUM(T3.Profit) + SUM(T4.Profit) AS totalProfit FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN central_superstore AS T3 ON T3.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN south_superstore AS T4 ON T4.\"Customer ID\" = T3.\"Customer ID\" INNER JOIN product AS T5 ON T5.\"Product ID\" = T4.\"Product ID\" WHERE T5.\"Product Name\" = 'Cisco SPA301'", "source_tables": ["east_superstore", "central_superstore", "south_superstore", "product", "west_superstore"]}, "evidence": "Cisco SPA301' is the \"Product Name\"; all regions refers to central_superstore, south_superstore, west_superstore, east_superstore"}
{"sample_id": 2363, "db_id": "superstore", "final": {"question": "How many quantities of Advantus plastic paper clips were ordered overall?", "sql": "SELECT SUM(T1.Quantity) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Advantus Plastic Paper Clips'", "source_tables": ["central_superstore", "product"]}, "evidence": "Advantus plastic paper clips is the \"Product Name\";"}
{"sample_id": 2398, "db_id": "superstore", "final": {"question": "Compare the numbers of orders between the Eastern and Western stores in 2015.", "sql": "SELECT east, west FROM ( SELECT COUNT(\"Order ID\") AS east , ( SELECT COUNT(\"Order ID\") FROM west_superstore WHERE \"Order Date\" LIKE '2015%' ) AS west FROM east_superstore WHERE \"Order Date\" LIKE '2015%' )", "source_tables": ["west_superstore", "east_superstore"]}, "evidence": "in 2015 refers to strftime('%Y', \"Order Date\") = '2015'; Eastern store refers to east_superstore; Western store refers west_superstore;"}
{"sample_id": 2355, "db_id": "superstore", "final": {"question": "What was the quantity of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?", "sql": "SELECT SUM(T2.Quantity) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND T3.\"Product Name\" = 'Xerox 1952' AND T2.\"Order Date\" = '2014-09-10'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Xerox 1952 is a \"Product Name\"; ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; on 2014/9/10 refers to \"Order Date\" = date('2014-09-10');"}
{"sample_id": 2422, "db_id": "superstore", "final": {"question": "What are the names of the ordered products that have profit deficiency in central superstore?", "sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Region = 'Central' AND T1.Profit < 0", "source_tables": ["central_superstore", "product"]}, "evidence": "names of the ordered products refers to Product Name; deficiency refers to profit value is negative; profit > 0"}
{"sample_id": 2401, "db_id": "superstore", "final": {"question": "Provide the names, cities, and countries of the customers who ordered the Plantronics single ear headset.", "sql": "SELECT DISTINCT T2.\"Customer Name\", T2.City, T2.Country FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Plantronics Single Ear Headset'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "Plantronics Single Ear Headset' is the \"Product Name\"; name refers to \"Customer Name\";"}
{"sample_id": 2402, "db_id": "superstore", "final": {"question": "Provide the shipping dates and products of the orders by Gene Hale.", "sql": "SELECT DISTINCT T2.\"Ship Date\", T3.\"Product Name\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Gene Hale'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Gene Hale' refers to \"Customer Name\"; shipping date refers to \"Ship Date\"; products refers to \"Product Name\""}
{"sample_id": 2423, "db_id": "superstore", "final": {"question": "In west superstore, what is the name and the shipping mode of the product that was ordered with the shortest shipment time?", "sql": "SELECT DISTINCT T2.\"Product Name\", T1.\"Ship Mode\" FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Region = 'West' ORDER BY T1.\"Ship Date\" - T1.\"Order Date\" LIMIT 1", "source_tables": ["west_superstore", "product"]}, "evidence": "name refers to \"Product Name\"; shipping mode refers to Ship Mode; shortest shipment time refers to min(subtract(Ship Date, Order Date))"}
{"sample_id": 2394, "db_id": "superstore", "final": {"question": "Who ordered the Bush Mission Pointe Library in the Central Region?", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM central_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Bush Mission Pointe Library' AND T3.Region = 'Central'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Bush Mission Pointe Library' is the \"Product Name\";"}
{"sample_id": 2456, "db_id": "superstore", "final": {"question": "Provide the product's name of the product with the highest sales in the South region.", "sql": "SELECT T2.\"Product Name\" FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Region = 'South' ORDER BY T1.Sales DESC LIMIT 1", "source_tables": ["south_superstore", "product"]}, "evidence": "highest sales refers to max(Sales)"}
{"sample_id": 2424, "db_id": "superstore", "final": {"question": "How many orders of O'Sullivan Plantations 2-Door Library in Landvery Oak in central superstore were shipped through the shipping mode with the fastest delivery speed?", "sql": "SELECT COUNT(DISTINCT T1.\"Order ID\") FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'O''Sullivan Plantations 2-Door Library in Landvery Oak' AND T2.Region = 'Central' AND T1.\"Ship Mode\" = 'First Class'", "source_tables": ["central_superstore", "product"]}, "evidence": "'O'Sullivan Cherrywood Estates Traditional Bookcase' is the \"Product Name\"; shipping mode with the fastest delivery speed refers to \"Ship Mode\" = 'First Class'"}
{"sample_id": 2372, "db_id": "superstore", "final": {"question": "Which item was shipped on 3/4/2013 and scheduled for same day delivery in the South region?", "sql": "SELECT T2.\"Product Name\" FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Date\" = '2013-03-04' AND T2.Region = 'South' AND T1.\"Order Date\" = '2013-03-04'", "source_tables": ["south_superstore", "product"]}, "evidence": "shipped on 3/4/2013 refers to \"Order Date\" = date('2013-03-04'); same day delivery refers to \"Ship Mode\" = 'Same Day'; item refers to \"Product Name\""}
{"sample_id": 2384, "db_id": "superstore", "final": {"question": "From which city and state does the customer that bought the product with the highest sales?", "sql": "SELECT T5.City, T5.State FROM west_superstore AS T1 INNER JOIN east_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN central_superstore AS T3 ON T3.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN south_superstore AS T4 ON T4.\"Customer ID\" = T3.\"Customer ID\" INNER JOIN people AS T5 ON T5.\"Customer ID\" = T4.\"Customer ID\" ORDER BY T2.Sales DESC LIMIT 1", "source_tables": ["east_superstore", "central_superstore", "south_superstore", "people", "west_superstore"]}, "evidence": "highest sales refers to max(Sales)"}
{"sample_id": 2388, "db_id": "superstore", "final": {"question": "List down the customers that purchased the product named Xerox 23 in the South region.", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T1.Region = 'South' AND T3.\"Product Name\" = 'Xerox 23'", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "product named Xerox 23 refers to \"Product Name\" = 'Xerox 23'; customers refers to \"Customer Name\""}
{"sample_id": 2415, "db_id": "superstore", "final": {"question": "Calculate the percentage of ordered office supplies products in the central and the south superstore.", "sql": "SELECT CAST(SUM(CASE  WHEN T3.Category = 'Office Supplies' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Category) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\"", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "office supplies products refers to Category = 'Office Supplies'; central refers to Region = 'Central'; south superstore refers to Region = 'South'; percentage = divide(SUM(Product ID where Category = 'Office Supplies'), count(Product ID)) * 100 where Region = 'Central' OR Region = 'South'"}
{"sample_id": 2427, "db_id": "superstore", "final": {"question": "In which segment does the customer who purchased the product from the east superstore with the highest original price belong?", "sql": "SELECT T2.Segment FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T1.Region = 'East' ORDER BY (T1.Sales / (1 - T1.Discount)) DESC LIMIT 1", "source_tables": ["people", "product", "east_superstore"]}, "evidence": "highest original price refers to max(divide(Sales, subtract(1, Discount)))"}
{"sample_id": 2348, "db_id": "superstore", "final": {"question": "How many orders has Aimee Bixby made?", "sql": "SELECT COUNT(DISTINCT T2.\"Order ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby'", "source_tables": ["people", "central_superstore"]}, "evidence": "Aimee Bixby made refers to \"Customer Name\" = 'Aimee Bixby';"}
{"sample_id": 2383, "db_id": "superstore", "final": {"question": "What product was ordered in the Central region on April 26, 2018, and shipped by April 27, 2018?", "sql": "SELECT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Order Date\" = '2018-04-26' AND T1.\"Ship Date\" = '2018-04-27' AND T2.Region = 'Central'", "source_tables": ["central_superstore", "product"]}, "evidence": "on April 26, 2018 refers to \"Order Date\" = date('2018-04-26'); shipped by April 27, 2018 refers to \"Ship Date\" = date('2018-04-27');"}
{"sample_id": 2445, "db_id": "superstore", "final": {"question": "What is the product name of order CA-2011-115791 in the East superstore?", "sql": "SELECT DISTINCT T2.\"Product Name\" FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Order ID\" = 'CA-2011-141817'", "source_tables": ["product", "east_superstore"]}, "evidence": "order CA-2011-115791 refers to \"Order ID\" = 'CA-2011-115791'"}
{"sample_id": 2352, "db_id": "superstore", "final": {"question": "What is the total quantity of \"Telescoping Adjustable Floor Lamp\" ordered from central superstores?", "sql": "SELECT SUM(T1.Quantity) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Telescoping Adjustable Floor Lamp'", "source_tables": ["central_superstore", "product"]}, "evidence": "\"Telescoping Adjustable Floor Lamp\" is a \"Product Name\"; from central superstores refers to Region = 'Central';"}
{"sample_id": 2378, "db_id": "superstore", "final": {"question": "What percentage do items under the category of 'Furniture' make up the total number of items ordered that are shipped as standard in the West region?", "sql": "SELECT CAST(SUM(CASE  WHEN T2.Category = 'Furniture' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T1.Quantity) FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Region = 'West' AND T1.\"Ship Mode\" = 'Standard Class'", "source_tables": ["west_superstore", "product"]}, "evidence": "shipped as standard refers to \"Ship Mode\" = 'Standard Class'; Region = 'West'; percentage refers to DIVIDE(SUM(Quantity where Category = 'Furniture'), SUM(Quantity)) * 1.0"}
{"sample_id": 2357, "db_id": "superstore", "final": {"question": "What was the original price of Xerox 1952 ordered by Aimee Bixby on 2014/9/10?", "sql": "SELECT DISTINCT T2.Sales / (1 - T2.Discount) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND T3.\"Product Name\" = 'Xerox 1952' AND T2.\"Order Date\" = '2014-09-10'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Xerox 1952 is a \"Product Name\"; ordered by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; on 2014/9/10 refers to \"Order Date\" = date('2014-09-10'); original price refers to DIVIDE(Sales, SUTRACT(1, discount))"}
{"sample_id": 2397, "db_id": "superstore", "final": {"question": "List the products ordered by customers in Coachella.", "sql": "SELECT DISTINCT T3.\"Product Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.City = 'Coachella'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "in Coachella refers to City = 'Coachella'; products refers to \"Product Name\""}
{"sample_id": 2457, "db_id": "superstore", "final": {"question": "List down the sales, profit, and subcategories of the product ordered in the order ID US-2011-126571 in the East region.", "sql": "SELECT T1.Sales, T1.Profit, T2.\"Sub-Category\" FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Order ID\" = 'US-2011-126571' AND T2.Region = 'East'", "source_tables": ["product", "east_superstore"]}, "evidence": ""}
{"sample_id": 2385, "db_id": "superstore", "final": {"question": "Who is the customer from the East region that purchased the order with the highest profit?", "sql": "SELECT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Region = 'East' ORDER BY T1.Profit DESC LIMIT 1", "source_tables": ["people", "east_superstore"]}, "evidence": "highest profit refers to MAX(profit); Region = 'East'"}
{"sample_id": 2405, "db_id": "superstore", "final": {"question": "What product category got the highest profit in the south superstore?", "sql": "SELECT T2.Category FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" ORDER BY T1.Profit DESC LIMIT 1", "source_tables": ["south_superstore", "product"]}, "evidence": "highest profit refers to MAX(Profit)"}
{"sample_id": 2347, "db_id": "superstore", "final": {"question": "Among all the orders made by Aimee Bixby, how many of them chose the slowest delivery speed?", "sql": "SELECT COUNT(DISTINCT T2.\"Order ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND T2.\"Ship Mode\" = 'Standard Class'", "source_tables": ["people", "central_superstore"]}, "evidence": "made by Aimee Bixby refers to \"Customer Name\" = 'Aimee Bixby'; the slowest delivery speed refers to \"Ship Mode\" = 'Standard Class';"}
{"sample_id": 2453, "db_id": "superstore", "final": {"question": "Who is the customer with an order shipped on March 5, 2013, in the eastern region?", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Ship Date\" = '2013-03-05'", "source_tables": ["people", "east_superstore"]}, "evidence": "Who is the customer refers to Customer Name; shipped on March 5, 2013 refers to \"Ship Date\" = '2013-03-05'; eastern region refers to Region = 'East'"}
{"sample_id": 2390, "db_id": "superstore", "final": {"question": "Who is the customer from the West region that received the highest discount?", "sql": "SELECT T2.\"Customer Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Region = 'West' ORDER BY T1.Discount DESC LIMIT 1", "source_tables": ["people", "west_superstore"]}, "evidence": "received the highest discount refers to MAX(discount); customer refers to \"Customer Name\""}
{"sample_id": 2345, "db_id": "superstore", "final": {"question": "Please list the names of all the products ordered in order CA-2011-112326 in superstores in the center.", "sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Order ID\" = 'CA-2011-112326'", "source_tables": ["central_superstore", "product"]}, "evidence": "names of all the products refers to \"Product Name\"; order CA-2011-112326 refers to \"Order ID\" = 'CA-2011-112326'; in the center refers to Region = 'Central';"}
{"sample_id": 2403, "db_id": "superstore", "final": {"question": "How many orders in the south superstore with the fastest delivery are items of furniture?", "sql": "SELECT COUNT(T1.\"Order ID\") FROM south_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Mode\" = 'First Class' AND T2.Category = 'Furniture'", "source_tables": ["south_superstore", "product"]}, "evidence": "fastest delivery refers to Ship Mode = 'First Class'; furniture refers to Category = 'Furniture'"}
{"sample_id": 2375, "db_id": "superstore", "final": {"question": "How much is the total quantity of items from the East region shipped on 3/25/2015? Name the products.", "sql": "SELECT SUM(T1.Quantity), T2.\"Product Name\" FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Date\" = '2015-03-25' AND T2.Region = 'East'", "source_tables": ["product", "east_superstore"]}, "evidence": "shipped on 3/25/2015 refers to \"Ship Date\" = Date('2015-03-25');"}
{"sample_id": 2448, "db_id": "superstore", "final": {"question": "Who order from the west region on August 12, 2013, and received a discount of 0.2?", "sql": "SELECT DISTINCT T2.\"Customer Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Order Date\" = '2013-08-12' AND T1.Discount = 0.2 AND T1.Region = 'West'", "source_tables": ["people", "west_superstore"]}, "evidence": "Who refers to \"Customer Name\"; on August 12, 2013 refers to \"Order Date\" = '2013-08-12'; discount of 0.2 refers to discount = 0.2"}
{"sample_id": 2454, "db_id": "superstore", "final": {"question": "Among the orders from 2016 in the Central region, what is the product with the lowest profit?", "sql": "SELECT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Region = 'Central' AND STRFTIME('%Y', T1.\"Order Date\") = '2016' ORDER BY T1.Profit ASC LIMIT 1", "source_tables": ["central_superstore", "product"]}, "evidence": "orders from 2016 refers to \"Order Date\" = '2016%'; product refers to \"Product Name\"; lowest profit refers to min(Profit)"}
{"sample_id": 2431, "db_id": "superstore", "final": {"question": "Which product did Phillina Ober buy?", "sql": "SELECT DISTINCT T3.\"Product Name\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Phillina Ober'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "product refers to \"Product Name\""}
{"sample_id": 2436, "db_id": "superstore", "final": {"question": "What is the original price of the \"Black Avery Flip-Chart Easel Binder\"?", "sql": "SELECT T1.Sales / (1 - T1.Discount) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Blackstonian Pencils'", "source_tables": ["central_superstore", "product"]}, "evidence": "\"Black Avery Flip-Chart Easel Binder\" is the \"Product Name\"; original price = divide(Sales, subtract(1, Discount))"}
{"sample_id": 2369, "db_id": "superstore", "final": {"question": "List the products ordered by Becky Martin around the Central region.", "sql": "SELECT DISTINCT T3.\"Product Name\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Becky Martin' AND T3.Region = 'Central'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "ordered by Becky Martin refers to \"Customer Name\" = 'Becky Martin'; Region = 'Central'; products refers to \"Product Name\""}
{"sample_id": 2354, "db_id": "superstore", "final": {"question": "Among the customers who have ordered the product \"Telescoping Adjustable Floor Lamp\", how many of them are consumers?", "sql": "SELECT COUNT(DISTINCT T1.\"Customer Name\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T3.\"Product Name\" = 'Telescoping Adjustable Floor Lamp' AND T1.Segment = 'Consumer'", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "\"Telescoping Adjustable Floor Lamp\" is a \"Product Name\"; consumers refers to Segment = 'Consumer';"}
{"sample_id": 2425, "db_id": "superstore", "final": {"question": "What is the name of the corporate customer from Rhode Island who had the highest number of orders in 2016 from the east superstore?", "sql": "SELECT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.Segment = 'Corporate' AND T2.State = 'Rhode Island' AND T2.Region = 'East' AND STRFTIME('%Y', T1.\"Order Date\") = '2016' GROUP BY T2.\"Customer Name\" ORDER BY COUNT(T2.\"Customer Name\") DESC LIMIT 1", "source_tables": ["people", "east_superstore"]}, "evidence": "corporate customer refers to Segment = 'Corporate'; Rhode Island refers to State = 'Rhode Island'; in 2016 refers to \"Order Date\" BETWEEN '2016-01-01' AND '2016-12-31'; east superstore refers to Region = 'East'; highest number of orders refers to max(order_number); name of corporate customer refers to \"Customer Name\""}
{"sample_id": 2364, "db_id": "superstore", "final": {"question": "Which order of Logitech G600 MMO Gaming Mouse has the highest total cost?", "sql": "SELECT T1.\"Order ID\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Logitech G600 MMO Gaming Mouse' GROUP BY T1.\"Order ID\" ORDER BY SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) DESC LIMIT 1", "source_tables": ["central_superstore", "product"]}, "evidence": "Logitech G600 MMO Gaming Mouse refers to \"Product Name\"; highest total cost refers to MAX(SUTRACT(MULTIPLY(DIVIDE(Sales, SUTRACT(1, discount)), Quantity), Profit))"}
{"sample_id": 2433, "db_id": "superstore", "final": {"question": "What is the profit from selling the \"O'Sullivan Living Dimensions 2-Shelf Bookcases\"?", "sql": "SELECT DISTINCT T1.Profit FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'O''Sullivan Living Dimensions 2-Shelf Bookcases'", "source_tables": ["central_superstore", "product"]}, "evidence": "\"O'Sullivan Living Dimensions 2-Shelf Bookcases\" refers to \"Product Name\""}
{"sample_id": 2362, "db_id": "superstore", "final": {"question": "What is the name of the product that was ordered recently by Darren Powers?", "sql": "SELECT T3.\"Product Name\" FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Darren Powers' ORDER BY T2.\"Order Date\" DESC LIMIT 1", "source_tables": ["people", "central_superstore", "product"]}, "evidence": "Darren Powers is the \"Customer Name\"; name of the product refers to \"Product Name\"; recently refers to MAX(\"Order Date\")"}
{"sample_id": 2440, "db_id": "superstore", "final": {"question": "What is the highest profit order in the East superstore of customers from Houston, Texas?", "sql": "SELECT T1.\"Order ID\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.City = 'Houston' AND T2.State = 'Texas' ORDER BY T1.Profit DESC LIMIT 1", "source_tables": ["people", "east_superstore"]}, "evidence": "highest profit refers to max(Profit); Houston, Texas refers to City = 'Houston' and State = 'Texas'"}
{"sample_id": 2408, "db_id": "superstore", "final": {"question": "What product category that Sam Craven ordered from the central and east superstore?", "sql": "SELECT DISTINCT T3.Category FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" LEFT JOIN central_superstore AS T4 ON T3.\"Product ID\" = T4.\"Product ID\" WHERE T2.\"Customer Name\" = 'Sam Craven'", "source_tables": ["people", "central_superstore", "product", "east_superstore"]}, "evidence": ""}
{"sample_id": 2371, "db_id": "superstore", "final": {"question": "Add the total profit of Patrick Gardner in the Central region.", "sql": "SELECT SUM(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Patrick Gardner' AND T1.Region = 'Central'", "source_tables": ["people", "central_superstore"]}, "evidence": "Patrick Gardner is the \"Customer Name\"; Region = 'Central'"}
{"sample_id": 2443, "db_id": "superstore", "final": {"question": "How many orders were made by customers who live in Texas at the Central superstore?", "sql": "SELECT COUNT(DISTINCT T2.\"Order ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.State = 'Texas'", "source_tables": ["people", "central_superstore"]}, "evidence": "customer live in Texas refers to State = 'Texas'"}
{"sample_id": 2439, "db_id": "superstore", "final": {"question": "How many furniture products had been shipped by standard class in the East superstore?", "sql": "SELECT COUNT(T2.Category) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Mode\" = 'Standard Class'", "source_tables": ["product", "east_superstore"]}, "evidence": "furniture products refers to Category = 'Furniture'; shipped by standard class refers to \"Ship Mode\" = 'Standard Class'"}
{"sample_id": 2365, "db_id": "superstore", "final": {"question": "What are the names of the products that were ordered by Alejandro Grove?", "sql": "SELECT DISTINCT T3.\"Product Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Alejandro Grove'", "source_tables": ["people", "west_superstore", "product"]}, "evidence": "ordered by Alejandro Grove refers to \"Customer Name\" = 'Alejandro Grove'; names of the products refers to \"Product Name\""}
{"sample_id": 2432, "db_id": "superstore", "final": {"question": "Who was the customer in the South Region superstore who bought the most \u201cHon Multipurpose Stacking Arm Chairs\"?", "sql": "SELECT T2.\"Customer Name\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Hon Multipurpose Stacking Arm Chairs' GROUP BY T2.\"Customer Name\" ORDER BY COUNT(T2.\"Customer Name\") DESC LIMIT 1", "source_tables": ["south_superstore", "people", "product"]}, "evidence": "customer refers to \"Customer Name\"; \u201cHon Multipurpose Stacking Arm Chairs\" is the \"Product Name\";"}
{"sample_id": 2449, "db_id": "superstore", "final": {"question": "What is the order ID of the security-Tint Envelopes product ordered on June 3, 2013, in the Central region?", "sql": "SELECT DISTINCT T1.\"Order ID\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Product Name\" = 'Security-Tint Envelopes' AND T1.\"Order Date\" = '2013-06-03'", "source_tables": ["central_superstore", "product"]}, "evidence": "Security-Tint Envelopes' refers to \"Product Name\"; ordered on June 3, 2013 refers to \"Order Date\" = '2013-06-03'"}
{"sample_id": 2437, "db_id": "superstore", "final": {"question": "What is the name of the product that Aimee Bixby bought?", "sql": "SELECT DISTINCT T3.\"Product Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Aimee Bixby'", "source_tables": ["people", "product", "east_superstore"]}, "evidence": "name of the product refers to \"Product Name\""}
{"sample_id": 2479, "db_id": "shooting", "final": {"question": "Of the black officers, how many of them investigated cases between the years 2010 and 2015?", "sql": "SELECT COUNT(T1.case_number) FROM officers AS T1 INNER JOIN incidents AS T2 ON T2.case_number = T1.case_number WHERE T1.race = 'B' AND T2.date BETWEEN '2010-01-01' AND '2015-12-31'", "source_tables": ["incidents", "officers"]}, "evidence": "black refers to race = 'B'; between the years 2010 and 2015 refers to date between '2010-01-01' and '2015-12-31'; case refers to case_number"}
{"sample_id": 2477, "db_id": "shooting", "final": {"question": "How many incidents in which the subject's weapon was a vehicle were investigated by a female officer?", "sql": "SELECT COUNT(T1.case_number) FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_weapon = 'Vehicle' AND T2.gender = 'F'", "source_tables": ["incidents", "officers"]}, "evidence": "subject's weapon was a vehicle refers to subject_weapon = 'Vehicle'; female refers to gender = 'F'"}
{"sample_id": 2465, "db_id": "shooting", "final": {"question": "Did the number of cases with Vehicle as subject weapon increase or decrease from year 2007 to 2008. State the difference.", "sql": "SELECT SUM(IIF(STRFTIME('%Y', date) = '2007', 1, 0)) - SUM(IIF(STRFTIME('%Y', date) = '2008', 1, 0)) FROM incidents WHERE subject_weapon = 'Vehicle'", "source_tables": ["incidents"]}, "evidence": "number of cases refers to count(case_number); with Vehicle as subject weapon refers to subject_weapon = 'Vehicle'; year 2007 refers to date between '2007-01-01' and '2007-12-31'; year 2008 refers to date between '2008-01-01' and '2008-12-31'"}
{"sample_id": 2485, "db_id": "shooting", "final": {"question": "What percentage of deaths were caused by rifles?", "sql": "SELECT CAST(SUM(subject_statuses = 'Deceased') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Rifle'", "source_tables": ["incidents"]}, "evidence": "rifle refers to subject_weapon = 'rifles'; death refers to subject_statuses = 'Deceased'; percentage = divide(count(incidents where subject_weapon = 'rifles'), count(incidents)) where subject_statuses = 'Deceased' * 100%"}
{"sample_id": 2478, "db_id": "shooting", "final": {"question": "In how many cases where the subject was a female was the subject's status listed as Deceased?", "sql": "SELECT COUNT(T1.case_number) FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F' AND T1.subject_statuses = 'Deceased'", "source_tables": ["incidents", "subjects"]}, "evidence": " female refers to gender = 'F'; subject's status listed as Deceased refers to subject_statuses = 'Deceased'"}
{"sample_id": 2463, "db_id": "shooting", "final": {"question": "In which year has the greatest number of cases where Handgun was used as weapon?", "sql": "SELECT STRFTIME('%Y', date) FROM incidents WHERE subject_weapon = 'Handgun' GROUP BY STRFTIME('%Y', date) ORDER BY COUNT(case_number) DESC LIMIT 1", "source_tables": ["incidents"]}, "evidence": "year refers to year(date); the greatest number of cases refers to max(count(case_number)); OS Spray was used as weapon refers to subject_weapon = 'OS Spray'"}
{"sample_id": 2469, "db_id": "shooting", "final": {"question": "From the cases where the subject are male, list the case number and the location and subject status.", "sql": "SELECT T1.case_number, T1.location, T1.subject_statuses FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'M'", "source_tables": ["incidents", "subjects"]}, "evidence": "male refers to gender = 'M'"}
{"sample_id": 2473, "db_id": "shooting", "final": {"question": "What is the percentage of subject who are female used the Vehicle as weapon?", "sql": "SELECT CAST(SUM(T1.subject_weapon = 'Vehicle') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN subjects T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'", "source_tables": ["incidents", "subjects"]}, "evidence": "female refers to gender = 'F'; use Vehicle as weapon refers to subject_weapon = 'Vehicle'; percentage = divide(count(case_number where subject_weapon = 'Vehicle'), count(case_number)) where gender = 'F' * 100%"}
{"sample_id": 2474, "db_id": "shooting", "final": {"question": "From the 'Injured' statuses of the subject, what is the ratio of weapons used are knife against handgun?", "sql": "SELECT CAST(SUM(T1.subject_weapon = 'Knife') AS REAL) * 100 / SUM(T1.subject_weapon = 'Handgun') FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.subject_statuses = 'Injured'", "source_tables": ["incidents", "subjects"]}, "evidence": "the 'Shoot and Miss' status refers to subject_statuses = 'Shoot and Miss'; knife refers to subject_weapon = 'knife'; toy handgun refers to subject_weapon = 'toy handgun'; ratio = divide(count(case_number where subject_weapon = 'knife'), count(case_number where subject_weapon = 'toy handgun')) where subject_statuses = 'Shoot and Miss'"}
{"sample_id": 2475, "db_id": "shooting", "final": {"question": "List all cases from the year 2012 in which the subject was deceased", "sql": "SELECT case_number FROM incidents WHERE STRFTIME('%Y', date) > '2011' AND subject_statuses = 'Deceased'", "source_tables": ["incidents"]}, "evidence": "case refers to case_number; year 2012 refers to date between '2012-01-01' and '2012-12-31'; subject was deceased refers to subject_statuses = 'Deceased'"}
{"sample_id": 2482, "db_id": "shooting", "final": {"question": "What is the most common type of weapon that causes death?", "sql": "SELECT subject_weapon FROM incidents WHERE subject_statuses = 'Deceased' GROUP BY subject_weapon ORDER BY COUNT(case_number) DESC LIMIT 1", "source_tables": ["incidents"]}, "evidence": "the most common type of weapon refers to max(count(subject_weapon)); causes death refers to subject_statuses = 'Deceased'"}
{"sample_id": 2476, "db_id": "shooting", "final": {"question": "Of all male officers, what percentage are black officers?", "sql": "SELECT CAST(SUM(race = 'B') AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'", "source_tables": ["officers"]}, "evidence": "male refers to gender = 'M'; black refers to race = 'B'; percentage = divide(count(officers where race = 'B'), count(officers)) where gender = 'M' * 100%"}
{"sample_id": 2481, "db_id": "shooting", "final": {"question": "How many people were injured between 2006 and 2014 as a result of a handgun?", "sql": "SELECT COUNT(location) FROM incidents WHERE subject_weapon = 'Handgun' AND subject_statuses = 'Injured' AND date BETWEEN '2006-01-01' AND '2013-12-31'", "source_tables": ["incidents"]}, "evidence": "injured refers to subject_statuses = 'injured'; between 2006 and 2014 refers to date between '2006-01-01' and '2013-12-31'; handgun refers to subject_weapon = 'handgun'; where the incidents took place refers to location"}
{"sample_id": 2468, "db_id": "shooting", "final": {"question": "Which are the cases where the subject are female. List the case number, subject status and weapon.", "sql": "SELECT T1.case_number, T1.subject_statuses, T1.subject_weapon FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'", "source_tables": ["incidents", "subjects"]}, "evidence": "female refers to gender = 'F'; weapon refers to subject_weapon"}
{"sample_id": 2511, "db_id": "genes", "final": {"question": "Which negatively correlated, genetically interacting genes are non-essential? What percentage do they represent with respect to those that are essential?", "sql": "SELECT CAST(COUNT(T1.GeneID) AS REAL) * 100 / ( SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 ) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Essential = 'Non-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": "If the Expression_Corr value is negative then it's negatively correlated; Percentage of Essensity = [count(negatively correlated, genetical interaction, non-essential) / count(negatively correlated, genetical interaction, non-essential+negatively correlated, genetical interaction, essential)] * 100%"}
{"sample_id": 2496, "db_id": "genes", "final": {"question": "For the pairs of genes with one having 8 chromosomes and the other having 6 chromosomes, what is the highest expression correlation score?", "sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Chromosome = 6 OR T1.Chromosome = 8 ORDER BY T2.Expression_Corr DESC LIMIT 1", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2492, "db_id": "genes", "final": {"question": "Please list the location of the genes that have the most chromosomes.", "sql": "SELECT T2.Localization FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID ORDER BY T1.Chromosome DESC LIMIT 1", "source_tables": ["classification", "genes"]}, "evidence": ""}
{"sample_id": 2500, "db_id": "genes", "final": {"question": "If a pair of genes is positively correlated, what is the possibility of it being composed of two genes both with over 10 chromosomes?", "sql": "SELECT CAST(SUM(IIF(T1.Chromosome > 10 AND T3.Chromosome > 10, 1, 0)) AS REAL) * 100 / COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T2.Expression_Corr > 0", "source_tables": ["interactions", "genes"]}, "evidence": "Positively correlated means Expression_Corr > 0; Possibility = count(the pairs of genes with both chromosomes over 20) / count(pairs of genes that are positively correlated)"}
{"sample_id": 2489, "db_id": "genes", "final": {"question": "For the genes that are located in the plasma membrane, please list their number of chromosomes.", "sql": "SELECT T1.Chromosome FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'plasma membrane'", "source_tables": ["classification", "genes"]}, "evidence": ""}
{"sample_id": 2503, "db_id": "genes", "final": {"question": "How many different genes do we have if we add those located in the plasma and in the nucleus?", "sql": "SELECT COUNT(GeneID) FROM Classification WHERE Localization IN ('plasma', 'nucleus')", "source_tables": ["classification"]}, "evidence": ""}
{"sample_id": 2497, "db_id": "genes", "final": {"question": "Please list the motif of the genes that are located in the cytoplasm and have 7 chromosomes.", "sql": "SELECT T2.GeneID1, T2.GeneID2 FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization = 'cytoplasm' AND T1.Chromosome = 7", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2505, "db_id": "genes", "final": {"question": "What percentage of genes located in the cytoskeleton are of unknown class? And of these, how many are not conditional phenotypes?", "sql": "SELECT SUM(Localization = 'cytoskeleton' AND Phenotype = 'Conditional phenotypes') , CAST(SUM(Localization = 'cytoskeleton') AS REAL) * 100 / COUNT(GeneID) FROM Genes;", "source_tables": ["genes"]}, "evidence": "Percentage = count(genes located in the cytoskeleton unknown class) / count(genes located in the cytoskeleton) * 100%"}
{"sample_id": 2508, "db_id": "genes", "final": {"question": "Taking all the essential genes of the transcription factors class located in the nucleus as a reference, how many of them carry out a genetic-type interaction with another gene? List them.", "sql": "SELECT T2.GeneID1 FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization = 'nucleus' AND T1.Class = 'Transcription factors' AND T1.Essential = 'Essential' AND T2.Expression_Corr != 0", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2498, "db_id": "genes", "final": {"question": "For the non-essential genes whose functions are transcription, how many of them are not located in the cytoplasm?", "sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Localization != 'cytoplasm' AND T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'NON-Essential'", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2504, "db_id": "genes", "final": {"question": "What kind of expression correlation occurs in physical type interacting gene pairs and what percentage of these are negatively correlated?", "sql": "SELECT Expression_Corr FROM Interactions WHERE Type = 'Physical' UNION ALL SELECT CAST(SUM(Expression_Corr < 0) AS REAL) * 100 / COUNT(*) FROM Interactions WHERE Type = 'Physical'", "source_tables": ["interactions"]}, "evidence": "If the Expression_Corr value is negative then it's negatively correlated. Percentage of Negative Correlation = count(negative Expression_Corr physical type) / count(Expression_Corr physical type) * 100%"}
{"sample_id": 2501, "db_id": "genes", "final": {"question": "For the pairs of genes both from the class ATPases, what is the average expression correlation score?", "sql": "SELECT AVG(T2.Expression_Corr) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Class = 'ATPases'", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2494, "db_id": "genes", "final": {"question": "What are the functions of the pair of genes that have the lowest expression correlation score?a", "sql": "SELECT T1.Function FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 ORDER BY T2.Expression_Corr ASC LIMIT 1", "source_tables": ["interactions", "genes"]}, "evidence": ""}
{"sample_id": 2538, "db_id": "app_store", "final": {"question": "How many negative comments are there in all the apps with 100,000,000+ installs?", "sql": "SELECT COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '100,000,000+' AND T2.Sentiment = 'Negative'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "negative comment refers to Sentiment = 'Negative'; Installs = '100,000,000+';"}
{"sample_id": 2574, "db_id": "app_store", "final": {"question": "What is the average rating of Apps falling under the racing genre and what is the percentage ratio of positive sentiment reviews?", "sql": "SELECT AVG(T1.Rating), CAST(COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Racing'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "average rating = AVG(Rating); percentage = MULTIPLY(DIVIDE((SUM(Sentiment = 'Positive')), (COUNT(*)), 100));"}
{"sample_id": 2559, "db_id": "app_store", "final": {"question": "What is the percentage for free application with a rating 4.5 and above have not been updated since 2018?", "sql": "SELECT CAST(SUM(CASE WHEN SUBSTR('Last Updated', -4) > '2018' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(App) PER FROM playstore WHERE Type = 'Free' AND Rating >= 4.5", "source_tables": ["playstore"]}, "evidence": "paid refers to Type = 'Paid'; application refers to App; Rating>4.5; Last Updated>'2018; percentage = DIVIDE(SUM(Genres = 'Mature 17+' and Rating>4.5 and\u00a0substr(\"Last Updated\",-4,4)>'2018' )), (COUNT(App)) as percent;"}
{"sample_id": 2520, "db_id": "app_store", "final": {"question": "What are the top 5 installed free apps?", "sql": "SELECT App FROM playstore WHERE Price = 0 ORDER BY CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER) DESC LIMIT 5", "source_tables": ["playstore"]}, "evidence": "free app refers to price = 0; most installed app refers to MAX(Installs);"}
{"sample_id": 2540, "db_id": "app_store", "final": {"question": "What is the total Sentiment polarity score of the most expensive app?", "sql": "SELECT SUM(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Price = ( SELECT MAX(Price) FROM playstore )", "source_tables": ["playstore", "user_reviews"]}, "evidence": "total sentiment polarity score = sum(Sentiment_Polarity); most expensive app refers to MAX(Price);"}
{"sample_id": 2560, "db_id": "app_store", "final": {"question": "What genre does Honkai Impact 3rd belong to?", "sql": "SELECT DISTINCT Genres FROM playstore WHERE App = 'Honkai Impact 3rd'", "source_tables": ["playstore"]}, "evidence": "Honkai Impact 3rd is the App;"}
{"sample_id": 2554, "db_id": "app_store", "final": {"question": "What is the average review number for application with 5 rating?", "sql": "SELECT AVG(Reviews) FROM playstore WHERE Rating = 5", "source_tables": ["playstore"]}, "evidence": "average review = AVG(Review); application refers to app; Rating = 5;"}
{"sample_id": 2537, "db_id": "app_store", "final": {"question": "Which free app has the most Negative comments?", "sql": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Type = 'Free' AND T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY COUNT(T2.Sentiment) DESC LIMIT 1", "source_tables": ["playstore", "user_reviews"]}, "evidence": "paid app refers to Type = 'Paid'; negative comment refers to Sentiment = 'Negative'; paid app with most negative comments refers to MAX(COUNT(Sentiment = 'Negative')) where Type = 'Paid';"}
{"sample_id": 2529, "db_id": "app_store", "final": {"question": "Which of the app is the best selling app and what is the sentiments polarity of it?", "sql": "SELECT T1.App, T2.Sentiment_Polarity FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App ORDER BY T1.Price * CAST(REPLACE(REPLACE(Installs, ',', ''), '+', '') AS INTEGER) DESC LIMIT 1", "source_tables": ["playstore", "user_reviews"]}, "evidence": "best selling app = MAX(MULTIPLY(Price, Installs));"}
{"sample_id": 2569, "db_id": "app_store", "final": {"question": "For the Honkai Impact 3rd App, what is the highest sentiment polarity score and what genre does it belong to?", "sql": "SELECT MAX(T2.Sentiment_Polarity), T1.Genres FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Honkai Impact 3rd' AND T2.Sentiment_Polarity > 0.5 GROUP BY T1.Genres", "source_tables": ["playstore", "user_reviews"]}, "evidence": "highest sentiment polarity score refers to MAX(Sentiment_Polarity);"}
{"sample_id": 2519, "db_id": "app_store", "final": {"question": "How many apps have rating of 5?", "sql": "SELECT COUNT(App) FROM playstore WHERE Rating = 5", "source_tables": ["playstore"]}, "evidence": "FALSE;"}
{"sample_id": 2516, "db_id": "app_store", "final": {"question": "What is the average sentiment polarity score of the Cooking Fever app? Indicate the age group that the app is targeted at.", "sql": "SELECT AVG(T2.Sentiment_Polarity), T1.\"Content Rating\" FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Cooking Fever'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "average sentiment polarity score = AVG(Sentiment_Polarity); age group the app is target at refers to Content Rating;"}
{"sample_id": 2534, "db_id": "app_store", "final": {"question": "How many neutral reviews does the app \"Dino War: Rise of Beasts\" have?", "sql": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Dino War: Rise of Beasts' AND Sentiment = 'Neutral'", "source_tables": ["user_reviews"]}, "evidence": "neutral reviews refers to Sentiment = 'Neutral';"}
{"sample_id": 2521, "db_id": "app_store", "final": {"question": "Name the top 10 most reviewed apps.", "sql": "SELECT DISTINCT App FROM playstore ORDER BY Reviews DESC LIMIT 10", "source_tables": ["playstore"]}, "evidence": "most reviewed app refers to MAX(Reviews);"}
{"sample_id": 2527, "db_id": "app_store", "final": {"question": "Which apps have not been updated since year 2015 and what kind of sentiment users hold on it?", "sql": "SELECT DISTINCT App, Sentiment FROM user_reviews WHERE App IN ( SELECT App FROM playstore WHERE CAST(SUBSTR('Last Updated', -4, 4) AS INTEGER) < 2015 )", "source_tables": ["playstore", "user_reviews"]}, "evidence": "since year 2015 refers to \"Last Updated\"<'January 1, 2015';"}
{"sample_id": 2542, "db_id": "app_store", "final": {"question": "Which Photography app has the highest total Sentiment subjectivity score?", "sql": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Photography' GROUP BY T1.App ORDER BY SUM(T2.Sentiment_Subjectivity) DESC LIMIT 1", "source_tables": ["playstore", "user_reviews"]}, "evidence": "Photography app refers to Genre = 'Photography'; highest total sentiment subjectivity score = MAX(sum(Sentiment_Subjectivity));"}
{"sample_id": 2530, "db_id": "app_store", "final": {"question": "What is the average rating of comic category apps? How many users hold positive attitude towards this app?", "sql": "SELECT AVG(T1.Rating) , COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE NULL END) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'COMICS'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "average rating = AVG(Rating where Category = 'COMICS'); number of users who hold a positive attitude towards the app refers to SUM(Sentiment = 'Positive');"}
{"sample_id": 2557, "db_id": "app_store", "final": {"question": "List down app that does not have negative sentiment and give their average rating?", "sql": "SELECT T1.App, AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment != 'Negative' GROUP BY T1.App", "source_tables": ["playstore", "user_reviews"]}, "evidence": "doest not have negative sentiment refers to Sentiment! = 'Negative'; average = AVG(Sentiment_Polarity);"}
{"sample_id": 2535, "db_id": "app_store", "final": {"question": "What are the apps with only 5,000+ installs?", "sql": "SELECT DISTINCT App FROM playstore WHERE Installs = '5,000+'", "source_tables": ["playstore"]}, "evidence": "Installs = '5,000+';"}
{"sample_id": 2539, "db_id": "app_store", "final": {"question": "What are the content ratings for the apps that have \"gr8\" in their comments?", "sql": "SELECT DISTINCT T1.\"Content Rating\" FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Translated_Review LIKE '%gr8%'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "app with gr8 in their comments refers to Translated_Review LIKE '%gr8%';"}
{"sample_id": 2545, "db_id": "app_store", "final": {"question": "What is the number of neutral comments from all the weather apps?", "sql": "SELECT COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres = 'Weather' AND T2.Sentiment = 'Neutral'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "neutral comments refers to Sentiment = 'Neutral'; weather app refers to Genre = 'Weather';"}
{"sample_id": 2562, "db_id": "app_store", "final": {"question": "What is the average price of games belonging in the arcade genre which has a content rating of Everyone 10+?", "sql": "SELECT AVG(Price) FROM playstore WHERE 'Content Rating' = 'Everyone 10+' AND Genres = 'Arcade'", "source_tables": ["playstore"]}, "evidence": "average price = AVG(Price);"}
{"sample_id": 2565, "db_id": "app_store", "final": {"question": "How much is the average sentiment polarity score of Golf GPS Rangefinder: Golf Pad and what is it's rating in the Google Play Store?", "sql": "SELECT AVG(T2.Sentiment_Polarity), T1.Rating FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Golf GPS Rangefinder: Golf Pad'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "average sentiment polarity score = AVG(Sentiment_Polarity); Golf GPS Rangefinder: Golf Pad\u00a0 is the App;"}
{"sample_id": 2522, "db_id": "app_store", "final": {"question": "How many of the users hold neutral attitude on \"10 Best Foods for You\" app and what category is this app?", "sql": "SELECT COUNT(T2.App), T1.Category FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = '10 Best Foods for You' AND T2.Sentiment = 'Neutral'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "neutral attitude refers to Sentiment = 'Neutral';"}
{"sample_id": 2556, "db_id": "app_store", "final": {"question": "What is the percentage of application with 4.7 rating having more positives sentiment than negative sentiment?", "sql": "SELECT CAST(COUNT(CASE WHEN ( SELECT COUNT(CASE WHEN Sentiment = 'Positive' THEN 1 ELSE NULL END) - COUNT(CASE WHEN Sentiment = 'Negative' THEN 1 ELSE NULL END) FROM user_reviews GROUP BY App ) > 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Sentiment) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Rating = 4.7", "source_tables": ["playstore", "user_reviews"]}, "evidence": "percentage = DIVIDE(SUBTRACT(SUM(Sentiment = 'Positive')), (SUM(Sentiment = 'Negative')), SUM(Sentiment = 'Negative')) as percentage; having more positive sentiment than negative sentiment refers to Sentiment = 'Positive'>Sentiment = 'Negative';"}
{"sample_id": 2524, "db_id": "app_store", "final": {"question": "List apps whose rating is 3.9 and state the translated review of each app.", "sql": "SELECT T1.App, T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Rating = 3.9", "source_tables": ["playstore", "user_reviews"]}, "evidence": "lowest rating refers to Rating = 1;"}
{"sample_id": 2546, "db_id": "app_store", "final": {"question": "Which 1,000,000,000+ intalls apps has the most no comment reviews?", "sql": "SELECT T1.App FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Installs = '1,000,000+' AND T2.Translated_Review = 'nan' GROUP BY T1.App ORDER BY COUNT(T2.Translated_Review) DESC LIMIT 1", "source_tables": ["playstore", "user_reviews"]}, "evidence": "no comment refers to Translated_Review = 'nan'; most no comment reviews = (MAX(COUNT(Translated_Review = 'nan')));"}
{"sample_id": 2531, "db_id": "app_store", "final": {"question": "What is the rating for \"Draw A Stickman\"?", "sql": "SELECT Rating FROM playstore WHERE APP = 'Draw A Stickman'", "source_tables": ["playstore"]}, "evidence": "Draw A Stickman refers to App = 'Draw A Stickman';"}
{"sample_id": 2543, "db_id": "app_store", "final": {"question": "List all the comments on the lowest rated Mature 17+ app.", "sql": "SELECT T2.Translated_Review FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Mature 17+' ORDER BY T1.Rating LIMIT 1", "source_tables": ["playstore", "user_reviews"]}, "evidence": "comments refers to Translated_Review; lowest rated refers to Rating = 1; Mature 17+ refers to Content Rating = 'Mature 17+ ';"}
{"sample_id": 2515, "db_id": "app_store", "final": {"question": "What is the name and category of the app with the highest amount of -1 sentiment polarity score?", "sql": "SELECT DISTINCT T1.App, T1.Category FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity = '-1.0'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "highest amount of -1 sentiment polarity score refers to MAX(Count(Sentiment_Polarity = 1.0))"}
{"sample_id": 2514, "db_id": "app_store", "final": {"question": "How many users holds neutral attitude towards the HTC Weather app? Indicate the app's rating on the Google Play Store.", "sql": "SELECT COUNT(T1.Rating), T1.Rating FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'HTC Weather' AND T2.Sentiment = 'Neutral'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "user holds neutral attitude refers to Sentiment = 'Neutral';"}
{"sample_id": 2548, "db_id": "app_store", "final": {"question": "What percentage of no comment reviews are from \"Teen\" content rating apps?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.\"Content Rating\" = 'Teen' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.App) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Translated_Review = 'nan'", "source_tables": ["playstore", "user_reviews"]}, "evidence": "no comment refers to Translated_Review = 'nan'; percentage = DIVIDE((SUM(Content Rating = 'Teen')), COUNT(*));"}
{"sample_id": 2523, "db_id": "app_store", "final": {"question": "What are the apps that users pretty like this app and how many installs amount of these apps?", "sql": "SELECT DISTINCT T1.App, T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity > 0", "source_tables": ["playstore", "user_reviews"]}, "evidence": "users pretty much likes the app refers to Sentiment_Polarity = 'Positive';"}
{"sample_id": 2564, "db_id": "app_store", "final": {"question": "Name the Apps with a sentiment objectivity of 0.3 and include their number of installs.", "sql": "SELECT DISTINCT T1.App, T1.Installs FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity = 0.3", "source_tables": ["playstore", "user_reviews"]}, "evidence": "FALSE;"}
{"sample_id": 2703, "db_id": "regional_sales", "final": {"question": "Which sales team has the other with the highest unit price?", "sql": "SELECT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE REPLACE(T1.\"Unit Price\", ',', '') = ( SELECT REPLACE(T1.\"Unit Price\", ',', '') FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.\"Unit Price\", ',', '') DESC LIMIT 1", "source_tables": ["sales team", "sales orders"]}, "evidence": "highest unit price refers to Max(Unit Price)"}
{"sample_id": 2643, "db_id": "regional_sales", "final": {"question": "What is the percentage of total orders of Stephen Payne that had a net profit of over 1000?", "sql": "SELECT CAST(SUM(CASE WHEN REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.\"Sales Team\" = 'Stephen Payne'", "source_tables": ["sales team", "sales orders"]}, "evidence": "Sales Team = 'Stephen Payne'; net profit can be computed as SUBTRACT(Unit Price, Unit Cost); DIVIDE(COUNT(OrderNumber where Sales Team = 'Stephen Payne' and Net Profit > 1000)), (COUNT(OrderNumber where Sales Team = 'Stephen Payne')) as percentage;"}
{"sample_id": 2675, "db_id": "regional_sales", "final": {"question": "How many orders through distributor were for the minimum quantity?", "sql": "SELECT SUM(CASE WHEN \"Order Quantity\" = 1 AND \"Sales Channel\" = 'Distributor' THEN 1 ELSE 0 END) FROM \"Sales Orders\"", "source_tables": ["sales orders"]}, "evidence": "\"Distributor\" is the Sales Channel; minimum quantity refers to Min(Order Quantity)"}
{"sample_id": 2684, "db_id": "regional_sales", "final": {"question": "Lists the name of the product and customer who placed an order on 10/21/18 and it was delivered on 11/21/19.", "sql": "SELECT T3.\"Product Name\", T1.\"Customer Names\" FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.OrderDate = '10/21/18' AND T2.DeliveryDate = '11/21/19'", "source_tables": ["customers", "products", "sales orders"]}, "evidence": "ordered on 10/21/18 refers to OrderDate = '10/21/18'; delivered on 11/21/19 refers to DeliveryDate = '11/21/19'; name of product refers to Product Name"}
{"sample_id": 2622, "db_id": "regional_sales", "final": {"question": "Among the orders placed by Pacific Ltd, how many orders have been applied 5% discount ?", "sql": "SELECT SUM(CASE WHEN T1.\"Discount Applied\" = 0.05 AND T2.\"Customer Names\" = 'Pacific Ltd' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["customers", "sales orders"]}, "evidence": "orders by Pacific Ltd refer to OrderNumber where Customer Names = 'Pacific Ltd'; applied 5% discount refers to Discount Applied = 0.05;"}
{"sample_id": 2598, "db_id": "regional_sales", "final": {"question": "Describe the customer names and lasting delivery periods for the product of \"Bedroom Furniture\" by wholesale channel in 2019.", "sql": "SELECT T1.\"Customer Names\", T2.DeliveryDate FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T2.\"Sales Channel\" = 'Wholesale' AND T3.\"Product Name\" = 'Bedroom Furniture' AND T2.OrderDate LIKE '%/%/19'", "source_tables": ["customers", "products", "sales orders"]}, "evidence": "delivery period in 2019 means time between placing of an order and the receipt of product and refers to SUBTRACT(DeliveryDate, OrderDate) where SUBSTR(OrderDate, -2 ) = '19'; Sales Channel = 'Wholesale'; Product Name = 'Bedroom Furniture';"}
{"sample_id": 2637, "db_id": "regional_sales", "final": {"question": "In 2020, what were the total orders of all stores in Maricopa County?", "sql": "SELECT SUM(CASE WHEN T2.County = 'Maricopa County' AND OrderDate LIKE '%/%/20' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["store locations", "sales orders"]}, "evidence": "total orders refer to COUNT(OrderNumber); 2020 refers to SUBSTR(OrderDate, -2) = '20';"}
{"sample_id": 2580, "db_id": "regional_sales", "final": {"question": "Among orders in 2020, name the customers who had the greatest discount applied for 'Cocktail Glasses'", "sql": "SELECT DISTINCT T1.\"Customer Names\" FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.\"Product Name\" = 'Cocktail Glasses' AND SUBSTR(T2.OrderDate, -2) = '20' AND T2.\"Discount Applied\" = ( SELECT T2.\"Discount Applied\" FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID WHERE T3.\"Product Name\" = 'Cocktail Glasses' AND T2.OrderDate LIKE '%/%/20' ORDER BY T2.\"Discount Applied\" DESC LIMIT 1 )", "source_tables": ["customers", "products", "sales orders"]}, "evidence": "MAX(Discount Applied) where Product Name = 'Cocktail Glasses'; orders in 2020 refer to the OrderDate between 01-01-2020 and 31-12-2020;"}
{"sample_id": 2691, "db_id": "regional_sales", "final": {"question": "To which region does the sales team that has used the WARE-MKL1006 warehouse the most times for its shipments belong?", "sql": "SELECT T2.Region FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.WarehouseCode = 'WARE-MKL1006' GROUP BY T2.Region ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["sales team", "sales orders"]}, "evidence": "\"WARE-MKL1006\" is the WarehouseCode; most shipment to region refers to Max(Count(Region))"}
{"sample_id": 2706, "db_id": "regional_sales", "final": {"question": "Provide order number, warehouse code of customers Elorac, Corp.", "sql": "SELECT DISTINCT T1.OrderNumber, T1.WarehouseCode FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.\"Customer Names\" = 'Elorac, Corp'", "source_tables": ["customers", "sales orders"]}, "evidence": "\"Elorac, Corp\" is the Customer Names"}
{"sample_id": 2698, "db_id": "regional_sales", "final": {"question": "What is the average land area of \u200b\u200bthe cities in which stores that purchased products for a unit price of 998.30 are located?", "sql": "SELECT AVG(T2.\"Land Area\") FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.\"Unit Price\" = '998.30'", "source_tables": ["store locations", "sales orders"]}, "evidence": "average land area = Divide (Sum(Land Area), Count(Land Area))"}
{"sample_id": 2682, "db_id": "regional_sales", "final": {"question": "In which regions are the stores that have shipped products through the WARE-UHY1004 warehouse?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T3.WarehouseCode = 'WARE-UHY1004' THEN T1.Region END AS T FROM Regions T1 INNER JOIN \"Store Locations\" T2 ON T2.StateCode = T1.StateCode INNER JOIN \"Sales Orders\" T3 ON T3._StoreID = T2.StoreID ) WHERE T IS NOT NULL", "source_tables": ["regions", "store locations", "sales orders"]}, "evidence": "\"WARE-UHY1004\" is the WarehouseCode"}
{"sample_id": 2615, "db_id": "regional_sales", "final": {"question": "Calculate the average net profit of bar tools which has ordered quantity exceed 5.", "sql": "SELECT SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T2.\"Product Name\" = 'Bar Tools' AND T1.\"Order Quantity\" > 5", "source_tables": ["products", "sales orders"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); AVG(net profit) where Product Name = 'Bar Tools' and Order Quantity > 5;"}
{"sample_id": 2737, "db_id": "regional_sales", "final": {"question": "What is the average household income of Glendale?", "sql": "SELECT AVG(\"Household Income\") FROM \"Store Locations\" WHERE \"City Name\" = 'Glendale'", "source_tables": ["store locations"]}, "evidence": "\"Glendale\" is the City Name; Average household income refers to avg(Household Income)"}
{"sample_id": 2678, "db_id": "regional_sales", "final": {"question": "How many states are in the Midwest region?", "sql": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN Region = 'Midwest' THEN State ELSE NULL END AS T FROM Regions ) WHERE T IS NOT NULL", "source_tables": ["regions"]}, "evidence": ""}
{"sample_id": 2709, "db_id": "regional_sales", "final": {"question": "How much more is the Florida store's computer product unit price than the Texas store?", "sql": "SELECT SUM(CASE WHEN T3.State = 'Florida' THEN T2.\"Unit Price\" ELSE 0 END) - SUM(CASE WHEN T3.State = 'Texas' THEN T2.\"Unit Price\" ELSE 0 END) FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID WHERE T1.\"Product Name\" = 'Computers'", "source_tables": ["products", "store locations", "sales orders"]}, "evidence": "\"Florida\" and \"Texas\" are both the name of State; Computer product refers to Product Name = 'Computers; difference in unit price = Subtract (Unit Price where State = 'Florida', Unit Price where State = 'Texas')"}
{"sample_id": 2605, "db_id": "regional_sales", "final": {"question": "How many orders have order date in 5/31/2018?", "sql": "SELECT SUM(IIF(OrderDate = '5/31/18', 1, 0)) FROM \"Sales Orders\"", "source_tables": ["sales orders"]}, "evidence": "orders refer to OrderNumber;"}
{"sample_id": 2681, "db_id": "regional_sales", "final": {"question": "What are the names of the sales teams that have served to customer Apotheca, Ltd?", "sql": "SELECT DISTINCT T3.\"Sales Team\" FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T1.\"Customer Names\" = 'Apotheca, Ltd'", "source_tables": ["sales team", "customers", "sales orders"]}, "evidence": "name of sales team refers to Sales Team; 'Apotheca, Ltd' is the Customer Names"}
{"sample_id": 2661, "db_id": "regional_sales", "final": {"question": "What is the difference in order number from \"WARE-MKL1006\" and \"WARE-NBV1002\"?", "sql": "SELECT SUM(IIF(WarehouseCode = 'WARE-MKL1006', 1, 0)) - SUM(IIF(WarehouseCode = 'WARE-NBV1002', 1, 0)) AS difference FROM \"Sales Orders\"", "source_tables": ["sales orders"]}, "evidence": "\"WARE-NBV1002\" and \"WARE-MKL1006\" are both WarehouseCode; difference in order number = Subtract(Count(OrderNumber where WarehouseCode = 'WARE-MKL1006'), Count(OrderNumber where WarehouseCode = 'WARE-NBV1002'))"}
{"sample_id": 2634, "db_id": "regional_sales", "final": {"question": "Which order number has the highest unit price?", "sql": "SELECT OrderNumber FROM \"Sales Orders\" WHERE REPLACE(\"Unit Price\", ',', '') = ( SELECT REPLACE(\"Unit Price\", ',', '') FROM \"Sales Orders\" ORDER BY REPLACE(\"Unit Price\", ',', '') DESC LIMIT 1 )", "source_tables": ["sales orders"]}, "evidence": "the highest unit price refers to MAX(Unit Price);"}
{"sample_id": 2729, "db_id": "regional_sales", "final": {"question": "Between 2018 to 2020, what is the average amount of shipped orders per year under Carl Nguyen?", "sql": "SELECT CAST(COUNT(T1.OrderNumber) AS REAL) / 3 FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE (T2.\"Sales Team\" = 'Carl Nguyen' AND ShipDate LIKE '%/%/18') OR (T2.\"Sales Team\" = 'Carl Nguyen' AND ShipDate LIKE '%/%/19') OR (T2.\"Sales Team\" = 'Carl Nguyen' AND ShipDate LIKE '%/%/20')", "source_tables": ["sales team", "sales orders"]}, "evidence": "shipped refers to ShipDate; between 2018 and 2020 refers to SUBSTR(ShipDate, -2) IN ('18', '19', '20'); 'Carl Nguyen' is the name of Sales Team; average shipped orders per year = Divide (Count(OrderNumber), 3)"}
{"sample_id": 2594, "db_id": "regional_sales", "final": {"question": "Describe the ID, city and region of the stores which are in Allen country.", "sql": "SELECT DISTINCT T2.StoreID, T2.\"City Name\", T1.Region FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T2.County = 'Allen County'", "source_tables": ["regions", "store locations"]}, "evidence": "ID refers to StoreID;"}
{"sample_id": 2600, "db_id": "regional_sales", "final": {"question": "List the store located cities with regions in no water area of California state.", "sql": "SELECT DISTINCT T2.\"City Name\" FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'California' AND T2.\"Water Area\" = '0'", "source_tables": ["regions", "store locations"]}, "evidence": "cities refer to City Name; no water area refers to Water Area = 0;"}
{"sample_id": 2720, "db_id": "regional_sales", "final": {"question": "What is the name of the product with the highest net profit?", "sql": "SELECT T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 1", "source_tables": ["products", "sales orders"]}, "evidence": "highest net profit = Max(Subtract (Unit Price, Unit Cost)); name of product refers to Product Name"}
{"sample_id": 2696, "db_id": "regional_sales", "final": {"question": "At what Latitude and Longitude is the store that has used the WARE-PUJ1005 warehouse the fewest times?", "sql": "SELECT T2.Latitude, T2.Longitude FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.WarehouseCode = 'WARE-PUJ1005' GROUP BY T2.StoreID ORDER BY COUNT(T1.WarehouseCode) ASC LIMIT 1", "source_tables": ["store locations", "sales orders"]}, "evidence": "WARE-PUJ1005 is the WarehouseCode; fewest times refers to Min (Count(WarehouseCode))"}
{"sample_id": 2583, "db_id": "regional_sales", "final": {"question": "List all the numbers ordered by 'Rochester Ltd' in 2018.", "sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN T1.OrderDate LIKE '%/%/18' AND T2.\"Customer Names\" = 'Rochester Ltd' THEN T1.OrderNumber ELSE NULL END AS T FROM \"Sales Orders\" T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID ) WHERE T IS NOT NULL", "source_tables": ["customers", "sales orders"]}, "evidence": "Rochester Ltd is the name of the customer; all the numbers ordered refer to OrderNumber; 2018 refers to SUBSTR(OrderDate, -2) = '18';"}
{"sample_id": 2645, "db_id": "regional_sales", "final": {"question": "State the name of all city in Maricopa County along with its latitude and longitude.", "sql": "SELECT DISTINCT \"City Name\", Latitude, Longitude FROM \"Store Locations\" WHERE County = 'Maricopa County'", "source_tables": ["store locations"]}, "evidence": ""}
{"sample_id": 2631, "db_id": "regional_sales", "final": {"question": "Which sales team name has the least orders in 2019?", "sql": "SELECT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.\"Sales Team\" ORDER BY COUNT(T1.OrderNumber) ASC LIMIT 1", "source_tables": ["sales team", "sales orders"]}, "evidence": "sale team names refer to Sales Team; the least orders in 2019 refer to MIN(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '19'));"}
{"sample_id": 2735, "db_id": "regional_sales", "final": {"question": "Identify the top customer of the store located in Gilbert, Arizona based on net profit associated with the customer relationship in 2019.", "sql": "SELECT T1.\"Customer Names\" FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID WHERE T3.\"City Name\" = 'Gilbert' AND T2.ProcuredDate LIKE '%/%/19' ORDER BY REPLACE(T2.\"Unit Price\", ',', '') - REPLACE(T2.\"Unit Cost\", ',', '') DESC LIMIT 1", "source_tables": ["customers", "store locations", "sales orders"]}, "evidence": "\"Gilbert\" is the City Name; 'Arizona' is the name of State; customer relationship in 2019 refers to ProcuredDate LIKE '%/19'; top net profit refers to Max(Subtract(Unit Price, Unit Cost))"}
{"sample_id": 2674, "db_id": "regional_sales", "final": {"question": "Indicate the procured dates for the customer whose ID is 11.", "sql": "SELECT DISTINCT T FROM ( SELECT IIF(_CustomerID = 11, ProcuredDate, NULL) AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "ID is 11 refers to _CustomerID = 11;"}
{"sample_id": 2588, "db_id": "regional_sales", "final": {"question": "Sate the order number and calculate the net profit for each order under Joshua Bennett.", "sql": "SELECT T1.OrderNumber , REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')  FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.\"Sales Team\" = 'Joshua Bennett'", "source_tables": ["sales team", "sales orders"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); Joshua Bennett is the name of Sales Team;"}
{"sample_id": 2715, "db_id": "regional_sales", "final": {"question": "What is the store id of the store located in the most populous county?", "sql": "SELECT CASE WHEN MAX(Population) THEN StoreID END FROM \"Store Locations\"", "source_tables": ["store locations"]}, "evidence": "most populous country refers to Max(Population)"}
{"sample_id": 2683, "db_id": "regional_sales", "final": {"question": "List all the cities where Shawn Torres sells Audio products.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T4.\"Product Name\" = 'Audio' AND T3.\"Sales Team\" = 'Shawn Torres' THEN T1.\"City Name\" ELSE NULL END AS T FROM \"Store Locations\" T1 INNER JOIN \"Sales Orders\" T2 ON T2._StoreID = T1.StoreID INNER JOIN \"Sales Team\" T3 ON T3.SalesTeamID = T2._SalesTeamID INNER JOIN Products T4 ON T4.ProductID = T2._ProductID ) WHERE T IS NOT NULL", "source_tables": ["sales team", "products", "store locations", "sales orders"]}, "evidence": "\"Shawn Torres\" is the name of Sales Team; Audio product refers to Product Name = 'Audio'"}
{"sample_id": 2730, "db_id": "regional_sales", "final": {"question": "What is the amount of discount applied to the product with the highest net profit and what is the name of the said product?", "sql": "SELECT T1.\"Unit Price\" * T1.\"Discount Applied\", T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 1", "source_tables": ["products", "sales orders"]}, "evidence": "highest net profit refers to Max(Subtract(Unit Price, Unit Cost)); name of product refers to Product Name"}
{"sample_id": 2608, "db_id": "regional_sales", "final": {"question": "State the full name of state code \"GA\".", "sql": "SELECT T FROM ( SELECT IIF(StateCode = 'GA', State, NULL) AS T FROM Regions ) WHERE T IS NOT NULL", "source_tables": ["regions"]}, "evidence": ""}
{"sample_id": 2663, "db_id": "regional_sales", "final": {"question": "Write down the store IDs and region of the state \"Michigan\".", "sql": "SELECT DISTINCT T2.StoreID, T1.Region FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'Michigan'", "source_tables": ["regions", "store locations"]}, "evidence": "\"Michigan\" is the State"}
{"sample_id": 2609, "db_id": "regional_sales", "final": {"question": "How many states located in the Midwest region?", "sql": "SELECT COUNT(DISTINCT T) FROM ( SELECT CASE  WHEN Region = 'Midwest' THEN StateCode ELSE NULL END AS T FROM Regions ) WHERE T IS NOT NULL", "source_tables": ["regions"]}, "evidence": ""}
{"sample_id": 2578, "db_id": "regional_sales", "final": {"question": "Name the sales team and the region of order number 'SO - 000137'.", "sql": "SELECT T2.\"Sales Team\", T2.Region FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderNumber = 'SO - 000137'", "source_tables": ["sales team", "sales orders"]}, "evidence": ""}
{"sample_id": 2619, "db_id": "regional_sales", "final": {"question": "List out the discount levels applied for all orders from Ole Group.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.\"Customer Names\" = 'Ole Group' THEN T2.\"Discount Applied\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["customers", "sales orders"]}, "evidence": "Ole Group is the name of the customer; discount levels applied refer to Discount Applied NOT NULL;"}
{"sample_id": 2732, "db_id": "regional_sales", "final": {"question": "Which sales channel was most preferred in commercializing products in January 2020 based on the number of orders placed?", "sql": "SELECT \"Sales Channel\" FROM \"Sales Orders\" WHERE OrderDate LIKE '1/%/20' GROUP BY \"Sales Channel\" ORDER BY COUNT(\"Sales Channel\") DESC LIMIT 1", "source_tables": ["sales orders"]}, "evidence": "order refers to OrderDate; in 2020 refers to Substr(OrderDate, -2) = '20'; January refers to Substr(OrderDate, 1, 1) = '1';\u00a0 most preferred sales channel refers to Sales Channel where Max(Count(OrderNumber))"}
{"sample_id": 2724, "db_id": "regional_sales", "final": {"question": "What is the name of the customer who purchased the product with the highest net profiit?", "sql": "SELECT \"Customer Names\" FROM ( SELECT T1.\"Customer Names\", T2.\"Unit Price\" - T2.\"Unit Cost\" AS \"net profit\" FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY \"net profit\" DESC LIMIT 1", "source_tables": ["customers", "sales orders"]}, "evidence": "highest net profit = Max(Subtract (Unit Price, Unit Cost)); name of customer refers to Customer Names"}
{"sample_id": 2575, "db_id": "regional_sales", "final": {"question": "Which region has the most number of sales team?", "sql": "SELECT Region FROM \"Sales Team\" GROUP BY Region ORDER BY COUNT(DISTINCT \"Sales Team\") DESC LIMIT 1", "source_tables": ["sales team"]}, "evidence": "the most number of sales team refers to MAX(COUNT(Sales Team));"}
{"sample_id": 2654, "db_id": "regional_sales", "final": {"question": "List the order for all in-store sales along with the products sold.", "sql": "SELECT DISTINCT T1.OrderNumber, T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.\"Sales Channel\" = 'In-Store'", "source_tables": ["products", "sales orders"]}, "evidence": "orders for all in-store sales refer to OrderNumber where Sales Channel = 'In-Store'; products refer to Product Name;"}
{"sample_id": 2688, "db_id": "regional_sales", "final": {"question": "What is the highest discount applied by the store located in a city of the state of Colorado whose land area is 111039036.", "sql": "SELECT MAX(T1.\"Discount Applied\") FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Colorado' AND T2.\"Land Area\" = 111039036", "source_tables": ["store locations", "sales orders"]}, "evidence": "highest discount applied refers to Max(Discount Applied)"}
{"sample_id": 2616, "db_id": "regional_sales", "final": {"question": "List out the city name of states located in South region.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.Region = 'South' THEN T2.\"City Name\" END AS T FROM Regions T1 INNER JOIN \"Store Locations\" T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL", "source_tables": ["regions", "store locations"]}, "evidence": ""}
{"sample_id": 2655, "db_id": "regional_sales", "final": {"question": "How many online sales were made in May 2018 where products were shipped from Norman?", "sql": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '5/%/18' AND T1.\"Sales Channel\" = 'Online' AND T2.\"City Name\" = 'Norman' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID", "source_tables": ["store locations", "sales orders"]}, "evidence": "online sales refer to OrderNumber where Sales Channel = 'Online'; May 2018 refers to OrderDate LIKE '5/%/18'; Norman is the name of the city;"}
{"sample_id": 2641, "db_id": "regional_sales", "final": {"question": "What were the total orders of Medsep Group from 2018 to 2020?", "sql": "SELECT SUM(CASE WHEN SUBSTR(T1.OrderDate, -2) IN ('18', '19', '20') AND T2.\"Customer Names\" = 'Medsep Group' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["customers", "sales orders"]}, "evidence": "Medsep Group is the name of the customer; total orders refer to COUNT(OrderNumber); from 2018 to 2020 refers to SUBSTR(OrderDate, -2) IN ('18', '19', '20');"}
{"sample_id": 2635, "db_id": "regional_sales", "final": {"question": "Which sales team id has the highest number of orders in 2018?", "sql": "SELECT _SalesTeamID FROM \"Sales Orders\" WHERE OrderDate LIKE '%/%/18' GROUP BY _SalesTeamID ORDER BY COUNT(_SalesTeamID) DESC LIMIT 1", "source_tables": ["sales orders"]}, "evidence": "the highest number of orders in 2018 refers to MAX(COUNT(OrderNumber where SUBSTR(OrderDate, -2) = '18'));"}
{"sample_id": 2676, "db_id": "regional_sales", "final": {"question": "List by ID all sales teams that have sold products at a 10% discount in store.", "sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN \"Discount Applied\" = '0.1' AND \"Sales Channel\" = 'In-Store' THEN _SalesTeamID ELSE NULL END AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "source_tables": ["sales orders"]}, "evidence": "ID refers to _SalesTeamID; 10% discount refers to Discount Applied = 0.1; 'In-Store' is the Sales Channel"}
{"sample_id": 2734, "db_id": "regional_sales", "final": {"question": "Identify the store location and sales team who processed the sales order 'SO - 0001004'.", "sql": "SELECT T3.\"Sales Team\", T1.\"City Name\" FROM \"Store Locations\" AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._StoreID = T1.StoreID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T2.OrderNumber = 'SO - 0001004'", "source_tables": ["sales team", "store locations", "sales orders"]}, "evidence": "sales order 'SO - 0001004' refers to OrderNumber = 'SO - 0001004'; store location refers to City Name"}
{"sample_id": 2639, "db_id": "regional_sales", "final": {"question": "Please calculate the total number of orders by each city in 2019.", "sql": "SELECT COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate LIKE '%/%/19' GROUP BY T2.\"City Name\" HAVING COUNT(T1.OrderNumber)", "source_tables": ["store locations", "sales orders"]}, "evidence": "total number of orders refers to COUNT(OrderNumber); 2019 refers to OrderDate between 01-01-2019 and 31-12-2019; city refers to City Name;"}
{"sample_id": 2662, "db_id": "regional_sales", "final": {"question": "Describe the product names delivered in 2021 for the customer \"Sundial\".", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.DeliveryDate LIKE '%/%/21' AND T1.\"Customer Names\" = 'Sundial ' THEN T3.\"Product Name\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products T3 ON T3.ProductID = T2._ProductID ) WHERE T IS NOT NULL", "source_tables": ["customers", "products", "sales orders"]}, "evidence": "delivered in 2021 refer to DeliveryDate LIKE '%/21'; 'Sundial' is the Customer Names"}
{"sample_id": 2722, "db_id": "regional_sales", "final": {"question": "In which region can you find the stores located in the state whose median income is no more than 30,000?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Median Income\" < 30000 THEN T1.Region END AS T FROM Regions T1 INNER JOIN \"Store Locations\" T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL", "source_tables": ["regions", "store locations"]}, "evidence": "median income no more than 30,000 refers to Median Income < 30,000"}
{"sample_id": 2644, "db_id": "regional_sales", "final": {"question": "How many sales team were from Northeast?", "sql": "SELECT SUM(CASE WHEN Region = 'Northeast' THEN 1 ELSE 0 END) FROM \"Sales Team\"", "source_tables": ["sales team"]}, "evidence": "Northeast is the name of the region;"}
{"sample_id": 2640, "db_id": "regional_sales", "final": {"question": "Please list the names of customers who have total orders of over 3 in 2018.", "sql": "SELECT DISTINCT IIF(COUNT(T2.CustomerID) > 3, T2.\"Customer Names\", NULL) FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._CustomerID HAVING COUNT(T2.CustomerID)", "source_tables": ["customers", "sales orders"]}, "evidence": "total orders of over 3 in 2018 refer to COUNT(OrderNumber) > 3 where SUBSTR(OrderDate, -2) = '18';"}
{"sample_id": 2593, "db_id": "regional_sales", "final": {"question": "Mention the most populated city and median income of the store in Florida state.", "sql": "SELECT \"City Name\", \"Median Income\" FROM \"Store Locations\" WHERE State = 'Florida' ORDER BY Population DESC LIMIT 1", "source_tables": ["store locations"]}, "evidence": "most populated refers to Max(Population);"}
{"sample_id": 2628, "db_id": "regional_sales", "final": {"question": "Which product has the highest net profit in 2019?", "sql": "SELECT T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderDate LIKE '%/%/19' ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 1", "source_tables": ["products", "sales orders"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); the highest net profit in 2019 refers to MAX(Net Profit) where OrderDate LIKE '%/19'; product refers to Product Name;"}
{"sample_id": 2577, "db_id": "regional_sales", "final": {"question": "What is the average median income for all City type of stores?", "sql": "SELECT AVG(\"Median Income\") FROM \"Store Locations\" WHERE Type = 'City'", "source_tables": ["store locations"]}, "evidence": "AVG(Median Income) where Type = 'City';"}
{"sample_id": 2630, "db_id": "regional_sales", "final": {"question": "Please list all sale team names which had orders on 5/31/2018.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T1.OrderDate = '5/31/18' THEN T2.\"Sales Team\" ELSE NULL END AS T FROM \"Sales Orders\" T1 INNER JOIN \"Sales Team\" T2 ON T2.SalesTeamID = T1._SalesTeamID ) WHERE T IS NOT NULL", "source_tables": ["sales team", "sales orders"]}, "evidence": "had orders on 5/31/2018 refer to OrderDate = '5/31/18'; sale team names refer to Sales Team;"}
{"sample_id": 2607, "db_id": "regional_sales", "final": {"question": "How many orders placed were with more than 5 product quantities?", "sql": "SELECT SUM(IIF(\"Order Quantity\" > 5, 1, 0)) FROM \"Sales Orders\"", "source_tables": ["sales orders"]}, "evidence": "orders refer to OrderNumber; more than 5 product quantities refer to Order Quantity > 5;"}
{"sample_id": 2611, "db_id": "regional_sales", "final": {"question": "State the delivery date of cookware.", "sql": "SELECT T FROM ( SELECT DISTINCT IIF(T2.\"Product Name\" = 'Cookware', T1.DeliveryDate, NULL) AS T FROM \"Sales Orders\" T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL", "source_tables": ["products", "sales orders"]}, "evidence": "Cookware is the name of the product;"}
{"sample_id": 2617, "db_id": "regional_sales", "final": {"question": "What is the region of stores which have type of \"Town\" in the list?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.Type = 'Town' THEN T1.Region END AS T FROM Regions T1 INNER JOIN \"Store Locations\" T2 ON T2.StateCode = T1.StateCode ) WHERE T IS NOT NULL", "source_tables": ["regions", "store locations"]}, "evidence": ""}
{"sample_id": 2649, "db_id": "regional_sales", "final": {"question": "Which product was ordered the most in 2018?", "sql": "SELECT T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1._ProductID ORDER BY COUNT(T1._ProductID) DESC LIMIT 1", "source_tables": ["products", "sales orders"]}, "evidence": "product refers to Product Name; ordered the most in 2018 refers to MAX(COUNT(OrderNumber)) where SUBSTR(OrderDate, -2) = '18';"}
{"sample_id": 2646, "db_id": "regional_sales", "final": {"question": "Which order have the highest unit cost?", "sql": "SELECT OrderNumber FROM \"Sales Orders\" WHERE REPLACE(\"Unit Cost\", ',', '') = ( SELECT REPLACE(\"Unit Cost\", ',', '') FROM \"Sales Orders\" ORDER BY REPLACE(\"Unit Cost\", ',', '') DESC LIMIT 1 )", "source_tables": ["sales orders"]}, "evidence": "order have the highest unit cost refers to OrderNumber where MAX(Unit Cost);"}
{"sample_id": 2668, "db_id": "regional_sales", "final": {"question": "Find the net profit of the floral products which were delivered in 2021.", "sql": "SELECT SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.DeliveryDate LIKE '%/%/21' AND T2.\"Product Name\" = 'Floral'", "source_tables": ["products", "sales orders"]}, "evidence": "floral product refers to Product Name = 'Floral'; total net profit = SUM(Subtract(Unit Price, Unit Cost)); delivered in 2021 refers to DeliveryDate LIKE '%/21'"}
{"sample_id": 2652, "db_id": "regional_sales", "final": {"question": "How many orders made by Rochester Ltd?", "sql": "SELECT SUM(CASE WHEN T1.\"Customer Names\" = 'Rochester Ltd' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID", "source_tables": ["customers", "sales orders"]}, "evidence": "Rochester Ltd is the name of the customer; orders refer to OrderNumber;"}
{"sample_id": 2624, "db_id": "regional_sales", "final": {"question": "Please list the id and detailed position of all stores in Birmingham city.", "sql": "SELECT StoreID, Latitude, Longitude FROM \"Store Locations\" WHERE \"City Name\" = 'Birmingham'", "source_tables": ["store locations"]}, "evidence": "Latitude and Longitude coordinates can be used to identify the detailed position of stores; id refers to StoreID;"}
{"sample_id": 2601, "db_id": "regional_sales", "final": {"question": "Calculate the order percentage by \"Carlos Miller\" sales team.", "sql": "SELECT CAST(SUM(CASE WHEN T2.\"Sales Team\" = 'Carlos Miller' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID", "source_tables": ["sales team", "sales orders"]}, "evidence": "DIVIDE(COUNT(OrderNumber where Sales Team = 'Carlos Miller'), COUNT(OrderNumber)) as percentage;"}
{"sample_id": 2626, "db_id": "regional_sales", "final": {"question": "How many CDP stores are there in California?", "sql": "SELECT SUM(CASE WHEN State = 'California' AND Type = 'CDP' THEN 1 ELSE 0 END) FROM \"Store Locations\"", "source_tables": ["store locations"]}, "evidence": "California is a state; CDP stores refer to StoreID where Type = 'CDP';"}
{"sample_id": 2677, "db_id": "regional_sales", "final": {"question": "How many Borough-type stores located in the city of Brooklyn have a population of less than 3 million?", "sql": "SELECT SUM(CASE WHEN Population < 3000000 AND Type = 'Borough' AND \"City Name\" = 'Brooklyn' THEN 1 ELSE 0 END) FROM \"Store Locations\"", "source_tables": ["store locations"]}, "evidence": "\"Brooklyn\" is the CityName; population of less than 3 million refers to Population < 3000000"}
{"sample_id": 2704, "db_id": "regional_sales", "final": {"question": "Which regions have online sales channels that have the most discounts?", "sql": "SELECT T2.Region FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.\"Sales Channel\" = 'Online' ORDER BY T1.\"Discount Applied\" DESC LIMIT 1", "source_tables": ["sales team", "sales orders"]}, "evidence": "most discount refers to Max(Discount Applied)"}
{"sample_id": 2657, "db_id": "regional_sales", "final": {"question": "State all the order numbers for sales team of Samuel Fowler.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Sales Team\" = 'Samuel Fowler' THEN T1.OrderNumber ELSE NULL END AS T FROM \"Sales Orders\" T1 INNER JOIN \"Sales Team\" T2 ON T2.SalesTeamID = T1._SalesTeamID ) WHERE T IS NOT NULL", "source_tables": ["sales team", "sales orders"]}, "evidence": ""}
{"sample_id": 2603, "db_id": "regional_sales", "final": {"question": "Calculate the total net profit of the store located in highest median income city.", "sql": "SELECT SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.\"Median Income\" DESC LIMIT 1", "source_tables": ["store locations", "sales orders"]}, "evidence": "net profit can be computed as SUBTRACT(Unit Price, Unit Cost); highest median income city refers to City Name where MAX(Median Income);"}
{"sample_id": 2651, "db_id": "regional_sales", "final": {"question": "List all orders where its products were shipped from Daly City.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"City Name\" = 'Daly City' THEN T1.OrderNumber END AS T FROM \"Sales Orders\" T1 INNER JOIN \"Store Locations\" T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL", "source_tables": ["store locations", "sales orders"]}, "evidence": "shipped from Daly City refers to Store Locations where City Name = 'Daly City'; orders refer to OrderNumber;"}
{"sample_id": 2672, "db_id": "regional_sales", "final": {"question": "Find the average yearly order by customer Weimei Corp for 2018, 2019 and 2020.", "sql": "SELECT COUNT(T1.OrderNumber) / 3 FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE (T1.OrderDate LIKE '%/%/18' AND T2.\"Customer Names\" = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/19' AND T2.\"Customer Names\" = 'Weimei Corp') OR (T1.OrderDate LIKE '%/%/20' AND T2.\"Customer Names\" = 'Weimei Corp')", "source_tables": ["customers", "sales orders"]}, "evidence": "\"Weimei Corp\" is the Customer Names; in 2018, 2019 and 2020 refers to SUBSTR (OrderDate, -2) IN ('18', '19', '20') : Average order = Divide (Count (OrderNumber), 3)"}
{"sample_id": 2650, "db_id": "regional_sales", "final": {"question": "How many products sold by Adam Hernandez?", "sql": "SELECT SUM(CASE WHEN T2.\"Sales Team\" = 'Adam Hernandez' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID", "source_tables": ["sales team", "sales orders"]}, "evidence": "products sold by Adam Hernandez refer to SUM(Order Quantity where Sales Team = 'Adam Hernandez');"}
{"sample_id": 2597, "db_id": "regional_sales", "final": {"question": "Calculate the percentage of order via in-store channel of customer \"Medline\".", "sql": "SELECT CAST(SUM(CASE WHEN T1.\"Sales Channel\" = 'In-Store' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1._CustomerID) FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.\"Customer Names\" = 'Medline '", "source_tables": ["customers", "sales orders"]}, "evidence": "Medline is the name of the customer; DIVIDE(COUNT(OrderNumber where Sales Channel = 'In-Store' and Customer Names = 'Medline'), COUNT(OrderNumber where Customer Names = 'Medline')) as percentage;"}
{"sample_id": 2581, "db_id": "regional_sales", "final": {"question": "List all the order numbers for In-Store sales and find the city where the store is located.", "sql": "SELECT DISTINCT T1.OrderNumber, T2.\"City Name\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.\"Sales Channel\" = 'In-Store'", "source_tables": ["store locations", "sales orders"]}, "evidence": "In-Store sales refer to Sales Channel = 'In-Store'; city refers to City Name;"}
{"sample_id": 2665, "db_id": "regional_sales", "final": {"question": "Find the store ID with more orders between \"Aurora\" and \"Babylon\" city.", "sql": "SELECT T2.StoreID FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.\"City Name\" = 'Aurora (Township)' OR T2.\"City Name\" = 'Babylon (Town)' GROUP BY T2.StoreID ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "source_tables": ["store locations", "sales orders"]}, "evidence": "\"Aurora\" refers to City Name = 'Aurora (Township)'; \"Babylon\" refers to City Name = 'Babylong (Town)'; more order refers to Max(Count(OrderNumber))"}
{"sample_id": 2721, "db_id": "regional_sales", "final": {"question": "In the Northeast region, what is the average household income for each city located in the state with the highest number of stores?", "sql": "SELECT AVG(T2.\"Household Income\") FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T1.Region = 'Northeast' GROUP BY T2.State ORDER BY COUNT(T2.StoreID) DESC LIMIT 1", "source_tables": ["regions", "store locations"]}, "evidence": "average household income = Divide (Sum(Household Income), Count(City Name)); highest number of store refers to Max(Count(StoreID))"}
{"sample_id": 2658, "db_id": "regional_sales", "final": {"question": "Find the number of baseball ordered in December 2017.", "sql": "SELECT COUNT(T2.OrderNumber) FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID WHERE T1.\"Product Name\" = 'Baseball' AND T2.OrderDate LIKE '12/%/18'", "source_tables": ["products", "sales orders"]}, "evidence": "Product Name = 'Baseball'; December 2017 refers to OrderDate LIKE '12/%/17';"}
{"sample_id": 2692, "db_id": "regional_sales", "final": {"question": "In which city is the store with the highest sales order unit price located?", "sql": "SELECT T2.\"City Name\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE REPLACE(T1.\"Unit Price\", ',', '') = ( SELECT REPLACE(T1.\"Unit Price\", ',', '') FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') DESC LIMIT 1 ) ORDER BY REPLACE(T1.\"Unit Price\", ',', '') DESC LIMIT 1", "source_tables": ["store locations", "sales orders"]}, "evidence": "highest sales order unit price refers to Max(Unit Price)"}
{"sample_id": 2731, "db_id": "regional_sales", "final": {"question": "What are the names of the top 3 customers who paid the highest amount of price per order after discount?", "sql": "SELECT \"Customer Names\" FROM ( SELECT T1.\"Customer Names\" , REPLACE(T2.\"Unit Price\", ',', '') * T2.\"Order Quantity\" - REPLACE(T2.\"Unit Price\", ',', '') * T2.\"Discount Applied\" AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY T DESC LIMIT 3", "source_tables": ["customers", "sales orders"]}, "evidence": "highest price per order after discount refers to Max(Subtract(Multiply (Unit Price, Order Quantity), Discount Applied)); name of customer refers to Customer Names"}
{"sample_id": 2695, "db_id": "regional_sales", "final": {"question": "What is the least purchased product by stores in the city of Santa Clarita?", "sql": "SELECT T1.\"Product Name\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID WHERE T3.\"City Name\" = 'Santa Clarita' GROUP BY T1.\"Product Name\" ORDER BY COUNT(T1.\"Product Name\") ASC LIMIT 1", "source_tables": ["products", "store locations", "sales orders"]}, "evidence": "least purchased product refers to Min(Count(Product Name)); 'Santa Clarita' is the City"}
{"sample_id": 2621, "db_id": "regional_sales", "final": {"question": "Among the orders placed by Ei, how many orders have quantity greater than 4?", "sql": "SELECT SUM(CASE WHEN T1.\"Order Quantity\" > 4 AND T2.\"Customer Names\" = 'Ei ' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID", "source_tables": ["customers", "sales orders"]}, "evidence": "Ei is the name of the customer; orders have quantity greater than 4 refer to OrderNumber WHERE Order Quantity > 4;"}
{"sample_id": 2705, "db_id": "regional_sales", "final": {"question": "Which Apollo Ltd customer's order number has the most expensive unit price, indicating the order date?", "sql": "SELECT T1.OrderNumber, T1.OrderDate FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.\"Customer Names\" = 'Apollo Ltd' ORDER BY T1.\"Unit Price\" DESC LIMIT 1", "source_tables": ["customers", "sales orders"]}, "evidence": "\"Apollo Ltd\" is the Customer Names; most expensive unit price refers to max(Unit Price)"}
{"sample_id": 2613, "db_id": "regional_sales", "final": {"question": "List out the name of products which have been applied 10% discount.", "sql": "SELECT T FROM ( SELECT DISTINCT IIF(T1.\"Discount Applied\" = 0.1, T2.\"Product Name\", NULL) AS T FROM \"Sales Orders\" T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL", "source_tables": ["products", "sales orders"]}, "evidence": "applied 10% discount refers to Discount Applied = 0.1;"}
{"sample_id": 2667, "db_id": "regional_sales", "final": {"question": "Mention the customer names and IDs which ordered total net profit of above 5000 USD through online channel.", "sql": "SELECT DISTINCT \"Customer Names\", CustomerID FROM ( SELECT T2.\"Customer Names\", T2.CustomerID , SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) AS T FROM \"Sales Orders\" T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.\"Sales Channel\" = 'Online' GROUP BY T2.CustomerID ) WHERE T > 5000", "source_tables": ["customers", "sales orders"]}, "evidence": "IDs refers to CustomerID; total net profit of above 5000 USD refers to SUM(Subtract(Unit Price, Unit Cost)) > 5000"}
{"sample_id": 2699, "db_id": "regional_sales", "final": {"question": "What is the average household income in cities in the state of New Hampshire where there are stores of the type city?", "sql": "SELECT AVG(T2.\"Household Income\") FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T2.State = 'New Hampshire' AND T2.Type = 'City'", "source_tables": ["regions", "store locations"]}, "evidence": "\"New Hampshire\" is the State; average household income = AVG(Household Income)"}
{"sample_id": 2620, "db_id": "regional_sales", "final": {"question": "State the customer name of orders which has shipped date in 7/8/2018.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.ShipDate = '7/8/18' THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "source_tables": ["customers", "sales orders"]}, "evidence": "shipped date in 7/8/2018 refers to ShipDate = '7/8/18'"}
{"sample_id": 2726, "db_id": "regional_sales", "final": {"question": "Among the products with an order quantity of no less than 5 that was shipped in the month of May 2019, what is the name of the product with the lowest net profit?", "sql": "SELECT T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID WHERE T1.\"Order Quantity\" > 5 AND ShipDate LIKE '5/%/19' ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') ASC LIMIT 1", "source_tables": ["products", "sales orders"]}, "evidence": "order quantity of no less than 5 refers to Order Quantity > 5; shipped in the month of May 2019 refers to ShipDate LIKE '5/%/19'; lowest net profit = Min(Subtract(Unit Price, Unit Cost)); name of product refers to Products Name"}
{"sample_id": 2717, "db_id": "regional_sales", "final": {"question": "What is the type of store located in the city with the highest amount of water area?", "sql": "SELECT CASE WHEN MAX(\"Water Area\") THEN Type END FROM \"Store Locations\"", "source_tables": ["store locations"]}, "evidence": "type of store in City refers to Type = 'City'; highest amount of water area refers to Max(Water Area)"}
{"sample_id": 2618, "db_id": "regional_sales", "final": {"question": "How many orders that Medsep Group had made?", "sql": "SELECT SUM(CASE WHEN T1.\"Customer Names\" = 'Medsep Group' THEN 1 ELSE 0 END) FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID", "source_tables": ["customers", "sales orders"]}, "evidence": "Medsep Group is the name of the customer; orders refer to OrderNumber;"}
{"sample_id": 2660, "db_id": "regional_sales", "final": {"question": "Find the percentage of products that were shipped from Burbank in 2018?", "sql": "SELECT CAST(SUM(CASE WHEN T3.\"City Name\" = 'Burbank' THEN T2.\"Order Quantity\" ELSE 0 END) AS REAL) * 100 / SUM(T2.\"Order Quantity\") FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID WHERE T2.OrderDate LIKE '%/%/18'", "source_tables": ["products", "store locations", "sales orders"]}, "evidence": "DIVIDE(SUM(Order Quantity where City Name = 'Burbank' and SUBSTR(OrderDate, -2) = '18')), (SUM(Order Quantity where SUBSTR(OrderDate, -2) = '18')) as percentage;"}
{"sample_id": 2659, "db_id": "regional_sales", "final": {"question": "Find the average number of ornaments sold each month in 2018.", "sql": "SELECT CAST(SUM(T2.\"Order Quantity\") AS REAL) / 12 FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID WHERE T1.\"Product Name\" = 'Ornaments' AND T2.OrderDate LIKE '%/%/18'", "source_tables": ["products", "sales orders"]}, "evidence": "DIVIDE(SUM(Order Quantity where Product Name = 'Ornaments' and OrderDate LIKE '%/18'), 12);"}
{"sample_id": 2604, "db_id": "regional_sales", "final": {"question": "Among the sales team in South region, write down the numbers of orders made by the sales team ID of one digit.", "sql": "SELECT COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'South' AND T2.SalesTeamID BETWEEN 1 AND 9 GROUP BY T2.SalesTeamID HAVING COUNT(T1.OrderNumber)", "source_tables": ["sales team", "sales orders"]}, "evidence": "sales team ID of one digit refers to _SalesTeamID BETWEEN 1 AND 9; numbers of orders refer to COUNT(OrderNumber);"}
{"sample_id": 2596, "db_id": "regional_sales", "final": {"question": "Write down the region and name of the sale team ID of 18 and compare their orders between in-store and online.", "sql": "SELECT T2.Region, T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.SalesTeamID = 18 AND T1.\"Sales Channel\" = 'In-Store' OR T1.\"Sales Channel\" = 'Online'", "source_tables": ["sales team", "sales orders"]}, "evidence": "sale team ID of 18 refers to _SalesTeamID = 18; COUNT(OrderNumber where Sales Channel = 'In-Store') > COUNT(OrderNumber where Sales Channel = 'Online');"}
{"sample_id": 2747, "db_id": "european_football_1", "final": {"question": "How many teams playing in divisions in Greece have ever scored 4 or more goals?", "sql": "SELECT COUNT(DISTINCT CASE WHEN T1.FTHG >= 4 THEN HomeTeam ELSE NULL end) + COUNT(DISTINCT CASE WHEN T1.FTAG >= 4 THEN AwayTeam ELSE NULL end) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece'", "source_tables": ["divisions", "matchs"]}, "evidence": "teams include both HomeTeam and AwayTeam; country = 'Greece'; scored 4 or more goals refer to FTAG\u22654, which is short name for Final-time Away-team Goals;"}
{"sample_id": 2761, "db_id": "european_football_1", "final": {"question": "Please provide the names of any three away teams that competed in the Italian divisions.", "sql": "SELECT T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.country = 'Italy' LIMIT 3", "source_tables": ["divisions", "matchs"]}, "evidence": "Italian means belong to country = 'Italy\";"}
{"sample_id": 2743, "db_id": "european_football_1", "final": {"question": "What percentage of matches played on 2005/07/30 belong to the F1 division?", "sql": "SELECT CAST(SUM(CASE WHEN Div = 'F1' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Div) FROM matchs WHERE Date = '2005-07-30'", "source_tables": ["matchs"]}, "evidence": "Division refers to Div; DIVIDE(COUNT(Div = 'F1', Date = '2005/07/30'), COUNT(Div, Date = '2005/07/30')) as percentage;"}
{"sample_id": 2746, "db_id": "european_football_1", "final": {"question": "What is the name of all the teams that played in the EFL League One division?", "sql": "SELECT T1.HomeTeam,T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.name = 'EFL League One' and T1.Div = 'E2'", "source_tables": ["divisions", "matchs"]}, "evidence": "all the teams include both HomeTeam and AwayTeam; name = 'EFL League One'; DIV = 'E2';"}
{"sample_id": 2774, "db_id": "european_football_1", "final": {"question": "For a game had a score of 1-8 in the year of 2011, what division was that game in? Give the full name of the division.", "sql": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2011 AND T1.FTHG = 1 AND T1.FTAG = 8", "source_tables": ["divisions", "matchs"]}, "evidence": "2011 refers to season; a score of 1-8 refers to FTHG = '1' and FTAG = '8';"}
{"sample_id": 2783, "db_id": "european_football_1", "final": {"question": "How many matches were held during the 2021 season's Premier League?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T2.name = 'Premier League'", "source_tables": ["divisions", "matchs"]}, "evidence": "Premier League is the name of division;"}
{"sample_id": 2753, "db_id": "european_football_1", "final": {"question": "What is the name of the home team in division P1 with the highest final time goal in all seasons?", "sql": "SELECT HomeTeam FROM matchs WHERE Div = 'P1' AND season = 2021 ORDER BY FTHG DESC LIMIT 1", "source_tables": ["matchs"]}, "evidence": "the highest final time goal refers to MAX(FTHG); P1 = Div;"}
{"sample_id": 2749, "db_id": "european_football_1", "final": {"question": "Which 2 Scottish teams scored 10 goals playing as a local team and in which seasons?", "sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Scotland' AND T1.FTHG = 10", "source_tables": ["divisions", "matchs"]}, "evidence": "local team refers to HomeTeam; Scottish means belong to the country = 'Scotland'; scored 10 goals refer to FTHG = 10, which is short name for Final-time Away-team Goals;"}
{"sample_id": 2782, "db_id": "european_football_1", "final": {"question": "For all the games ended up with 1-1, what percentage of them are from Liga NOS division?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.name = 'Liga NOS' THEN T1.Div ELSE NULL END) AS REAL) * 100 / COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTHG = 1 AND FTAG = 1", "source_tables": ["divisions", "matchs"]}, "evidence": "1-1 is a score where FTHG = '1' and FTAG = '1'; Liga NOS is the name of division; DIVIDE(COUNT(Div where FTHG = '1', FTAG = '1', name = 'Liga NOS'), COUNT(Div where FTHG = '1' and FTAG = '1')) as percentage;"}
{"sample_id": 2780, "db_id": "european_football_1", "final": {"question": "How many Eredivisie teams have played in 2008?", "sql": "SELECT COUNT(DISTINCT T1.HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Eredivisie' AND T1.season = 2008", "source_tables": ["divisions", "matchs"]}, "evidence": "Eredivisie is the name of division; 2008 refers to season; teams refer to HomeTeam;"}
{"sample_id": 2763, "db_id": "european_football_1", "final": {"question": "How many times did Valencia's home team win in the LaLiga division?", "sql": "SELECT COUNT(T1.HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga' AND T1.HomeTeam = 'Valencia' AND T1.FTR = 'H'", "source_tables": ["divisions", "matchs"]}, "evidence": "LaLiga is a name of the division; Valencia's home team refers to HomeTeam = 'Valencia'; win refers to FTR = 'H';"}
{"sample_id": 2739, "db_id": "european_football_1", "final": {"question": "What is the most consecutive games tied by Ebbsfleet as an away team in the 2008 season?", "sql": "SELECT COUNT(*) FROM matchs WHERE season = 2008 AND AwayTeam = 'Ebbsfleet' AND FTR = 'D'", "source_tables": ["matchs"]}, "evidence": "consecutive games mean happen one after the other without interruption and refer to Date; tied refers to FTR = 'D';"}
{"sample_id": 2786, "db_id": "european_football_1", "final": {"question": "Which team has the most victories as the home team in matches of the Bundesliga division?", "sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'H' GROUP BY T1.HomeTeam ORDER BY COUNT(T1.FTR) DESC LIMIT 1", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; the most victories as the home team refers to MAX(COUNT(FTR = 'H'));"}
{"sample_id": 2769, "db_id": "european_football_1", "final": {"question": "When did the first match that score more than 10 goals happen?", "sql": "SELECT MIN(Date) FROM matchs WHERE FTHG + FTAG > 10", "source_tables": ["matchs"]}, "evidence": "score more than 10 goals refers to SUM(FTHG, FTAG)>10, which are short names for Final-time Home-team Goals and Final-time Away-team Goals; the first means the earliest and refers to MIN(Date);"}
{"sample_id": 2766, "db_id": "european_football_1", "final": {"question": "What's the name of the football division in the Netherlands?", "sql": "SELECT name FROM divisions WHERE country = 'Netherlands'", "source_tables": ["divisions"]}, "evidence": "Netherlands is the name of country;"}
{"sample_id": 2784, "db_id": "european_football_1", "final": {"question": "Which team was the home team in the match of the Bundesliga division on 2020/10/2?", "sql": "SELECT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-10-02' AND T2.name = 'Bundesliga'", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; Date = '2020/10/2';"}
{"sample_id": 2772, "db_id": "european_football_1", "final": {"question": "How many draw games happened on 2018/8/7 for National League?", "sql": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'National League' AND T1.Date = '2018-08-07' AND T1.FTR = 'D'", "source_tables": ["divisions", "matchs"]}, "evidence": "National League is the name of division; Date = '2018-08-07'; draw refers to FTR = 'D'; games refer to Div;"}
{"sample_id": 2771, "db_id": "european_football_1", "final": {"question": "How many Away Victories happened on 2016/3/27 in the LaLiga 2 division?", "sql": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga 2' AND T1.Date = '2016-03-27' AND T1.FTR = 'A'", "source_tables": ["divisions", "matchs"]}, "evidence": "Away victories refer to FTR = 'A'; LaLiga 2 is the name of division; Date = '2016-03-27';"}
{"sample_id": 2744, "db_id": "european_football_1", "final": {"question": "What percentage of all tied games did the Sassuolo team play in?", "sql": "SELECT CAST(SUM(CASE WHEN HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(FTR) FROM matchs WHERE FTR = 'D'", "source_tables": ["matchs"]}, "evidence": "tied games refer FTR = 'D'; DIVIDE(COUNT(Div where FTR = 'D', HomeTeam = 'Sassuolo' or AwayTeam = 'Sassuolo'), COUNT(Div where HomeTeam = 'Sassuolo' or AwayTeam = 'Sassuolo')) as percentage;"}
{"sample_id": 2750, "db_id": "european_football_1", "final": {"question": "From the Spanish LaLiga division in the 2017 season, which team won the most times as a local team and by what percentage?", "sql": "SELECT T1.HomeTeam HWHT , CAST(COUNT(CASE WHEN T1.FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(HomeTeam) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'LaLiga' AND T2.country = 'Spain' AND T1.season = 2017", "source_tables": ["divisions", "matchs"]}, "evidence": "local team refers to HomeTeam; Spanish means belong to the country = 'Spain'; LaLiga is a name of division; won as a local team refers to FTR = 'H', where H stands for home victory; DIVIDE(COUNT(Div where name = 'LaLiga', country = 'Spain', season = 2017, FRT = 'H'), COUNT(Div where name = 'LaLiga', country = 'Spain', season = 2017)) as percentage;"}
{"sample_id": 2751, "db_id": "european_football_1", "final": {"question": "How many teams that played in the 2012 season belong to any of the English divisions and what percentage play in each of the divisions?", "sql": "SELECT ( SELECT COUNT(T1.Div) AS total FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS num , CASE WHEN 1 THEN T.result END AS percentage FROM ( SELECT 100.0 * COUNT(T1.Div) / ( SELECT COUNT(T1.Div) FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 ) AS result FROM matchs T1 INNER JOIN divisions T2 ON T2.division = T1.Div WHERE T2.country = 'England' AND T1.season = 2012 GROUP BY T2.division ) AS T", "source_tables": ["divisions", "matchs"]}, "evidence": "matches = Div"}
{"sample_id": 2760, "db_id": "european_football_1", "final": {"question": "Which away team in the division of Bundesliga has the highest final time goals?", "sql": "SELECT T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.name = 'Bundesliga' ORDER BY T1.FTAG DESC LIMIT 1", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is a name of division; the highest final time goals refers to MAX(FTAG);"}
{"sample_id": 2790, "db_id": "european_football_1", "final": {"question": "How many home victories does the Bundesliga division have in more or less than the Premier League division in the 2021 season?", "sql": "SELECT COUNT(CASE WHEN T2.name = 'Bundesliga' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.name = 'Premier League' THEN 1 ELSE NULL END) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H'", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga and the Premier League are names of division; home victories refer to FTR = 'H', where H stands for home victory; SUBTRACT(COUNT(FTR = 'H' where season = 2021, name = 'Bundesliga'), COUNT(FTR = 'H' where season = 2021, name = 'Premier League'));"}
{"sample_id": 2789, "db_id": "european_football_1", "final": {"question": "Of the matches in all seasons of the Bundesliga division, how many of them ended with a tie?", "sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.FTR = 'D'", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; tie refers to FTR = 'D', where D stands for draft;"}
{"sample_id": 2779, "db_id": "european_football_1", "final": {"question": "Which country did Bradford Team belongs to?", "sql": "SELECT DISTINCT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Bradford' OR T1.AwayTeam = 'Bradford'", "source_tables": ["divisions", "matchs"]}, "evidence": "Bradford team refers to HomeTeam = 'Bradford' or AwayTeam = 'Bradford';"}
{"sample_id": 2765, "db_id": "european_football_1", "final": {"question": "How many football divisions does England have?", "sql": "SELECT COUNT(division) FROM divisions WHERE country = 'England'", "source_tables": ["divisions"]}, "evidence": "England is the name of country;"}
{"sample_id": 2757, "db_id": "european_football_1", "final": {"question": "What is the name of the division in which Club Brugge and Genk competed on September 13, 2009?", "sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2009-09-13' and T1.HomeTeam = 'Club Brugge' AND T1.AwayTeam = 'Genk'", "source_tables": ["divisions", "matchs"]}, "evidence": "September 13, 2009 refers to Date = '2009-09-13'; Club Brugge refers to HomeTeam; Genk refers to AwayTeam;"}
{"sample_id": 2756, "db_id": "european_football_1", "final": {"question": "Which team won the match in the EC division on January 20, 2008 at home?", "sql": "SELECT HomeTeam FROM matchs WHERE Div = 'EC' AND Date = '2008-01-20' AND FTR = 'H'", "source_tables": ["matchs"]}, "evidence": "won at home refers to FTR = 'H'; January 20, 2008 refers to Date = '2008-01-20'; EC division refers to Div = 'EC';"}
{"sample_id": 2740, "db_id": "european_football_1", "final": {"question": "Of all the divisions in the world, what percentage of them belong to England?", "sql": "SELECT CAST(COUNT(CASE WHEN country = 'England' THEN division ELSE NULL END) AS REAL) * 100 / COUNT(division) FROM divisions", "source_tables": ["divisions"]}, "evidence": "DIVIDE(COUNT(division where country = 'England'), COUNT(division)) as percentage;"}
{"sample_id": 2770, "db_id": "european_football_1", "final": {"question": "For the Ligue 2 game that made the most goals, who is the winner of that game?", "sql": "SELECT CASE WHEN T1.FTR = 'H' THEN T1.HomeTeam ELSE T1.AwayTeam END WINNER FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Ligue 2' ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1", "source_tables": ["divisions", "matchs"]}, "evidence": "Ligue 2 is the name of division; the most goals refer to MAX(SUM(FTHG, FTAG)) which are short names for Final-time Home-team Goals and Final-time Away-team Goals; winner refers to FTR = 'A';"}
{"sample_id": 2768, "db_id": "european_football_1", "final": {"question": "What was the final score for the game Bursaspor vs Denizlispor on 2009/4/26?", "sql": "SELECT FTHG, FTAG FROM matchs WHERE Date = '2009-04-26' AND HomeTeam = 'Bursaspor' AND AwayTeam = 'Denizlispor'", "source_tables": ["matchs"]}, "evidence": "Bursaspor vs Denizlispor are names of teams where HomeTeam = 'Bursaspor' and AwayTeam = 'Denizlispor'; Date = '2009-04-26'; final score refers to FTHG, FTAG;"}
{"sample_id": 2791, "db_id": "european_football_1", "final": {"question": "Please list the home teams in the matches of the Bundesliga division that ended with a home victory in the 2021 season.", "sql": "SELECT DISTINCT T1.HomeTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2021 AND T1.FTR = 'H' AND T2.name = 'Bundesliga'", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; home victory refers to refer to FTR = 'H', where H stands for home victory;"}
{"sample_id": 2785, "db_id": "european_football_1", "final": {"question": "Which team won the match of the Bundesliga division on 2020/10/2?", "sql": "SELECT CASE WHEN T1.FTR = 'H' THEN T1.HomeTeam WHEN T1.FTR = 'A' THEN T1.AwayTeam END WINNER FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-10-02' AND T2.name = 'Bundesliga'", "source_tables": ["divisions", "matchs"]}, "evidence": "Bundesliga is the name of division; Date = '2020/10/2'; won the match refers to FTR = 'H';"}
{"sample_id": 2754, "db_id": "european_football_1", "final": {"question": "What was the difference in home team and away team win percentages across all divisions in 2010?", "sql": "SELECT CAST(COUNT(CASE WHEN FTR = 'H' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(FTR) - CAST(COUNT(CASE WHEN FTR = 'A' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(FTR) DIFFERENCE FROM matchs WHERE season = 2010", "source_tables": ["matchs"]}, "evidence": "2010 refers to season = 2010; SUBTRACT(DIVIDE(COUNT(Div where FTR = 'H', season = 2010), COUNT(Div where season = 2010)), COUNT(Div where FTR = 'A', season = 2010), COUNT(Div where season = 2010)) as percentage;"}
{"sample_id": 2804, "db_id": "professional_basketball", "final": {"question": "List all the coaches with more game lost than won from year 2000-2010. List the coach ID, team name and year.", "sql": "SELECT DISTINCT T1.coachID, T2.tmID, T1.year FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 2000 AND 2010 AND T2.lost > T2.won", "source_tables": ["coaches", "teams"]}, "evidence": "from year 2000 to 2010 refers to year between 2000 and 2010; more game lost then won refers to lost > won"}
{"sample_id": 2897, "db_id": "professional_basketball", "final": {"question": "List the year, team and coach that with winning rate of above 75%.", "sql": "SELECT DISTINCT T1.year, T2.name, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T1.won AS REAL) / CAST((T1.won + T1.lost) AS REAL) > 0.75", "source_tables": ["coaches", "teams"]}, "evidence": "team refers to teams.name; coach refers to coachID; winning rate of above 75% refers to divide(won, add(won, lost)) > 0.75"}
{"sample_id": 2833, "db_id": "professional_basketball", "final": {"question": "Among the players that went to high school in New York and have won the MVP, what is their average height?", "sql": "SELECT AVG(T1.height) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'New York'", "source_tables": ["players", "awards_players"]}, "evidence": "high school in New York refers to highSchool like '%New York%'; won the MVP refers to award = 'Most Valuable Player'; average height = Divide (Sum(height), Count(playerID))"}
{"sample_id": 2928, "db_id": "professional_basketball", "final": {"question": "What is the number of NBA titles that Ray Allen has won throughout his NBA career?", "sql": "SELECT COUNT(T1.playerID) FROM player_allstar AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE first_name = 'Ray' AND last_name = 'Allen'", "source_tables": ["awards_players", "player_allstar"]}, "evidence": "NBA refers to lgID = 'NBA'"}
{"sample_id": 2882, "db_id": "professional_basketball", "final": {"question": "In 1950, how many players whose teams have the losing rate less than 20%?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE CAST(T3.lost AS REAL) * 100 / (T3.lost + T3.won) < 20", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "in 1950 refers to year = 1950; losing rate less than 20% refers to divide(lost, add(won, lost)) < 0.2"}
{"sample_id": 2893, "db_id": "professional_basketball", "final": {"question": "From which college was the player who won the most award in 1970.", "sql": "SELECT college FROM players WHERE playerID = ( SELECT playerID FROM awards_players WHERE year = 1970 GROUP BY playerID ORDER BY COUNT(award) DESC LIMIT 1 )", "source_tables": ["players", "awards_players"]}, "evidence": "college refers to highSchool; won the most award refers to max(count(award)); in 1970 refers to year = 1970"}
{"sample_id": 2860, "db_id": "professional_basketball", "final": {"question": "What are the basketball players' BMI ranges?", "sql": "SELECT MIN(CAST(weight AS REAL) / (height * height)) , MAX(CAST(weight AS REAL) / (height * height)) FROM players", "source_tables": ["players"]}, "evidence": "BMI = Multiply(Divide(weight, Multiply(height, height)), 703)"}
{"sample_id": 2838, "db_id": "professional_basketball", "final": {"question": "How many teams have played more than 3800 points and have player with \"Most Valuable Player\" award?", "sql": "SELECT COUNT(DISTINCT T4.name) FROM ( SELECT T1.name, SUM(T2.points) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN awards_players AS T3 ON T2.playerID = T3.playerID WHERE T3.award = 'Most Valuable Player' GROUP BY T1.name HAVING SUM(T2.points) >= 3800 ) AS T4", "source_tables": ["players_teams", "awards_players", "teams"]}, "evidence": "played more than 3800 points refers to Sum(points) > = 3800"}
{"sample_id": 2854, "db_id": "professional_basketball", "final": {"question": "Among the teams that were ranked 3 from 1937 to 1940, what is the team name whose players had the highest point?", "sql": "SELECT DISTINCT T1.name FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.rank = 3 AND T1.year BETWEEN 1937 AND 1940 ORDER BY T2.points DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "from 1937 to 1940 refers to year between 1937 and 1940; player with highest point refers to Max(points)"}
{"sample_id": 2806, "db_id": "professional_basketball", "final": {"question": "Which team(s) had 90% games won. List the coach ID for the team and year played.", "sql": "SELECT DISTINCT T2.name, T1.year, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T2.won AS REAL) * 100 / T2.games > 90", "source_tables": ["coaches", "teams"]}, "evidence": "team with 90% games won refers to Divide (won, games) > 0.9"}
{"sample_id": 2803, "db_id": "professional_basketball", "final": {"question": "In year 2000, who are the coaches with more than 50 games won. List the coachID, team name and number of game won at home game.", "sql": "SELECT T1.coachID, T2.name, T2.won FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2000 AND T2.won > 50", "source_tables": ["coaches", "teams"]}, "evidence": "more than 50 games won refers to won > 50"}
{"sample_id": 2822, "db_id": "professional_basketball", "final": {"question": "What is the name of the coach during whose period of coaching, a team has the most numbers of games won in the post-season games?", "sql": "SELECT coachID FROM coaches ORDER BY post_wins DESC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "the most number of game won in post season refers to Max(post_wins); coach refers to coachID"}
{"sample_id": 2835, "db_id": "professional_basketball", "final": {"question": "Which teams have winning rate less than 50%?", "sql": "SELECT name FROM teams WHERE CAST(won AS REAL) * 100 / (won + lost) < 50", "source_tables": ["teams"]}, "evidence": "team with winning rate less than 50% refers to Divide (won, Sum(won, lost)) < 0.5"}
{"sample_id": 2808, "db_id": "professional_basketball", "final": {"question": "What division did the team coached by the winner of the 1977 NBA Coach of the Year award play in in 1976?", "sql": "SELECT DISTINCT T3.divID FROM awards_coaches AS T1 INNER JOIN coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T2.tmID = T3.tmID WHERE T1.year = 1977 AND T1.award = 'NBA Coach of the Year' AND T3.year = 1976", "source_tables": ["awards_coaches", "coaches", "teams"]}, "evidence": "\"NBA Coach of the Year\" is the award; in 1977 refers to year = 1977; in 1976 refers to year = 1976; division refers to divisionID"}
{"sample_id": 2847, "db_id": "professional_basketball", "final": {"question": "What is the maximum weight of USA all-star players?", "sql": "SELECT MAX(T1.weight) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA'", "source_tables": ["players", "player_allstar"]}, "evidence": "\"USA\" is the birthCountry of player;\u00a0 maximum weight refers to Max(weight)"}
{"sample_id": 2861, "db_id": "professional_basketball", "final": {"question": "What is the name of the team with the highest home lost rate?", "sql": "SELECT name FROM teams ORDER BY CAST(homeWon AS REAL) / (homeWon + homeLost) DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "highest home lost rate = Max(Divide(homelost, Sum(homeWon, homeLost)))"}
{"sample_id": 2944, "db_id": "professional_basketball", "final": {"question": "Which team did the youngest player who could be in F-G position play in the NBA?", "sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN players AS T3 ON T2.playerID = T3.playerID WHERE T3.pos = 'F-G' AND T2.lgID = 'NBA' ORDER BY T3.birthDate DESC LIMIT 1", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "team refers to tmID; the youngest refers to max(year); F-G position refers to pos like '%F'; NBA refers to lgID = 'NBA'"}
{"sample_id": 2930, "db_id": "professional_basketball", "final": {"question": "Among the coaches who won the 'NBA coach of the year' award from 1971 - 1975, how many of them were in 'POR' team?", "sql": "SELECT COUNT(T1.id) FROM awards_coaches AS T1 INNER JOIN teams AS T2 ON T1.year = T2.year WHERE T1.year BETWEEN 1971 AND 1975 AND T1.award = 'NBA Coach of the Year' AND T2.tmID = 'POR'", "source_tables": ["awards_coaches", "teams"]}, "evidence": "the 'NBA coach of the year' award refers to award = 'NBA coach of the year'; from 1971 - 1975 refers to year between 1971 and 1975; 'POR' team refers to tmID = 'POR'"}
{"sample_id": 2926, "db_id": "professional_basketball", "final": {"question": "How many games did team of the scoring champion win in 2001 NBA season?", "sql": "SELECT T2.W FROM teams AS T1 INNER JOIN series_post AS T2 ON T1.tmID = T2.tmIDLoser AND T1.year = T2.year WHERE T2.year = 2001 ORDER BY T1.o_fgm DESC LIMIT 1", "source_tables": ["series_post", "teams"]}, "evidence": "the scoring champion refers to max(won); 2001 refers to year = 2001; NBA refers to lgID = 'NBA'"}
{"sample_id": 2877, "db_id": "professional_basketball", "final": {"question": "How many players received Most Valuable Player award from 1969 to 1975?", "sql": "SELECT COUNT(DISTINCT playerID) FROM awards_players WHERE year BETWEEN 1969 AND 1975 AND award = 'Most Valuable Player'", "source_tables": ["awards_players"]}, "evidence": "Most Valuable Player award refers to award = 'Most Valuable Player'; from 1969 to 1975 refers to year between 1969 and 1975"}
{"sample_id": 2866, "db_id": "professional_basketball", "final": {"question": "What is the average BMI of an All-star player?", "sql": "SELECT AVG(CAST(T1.weight AS REAL) / (T1.height * T1.height)) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID", "source_tables": ["players", "player_allstar"]}, "evidence": "average BMI refers to AVG (Multiply(Divide(weight, Multiply(height, height)), 703))"}
{"sample_id": 2848, "db_id": "professional_basketball", "final": {"question": "From 1960 to 1970, what is the total point of all-star players who are still alive?", "sql": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id BETWEEN 1960 AND 1970 AND T1.deathDate = '0000-00-00'", "source_tables": ["players", "player_allstar"]}, "evidence": "from 1960 to 1970 refers to season_id between 1960 and 1970; still alive refers to deathDate = '0000-00-00'"}
{"sample_id": 2871, "db_id": "professional_basketball", "final": {"question": "What is the full name of the team that the 'NBA Coach of the Year' 1992 winner coached?", "sql": "SELECT name FROM teams AS T1 INNER JOIN coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN awards_coaches AS T3 ON T2.coachID = T3.coachID AND T2.year = T3.year WHERE T3.year = 1992 AND award = 'NBA Coach of the Year'", "source_tables": ["awards_coaches", "coaches", "teams"]}, "evidence": "\"NBA Coach of the Year\" is the award; in 1992 refers to year = 1992;"}
{"sample_id": 2892, "db_id": "professional_basketball", "final": {"question": "List out all the players fullname who won the championship in 1970.", "sql": "SELECT DISTINCT T3.firstName, T3.middleName, T3.lastName FROM series_post AS T1 INNER JOIN players_teams AS T2 ON T1.tmIDWinner = T2.tmID INNER JOIN players AS T3 ON T3.playerID = T2.playerID WHERE T1.year = 1970 AND T1.round = 'F'", "source_tables": ["players_teams", "players", "series_post"]}, "evidence": "full name refers to firstName, middleName, lastName; won the championship refers to round = 'F'; in 1970 refers to year = 1970"}
{"sample_id": 2927, "db_id": "professional_basketball", "final": {"question": "How many turnovers per game did the assist champion had in the 2003 NBA season?", "sql": "SELECT AVG(T2.turnovers) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2003 GROUP BY T1.playerID, T2.assists ORDER BY T2.assists DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "turnovers per game = avg(turnovers); 2003 refers to year = 2003; NBA refers to lgID = 'NBA'"}
{"sample_id": 2909, "db_id": "professional_basketball", "final": {"question": "How many awards were given out in 2010 to players who attended high school in Chicago?", "sql": "SELECT COUNT(T1.award) FROM awards_players AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2010 AND T2.hsCity = 'Chicago'", "source_tables": ["players", "awards_players"]}, "evidence": "in 2010 refers to year = 2010; attended high school in Chicago refers to college = 'Chicago'"}
{"sample_id": 2824, "db_id": "professional_basketball", "final": {"question": "Among the players from the ABA league, how many of them have the center position?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'ABA' AND (T1.pos = 'C' OR T1.pos = 'F-C')", "source_tables": ["players_teams", "players"]}, "evidence": "\"ABA\" is the lgID; center position refers to pos = \u00a0 'C' or pos = 'F-C'; players refers to playerID"}
{"sample_id": 2914, "db_id": "professional_basketball", "final": {"question": "From 1980 to 1983, how many of the NBA All-Star players have more than 60% three point rate?", "sql": "SELECT DISTINCT T2.playerID FROM player_allstar AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year BETWEEN 1980 AND 1983 AND T1.three_made / T1.three_attempted > 0.6", "source_tables": ["players_teams", "player_allstar"]}, "evidence": "from 1980 to 1983 refers to year BETWEEN 1980 and 1983; NBA refers to lgID = 'NBA'; more than 60% three point rate refers to divide(threeMade, threeAttempted) > 0.6"}
{"sample_id": 2801, "db_id": "professional_basketball", "final": {"question": "Who is the coach for 'BOS' team in year 1950. List the coach ID together with the number of game won and lost.", "sql": "SELECT coachID, won, lost FROM coaches WHERE year = 1950 AND tmID = 'BOS'", "source_tables": ["coaches"]}, "evidence": "'BOS' is the tmID; 1950 refers to year = 1950; number of game won refers to won; number of game lost refers to lost"}
{"sample_id": 2797, "db_id": "professional_basketball", "final": {"question": "Which team(s) has greater than 75% lost among all the games played.", "sql": "SELECT name FROM teams WHERE CAST(lost AS REAL) * 100 / games > 75", "source_tables": ["teams"]}, "evidence": "greater than 75% lost refers to Divide(lost, games) > 0.75; team refers to tmID"}
{"sample_id": 2862, "db_id": "professional_basketball", "final": {"question": "How old was Alexis Ajinca when he was first drafted?", "sql": "SELECT draftYear - strftime('%Y', birthDate) FROM draft AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Alexis' AND T1.lastName = 'Ajinca' AND draftRound = 1", "source_tables": ["players", "draft"]}, "evidence": "age when drafted refers to Subtract(draftYear, year(birthDate)); first drafted refers to draftYear"}
{"sample_id": 2916, "db_id": "professional_basketball", "final": {"question": "How many times have coaches who were from CHI been awarded as NBA Coach of the Year?", "sql": "SELECT COUNT(DISTINCT T2.coachID) FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.tmID = 'CHI' AND T2.award = 'NBA Coach of the Year'", "source_tables": ["awards_coaches", "coaches"]}, "evidence": "CHI refers to tmID = 'CHI'; awarded Coach of the Year refers to award = 'Coach of the Year'; NBA refers to lgID = 'NBA'"}
{"sample_id": 2906, "db_id": "professional_basketball", "final": {"question": "How many times between 1975 and 1980 did the player abdulka01 play for LAL?", "sql": "SELECT COUNT(DISTINCT T2.year) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'LAL' AND T2.year BETWEEN 1975 AND 1980 AND T1.playerID = 'abdulka01'", "source_tables": ["players_teams", "players"]}, "evidence": "between 1975 and 1980 refers to year between 1975 and 1980; player abdulka01 refers to playerID = 'abdulka01'; play for LAL refers to tmID = 'LAL'"}
{"sample_id": 2823, "db_id": "professional_basketball", "final": {"question": "Among the coaches who have served more than 2 NBA teams, during which coach's period of coaching, a team has the least numbers of games lost in the post-season games?", "sql": "SELECT coachID FROM coaches WHERE lgID = 'NBA' AND post_wins != 0 AND post_losses != 0 AND coachID IN ( SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING COUNT(tmID) > 2 ) ORDER BY post_losses ASC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "served more than 2 NBA teams refers to count (tmID) > = 2; least number of game lost in post season refers to Min(post_losses)"}
{"sample_id": 2829, "db_id": "professional_basketball", "final": {"question": "Please list the birth date of the player who has won the most MVPs.", "sql": "SELECT T1.birthDate FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' GROUP BY T1.playerID, T1.birthDate ORDER BY COUNT(award) DESC LIMIT 1", "source_tables": ["players", "awards_players"]}, "evidence": "won the most MVP refers to Max(Count(award = 'Most Valuable Player'))"}
{"sample_id": 2929, "db_id": "professional_basketball", "final": {"question": "How much did the win rate increase for the team after getting the No.1 NBA draft pick in the 2003 season than previous season?", "sql": "SELECT (CAST(SUM(CASE WHEN T1.year = 2004 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2004 THEN T1.won + T1.lost ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.year = 2003 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2003 THEN T1.won + T1.lost ELSE 0 END)) FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID WHERE T2.draftRound = 1 AND T2.draftYear = 2003", "source_tables": ["teams", "draft"]}, "evidence": "No.1 draft pick refers to draftRound = 1; in the 2003 season refers to draftyear = 2003; increase = subtract(divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2004, divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2003)"}
{"sample_id": 2812, "db_id": "professional_basketball", "final": {"question": "What is the birth date of the player with the most assists during the 1985 All-Star season?", "sql": "SELECT T1.birthDate FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1985 ORDER BY T2.assists DESC LIMIT 1", "source_tables": ["players", "player_allstar"]}, "evidence": "most assist refers to Max(assists); in 1985 All Star season refers to season_id = 1985"}
{"sample_id": 2936, "db_id": "professional_basketball", "final": {"question": "What's the full name of the team that won the most games in 2001 but didn't make the playoffs?", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 ORDER BY T2.won DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "full name of the team refers to teams.name; in 2001 refers to year = 2001; didn't make the playoffs refers to PostGP = 0; won the most games refers to max(won)"}
{"sample_id": 2817, "db_id": "professional_basketball", "final": {"question": "How many total minutes has the Brooklyn-born player, known by the name of Superman, played during all of his NBA All-Star seasons?", "sql": "SELECT SUM(T2.minutes) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Brooklyn' AND T1.nameNick LIKE '%Superman%'", "source_tables": ["players", "player_allstar"]}, "evidence": "\"Brooklyn\" is the birthCity of player; known by the name of Superman refers to nameNick like '%Superman%'; total minutes refers to Sum(minutes)"}
{"sample_id": 2858, "db_id": "professional_basketball", "final": {"question": "How many players with the first name Joe were drafted in 1970?", "sql": "SELECT COUNT(DISTINCT playerID) FROM draft WHERE firstName = 'Joe' AND draftYear = 1970", "source_tables": ["draft"]}, "evidence": "drafted in 1970 refers to draftYear = 1970"}
{"sample_id": 2931, "db_id": "professional_basketball", "final": {"question": "How many percent of points were scored by NBA players who belonged to 'LAL' team and had performed steals movement.", "sql": "SELECT CAST(SUM(IIF(T2.steals IS NOT NULL AND T1.tmID = 'LAL', 1, 0)) AS REAL) * 100 / COUNT(T1.tmID) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year", "source_tables": ["players_teams", "teams"]}, "evidence": "NBA refers to lgID = 'NBA'; 'LAL' team refers to tmID = 'LAL'; performed steals movement refers to steals > 0; percent = divide(count(playerID where steals > 0), count(playerID)) where lgID = 'NBA' and tmID = 'LAL' * 100%"}
{"sample_id": 2874, "db_id": "professional_basketball", "final": {"question": "Among the Most improved Players awarded from 1985-1990, how many player whose country is USA?", "sql": "SELECT COUNT(DISTINCT T2.playerID) FROM awards_players AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.award = 'Most Improved Player' AND T2.birthCountry = 'USA' AND T1.year BETWEEN 1985 AND 1990", "source_tables": ["players", "awards_players"]}, "evidence": "the Most improved Player refers to award = 'Most Improved Player'; from 1985-1990 refers to year between 1985 and 1990; country is USA refers to birthCountry = 'USA'"}
{"sample_id": 2899, "db_id": "professional_basketball", "final": {"question": "How many players, in games played in 1990, achieved 50% or less of oRebounds than dRebounds.", "sql": "SELECT COUNT(playerID) FROM players_teams WHERE CAST(oRebounds AS REAL) * 100 / dRebounds <= 50 AND year = 1990", "source_tables": ["players_teams"]}, "evidence": "in 1990 refers to season_id = 1990; 50% or less of oRebounds than dRebounds refers to o_rebounds < = multiply(d_rebounds, 0.5)"}
{"sample_id": 2807, "db_id": "professional_basketball", "final": {"question": "What is the percentage of player who won \"All-Defensive First Team\" from 1980 - 2000 is from 'NY'.", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.birthState = 'NY' AND T2.award = 'All-Defensive First Team' AND T2.year BETWEEN 1980 AND 2000", "source_tables": ["players", "awards_players"]}, "evidence": "\"All-Defensive First Team\" is the award; ' NY' is the birthState; 1980 to 2000 refers to year between 1980 and 2000; percentage = Divide (Count(playerID where birthState = 'NY'), Count(playerID)) * 100"}
{"sample_id": 2890, "db_id": "professional_basketball", "final": {"question": "List the champion (team name) and year from year 1950 to 1960.", "sql": "SELECT DISTINCT T1.name, T2.year FROM teams AS T1 JOIN series_post AS T2 ON T1.tmID = T2.tmIDWinner WHERE T2.round = 'F' AND T2.year BETWEEN 1950 AND 1960", "source_tables": ["series_post", "teams"]}, "evidence": "champion refers to round = 'F'; team name refers to teams.name; from year 1950 to 1960 refers to year between 1950 and 1960"}
{"sample_id": 2820, "db_id": "professional_basketball", "final": {"question": "In which league did the player who weighs 40% less than the heaviest player and whose height is 80 inches play?", "sql": "SELECT T2.lgID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID GROUP BY T2.lgID, T1.weight HAVING T1.weight = MAX(T1.weight) - MAX(T1.weight) * 0.4", "source_tables": ["players_teams", "players"]}, "evidence": "weigh 40% less than the heaviest player refers to weight = Multiply(Max (weight), 0.6); league refers to lgID"}
{"sample_id": 2814, "db_id": "professional_basketball", "final": {"question": "Of all the All-star players who played in the Eastern Conference for no more than 5 minutes, how many went to Illinois College?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.conference = 'East' AND T2.minutes <= 5 AND T1.college = 'Illinois'", "source_tables": ["players", "player_allstar"]}, "evidence": "Eastern conference refers to conference = 'East'; no more than 5 minutes refers to minutes < 5"}
{"sample_id": 2886, "db_id": "professional_basketball", "final": {"question": "Name the team in which the coach won the title 'NBA Coach of the Year' in 2010.", "sql": "SELECT DISTINCT T1.tmID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 2010 AND T2.award = 'NBA Coach of the Year'", "source_tables": ["awards_coaches", "coaches"]}, "evidence": "team name refers to teams.name; won the title 'NBA Coach of the Year' refers to award = 'NBA Coach of the Year'; in 2010 refers to year = 2010"}
{"sample_id": 2853, "db_id": "professional_basketball", "final": {"question": "Please list the last names and first names of all-star players whose team were ranked 1 for consecutive 3 years from 1937 to 1940.", "sql": "SELECT T5.lastName, T5.firstName FROM players_teams AS T4 INNER JOIN players AS T5 ON T4.playerID = T5.playerID WHERE T4.year BETWEEN 1937 AND 1940 AND T4.tmID IN ( SELECT DISTINCT T1.tmID FROM teams AS T1 INNER JOIN teams AS T2 INNER JOIN teams AS T3 ON T1.tmID = T2.tmID AND T2.tmID = T3.tmID AND T3.year - T2.year = 1 AND T2.year - T1.year = 1 WHERE T1.rank = 1 AND T1.year BETWEEN 1937 AND 1940 )", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "from 1937 to 1940 refers to year between 1937 and 1940; rank 1 for 3 years refers to tmID where Count (rank = 1) > = 3"}
{"sample_id": 2901, "db_id": "professional_basketball", "final": {"question": "Which player selected by Portland in 2nd draftRound won Rookie of the Year in 1971?", "sql": "SELECT T1.playerID FROM draft AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' AND T1.draftYear = 1971 AND T1.draftRound = 2", "source_tables": ["awards_players", "draft"]}, "evidence": "2nd draftRound refers to draftRound = 2; won Rookie of the Year refers to award = 'Rookie of the Year'; in 1971 refers to draftYear = 1971"}
{"sample_id": 2818, "db_id": "professional_basketball", "final": {"question": "Of all the teams coached by the winner of the 1994 NBA Coach of the Year award, which team has lost the most times playing at home?", "sql": "SELECT T3.tmID FROM awards_coaches AS T1 INNER JOIN coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T1.year = 1994 AND T1.award = 'NBA Coach of the Year' GROUP BY T3.tmID ORDER BY SUM(T3.homeLost) DESC LIMIT 1", "source_tables": ["awards_coaches", "coaches", "teams"]}, "evidence": "of 1994 refers to year = 1994; 'NBA Coach of the Year' is the award; lost the most time at home refers to Max(homeLost)"}
{"sample_id": 2935, "db_id": "professional_basketball", "final": {"question": "Which non-playoffs team had the most points in the regular season in the year 1998?", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1998 AND T1.PostGP = 0 ORDER BY T1.points DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "non-playoff refers to PostGP = 0; in the year 1998 refers to year = 1998; the most points refers to max(o_pts)"}
{"sample_id": 2912, "db_id": "professional_basketball", "final": {"question": "What is the name of the university that was drafted from the player who won the NBA Finals MVP in 1990?", "sql": "SELECT T1.college FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1990 AND T2.award = 'Finals MVP'", "source_tables": ["players", "awards_players"]}, "evidence": "name of the university refers to highSchool; NBA refers to lgID = 'NBA'; Finals MVP refers to award = 'Finals MVP'; in 1990 refers to year = 1990"}
{"sample_id": 2813, "db_id": "professional_basketball", "final": {"question": "Which player, born in Winter Haven, played 12 minutes per season during the 1980s in the All-Stars?", "sql": "SELECT DISTINCT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Winter Haven' AND T2.season_id BETWEEN 1980 AND 1989 AND T2.minutes = 12", "source_tables": ["players", "player_allstar"]}, "evidence": "born in Winter Haven refers to birthCity = 'Winter Haven'; during the 1980s in All-Stars refers to season_id = 1980; played in 12 minutes\u00a0 per season refers to minutes = 12"}
{"sample_id": 2857, "db_id": "professional_basketball", "final": {"question": "Please list the top three shortest black players.", "sql": "SELECT firstName, lastName FROM players WHERE race = 'B' AND height > 0 ORDER BY height ASC LIMIT 3", "source_tables": ["players"]}, "evidence": "shortest player refers to Min(height); black players refers to race = 'B'"}
{"sample_id": 2918, "db_id": "professional_basketball", "final": {"question": "Which player from Wake Forest college did the most offensive rebounds than defensive rebounds in the all-star? Please mention the full name of the player including the middle name if have any.", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Wake Forest' AND T2.o_rebounds > T2.d_rebounds", "source_tables": ["players", "player_allstar"]}, "evidence": "Wake Forest college refers to highSchool = 'Wake Forest college'; did the most offensive rebounds than defensive rebounds refers to max(subtract(sum(oRebounds), sum(dRebounds))); full name refers to first_name, middle_name, last_name"}
{"sample_id": 2920, "db_id": "professional_basketball", "final": {"question": "State the name of teams ranked first five or more times and lost a league two or more times between 1980 and 2000?", "sql": "SELECT T1.name FROM teams AS T1 INNER JOIN series_post AS T2 ON T1.tmID = T2.tmIDLoser AND T1.year = T2.year WHERE T1.rank < 5 AND T2.lgIDLoser > 2 AND T2.year BETWEEN 1980 AND 2000", "source_tables": ["series_post", "teams"]}, "evidence": "name of team refers to teams.name; between 1980 and 2000 refers to year between 1980 and 2000; ranked first five or more times refers to count(rank = 1) > = 5; lost a league two or more times refers to lost > 2"}
{"sample_id": 2941, "db_id": "professional_basketball", "final": {"question": "Where was the high school of the player who had the most rebounds in the NBA allstar history?", "sql": "SELECT T2.highSchool FROM player_allstar AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID ORDER BY T1.rebounds DESC LIMIT 1", "source_tables": ["players", "player_allstar"]}, "evidence": "the most rebounds refers to max(rebounds)"}
{"sample_id": 2947, "db_id": "professional_basketball", "final": {"question": "For all the full attendence players in 1995, which player had most turnovers? Give the full name of the player.", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.GP = 82 AND T2.year = 1995 ORDER BY T2.turnovers DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "full attendance refers to GP = 82; in 1995 refers to year = 1995; the most turnovers refers to max(turnovers); full name refers to first_name, last_name"}
{"sample_id": 2923, "db_id": "professional_basketball", "final": {"question": "Which player had the most game presentatons in 2011 NBA season.", "sql": "SELECT playerID FROM players_teams WHERE year = 2011 ORDER BY GP DESC LIMIT 1", "source_tables": ["players_teams"]}, "evidence": "player refers to playerID; the most game presentations refers to max(GP); in 2020 refers to year = 2020; NBA season refers to lgID = 'NBA'"}
{"sample_id": 2837, "db_id": "professional_basketball", "final": {"question": "Which coach has serviced in NBA for more than 10 years.", "sql": "SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING MAX(year) - MIN(year) > 10", "source_tables": ["coaches"]}, "evidence": "\"NBA\" is the lgID; coach who serviced for more than 10 years refers to coachID where Subtract (Max(year), Min(year)) > 10"}
{"sample_id": 2878, "db_id": "professional_basketball", "final": {"question": "Please list the team names which have at least 5 players were born in the same state.", "sql": "SELECT DISTINCT name FROM teams WHERE tmID IN ( SELECT tmID FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T2.birthState IS NOT NULL GROUP BY T1.tmID, T2.birthState HAVING COUNT(*) > 5 )", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "team name refers to teams.name; state that a player is born refers to birthState"}
{"sample_id": 2921, "db_id": "professional_basketball", "final": {"question": "Player from which team has the highest point per minute in NBA from 1991 to 2000?", "sql": "SELECT tmID FROM players_teams WHERE year BETWEEN 1991 AND 2000 ORDER BY CAST(points AS REAL) / minutes DESC LIMIT 1", "source_tables": ["players_teams"]}, "evidence": "team refers to tmID; the highest point per minute refers to max(divide(points, minutes)); NBA refers to lgID = 'NBA'; from 1991 to 2000 refers to year BETWEEN 1991 AND 2000"}
{"sample_id": 2843, "db_id": "professional_basketball", "final": {"question": "From 1962 to 2011, how many coaches received both NBA and ABA awards?", "sql": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 2011 AND award = 'ABA Coach of the Year' AND coachID IN ( SELECT coachID FROM awards_coaches WHERE year BETWEEN 1962 AND 2011 AND award = 'NBA Coach of the Year' )", "source_tables": ["awards_coaches"]}, "evidence": "from 1962 to 2011 refers to year between 1960 and 2011; received both NBA and ABA award refers to coachID where award LIKE 'NBA%' and 'ABA%'"}
{"sample_id": 2867, "db_id": "professional_basketball", "final": {"question": "What is the full name of the team with the fastest growth in winning rate in the 'ABA' league from 1972 to 1973?", "sql": "SELECT T1.name FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE lgID = 'ABA' AND year = 1972 ) AS T2 ON T1.tmID = T2.tmID WHERE T1.lgID = 'ABA' AND T1.year = 1973 ORDER BY (CAST(T1.won AS REAL) / (T1.won + T1.lost) - (CAST(T2.won AS REAL) / (T2.won + T2.lost))) DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "\"ABA\" is the lgID; from 1972 to 1973 refers to year = 1972 and year = 1973; team with the fastest growth in winning rate = Max(Subtract(Divide(won where year = 1973, Sum(won, lost)),Divide(won where year = 1972, Sum(won, lost))))"}
{"sample_id": 2815, "db_id": "professional_basketball", "final": {"question": "Between the years 1990 and 2007, of the total rebounds achieved by each player, how many managed to exceed 75% of defensive rebounds?", "sql": "SELECT COUNT(DISTINCT playerID) FROM player_allstar WHERE CAST(d_rebounds AS REAL) * 100 / rebounds > 75 AND season_id BETWEEN 1990 AND 2007", "source_tables": ["player_allstar"]}, "evidence": "the year 1990 and 2007 refers to year BETWEEN 1990 AND 2007; exceed 75% of defensive rebounds refers to Divide (dRebounds, rebounds) * 100 > 75"}
{"sample_id": 2827, "db_id": "professional_basketball", "final": {"question": "For the players who belongs to the east conference, please list the name of the college they went to.", "sql": "SELECT DISTINCT T1.college FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.conference = 'East'", "source_tables": ["players", "player_allstar"]}, "evidence": "belong to the east conference refers to divID = 'EA'"}
{"sample_id": 2810, "db_id": "professional_basketball", "final": {"question": "What is the nickname of the NBA player whose team competed in the Western Conference in the season 2006 and who had a total of two blocks?", "sql": "SELECT T2.nameNick FROM player_allstar AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.blocks = 2 AND T1.conference = 'West' AND T1.season_id = 2006", "source_tables": ["players", "player_allstar"]}, "evidence": "completed in the Western conference refers to conference = 'West'; in season 2006 refers to season_id = 2006; total of two blocks refers to blocks = 2; nickname refers to nameNick"}
{"sample_id": 2883, "db_id": "professional_basketball", "final": {"question": "List the full name of players who are born outside USA.", "sql": "SELECT firstName, middleName, lastName FROM players WHERE birthCountry != 'USA'", "source_tables": ["players"]}, "evidence": "full name refers to firstName, middleName, lastName; born outside USA refers to birthCountry ! = 'USA'"}
{"sample_id": 2828, "db_id": "professional_basketball", "final": {"question": "Among the players from the NBL league, how many of them were born in Spencer?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Spencer' AND T2.lgID = 'NBL'", "source_tables": ["players_teams", "players"]}, "evidence": "\"NBL\" is the lgID; 'Spencer' is the birthCity"}
{"sample_id": 2934, "db_id": "professional_basketball", "final": {"question": "Which NBA team that didn't play in playoffs had the most winning rate in the 2000 NBA regular season?", "sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 2000 ORDER BY CAST(T2.won AS REAL) / (T2.won + T2.lost) DESC LIMIT 1", "source_tables": ["players_teams", "teams"]}, "evidence": "NBA refers to lgID = 'NBA'; didn't play in the playoffs refers to PostGP = 0; 2000 refers to year = 2000; the most winning rate refers to max(divide(won, add(won, lost)))"}
{"sample_id": 2863, "db_id": "professional_basketball", "final": {"question": "Who is the tallest player in Denver Nuggets since 1980?", "sql": "SELECT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T3.name = 'Denver Nuggets' AND T2.year > 1980 ORDER BY T1.height DESC LIMIT 1", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "\"Denver Nuggets\" is the name of team; since 1980 refers to year > 1980; tallest player = Max(height)"}
{"sample_id": 2915, "db_id": "professional_basketball", "final": {"question": "Among the NBA winning coaches, which are from STL team? Please list their coach id.", "sql": "SELECT DISTINCT T2.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.tmID = 'STL' AND T1.lgID = 'NBA'", "source_tables": ["awards_coaches", "coaches"]}, "evidence": "NBA refers to lgID = 'NBA'; STL team refers to tmID = 'STL'"}
{"sample_id": 2894, "db_id": "professional_basketball", "final": {"question": "Name the youngest player who ever won \"Rookie of the Year\".", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' ORDER BY T1.birthDate DESC LIMIT 1", "source_tables": ["players", "awards_players"]}, "evidence": "player name refers to playerID; the youngest refers to max(birthDate); won \"Rookie of the Year\" refers to award = 'Rookie of the Year'"}
{"sample_id": 2851, "db_id": "professional_basketball", "final": {"question": "Please list the team names which have at least 3 all-star players.", "sql": "SELECT T1.tmID FROM players_teams AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) >= 3", "source_tables": ["players_teams", "player_allstar"]}, "evidence": "team with at least 3 all star player refers to tmID where Count(player_allstar.playerID) > = 3"}
{"sample_id": 2950, "db_id": "professional_basketball", "final": {"question": "For the 2001 rebounds leader in the league, when was his birthday?", "sql": "SELECT birthDate FROM players WHERE playerID = ( SELECT playerID FROM players_teams WHERE year = 2001 GROUP BY playerID ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1 )", "source_tables": ["players_teams", "players"]}, "evidence": "2001 refers to year = 2001; rebounds leader refers to max(rebounds); birthday refers to birthDate"}
{"sample_id": 2868, "db_id": "professional_basketball", "final": {"question": "Please list the first names of the players with the most personal fouls in the 'NBL' league.", "sql": "SELECT T1.firstName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'NBL' GROUP BY T1.playerID, T1.firstName ORDER BY COUNT(PF) DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "\"NBL\" is the lgID; most\u00a0 personal foul refers to Max(Count(PF))"}
{"sample_id": 2839, "db_id": "professional_basketball", "final": {"question": "Which player from \"AFS\" team has the tallest height?", "sql": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'AFS' ORDER BY T1.height DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "\"AFS\" is the tmID; tallest height refers to Max(height)"}
{"sample_id": 2900, "db_id": "professional_basketball", "final": {"question": "How many players did not get more than 10 steals between the years 2000 and 2005?", "sql": "SELECT COUNT(DISTINCT playerID) FROM player_allstar WHERE season_id BETWEEN 2000 AND 2005 AND steals <= 10", "source_tables": ["player_allstar"]}, "evidence": "did not get more than 10 steals refers to count(steals) < = 10; between the years 2000 and 2005 refers to season_id between 2000 and 2005"}
{"sample_id": 2872, "db_id": "professional_basketball", "final": {"question": "What is the first and last name of the player with the highest field goal made rate in 1973?", "sql": "SELECT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE year = 1973 ORDER BY CAST(T2.fgMade AS REAL) / T2.fgAttempted DESC LIMIT 1", "source_tables": ["players_teams", "players"]}, "evidence": "in 1973 refers to year = 1973; player with highest field goal made refers to Max(Divide(fgMade, fgAttempted))"}
{"sample_id": 2907, "db_id": "professional_basketball", "final": {"question": "What is the percentage of coaches in 1969 who were awarded \"NBA Coach of the Year\"?", "sql": "SELECT CAST(SUM(CASE WHEN award = 'NBA Coach of the Year' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM awards_coaches WHERE year = 1969", "source_tables": ["awards_coaches"]}, "evidence": "in 1969 refers to year = 1969; awarded \"NBA Coach of the Year\" refers to award = 'NBA Coach of the Year'; percentage = divide(count(coachID where year = 1969 and award = 'NBA Coach of the Year'), count(coachID)) * 100%"}
{"sample_id": 2811, "db_id": "professional_basketball", "final": {"question": "In what year did the only team to beat the Houston in the final round of postseason series games earn its lowest ranking?", "sql": "SELECT T2.year FROM series_post AS T1 INNER JOIN teams AS T2 ON T1.tmIDWinner = T2.tmID WHERE T1.round = 'DSF' AND T1.tmIDLoser = 'HSM' ORDER BY T2.rank ASC LIMIT 1", "source_tables": ["series_post", "teams"]}, "evidence": "beat the Huston refers to tmIDLoser = 'HSM';\u00a0 in final round of post season refers to round = 'DSF'"}
{"sample_id": 2875, "db_id": "professional_basketball", "final": {"question": "Please list out the first name and last name of player who attended California college and have been selected as all stars?", "sql": "SELECT DISTINCT T1.firstName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'California'", "source_tables": ["players", "player_allstar"]}, "evidence": "California college refers to college = 'California'"}
{"sample_id": 2805, "db_id": "professional_basketball", "final": {"question": "Which are the teams coached by 'adelmri01' from year 1990-1995. List the team name, year and offense point.", "sql": "SELECT T2.name, T1.year, T2.o_pts FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1990 AND 1995 AND T1.coachID = 'adelmri01'", "source_tables": ["coaches", "teams"]}, "evidence": "year 1990-1995 refers to year between 1990 and 1995; 'adelmri01' is the coachID; offense point refers to o_fgm"}
{"sample_id": 2809, "db_id": "professional_basketball", "final": {"question": "Which coach of the Chicago Bulls during the year 1981 won the NBA Coach of the Year award in the 1970s?", "sql": "SELECT DISTINCT T2.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN teams AS T3 ON T3.tmID = T1.tmID WHERE T2.award = 'NBA Coach of the Year' AND T2.year BETWEEN 1970 AND 1979 AND T1.year = 1981 AND T3.name = 'Chicago Bulls'", "source_tables": ["awards_coaches", "coaches", "teams"]}, "evidence": "\"Chicago Bull\" is the name of team; during the year 1981 refers to year = 1981; 'NBA Coach of the Year' is the award; in the 1970s refers to year between 1970 to 1979"}
{"sample_id": 2850, "db_id": "professional_basketball", "final": {"question": "How many players received Rookie of the Year award from 1969 to 2010?", "sql": "SELECT COUNT(playerID) FROM awards_players WHERE year BETWEEN 1969 AND 2010 AND award = 'Rookie of the Year'", "source_tables": ["awards_players"]}, "evidence": "from 1969 to 2010 refers to year BETWEEN 1969 and 2010; 'Rookie of the Year' is the award"}
{"sample_id": 2905, "db_id": "professional_basketball", "final": {"question": "Please list the players who received the \"Most Valuable Player\" award in the NBA league after the year of 1990, along with their IDs.", "sql": "SELECT playerID FROM awards_players WHERE year > 1990 AND award = 'Most Valuable Player' AND lgID = 'NBA'", "source_tables": ["awards_players"]}, "evidence": "player refers to playerID; \"Most Valuable Player\" award refers to award = 'Most Valuable Player'; after the year of 1990 refers to year > 1990; ID refers to playerID"}
{"sample_id": 2802, "db_id": "professional_basketball", "final": {"question": "Who is the longest serving coach from year 1970 to 1980. List the coach ID and the team(s) he served.", "sql": "SELECT coachID, tmID FROM coaches WHERE year BETWEEN 1970 AND 1980 ORDER BY stint DESC LIMIT 1", "source_tables": ["coaches"]}, "evidence": "1970 to 1980 refers to year between 1970 and 1980; longest serving coach Max(Count(coachID)); team(s) he served refers to tmID"}
{"sample_id": 2881, "db_id": "professional_basketball", "final": {"question": "How many players whose teams were ranked 6 in 1937?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE T3.year = 1937 AND T3.rank = 6", "source_tables": ["players_teams", "players", "teams"]}, "evidence": "ranked 6 refers to rank = 6; in 1937 refers to year = 1937"}
{"sample_id": 2887, "db_id": "professional_basketball", "final": {"question": "List the first name, last name, height and weight of the players who has all free throw attempted successfully made.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T1.height, T1.weight FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.ft_attempted > 0 AND ft_attempted = ft_made", "source_tables": ["players", "player_allstar"]}, "evidence": "all free throw attempted successfully made refers to ftAttempted > 0 and ftAttempted = ftMade"}
{"sample_id": 2891, "db_id": "professional_basketball", "final": {"question": "Name the teams along with the coaches that went to 'Quarter Final' round in 1946.", "sql": "SELECT DISTINCT T1.coachID, T3.name FROM coaches AS T1 JOIN series_post AS T2 ON T1.tmID = T2.tmIDWinner JOIN teams AS T3 ON T3.tmID = T1.tmID WHERE T2.round = 'QF' AND T2.year = 1946", "source_tables": ["series_post", "coaches", "teams"]}, "evidence": "team name refers to teams.name; coach refers to coachID; 'Quarter Final' round refers to round = 'QF'; in 1946 refers to year = 1946"}
{"sample_id": 2825, "db_id": "professional_basketball", "final": {"question": "Please list the first name of the players from the NBA league with the forward position.", "sql": "SELECT DISTINCT T1.firstName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE (T1.pos = 'F' OR T1.pos = 'F-C') AND T2.lgID = 'NBA'", "source_tables": ["players_teams", "players"]}, "evidence": "\"NBA\" is the lgID; with the forward position refers to pos = 'F' of pos = 'F-C'"}
{"sample_id": 2880, "db_id": "professional_basketball", "final": {"question": "Which state has the most players selected as all stars?", "sql": "SELECT T1.birthState FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthState ORDER BY COUNT(DISTINCT T1.playerID) DESC LIMIT 1", "source_tables": ["players", "player_allstar"]}, "evidence": "state refers to birthState; the most players refers to max(count(playerID))"}
{"sample_id": 2831, "db_id": "professional_basketball", "final": {"question": "Among the players who have won the award of Rookie of the year, what is the height of the tallest player?", "sql": "SELECT T1.height FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year' ORDER BY T1.height DESC LIMIT 1", "source_tables": ["players", "awards_players"]}, "evidence": "\"Rookie of the Year\" is the award; tallest player refers to Max(height)"}
{"sample_id": 3055, "db_id": "shakespeare", "final": {"question": "In the Venus and Adonis, what is the description of the last scene listed?", "sql": "SELECT T2.Description FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Venus and Adonis' ORDER BY T2.Scene DESC LIMIT 1", "source_tables": ["chapters", "works"]}, "evidence": "Venus and Adonis refers to Title = 'Venus and Adonis'; last scene refers to max(Scene)"}
{"sample_id": 2987, "db_id": "shakespeare", "final": {"question": "How many poems did Shakespeare write?", "sql": "SELECT COUNT(id) FROM works WHERE GenreType = 'Poem'", "source_tables": ["works"]}, "evidence": "poems refers to GenreType = 'Poem'"}
{"sample_id": 2969, "db_id": "shakespeare", "final": {"question": "When did Shakespeare write the first poem?", "sql": "SELECT MIN(Date) FROM works WHERE GenreType = 'Poem'", "source_tables": ["works"]}, "evidence": "first poem refers to GenreType = 'Poem' and Date = 'min'"}
{"sample_id": 3062, "db_id": "shakespeare", "final": {"question": "Among the comedy works of Shakespeare, what is the percentage of his works with a character named \"antonio\"?", "sql": "SELECT CAST(SUM(IIF(T4.CharName = 'antonio', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.GenreType = 'Comedy'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "comedy works refers to GenreType = 'Comedy'; a character named \"antonio\" refers to CharName = 'antonio'; percentage = divide(sum(CharName = 'Antonio'), count(CharName)) as percentage"}
{"sample_id": 3042, "db_id": "shakespeare", "final": {"question": "Please list any two character names in chapter 18708.", "sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.chapter_id = 18708 LIMIT 2", "source_tables": ["characters", "paragraphs"]}, "evidence": "character names refers to CharName; chapter 18708 refers to chapter_id = 18708"}
{"sample_id": 3043, "db_id": "shakespeare", "final": {"question": "How many acts can be found in the comedy \"Two Gentlemen of Verona\"?", "sql": "SELECT COUNT(T1.ACT) FROM chapters AS T1 LEFT JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.GenreType = 'Comedy' AND T2.Title = 'Two Gentlemen of Verona'", "source_tables": ["chapters", "works"]}, "evidence": "comedy refers to GenreType = 'comedy'; \"Two Gentlemen of Verona\" refers to Title = 'Two Gentlemen of Verona'"}
{"sample_id": 3011, "db_id": "shakespeare", "final": {"question": "Between Rome and Juliet, which character was mentioned the most in the The Tragedy of Romeo and Juliet? Calculate for Romeo and Juliet's individual amount of appearance in percentage against the overall number of characters that appeared in the said work.", "sql": "SELECT SUM(IIF(T4.CharName = 'Romeo', 1, 0)), SUM(IIF(T4.CharName = 'Juliet', 1, 0)), CAST(SUM(IIF(T4.CharName = 'Romeo', 1, 0)) + SUM(IIF(T4.CharName = 'Juliet', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "Rome and Juliet refers to CharName = 'Romeo' and CharName = 'Juliet'; The Tragedy of Romeo and Juliet refers to LongTitle = 'The Tragedy of Romeo and Juliet'; percentage = divide(sum(charater.id) when CharName = 'Romeo', sum(charater.id)) as percentage and percentage = divide(sum(charater.id) when CharName = 'Juliet', count(charater.id)) as percentage"}
{"sample_id": 2983, "db_id": "shakespeare", "final": {"question": "What percentage of all scenes are tragic scenes in Shakespeare's work in 1594?", "sql": "SELECT CAST(SUM(IIF(T2.GenreType = 'Tragedy', 1, 0)) AS REAL) * 100 / COUNT(T1.Scene) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1594'", "source_tables": ["chapters", "works"]}, "evidence": "tragic scenes refers to GenreType = 'Tragedy'; work in 1594 refers to Date = '1594'; percentage = divide((sum(Scene) when GenreType = 'Tragedy'), count(Scene))as percentage"}
{"sample_id": 3017, "db_id": "shakespeare", "final": {"question": "How many chapters are there in \"Midsummer Night's Dream\"?", "sql": "SELECT COUNT(T2.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Midsummer Night''s Dream'", "source_tables": ["chapters", "works"]}, "evidence": "in \"Midsummer Night's Dream\" refers to Title = 'Midsummer Night's Dream'"}
{"sample_id": 3013, "db_id": "shakespeare", "final": {"question": "How many number of paragraphs are there in chapter ID 18881?", "sql": "SELECT COUNT(ParagraphNum) FROM paragraphs WHERE chapter_id = 18881", "source_tables": ["paragraphs"]}, "evidence": "number of paragraphs refers to ParagraphNum"}
{"sample_id": 3028, "db_id": "shakespeare", "final": {"question": "How many \"all\" character names have the \"all\" abbreviation?", "sql": "SELECT COUNT(id) FROM characters WHERE Abbrev = 'All'", "source_tables": ["characters"]}, "evidence": "character names refers to CharName\uff1b\"all\" abbreviation refers to Abbrev = 'all'"}
{"sample_id": 2962, "db_id": "shakespeare", "final": {"question": "Please list the IDs of the paragraphs in which the character \"son to Tamora\" appears.", "sql": "SELECT T1.id FROM paragraphs AS T1 INNER JOIN characters AS T2 ON T1.character_id = T2.id WHERE T2.Description = 'son to Tamora'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character \"son to Tamora\"\u00a0 refers to characters.Description = 'son to Tamora'"}
{"sample_id": 2974, "db_id": "shakespeare", "final": {"question": "List the number of acts in Two Gentlemen of Verona.", "sql": "SELECT DISTINCT T1.Act FROM chapters AS T1 INNER JOIN works AS T2 ON T1.id = T1.work_id WHERE T2.LongTitle = 'Two Gentlemen of Verona'", "source_tables": ["chapters", "works"]}, "evidence": "Two Gentlemen of Verona refers to LongTitle = 'Two Gentlemen of Verona'"}
{"sample_id": 2981, "db_id": "shakespeare", "final": {"question": "Which Shakespeare tragedy has the most scenes? Give the long title.", "sql": "SELECT T.LongTitle FROM ( SELECT T1.LongTitle, COUNT(T2.Scene) AS num FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Tragedy' GROUP BY T1.LongTitle, T2.Scene ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["chapters", "works"]}, "evidence": "tragedy refers to GenreType = 'Tragedy'; most scenes refers to max(count(Scene))"}
{"sample_id": 2986, "db_id": "shakespeare", "final": {"question": "What is the title of the first ever work of William Shakespeare?", "sql": "SELECT Title FROM works WHERE Date = ( SELECT MIN(Date) FROM works )", "source_tables": ["works"]}, "evidence": "first ever work refers to min(Date)"}
{"sample_id": 3023, "db_id": "shakespeare", "final": {"question": "Describe the full title which had the character named Servant to Montague.", "sql": "SELECT DISTINCT T1.LongTitle FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.Description = 'Servant to Montague'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "full title refers to LongTitle; character named Servant to Montague refers to characters.Description = 'Servant to Montague'"}
{"sample_id": 3033, "db_id": "shakespeare", "final": {"question": "What are the character names for a senator of Venice?", "sql": "SELECT CharName FROM characters WHERE Description = 'a senator of Venice'", "source_tables": ["characters"]}, "evidence": "character names refers to CharName; a senator of Venice refers to characters.Description = 'a senator of Venice'"}
{"sample_id": 3027, "db_id": "shakespeare", "final": {"question": "Calculate the percentage of paragraphs in all chapters of \"All's Well That Ends Well\".", "sql": "SELECT CAST(SUM(IIF(T1.Title = 'All''s Well That Ends Well', 1, 0)) AS REAL) * 100 / COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id", "source_tables": ["chapters", "works", "paragraphs"]}, "evidence": "\"All's Well That Ends Well\" refers to Title = 'All's Well That Ends Well'; percentage = divide(sum(paragraphs.id) when Title = 'All's Well That Ends Well', count(paragraphs.id)) as percentage"}
{"sample_id": 2957, "db_id": "shakespeare", "final": {"question": "Which work is the character Lord Abergavenny from? Please give its short or abbreviated title.", "sql": "SELECT DISTINCT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Lord Abergavenny'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "Lord Abergavenny refers to CharName = 'Lord Abergavenny'; short or abbreviated title refers to Title"}
{"sample_id": 3061, "db_id": "shakespeare", "final": {"question": "List the chapter ID of the works with a year greater than the 89% of average year of all listed works of Shakespeare.", "sql": "SELECT T2.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.DATE > ( SELECT AVG(DATE) FROM works ) * 0.89", "source_tables": ["chapters", "works"]}, "evidence": "a year greater than the 89% of average year refers to DATE > multiply(divide(SUM(DATE) , COUNT(DATE)), 0.89)"}
{"sample_id": 3034, "db_id": "shakespeare", "final": {"question": "What is the name of the character that can be found in paragraph 8 of chapter 18820?", "sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 8 AND T2.chapter_id = 18820", "source_tables": ["characters", "paragraphs"]}, "evidence": "name of the character refers to CharName; paragraph 8 refers to ParagraphNum = 8; chapter 18820 refers to chapter_id = 18820"}
{"sample_id": 3008, "db_id": "shakespeare", "final": {"question": "In \"A Lover's Complaint\", what is the description of Act 1, Scene 1?", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'A Lover''s Complaint'", "source_tables": ["chapters", "works"]}, "evidence": "\"A Lover's Complaint\" refers to Title = 'A Lover''s Complaint'"}
{"sample_id": 3051, "db_id": "shakespeare", "final": {"question": "Among paragraphs with paragraph number between 1900 to 1950, list the texts said by a character described as a sea captain, friend to Sebatian.", "sql": "SELECT T1.description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'a sea captain, friend to Sebastian' AND T2.ParagraphNum BETWEEN 1500 AND 1950", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph number between 1900 to 1950 refers to ParagraphNum > = 1500 AND ParagraphNum < = 1950; texts refers to PlainText; a character described as a sea captain, friend to Sebatian refers to characters.Description = 'a sea captain, friend to Sebastian'"}
{"sample_id": 3040, "db_id": "shakespeare", "final": {"question": "What are the character names in paragraph 3?", "sql": "SELECT DISTINCT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 3", "source_tables": ["characters", "paragraphs"]}, "evidence": "character names refers to CharName; paragraph 3 refers to ParagraphNum = 3"}
{"sample_id": 3058, "db_id": "shakespeare", "final": {"question": "What is the chapter description where the paragraph \"What, wilt thou hear some music, my sweet love?\" belongs?", "sql": "SELECT T1.id, T1.Description FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'What, wilt thou hear some music, my sweet love?'", "source_tables": ["chapters", "paragraphs"]}, "evidence": "paragraph \"What, wilt thou hear some music, my sweet love?\" refers to\u00a0 PlainText = 'What, wilt thou hear some music, my sweet love?'"}
{"sample_id": 3041, "db_id": "shakespeare", "final": {"question": "Please list all of the paragraphs that have the character name Aedile.", "sql": "SELECT T2.ParagraphNum FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Aedile'", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraphs\u00a0 refers to ParagraphNum; character name Aedile refers to CharName = 'Aedile'"}
{"sample_id": 2965, "db_id": "shakespeare", "final": {"question": "Please give the title of the work of Shakespeare that has the most characters.", "sql": "SELECT T.Title FROM ( SELECT T1.Title, COUNT(T3.character_id) AS num FROM works T1 INNER JOIN chapters T2 ON T1.id = T2.work_id INNER JOIN paragraphs T3 ON T2.id = T3.chapter_id INNER JOIN characters T4 ON T3.character_id = T4.id GROUP BY T3.character_id, T1.Title ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "most characters refers to max(count(character_id))"}
{"sample_id": 3052, "db_id": "shakespeare", "final": {"question": "What is the long title of the Shakespeare's work with Act 4 Scene 5 described as \"Mytilene. A street before the brothel.\"?", "sql": "SELECT T1.LongTitle FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'Mytilene. A street before the brothel.'", "source_tables": ["chapters", "works"]}, "evidence": "described as \"Mytilene. A street before the brothel.\" refers to chapters.Description = 'Mytilene. A street before the brothel.'"}
{"sample_id": 3006, "db_id": "shakespeare", "final": {"question": "What are the titles and genres of the one-act works of Shakespeare?", "sql": "SELECT DISTINCT T1.Title, T1.GenreType FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1", "source_tables": ["chapters", "works"]}, "evidence": "one-act works refers to count(Act) = 1; genre refers to GenreType\n"}
{"sample_id": 3032, "db_id": "shakespeare", "final": {"question": "What are the work numbers that are related to King Henry?", "sql": "SELECT id FROM works WHERE Title LIKE '%Henry%'", "source_tables": ["works"]}, "evidence": "work numbers refers to works.id; related to King Henry refers to Title = '%Henry%'"}
{"sample_id": 3048, "db_id": "shakespeare", "final": {"question": "Give the character's ID of the character that said the paragraph \"O my poor brother! and so perchance may he be.\"", "sql": "SELECT character_id FROM paragraphs WHERE PlainText = 'O my poor brother! and so perchance may he be.'", "source_tables": ["paragraphs"]}, "evidence": "\"O my poor brother! and so perchance may he be.\" refers to\u00a0 PlainText = 'O my poor brother! and so perchance may he be.'"}
{"sample_id": 3026, "db_id": "shakespeare", "final": {"question": "Calculate average scene per act in Antony and Cleopatra.", "sql": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Antony and Cleopatra'", "source_tables": ["chapters", "works"]}, "evidence": "Antony and Cleopatra refers to Title = 'Antony and Cleopatra'; average scene per act = divide(sum(Scene), count(act))\n"}
{"sample_id": 3009, "db_id": "shakespeare", "final": {"question": "When did Shakespeare create his work that has 154 scenes?", "sql": "SELECT T1.Date, T1.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Scene = 154", "source_tables": ["chapters", "works"]}, "evidence": "When refers to Date; has 154 scenes refers to count(Scene) = 154"}
{"sample_id": 3019, "db_id": "shakespeare", "final": {"question": "What are the character names and descriptions of characters in \"Venus and Adonis\"?", "sql": "SELECT DISTINCT T4.CharName, T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Venus and Adonis'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "character names refers to CharName; \"Venus and Adonis\" refers to Title = 'Venus and Adonis'"}
{"sample_id": 3022, "db_id": "shakespeare", "final": {"question": "List the scenes and descriptions in Act 1 of \" Pericles, Prince of Tyre\".", "sql": "SELECT T2.Scene, T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Pericles, Prince of Tyre' AND T2.Act = 1", "source_tables": ["chapters", "works"]}, "evidence": "\" Pericles, Prince of Tyre\" refers to LongTitle = 'Pericles, Prince of Tyre'"}
{"sample_id": 3029, "db_id": "shakespeare", "final": {"question": "Please name any three comedic works.", "sql": "SELECT Title FROM works WHERE GenreType = 'comedy' LIMIT 3", "source_tables": ["works"]}, "evidence": "comedic works refers to GenreType = 'comedy'"}
{"sample_id": 3045, "db_id": "shakespeare", "final": {"question": "What is the percentage of act number 5 in Titus Andronicus?", "sql": "SELECT CAST(SUM(IIF(T2.act = 5, 1, 0)) AS REAL) * 100 / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Titus Andronicus'", "source_tables": ["chapters", "works"]}, "evidence": "act number 5 refers to Act = 5; Titus Andronicus refers to Title = 'Titus Andronicus'; percentage = divide(sum(Act = 5), count(Act)) as percentage"}
{"sample_id": 2982, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in the scene whose description is \"A Sea-port in Cyprus. An open place near the quay.\"?", "sql": "SELECT SUM(T2.ParagraphNum) FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T1.Description = 'A Sea-port in Cyprus. An open place near the quay.'", "source_tables": ["chapters", "paragraphs"]}, "evidence": ""}
{"sample_id": 2956, "db_id": "shakespeare", "final": {"question": "How many more scenes are there in Act 1 than in Act 5 in Twelfth Night?", "sql": "SELECT SUM(IIF(T2.Act = 1, 1, 0)) - SUM(IIF(T2.Act = 5, 1, 0)) AS more FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works"]}, "evidence": "in Twelfth Night refers to Title = 'Twelfth Night'; How many more scenes = subtract(sum(Act = 1), sum(Act = 5))"}
{"sample_id": 3012, "db_id": "shakespeare", "final": {"question": "What is the paragraph number with plain text \"This is Illyria, lady\"?", "sql": "SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'This is Illyria, lady.'", "source_tables": ["paragraphs"]}, "evidence": "paragraph number refers to ParagraphNum"}
{"sample_id": 3060, "db_id": "shakespeare", "final": {"question": "In Shakespeare's works before 1600, list down the title of the tragic story he had written that involved a character named \"Tybalt\".", "sql": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE < 1600 AND T1.GenreType = 'Tragedy' AND T4.CharName = 'Tybalt'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "works before 1600 refers to DATE < 1600; tragic story refers to GenreType = 'Tragedy'; character named \"Tybalt\" refers to CharName = 'Tybalt'"}
{"sample_id": 2989, "db_id": "shakespeare", "final": {"question": "In the year 1500s, how many tragedies did Shakespeare write?", "sql": "SELECT COUNT(id) FROM works WHERE GenreType = 'Tragedy' AND Date BETWEEN 1500 AND 1599", "source_tables": ["works"]}, "evidence": "year 1500s refers to Date between 1500 and 1599; tragedies refers to GenreType = 'Tragedy'"}
{"sample_id": 3050, "db_id": "shakespeare", "final": {"question": "Give the title and the characters name of the most recent work of Shakespeare.", "sql": "SELECT T1.Title, T4.CharName FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id ORDER BY T1.Date DESC LIMIT 1", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "characters name refers to CharName; most recent work refers to max(Date)"}
{"sample_id": 2953, "db_id": "shakespeare", "final": {"question": "How many of Shakespeare's works were finished before the year 1602?", "sql": "SELECT COUNT(id) FROM works WHERE Date < 1602", "source_tables": ["works"]}, "evidence": "finished before the year 1602 refers to Date < 1602"}
{"sample_id": 3049, "db_id": "shakespeare", "final": {"question": "List the paragraph number and paragraphs said by the character named \"Sir Andrew Aguecheek\".", "sql": "SELECT T2.ParagraphNum, T2.id FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Sir Andrew Aguecheek'", "source_tables": ["characters", "paragraphs"]}, "evidence": "paragraph number refers to ParagraphNum; character named \"Sir Andrew Aguecheek\" refers to CharName = 'Sir Andrew Aguecheek'"}
{"sample_id": 2985, "db_id": "shakespeare", "final": {"question": "How many \"servant to Timon\" characters are there?", "sql": "SELECT COUNT(id) FROM characters WHERE Description = 'servant to Timon'", "source_tables": ["characters"]}, "evidence": "servant to Timon refers to characters.Description = 'servant to Timon'"}
{"sample_id": 2990, "db_id": "shakespeare", "final": {"question": "Who is the daughter of Capulet?", "sql": "SELECT CharName FROM characters WHERE Description = 'Daughter to Capulet'", "source_tables": ["characters"]}, "evidence": "daughter of Capulet refers to characters.Description = 'Daughter to Capulet'"}
{"sample_id": 3014, "db_id": "shakespeare", "final": {"question": "List down any 5 titles in the history genre.", "sql": "SELECT Title FROM works WHERE GenreType = 'History' LIMIT 5", "source_tables": ["works"]}, "evidence": "in the history genre refers to GenreType = 'History'"}
{"sample_id": 3030, "db_id": "shakespeare", "final": {"question": "From 1593 onwards, what is the difference between the number of comedy works and history works?", "sql": "SELECT SUM(IIF(GenreType = 'Comedy', 1, 0)) - SUM(IIF(GenreType = 'History', 1, 0)) FROM works WHERE Date > 1593", "source_tables": ["works"]}, "evidence": "From 1593 onwards refers to Date > 1593; comedy works and history works refers to GenreType = 'comedy' and GenreType = 'History'"}
{"sample_id": 3047, "db_id": "shakespeare", "final": {"question": "Among the works of Shakespeare, how many of them have the word \"Henry\" on its title?", "sql": "SELECT COUNT(id) FROM works WHERE Title LIKE '%Henry%'", "source_tables": ["works"]}, "evidence": "works refers to Title; have the word \"Henry\" on its title refers to Title = '%Henry%'"}
{"sample_id": 3005, "db_id": "shakespeare", "final": {"question": "What is the description of the chapter where the character whose abrreviated name is 1Play appeared first?", "sql": "SELECT T2.Description FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id INNER JOIN characters AS T3 ON T1.character_id = T3.id WHERE T3.Abbrev = '1Play' ORDER BY T1.chapter_id LIMIT 1", "source_tables": ["chapters", "characters", "paragraphs"]}, "evidence": "abbreviated name is 1Play; appeared first refers to Abbrev = '1Play' and min(chapter_id)"}
{"sample_id": 2997, "db_id": "shakespeare", "final": {"question": "How many paragraphs are there in the chapter with the highest amount of scenes in act 1?", "sql": "SELECT T1.ParagraphNum FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T2.Act = 1 ORDER BY T2.Scene DESC LIMIT 1", "source_tables": ["chapters", "paragraphs"]}, "evidence": "How many paragraphs refers to ParagraphNum; highest amount of scenes refers to max(count(Scene))"}
{"sample_id": 3039, "db_id": "shakespeare", "final": {"question": "What is the description of chapter 18706 in \"All's Well That Ends Well\"?", "sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.id = 18706 AND T1.Title = 'All''s Well That Ends Well'", "source_tables": ["chapters", "works"]}, "evidence": "chapter 18706 refers to chapters.id; \"All's Well That Ends Well\" refers to Title = 'All's Well That Ends Well'"}
{"sample_id": 2968, "db_id": "shakespeare", "final": {"question": "How many comedies did Shakespeare create?", "sql": "SELECT COUNT(id) FROM works WHERE GenreType = 'Comedy'", "source_tables": ["works"]}, "evidence": "comedies refers to GenreType = 'Comedy'"}
{"sample_id": 3059, "db_id": "shakespeare", "final": {"question": "List the scene numbers involving the character named Sir Toby Belch in the Twelfth Night.", "sql": "SELECT DISTINCT T2.Scene FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.Title = 'Twelfth Night' AND T4.CharName = 'Sir Toby Belch'", "source_tables": ["chapters", "works", "characters", "paragraphs"]}, "evidence": "scene numbers refers to Scene; character named Sir Toby Belch refers to CharName = 'Sir Toby Belch'; in the Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 2954, "db_id": "shakespeare", "final": {"question": "How many scenes are there in Act 1 in Twelfth Night?", "sql": "SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = 1 AND T1.Title = 'Twelfth Night'", "source_tables": ["chapters", "works"]}, "evidence": "Twelfth Night refers to Title = 'Twelfth Night'"}
{"sample_id": 3025, "db_id": "shakespeare", "final": {"question": "Provide the character name, paragraph number, and plain text of \"cousin to the king\" description.", "sql": "SELECT T1.CharName, T2.ParagraphNum, T2.PlainText FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.Description = 'cousin to the king'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character name refers to CharName; paragraph number refers to ParagraphNum"}
{"sample_id": 3035, "db_id": "shakespeare", "final": {"question": "What is the description of chapter 18704, where there is a character called Orsino?", "sql": "SELECT DISTINCT T3.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id INNER JOIN chapters AS T3 ON T2.chapter_id = T3.id WHERE T1.CharName = 'Orsino' AND T3.ID = 18704", "source_tables": ["chapters", "characters", "paragraphs"]}, "evidence": "chapter 18704 refers to chapters.id = 18704; character called Orsino refers to CharName = 'Orsino'"}
{"sample_id": 3057, "db_id": "shakespeare", "final": {"question": "What is the character and work ID of the text \"Fear not thou, man, thou shalt lose nothing here.\"?", "sql": "SELECT T2.character_id, T1.work_id FROM chapters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE T2.PlainText = 'Fear not thou, man, thou shalt lose nothing here.'", "source_tables": ["chapters", "paragraphs"]}, "evidence": "character refers to chapter_id; text \"Fear not thou, man, thou shalt lose nothing here.\"\u00a0 refers to PlainText = 'Fear not thou, man, thou shalt lose nothing here.'"}
{"sample_id": 3036, "db_id": "shakespeare", "final": {"question": "How many scenes can be found in \"Twelfth Night, Or What You Will\"?", "sql": "SELECT COUNT(T2.Scene) AS cnt FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.LongTitle = 'Cymbeline, King of Britain'", "source_tables": ["chapters", "works"]}, "evidence": "\"Twelfth Night, Or What You Will\" refers to LongTitle"}
{"sample_id": 2970, "db_id": "shakespeare", "final": {"question": "Give the abbreviation name for the character \"Earl of Westmoreland\".", "sql": "SELECT DISTINCT Abbrev FROM characters WHERE CharName = 'Earl of Westmoreland'", "source_tables": ["characters"]}, "evidence": "abbreviation name refers to Abbrev; character \"Earl of Westmoreland\" refers to CharName = 'Earl of Westmoreland'"}
{"sample_id": 3046, "db_id": "shakespeare", "final": {"question": "How many of the works of Shakespeare are Tragedy?", "sql": "SELECT COUNT(id) FROM works WHERE GenreType = 'Tragedy'", "source_tables": ["works"]}, "evidence": "Tragedy refers to GenreType = 'Tragedy'"}
{"sample_id": 2998, "db_id": "shakespeare", "final": {"question": "Other than \"stage directions\", what is the name of the character that appeared 5 times in \"the sea-coast\"?", "sql": "SELECT T.CharName FROM ( SELECT T3.CharName, COUNT(T3.id) AS num FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id INNER JOIN characters AS T3 ON T1.character_id = T3.id WHERE T2.Description = 'The sea-coast.' AND T3.CharName != '(stage directions)' AND T1.chapter_id = 18709 GROUP BY T3.id, T3.CharName ) AS T WHERE T.num = 5", "source_tables": ["chapters", "characters", "paragraphs"]}, "evidence": "Other than \"stage directions\" refers to CharName ! = '(stage directions)'; name of the character refers to CharName; appeared 5 times in \"the sea-coast\" refers to chapters.Description = 'The sea-coast.' and count(character_id) = 5"}
{"sample_id": 3000, "db_id": "shakespeare", "final": {"question": "In \"Florence. Without the walls. A tucket afar off\", what is the id of the character that was mentioned in \"His name, I pray you.\"?", "sql": "SELECT T1.character_id FROM paragraphs AS T1 INNER JOIN chapters AS T2 ON T1.chapter_id = T2.id WHERE T1.PlainText = 'His name, I pray you.' AND T2.Description = 'Florence. Without the walls. A tucket afar off.'", "source_tables": ["chapters", "paragraphs"]}, "evidence": "\"Florence. Without the walls. A tucket afar off\" refers to chapters.Description = 'Florence. Without the walls. A tucket afar off.'; \"His name, I pray you.\" refers to PlainText = 'His name, I pray you.'"}
{"sample_id": 3053, "db_id": "shakespeare", "final": {"question": "Who is the character that said \"This is Illyria, lady.\"?", "sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'This is Illyria, lady.'", "source_tables": ["characters", "paragraphs"]}, "evidence": "character refers to CharName; \"This is Illyria, lady.\" refers to PlainText = 'This is Illyria, lady.'"}
{"sample_id": 2999, "db_id": "shakespeare", "final": {"question": "Among the chapters in \"As You Like It\", how many chapters have a paragraph number of no more than 50?", "sql": "SELECT COUNT(T3.chapter_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'As You Like It' AND T3.ParagraphNum < 50", "source_tables": ["chapters", "works", "paragraphs"]}, "evidence": "\"As You Like It\" refers to Title = 'As You Like It' ;paragraph number of no more than 50 refers to ParagraphNum < 50"}
{"sample_id": 3072, "db_id": "cars", "final": {"question": "Among the cars with an acceleration of over 10 miles per squared hour, how many of them cost more than $20000 and less than $30000?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.acceleration > 10 AND T2.price BETWEEN 20000 AND 30000", "source_tables": ["price", "data"]}, "evidence": "an acceleration of over 10 miles per squared hour refers to acceleration > 10; cost more than $20000 and less than $30000 refers to price < 30000 AND price > 20000"}
{"sample_id": 3144, "db_id": "cars", "final": {"question": "How many cars with horsepower greater than 200 were produced in 1975?", "sql": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.horsepower > 200 AND T2.model_year = 1975", "source_tables": ["production", "data"]}, "evidence": "horsepower greater than 200 refers to horsepower > 200; in 1975 refers to model_year = 1975"}
{"sample_id": 3093, "db_id": "cars", "final": {"question": "How much is the car with the highest sweep volume?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.displacement / T1.cylinders DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "cost refers to price; the highest sweep volume refers to max(divide(displacement, cylinders))"}
{"sample_id": 3116, "db_id": "cars", "final": {"question": "Provide the price and country origin of the car named Ford Maverick.", "sql": "SELECT DISTINCT T1.price, T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T4.car_name = 'ford maverick'", "source_tables": ["production", "price", "data", "country"]}, "evidence": "country origin refers to country; Ford Maverick refers to car_name = 'ford maverick'"}
{"sample_id": 3088, "db_id": "cars", "final": {"question": "State the origin country of the fastest car in the database.", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.horsepower DESC LIMIT 1", "source_tables": ["production", "country", "data"]}, "evidence": "origin country refers to country; the fastest refers to max(horsepower)"}
{"sample_id": 3111, "db_id": "cars", "final": {"question": "Give the model year of the heaviest car.", "sql": "SELECT T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["production", "data"]}, "evidence": "the heaviest refers to max(weight)"}
{"sample_id": 3086, "db_id": "cars", "final": {"question": "How many cylinders does the cheapest car have?", "sql": "SELECT T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY price ASC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "the cheapest car refers to min(price)"}
{"sample_id": 3130, "db_id": "cars", "final": {"question": "How many models of Ford Maverick were produced?", "sql": "SELECT COUNT(DISTINCT T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'", "source_tables": ["production", "data"]}, "evidence": "Ford Maverick refers to car_name = 'ford maverick'"}
{"sample_id": 3127, "db_id": "cars", "final": {"question": "Among the cars produced in 1975, provide IDs, names, and producing countries of the cars with the maximum number of cylinders.", "sql": "SELECT T1.ID, T1.car_name, T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year = 1975 ORDER BY T1.cylinders DESC LIMIT 1", "source_tables": ["production", "country", "data"]}, "evidence": "produced in 1975 refers to model_year = 1975; names refers to car_name; producing countries refers to country; the maximum number of cylinders refers to max(cylinders)"}
{"sample_id": 3094, "db_id": "cars", "final": {"question": "What is the fastest car made by Japan?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan' ORDER BY T1.horsepower DESC LIMIT 1", "source_tables": ["production", "country", "data"]}, "evidence": "the fastest refers to max(horsepower); made by Japan refers to country = 'Japan'; name of the car refers to car_name"}
{"sample_id": 3121, "db_id": "cars", "final": {"question": "Provide the name, model, sweep volume, and introduced year of the car with the best crash protection.", "sql": "SELECT T1.car_name, T1.model, T1.displacement / T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["production", "data"]}, "evidence": "car's name refers to car_name; sweep volume = divide(displacement, cylinders); introduced year refers to model_year; the best crash protection refers to max(weight)"}
{"sample_id": 3118, "db_id": "cars", "final": {"question": "Calculate the difference between the number of cars that has a horsepower of 130 with the model year 1970 and model year 1976", "sql": "SELECT SUM(CASE WHEN T2.model_year = 1970 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.model_year = 1976 THEN 1 ELSE 0 END) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.horsepower = 130", "source_tables": ["production", "data"]}, "evidence": "a horsepower of 130 refers to horsepower = 130; difference = subtract(count(ID where model_year = 1970), count(ID where model_year = 1976)) where horsepower = 130"}
{"sample_id": 3091, "db_id": "cars", "final": {"question": "What is the name of the most expensive car?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "name of the car refers to car_name; the most expensive refers to max(price)"}
{"sample_id": 3099, "db_id": "cars", "final": {"question": "Among the cars with an engine displacement of no less than 400 cubic millimeter, how many cars cost at least 30,000?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.displacement > 400 AND T2.price > 30000", "source_tables": ["price", "data"]}, "evidence": "engine displacement of no less than 400 cubic millimeter refers to displacement > 400; cost at least 30,000 refers to price > 30000"}
{"sample_id": 3133, "db_id": "cars", "final": {"question": "What is the average price of model 70 cars?", "sql": "SELECT AVG(T2.price) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.model = 70", "source_tables": ["price", "data"]}, "evidence": "model 70 refers to model = 70; average price = avg(price) where model = 70"}
{"sample_id": 3123, "db_id": "cars", "final": {"question": "Provide the name and model of the car with the highest price.", "sql": "SELECT T1.car_name, T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "car's name refers to car_name; the highest price refers to max(price)"}
{"sample_id": 3100, "db_id": "cars", "final": {"question": "Which year did Europe produce the most cars?", "sql": "SELECT T1.model_year FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe' GROUP BY T1.model_year ORDER BY COUNT(T1.model_year) DESC LIMIT 1", "source_tables": ["production", "country"]}, "evidence": "year refers to model_year; Europe refers to country = 'Europe'; the most cars refers to max(model_year)"}
{"sample_id": 3105, "db_id": "cars", "final": {"question": "List the name of the cars with model year 1975.", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1975", "source_tables": ["production", "data"]}, "evidence": "name of the car refers to car_name; model year 1975 refers to model_year = 1975"}
{"sample_id": 3125, "db_id": "cars", "final": {"question": "What is the average price per car produced in Japan?", "sql": "SELECT AVG(T1.price) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan'", "source_tables": ["production", "price", "country"]}, "evidence": "produced in Japan refers to country = 'Japan'; average price per car = avg(price) where country = 'Japan'"}
{"sample_id": 3132, "db_id": "cars", "final": {"question": "Calculate the average production rate per year from 1971 to 1980. Among them, name the cars with a weight of fewer than 1800 lbs.", "sql": "SELECT CAST(COUNT(T1.ID) AS REAL) / 9 FROM production AS T1 INNER JOIN data AS T2 ON T2.ID = T1.ID WHERE T1.model_year BETWEEN 1971 AND 1980 UNION ALL SELECT DISTINCT T2.car_name FROM production AS T1 INNER JOIN data AS T2 ON T2.ID = T1.ID WHERE T1.model_year BETWEEN 1971 AND 1980 AND T2.weight < 1800", "source_tables": ["production", "data"]}, "evidence": "from 1971 to 1980 refers to model_year between 1971 and 1980; average production rate per year = divide(count(ID where model_year between 1971 and 1980), 9); car's name refers to car_name; a weight of fewer than 1800 lbs refers to weight < 1800"}
{"sample_id": 3112, "db_id": "cars", "final": {"question": "What is the horsepower and model year of the car named Subaru Dl?", "sql": "SELECT T1.horsepower, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'subaru dl'", "source_tables": ["production", "data"]}, "evidence": "the car named Subaru Dl refers to car_name = 'subaru dl'"}
{"sample_id": 3107, "db_id": "cars", "final": {"question": "What is the price of the car ID 15?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.ID = 15", "source_tables": ["price", "data"]}, "evidence": ""}
{"sample_id": 3104, "db_id": "cars", "final": {"question": "What is the percentage of cars that was produced by Japan among those that have a sweep volume of no less than 30?", "sql": "SELECT CAST(SUM(CASE WHEN T3.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.displacement / T1.cylinders > 30", "source_tables": ["production", "country", "data"]}, "evidence": "produced by Japan refers to country = 'Japan'; a sweep volume of no less than 30 refers to divide(displacement, cylinders) > 30; percentage = divide(count(ID where country = 'Japan'), count(ID)) * 100% where divide(displacement, cylinders) > 30"}
{"sample_id": 3081, "db_id": "cars", "final": {"question": "Which is the origin country of the $44274.40748 car?", "sql": "SELECT T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.price = 44274.40748", "source_tables": ["production", "price", "country"]}, "evidence": "origin country refers to country; the $44274.40748 car refers to price = 44274.40748"}
{"sample_id": 3080, "db_id": "cars", "final": {"question": "Tell the origin country of car no.382.", "sql": "SELECT DISTINCT T2.country FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T1.ID = 382", "source_tables": ["production", "country"]}, "evidence": "origin country refers to country; car no.382 refers to ID = 382"}
{"sample_id": 3098, "db_id": "cars", "final": {"question": "What is the name of the most expensive car that was produced by the USA?", "sql": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'USA' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["production", "price", "data", "country"]}, "evidence": "name of the car refers to car_name; the most expensive refers to max(price); produced by the USA refers to country = 'USA'"}
{"sample_id": 3075, "db_id": "cars", "final": {"question": "What is the average price of cars with 8 cylinders?", "sql": "SELECT AVG(T2.price) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.cylinders = 8", "source_tables": ["price", "data"]}, "evidence": "with 8 cylinders refers to cylinders = 8; average price = avg(price) where cylinders = 8"}
{"sample_id": 3131, "db_id": "cars", "final": {"question": "Calculate the percentage of cars that belong to the USA.", "sql": "SELECT CAST(SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin", "source_tables": ["production", "country"]}, "evidence": "belong to the USA refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%"}
{"sample_id": 3108, "db_id": "cars", "final": {"question": "How many of the cars from Japan weighed less than 3000?", "sql": "SELECT COUNT(*) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' AND T4.weight < 3000", "source_tables": ["production", "price", "data", "country"]}, "evidence": "from Japan refers to country = 'Japan'; weighed less than 3000 refers to weight < 3000"}
{"sample_id": 3122, "db_id": "cars", "final": {"question": "Among the cars introduced in 1977, provide the names and the horse powers of cars from Europe.", "sql": "SELECT T1.car_name, T1.horsepower FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year = 1977 AND T3.country = 'Europe'", "source_tables": ["production", "country", "data"]}, "evidence": "introduced in 1977 refers to model_year = 1977; car's name refers to car_name; from Europe refers to country = 'Europe'"}
{"sample_id": 3069, "db_id": "cars", "final": {"question": "Please list the names of all the car models whose origin country is the USA.", "sql": "SELECT DISTINCT T1.car_name FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T2.country = T3.origin WHERE T3.country = 'USA'", "source_tables": ["production", "country", "data"]}, "evidence": "name of car model refers to car_name; origin country is the USA refers to country = 'USA'"}
{"sample_id": 3142, "db_id": "cars", "final": {"question": "What years did the Buick Skylark 320 get in production?", "sql": "SELECT T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'buick skylark 320'", "source_tables": ["production", "data"]}, "evidence": "year refers to model_year; Buick Skylark 320 refers to car_name = 'buick skylark 320'"}
{"sample_id": 3074, "db_id": "cars", "final": {"question": "What is the maximum acceleration of a car with price over $40000?", "sql": "SELECT MAX(T1.acceleration) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price > 40000", "source_tables": ["price", "data"]}, "evidence": "the maximum acceleration refers to max(acceleration); price over $40000 refers to price > 40000"}
{"sample_id": 3076, "db_id": "cars", "final": {"question": "What is the maximum sweep volume of a car that costs less than $30000?", "sql": "SELECT MAX(T1.displacement / T1.cylinders) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price < 30000", "source_tables": ["price", "data"]}, "evidence": "cost less than $30000 refers to price < 30000; the maximum sweep volume = max(divide(displacement, cylinders)) where price < 30000"}
{"sample_id": 3140, "db_id": "cars", "final": {"question": "How many Japanese cars weigh more than 2000 lbs?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan' AND T1.weight > 2000", "source_tables": ["production", "country", "data"]}, "evidence": "Japanese car refers to country = 'Japan'; weigh more than 2000 lbs refers to weight > 2000"}
{"sample_id": 3129, "db_id": "cars", "final": {"question": "List the names and prices of the cars with model 82 and mileage per gallon of greater than 30.", "sql": "SELECT T2.car_name, T1.price FROM price AS T1 INNER JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.model = 82 AND T2.mpg > 30", "source_tables": ["price", "data"]}, "evidence": "car's name refers to car_name; model 82 refers to model = 82; mileage per gallon of greater than 30 refers to mpg > 30"}
{"sample_id": 3087, "db_id": "cars", "final": {"question": "Which car in the database provides the best crash protection based on its weight? How much is it?", "sql": "SELECT T1.ID, T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "the best crash protection refers to max(weight); cost refers to price"}
{"sample_id": 3066, "db_id": "cars", "final": {"question": "How much US dollars does a Ford Torino cost?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford torino'", "source_tables": ["price", "data"]}, "evidence": "cost refers to price; Ford Torino refers to car_name = 'ford torino'"}
{"sample_id": 3143, "db_id": "cars", "final": {"question": "Which country produced the most expensive car in 1970?", "sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN price AS T4 ON T4.ID = T1.ID WHERE T2.model_year = 1970 ORDER BY T4.price DESC LIMIT 1", "source_tables": ["production", "country", "price", "data"]}, "evidence": "the most expensive refers to max(price); in 1970 refers to model_year = 1970"}
{"sample_id": 3146, "db_id": "cars", "final": {"question": "What is the average weight of Japanese cars with 4 cylinders that were produced from 1975 to 1980?", "sql": "SELECT AVG(T1.weight) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T2.model_year BETWEEN 1975 AND 1980 AND T1.cylinders = 4 AND T3.country = 'Japan'", "source_tables": ["production", "country", "data"]}, "evidence": "Japanese car refers to country = 'Japan'; with 4 cylinders refers to cylinders = 4; produced from 1975 to 1980 refers to model_year BETWEEN 1975 AND 1980; average weight = avg(weight)"}
{"sample_id": 3070, "db_id": "cars", "final": {"question": "Please list the names of the top 3 most expensive cars.", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 3", "source_tables": ["price", "data"]}, "evidence": "name of the car refers to car_name; the most expensive refers to max(price)"}
{"sample_id": 3063, "db_id": "cars", "final": {"question": "Among the cars with 8 cylinders, what is the name of the one that's the most expensive?", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.cylinders = 8 ORDER BY T2.price DESC LIMIT 1", "source_tables": ["price", "data"]}, "evidence": "with 8 cylinders refers to cylinders = 8; name of the car refers to car_name; the most expensive refers to max(price)"}
{"sample_id": 3115, "db_id": "cars", "final": {"question": "How many cars worth greater than 40000 were from the USA?", "sql": "SELECT COUNT(*) FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'USA' AND T1.price > 40000", "source_tables": ["production", "price", "country"]}, "evidence": "worth greater than 40000 refers to price > 40000; from the USA refers to country = 'USA'"}
{"sample_id": 3071, "db_id": "cars", "final": {"question": "Please list all the years in which the car model Chevrolet Impala was introduced in the market.", "sql": "SELECT DISTINCT T1.model_year FROM production AS T1 INNER JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.car_name = 'chevrolet impala'", "source_tables": ["production", "data"]}, "evidence": "year refers to model_year; Chevrolet Impala refers to car_name = 'chevrolet impala'"}
{"sample_id": 3068, "db_id": "cars", "final": {"question": "Among the car models introduced in the market in 1970, how many of them have the USA as their origin country?", "sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T1.model_year = 1970 AND T2.country = 'USA'", "source_tables": ["production", "country"]}, "evidence": "introduced in the market in 1970 refers to model_year = 1970; have the USA as origin country refers to country = 'USA'"}
{"sample_id": 3101, "db_id": "cars", "final": {"question": "How much is the Peugeot 505s Turbo Diesel?", "sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'peugeot 505s turbo diesel'", "source_tables": ["price", "data"]}, "evidence": "cost refers to price; Peugeot 505s Turbo Diesel refers to car_name = 'peugeot 505s turbo diesel'"}
{"sample_id": 3139, "db_id": "cars", "final": {"question": "How many American cars have an acceleration time of less than 12 seconds?", "sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'USA' AND T1.acceleration < 12", "source_tables": ["production", "country", "data"]}, "evidence": "American car refers to country = 'USA'; an acceleration time of less than 12 seconds refers to acceleration < 12"}
{"sample_id": 3102, "db_id": "cars", "final": {"question": "What is the miles per square hour of the cheapest car produced by the USA?", "sql": "SELECT T4.acceleration FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'USA' ORDER BY T1.price ASC LIMIT 1", "source_tables": ["production", "price", "data", "country"]}, "evidence": "miles per square hour refers to acceleration; the cheapest refers to min(price); produced by the USA refers to country = 'USA'"}
{"sample_id": 3117, "db_id": "cars", "final": {"question": "List the car's name with a price worth greater than 85% of the average price of all cars.", "sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price * 100 > ( SELECT AVG(price) * 85 FROM price )", "source_tables": ["price", "data"]}, "evidence": "car's name refers to car_name; a price worth greater than 85% of the average price of all cars refers to price > multiply(avg(price), 0.85)"}
{"sample_id": 3064, "db_id": "cars", "final": {"question": "Among the cars over 3000lbs, how many of them cost less than $30000?", "sql": "SELECT COUNT(T1.car_name) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.weight > 3000 AND T2.price < 30000", "source_tables": ["price", "data"]}, "evidence": "over 3000lbs refers to weight > 3000; cost less than $30000 refers to price < 30000"}
{"sample_id": 3178, "db_id": "donor", "final": {"question": "What is the essay title of the project that have the highest total price excluding optional support and who is the biggest donor? Identify the donor and calculate how many percent did he/she donated in the project.", "sql": "SELECT T1.title, T3.donor_acctid, CAST(T3.donation_to_project AS REAL) / T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid ORDER BY T3.donation_to_project DESC LIMIT 1", "source_tables": ["donations", "essays", "projects"]}, "evidence": "highest total price excluding optional support refers to max(total_price_excluding_optional_support); who refers to donor_acctid; percent = divide(donation_to_project, total_price_excluding_optional_support)*100%"}
{"sample_id": 3302, "db_id": "donor", "final": {"question": "What is the most expensive book item? Please provide a short description of projects related to those.", "sql": "SELECT T1.item_name, T2.short_description FROM resources AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.project_resource_type = 'Books' ORDER BY T1.item_unit_price DESC LIMIT 1", "source_tables": ["essays", "resources"]}, "evidence": "book item refers to project_resource_type = 'Books'; most expensive refers to MAX(item_unit_price)"}
{"sample_id": 3204, "db_id": "donor", "final": {"question": "Which donor has donated the most for a project whose main subject area is Literacy & Language? Please give his or her ID.", "sql": "SELECT T2.donor_acctid FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.primary_focus_area = 'Literacy & Language' ORDER BY T2.donation_total DESC LIMIT 1", "source_tables": ["donations", "projects"]}, "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; donated the most refers to Max(donation_total);"}
{"sample_id": 3300, "db_id": "donor", "final": {"question": "What are the coordinates of the school with the project \"Wiping Away Bad Grades\"?", "sql": "SELECT T1.school_longitude, T1.school_latitude FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Wiping Away Bad Grades'", "source_tables": ["essays", "projects"]}, "evidence": "project \"Wiping Away Bad Grades\" title = 'Wiping Away Bad Grades'; coordinates refers to school_longitude, school_latitude"}
{"sample_id": 3287, "db_id": "donor", "final": {"question": "How many Rock Hill City School projects have teacher donors?", "sql": "SELECT COUNT(DISTINCT T1.teacher_acctid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Rock Hill' AND is_teacher_acct = 't'", "source_tables": ["donations", "projects"]}, "evidence": "Rock Hill City School refers to school_city = 'Rock Hill'; teacher donors refers to is_teacher_acct = 't'"}
{"sample_id": 3254, "db_id": "donor", "final": {"question": "How many donations were paid via credit card to Memphis City School District?", "sql": "SELECT COUNT(T1.projectid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.payment_method = 'creditcard' AND T2.school_district = 'Memphis City School District'", "source_tables": ["donations", "projects"]}, "evidence": "paid via credit card refer to payment method = creditcard; Memphis City School District refer to school_district"}
{"sample_id": 3282, "db_id": "donor", "final": {"question": "What is the project title of the school located at latitude 42003718 and longitude -87668289?", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_latitude = 42003718 AND T2.school_longitude = -87668289", "source_tables": ["essays", "projects"]}, "evidence": "latitude 42003718 refers to school_latitude = 42003718; longitude -87668289 refers to school_longitude = -87668289"}
{"sample_id": 3156, "db_id": "donor", "final": {"question": "For all donors from Texas City, list their donation message and name of the project they donated to.", "sql": "SELECT T2.donation_message, T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donor_city = 'Texas City'", "source_tables": ["donations", "essays"]}, "evidence": "from Texas City refers to donor_city = 'Texas City'; name of the project refers title"}
{"sample_id": 3281, "db_id": "donor", "final": {"question": "In which city is there a greater number of schools that have received donations of less than 10 dollars?", "sql": "SELECT T2.school_city FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.dollar_amount = 'under_10' GROUP BY T2.school_city ORDER BY COUNT(T2.schoolid) DESC LIMIT 1", "source_tables": ["donations", "projects"]}, "evidence": "received donations of less than 10 dollars refers to dollar_amount = 'under_10'; city refers to school_city\n\n"}
{"sample_id": 3151, "db_id": "donor", "final": {"question": "Name all the project titles whereby project materials are intended mainly for literary.", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject = 'Literacy'", "source_tables": ["essays", "projects"]}, "evidence": "intended mainly for literary refers to primary_focus_subject = 'Literacy'"}
{"sample_id": 3253, "db_id": "donor", "final": {"question": "What payment method was used for Needed Resource Materials For My Students?", "sql": "SELECT T3.payment_method FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Needed Resource Materials For My Students'", "source_tables": ["donations", "essays", "projects"]}, "evidence": "Needed Resource Materials For My Students refer to title"}
{"sample_id": 3275, "db_id": "donor", "final": {"question": "What percentage of projects that have not received a cash donation have received a portion of a donation included corporate sponsored giftcard?", "sql": "SELECT CAST(SUM(CASE WHEN payment_included_campaign_gift_card = 't' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donationid) FROM donations WHERE payment_method = 'no_cash_received'", "source_tables": ["donations"]}, "evidence": "have not received a cash donation refers to payment_method = 'no_cash_received'; received a portion of a donation included corporate sponsored giftcard payment_included_campaign_gift_card = 't'; percentage refers to DIVIDE(payment_included_campaign_gift_card = 't',payment_included_campaign_gift_card)*100"}
{"sample_id": 3258, "db_id": "donor", "final": {"question": "What are the coordinates of the school where project 'Look, Look, We Need a Nook!' Was donated to and what resource type is it?", "sql": "SELECT T2.school_latitude, T2.school_longitude, T2.resource_type FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Look, Look, We Need a Nook!'", "source_tables": ["essays", "projects"]}, "evidence": "Coordinates of the school refer to school_latitude, school_longitude); Look, Look, We Need a Nook! Refer to title;"}
{"sample_id": 3149, "db_id": "donor", "final": {"question": "Calculate the total amount of donations made in 2011 for an honoree with payment via campaign page.", "sql": "SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2011%' AND via_giving_page = 't' AND for_honoree = 't'", "source_tables": ["donations"]}, "evidence": "total amount refers to sum(donation_total); 2011 refers to donation_timestamp LIKE'2011%'; honoree refers to for_honoree = 't'; via campaign page refers to via_giving_page = 't'"}
{"sample_id": 3205, "db_id": "donor", "final": {"question": "What is the most requested item under the resource type \"Supplies\" for projects whose main subject area is Literacy & Language?", "sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area = 'Literacy & Language' AND T1.project_resource_type = 'Supplies' ORDER BY T1.item_quantity DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; resource type supplies refers to project_resource_type = 'Supplies'; most requested item refers to Max(item_quantity);"}
{"sample_id": 3285, "db_id": "donor", "final": {"question": "What is the name of the vendors serving material for projects for grades 9-12?", "sql": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.grade_level = 'Grades 9-12'", "source_tables": ["resources", "projects"]}, "evidence": "for grades 9-12 refers to grade_level = 'Grades 9-12'"}
{"sample_id": 3263, "db_id": "donor", "final": {"question": "Which cities in the Los Angeles Unified School District has bought supplies from Quill.com?", "sql": "SELECT T2.school_city FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_district = 'Los Angeles Unif Sch Dist' AND T1.vendor_name = 'Quill.com'", "source_tables": ["resources", "projects"]}, "evidence": "cities refer to school_city; Los Angeles Unified School District refer to school_district = 'Los Angeles Unified School District'; supplies refer to project_resource_type; Quill.com refer to vendor_name"}
{"sample_id": 3296, "db_id": "donor", "final": {"question": "How many donations does the project \"Look, Look, We Need a Nook!\" have?", "sql": "SELECT SUM(T3.donation_total) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Look, Look, We Need a Nook!'", "source_tables": ["donations", "essays", "projects"]}, "evidence": "project \"Look, Look, We Need a Nook!\" refers to title = 'Look, Look, We Need a Nook!'"}
{"sample_id": 3220, "db_id": "donor", "final": {"question": "Which city does the school that project \"iMath\" donated to in?", "sql": "SELECT T1.school_city FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'iMath'", "source_tables": ["essays", "projects"]}, "evidence": "iMath is the title; city refers to school_city;"}
{"sample_id": 3276, "db_id": "donor", "final": {"question": "What percentage of projects in the City of Santa Barbara are in suburban metro?", "sql": "SELECT CAST(SUM(CASE WHEN school_metro = 'suburban' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(projectid) FROM projects WHERE school_city = 'Santa Barbara'", "source_tables": ["projects"]}, "evidence": "City of Santa Barbara refers to school_city = 'Santa Barbara'; percentage refers to DIVIDE(school_metro = 'suburban'; school_metro)*100"}
{"sample_id": 3185, "db_id": "donor", "final": {"question": "How many students will be impacted for the Fit Firsties! Project?", "sql": "SELECT T2.students_reached FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Fit Firsties!'", "source_tables": ["essays", "projects"]}, "evidence": "how many students refers to students_reached; Fit Firsties! project refers to title = 'Fit Firsties!'"}
{"sample_id": 3177, "db_id": "donor", "final": {"question": "What is the average amount of donations by people who donated in the project \"Recording Rockin' Readers\"", "sql": "SELECT AVG(T3.donation_to_project) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Recording Rockin'' Readers'", "source_tables": ["donations", "essays", "projects"]}, "evidence": "average amount of donations = divide(sum(donation_to_project), count(donor_acctid)); project \"Recording Rockin' Readers\" refers to title = 'Recording Rockin' Readers'"}
{"sample_id": 3236, "db_id": "donor", "final": {"question": "How many number of donations did the project 'A Rug For Reaching Readers' get?", "sql": "SELECT SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'A Rug For Reaching Readers'", "source_tables": ["donations", "essays"]}, "evidence": "A Rug For Reaching Readers'is the title;"}
{"sample_id": 3298, "db_id": "donor", "final": {"question": "What is the name of the vendor that the project \"Bloody Times\" uses for their resources?", "sql": "SELECT T3.vendor_name FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN resources AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Bloody Times'", "source_tables": ["essays", "resources", "projects"]}, "evidence": "project \"Bloody Times\" refers to title = 'Bloody Times'"}
{"sample_id": 3189, "db_id": "donor", "final": {"question": "What is the title of project that have the most expensive funds?", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.projectid = ( SELECT projectid FROM resources ORDER BY item_unit_price * item_quantity DESC LIMIT 1 )", "source_tables": ["essays", "resources", "projects"]}, "evidence": "the most expensive funds refers to max(multiply(item_unit_price, item_quantity))"}
{"sample_id": 3286, "db_id": "donor", "final": {"question": "How many teachers have made some type of donation for projects in Chicago?", "sql": "SELECT COUNT(DISTINCT T2.teacher_acctid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.is_teacher_acct = 't' AND T2.school_city = 'Chicago'", "source_tables": ["donations", "projects"]}, "evidence": "in Chicago refers to school_city = 'Chicago'; teachers refers to is_teacher_acct = 't'"}
{"sample_id": 3182, "db_id": "donor", "final": {"question": "Which school requested the highest amount of resources from Amazon? State the school's ID.", "sql": "SELECT T2.schoolid FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name LIKE 'Amazon' GROUP BY T2.schoolid ORDER BY COUNT(T1.vendor_name) DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "highest amount of resources refers to max(count(schoolid)); Amazon refers to vendor_name = 'Amazon'"}
{"sample_id": 3169, "db_id": "donor", "final": {"question": "What were the resources that were requested by the teacher for project \"d6ef27c07c30c81f0c16c32b6acfa2ff\"? Indicate the quantities as well and whether or not the teacher acquired P.h.D or doctor degree.", "sql": "SELECT DISTINCT T1.item_name, T1.item_quantity, T2.teacher_prefix FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff'", "source_tables": ["resources", "projects"]}, "evidence": "resources that were requested refers to item_name; project \"d6ef27c07c30c81f0c16c32b6acfa2ff\" refers to projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff'; quantities refers to item_quantity; teacher_prefix = 'Dr. ' refers to teacher acquired P.h.D or doctor degree"}
{"sample_id": 3153, "db_id": "donor", "final": {"question": "For project titled 'Toot Your Flute!', what is the main subject of the project materials intended for? Name the other projects with the similar focus.", "sql": "SELECT T2.primary_focus_subject FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'Toot Your Flute!'", "source_tables": ["essays", "projects"]}, "evidence": "main subject refers to primary_focus_subject"}
{"sample_id": 3202, "db_id": "donor", "final": {"question": "Among the donations with a portion using account credits redemption, how many of them are for projects created by teachers working in a public year-round school?", "sql": "SELECT COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.payment_included_acct_credit = 't' AND T1.school_year_round = 't'", "source_tables": ["donations", "projects"]}, "evidence": "portion using account credits redemption refers to payment_included_acct_credit = 't'; year-round school refers to school_year_round = 't';"}
{"sample_id": 3238, "db_id": "donor", "final": {"question": "What was the donation optional support amount for the project 'Armenian Genocide'?", "sql": "SELECT T2.donation_optional_support FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Armenian Genocide'", "source_tables": ["donations", "essays"]}, "evidence": "Armenian Genocide' is the title;"}
{"sample_id": 3183, "db_id": "donor", "final": {"question": "How many donors in Los Angeles donated to school in another city?", "sql": "SELECT COUNT(T2.schoolid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_city = 'Los Angeles' AND T2.school_city NOT LIKE 'Los Angeles'", "source_tables": ["donations", "projects"]}, "evidence": "in Los Angeles refers to donor_city = 'Los Angeles'; school in another city refers to school_city ! = 'Los Angeles'"}
{"sample_id": 3264, "db_id": "donor", "final": {"question": "What is the total price of items brought from ABC School Supply with a listed type of Other? Also include the list of the buyers' coordinates and school districts they belong to.", "sql": "SELECT T2.item_unit_price * T2.item_quantity price, T1.school_latitude, T1.school_longitude FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid WHERE T2.vendor_name = 'ABC School Supply' AND T2.project_resource_type = 'Other' AND T1.school_district = 'Hillsborough Co Pub Sch Dist'", "source_tables": ["resources", "projects"]}, "evidence": "ABC School Supply refer to vendor_name; listed type as Other refer to project_resource_type = 'Other'; coordinates refer to coordinates(school_latitude, school_longitude); total price of items refer to SUM(MULTIPLY(item_unit_price, item_quantity where vendor_name = \u2019ABC School Supply\u2019))\n\n"}
{"sample_id": 3206, "db_id": "donor", "final": {"question": "Which item provided to a project whose main subject area is Literacy & Language has the highest unit price?", "sql": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area = 'Literacy & Language' ORDER BY T1.item_unit_price DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; highest unit price refers to Max(item_unit_price);"}
{"sample_id": 3170, "db_id": "donor", "final": {"question": "What is the total price including optional support received by the teacher who posted the essay titled \"Recording Rockin' Readers\"?", "sql": "SELECT SUM(T1.total_price_including_optional_support) FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title = 'Recording Rockin'' Readers'", "source_tables": ["essays", "projects"]}, "evidence": ""}
{"sample_id": 3252, "db_id": "donor", "final": {"question": "Which school district was Future Einsteins Of America project located at?", "sql": "SELECT T1.school_district FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Future Einsteins Of America'", "source_tables": ["essays", "projects"]}, "evidence": "Future Einsteins of America refer to title"}
{"sample_id": 3229, "db_id": "donor", "final": {"question": "How many teachers in Twin Falls have Math & Science as their primary focus area?", "sql": "SELECT COUNT(teacher_acctid) FROM projects WHERE school_county = 'Twin Falls' AND primary_focus_area = 'Math & Science'", "source_tables": ["projects"]}, "evidence": "Twin Falls is school_country; 'Math & Science' is primary_focus_area;"}
{"sample_id": 3203, "db_id": "donor", "final": {"question": "What is the total donation amount made for projects whose main subject area are Literacy & Language?", "sql": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.primary_focus_area = 'Literacy & Language'", "source_tables": ["donations", "projects"]}, "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; total donation amount refers to Sum(dollar_amount);"}
{"sample_id": 3255, "db_id": "donor", "final": {"question": "List the school districts that have bought resources from Barnes and Noble.", "sql": "SELECT T2.school_district FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Barnes and Noble'", "source_tables": ["resources", "projects"]}, "evidence": "Barnes and Noble refer to vendor_name"}
{"sample_id": 3299, "db_id": "donor", "final": {"question": "List all the items from \"Sax Arts & Crafts\" and the zip code of the schools that received them.", "sql": "SELECT T2.school_zip, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Sax Arts & Crafts'", "source_tables": ["resources", "projects"]}, "evidence": "from \"Sax Arts & Crafts\" refers to vendor_name = 'Sax Arts & Crafts'; zip code of the schools refers school_zip"}
{"sample_id": 3216, "db_id": "donor", "final": {"question": "Among public magnet schools,what percentage of schools that receive the donated resources as books?", "sql": "SELECT CAST(SUM(CASE WHEN T1.project_resource_type = 'Books' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_magnet = 't'", "source_tables": ["resources", "projects"]}, "evidence": "magnet school refers to school_magnet = 't'; donated resources as books refers to project_resource_type = 'Books'; percentage = Divide(Count(projectid) where project_resource_type = 'Books', Count(projectid))*100"}
{"sample_id": 3245, "db_id": "donor", "final": {"question": "For the all donations to the project 'Bringing Drama to Life', what is the percentage of the donation is paid by credit card?", "sql": "SELECT CAST(SUM(CASE WHEN T2.payment_method LIKE 'creditcard' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donationid) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Bringing Drama to Life'", "source_tables": ["donations", "essays"]}, "evidence": "Bringing Drama to Life' is the title; Percentage = Divide(Count(payment_method = 'creditcard'), Count(projectid))*100;"}
{"sample_id": 3159, "db_id": "donor", "final": {"question": "Name and describe all projects created by New York teachers.", "sql": "SELECT T1.title, T1.short_description FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_ny_teaching_fellow = 't'", "source_tables": ["essays", "projects"]}, "evidence": "project name refers to title; describe refers to short_description; New York teachers refers to teacher_ny_teaching_fellow = 't'"}
{"sample_id": 3226, "db_id": "donor", "final": {"question": "How many schools which have suburban metro are there in Bethlehem?", "sql": "SELECT COUNT(schoolid) FROM projects WHERE school_city = 'Bethlehem' AND school_metro = 'suburban'", "source_tables": ["projects"]}, "evidence": "Bethlehem is school_city; suburban metro refers to school_metro = 'suburban';"}
{"sample_id": 3260, "db_id": "donor", "final": {"question": "What date did the project with he 'Lets Share Ideas essay' went live?", "sql": "SELECT T1.date_posted FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Lets Share Ideas'", "source_tables": ["essays", "projects"]}, "evidence": "date refer to date_posted; Lets Share Ideas refer to title"}
{"sample_id": 3160, "db_id": "donor", "final": {"question": "If funded, which are the projects that could impact at least 600 students for a school with moderate level of poverty? Name the projects and state the project cost.", "sql": "SELECT DISTINCT T2.title, T1.total_price_excluding_optional_support FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.students_reached >= 600 AND T1.poverty_level LIKE 'moderate poverty'", "source_tables": ["essays", "projects"]}, "evidence": "impact at least 600 students refers to students_reached > = 600; moderate level of poverty refers to poverty_level = 'moderate poverty'; project name refers to title; project cost refers to total_price_excluding_optional_support"}
{"sample_id": 3240, "db_id": "donor", "final": {"question": "Did the project 'I Can't See It...Can You Help Me???' get the tip for the donation?", "sql": "SELECT T2.donation_included_optional_support FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'I Can''t See It...Can You Help Me???'", "source_tables": ["donations", "essays"]}, "evidence": "I Can't See It...Can You Help Me???' is the title;"}
{"sample_id": 3250, "db_id": "donor", "final": {"question": "List the resource types available at Sax Arts & Crafts.", "sql": "SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Sax Arts & Crafts'", "source_tables": ["resources"]}, "evidence": "Sax Arts & Crafts refer to vendor_name; resource type available refer to project_resource_type\n"}
{"sample_id": 3195, "db_id": "donor", "final": {"question": "Among the projects created by a teacher from New York, how many of them have a donor from the same city?", "sql": "SELECT COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_ny_teaching_fellow = 't' AND T2.donor_city = 'New York'", "source_tables": ["donations", "projects"]}, "evidence": "New York is the donor city; donor from the same city refers to donor from New York in which teacher_ny_teaching_fellow = 't';"}
{"sample_id": 3221, "db_id": "donor", "final": {"question": "How to pay the donation of the project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created?", "sql": "SELECT T2.payment_method FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'", "source_tables": ["donations", "projects"]}, "evidence": "teacher \"822b7b8768c17456fdce78b65abcc18e\" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'; how to pay the donation refers to payment_method;"}
{"sample_id": 3225, "db_id": "donor", "final": {"question": "Among the projects whose donators are teachers, what is the percentage of projects that affected more than 30 students?", "sql": "SELECT CAST(SUM(CASE WHEN T1.students_reached > 30 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.is_teacher_acct = 't'", "source_tables": ["donations", "projects"]}, "evidence": "donors are teachers refers to is_teacher_acct = 't'; affect more than 30 students refers to students_reached>30; Percentage = Divide(Count(students_reached>30), Count(students_reached))*100"}
{"sample_id": 3261, "db_id": "donor", "final": {"question": "Write the message of the donor of the project with the title of Lets Share Ideas who paid with a credit card.", "sql": "SELECT T3.donation_message FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Lets Share Ideas' AND T3.payment_method = 'creditcard'", "source_tables": ["donations", "essays", "projects"]}, "evidence": "message of the donor refer to donation_message; Lets Share Ideas refer to title; paid with a credit card refer to payment_method"}
{"sample_id": 3188, "db_id": "donor", "final": {"question": "State the name of vendor that supplies book resources to all school with literacy subject as their primary focus.", "sql": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_subject LIKE 'Literacy'", "source_tables": ["resources", "projects"]}, "evidence": "literacy subject as primary focus refers to primary_focus_subject = 'Literacy'"}
{"sample_id": 3246, "db_id": "donor", "final": {"question": "What is the short description for the title Future Einsteins Of America?", "sql": "SELECT short_description FROM essays WHERE title = 'Future Einsteins Of America'", "source_tables": ["essays"]}, "evidence": ""}
{"sample_id": 3248, "db_id": "donor", "final": {"question": "How many suburban metros are there in Livingston Parish School District?", "sql": "SELECT COUNT(projectid) FROM projects WHERE school_district = 'Livingston Parish School Dist' AND school_metro = 'suburban'", "source_tables": ["projects"]}, "evidence": "suburban metros refer to metro = 'suburban'; Livingston Parish School District refer to school_district"}
{"sample_id": 3173, "db_id": "donor", "final": {"question": "What are the favorite project types of each of the top 10 donors?", "sql": "SELECT project_resource_type FROM ( SELECT T1.donor_acctid, T3.project_resource_type FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN resources AS T3 ON T2.projectid = T3.projectid ORDER BY T1.donation_total DESC LIMIT 10 ) GROUP BY project_resource_type ORDER BY COUNT(project_resource_type) DESC LIMIT 1", "source_tables": ["donations", "resources", "projects"]}, "evidence": "favorite project type refers to project_resource_type; top donors refers to max(donation_total)"}
{"sample_id": 3278, "db_id": "donor", "final": {"question": "What is the average unit price of AKJ Books items?", "sql": "SELECT SUM(item_unit_price) / SUM(item_quantity) FROM resources WHERE vendor_name = 'AKJ Books'", "source_tables": ["resources"]}, "evidence": "AKJ Books items refers to vendor_name = 'AKJ Books'; average unit price refers to DIVIDE(sum(item_unit_price),count(resourceid))"}
{"sample_id": 3306, "db_id": "donor", "final": {"question": "Among the technology items, what percentage of them are from Best Buy for Business? Provide the date of the project related to those items.", "sql": "SELECT CAST(SUM(CASE WHEN T1.vendor_name = 'Best Buy for Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.project_resource_type = 'Technology' UNION ALL SELECT DISTINCT T1.date_posted FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid WHERE T2.vendor_name = 'Best Buy for Business' AND T2.project_resource_type = 'Technology'", "source_tables": ["resources", "projects"]}, "evidence": "technology items refers to project_resource_type = 'Technology'; from Best Buy for Business refers to vendor_name = 'Best Buy for Business'; percentage refers to DIVIDE(count(case when vendor_name = 'Best Buy for Business'),count(projectid))"}
{"sample_id": 3269, "db_id": "donor", "final": {"question": "How many donations of more than $100 were made for an honoree?", "sql": "SELECT COUNT(donationid) FROM donations WHERE dollar_amount = '100_and_up' AND for_honoree = 't'", "source_tables": ["donations"]}, "evidence": "an honoree refers to for_honoree = 't'; more than $100 refers to dollar_amount = '100_and_up'"}
{"sample_id": 3163, "db_id": "donor", "final": {"question": "How many schools in the West New York School District have the highest poverty level?", "sql": "SELECT COUNT(poverty_level) FROM projects WHERE school_district = 'West New York School District' AND poverty_level = 'highest poverty'", "source_tables": ["projects"]}, "evidence": "the highest poverty level refers to poverty_level = 'highest poverty'"}
{"sample_id": 3164, "db_id": "donor", "final": {"question": "How many donations from teachers were done in the state of Colorado?", "sql": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_state = 'CO'", "source_tables": ["donations"]}, "evidence": "from teachers refers to is_teacher_acct = 't'; the state of Colorado refers to donor_state = 'CO-Colorado'"}
{"sample_id": 3171, "db_id": "donor", "final": {"question": "What is the latitude and longitude of the school where the teacher who wrote \"Smile for the Camera!!!\" teaches?", "sql": "SELECT T1.school_latitude, T1.school_longitude FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title = 'Smile for the Camera!!!'", "source_tables": ["essays", "projects"]}, "evidence": "wrote \"Smile for the Camera!!!\" refers to title = 'Smile for the Camera!!!'; latitude refers to school_latitude; longitude refers to school_longitude"}
{"sample_id": 3218, "db_id": "donor", "final": {"question": "Among the schools donated by donor \"000eebf28658900e63b538cf8a73afbd\",how many schools whose poverty level are highest?", "sql": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.poverty_level = 'highest poverty' AND T2.donor_acctid = '000eebf28658900e63b538cf8a73afbd'", "source_tables": ["donations", "projects"]}, "evidence": "donor \"000eebf28658900e63b538cf8a73afbd\" refers to donor_acctid = '000eebf28658900e63b538cf8a73afbd'; highest poverty level refers to poverty_level = 'highest poverty';"}
{"sample_id": 3152, "db_id": "donor", "final": {"question": "Name the project titles meant for school whereby 65% of the students are on reduced lunch.", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.poverty_level LIKE 'highest%'", "source_tables": ["essays", "projects"]}, "evidence": "65% of the students are on reduced lunch refers to poverty_level = 'highest poverty'"}
{"sample_id": 3249, "db_id": "donor", "final": {"question": "Name the vendors that sell the item Classroom Keepers Management Center.", "sql": "SELECT DISTINCT vendor_name FROM resources WHERE item_name = 'Classroom Keepers Management Center'", "source_tables": ["resources"]}, "evidence": "vendor refer to vendor_name; Classroom Keepers Management Center refer to item_name"}
{"sample_id": 3147, "db_id": "donor", "final": {"question": "What is the total amount of donations in 2012.", "sql": "SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2012%'", "source_tables": ["donations"]}, "evidence": "total amount of donations refers to sum(donation_total); 2012 refers to donation_timestamp LIKE'2012%'"}
{"sample_id": 3237, "db_id": "donor", "final": {"question": "What is the total donation amount for the project 'Engaging Young Readers with a Leveled Classroom Library'?", "sql": "SELECT SUM(T2.donation_to_project) + SUM(T2.donation_optional_support) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Engaging Young Readers with a Leveled Classroom Library '", "source_tables": ["donations", "essays"]}, "evidence": "Engaging Young Readers with a Leveled Classroom Library' is the title; total donation amount = Add(donation_to_project, donation_optional_support)"}
{"sample_id": 3180, "db_id": "donor", "final": {"question": "Which project in Brooklyn that have the highest request of resources? State the the project ID including all of the name of item requested.", "sql": "SELECT T1.projectid, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_city LIKE 'Brooklyn' GROUP BY T1.item_name ORDER BY COUNT(T1.item_name) DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "in Brooklyn refers to school_city = 'Brooklyn'; highest request of resources refers to max(count(T1.item_name))"}
{"sample_id": 3212, "db_id": "donor", "final": {"question": "Please list the titles of projects by which schools in Abington was donated.", "sql": "SELECT T2.title FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city LIKE 'Abington'", "source_tables": ["essays", "projects"]}, "evidence": "Abington is school_city;"}
{"sample_id": 3257, "db_id": "donor", "final": {"question": "Which payment method is most comonly used by the schools in the state of Georgia for the payment of donations?", "sql": "SELECT T1.payment_method FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_state = 'GA' GROUP BY T2.school_state ORDER BY COUNT(T1.payment_method) DESC LIMIT 1", "source_tables": ["donations", "projects"]}, "evidence": "Georgia refer to school_state = 'GA'\n"}
{"sample_id": 3243, "db_id": "donor", "final": {"question": "What was the title for the project which got the biggest donation?", "sql": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_total = ( SELECT MAX(donation_total) FROM donations )", "source_tables": ["donations", "essays"]}, "evidence": "biggest donation refers to donation_total = 'max';"}
{"sample_id": 3230, "db_id": "donor", "final": {"question": "How many teachers that have Literature & Writing as their primary focus subject use 'Mr' as their teacher prefix?", "sql": "SELECT COUNT(teacher_acctid) FROM projects WHERE teacher_prefix = 'Mr.' AND primary_focus_subject = 'Literature & Writing'", "source_tables": ["projects"]}, "evidence": "Literature & Writing' is primary_focus_subject; use 'Mr' as their teacher prefix refers to teacher_prefix = 'Mr';"}
{"sample_id": 3223, "db_id": "donor", "final": {"question": "Is the donor who donated to school \"d4af834b1d3fc8061e1ee1b3f1a77b85\" a teacher?", "sql": "SELECT T2.is_teacher_acct FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85'", "source_tables": ["donations", "projects"]}, "evidence": "school \"d4af834b1d3fc8061e1ee1b3f1a77b85\" refers to schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85'; donor is a teacher refers to is_teacher_acct = 't';"}
{"sample_id": 3304, "db_id": "donor", "final": {"question": "What is the total number of students impacted by the projects with a donation from a donor with zip code \"22205\"?", "sql": "SELECT SUM(T2.students_reached) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_zip = 22205", "source_tables": ["donations", "projects"]}, "evidence": "zip code \"22205\" refers to donor_zip = '22205'; students impacted refers to students_reached"}
{"sample_id": 3303, "db_id": "donor", "final": {"question": "For what grade was the project \"Too Close for Comfort\" for?", "sql": "SELECT T1.grade_level FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T2.title LIKE 'Too Close for Comfort'", "source_tables": ["essays", "projects"]}, "evidence": "project \"Too Close for Comfort\" refers to title = 'Too Close for Comfort'; grade refers to grade_level"}
{"sample_id": 3201, "db_id": "donor", "final": {"question": "Please list the donation messages of the donations for the projects created by a teacher working in a public magnet school in Brooklyn.", "sql": "SELECT T2.donation_message FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn' AND T1.school_magnet = 't'", "source_tables": ["donations", "projects"]}, "evidence": "school in Brooklyn refers to school_city = 'Brooklyn'; public magnet refers to school_magnet = 't';"}
{"sample_id": 3150, "db_id": "donor", "final": {"question": "For each donation not from a teacher, state the donor account id and calculate the percentage of donation given for optional support.", "sql": "SELECT donor_acctid, donation_optional_support / donation_total FROM donations WHERE is_teacher_acct = 'f'", "source_tables": ["donations"]}, "evidence": "not from a teacher refers to is_teacher_acct = 'f'; donor account id refers to donor_acctid; percentage of donation = divide(donation_optional_support, donation_total)*100%"}
{"sample_id": 3228, "db_id": "donor", "final": {"question": "State the number of public magnet schools in New York Manhattan.", "sql": "SELECT COUNT(schoolid) FROM projects WHERE school_county = 'New York (Manhattan)' AND school_magnet = 't'", "source_tables": ["projects"]}, "evidence": "public magnet school refers to school_magnet = 't'; in New York Manhattan refers to school_country = 'New York(Manhattan)';"}
{"sample_id": 3175, "db_id": "donor", "final": {"question": "What is the name of the vendor that supplies resources to the project \"iMath\"?", "sql": "SELECT DISTINCT T1.vendor_name FROM resources AS T1 INNER JOIN essays AS T3 ON T1.projectid = T3.projectid WHERE T3.title = 'iMath'", "source_tables": ["essays", "resources"]}, "evidence": "project \"iMath\" refers to title = 'iMath'"}
{"sample_id": 3272, "db_id": "donor", "final": {"question": "List by school id projects from schools located in the Union Pub School District I-9 that have a New York teaching fellow", "sql": "SELECT schoolid FROM projects WHERE school_district = 'Union Pub School District I-9' AND teacher_ny_teaching_fellow = 't'", "source_tables": ["projects"]}, "evidence": "located in the Union Pub School District I-9 refers to school_district = 'Union Pub School District I-9'; New York teaching fellow refers to teacher_ny_teaching_fellow = 't'"}
{"sample_id": 3184, "db_id": "donor", "final": {"question": "What is the prefix for the teacher who handled the 'Reading About Other Cultures' project?", "sql": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Reading About Other Cultures'", "source_tables": ["essays", "projects"]}, "evidence": "Reading About Other Cultures' project refers to title = 'Reading About Other Cultures'; prefix for the teacher refers to teacher_prefix"}
{"sample_id": 3197, "db_id": "donor", "final": {"question": "Please list the vendor providing resources for the projects of a school with the highest poverty level.", "sql": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.poverty_level = 'highest poverty'", "source_tables": ["resources", "projects"]}, "evidence": "highest poverty level refers to poverty_level = 'highest poverty';"}
{"sample_id": 3262, "db_id": "donor", "final": {"question": "Which resource type is commonly bought by the Los Angeles Unified School District?", "sql": "SELECT T1.project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_district = 'Los Angeles Unif Sch Dist' GROUP BY T2.school_district ORDER BY COUNT(T1.project_resource_type) DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "resource type refer to project_resource_type; most commonly bought refer to COUNT(project_resource_type where school_district = \u2019Los Angeles Unif Sch Dist\u2019); Los Angeles Unified School District refer to school_district = \u2019Los Angeles Unif Sch Dist\u2019"}
{"sample_id": 3168, "db_id": "donor", "final": {"question": "What is the id of the project that has the highest optional tip? Indicate the names of the resources that were requested.", "sql": "SELECT T1.projectid, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T2.total_price_including_optional_support - T2.total_price_excluding_optional_support DESC LIMIT 1", "source_tables": ["resources", "projects"]}, "evidence": "highest optional tip refers to subtract(total_price_including_optional_support, total_price_excluding_optional_support); names of the resources refers to item_name"}
{"sample_id": 3289, "db_id": "donor", "final": {"question": "How many total items were requested for the Onslow Co School District urban metro school projects?", "sql": "SELECT SUM(T1.item_quantity) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_metro = 'urban' AND T2.school_district = 'Onslow Co School District'", "source_tables": ["resources", "projects"]}, "evidence": "Onslow Co School District refers to school_district = 'Onslow Co School District';"}
{"sample_id": 3172, "db_id": "donor", "final": {"question": "What is the total amount of all the donations made by the donor who made the highest donation in a single amount? Indicate the essay title to where he/she made his/her biggest donation.", "sql": "SELECT T2.donation_total, T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_total = ( SELECT MAX(donation_total) FROM donations )", "source_tables": ["donations", "essays"]}, "evidence": "total amount of all the donations refers to sum(donation_total); highest donation refers to max(donation_total)"}
{"sample_id": 3297, "db_id": "donor", "final": {"question": "List the poverty level of all the schools that received donations with the zip code \"7079\".", "sql": "SELECT DISTINCT T2.poverty_level FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_zip = 7079", "source_tables": ["donations", "projects"]}, "evidence": "zip code \"7079\" refers to donor_zip = '7079'"}
{"sample_id": 3161, "db_id": "donor", "final": {"question": "From the total amount of donation to projects, what is the percentage of the amount is for school projects located in the rural area?", "sql": "SELECT CAST(SUM(CASE WHEN T2.school_metro = 'rural' THEN T1.donation_to_project ELSE 0 END) AS REAL) * 100 / SUM(donation_to_project) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid", "source_tables": ["donations", "projects"]}, "evidence": "located in the rural area refers to school_metro = 'rural'; percentage = divide(sum(donation_to_project), sum(donation_to_project where school_metro = 'rural'))*100%"}
{"sample_id": 3241, "db_id": "donor", "final": {"question": "What is the teacher's account ID for the project that got the donation at 11:38:43 on 2008/7/29 ?", "sql": "SELECT T1.teacher_acctid FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_timestamp LIKE '2008-07-29 11:38:43.361'", "source_tables": ["donations", "essays"]}, "evidence": "donation at 11:38:43 on 2008/7/29 refers to donation_timestamp = '2008/7/29 11:38:43'; teacher's account ID refers to teacher_acctid;"}
{"sample_id": 3192, "db_id": "donor", "final": {"question": "What is the donation message for donation ID a84dace1ff716f6f0c7af8ef9090a5d5?", "sql": "SELECT donation_message FROM donations WHERE donationid = 'a84dace1ff716f6f0c7af8ef9090a5d5'", "source_tables": ["donations"]}, "evidence": ""}
{"sample_id": 3274, "db_id": "donor", "final": {"question": "What are the vendors of the book-type projects? List them with the project ID.", "sql": "SELECT DISTINCT vendorid, projectid FROM resources WHERE project_resource_type = 'Books'", "source_tables": ["resources"]}, "evidence": "book-type projects refers to project_resource_type = 'Books'"}
{"sample_id": 3200, "db_id": "donor", "final": {"question": "What is the total donated amount for projects created by a teacher working in a school in Brooklyn?", "sql": "SELECT SUM(T2.donation_total) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn'", "source_tables": ["donations", "projects"]}, "evidence": "school in Brooklyn refers to school_city = 'Brooklyn'; total donated amount refers to donation_total;"}
{"sample_id": 3222, "db_id": "donor", "final": {"question": "How much did the project that teacher \"822b7b8768c17456fdce78b65abcc18e\" created donate?", "sql": "SELECT T2.donation_total FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'", "source_tables": ["donations", "projects"]}, "evidence": "teacher \"822b7b8768c17456fdce78b65abcc18e\" refers to teacher_acctid = '822b7b8768c17456fdce78b65abcc18e'; donated refers to donation_total;"}
{"sample_id": 3186, "db_id": "donor", "final": {"question": "List the title of all projects located in Chicago along with the ID of the donor.", "sql": "SELECT T1.title, T3.donor_acctid FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T2.school_city LIKE 'Chicago'", "source_tables": ["donations", "essays", "projects"]}, "evidence": "in Chicago refers to school_city = 'Chicago'; ID of the donor refers to donor_acctid"}
{"sample_id": 3193, "db_id": "donor", "final": {"question": "Please list the types of resources that the vendor Lakeshore Learning Materials has provided for the projects.", "sql": "SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Lakeshore Learning Materials'", "source_tables": ["resources"]}, "evidence": "Lakeshore Learning Materials is vendor_name; type of resources refers to project_resource_type;"}
{"sample_id": 3233, "db_id": "donor", "final": {"question": "What is the teacher prefix for the teacher who wrote the project 'Creating Memories and Inspiring Dreams'?", "sql": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Creating Memories and Inspiring Dreams%'", "source_tables": ["essays", "projects"]}, "evidence": "Creating Memories and Inspiring Dreams is title;"}
{"sample_id": 3465, "db_id": "video_games", "final": {"question": "List down the platform IDs of the games released in 2007.", "sql": "SELECT DISTINCT T.platform_id FROM game_platform AS T WHERE T.release_year = 2007", "source_tables": ["game_platform"]}, "evidence": "released in 2007 refers to release_year = 2007;"}
{"sample_id": 3417, "db_id": "video_games", "final": {"question": "What is the name of the publisher that released the most video games in 2007?", "sql": "SELECT T3.publisher_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.release_year = 2007 GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T2.game_id) DESC LIMIT 1", "source_tables": ["publisher", "game_platform", "game_publisher"]}, "evidence": "name of the publisher refers to publisher_name; publisher that released the most video games in 2007 refers to MAX(COUNT(publisher_name)) WHERE release_year = 2007;"}
{"sample_id": 3492, "db_id": "video_games", "final": {"question": "Provide the name of game produced by 505 Games in 2006.", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN publisher AS T4 ON T2.publisher_id = T4.id WHERE T4.publisher_name = '505 Games' AND T1.release_year = 2006", "source_tables": ["game", "publisher", "game_platform", "game_publisher"]}, "evidence": "name of game refers to game_name; 505 Games refers to publisher_name = '505 Games'; in 2006 refers to release_year = 2006;"}
{"sample_id": 3478, "db_id": "video_games", "final": {"question": "What are the genres of games published by the publisher with an ID of 464?", "sql": "SELECT DISTINCT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id INNER JOIN game_publisher AS T3 ON T1.id = T3.game_id WHERE T3.publisher_id = 464", "source_tables": ["game", "genre", "game_publisher"]}, "evidence": "genres of games refers to genre_name; publisher with an ID of 464 refers to publisher_id = 464;"}
{"sample_id": 3386, "db_id": "video_games", "final": {"question": "Provide the number of games sold in North America on the PS4 platform.", "sql": "SELECT SUM(T1.num_sales * 100000) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.region_name = 'North America' AND T4.platform_name = 'PS4'", "source_tables": ["platform", "region", "region_sales", "game_platform"]}, "evidence": "number of games sold refers to sum(multiply(num_sales, 100000)); in North America refers to region_name = 'North America'; on the PS4 platform refers to platform_name = 'PS4'"}
{"sample_id": 3378, "db_id": "video_games", "final": {"question": "Provide the ID of 1C Company.", "sql": "SELECT T.id FROM publisher AS T WHERE T.publisher_name = '1C Company'", "source_tables": ["publisher"]}, "evidence": "ID refers to publisher.id; 1C Company refers to publisher_name = '1C Company'"}
{"sample_id": 3360, "db_id": "video_games", "final": {"question": "What is the number of sales in region ID 2 with game platform ID 9615?", "sql": "SELECT T.num_sales * 100000 FROM region_sales AS T WHERE T.region_id = 2 AND T.game_platform_id = 9615", "source_tables": ["region_sales"]}, "evidence": "number of sales refers to multiply(num_sales, 100000)"}
{"sample_id": 3395, "db_id": "video_games", "final": {"question": "How many games were released in 2001?", "sql": "SELECT COUNT(T.id) FROM game_platform AS T WHERE T.release_year = 2001", "source_tables": ["game_platform"]}, "evidence": "released in 2001 refers to release_year = 2001"}
{"sample_id": 3322, "db_id": "video_games", "final": {"question": "How many games were sold on the DS platform on average in the 4 different regions?", "sql": "SELECT SUM(T1.num_sales) * 100000 / 4 FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id INNER JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T3.platform_name = 'DS'", "source_tables": ["platform", "region_sales", "game_platform"]}, "evidence": "on the DS platform refers to platform_name = 'DS'; number of games sold on average = divide(sum(multiply(num_sales, 100000)), 4) where platform_name = 'DS'"}
{"sample_id": 3491, "db_id": "video_games", "final": {"question": "List down the game platform ID and region name where the games achieved 20000 sales and below.", "sql": "SELECT T2.game_platform_id, T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.num_sales * 100000 <= 20000", "source_tables": ["region", "region_sales"]}, "evidence": "20000 sales and below refers to num_sales < 0.2;"}
{"sample_id": 3502, "db_id": "video_games", "final": {"question": "How many games available on PSP were released in 2004?", "sql": "SELECT COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PSP' AND T2.release_year = 2004", "source_tables": ["game_platform", "platform", "game_publisher"]}, "evidence": "PSP refers to platform_name = 'PSP'; released in 2004 refers to release_year = 2004;"}
{"sample_id": 3358, "db_id": "video_games", "final": {"question": "Give the game publisher ID of records with platform ID 15.", "sql": "SELECT T.game_publisher_id FROM game_platform AS T WHERE T.platform_id = 15", "source_tables": ["game_platform"]}, "evidence": "platform ID 15 refers to platform_id = 15"}
{"sample_id": 3331, "db_id": "video_games", "final": {"question": "Show the id of game platform which makes the most sales in Japan.", "sql": "SELECT T.game_platform_id FROM ( SELECT T2.game_platform_id, MAX(T2.num_sales) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan' ) t", "source_tables": ["region", "region_sales"]}, "evidence": "id of game platform refers to game_platform_id; the most sales refers to max(num_sales); in Japan refers to region_name = 'Japan'"}
{"sample_id": 3342, "db_id": "video_games", "final": {"question": "How many times more is the number of games which were published by Atari than Athena?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.publisher_name = 'Atari' THEN T2.game_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.publisher_name = 'Athena' THEN T2.game_id ELSE NULL END) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id", "source_tables": ["game_publisher", "publisher"]}, "evidence": "published by Atari refers to publisher_name = 'Atari'; published by\u00a0 Athena refers to publisher_name = 'Athena'; times = divide(sum(publisher_id where publisher_name = 'Atari'), sum(publisher_id where publisher_name = 'Athena'))"}
{"sample_id": 3469, "db_id": "video_games", "final": {"question": "What are the sales made by the games in Japan region?", "sql": "SELECT SUM(CASE WHEN T2.region_name = 'Japan' THEN T1.num_sales ELSE 0 END) AS nums FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id", "source_tables": ["region", "region_sales"]}, "evidence": "sales = SUM(num_sales); Japan region refers to region_name = 'Japan';"}
{"sample_id": 3495, "db_id": "video_games", "final": {"question": "In which region where a game had the lowest number of sales?", "sql": "SELECT DISTINCT T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id ORDER BY T2.num_sales LIMIT 1", "source_tables": ["region", "region_sales"]}, "evidence": "which region refers to region_name; lowest number of sales refers to MIN(num_sales);"}
{"sample_id": 3445, "db_id": "video_games", "final": {"question": "Calculate the average game sales for the PS2 platform.", "sql": "SELECT SUM(T3.num_sales * 100000) / COUNT(T1.id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T2.id = T3.game_platform_id WHERE T1.platform_name = 'PS2'", "source_tables": ["game_platform", "region_sales", "platform"]}, "evidence": "average = AVG(MULTIPLY(num_sales), 100000); PS2 refers to platform_name = 'PS2';"}
{"sample_id": 3392, "db_id": "video_games", "final": {"question": "Provide the platform where the Panzer Tactics can be played.", "sql": "SELECT T4.platform_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = 'Panzer Tactics'", "source_tables": ["game", "platform", "game_platform", "game_publisher"]}, "evidence": "platform refers to platform_name; the Panzer Tactics is a game name."}
{"sample_id": 3307, "db_id": "video_games", "final": {"question": "How many more games were sold on game platform ID 50 than on game platform ID 51 in region ID 1?", "sql": "SELECT (SUM(CASE WHEN T.game_platform_id = 50 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.game_platform_id = 51 THEN T.num_sales ELSE 0 END)) * 100000 AS nums FROM region_sales AS T WHERE T.region_id = 1", "source_tables": ["region_sales"]}, "evidence": "result = subtract(sum(num_sales where game_platform_id = 50), sum(num_sales where game_platform_id = 51))"}
{"sample_id": 3389, "db_id": "video_games", "final": {"question": "How many games can be played on the Wii platform?", "sql": "SELECT COUNT(T1.id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'Wii'", "source_tables": ["platform", "game_platform"]}, "evidence": "on the Wii platform refers to platform_name = 'Wii'"}
{"sample_id": 3455, "db_id": "video_games", "final": {"question": "What are the names of games that were released in 2007?", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2007", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "names of games refers to game_name; released in 2007 refers to release_year = 2007;"}
{"sample_id": 3418, "db_id": "video_games", "final": {"question": "How many publishers published the Minecraft game?", "sql": "SELECT COUNT(T2.publisher_id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id WHERE T1.game_name = 'Minecraft'", "source_tables": ["game", "game_publisher"]}, "evidence": "Minecraft refers to game_name = 'Minecraft';"}
{"sample_id": 3463, "db_id": "video_games", "final": {"question": "List down the game platform IDs of games with a region ID of 1.", "sql": "SELECT T.game_platform_id FROM region_sales AS T WHERE T.region_id = 1", "source_tables": ["region_sales"]}, "evidence": ""}
{"sample_id": 3436, "db_id": "video_games", "final": {"question": "List the name of all games published in Japan.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id INNER JOIN region AS T5 ON T4.region_id = T5.id WHERE T5.region_name = 'Japan'", "source_tables": ["region_sales", "game_publisher", "region", "game_platform", "game"]}, "evidence": "name of games refers to game_name; Japan refers to region_name = 'Japan';"}
{"sample_id": 3420, "db_id": "video_games", "final": {"question": "How many Sports games did Nintendo publish?", "sql": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' AND T1.publisher_name = 'Nintendo'", "source_tables": ["game", "genre", "game_publisher", "publisher"]}, "evidence": "Sports games refers to game_name WHERE genre_name = 'Sports'; Nintendo refers to publisher_name = 'Nintendo';"}
{"sample_id": 3459, "db_id": "video_games", "final": {"question": "Indicate the publisher who has published the most games of all time.", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; publisher who has published the most games of all time refers to MAX(COUNT(publisher_name));"}
{"sample_id": 3320, "db_id": "video_games", "final": {"question": "How many publishers have published more than 3 puzzle games?", "sql": "SELECT COUNT(T.publisher_name) FROM ( SELECT T3.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T3.publisher_name HAVING COUNT(DISTINCT T1.id) > 3 ) t", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "puzzle refers to genre_name = 'Puzzle'; more than 3 puzzle games refers to count(game_id where genre_name = 'Puzzle') > 3"}
{"sample_id": 3477, "db_id": "video_games", "final": {"question": "Calculate the number of games in the fighting genre.", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Fighting'", "source_tables": ["game", "genre"]}, "evidence": "fighting genre refers to genre_name = 'Fighting';"}
{"sample_id": 3377, "db_id": "video_games", "final": {"question": "Sum the total game sales in every region for platform ID 9658.", "sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.game_platform_id = 9658", "source_tables": ["region_sales"]}, "evidence": "total game sales refers to multiply(sum(num_sales), 100000); platform ID 9658 refers to game_platform_id = 9658"}
{"sample_id": 3444, "db_id": "video_games", "final": {"question": "List by name all the games released in the year 2010.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T3.release_year = '2010'", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "name of the games refers to game_name; released in the year 2010 refers to release_year = 2010;"}
{"sample_id": 3434, "db_id": "video_games", "final": {"question": "List the name of all games published by 'Pioneer LDC'.", "sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'Pioneer LDC'", "source_tables": ["game", "game_publisher", "publisher"]}, "evidence": "name of games refers to game_name; 'Pioneer LDC' refers to publisher_name = 'Pioneer LDC';"}
{"sample_id": 3468, "db_id": "video_games", "final": {"question": "List down the platform IDs of the games with a region ID of 3.", "sql": "SELECT T2.id FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id WHERE T1.region_id = 3", "source_tables": ["region_sales", "game_platform"]}, "evidence": ""}
{"sample_id": 3350, "db_id": "video_games", "final": {"question": "How many publishers in Japan released a game on X360 in 2011?", "sql": "SELECT COUNT(T3.game_publisher_id) FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T4.platform_name = 'X360' AND T3.release_year = 2011 AND T1.region_name = 'Japan'", "source_tables": ["platform", "region", "region_sales", "game_platform"]}, "evidence": "in Japan refers to region_name = 'Japan'; on X360 refers to platform_name = 'X360'; in 2011 refers to release_year = 2011"}
{"sample_id": 3446, "db_id": "video_games", "final": {"question": "Calculate the percentage of games published by 'Brash Entertainment'?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.publisher_name = 'Brash Entertainment' THEN T2.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id", "source_tables": ["game_publisher", "publisher"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(publisher_name = 'Brash Entertainment'), COUNT(game_id)), 100.0); 'Brash Entertainment' refers to publisher_name = 'Brash Entertainment';"}
{"sample_id": 3471, "db_id": "video_games", "final": {"question": "State the name of the platforms for games released in 2000.", "sql": "SELECT DISTINCT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T1.release_year = 2000", "source_tables": ["platform", "game_platform"]}, "evidence": "name of the platforms refers to platform_name; released in 2000 refers to release_year = 2000;"}
{"sample_id": 3457, "db_id": "video_games", "final": {"question": "Indicate the release year of the game with more than 200000 sales in Japan.", "sql": "SELECT DISTINCT T3.release_year FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T2.num_sales * 100000 > 200000 AND T1.region_name = 'Japan'", "source_tables": ["region", "region_sales", "game_platform"]}, "evidence": "more than 200000 sales refers to SUM(num_sales) > 2; Japan refers to region_name = 'Japan';"}
{"sample_id": 3403, "db_id": "video_games", "final": {"question": "What are the games that were released in 2006?", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2006", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "game refers to game_name; released in 2006 refers to release_year = 2006"}
{"sample_id": 3394, "db_id": "video_games", "final": {"question": "Which game has the longest name?", "sql": "SELECT T.game_name FROM game AS T ORDER BY LENGTH(T.game_name) DESC LIMIT 1", "source_tables": ["game"]}, "evidence": "game refers to game_name; the longest name refers to max(length(game_name))"}
{"sample_id": 3506, "db_id": "video_games", "final": {"question": "In games that can be played on Wii, what is the percentage of games released in 2007?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.release_year = 2007 THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'Wii'", "source_tables": ["game_platform", "platform", "game_publisher"]}, "evidence": "Wii refers to platform_name = 'Wii'; percentage = MULTIPLY(DIVIDE(SUM(release_year = 2007), COUNT(release_year)), 100.0); released in 2007 refers to release_year = 2007;"}
{"sample_id": 3430, "db_id": "video_games", "final": {"question": "What are the three largest numbers of games sold?", "sql": "SELECT T.game_platform_id, SUM(T.num_sales) * 100000 FROM region_sales AS T GROUP BY game_platform_id ORDER BY SUM(T.num_sales) * 100000 DESC LIMIT 3", "source_tables": ["region_sales"]}, "evidence": "3 largest numbers of games sold refers to game_name where MAX(num_sales) LIMIT 3;"}
{"sample_id": 3311, "db_id": "video_games", "final": {"question": "Who is the publisher of 3D Lemmings?", "sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = '3D Lemmings'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; 3D Lemmings refers to game_name = '3D Lemmings'"}
{"sample_id": 3376, "db_id": "video_games", "final": {"question": "What is the genre ID of the '2Xtreme' game?", "sql": "SELECT T.genre_id FROM game AS T WHERE T.game_name = '2Xtreme'", "source_tables": ["game"]}, "evidence": "the '2Xtreme' game refers to game_name = '2Xtreme'"}
{"sample_id": 3328, "db_id": "video_games", "final": {"question": "What is the id of the game \"Resident Evil Archives: Resident Evil\"?", "sql": "SELECT T.genre_id FROM game AS T WHERE T.game_name = 'Resident Evil Archives: Resident Evil'", "source_tables": ["game"]}, "evidence": "id of game refers to game.id; \"Resident Evil Archives: Resident Evil\" refers to game_name = 'Resident Evil Archives: Resident Evil'"}
{"sample_id": 3431, "db_id": "video_games", "final": {"question": "What year were the first game released?", "sql": "SELECT T.release_year FROM game_platform AS T ORDER BY T.release_year ASC LIMIT 1", "source_tables": ["game_platform"]}, "evidence": "year the first game was released refers to MIN(release_year);"}
{"sample_id": 3391, "db_id": "video_games", "final": {"question": "Mention the genre of the 2Xtreme.", "sql": "SELECT T2.id FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2Xtreme'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; the 2Xtreme game refers to game_name = '2Xtreme'"}
{"sample_id": 3323, "db_id": "video_games", "final": {"question": "Tell the number of games whose publisher id is 352.", "sql": "SELECT DISTINCT T.game_id FROM game_publisher AS T WHERE T.publisher_id = 352", "source_tables": ["game_publisher"]}, "evidence": "number of games refers to count(game_id)"}
{"sample_id": 3412, "db_id": "video_games", "final": {"question": "What is the ratio of game sales between North America and Japan?", "sql": "SELECT SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) / SUM(CASE WHEN T2.region_name = 'Japan' THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id", "source_tables": ["region", "region_sales"]}, "evidence": "ratio = DIVIDE(SUM(num_sales WHERE region_name = 'North America'), SUM(num_sales WHERE region_name = 'Japan')); North America refers to region_name = 'North America'; Japan refers to region_name = 'Japan';"}
{"sample_id": 3319, "db_id": "video_games", "final": {"question": "What is the name of the publisher that has published the most puzzle games?", "sql": "SELECT T.publisher_name FROM ( SELECT T3.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T1.id) DESC LIMIT 1 ) t", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; puzzle refers to genre_name = 'Puzzle'; the most puzzle games refers to max(count(game_id where genre_name = 'Puzzle'))"}
{"sample_id": 3409, "db_id": "video_games", "final": {"question": "List the games from the publisher \"Activision\".", "sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'Activision'", "source_tables": ["game", "game_publisher", "publisher"]}, "evidence": "games refers to game_name; \"Activision\" refers to publisher_name = 'Activision';"}
{"sample_id": 3466, "db_id": "video_games", "final": {"question": "State the game publisher IDs of the games with a platform ID of 16.", "sql": "SELECT T.game_publisher_id FROM game_platform AS T WHERE T.platform_id = 16", "source_tables": ["game_platform"]}, "evidence": ""}
{"sample_id": 3315, "db_id": "video_games", "final": {"question": "Which publisher has published the most games?", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T2.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T1.publisher_id ORDER BY COUNT(T2.id) DESC LIMIT 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "publisher refers to publisher_name; the most games refers to max(count(game_id))"}
{"sample_id": 3426, "db_id": "video_games", "final": {"question": "What is the name of the genre with the most number of video games?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T2.id = T1.genre_id GROUP BY T2.genre_name ORDER BY COUNT(T1.genre_id) DESC LIMIT 1", "source_tables": ["game", "genre"]}, "evidence": "name of the genre refers to genre_name; genre with the most number of video games refers to MAX(COUNT(genre_name));"}
{"sample_id": 3408, "db_id": "video_games", "final": {"question": "Which game has the most sales in Japan?", "sql": "SELECT T5.game_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN game AS T5 ON T4.game_id = T5.id WHERE T1.region_name = 'Japan' ORDER BY T2.num_sales DESC LIMIT 1", "source_tables": ["region_sales", "game_publisher", "region", "game_platform", "game"]}, "evidence": "\nwhich game refers to game_name; most sales refers to MAX(num_sales); Japan refers to region_name = 'Japan';"}
{"sample_id": 3383, "db_id": "video_games", "final": {"question": "Provide the games that can be played on the SCD platform.", "sql": "SELECT T4.game_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T2.platform_name = 'SCD'", "source_tables": ["game", "platform", "game_platform", "game_publisher"]}, "evidence": "game refers to game_name; on the SCD platform refers to platform_name = 'SCD'"}
{"sample_id": 3435, "db_id": "video_games", "final": {"question": "Indicate the name of all the games published for the 'SCD' platform.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T4.platform_name = 'SCD'", "source_tables": ["game", "platform", "game_platform", "game_publisher"]}, "evidence": "name of games refers to game_name;\u00a0 'SCD' platform refers to platform_name = 'SCD';"}
{"sample_id": 3440, "db_id": "video_games", "final": {"question": "Which publisher has published the most games in the 'Puzzle' genre?", "sql": "SELECT T.publisher_name FROM ( SELECT T1.publisher_name, COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T1.publisher_name ORDER BY COUNT(T3.id) DESC LIMIT 1 ) t", "source_tables": ["game", "genre", "game_publisher", "publisher"]}, "evidence": "which publisher refers to publisher_name; publisher that has published the most games refers to MAX(COUNT(publisher_name)); puzzle genre refers to genre_name = 'Puzzle';"}
{"sample_id": 3372, "db_id": "video_games", "final": {"question": "What is the title of the game that gained the most sales in Japan?", "sql": "SELECT T.game_name FROM ( SELECT T5.game_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN game AS T5 ON T4.game_id = T5.id WHERE T1.region_name = 'Japan' ORDER BY T2.num_sales DESC LIMIT 1 ) t", "source_tables": ["region_sales", "game_publisher", "region", "game_platform", "game"]}, "evidence": "title of the game refers to game_name; gained the most sales refers to max(num_sales); in Japan refers to region_name = 'Japan'"}
{"sample_id": 3454, "db_id": "video_games", "final": {"question": "How many games were sold on PS3 platform in Japan?", "sql": "SELECT SUM(T1.num_sales * 100000) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.region_name = 'Japan' AND T4.platform_name = 'PS3'", "source_tables": ["platform", "region", "region_sales", "game_platform"]}, "evidence": "how many games = MULTIPLY(SUM(num_sales), 100000); PS3 refers to platform_name = 'PS3'; Japan refers to region_name = 'Japan';"}
{"sample_id": 3367, "db_id": "video_games", "final": {"question": "List the region name where games reached 300000 sales and above.", "sql": "SELECT DISTINCT T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.num_sales * 100000 > 300000", "source_tables": ["region", "region_sales"]}, "evidence": "reached 300000 sales and above refers to num_sales > 3"}
{"sample_id": 3364, "db_id": "video_games", "final": {"question": "Give the genre of the games released from 2000 to 2002.", "sql": "SELECT DISTINCT T4.genre_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.release_year BETWEEN 2000 AND 2002", "source_tables": ["game", "genre", "game_platform", "game_publisher"]}, "evidence": "genre refers to genre_name; released from 2000 to 2002 refers to release_year BETWEEN 2000 AND 2002"}
{"sample_id": 3416, "db_id": "video_games", "final": {"question": "How many games did BMG Interactive Entertainment release in 2012?", "sql": "SELECT COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T3.release_year = 2012", "source_tables": ["game_publisher", "game_platform", "publisher"]}, "evidence": "BMG Interactive Entertainment refers to publisher_name = 'BMG Interactive Entertainment'; release in 2012 refers to release_year = 2012;"}
{"sample_id": 3348, "db_id": "video_games", "final": {"question": "How many games were released on PS4 in 2014?", "sql": "SELECT COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PS4' AND T2.release_year = 2014", "source_tables": ["game_platform", "platform", "game_publisher"]}, "evidence": "on PS4 refers to platform_name = 'PS4'; in 2014 refers to release_year = 2014"}
{"sample_id": 3438, "db_id": "video_games", "final": {"question": "How many games are not of the genres 'Role-Playing', 'Shooter' and 'Simulation'?", "sql": "SELECT COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name NOT IN ('Role-Playing', 'Shooter', 'Simulation')", "source_tables": ["game", "genre"]}, "evidence": "not of the genres 'Role-Playing', 'Shooter' and 'Simulation' refers to genre_name NOT IN ('Role-Playing', 'Shooter', 'Simulation');"}
{"sample_id": 3359, "db_id": "video_games", "final": {"question": "List down the record ID of records released between 2000 to 2003.", "sql": "SELECT T.id FROM game_platform AS T WHERE T.release_year BETWEEN 2000 AND 2003", "source_tables": ["game_platform"]}, "evidence": "record ID refers to game.id; released between 2000 to 2003 refers to release_year BETWEEN 2000 AND 2003"}
{"sample_id": 3321, "db_id": "video_games", "final": {"question": "Among the games published by Nintendo, what is the percentage of those in the genre of sports?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Sports' THEN T1.id ELSE NULL END) AS REAL) * 100/ COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = 'Nintendo'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "published by Nintendo refers to publisher_name = 'Nintendo'; in the genre of sports refers to genre_name = 'Sports'; percentage = divide(count(game_id where genre_name = 'Sports'), count(game_id)) * 100% where publisher_name = 'Nintendo'"}
{"sample_id": 3384, "db_id": "video_games", "final": {"question": "How many games were published by Acclaim Entertainment?", "sql": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Acclaim Entertainment'", "source_tables": ["publisher", "game_publisher"]}, "evidence": "published by Acclaim Entertainment refers to publisher_name = 'Acclaim Entertainment'"}
{"sample_id": 3312, "db_id": "video_games", "final": {"question": "Please list the names of all the games published by 10TACLE Studios.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = '10TACLE Studios'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "name refers to game_name; published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'"}
{"sample_id": 3460, "db_id": "video_games", "final": {"question": "How many shooter games are there?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Shooter'", "source_tables": ["game", "genre"]}, "evidence": "shooter games refers to game_name WHERE genre_name = 'shooter';"}
{"sample_id": 3476, "db_id": "video_games", "final": {"question": "List down the names of the games in the racing genre.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Racing'", "source_tables": ["game", "genre"]}, "evidence": "name of games refers to game_name; racing genre refers to genre_name = 'Racing';"}
{"sample_id": 3402, "db_id": "video_games", "final": {"question": "How many games do not have any sales in Europe?", "sql": "SELECT COUNT(*) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Europe' AND T1.num_sales = 0", "source_tables": ["region", "region_sales"]}, "evidence": "do not have any sales refers to num_sales = 0; in Europe refers to region_name = 'Europe'"}
{"sample_id": 3352, "db_id": "video_games", "final": {"question": "Which year has the most number of PC games releases?", "sql": "SELECT T.release_year FROM ( SELECT T2.release_year, COUNT(DISTINCT T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PC' GROUP BY T2.release_year ORDER BY COUNT(DISTINCT T3.game_id) DESC LIMIT 1 ) t", "source_tables": ["game_platform", "platform", "game_publisher"]}, "evidence": "year refers to release_year; the most number of releases refers to max(count(game_id))"}
{"sample_id": 3333, "db_id": "video_games", "final": {"question": "How many games in the database belong to the genre of sports?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Sports'", "source_tables": ["game", "genre"]}, "evidence": "the genre of sports refers to genre_name = 'Sports'"}
{"sample_id": 3332, "db_id": "video_games", "final": {"question": "How many platforms are available for the game Pro Evolution Soccer 2016?", "sql": "SELECT COUNT(T2.id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = 'Pro Evolution Soccer 2016'", "source_tables": ["game", "platform", "game_platform", "game_publisher"]}, "evidence": "game Pro Evolution Soccer 2016 refers to game_name = 'Pro Evolution Soccer 2016'"}
{"sample_id": 3494, "db_id": "video_games", "final": {"question": "List the game IDs of the games produced by Abylight.", "sql": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Abylight'", "source_tables": ["publisher", "game_publisher"]}, "evidence": "Abylight refers to publisher_name = 'Abylight';"}
{"sample_id": 3456, "db_id": "video_games", "final": {"question": "How many games were published by Activision?", "sql": "SELECT COUNT(DISTINCT T3.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id WHERE T2.publisher_name = 'Activision'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "Activision refers to publisher_name = 'Activision';"}
{"sample_id": 3499, "db_id": "video_games", "final": {"question": "Calculate the total number of sales in North America.", "sql": "SELECT SUM(T2.num_sales) * 100000 AS nums FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'North America'", "source_tables": ["region", "region_sales"]}, "evidence": "total number of sales = MULTIPLY(SUM(num_sales), 100000); North America refers to region_name = 'North America';"}
{"sample_id": 3373, "db_id": "video_games", "final": {"question": "Provide the game publisher's name of the game with sales greater than 90% of the average sales in Japan.", "sql": "SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T2.num_sales * 10000000 > ( SELECT AVG(T2.num_sales) * 100000 * 90 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan' )", "source_tables": ["publisher", "region_sales", "game_publisher", "region", "game_platform"]}, "evidence": "game publisher's name refers to publisher_name; sales greater than 90% of the average sales refers to num_sales > multiply(0.9, avg(num_sales)); in Japan refers to region_name = 'Japan'"}
{"sample_id": 3365, "db_id": "video_games", "final": {"question": "List down the name of games published by 3DO.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = '3DO'", "source_tables": ["game", "publisher", "game_publisher"]}, "evidence": "name of game refers to game_name; published by 3DO refers to publisher_name = '3DO'"}
{"sample_id": 3442, "db_id": "video_games", "final": {"question": "Which publisher has published the game 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3'?", "sql": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3'", "source_tables": ["game", "game_publisher", "publisher"]}, "evidence": "which publisher refers to publisher_name; 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3' refers to game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3';"}
{"sample_id": 3396, "db_id": "video_games", "final": {"question": "What is the total number of sales across all regions?", "sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales t", "source_tables": ["region_sales"]}, "evidence": "total number of sales = sum(num_sales)"}
{"sample_id": 3356, "db_id": "video_games", "final": {"question": "List down the game ID of games with genre ID 2.", "sql": "SELECT T.id FROM game AS T WHERE T.genre_id = 2", "source_tables": ["game"]}, "evidence": "game ID refers to game.id; genre ID 2 refers to genre_id = 2"}
{"sample_id": 3310, "db_id": "video_games", "final": {"question": "What is the genre of 3D Lemmings?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '3D Lemmings'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; 3D Lemmings refers to game_name = '3D Lemmings'"}
{"sample_id": 3337, "db_id": "video_games", "final": {"question": "Tell the genre of the game \"Resident Evil: Revelations\".", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = 'Resident Evil: Revelations'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; game \"Resident Evil: Revelations\" refers to game_name = 'Resident Evil: Revelations'"}
{"sample_id": 3447, "db_id": "video_games", "final": {"question": "What is the total number of games sold in region ID 1?", "sql": "SELECT SUM(T.num_sales * 100000) FROM region_sales AS T WHERE T.region_id = 1", "source_tables": ["region_sales"]}, "evidence": "total number of games sold = MULTIPLY(SUM(num_sales), 100000);"}
{"sample_id": 3488, "db_id": "video_games", "final": {"question": "Provide the name of games released in 2015.", "sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2015", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "names of games refers to game_name; released in 2015 refers to release_year = 2015;"}
{"sample_id": 3415, "db_id": "video_games", "final": {"question": "What are the top 2 platforms with the most sales in North America?", "sql": "SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'North America' ORDER BY T2.num_sales DESC LIMIT 2", "source_tables": ["platform", "region", "region_sales", "game_platform"]}, "evidence": "platforms refers to platform_name; most sales refers to MAX(num_sales); North America refers to region_name = 'North America';"}
{"sample_id": 3432, "db_id": "video_games", "final": {"question": "What publishers have the word 'Entertainment' in their name?", "sql": "SELECT T.publisher_name FROM publisher AS T WHERE T.publisher_name LIKE '%Entertainment%'", "source_tables": ["publisher"]}, "evidence": "publishers that have the word 'Entertainment' in their name refers to publisher_name LIKE '%Entertainment%';"}
{"sample_id": 3422, "db_id": "video_games", "final": {"question": "How many times did other regions make positive sales in DS platform?", "sql": "SELECT COUNT(DISTINCT T2.id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN region_sales AS T3 ON T1.id = T3.game_platform_id INNER JOIN region AS T4 ON T3.region_id = T4.id WHERE T1.platform_name = 'DS' AND T4.region_name = 'Other' AND T3.num_sales > 0", "source_tables": ["game_platform", "region", "region_sales", "platform"]}, "evidence": "other regions refers to region_name = 'Other'; positive sales refers to num_sales > 0; DS platform refers to platform_name = 'DS';"}
{"sample_id": 3314, "db_id": "video_games", "final": {"question": "Please list the names of all the games published by 10TACLE Studios and are puzzles.", "sql": "SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = '10TACLE Studios' AND T4.genre_name = 'Puzzle'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "name refers to game_name; published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'; puzzle refers to genre_name = 'Puzzle'"}
{"sample_id": 3375, "db_id": "video_games", "final": {"question": "How many games were released in 1981?", "sql": "SELECT COUNT(T.id) FROM game_platform AS T WHERE T.release_year = 1981", "source_tables": ["game_platform"]}, "evidence": "released in 1981 refers to release_year = 1981"}
{"sample_id": 3370, "db_id": "video_games", "final": {"question": "In which platform does the game titled 15 Days available?", "sql": "SELECT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN game AS T4 ON T3.game_id = T4.id WHERE T4.game_name = 'Counter Force'", "source_tables": ["game", "game_platform", "platform", "game_publisher"]}, "evidence": "platform refers to platform_name; the game titled 15 Days refers to game_name = '15 Days'"}
{"sample_id": 3505, "db_id": "video_games", "final": {"question": "What is the diffrence between the number of games produced by Culture Brain that can be played on SNES and DS?", "sql": "SELECT COUNT(CASE WHEN T1.platform_name = 'SNES' THEN T3.game_id ELSE NULL END) - COUNT(CASE WHEN T1.platform_name = 'DS' THEN T3.game_id ELSE NULL END) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T4.publisher_name = 'Culture Brain'", "source_tables": ["publisher", "game_platform", "platform", "game_publisher"]}, "evidence": "difference = SUBTRACT(SUM(platform_name = 'SNES'), SUM(platform_name = 'DS')); SNES refers to platform_name = SNES ; DS refers to platform_name = 'DS' ;"}
{"sample_id": 3493, "db_id": "video_games", "final": {"question": "What is the genre of the game ID 119?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.id = 119", "source_tables": ["game", "genre"]}, "evidence": "genre of the game refers to genre_name; game ID 119 refers to game.id = 119;"}
{"sample_id": 3317, "db_id": "video_games", "final": {"question": "In which year was Panzer Tactics released on DS?", "sql": "SELECT T4.release_year FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T5.platform_name = 'DS'", "source_tables": ["publisher", "platform", "game_publisher", "game_platform", "game"]}, "evidence": "year refers to release_year; Panzer Tactics refers to game_name = 'Panzer Tactics'; on DS refers to platform_name = 'DS'"}
{"sample_id": 3397, "db_id": "video_games", "final": {"question": "What is the average number of games published by a publisher?", "sql": "SELECT CAST(COUNT(T.game_id) AS REAL) / COUNT(DISTINCT T.publisher_id) FROM game_publisher AS T", "source_tables": ["game_publisher"]}, "evidence": "average number = divide(count(game_id), count(publisher_id))"}
{"sample_id": 3401, "db_id": "video_games", "final": {"question": "List the platforms that release the most games each year.", "sql": "SELECT T1.platform_name FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id GROUP BY T2.release_year, T1.platform_name ORDER BY COUNT(DISTINCT T3.game_id) DESC", "source_tables": ["game_platform", "platform", "game_publisher"]}, "evidence": "platform refers to platform_id; the most games refers to max(count(game_publisher_id))"}
{"sample_id": 3349, "db_id": "video_games", "final": {"question": "What are the names of the publishers who published the oldest games?", "sql": "SELECT DISTINCT T3.publisher_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id ORDER BY T1.release_year LIMIT 1", "source_tables": ["publisher", "game_platform", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; the oldest game refers to min(release_year)"}
{"sample_id": 3341, "db_id": "video_games", "final": {"question": "For all the games which were published by Namco Bandai Games, what percentage of them were adventure games?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Adventure' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = 'Namco Bandai Games'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "published by Namco Bandai Games refers to publisher_name = 'Namco Bandai Games'; adventure game refers to genre_name = 'Adventure'; percentage = divide(sum(game_id where genre_name = 'Adventure'), count(game_id)) * 100% where publisher_name = 'Namco Bandai Games'"}
{"sample_id": 3398, "db_id": "video_games", "final": {"question": "What is the first year a game is released?", "sql": "SELECT MIN(T.release_year) FROM game_platform t", "source_tables": ["game_platform"]}, "evidence": "the first year refers to min(release_year)"}
{"sample_id": 3324, "db_id": "video_games", "final": {"question": "List the genre id of the game Pro Evolution Soccer 2012.", "sql": "SELECT T.genre_id FROM game AS T WHERE T.game_name = 'Pro Evolution Soccer 2012'", "source_tables": ["game"]}, "evidence": "Pro Evolution Soccer 2012 refers to game_name = 'Pro Evolution Soccer 2012'"}
{"sample_id": 3366, "db_id": "video_games", "final": {"question": "How many role-playing games are there?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Role-Playing'", "source_tables": ["game", "genre"]}, "evidence": "role-playing game refers to genre_name = 'Role-Playing'"}
{"sample_id": 3380, "db_id": "video_games", "final": {"question": "List the game IDs that were released in 2017.", "sql": "SELECT T.id FROM game_platform AS T WHERE T.release_year = 2017", "source_tables": ["game_platform"]}, "evidence": "game ID refers to game.id; released in 2017 refers to release_year = 2017"}
{"sample_id": 3482, "db_id": "video_games", "final": {"question": "What are the platform IDs of records released in 2006?", "sql": "SELECT DISTINCT T.platform_id FROM game_platform AS T WHERE T.release_year = 2006", "source_tables": ["game_platform"]}, "evidence": "released in 1990 refers to release_year = 1990; 2000 refers to release_year = 2000;"}
{"sample_id": 3325, "db_id": "video_games", "final": {"question": "State the region id of Japan.", "sql": "SELECT T.id FROM region AS T WHERE T.region_name = 'Japan'", "source_tables": ["region"]}, "evidence": "region id refers to region.id; Japan refers to region_name = 'Japan'"}
{"sample_id": 3326, "db_id": "video_games", "final": {"question": "Show the id of the game platform with the most sales in region 2.", "sql": "SELECT T1.game_platform_id FROM ( SELECT T.game_platform_id, SUM(T.num_sales) FROM region_sales AS T WHERE T.region_id = 2 GROUP BY T.game_platform_id ORDER BY SUM(T.num_sales) DESC LIMIT 1 ) T1", "source_tables": ["region_sales"]}, "evidence": "id of the game platform refers to game_platform_id; the most sales refers to max(num_sales); region 2 refers to region_id = '2'"}
{"sample_id": 3353, "db_id": "video_games", "final": {"question": "List the names of all the publishers who published one game only.", "sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name HAVING COUNT(DISTINCT T1.game_id) = 1 ) t", "source_tables": ["publisher", "game_publisher"]}, "evidence": "name of publisher refers to publisher_name; published one game only refers to count(publisher_id) = 1"}
{"sample_id": 3441, "db_id": "video_games", "final": {"question": "Which game has sold the fewest units?", "sql": "SELECT T.game_name FROM ( SELECT T1.game_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN region_sales AS T4 ON T3.id = T4.game_platform_id ORDER BY T4.num_sales LIMIT 1 ) t", "source_tables": ["game", "region_sales", "game_platform", "game_publisher"]}, "evidence": "which game refers to game_name; sold the fewest units refers to MIN(num_sales);"}
{"sample_id": 3458, "db_id": "video_games", "final": {"question": "In 2010, how many PS3 games were released?", "sql": "SELECT COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T1.platform_name = 'PS3' AND T2.release_year = 2010", "source_tables": ["game_platform", "platform", "game_publisher"]}, "evidence": "in 2010 refers to release_year = 2010; PS3 refers to platform_name = 'PS3';"}
{"sample_id": 3421, "db_id": "video_games", "final": {"question": "What is the genre of the game '2 Games in 1: Sonic Advance & ChuChu Rocket!'?", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!'", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; '2 Games in 1: Sonic Advance & ChuChu Rocket!' is a game name;"}
{"sample_id": 3489, "db_id": "video_games", "final": {"question": "What is the total number of adventure games released in 2005?", "sql": "SELECT COUNT(DISTINCT T3.id) FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Adventure' AND T1.release_year = 2005", "source_tables": ["game", "genre", "game_platform", "game_publisher"]}, "evidence": "adventure games refers to game_name WHERE genre_name = 'Adventure'; released in 2005 refers to release_year = 2005;"}
{"sample_id": 3498, "db_id": "video_games", "final": {"question": "Give the genre of the following game titled 'Airlock' , 'Airline Tycoon' , and 'Airblade', respectively.", "sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name IN ('Airlock', 'Airline Tycoon', 'Airblade')", "source_tables": ["game", "genre"]}, "evidence": "genre refers to genre_name; 'Airlock', 'Airline Tycoon' , and 'Airblade' refers to game_name IN ('Airlock', 'Airline Tycoon', 'Airblade');"}
{"sample_id": 3313, "db_id": "video_games", "final": {"question": "Among the games published by 10TACLE Studios, how many of them are puzzles?", "sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' AND T3.publisher_name = '10TACLE Studios'", "source_tables": ["game", "publisher", "genre", "game_publisher"]}, "evidence": "published by 10TACLE Studios refers to publisher_name = '10TACLE Studios'; puzzle refers to genre_name = 'Puzzle'"}
{"sample_id": 3343, "db_id": "video_games", "final": {"question": "How many games did Electronic Arts publish?", "sql": "SELECT COUNT(DISTINCT T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Electronic Arts'", "source_tables": ["game_publisher", "publisher"]}, "evidence": "Electronic Arts refers to publisher_name = 'Electronic Arts'"}
{"sample_id": 3486, "db_id": "video_games", "final": {"question": "Give the game name of the game ID 44.", "sql": "SELECT T.game_name FROM game AS T WHERE T.id = 44", "source_tables": ["game"]}, "evidence": ""}
{"sample_id": 3362, "db_id": "video_games", "final": {"question": "When was the game titled 3DS Classic Collection released?", "sql": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = '3DS Classic Collection'", "source_tables": ["game", "game_platform", "game_publisher"]}, "evidence": "when refers to release_year; the game titled 3DS Classic Collection refers to game_name = '3DS Classic Collection'"}
{"sample_id": 3340, "db_id": "video_games", "final": {"question": "Show the name of the earliest platform in the database.", "sql": "SELECT T2.platform_name FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id ORDER BY T1.release_year ASC LIMIT 1", "source_tables": ["platform", "game_platform"]}, "evidence": "the earliest refers to min(release_year); name of platform refers to platform_name"}
{"sample_id": 3484, "db_id": "video_games", "final": {"question": "In which year did the record ID 19 with game publisher ID 6657 released?", "sql": "SELECT T.release_year FROM game_platform AS T WHERE T.game_publisher_id = 6657 AND T.id = 19", "source_tables": ["game_platform"]}, "evidence": "which year refers to release_year; record ID 19 refers to game platform.id; id = 19"}
{"sample_id": 3330, "db_id": "video_games", "final": {"question": "State the publisher name of the game \"ModNation Racers\".", "sql": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'ModNation Racers'", "source_tables": ["game", "game_publisher", "publisher"]}, "evidence": "game \"ModNation Racers\" refers to game_name = 'ModNation Racers'"}
{"sample_id": 3339, "db_id": "video_games", "final": {"question": "Give the number of games which were published by Ascaron Entertainment GmbH.", "sql": "SELECT COUNT(T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Ascaron Entertainment GmbH'", "source_tables": ["game_publisher", "publisher"]}, "evidence": "published by Ascaron Entertainment GmbH refers to publisher_name = 'Ascaron Entertainment GmbH'"}
{"sample_id": 3406, "db_id": "video_games", "final": {"question": "List all the platform games.", "sql": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Platform'", "source_tables": ["game", "genre"]}, "evidence": "platform game refers to genre_name = 'Platform'; game refers to game_name"}
{"sample_id": 3585, "db_id": "authors", "final": {"question": "What was the topic of the article \"A Formal Approach to Service Component Architecture\" and when was it published?", "sql": "SELECT Keyword, Year FROM Paper WHERE Title = 'A Formal Approach to Service Component Architecture'", "source_tables": ["paper"]}, "evidence": "article \"A Formal Approach to Service Component Architecture\" refers to Title = 'A Formal Approach to Service Component Architecture'; topic of the article refers to Keyword"}
{"sample_id": 3661, "db_id": "authors", "final": {"question": "How many author published papers in the 'IEEE Computer' journal?", "sql": "SELECT COUNT(T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T3.FullName = 'IEEE Computer'", "source_tables": ["journal", "paper", "paperauthor"]}, "evidence": "IEEE Computer refer to FullName; How many author published papers refer to COUNT(PaperAuthor.Name) where FullName = \u2019IEEE Computer\u2019"}
{"sample_id": 3540, "db_id": "authors", "final": {"question": "Within the year of 2001 to 2010, find the paper published rate of 2001.", "sql": "SELECT CAST(SUM(CASE WHEN Year = 2001 THEN 1 ELSE 0 END) AS REAL) / COUNT(Id) FROM Paper WHERE Year >= 2001 AND Year < 2011", "source_tables": ["paper"]}, "evidence": "year of 2001 to 2010 refers to Year BETWEEN 2001 AND 2010; Percentage = Divide(Count (PaperId(Year = 2001)), Count (PaperID(Year BETWEEN 2001 AND 2010))) * 100"}
{"sample_id": 3679, "db_id": "authors", "final": {"question": "Sate the author name and published year for paper id 2?", "sql": "SELECT T1.Name, T3.Year FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id WHERE T2.PaperId = 2", "source_tables": ["paper", "author", "paperauthor"]}, "evidence": "published year refers to year"}
{"sample_id": 3648, "db_id": "authors", "final": {"question": "Who are the authors of the paper \"Determination of Planetary Meteorology from Aerobot Flight Sensors\"?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Determination of Planetary Meteorology FROM Aerobot Flight Sensors'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Determination of Planetary Meteorology from Aerobot Flight Sensors' refer to title of the paper"}
{"sample_id": 3639, "db_id": "authors", "final": {"question": "How many authors are affiliated with NASA Langley Research Center?", "sql": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'NASA Langley Research Center'", "source_tables": ["author"]}, "evidence": "NASA Langley Research Center is the Affiliation"}
{"sample_id": 3644, "db_id": "authors", "final": {"question": "List all of the papers written by the author \"Karin Rengefors.\"", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Karin Rengefors'", "source_tables": ["paper", "paperauthor"]}, "evidence": "all the papers refers to Title; Karin Rengefors is the Name of the author"}
{"sample_id": 3565, "db_id": "authors", "final": {"question": "Who are the co-authors for Jei Keon Chae and what is the title of paper written by them?", "sql": "SELECT T2.AuthorId, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Jei Keon Chae'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Jei Keon Chee' is the name of author;"}
{"sample_id": 3606, "db_id": "authors", "final": {"question": "Write the titles of papers published by Adam Jones and the journal name in which it was published from 2005 to 2010.", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T2.Name = 'Adam Jones' AND T1.Year BETWEEN 2005 AND 2010", "source_tables": ["journal", "paper", "paperauthor"]}, "evidence": "published from 2005 to 2010 refers to Year BETWEEN 2005 AND 2010; published by Adam Jones refers to Name = 'Adam Jones'"}
{"sample_id": 3551, "db_id": "authors", "final": {"question": "List the paper title and journal ID which were published under the conference name of \"International Symposium of Robotics Research\".", "sql": "SELECT DISTINCT T2.Title, T2.JournalId FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'International Symposium of Robotics Research' AND T2.Year = 2003", "source_tables": ["conference", "paper"]}, "evidence": "\"International Symposium of Robotics Research\" is the FullName of conference;"}
{"sample_id": 3659, "db_id": "authors", "final": {"question": "State the title of papers published in the Ibm Journal of Research and Development.", "sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Ibm Journal of Research and Development'", "source_tables": ["paper", "journal"]}, "evidence": "Ibm Journal of Research and Development refer to FullName\n\n'Ibm Journal of Research and Development' is the full name of paper"}
{"sample_id": 3586, "db_id": "authors", "final": {"question": "What percentage of papers were preprinted after the year 2000?", "sql": "SELECT CAST(SUM(CASE WHEN Year > 2000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Id) FROM Paper", "source_tables": ["paper"]}, "evidence": "after the year 2000 refers to Year > 2000; preprinted refers to ConferenceId = 0 AND JournalId = 0; percentage refers to DIVIDE(COUNT(ConferenceId = 0 AND JournalId = 0 AND Year > 2000), COUNT(Id))"}
{"sample_id": 3513, "db_id": "authors", "final": {"question": "Among the papers published in the journal \"Molecular Brain\", how many of them were published in the year 2011?", "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2011 AND T1.FullName = 'Molecular Brain'", "source_tables": ["paper", "journal"]}, "evidence": "\"Molecular Brain\" is the FullName of journal"}
{"sample_id": 3558, "db_id": "authors", "final": {"question": "What is the homepage address for paper \"Energy-efficiency bounds for noise-tolerant dynamic circuits\"?", "sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Energy-efficiency bounds for noise-tolerant dynamic circuits'", "source_tables": ["conference", "paper"]}, "evidence": "\"Energy-efficiency bounds for noise-tolerant dynamic circuits\" is the Title of paper"}
{"sample_id": 3569, "db_id": "authors", "final": {"question": "List the short name of all conferences whose full name begins with International Symposium.", "sql": "SELECT ShortName FROM Conference WHERE FullName LIKE 'International Symposium%'", "source_tables": ["conference"]}, "evidence": "full name refers to FullName LIKE 'International Symposium%'"}
{"sample_id": 3525, "db_id": "authors", "final": {"question": "Enumerate the paper and author ID of authors with affiliation with Cairo Microsoft Innovation Lab.", "sql": "SELECT PaperId, AuthorId FROM PaperAuthor WHERE Affiliation LIKE 'Cairo Microsoft Innovation Lab%'", "source_tables": ["paperauthor"]}, "evidence": "\"Cairo Microsoft Innovation Lab\" is the Affiliation organization"}
{"sample_id": 3613, "db_id": "authors", "final": {"question": "Who authored the paper titled \"Testing timed automata\n\"?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Testing timed automata'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Testing timed automata' is a title of a paper; Who authored refers to PaperAuthor.Name"}
{"sample_id": 3536, "db_id": "authors", "final": {"question": "What are the paper IDs of papers presented in conferences has a homepage starts with \"http://www.informatik.uni-trier.de/~ley/db/conf/\"?", "sql": "SELECT T1.Id FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%'", "source_tables": ["conference", "paper"]}, "evidence": "homepage starts with \"http://www.informatik.uni-trier.de/~ley/db/conf/\" refers to HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%'"}
{"sample_id": 3595, "db_id": "authors", "final": {"question": "Please list all of the associations that the authors of the paper \"FIBER: A Generalized Framework for Auto-tuning Software\" are affiliated with.", "sql": "SELECT DISTINCT T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper \"FIBER: A Generalized Framework for Auto-tuning Software\" refers to Title = 'FIBER: A Generalized Framework for Auto-tuning Software'; are affiliated with refers to Affiliation"}
{"sample_id": 3627, "db_id": "authors", "final": {"question": "For the paper which was presented by \"Zvezdan Proti\u0107\", was it preprinted?", "sql": "SELECT CASE WHEN T1.Year = 0 THEN 'TRUE' ELSE 'FALSE' END FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Zvezdan Proti\u0107' AND T1.ConferenceId = 0 AND T1.JournalId = 0", "source_tables": ["paper", "paperauthor"]}, "evidence": "Year = 0 means this paper is preprint, or not published"}
{"sample_id": 3643, "db_id": "authors", "final": {"question": "Which paper published by the \"TUBERCLE LUNG DIS\" journal is the oldest?", "sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = 'TUBERCLE LUNG DIS' ORDER BY T2.Year ASC LIMIT 1", "source_tables": ["paper", "journal"]}, "evidence": "paper refers to Title; TUBERCLE LUNG DIS is the ShortName of journal; the oldest refers to MIN(Year)"}
{"sample_id": 3633, "db_id": "authors", "final": {"question": "How many papers were presented at 'ECSQARU' in 2003?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.ShortName = 'ECSQARU' AND T1.Year = '2003'", "source_tables": ["conference", "paper"]}, "evidence": "Papers refers to Paper.Id; ECSQARU is the ShortName of the conference; 2003 refers to Year = '2003'"}
{"sample_id": 3665, "db_id": "authors", "final": {"question": "Indicate the year and a full name of the journal in which the publication named 'Area Effects in Cepaea' was published.", "sql": "SELECT T1.Year, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'Area Effects in Cepaea'", "source_tables": ["paper", "journal"]}, "evidence": "'Area Effects in Cepaea' is the title of paper"}
{"sample_id": 3610, "db_id": "authors", "final": {"question": "How many papers are published under the conference \"Mathematics of Program Construction\n\"?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'Mathematics of Program Construction'", "source_tables": ["conference", "paper"]}, "evidence": "'Mathematics of Program Construction' is the FullName of conference"}
{"sample_id": 3670, "db_id": "authors", "final": {"question": "How many publications were published in relation to the conference 'Adaptive Multimedia Retrieval' in 2007?", "sql": "SELECT COUNT(T2.ConferenceId) FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Adaptive Multimedia Retrieval' AND T2.Year = 2007", "source_tables": ["conference", "paper"]}, "evidence": "'Adaptive Multimedia Retrieval is the FullName of paper; in 2007 refer to Year = 2007"}
{"sample_id": 3619, "db_id": "authors", "final": {"question": "List all the paper that were under the conference homepage URL \"http://www.irma-international.org/\".", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.HomePage = 'http://www.irma-international.org/'", "source_tables": ["conference", "paper"]}, "evidence": "paper refers to Paper.Title; http://www.irma-international.org/ is the HomePage"}
{"sample_id": 3534, "db_id": "authors", "final": {"question": "Among the papers with conference ID of 0, list down the authors of papers with a journal ID less than 100.", "sql": "SELECT DISTINCT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId = 0 AND T1.JournalId < 100", "source_tables": ["paper", "paperauthor"]}, "evidence": "Conference ID of 0 refers to ConferenceId = 0; journal ID of less than 100 refers to JournalId < 100"}
{"sample_id": 3601, "db_id": "authors", "final": {"question": "List the title and author's name of papers published in the 2007 Neoplasia journal.", "sql": "SELECT T1.Title, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T3.FullName = 'Neoplasia' AND T1.Year = 2007", "source_tables": ["journal", "paper", "paperauthor"]}, "evidence": "published in the 2007 refers to Year = 2007; Neoplasia journal refers to FullName = 'Neoplasia'"}
{"sample_id": 3669, "db_id": "authors", "final": {"question": "Provide the title of the latest publication published by it's author 'Zuliang Du'.", "sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Zuliang Du' ORDER BY T2.Year DESC LIMIT 1", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Zuliang Du' is the name of paper author; latest publication refers to MAX(Year)"}
{"sample_id": 3614, "db_id": "authors", "final": {"question": "How many papers are published in year 2000 under the conference \"SSPR\"?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = 2000 AND T2.ShortName = 'SSPR'", "source_tables": ["conference", "paper"]}, "evidence": "SSPR is a ShortName; papers refers to Paper.Id"}
{"sample_id": 3681, "db_id": "authors", "final": {"question": "What is the full name of the conference in which the paper \"2004 YD5\" was published?", "sql": "SELECT T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T2.Title = '2004 YD5'", "source_tables": ["conference", "paper"]}, "evidence": "'2004 YD5' is the title of paper"}
{"sample_id": 3636, "db_id": "authors", "final": {"question": "What is the percentage of preprints of John Van Reenen's papers?", "sql": "SELECT CAST(SUM(CASE WHEN T1.ConferenceId = 0 AND T1.JournalId = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'John Van Reenen'", "source_tables": ["paper", "paperauthor"]}, "evidence": "year = 0 means this paper is preprint; John Van Reenen is the author's name; papers refers to paper.Id; calculation = DIVIDE(SUM(paper.Id where Name = 'John Van Reenen' AND ConferenceID = 0 AND\u00a0 JournalId = 0), SUM(paper.Id where Name = 'John Van Reenen'))"}
{"sample_id": 3562, "db_id": "authors", "final": {"question": "List down all paper name that were published in conference \"International Conference on Internet Computing\".", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Conference on Internet Computing' AND T1.Title <> ''", "source_tables": ["conference", "paper"]}, "evidence": "conference \"International Conference on Internet Computing\" refers to FullName = 'International Conference on Internet Computing'; paper name refers to Title"}
{"sample_id": 3612, "db_id": "authors", "final": {"question": "List all the title of the paper that Jianli Hua published.", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Jianli Hua'", "source_tables": ["paper", "paperauthor"]}, "evidence": "Jianli Hua is the author of a paper"}
{"sample_id": 3581, "db_id": "authors", "final": {"question": "What is the name of the authors of papers in which conferences have been published whose full name includes the word Workshop?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T3.FullName LIKE '%Workshop%'", "source_tables": ["conference", "paper", "paperauthor"]}, "evidence": "full name includes the word Workshop refers to FullName LIKE '%Workshop%'"}
{"sample_id": 3560, "db_id": "authors", "final": {"question": "Among the papers published in 2009, pick 10 and list down the conference's short name of these papers.", "sql": "SELECT T2.PaperId, T4.ShortName FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id INNER JOIN Conference AS T4 ON T3.ConferenceId = T4.Id WHERE T3.Year = 2009 LIMIT 10", "source_tables": ["conference", "paper", "author", "paperauthor"]}, "evidence": "published in 2009 refers to Year = 2009"}
{"sample_id": 3596, "db_id": "authors", "final": {"question": "Please provide the titles of any two papers that are either preprinted or unpublished along with the full name of the journal to which those papers belong.", "sql": "SELECT T1.Title, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year < 1 LIMIT 2", "source_tables": ["paper", "journal"]}, "evidence": "papers that are either preprinted or unpublished along refers to Year = 0"}
{"sample_id": 3546, "db_id": "authors", "final": {"question": "Find the paper ID, title, published year and journal's full name of the paper which included the most number in author.", "sql": "SELECT T1.Id, T1.Title, T1.Year, T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id GROUP BY T2.AuthorId ORDER BY COUNT(T2.AuthorId) DESC LIMIT 1", "source_tables": ["journal", "paper", "paperauthor"]}, "evidence": "most number in author refers to Max (Count(PaperId))"}
{"sample_id": 3556, "db_id": "authors", "final": {"question": "How many of the papers are preprinted or not published?", "sql": "SELECT COUNT(Id) FROM Paper WHERE Year = 0", "source_tables": ["paper"]}, "evidence": "preprinted or not published refers to Year = 0"}
{"sample_id": 3618, "db_id": "authors", "final": {"question": "How many papers are published under the journal \"Software - Practice and Experience\"?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Software - Practice and Experience'", "source_tables": ["paper", "journal"]}, "evidence": "papers refers to Paper.Id; 'Software - Practice and Experience' is the FullName of a journal;"}
{"sample_id": 3611, "db_id": "authors", "final": {"question": "Who is the author of the paper titled \"Open Sourcing Social Solutions (Building Communities of Change)\"?", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Open Sourcing Social Solutions (Building Communities of Change)'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Open Sourcing Social Solutions (Building Communities of Change)' is a title of the paper; author refers to PaperAuthor.Name"}
{"sample_id": 3557, "db_id": "authors", "final": {"question": "State the full name of conference for paper \"The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure\".", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure'", "source_tables": ["conference", "paper"]}, "evidence": "\"The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure\" is the Title of paper"}
{"sample_id": 3657, "db_id": "authors", "final": {"question": "List the name of the author that affiliated with University of Illinois Chicago?", "sql": "SELECT Name FROM Author WHERE Affiliation = 'University of Illinois Chicago'", "source_tables": ["author"]}, "evidence": "'University of Illinois Chicago' is an affiliation"}
{"sample_id": 3547, "db_id": "authors", "final": {"question": "Describe the paper title, published year, conference's short name and included author names in the paper ID of 15.", "sql": "SELECT DISTINCT T1.Title, T1.Year, T3.ShortName, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T1.Id = 15", "source_tables": ["conference", "paper", "paperauthor"]}, "evidence": "paper ID of 15 refers to PaperId = 15"}
{"sample_id": 3509, "db_id": "authors", "final": {"question": "What is the paper \"Stitching videos streamed by mobile phones in real-time\" about?", "sql": "SELECT Keyword FROM Paper WHERE Title = 'Stitching videos streamed by mobile phones in real-time'", "source_tables": ["paper"]}, "evidence": "\"Stitching videos streamed by mobile phones in real-time\" is the Title of paper; what the paper is about refers to Keywords"}
{"sample_id": 3523, "db_id": "authors", "final": {"question": "How many more papers in total were published in the journal \"Cases Journal\" than in the journal \"Molecular Brain\" in percentage?", "sql": "SELECT SUM(CASE WHEN T1.FullName = 'Cases Journal' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.FullName = 'Molecular Brain' THEN 1 ELSE 0 END) AS DIFF FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId", "source_tables": ["paper", "journal"]}, "evidence": "\"Cases Journal\" and \"Molecular Brain\" are FullName of journal; more paper in percentage = Subtract(Count(Id(FullName = 'Cases Journal')), Count(Id(FullName = 'Molecular Brain')))/ Count(Id(FullNmae = 'Molecular Brain')) * 100"}
{"sample_id": 3628, "db_id": "authors", "final": {"question": "At which conference was the paper \"Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes\" presented?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes'", "source_tables": ["conference", "paper"]}, "evidence": "'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes' is the Title of the paper; conference refers to Conference.FullName"}
{"sample_id": 3675, "db_id": "authors", "final": {"question": "List out the full name and URL link of ICCI?", "sql": "SELECT FullName, HomePage FROM Conference WHERE ShortName = 'ICCI'", "source_tables": ["conference"]}, "evidence": "'ICCI' is the ShortName of conference; URL refer to HomePage"}
{"sample_id": 3677, "db_id": "authors", "final": {"question": "How many papers were written by authors who cooperated with University of Hong Kong?", "sql": "SELECT COUNT(T2.PaperId) FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId WHERE T1.Affiliation = 'University of Hong Kong'", "source_tables": ["author", "paperauthor"]}, "evidence": "University of Hong Kong' is an affiliation"}
{"sample_id": 3591, "db_id": "authors", "final": {"question": "Please list the titles of any two papers that Jundu has written.", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name LIKE 'Jun du%' LIMIT 2", "source_tables": ["paper", "paperauthor"]}, "evidence": "papers that Jundu has written refers to Name LIKE '%Jun du%'"}
{"sample_id": 3539, "db_id": "authors", "final": {"question": "In papers with journal IDs from 200 to 300 and with its short name starts with A, what is the percentage of papers with conference ID of 0?", "sql": "SELECT CAST(SUM(CASE WHEN T1.ConferenceId = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ConferenceId) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.JournalId BETWEEN 200 AND 300 AND T2.ShortName LIKE 'A%'", "source_tables": ["paper", "journal"]}, "evidence": "journal ID of 200 to 300 refers to JournalId BETWEEN 200 AND 300; short name starts with A refers to ShortName LIKE 'A%'; Percentage = Divide (Count(ConferenceId = 0), Count(ConferenceId)) * 100"}
{"sample_id": 3552, "db_id": "authors", "final": {"question": "Name the title, year and keyword of the paper which were written by the author ID of 661002 with the affiliation of \"Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA\" organization.", "sql": "SELECT T2.Title, T2.Year, T2.Keyword FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.AuthorId = 661002 AND T1.Affiliation = 'Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"661002\" is the AuthorId;\u00a0 \"Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA\" is the Affiliation organization"}
{"sample_id": 3584, "db_id": "authors", "final": {"question": "How many authors were associated with the Microsoft Research when paper number 1 was written?", "sql": "SELECT COUNT(PaperId) FROM PaperAuthor WHERE Affiliation LIKE '%Microsoft Research%'", "source_tables": ["paperauthor"]}, "evidence": "associated with the Microsoft Research refers to Affiliation contains 'Microsoft Research'; paper number 1 refers to PaperId = 1"}
{"sample_id": 3575, "db_id": "authors", "final": {"question": "Identify by publication year in the paper database all journals that don't have short name.", "sql": "SELECT DISTINCT T2.Year, FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = ''", "source_tables": ["paper", "journal"]}, "evidence": "don't have short name refers to ShortName is NULL OR ShortName = ''"}
{"sample_id": 3510, "db_id": "authors", "final": {"question": "Please list the titles of the papers published in the journal \"Concepts in Magnetic Resonance Part A\" in 2008.", "sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Concepts in Magnetic Resonance Part A' AND T2.Year = 2008", "source_tables": ["paper", "journal"]}, "evidence": "journal \"Concepts in Magnetic Resonance Part A\" refers to FullName = 'Concepts in Magnetic Resonance Part A'; in 2018 refers to Year = 2018"}
{"sample_id": 3676, "db_id": "authors", "final": {"question": "Mention the titile of paper writen by Joe Lograsso.", "sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Joe Lograsso'", "source_tables": ["paper", "paperauthor"]}, "evidence": "'Joe Lograsso' is name of paper author"}
{"sample_id": 3650, "db_id": "authors", "final": {"question": "Which year did the \"Internet, Multimedia Systems and Applications\" conference publish the most papers?", "sql": "SELECT T2.Year FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Internet, Multimedia Systems and Applications' GROUP BY T2.Year ORDER BY COUNT(T2.Id) DESC LIMIT 1", "source_tables": ["conference", "paper"]}, "evidence": "'Internet, Multimedia Systems and Applications' is the FullName of paper; published the most papers refers to MAX(COUNT(year))"}
{"sample_id": 3668, "db_id": "authors", "final": {"question": "Provide the number of publications published in the journal named 'Academic Medicine' between 2005 and 2010.", "sql": "SELECT COUNT(T2.JournalId) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Academic Medicine' AND T2.Year BETWEEN 2005 AND 2010", "source_tables": ["paper", "journal"]}, "evidence": "'Academic Medicine' is the FullName of journal; between 2005 and 2010 refer to Year 2005 BETWEEN 2010"}
{"sample_id": 3630, "db_id": "authors", "final": {"question": "Gives the home page of the conference where the paper \"Increasing the Concurrency in Estelle\" is presented.", "sql": "SELECT DISTINCT T2.HomePage FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Increasing the Concurrency in Estelle'", "source_tables": ["conference", "paper"]}, "evidence": "'Increasing the Concurrency in Estelle' is the Title of the paper; home page of the conference refers to HomePage;"}
{"sample_id": 3664, "db_id": "authors", "final": {"question": "Calculate the average of authors for each paper from the year of 1990 to 2000.", "sql": "SELECT CAST(COUNT(DISTINCT T2.AuthorId) AS REAL) / COUNT(DISTINCT T1.Title) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year BETWEEN 1990 AND 2000", "source_tables": ["paper", "paperauthor"]}, "evidence": "Average refer to DIVIDE(COUNT(AuthorID where Year = 1990 BETWEEN 2000), COUNT(Title where Year = 1990 BETWEEN 2000))"}
{"sample_id": 3594, "db_id": "authors", "final": {"question": "What are the three journals that the papers written by Andrew Cain were published in? Please provide your answer with the full name of each journal.", "sql": "SELECT T3.FullName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T2.Name = 'Andrew Cain'", "source_tables": ["journal", "paper", "paperauthor"]}, "evidence": "written by Andrew Cain refers to Name = 'Andrew Cain'"}
{"sample_id": 3645, "db_id": "authors", "final": {"question": "How many papers were published by the \"Virtual Reality, IEEE Annual International Symposium\" conference in 2012?", "sql": "SELECT COUNT(T2.Id) FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T1.FullName = 'Virtual Reality, IEEE Annual International Symposium' AND T2.Year = 2012", "source_tables": ["conference", "paper"]}, "evidence": "'Virtual Reality, IEEE Annual International Symposium' is the FullName of conference; in 2012 refers to Year = 2012;"}
{"sample_id": 3521, "db_id": "authors", "final": {"question": "How many papers whose authors include Thomas Wiegand were published in 1995?", "sql": "SELECT COUNT(T2.Title) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Thomas Wiegand' AND T2.Year = 1995", "source_tables": ["paper", "paperauthor"]}, "evidence": "published in 1995 refers to Year = 1995; 'Thomas Wiegand' is the name of author"}
{"sample_id": 3660, "db_id": "authors", "final": {"question": "State the name and affiliation of author for the 'Education, democracy and growth' paper?", "sql": "SELECT T2.Name, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Education, democracy and growth'", "source_tables": ["paper", "paperauthor"]}, "evidence": "Education, democracy and growth' refer to title of paper\n"}
{"sample_id": 3541, "db_id": "authors", "final": {"question": "Write down the conference full name of \"ICWE\" and it's homepage address.", "sql": "SELECT FullName, Homepage FROM Conference WHERE ShortName = 'ICWE'", "source_tables": ["conference"]}, "evidence": "\"ICWE\" is the ShortName of conference"}
{"sample_id": 3516, "db_id": "authors", "final": {"question": "Please list the names of the authors of the paper \"Area Effects in Cepaea\".", "sql": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Area Effects in Cepaea'", "source_tables": ["paper", "paperauthor"]}, "evidence": "\"Area Effects in Cepaea\" is the title of paper"}
{"sample_id": 3530, "db_id": "authors", "final": {"question": "In year 1999, list the titles and conference's short name of paper authored by someone named \"Philip\".", "sql": "SELECT T1.Title, T3.ShortName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Conference AS T3 ON T1.ConferenceId = T3.Id WHERE T1.Year = 1999 AND T2.Name LIKE 'Philip%'", "source_tables": ["conference", "paper", "paperauthor"]}, "evidence": "in year 1999 refers to Year = 1999;\u00a0 someone named \"Philip\" refers to Name LIKE 'Philip%'"}
{"sample_id": 3631, "db_id": "authors", "final": {"question": "How many authors finished the paper \"An Improved Active Suspension Model for Attitude Control of Electric Vehicles\" together?", "sql": "SELECT COUNT(T2.AuthorId) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles'", "source_tables": ["paper", "paperauthor"]}, "evidence": "authors refers to AuthorId; 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles' is the Title of a paper; A paper can have more than one author. Co-authorship can be derived from (paper ID, author ID) pair."}
{"sample_id": 3607, "db_id": "authors", "final": {"question": "How many authors is affiliated to the organization \"Otterbein University\"?", "sql": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'Otterbein University'", "source_tables": ["author"]}, "evidence": "Otterbein University is an Affiliation"}
{"sample_id": 3663, "db_id": "authors", "final": {"question": "How many papers were published in International Workshop on Inductive Logic Programming from 2001 to 2009?", "sql": "SELECT COUNT(T1.Id) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T2.FullName = 'International Workshop on Inductive Logic Programming' AND T1.Year BETWEEN 2001 AND 2009", "source_tables": ["conference", "paper"]}, "evidence": "From 2001 to 2009 refer to Year 2001 BETWEEN 2009; 'International Workshop on Inductive Logic Programming' refer to Conference.FullName\n"}
{"sample_id": 3590, "db_id": "authors", "final": {"question": "What is the full name of the conference where paper number 5 was published?", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Id = 5", "source_tables": ["conference", "paper"]}, "evidence": "paper number 5 refers to Id = 5"}
{"sample_id": 3649, "db_id": "authors", "final": {"question": "List all the titles and their publishing journals from the 60's.", "sql": "SELECT T1.Title, T1.JournalId FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year >= 1960 AND T1.Year <= 1970", "source_tables": ["paper", "journal"]}, "evidence": "from the 60\u2019s refer to Year 1960 BETWEEN 1970\n\n"}
{"sample_id": 3641, "db_id": "authors", "final": {"question": "How many of the papers are preprinted?", "sql": "SELECT COUNT(Id) FROM Paper WHERE ConferenceId = 0 AND JournalId = 0", "source_tables": ["paper"]}, "evidence": "year = 0 means this paper is preprint; papers refers to Paper.Id"}
{"sample_id": 3567, "db_id": "authors", "final": {"question": "How many papers were preprinted between the years 1990 and 2000?", "sql": "SELECT COUNT(id) FROM Paper WHERE Year BETWEEN '1990' AND '2000' AND ConferenceId = 0 AND JournalId = 0", "source_tables": ["paper"]}, "evidence": "years 1990 and 2000 refers to Year BETWEEN '1990' AND '2000'; papers refers to COUNT(id)"}
{"sample_id": 3662, "db_id": "authors", "final": {"question": "Where was the 'A context-based navigation paradigm for accessing Web data' paper published? State the name of the conference.", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'A context-based navigation paradigm for accessing Web data'", "source_tables": ["conference", "paper"]}, "evidence": "A context-based navigation paradigm for accessing Web data' is the title of paper; name of conference refer to FullName\n"}
{"sample_id": 3597, "db_id": "authors", "final": {"question": "What is the journal's short and full names that feature papers on the \"Materials\" topic?", "sql": "SELECT T2.ShortName, T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Keyword LIKE '%Materials%'", "source_tables": ["paper", "journal"]}, "evidence": "papers on the \"Materials\" topic refers to Keyword = 'Materials'"}
{"sample_id": 3626, "db_id": "authors", "final": {"question": "What are the keywords for the paper which was published on \"Modeling Identification and Control\" in 1994?", "sql": "SELECT T2.Keyword FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Modeling Identification and Control' AND T2.Year = 1994", "source_tables": ["paper", "journal"]}, "evidence": "'Modeling Identification and Control' is the FullName of the journal; 1994 refers to Year = '1994'; if the year is \"0\", it means this paper is preprint, or not published"}
{"sample_id": 3637, "db_id": "authors", "final": {"question": "What is the oldest published book?", "sql": "SELECT Title FROM Paper WHERE Year > 0 ORDER BY Year ASC LIMIT 1", "source_tables": ["paper"]}, "evidence": "published book refers to Title; the oldest book refers to MIN(Year)"}
{"sample_id": 3522, "db_id": "authors", "final": {"question": "What is the average number of papers published in the journal \"Molecular Brain\" every year from 2008 to 2011?", "sql": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T2.Year) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Molecular Brain' AND T2.Year BETWEEN 2008 AND 2011", "source_tables": ["paper", "journal"]}, "evidence": "\"Molecular Brain\" is the FullName of journal; year from 2008 to 2011 refers to Year BETWEEN 2008 AND 2011; average = Divide (Count(Id),4)"}
{"sample_id": 3508, "db_id": "authors", "final": {"question": "How many authors are affiliated with University of California Berkeley?", "sql": "SELECT COUNT(Id) FROM Author WHERE Affiliation = 'University of California Berkeley'", "source_tables": ["author"]}, "evidence": "affiliated refers to Affiliation; 'University of California Berkeley' is the Affiliation"}
{"sample_id": 3544, "db_id": "authors", "final": {"question": "Write down the author's name and IDs who are affiliated with Univeristiy of Oulu.", "sql": "SELECT Name, id FROM Author WHERE Affiliation = 'University of Oulu'", "source_tables": ["author"]}, "evidence": "\"University of Oulu\" is the Affiliation Organization"}
{"sample_id": 3532, "db_id": "authors", "final": {"question": "What is the title of the paper published in 2003 by an author with affiliation with Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications?", "sql": "SELECT DISTINCT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications' AND T2.Year = 2003", "source_tables": ["paper", "paperauthor"]}, "evidence": "published in 2003 refers to Year = 2003; 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications' is the Affiliation organization"}
{"sample_id": 3543, "db_id": "authors", "final": {"question": "What is the ratio of author with affiliation and without affiliation?", "sql": "SELECT CAST(SUM(CASE WHEN Affiliation IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM Author", "source_tables": ["author"]}, "evidence": "with affiliation refers to Affiliation is not Null; without affiliation refers to Affiliation IS NULL; Ration = Count(Id(Affiliation is NOT NULL)) : Count (Id (Affiliation IS NULL))"}
{"sample_id": 3572, "db_id": "authors", "final": {"question": "List author affiliation for papers whose topic is Quantum Physics.", "sql": "SELECT T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Keyword = 'Quantum Physics'", "source_tables": ["paper", "paperauthor"]}, "evidence": "topic is Quantum Physics refers to Keyword = 'Quantum Physics'"}
{"sample_id": 3653, "db_id": "authors", "final": {"question": "What is the homepage URL for the journal that published the most papers?", "sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id GROUP BY T1.JournalId ORDER BY COUNT(T1.JournalId) DESC LIMIT 1", "source_tables": ["paper", "journal"]}, "evidence": "published the most papers refer to MAX(JournalId); homepage URL refers to HomePage"}
{"sample_id": 3514, "db_id": "authors", "final": {"question": "How many papers were published in 2011 in the journal whose short name is \"Mol Brain\"?", "sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2011 AND T1.ShortName = 'Mol Brain'", "source_tables": ["paper", "journal"]}, "evidence": "in 2011 refers to Year = 2011; 'Mol Brain' is the ShortName of journal"}
{"sample_id": 3602, "db_id": "authors", "final": {"question": "Among the authors affiliated with Soongsil University, list the authors' names and papers published during the year 2000.", "sql": "SELECT T2.Title, T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Affiliation = 'Soongsil University' AND T2.Year = 2000", "source_tables": ["paper", "paperauthor"]}, "evidence": "authors affiliated with Soongsil University refers to Affiliation = 'Soongsil University'"}
{"sample_id": 3578, "db_id": "authors", "final": {"question": "What is the name of the co-authors of the paper titled 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'?", "sql": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper titled 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker' refers to Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker'"}
{"sample_id": 3533, "db_id": "authors", "final": {"question": "List the authors and journal short name of the papers with \"chemiluminescence\" in its title and has a journal ID from 245 to 250.", "sql": "SELECT T2.Name, T3.ShortName FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.JournalId BETWEEN 245 AND 250 AND T1.Title LIKE '%chemiluminescence%'", "source_tables": ["journal", "paper", "paperauthor"]}, "evidence": "with \"chemiluminescence\" in its title refers to Title LIKE 'chemiluminescence%'; journal ID from 245 to 250 refers to JournalId BETWEEN 245 AND 250"}
{"sample_id": 3680, "db_id": "authors", "final": {"question": "Mention the name of author for paper id 5 and state the keyword of this page.", "sql": "SELECT T1.Name, T3.Keyword FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id WHERE T2.PaperId = 5", "source_tables": ["paper", "author", "paperauthor"]}, "evidence": ""}
{"sample_id": 3632, "db_id": "authors", "final": {"question": "In the year 2012, which conference had the most papers presented? Give the short name of the conference.", "sql": "SELECT T2.ShortName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = '2012' GROUP BY T1.ConferenceId ORDER BY COUNT(T1.Id) DESC LIMIT 1", "source_tables": ["conference", "paper"]}, "evidence": "Papers refers to Paper.Id; short name of the conference refers to Conference.ShortName"}
{"sample_id": 3635, "db_id": "authors", "final": {"question": "How many times more for the papers that were presented at the \"International Conference on Thermoelectrics\" conference than \"International Conference on Wireless Networks, Communications and Mobile Computing\u201c conference?", "sql": "SELECT CAST(SUM(CASE WHEN T2.FullName = 'International Conference on Thermoelectrics' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id", "source_tables": ["conference", "paper"]}, "evidence": "'International Conference on Thermoelectrics' AND 'International Conference on Wireless Networks, Communications and Mobile Computing' are the FullName of the conference; Papers refers to Paper.Id; Calculation = SUBTRACT(SUM(Paper.Id where FullName = 'International Conference on Thermoelectrics'), SUM(Paper.Id where FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing'))"}
{"sample_id": 3674, "db_id": "authors", "final": {"question": "Indicate the number of authors affiliated with the organization named 'Arizona State University'.", "sql": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'Arizona State University'", "source_tables": ["author"]}, "evidence": "'Arizona State University' is an affiliation"}
{"sample_id": 3564, "db_id": "authors", "final": {"question": "How many authors have written paper \"145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: \"?", "sql": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = '145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: '", "source_tables": ["paper", "paperauthor"]}, "evidence": "paper \"145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT: \" refers to Title like'%145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:%'"}
{"sample_id": 3537, "db_id": "authors", "final": {"question": "What are the journal homepages and author ID of the papers published in 2000 to 2005 with a word \"social\" in its title?", "sql": "SELECT T3.HomePage, T2.AuthorId FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId INNER JOIN Journal AS T3 ON T1.JournalId = T3.Id WHERE T1.Year BETWEEN 2000 AND 2005 AND T1.Title LIKE '%SOCIAL%'", "source_tables": ["journal", "paper", "paperauthor"]}, "evidence": "in 2000 to 2005 refers to Year BETWEEN 2000 AND 2005; a word \"social\" in its title refers to Title = '%SOCIAL%'"}
{"sample_id": 3563, "db_id": "authors", "final": {"question": "Among papers that were published in 2005, provide the author name of paper with key words of \"LOAD; IDE; SNP; haplotype; asso- ciation studies\".", "sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 2005 AND T1.Keyword = 'KEY WORDS: LOAD IDE SNP haplotype asso- ciation studies'", "source_tables": ["paper", "paperauthor"]}, "evidence": "in 2005 refers to Year = '2005'; key words of \"LOAD; IDE; SNP; haplotype; asso- ciation studies\" refers to Keyword = 'LOAD; IDE; SNP; haplotype; asso- ciation studies'"}
{"sample_id": 3542, "db_id": "authors", "final": {"question": "Between \"Standford University\" and \"Massachusetts Institute of Technolgy\", which organization had affiliated with more author.?", "sql": "SELECT Affiliation FROM Author WHERE Affiliation IN ('Stanford University', 'Massachusetts Institute of Technology') GROUP BY Affiliation ORDER BY COUNT(Id) DESC LIMIT 1", "source_tables": ["author"]}, "evidence": "\"Standford University\" and \"Massachusetts Institute of Technolgy\" are affiliation organization; affiliated with more author refers to Max(Count(Id))"}
{"sample_id": 3531, "db_id": "authors", "final": {"question": "What is the total number and conference's homepage of papers held in a conference with an ID of 187 during 1990 to 2000?", "sql": "SELECT COUNT(T2.ConferenceId), T1.HomePage FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T2.Year BETWEEN 1990 AND 2000 AND T2.ConferenceId = 187", "source_tables": ["conference", "paper"]}, "evidence": "Id of 187 refers to ConferenceId = 187; during 1990 to 2000 refers to Year BETWEEN 1990 and 2000; total number of conference refers to Count(ConferenceId = 187)"}
{"sample_id": 3548, "db_id": "authors", "final": {"question": "Among author ID of under 1000, who published the paper in affiliation with Zurich, ETH, provide paper ID, year and keyword if any.", "sql": "SELECT T2.Id, T2.Year, T2.Keyword FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.AuthorId < 1000 AND T1.Affiliation = 'Zurich, ETH'", "source_tables": ["paper", "paperauthor"]}, "evidence": "author ID of under 100 refers to AuthorId < 100; 'Zurich, ETH' is the Affiliation"}
{"sample_id": 3573, "db_id": "authors", "final": {"question": "Identify by conference full name all papers in which a journal was not published but a conference.", "sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.ConferenceId != 0 AND T1.JournalId = 0 AND T1.Year != 0", "source_tables": ["conference", "paper"]}, "evidence": "journal was not published but a conference refers to ConferenceId ! = 0 And JournalId = 0 Year ! = 0"}
{"sample_id": 3583, "db_id": "authors", "final": {"question": "What percentage of journals whose short name begins with ANN were published in the paper database in 1989?", "sql": "SELECT CAST((SUM(CASE WHEN T1.ShortName LIKE 'ANN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.ShortName) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 1989", "source_tables": ["paper", "journal"]}, "evidence": "short name begins with ANN refers to ShortName like 'ANN%' ; percentage refers to DIVIDE(COUNT(ShortName like 'ANN%' ), COUNT(id)) * 100%;\u00a0 in 1989 refers to Year = 1989"}
{"sample_id": 3621, "db_id": "authors", "final": {"question": "From year 1991 to 2000, calculate the difference betweeen the total number of papers published under the conference \"International Conference on Supercomputing \" and \"Informatik & Schule\"?", "sql": "SELECT SUM(CASE WHEN T2.FullName = 'Informatik & Schule' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.FullName = 'International Conference on Supercomputing' THEN 1 ELSE 0 END) AS DIFF FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year > 1990 AND T1.Year < 2001", "source_tables": ["conference", "paper"]}, "evidence": "From year 1991 to 2000 refers to Year BETWEEN 1991 AND 2000; papers refers to Paper.Id; 'International Conference on Supercomputing' AND 'Informatik & Schule' are the FullName of conference; calculate the difference between the total number of papers of these two conferences refers to SUBTRACT(SUM(Paper.Id where FullName = 'International Conference on Supercomputing'), SUM(Paper.Id where FullName = 'Informatik & Schule'))"}
{"sample_id": 3528, "db_id": "authors", "final": {"question": "List the title of papers with a conference ID from 160 to 170, include their conference short name.", "sql": "SELECT DISTINCT T1.Title, T2.ShortName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.ConferenceId BETWEEN 160 AND 170", "source_tables": ["conference", "paper"]}, "evidence": "conference ID from 160 to 170 refers to ConferenceId BETWEEN 160 AND 170"}
{"sample_id": 3672, "db_id": "authors", "final": {"question": "How many publications were published by author named 'Howard F. Lipson'?", "sql": "SELECT COUNT(PaperId) FROM PaperAuthor WHERE Name = 'Howard F. Lipson'", "source_tables": ["paperauthor"]}, "evidence": "'Howard F. Lipson' is the name of author"}
{"sample_id": 3718, "db_id": "college_completion", "final": {"question": "Tell the name of school in \"NJ\" that could get the bachelor's degree with highest students number.", "sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'NJ' AND T1.level = '4-year' AND T1.student_count = ( SELECT MAX(T1.student_count) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'NJ' AND T1.level = '4-year' )", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "name of school refers to chronname; NJ refers to state_abbr = 'NJ'; bachelor's degree refers to level = '4-year'; highest students number refers to MAX(student_count);"}
{"sample_id": 3757, "db_id": "college_completion", "final": {"question": "What is the name of the school with the highest difference in the average completion rate for the national in which it belongs? Indicate the state appropriations to higher education in fiscal year 2011 per resident to which the school belongs.", "sql": "SELECT T1.chronname, T2.state_appr_value FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state ORDER BY T1.awards_per_value - T2.awards_per_natl_value DESC LIMIT 1", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "name of the school refers to chronname; highest difference in the average completion rate for the national in which it belongs = MAX(SUBTRACT(awards_per_value, awards_per_natl_value)); state appropriations to higher education in fiscal year 2011 per resident to which the school belongs refers to state_appr_value;"}
{"sample_id": 3683, "db_id": "college_completion", "final": {"question": "State the name and website of the institutes from the state with 209 graduate cohort in 2011.", "sql": "SELECT T1.chronname, T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2011 AND T2.grad_cohort = 209", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "name of the institutes refers to chronname; website refers to site; graduate cohort refers to grad_cohort; in 2011 refers to year = '2011';"}
{"sample_id": 3743, "db_id": "college_completion", "final": {"question": "In year 2010 at schools located in Hawaii, what is the percentage of schools offers an associate's degree?", "sql": "SELECT CAST(SUM(CASE WHEN T2.level = '2-year' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.level) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.state = 'Hawaii' AND T2.year = 2010", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "Hawaii refers to state = 'Hawaii'; associate's degree refers to level = '2-year'; percentage = MULTIPLY(DIVIDE(SUM(level = '2-year' ), count(level)), 1.0);"}
{"sample_id": 3697, "db_id": "college_completion", "final": {"question": "How many institutes are private and not-for profit?", "sql": "SELECT COUNT(*) FROM institution_details WHERE control = 'Private not-for-profit'", "source_tables": ["institution_details"]}, "evidence": "private and not for profit refers to control = 'Private not-for-profit';"}
{"sample_id": 3688, "db_id": "college_completion", "final": {"question": "List all the public institutes from the state with the least number of graduate cohort in 2013.", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2013 AND T1.control = 'Public' ORDER BY T2.grad_cohort LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "public refers to control = 'Public'; institutes refers to chronname; least number of graduate cohort refers to MIN(grad_cohort); in 2013 refers to year = 2013;"}
{"sample_id": 3684, "db_id": "college_completion", "final": {"question": "What is the number of female graduates between 2011 to 2013 from the state where 'Gateway Community College' is located?", "sql": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year BETWEEN 2011 AND 2013 AND T1.chronname = 'Gateway Community College' AND T2.gender = 'F'", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "female refers to gender = 'F'; graduates refers to grad_cohort; between 2011 to 2013 refers to year BETWEEN 2011 AND 2013; Gateway Community College refers to chronname = 'Gateway Community College';"}
{"sample_id": 3745, "db_id": "college_completion", "final": {"question": "What is the website address of the institution with the highest number of White degree-seeking students at 2-year institutions in 2008?", "sql": "SELECT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'W' AND T2.cohort = '2y all' AND T2.year = 2008 ORDER BY T2.grad_cohort DESC LIMIT 1", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "website address refers to site; White refers to race = 'W'; degree-seeking students at 2-year institutions refers to cohort = '2y all'; in 2008 refers to year = '2008';"}
{"sample_id": 3737, "db_id": "college_completion", "final": {"question": "Among the states that start with letter A and attained a national sector average of 16.5, give the number of degree-seeking students in the cohort of those students in 2012 .", "sql": "SELECT SUM(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.state LIKE 'A%' AND T1.awards_per_natl_value = 16.5 AND T2.year = 2012", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "state that starts with letter A refers to state LIKE 'A%'; national sector average of 16.5 refers to awards_per_natl_value = 16.5; number of degree-seeking students in the cohort refers to grad_cohort; in 2012 refers to year = '2012';"}
{"sample_id": 3695, "db_id": "college_completion", "final": {"question": "What is the ratio of Asian male graduates to Asian female graduates from Harvard University in 2013?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN T2.grad_cohort ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Gender = 'F' THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Harvard University' AND T2.year = 2013 AND T2.race = 'A'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "ratio = MULTIPLY(DIVIDE(SUM(grad_cohort WHERE Gender = 'M'), SUM( grad_cohort WHERE Gender = 'F')), 1.0); Asian refers to race = 'A'; female refers to gender = 'F'; graduates refers to grad_cohort; male refers to gender = 'M'; Harvard University refers to chronname = 'Harvard University'; in 2013 refers to year = 2013;"}
{"sample_id": 3727, "db_id": "college_completion", "final": {"question": "Give the total number of all graduated students from a 2-year public schools in Alabama in 2011.", "sql": "SELECT SUM(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.state = 'Alabama' AND T2.year = 2011 AND T1.level = '2-year' AND T1.control = 'Public' AND T2.race = 'X'", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "number of graduated students refers to grad_cohort; 2-year refers to level = '2-year'; public refers to control = 'Public'; Alabama refers to state = 'Alabama'; in 2011 refers to year = '2011'; reace = 'X' means all students."}
{"sample_id": 3729, "db_id": "college_completion", "final": {"question": "What is the percentage of the number of 4-year public schools from Madison Area Technical College's home state in the Alabama?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.state = ( SELECT T1.state FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T1.chronname = 'Madison Area Technical College' ) AND T1.level = '4-year' AND T1.control = 'Public' THEN T1.chronname ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT CASE WHEN T2.state = 'Alabama' THEN T1.chronname ELSE NULL END) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(chronname = 'Madison Area Technical College'), SUM(state = 'Alabama')), 100); 4-year refers to level = '4-year'; public refers to control = 'Public'; Madison Area Technical College refers to chronname = 'Madison Area Technical College'; home state in the United States refers to state;"}
{"sample_id": 3716, "db_id": "college_completion", "final": {"question": "How many 2-year public schools are there in \"California\"?", "sql": "SELECT COUNT(stateid) FROM state_sector_details WHERE state = 'California' AND level = '2-year' AND control = 'Public'", "source_tables": ["state_sector_details"]}, "evidence": "2-year refers to level = '2-year'; public refers to control = 'public'; California refers to state = 'California';"}
{"sample_id": 3701, "db_id": "college_completion", "final": {"question": "How many students graduated from Central Alabama Community College in 2011 in total?", "sql": "SELECT T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011;"}
{"sample_id": 3723, "db_id": "college_completion", "final": {"question": "Which 4-year private for-profit school in \"KY\" has the highest graudation 150 value? Give the ID for the school.", "sql": "SELECT T1.chronname, T1.unitid FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'KY' AND T1.level = '4-year' AND T1.control = 'Private for-profit' GROUP BY T1.chronname ORDER BY SUM(T1.grad_150_value) DESC LIMIT 1", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "4-year refers to level = '4-year'; private for profit refers to control = 'Private for-profit'; KY refers to state_abbr = 'KY'; highest graduation 150 value refers to MAX(grad_150_value); ID of the school refers to unitid;"}
{"sample_id": 3748, "db_id": "college_completion", "final": {"question": "In Yale University, what is the average number of Black students per year who were bachelor's/equivalent-seeking cohort at 4-year institutions between 2002 to 2005?", "sql": "SELECT AVG(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Yale University' AND T2.year BETWEEN 2002 AND 2005 AND T2.race = 'B' AND T2.cohort = '4y bach'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Yale University refers to chronname = 'Yale University'; average = DIVIDE(COUNT(race = 'B' WHERE cohort = '4y bach AND year BETWEEN 2002 AND 2005), 3); Black refers to race = 'B'; bachelor's/equivalent-seeking cohort at 4-year institutions refers to cohort = '4y bach'; between 2002 to 2005 refers to year BETWEEN '2002' AND '2005';"}
{"sample_id": 3751, "db_id": "college_completion", "final": {"question": "Between the Ivy League Schools, which school's state have the lowest sate appropriations to higher education in fiscal year 2011 per resident?", "sql": "SELECT T1.state FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) GROUP BY T1.state ORDER BY SUM(T2.state_appr_value) ASC LIMIT 1", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; lowest state appropriations to higher education in fiscal year 2011 per resident refers to MIN(state_appr_value);"}
{"sample_id": 3735, "db_id": "college_completion", "final": {"question": "In Alaska with school count of 1 from year 2011 to 2013, how many of the students are white?", "sql": "SELECT COUNT(T2.race) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.schools_count = 1 AND T2.year BETWEEN 2011 AND 2013 AND T2.race = 'W' AND T1.state = 'Alaska'", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "Alaska refers to state = 'Alaska'; from year 2011 to 2013 refers to year BETWEEN '2011' AND '2013'; white refers to race = 'W';"}
{"sample_id": 3720, "db_id": "college_completion", "final": {"question": "Tell the number of 4-year public schools in UT whose graduation rate exceeds the average for the state.", "sql": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'UT' AND T1.level = '4-year' AND T1.control = 'Public' AND T1.awards_per_value > T1.awards_per_state_value", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "4-year refers to level = '4-year'; public refers to control = 'Public'; UT refers to state_abbr = 'UT'; graduation rate exceeds the average for the state refers to awards_per_value > awards_per_state_value;"}
{"sample_id": 3739, "db_id": "college_completion", "final": {"question": "What is the state name of male graduate in 2011 from a private for profit institution with black students?", "sql": "SELECT DISTINCT T1.state FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.gender = 'M' AND T2.race = 'B' AND T1.control = 'Private for-profit' AND T2.year = 2011", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "male refers to gender = 'M'; in 2011 refers to year = '2011'; private for profit refers to control = 'Private for-profit'; black refers to race = 'B';"}
{"sample_id": 3756, "db_id": "college_completion", "final": {"question": "Between 2011 to 2013, what is the average number of male Hispanic degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time in United Education Institute-Huntington Park Campus?", "sql": "SELECT AVG(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'United Education Institute-Huntington Park Campus' AND T2.year BETWEEN 2011 AND 2013 AND T2.gender = 'M' AND T2.race = 'H'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "between 2011 to 2013 refers to year BETWEEN '2011' AND '2013'; male refers to gender = 'M'; Hispanic refers to race = 'H'; number of degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time refers to grad_150; United Education Institute-Huntington Park Campus refers to chronname = 'United Education Institute-Huntington Park Campus';"}
{"sample_id": 3702, "db_id": "college_completion", "final": {"question": "Which cohort had the higher percentage of students who graduated from Central Alabama Community College in 2011 within 150 percent of normal/expected time, female White students or male White students?", "sql": "SELECT IIF(SUM(CASE WHEN T2.gender = 'F' THEN T2.grad_150 ELSE 0 END) > SUM(CASE WHEN T2.gender = 'M' THEN T2.grad_150 ELSE 0 END), 'female White students', 'male White students') FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2.year = 2011 AND T2.race = 'W'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "amount of percentage = SUM(grad_150 WHERE gender = 'F') as female; percentage = SUM(grad_150 WHERE gender = 'M') as male; Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2011 refers to year = 2011; graduated within 150 percent of normal/expected time refers to grad_150; female refers to gender = 'F'; White refers to race = 'w'; male refers to gender = 'M';"}
{"sample_id": 3714, "db_id": "college_completion", "final": {"question": "Which city is \"Rensselaer Polytechnic Institute\" located in?", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Rensselaer Polytechnic Institute' THEN city ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL", "source_tables": ["institution_details"]}, "evidence": "Rensselaer Polytechnic Institute refers to chronname = 'Rensselaer Polytechnic Institute';"}
{"sample_id": 3721, "db_id": "college_completion", "final": {"question": "How many 2-year private nonprofit schools in \"CT\" whose graduation rate falls below the average for the state?", "sql": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'CT' AND T2.level = '2-year' AND T1.control = 'Private not-for-profit' AND T1.awards_per_value < T1.awards_per_natl_value", "source_tables": ["state_sector_grads", "institution_details"]}, "evidence": "2-year refers to level = '2-year'; private nonprofit refers to control = 'Private not-for-profit'; CT refers to state_abbr = 'CT'; graduation rate falls below the average for the state refers to awards_per_value < awards_per_natl_value;"}
{"sample_id": 3691, "db_id": "college_completion", "final": {"question": "In 2012, how many Asian female graduates were seeking another type of degree or certificate at the 4-year institution at University of Alaska at Anchorage?", "sql": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.gender = 'F' AND T2.race = 'A' AND T1.chronname = 'University of Alaska at Anchorage' AND T2.cohort = '4y other'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "In 2012 refers to year = 2012; Asian refers to race = 'A'; female refers to gender = 'F'; graduates refers to grad_cohort; seeking another type of degree or certificate at a 4-year institution refers to cohort = '4y other'; University of Alaska at Anchorage refers to chronname = 'University of Alaska at Anchorage';"}
{"sample_id": 3734, "db_id": "college_completion", "final": {"question": "List the basic of the institution in 2012 with race of all male students.", "sql": "SELECT DISTINCT T1.basic, T2.race FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2012 AND T2.gender = 'M' AND t2.race = 'X'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "in 2012 refers to year = '2012'; male refers to gender = 'M'; all students refer to race = 'X'."}
{"sample_id": 3754, "db_id": "college_completion", "final": {"question": "What is the name of the school with the highest number of first-time, full-time, degree-seeking female students in the cohort being tracked, minus any exclusions who were seeking another type of degree or certificate at a 4-year institution?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.gender = 'F' AND T2.cohort = '4y other' ORDER BY T2.grad_cohort DESC LIMIT 1", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "name of the school refers to chronname; highest number of first-time, full-time, degree-seeking female students in the cohort being tracked, minus any exclusions refers to MAX(grad_cohort WHERE gender = 'F'); seeking another type of degree or certificate at a 4-year institution refers to cohort = '4y other';"}
{"sample_id": 3706, "db_id": "college_completion", "final": {"question": "How many more students in total graduated from Central Alabama Community College in 2012 than in 2011?", "sql": "SELECT SUM(CASE WHEN T2.year = 2012 THEN T2.grad_cohort ELSE 0 END) - SUM(CASE WHEN T2.year = 2011 THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "how many more = SUBTRACT(SUM(grad_cohort WHERE year = 2012)), (sum(grad_cohort WHERE year = 2011)); Central Alabama Community College refers to chronname = 'Central Alabama Community College'; in 2012 refers to year = 2012; in 2011 refers to year = 2011;"}
{"sample_id": 3726, "db_id": "college_completion", "final": {"question": "Tell the number of 4-year private not-for-profit schools in the home state of \"Brevard Community College\".", "sql": "SELECT COUNT(T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state WHERE T2.level = '4-year' AND T2.control = 'Private not-for-profit' AND T1.chronname = 'Brevard Community College'", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "4-year refers to level = '4-year'; private not-for-profit refers to control = 'Private not-for-profit'; Brevard Community College refers to chronname = 'Brevard Community College';"}
{"sample_id": 3732, "db_id": "college_completion", "final": {"question": "Among the race of all students, what is the control of institution and level of institution with highest number of students?", "sql": "SELECT DISTINCT T1.control, T1.level FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'X' AND T1.student_count = ( SELECT MAX(T1.student_count) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'X' )", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "highest number of students refers to student_count; all students refer to race = 'X'."}
{"sample_id": 3749, "db_id": "college_completion", "final": {"question": "Among the Ivy League Schools, which school have the highest number of Hispanic graduates of all time?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) AND T2.race = 'H' GROUP BY T1.chronname ORDER BY SUM(T2.grad_cohort) DESC LIMIT 1", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; highest number of hispanic graduates refers to MAX(grad_cohort WHERE race = 'H');"}
{"sample_id": 3733, "db_id": "college_completion", "final": {"question": "Among the states with a public school count of 20 and below, list their race.", "sql": "SELECT DISTINCT T2.race FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T1.schools_count <= 20 AND T1.control = 'Public'", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "public refers to control = 'Public'; school_count < 20;"}
{"sample_id": 3747, "db_id": "college_completion", "final": {"question": "In the state with the highest state appropriations to higher education in fiscal year 2011 per resident, which institution has the lowest number of undergraduates in 2010?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state INNER JOIN institution_grads AS T3 ON T3.unitid = T1.unitid WHERE T1.student_count = ( SELECT MIN(T1.student_count) FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON T2.state = T1.state INNER JOIN institution_grads AS T3 ON T3.unitid = T1.unitid WHERE T3.year = 2010 ) AND T3.year = 2010 GROUP BY T1.state ORDER BY SUM(T2.state_appr_value) DESC LIMIT 1", "source_tables": ["institution_details", "state_sector_details", "institution_grads"]}, "evidence": "highest state appropriations to higher education in fiscal year 2011 per resident refers to MAX(state_appr_value); lowest number of undergraduates refers to MIN(student_count); in 2010 refers to year = 2010;"}
{"sample_id": 3741, "db_id": "college_completion", "final": {"question": "In female students in year 2012, how many of them from a state with number of schools ranges from 10 to 20?", "sql": "SELECT COUNT(T2.race) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.gender = 'F' AND schools_count BETWEEN 10 AND 20 AND T2.year = 2012", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "female refers to gender = 'F'; number of schools refers to schools_count; schools_count BETWEEN 10 AND 20;"}
{"sample_id": 3742, "db_id": "college_completion", "final": {"question": "List the race of institutions in Alabama with number of students greater than the 90% of average number of students of all institutions?", "sql": "SELECT DISTINCT T2.race FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count > ( SELECT AVG(T1.student_count) * 0.9 FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' ) AND T1.state = 'Alabama'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Alabama refers to state = 'Alabama'; number of students greater than the 90% of average = MULTIPLY(AVG(student_count), 90%) < student_count;"}
{"sample_id": 3752, "db_id": "college_completion", "final": {"question": "In the state with the highest number of schools, how many institutions have a percentage of no less than 90 of undergraduates who attend full-time? List all of the institutions' names.", "sql": "SELECT COUNT(t1.unitid), t1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state WHERE t1.ft_pct > 90 ORDER BY t2.schools_count DESC LIMIT 1", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "highest number of schools refers to MAX(schools_count); percentage of no less than 90 of undergraduates who attend full-time refers to ft_pct > 90; institutions' names refers to chronname;"}
{"sample_id": 3736, "db_id": "college_completion", "final": {"question": "What is the institution's name of american students within the number of degree-seeking students in the cohort that ranges from 1 to 3?", "sql": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.grad_cohort BETWEEN 1 AND 3 AND T2.race = 'Ai'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "institution's name refers to chronname; american refers to race = 'Ai'; number of degree-seeking students in the cohort refers to grad_cohort; grad_cohort < = 3;"}
{"sample_id": 3728, "db_id": "college_completion", "final": {"question": "For the state which has the 113 2-year public schools, tell the number of graduated Asian students who seeks another type of degree or certificate at a 2-year institution in 2013.", "sql": "SELECT COUNT(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.level = '2-year' AND T2.control = 'Public' AND T2.gender = 'B' AND T2.race = 'A' AND T2.cohort = '2y all' AND T1.schools_count = 113", "source_tables": ["state_sector_grads", "state_sector_details"]}, "evidence": "schools_count = 113; 2-year refers to level = '2-year'; public refers to control = 'public'; Asian refers to race = 'A'; seeks another type of degree or certificate at a 2-year institution refers to cohort = '2y all'; in 2013 refers to year = 2013;"}
{"sample_id": 3694, "db_id": "college_completion", "final": {"question": "Calculate the percentage of Asian students among students of other races who graduated from institution in Alabama in year 2013 within 100 percent of normal / expected time.", "sql": "SELECT CAST(SUM(CASE WHEN T2.race = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T1.state = 'Alabama'", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Asian refers to race = 'A'; Alabama refers to state = 'Alabama'; graduated within 100 percent of normal/expected time refers to grad_100; percentage = MULTIPLY(DIVIDE(SUM(race = 'A'), SUM(grad_cohort)), 100);"}
{"sample_id": 3696, "db_id": "college_completion", "final": {"question": "From which institute is harder to graduate for a bachelor, Amridge University or Auburn University?", "sql": "SELECT chronname FROM institution_details WHERE chronname IN ('Amridge University', 'Auburn University') ORDER BY grad_100_value LIMIT 1", "source_tables": ["institution_details"]}, "evidence": "institute refers to chronname; harder to graduate for a bachelor refers to MIN(grad_100_value); Amridge University refers to chronname = 'Amridge University'; Auburn University refers to chronname = 'Auburn University';"}
{"sample_id": 3746, "db_id": "college_completion", "final": {"question": "In Harvard University, which year recorded the highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions?", "sql": "SELECT T2.year FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Harvard University' GROUP BY T2.year ORDER BY SUM(T2.grad_cohort) DESC LIMIT 1", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Harvard University refers to chronname = 'Harvard University'; highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions refers to MAX(grad_cohort);"}
{"sample_id": 3717, "db_id": "college_completion", "final": {"question": "Give the post name of \"Idaho\" state.", "sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN state = 'Idaho' THEN state_post ELSE NULL END AS T FROM state_sector_details ) WHERE T IS NOT NULL", "source_tables": ["state_sector_details"]}, "evidence": "post name refers to state_post;"}
{"sample_id": 3755, "db_id": "college_completion", "final": {"question": "Among the Ivy League Schools in 2013, which schools have the highest number of Black students who graduated within 150 percent of normal/expected time who were seeking a bachelor's/equivalent cohort at 4-year institutions?", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname IN ( 'Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University' ) AND T2.year = 2013 AND T2.race = 'B' AND T2.cohort = '4y bach' ORDER BY T2.grad_cohort DESC LIMIT 1", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "Ivy League Schools refers to chronname = 'Brown University' or chronname = 'Columbia University' or chronname = 'Cornell University' or chronname = 'Dartmouth College' or chronname = 'Harvard University' or chronname = 'Princeton University' or chronname = 'University of Pennsylvania' or chronname = 'Yale University'; in 2013 refers to year = '2013'; highest number of Black students who graduated within 150 percent of normal/expected time refers to MAX(grad_150 WHERE race = 'B'); seeking a bachelor's/equivalent cohort at 4-year institutions refers to cohort = '4y bach';"}
{"sample_id": 3750, "db_id": "college_completion", "final": {"question": "How many 4-year public institutions are there in the state of Florida? Give all of their names.", "sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 WHERE T2.level = '4-year' AND T2.control = 'Public' AND T2.state = 'Florida'", "source_tables": ["institution_details", "state_sector_details"]}, "evidence": "4-year refers to level = '4-year'; public refers to control = 'Public'; names refers to chronname;"}
{"sample_id": 3708, "db_id": "college_completion", "final": {"question": "Among the public institutes in the state of Alabama, how many of them have over 30 students who graduated within 100 percent of normal/expected time in 2011?", "sql": "SELECT COUNT(T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.control = 'Public' AND T2.year = 2011 AND T2.grad_100 > 30", "source_tables": ["institution_details", "institution_grads"]}, "evidence": "public refers to control = 'Public'; over 30 students who graduated within 100 percent of normal/expected time refers to grad_100 > 30; in 2011 refers to year = 2011;"}
{"sample_id": 3915, "db_id": "public_review_platform", "final": {"question": "How many of the businesses are active?", "sql": "SELECT COUNT(business_id) FROM Business WHERE active LIKE 'True'", "source_tables": ["business"]}, "evidence": "active refers to active = 'true'"}
{"sample_id": 3880, "db_id": "public_review_platform", "final": {"question": "What is the total number of active businesses in AZ with a low review count?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'True' AND review_count LIKE 'low'", "source_tables": ["business"]}, "evidence": "active businesses refers to active = 'true'; in AZ refers to state = 'AZ'\n"}
{"sample_id": 3970, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of running business among all business.", "sql": "SELECT CAST(SUM(CASE WHEN active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(business_id) FROM Business", "source_tables": ["business"]}, "evidence": "running business refers to active = 'true'; percentage refers to DIVIDE(COUNT(active = 'true'), COUNT(business_id)) * 100%"}
{"sample_id": 4014, "db_id": "public_review_platform", "final": {"question": "Find the Yelp user with the average 5-star rating of all reviews who has been yelping the longest.", "sql": "SELECT user_id FROM Users WHERE user_average_stars = 5 ORDER BY user_yelping_since_year ASC LIMIT 1", "source_tables": ["users"]}, "evidence": "Yelp user refers to user_id; average 5-star rating refers to user_average_stars = 5; yelping the longest refers to min(user_yelping_since_year)"}
{"sample_id": 4133, "db_id": "public_review_platform", "final": {"question": "List the categories of active businesses in Glendale, AZ.", "sql": "SELECT DISTINCT T3.category_name FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T2.city = 'Glendale'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "active business ID refers to active = 'true'; categories refers to category_name; Glendale is a city; AZ is a state"}
{"sample_id": 4081, "db_id": "public_review_platform", "final": {"question": "List the user ID, business ID with review length of the business which received the most likes in tips.", "sql": "SELECT T1.user_id, T1.business_id, T2.review_length FROM Tips AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id ORDER BY T1.likes DESC LIMIT 1", "source_tables": ["tips", "reviews"]}, "evidence": "business which received the most likes refers to business_id where MAX(likes);"}
{"sample_id": 4062, "db_id": "public_review_platform", "final": {"question": "In businesses with a category of \"DJs\", how many businesses are rated less than 5?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'DJs' AND T1.stars < 5", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "category of \"DJs\" refers to category_name = 'DJs'; rated less than 5 refers to stars < 5; businesses refer to business_id;"}
{"sample_id": 3963, "db_id": "public_review_platform", "final": {"question": "For the user who joined Yelp in \"2010\", with an average of \"4.5\" stars review and has got uber number of fans, how many \"funny\" compliments has he/she received from other users?", "sql": "SELECT COUNT(T2.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id WHERE T1.user_yelping_since_year = 2010 AND T1.user_average_stars = 4.5 AND T1.user_fans = 'Uber' AND T3.compliment_type = 'funny'", "source_tables": ["compliments", "users", "users_compliments"]}, "evidence": "in \"2010\" refers to user_yelping_since_year = '2010'; average of \"4.5\" stars review refers to user_average_stars = '4.5'; uber number of fans refers to user_average_stars = '4.5'; \"funny\" compliments refers to compliment_type = 'funny'"}
{"sample_id": 3980, "db_id": "public_review_platform", "final": {"question": "Mention the user average star, elite year and the compliment type of user ID 6027 whereby number of compliments reach uber.", "sql": "SELECT T2.user_average_stars, T1.year_id, T4.compliment_type, T3.number_of_compliments FROM Elite AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Users_Compliments AS T3 ON T2.user_id = T3.user_id INNER JOIN Compliments AS T4 ON T3.compliment_id = T4.compliment_id INNER JOIN Years AS T5 ON T1.year_id = T5.year_id WHERE T3.number_of_compliments = 'Uber' AND T3.user_id = 6027", "source_tables": ["users", "years", "compliments", "elite", "users_compliments"]}, "evidence": "number of compliments reach uber refers to number_of_compliments = 'Uber'; elite year refers to year_id; user average star refers to user_average_stars"}
{"sample_id": 3844, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Businesses are there in Arizona in total?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ'", "source_tables": ["business"]}, "evidence": "Arizona refers to state = 'AZ';"}
{"sample_id": 4102, "db_id": "public_review_platform", "final": {"question": "List by ID the businesses with the reviews with the lowest veracity of Paradise Valley.", "sql": "SELECT business_id FROM Business WHERE stars > 3 AND city = 'Paradise Valley' AND review_count = 'Low'", "source_tables": ["business"]}, "evidence": "ID of businesses refers to business_id; reviews with the lowest veracity refers to review_count = 'Low' AND stars > 3; Paradise Valley is a city"}
{"sample_id": 4058, "db_id": "public_review_platform", "final": {"question": "Please indicate the opening day of businesses whose category is pets.", "sql": "SELECT DISTINCT T4.day_of_week FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Pets'", "source_tables": ["days", "business_categories", "business_hours", "categories"]}, "evidence": "category is pets refers to category_name = 'Pets'; opening day refers to day_id from Business_Hours and opening_time;"}
{"sample_id": 3950, "db_id": "public_review_platform", "final": {"question": "Calculate the average review star from users in businesses located in South Carolina and California state.", "sql": "SELECT 1.0 * (( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'SC' ) + ( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'CA' )) / ( SELECT SUM(T1.stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id ) AS reslut", "source_tables": ["reviews", "business"]}, "evidence": "\"South Carolina\" and \"California\" are both state; average review stars from users = Divide((Sum(review_stars(state = 'SC')) + Sum(review_stars(state = 'CA'))), Sum(stars))"}
{"sample_id": 3940, "db_id": "public_review_platform", "final": {"question": "List at least 5 active business ID that are good for groups and dancing.", "sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Good for Dancing' AND T1.attribute_name LIKE 'Good for Groups' LIMIT 5", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "\"Good for Groups\" and \"Good for Dancing\" are attribute_name; active business refers to active = true'"}
{"sample_id": 4039, "db_id": "public_review_platform", "final": {"question": "Find out which business ID are opened all the time.", "sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE day_id >= 1 AND day_id < 8 AND opening_time = closing_time", "source_tables": ["business_hours"]}, "evidence": "opened all the time refers to Business_Hours where day_id BETWEEN 1 and 7 and opening_time = closing_time;"}
{"sample_id": 4108, "db_id": "public_review_platform", "final": {"question": "How many stars does each of the 3 top users with the most likes in their reviews have?", "sql": "SELECT T2.user_average_stars FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id GROUP BY T2.user_id ORDER BY SUM(T1.likes) DESC LIMIT 3", "source_tables": ["tips", "users"]}, "evidence": "more likes mean this tip is more valuable; the most likes refers to MAX(likes); stars refers to users_average_stars"}
{"sample_id": 3860, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business in Arizona has user no. 3 reviewed?", "sql": "SELECT COUNT(T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' AND T1.user_id = 3", "source_tables": ["business", "reviews"]}, "evidence": "in Arizona refers to state = 'AZ'; user no. 3 refers to user_id = 3"}
{"sample_id": 3817, "db_id": "public_review_platform", "final": {"question": "How many businesses in the fashion industry are rated 5 stars?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars = 5 AND T3.category_name LIKE 'Fashion'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "fashion industry refers to category_name = 'Fashion';"}
{"sample_id": 3904, "db_id": "public_review_platform", "final": {"question": "Find out which business is opened for 24/7 and list out what is the business attribute.", "sql": "SELECT T5.attribute_name FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T2.day_id LIKE '1' AND '2' AND '3' AND '4' AND '5' AND '6' AND '7' AND T1.opening_time = T1.closing_time GROUP BY T5.attribute_name", "source_tables": ["business_hours", "attributes", "business", "days", "business_attributes"]}, "evidence": "opened for 24/7 refers to Business_Hours WHERE opening_time = closing_time and business_id COUNT(day_id) = 7; business attribute refers to attribute_name"}
{"sample_id": 3933, "db_id": "public_review_platform", "final": {"question": "Among the businesses with a category of Local Services, what is the percentage of the business with less than 3 stars?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars < 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) AS \"percentage\" FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Local Services'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "\"Local Services\" is the category_name; less than 3 stars refers to stars < 3; percentage = Divide(Count(business_id(stars < 3)), Count(business_id)) * 100"}
{"sample_id": 3787, "db_id": "public_review_platform", "final": {"question": "How many more \"Chinese\" than \"Filipino\" Yelp businesses?", "sql": "SELECT SUM(CASE WHEN T1.category_name LIKE 'Chinese' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Filipino' THEN 1 ELSE 0 END) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["business_categories", "categories"]}, "evidence": "Chinese refers to category_name = 'Chinese'; Filipino refers to category_name = 'Filipino'; how many more = SUBTRACT(SUM(category_name = 'Chinese'), SUM(category_name = 'Filipino'));"}
{"sample_id": 4046, "db_id": "public_review_platform", "final": {"question": "What are the most common compliments types received by user with uber number of fans?", "sql": "SELECT DISTINCT T3.compliment_type FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id WHERE T1.user_fans = 'Uber'", "source_tables": ["compliments", "users", "users_compliments"]}, "evidence": "the most common compliments types refer to MAX(COUNT(compliment_id)); user_fans = 'uber';"}
{"sample_id": 3951, "db_id": "public_review_platform", "final": {"question": "Compare and get the difference of the number of businesses that are open in Monday and Tuesday from 10 am to 9 pm.", "sql": "SELECT SUM(CASE WHEN T3.day_of_week = 'Monday' THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.day_of_week = 'Tuesday' THEN 1 ELSE 0 END) AS DIFF FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time = '10AM' AND T2.closing_time = '9PM'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "10 am refers to opening_time = '10AM'; 9 pm refers to closing_time = '9PM'; 'Monday' and 'Tuesday' are both day_of_week; difference number of business = Subtract(Count(business_id(day_of_week = 'Monday')), Count(business_id(day_of_week = 'Tuesday')))"}
{"sample_id": 3959, "db_id": "public_review_platform", "final": {"question": "Is the Yelp business No. 14033 good for supper?", "sql": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'good_for_dinner' AND T1.business_id = 14033", "source_tables": ["business_attributes", "attributes"]}, "evidence": "business no. 14033 refers to business_id = 14033; good for supper refers to attribute_name = 'good_for_dinner'"}
{"sample_id": 3955, "db_id": "public_review_platform", "final": {"question": "Provide the number of Yelp businesses in \"Gilbert\" which got a\" high\" review count.", "sql": "SELECT COUNT(business_id) FROM Business WHERE review_count = 'High' AND city = 'Gilbert'", "source_tables": ["business"]}, "evidence": "\"Gilbert\" is the name of city; high review count refers to review_count = 'High'"}
{"sample_id": 4122, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a star range from 3 to 5, located at Chandler.", "sql": "SELECT business_id FROM Business WHERE stars >= 3 AND stars < 6 AND city = 'Chandler'", "source_tables": ["business"]}, "evidence": "businesses with a star range from 3 to 5 refers to stars BETWEEN 3 AND 5; Chandler is a city"}
{"sample_id": 3759, "db_id": "public_review_platform", "final": {"question": "What is the quantity of the closed or not running Yelp Businesses in 'AZ'?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND active LIKE 'False'", "source_tables": ["business"]}, "evidence": "closed or not running refers to active = 'False'; AZ refers to state = 'AZ';"}
{"sample_id": 3885, "db_id": "public_review_platform", "final": {"question": "In businesses with a category of mexican, how many of them has a star rating below 4?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.stars < 4 AND T3.category_name LIKE 'Mexican'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "category of mexican refers to category_name = 'Mexican'; star rating below 4 refers to stars < 4"}
{"sample_id": 3946, "db_id": "public_review_platform", "final": {"question": "What is the total number of fans or followers who received most likes of their comments in the business?", "sql": "SELECT COUNT(T1.user_fans) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id ORDER BY COUNT(T2.likes) DESC LIMIT 1", "source_tables": ["tips", "users"]}, "evidence": "fans and followers refers to user_fans; most likes of their comments refer to Max(likes)"}
{"sample_id": 3794, "db_id": "public_review_platform", "final": {"question": "For all the Yelp businesses that allow customers bring their own beer, what percentage of them are in \"Phoenix\"?", "sql": "SELECT CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) AS \"percentage\" FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'BYOB' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "bring their own beer refers to attribute_name = 'BYOB' AND attribute_value = 'TRUE'; Phoenix refers to city = 'Phoenix'; percentage = MULTIPLY(DIVIDE(SUM(city = 'Phoenix'), COUNT(business_id)), 1.0)"}
{"sample_id": 4093, "db_id": "public_review_platform", "final": {"question": "List down the closing day of businesses located at SC State.", "sql": "SELECT T3.day_id - T2.day_id FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.state = 'SC'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "closing day refers to SUBTRACT(days.day_id, business_Hours.day_id)"}
{"sample_id": 3820, "db_id": "public_review_platform", "final": {"question": "Which city has the least number of businesses whose amount of funny votes is low?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_votes_funny LIKE 'low' GROUP BY T1.city", "source_tables": ["reviews", "business"]}, "evidence": "least number of businesses refers to MIN(business_id); funny votes is low refers to review_votes_funny = 'Low';"}
{"sample_id": 4054, "db_id": "public_review_platform", "final": {"question": "Provide business ids with opening hours 10AM on Saturday.", "sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE day_id = 6 AND opening_time = '10AM'", "source_tables": ["business_hours"]}, "evidence": "opening hours 10AM on Saturday refer to Business_Hours where opening_time = '10AM' and day_id = 6;"}
{"sample_id": 3902, "db_id": "public_review_platform", "final": {"question": "How many users received high compliment type in photo?", "sql": "SELECT COUNT(T1.user_id) FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.number_of_compliments LIKE 'High' AND T2.compliment_id = 1", "source_tables": ["compliments", "users_compliments"]}, "evidence": "high compliments refers to number_of_compliments = 'High'; type in photo refers to compliment_ID = 1"}
{"sample_id": 3887, "db_id": "public_review_platform", "final": {"question": "What is the category of businesses with highest star rating?", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "category refers to category_name; highest star rating refers to max(stars)"}
{"sample_id": 4047, "db_id": "public_review_platform", "final": {"question": "What is the average year needed by a user with uber fans to become an elite user?", "sql": "SELECT CAST(SUM(T2.year_id - T1.user_yelping_since_year) AS REAL) / COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_fans = 'Uber'", "source_tables": ["elite", "users"]}, "evidence": "AVG(user_yelping_since_year) where user_fans = 'uber';"}
{"sample_id": 3869, "db_id": "public_review_platform", "final": {"question": "How many users became an elite user the same year they joined Yelp?", "sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = T2.year_id", "source_tables": ["elite", "users"]}, "evidence": "became an elite user the same year they joined Yelp refers to user_yelping_since_year = year_id"}
{"sample_id": 3907, "db_id": "public_review_platform", "final": {"question": "What is the ratio of having the best to worse elite user in 2013?", "sql": "SELECT CAST(SUM(CASE WHEN T1.user_average_stars = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.user_id) , SUM(CASE WHEN T1.user_average_stars = 5 THEN 1 ELSE 0 END) * 1.0 / COUNT(T2.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T2.year_id = 2013", "source_tables": ["elite", "users"]}, "evidence": "best elite refers to user_average_stars = 5; worse eliter refers to user_average_stars = 1: in 2013 refers to year_id = 2013; ratio = Divide(Count(user_id(user_average_stars = 5)),\u00a0 Count(user_id(user_average_stars = 1)))"}
{"sample_id": 4120, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a high review count in Tempe.", "sql": "SELECT business_id FROM Business WHERE review_count = 'High' AND city = 'Tempe'", "source_tables": ["business"]}, "evidence": "Tempe is a city; high review count refers to review_count = 'High'"}
{"sample_id": 3937, "db_id": "public_review_platform", "final": {"question": "List at least 10 users ID that has 4 as an average ratings of all reviews sent.", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_average_stars = 4 LIMIT 10", "source_tables": ["users"]}, "evidence": "4 as an average rating refers to user_average_stars = 4"}
{"sample_id": 3826, "db_id": "public_review_platform", "final": {"question": "How many businesses are actively running in Gilbert City?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Gilbert' AND active LIKE 'True'", "source_tables": ["business"]}, "evidence": "actively running refers to active = 'true';"}
{"sample_id": 4007, "db_id": "public_review_platform", "final": {"question": "Identify the most popular and appealing active business in Gilbert based on users' reviews.", "sql": "SELECT business_id FROM Business WHERE city = 'Gilbert' AND active = 'true' AND review_count = 'High' ORDER BY stars DESC LIMIT 1", "source_tables": ["business"]}, "evidence": "most popular and appealing refers to review_count = 'High' and max(stars); active business refers to active = 'true'; in Gilbert refers to city = 'Gilbert'"}
{"sample_id": 3909, "db_id": "public_review_platform", "final": {"question": "How many business have been reviewed by user ID 3 and how long have this user been with Yelp?", "sql": "SELECT COUNT(T1.business_id) , strftime('%Y', 'now') - T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3", "source_tables": ["reviews", "users"]}, "evidence": "year with yelp = Subtract ('%Y'(CURRENT TIME), user_yelping_since_year)"}
{"sample_id": 4065, "db_id": "public_review_platform", "final": {"question": "How many category id have low review count and rating more than 2?", "sql": "SELECT COUNT(DISTINCT T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.review_count = 'Low' AND T3.stars > 2", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "rating more than 2 refers to stars > 2;"}
{"sample_id": 3936, "db_id": "public_review_platform", "final": {"question": "List at least 5 users that has received less than 5 low compliments from\nother users.", "sql": "SELECT user_id FROM Users_Compliments WHERE number_of_compliments LIKE 'Low' GROUP BY user_id ORDER BY COUNT(number_of_compliments) > 5 LIMIT 5", "source_tables": ["users_compliments"]}, "evidence": "less than 5 low compliment refers to number_of_compliments < 5"}
{"sample_id": 3877, "db_id": "public_review_platform", "final": {"question": "What is the average business time for Yelp_Business no.1 on weekends?", "sql": "SELECT T1.closing_time + 12 - T1.opening_time AS \"avg opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.business_id = 1 AND (T2.day_of_week = 'Sunday' OR T2.day_of_week = 'Sunday')", "source_tables": ["days", "business_hours"]}, "evidence": "Yelp_Business no.1 refers to business_id = 1; on weekends refers to day_of_week = 'Saturday' or day_of_week = 'Sunday'; average business time refers to DIVIDE(SUBTRACT(closing_time, opening_time), 2)"}
{"sample_id": 3780, "db_id": "public_review_platform", "final": {"question": "How many \"5\" star reviews does the Yelp business No. \"10682\" get?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE business_id = 10682 AND review_stars = 5", "source_tables": ["reviews"]}, "evidence": "5 star reviews refers to review_stars = 5; business No. refers to business_id;"}
{"sample_id": 3958, "db_id": "public_review_platform", "final": {"question": "How is the \"noise level\" for the only Yelp business in \u201cMesa\u201d which got a \"Uber\" review count?", "sql": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Mesa' AND T1.review_count = 'Uber' AND T3.attribute_name = 'Noise Level'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "\"Noise Level\" is the attribute_name; 'Mesa' is the name of city"}
{"sample_id": 3771, "db_id": "public_review_platform", "final": {"question": "In which year did the user who has given the most number of \"short\" tips join the Yelp?", "sql": "SELECT T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.tip_length LIKE 'short' GROUP BY T2.user_yelping_since_year ORDER BY COUNT(T1.tip_length) DESC LIMIT 1", "source_tables": ["tips", "users"]}, "evidence": "year the user join the Yelp refers to user_yelping_since_year; most number of short tips refers to MAX(COUNT(tip_length = 'Short'));"}
{"sample_id": 3925, "db_id": "public_review_platform", "final": {"question": "What is the category of the business with short review length and highest review stars within business ID from 5 t0 10?", "sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Short' AND T2.business_id BETWEEN 5 AND 10 ORDER BY T1.review_stars DESC LIMIT 1", "source_tables": ["business", "business_categories", "reviews", "categories"]}, "evidence": "short review length refers to review_length = 'Short'; highest review stars refers to Max(review_stars); business ID from 5 to 10 refers to business_id BETWEEN 5 AND 10; category of business refers to category_name"}
{"sample_id": 3830, "db_id": "public_review_platform", "final": {"question": "How many \"cool\" compliments did user number 33 receive?", "sql": "SELECT COUNT(T2.compliment_type) FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.user_id = 33 AND T2.compliment_type LIKE 'cool'", "source_tables": ["compliments", "users_compliments"]}, "evidence": "cool compliments refers to compliment_type = 'cool'; user number refers to user_id;"}
{"sample_id": 3797, "db_id": "public_review_platform", "final": {"question": "How many user ids from 1 to 20 have no fan users and have low ratings?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_id BETWEEN 1 AND 20 AND user_fans LIKE 'None' AND user_review_count LIKE 'Low'", "source_tables": ["users"]}, "evidence": "user_id BETWEEN 1 AND 20; no fan users refers to user_fans = 'None'; low ratings refers to user_review_count = 'Low';"}
{"sample_id": 3998, "db_id": "public_review_platform", "final": {"question": "How many photos type compliment given from users with high cool votes?", "sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id INNER JOIN Compliments AS T3 ON T2.compliment_id = T3.compliment_id INNER JOIN Reviews AS T4 ON T1.user_id = T4.user_id WHERE T3.compliment_type = 'photos' AND T4.review_votes_cool = 'High'", "source_tables": ["compliments", "reviews", "users", "users_compliments"]}, "evidence": "photos type compliment refers to compliment_type = 'photos'; high cool votes refers to review_votes_cool = 'High'"}
{"sample_id": 3976, "db_id": "public_review_platform", "final": {"question": "Among the review votes of funny and cool hit uber with long review length, describe the business ID, active status, user ID and user year of joining Yelp.", "sql": "SELECT T1.business_id, T1.active, T3.user_id, T3.user_yelping_since_year FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.review_votes_cool = 'Uber' AND T2.review_votes_funny = 'Uber' AND T2.review_length = 'Long'", "source_tables": ["reviews", "business", "users"]}, "evidence": "review votes of funny refers to review_votes_funny = 'Uber'; cool hit uber refers to review_votes_cool = 'Uber'; user year of joining Yelp refers to user_yelping_since_year"}
{"sample_id": 3874, "db_id": "public_review_platform", "final": {"question": "Which Yelp_Business in Arizona gets the most number of reviews?", "sql": "SELECT T1.user_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' GROUP BY T1.user_id ORDER BY COUNT(T1.user_id) DESC LIMIT 1", "source_tables": ["business", "reviews"]}, "evidence": "Arizona refers to state = 'AZ'; gets the most number of reviews refers to max(count(Reviews.business_id))"}
{"sample_id": 3972, "db_id": "public_review_platform", "final": {"question": "Between 2006 and 2007, which year ID had the greater number in elite user?", "sql": "SELECT year_id FROM Elite WHERE year_id IN (2006, 2007) GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1", "source_tables": ["elite"]}, "evidence": "2006 and 2007 refers to BETWEEN 2006 AND 2007; greater number in elite user refers to count(user_id)"}
{"sample_id": 4044, "db_id": "public_review_platform", "final": {"question": "How many businesses in Arizona having an average review less than 3 stars?", "sql": "SELECT COUNT(business_id) FROM Business WHERE business_id IN ( SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'AZ' GROUP BY T1.business_id HAVING SUM(T2.review_stars) / COUNT(T2.user_id) < 3 )", "source_tables": ["reviews", "business"]}, "evidence": "businesses in Arizona refer to business_id where state = 'Arizona'; average review less than 3 stars refers to AVG(review_stars) < 3.0;"}
{"sample_id": 3888, "db_id": "public_review_platform", "final": {"question": "What is the category of the business with medium review length and highest review stars within business ID from 6 t0 9?", "sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Medium' AND T2.business_id BETWEEN 6 AND 9 ORDER BY T1.review_stars DESC LIMIT 1", "source_tables": ["business", "business_categories", "reviews", "categories"]}, "evidence": "category refers to category_name; highest review stars refers to max(review_stars); business ID from 6 to 9 refers to business_id between 6 and 9"}
{"sample_id": 3988, "db_id": "public_review_platform", "final": {"question": "How many businesses in Tempe are rated as 'Wonderful experience?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND stars > 3", "source_tables": ["business"]}, "evidence": "in Tempe refers to city = 'Tempe'; rated as 'Wonderful experience refers to stars > 3"}
{"sample_id": 3873, "db_id": "public_review_platform", "final": {"question": "Among the users who have posted more than 10 reviews, how many users are elite users?", "sql": "SELECT COUNT(T4.user_id) FROM ( SELECT T1.user_id FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id INNER JOIN Reviews AS T3 ON T1.user_id = T3.user_id WHERE T3.user_id IS NOT NULL GROUP BY T3.user_id HAVING COUNT(T3.user_id) > 10 ) T4", "source_tables": ["elite", "reviews", "users"]}, "evidence": "posted more than 10 reviews refers to count(Reviews.user_id) > 10"}
{"sample_id": 3854, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business falls under the category of \"Shopping\"?", "sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Shopping'", "source_tables": ["business_categories", "categories"]}, "evidence": "category of \"Shopping\" refers to category_name = 'Shopping'"}
{"sample_id": 4041, "db_id": "public_review_platform", "final": {"question": "How many users manage to get uber votes for all of the review category? Find out what are the user average star.", "sql": "SELECT COUNT(T2.user_id) AS USER_IDS, T2.user_average_stars FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_votes_funny = 'Uber' AND T1.review_votes_useful = 'Uber' AND T1.review_votes_cool = 'Uber'", "source_tables": ["reviews", "users"]}, "evidence": "users refer to user_id; uber votes for all of the review category refer to review_votes_funny = 'uber' AND review_votes_useful = 'uber' AND review_votes_cool = 'uber';"}
{"sample_id": 3968, "db_id": "public_review_platform", "final": {"question": "How many times is the number of \"Women's Clothing\" Yelp businesses to \"Men's Clothing\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END) AS TIMES FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["business_categories", "categories"]}, "evidence": "\"Women's Clothing\" Yelp businesses refers to\u00a0 category_name = 'Women''s Clothing'; \"Men's Clothing\" refers to category_name = 'Men''s Clothing'; times refers to DIVIDE(COUNT(category_name = 'Women''s Clothing'), COUNT(category_name = 'Men''s Clothing'))"}
{"sample_id": 3954, "db_id": "public_review_platform", "final": {"question": "Give the number of \"4\" stars Yelp businesses in \"Mesa\" city.", "sql": "SELECT COUNT(business_id) FROM Business WHERE stars = 4 AND city = 'Mesa'", "source_tables": ["business"]}, "evidence": "\"4\" stars refers to stars = '4'; 'Mesa' is the name of city"}
{"sample_id": 3808, "db_id": "public_review_platform", "final": {"question": "Provide the businesses name in Tempe city whose opening hours are earlier than 8AM.", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T3.city LIKE 'Tempe' AND T4.opening_time < '8AM'", "source_tables": ["business_categories", "business", "business_hours", "categories"]}, "evidence": "opening hours refers to opening_time; earlier than 8AM refers to opening_time < '8AM';"}
{"sample_id": 4012, "db_id": "public_review_platform", "final": {"question": "Among all the users with the average ratings of at least 4 and above of all reviews, calculate the percent that have no fans or followers.", "sql": "SELECT CAST(SUM(CASE WHEN user_fans = 'None' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users WHERE user_average_stars >= 4", "source_tables": ["users"]}, "evidence": "average ratings of at least 4 refers to user_average_stars > = 4; no fans or followers refers to user_fans = 'None'; percentage = divide(count(user_id where user_average_stars > = 4 and user_fans = 'None'), sum(user_id where user_average_stars > = 4))*100%"}
{"sample_id": 3934, "db_id": "public_review_platform", "final": {"question": "List the closing time and day of week of active businesses in Scottsdale with stars greater than the 60% of average age of star rating.", "sql": "SELECT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Scottsdale' AND T1.active LIKE 'TRUE' AND T1.stars > 0.6 * ( SELECT AVG(T1.stars) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Scottsdale' AND T1.active LIKE 'TRUE' )", "source_tables": ["days", "business", "business_hours"]}, "evidence": "active business refers to active = 'true';\u00a0 'Scottsdale' is the name of city; stars greater than the 60% of average age of star rating refers to stars\u00a0 > avg(stars) * 60%"}
{"sample_id": 3991, "db_id": "public_review_platform", "final": {"question": "Calculate difference between business that have the highest number of reviews and business that have the lowest number of reviews.", "sql": "SELECT ( SELECT COUNT(business_id) FROM Reviews GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1 ) - ( SELECT COUNT(business_id) FROM Reviews GROUP BY business_id ORDER BY COUNT(business_id) ASC LIMIT 1 ) AS DIFF", "source_tables": ["reviews"]}, "evidence": "highest number of reviews refers to SUBTRACT(MAX(COUNT(business_id), MIN(COUNT(business_id))))"}
{"sample_id": 3886, "db_id": "public_review_platform", "final": {"question": "List the active business ID and its stars of the businesses fall under the category of Fashion.", "sql": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Fashion'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "active business refers to active = 'true'; category of Fashion refers to category = 'Fashion'"}
{"sample_id": 3870, "db_id": "public_review_platform", "final": {"question": "What is the longest business time on Mondays for a Yelp_Business under the category \"Shopping\"?", "sql": "SELECT T1.closing_time + 12 - T1.opening_time AS \"hour\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id INNER JOIN Business_Categories AS T4 ON T3.business_id = T4.business_id INNER JOIN Categories AS T5 ON T4.category_id = T5.category_id WHERE T2.day_of_week LIKE 'Monday' AND T5.category_name LIKE 'Shopping' ORDER BY T1.closing_time + 12 - T1.opening_time DESC LIMIT 1", "source_tables": ["business_hours", "business", "days", "business_categories", "categories"]}, "evidence": "longest business time refers to max(subtract(closing_time, opening_time)); on Mondays refers to day_of_week = 'Monday';\u00a0 category \"Shopping\" refers to category_name = 'Shopping'"}
{"sample_id": 3878, "db_id": "public_review_platform", "final": {"question": "What is the average Elitestar rating for a Yelp_Business that closes at 12PM on Sundays?", "sql": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T1.business_id) AS \"average stars\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "average Elitestar rating refers to DIVIDE(SUM(stars), COUNT(business_id)); closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'"}
{"sample_id": 3893, "db_id": "public_review_platform", "final": {"question": "Find the location of businesses that have business hours from 8 am to 9 pm every Friday.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '8AM' AND T3.day_of_week LIKE 'Friday' GROUP BY T1.city", "source_tables": ["days", "business", "business_hours"]}, "evidence": "location of businesses refers to city and state; business hours from 8 am to 9 pm refers to opening_time = '8AM', closing_time = '9PM'; every Friday refers to day_of_week = 'Friday'"}
{"sample_id": 4125, "db_id": "public_review_platform", "final": {"question": "Among the businesses in Tempe, list the attribute of the business with a medium review count.", "sql": "SELECT DISTINCT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Tempe' AND T1.review_count = 'Medium'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "Tempe is a city; high review count refers to review_count = 'High'"}
{"sample_id": 4134, "db_id": "public_review_platform", "final": {"question": "Find the location of businesses that has business hours from 7 am to 7 pm every Wednesday.", "sql": "SELECT DISTINCT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.opening_time = '7AM' AND T2.closing_time = '7PM' AND T3.day_of_week = 'Wednesday'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "location of business refers to city; business hours from 7am to 7pm refers to opening_time = '7AM' AND closing_time = '7PM'; Wednesday refers to day_of_week = 'Wednesday'"}
{"sample_id": 3908, "db_id": "public_review_platform", "final": {"question": "Calculate the increment percentage of elite user for each year since year 2005.", "sql": "SELECT CAST(COUNT(CASE WHEN year_id < 2014 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN year_id = 2005 THEN 1.0 ELSE NULL END) AS increment FROM Elite", "source_tables": ["elite"]}, "evidence": "since year 2005 refers to year_id Between 2005 and 2014; increment percentage = Divide(Count(user_id(year_id < 2014)), Count (user_id(year_id = 2015))) * 100"}
{"sample_id": 3964, "db_id": "public_review_platform", "final": {"question": "How many \"cool\" type compliments does user No. 41717 get?", "sql": "SELECT COUNT(T2.number_of_compliments) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'cool' AND T2.user_id = 41717", "source_tables": ["compliments", "users_compliments"]}, "evidence": "\"cool\" type compliments refers to compliment_type = 'cool'; user No. 41717 refers to user_id = 41717"}
{"sample_id": 4042, "db_id": "public_review_platform", "final": {"question": "What is the ratio of good to bad business star for a businesses that are opened all the time?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars BETWEEN 3.5 AND 5 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.stars BETWEEN 1 AND 2.5 THEN 1 ELSE 0 END) AS ratio FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id", "source_tables": ["business", "business_hours"]}, "evidence": "opened all the time refers to Business_Hours where day_id BETWEEN 1 and 7 and opening_time = closing_time; ratio can be computed as DIVIDE(COUNT(stars BETWEEN 3.5 and 5), COUNT(stars BETWEEN 1 and 2.5));"}
{"sample_id": 4010, "db_id": "public_review_platform", "final": {"question": "Identify the user who has been yelping since 2004. Is he or she an Yelp Elite member?", "sql": "SELECT DISTINCT T2.user_id FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004", "source_tables": ["elite", "users"]}, "evidence": "has been yelping since 2004 refers to user_yelping_since_year = 2004"}
{"sample_id": 3815, "db_id": "public_review_platform", "final": {"question": "How many businesses in AZ state have the beer_and_wine attribute?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T2.attribute_value LIKE 'beer_and_wine' AND T1.state LIKE 'AZ'", "source_tables": ["business_attributes", "business"]}, "evidence": "beer_and_wine refers to attribute_value = 'beer_and_wine';"}
{"sample_id": 4055, "db_id": "public_review_platform", "final": {"question": "Indicate the business id and days which are opened from 8AM to 6PM.", "sql": "SELECT DISTINCT day_id FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'", "source_tables": ["business_hours"]}, "evidence": "opened from 8AM to 6PM refers to Business_Hours where opening_time = '8AM' and closing_time = '6PM'; days refer to day_id;"}
{"sample_id": 3999, "db_id": "public_review_platform", "final": {"question": "How many closed businesses that have more than 10 attributes?", "sql": "SELECT COUNT(*) FROM Business WHERE business_id IN ( SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.active = 'false' GROUP BY T1.business_id HAVING COUNT(DISTINCT T2.attribute_id) > 10 )", "source_tables": ["business_attributes", "business"]}, "evidence": "closed refers to active = 'false'; more than 10 attributes refers to count(attribute_id) > 10"}
{"sample_id": 4068, "db_id": "public_review_platform", "final": {"question": "Please provide the name of businesses with user id \"16328\".", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Tips AS T3 ON T2.business_id = T3.business_id WHERE T3.user_id = 16328", "source_tables": ["tips", "business_categories", "categories"]}, "evidence": "name of business refers to category_name;"}
{"sample_id": 3839, "db_id": "public_review_platform", "final": {"question": "How many businesses of Yelp are in Scottsdale?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale'", "source_tables": ["business"]}, "evidence": "Scottsdale refers to city = 'Scottsdale';"}
{"sample_id": 4085, "db_id": "public_review_platform", "final": {"question": "Within the user who joined Yelp in 2004, explore the user ID with average star of 5 and it's review length on the business.", "sql": "SELECT T2.user_id, T2.review_length FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2004 AND T1.user_average_stars = 5", "source_tables": ["reviews", "users"]}, "evidence": "user who joined Yelp in 2004 refers to user_id where user_yelping_since_year = 2014; user_average_stars = 5;"}
{"sample_id": 3897, "db_id": "public_review_platform", "final": {"question": "List the closing time and day of week of active businesses in Tempe with stars greater than the 70% of average age of star rating.", "sql": "SELECT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Tempe' AND T1.active LIKE 'TRUE' AND T1.stars > 0.7 * ( SELECT AVG(T1.stars) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Tempe' AND T1.active LIKE 'TRUE' )", "source_tables": ["days", "business", "business_hours"]}, "evidence": "active businesses refers to active = 'true'; in Tempe refers to city = 'Tempe'; with stars greater than the 70% of average age of star rating refers to stars > DIVIDE(sum(stars), COUNT(business_id)) * 70%"}
{"sample_id": 3899, "db_id": "public_review_platform", "final": {"question": "How many businesses are with high review count?", "sql": "SELECT COUNT(business_id) FROM Business WHERE review_count LIKE 'High'", "source_tables": ["business"]}, "evidence": "high review count refers to review_count = 'High'"}
{"sample_id": 4050, "db_id": "public_review_platform", "final": {"question": "How many active businesses are opened during late afternoon in the Phoenix city? List out the top 3 categories name for these businesses.", "sql": "SELECT DISTINCT T4.category_name FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.city = 'Phoenix' AND T1.opening_time >= '5PM' LIMIT 3", "source_tables": ["business_categories", "business", "business_hours", "categories"]}, "evidence": "opened during late afternoon refers to Business_Hours where opening_time \u2265 '5PM'; active businesses refer to business_id where active = 'true';"}
{"sample_id": 3905, "db_id": "public_review_platform", "final": {"question": "Which business in fashion category has the most review?", "sql": "SELECT T3.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Reviews AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion' AND T1.category_id = 7 GROUP BY T3.business_id ORDER BY COUNT(T4.user_id) DESC LIMIT 1", "source_tables": ["reviews", "business_categories", "business", "categories"]}, "evidence": "'Fashion' is the category_name; most review refers to Max(Count(user_id))"}
{"sample_id": 3948, "db_id": "public_review_platform", "final": {"question": "How many businesses have shopping centers and received high review count?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Shopping Centers' AND T3.review_count = 'High'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "\"Shopping Centers\" is the category_name; high review count refers to review_count = 'High'"}
{"sample_id": 3924, "db_id": "public_review_platform", "final": {"question": "What is the attribute of the business with highest star rating?", "sql": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "highest star rating Max(stars); attribute of business refers to attribute_name"}
{"sample_id": 3792, "db_id": "public_review_platform", "final": {"question": "Give the number of \"drive-thru\" businesses in \"Scottsdale\" with business ID number less than \"1000\".", "sql": "SELECT T2.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.business_id < 1000 AND T3.city LIKE 'Scottsdale' AND T1.attribute_name LIKE 'Drive-Thru' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "drive-thru refers to attribute_name = 'Drive-Thru' AND attribute_value = 'true'; Scottsdale refers to city = 'Scottsdale'; business_id < 1000;"}
{"sample_id": 3777, "db_id": "public_review_platform", "final": {"question": "How many users who have joined Yelp since \"2005\" but have no fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2005 AND user_fans LIKE 'None'", "source_tables": ["users"]}, "evidence": "joined Yelp since 2005 refers to user_yelping_since_year = 2005; no fans refers to user_fans = 'None';"}
{"sample_id": 4079, "db_id": "public_review_platform", "final": {"question": "Mention the user ID and their year of joining Yelp who had great experience on business ID 143.", "sql": "SELECT T2.user_id, T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.business_id = 143 AND T1.review_stars = 5", "source_tables": ["reviews", "users"]}, "evidence": "year of joining Yelp refers to user_yelping_since_year; great experience refers to Reviews where review_stars = 5;"}
{"sample_id": 4115, "db_id": "public_review_platform", "final": {"question": "In how many businesses with the ambience_trendy attribute?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'ambience_trendy' AND T2.attribute_value IN ('none', 'no', 'false')", "source_tables": ["business_attributes", "attributes"]}, "evidence": "ambience_trendy attribute refers to attribute_name = 'ambience_trendy' AND attribute_value = 'false'"}
{"sample_id": 3828, "db_id": "public_review_platform", "final": {"question": "Please state any three business numbers in AZ state that have received the \"Great experience\" review stars.", "sql": "SELECT DISTINCT T2.business_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state LIKE 'AZ' AND T1.review_stars = 5 LIMIT 3", "source_tables": ["business", "reviews"]}, "evidence": "business numbers refers to business_id; great experience review stars refers to review_stars = 5;"}
{"sample_id": 3867, "db_id": "public_review_platform", "final": {"question": "Please list the categories of the Yelp_Business that closes at 12PM on Sundays.", "sql": "SELECT T4.category_name FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T4.category_id = T4.category_id WHERE T1.closing_time = '12PM' AND T2.day_of_week = 'Sunday' GROUP BY T4.category_name", "source_tables": ["days", "business_categories", "business_hours", "categories"]}, "evidence": "categories refers to category_name; closes at 12PM refers to closing_time = '12PM'; on Sundays refers to day_of_week = 'Sunday'"}
{"sample_id": 4076, "db_id": "public_review_platform", "final": {"question": "Provide the list of user ID along with review star of which has the review length of medium with business ID of 35.", "sql": "SELECT user_id, review_stars FROM Reviews WHERE business_id = 15 AND review_length = 'Medium'", "source_tables": ["reviews"]}, "evidence": ";"}
{"sample_id": 4006, "db_id": "public_review_platform", "final": {"question": "How many businesses that are registered in the database can be attributed to 'Good for Kids'?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'Good for Kids' AND T2.attribute_value = 'true'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "can be attributed to 'Good for Kids' refers to attribute_name = 'Good for Kids' and attribute_value = 'true'"}
{"sample_id": 3758, "db_id": "public_review_platform", "final": {"question": "How many Yelp businesses are there in 'AZ' with less than \"3\" stars?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND stars < 3", "source_tables": ["business"]}, "evidence": "AZ refers to state = 'AZ'; stars < 3;"}
{"sample_id": 3791, "db_id": "public_review_platform", "final": {"question": "Who has got the most number of \"funny\" type of compliments? Give the user ID.", "sql": "SELECT user_id FROM Users_Compliments WHERE compliment_id IN ( SELECT compliment_id FROM Compliments WHERE compliment_type LIKE 'funny' )", "source_tables": ["compliments", "users_compliments"]}, "evidence": "type of compliments refers to compliment_type; most number of funny type of compliments refers to MAX(COUNT(number of compliments = 'high' WHERE compliment_type = 'funny'));"}
{"sample_id": 4035, "db_id": "public_review_platform", "final": {"question": "Which year has the most elite users?", "sql": "SELECT year_id FROM Elite GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1", "source_tables": ["elite"]}, "evidence": "year has the most elite users refers to year_id with MAX(user_id);"}
{"sample_id": 3989, "db_id": "public_review_platform", "final": {"question": "List all the users with average star less than 3 stars in 2012", "sql": "SELECT user_id FROM Users WHERE user_yelping_since_year = 2012 AND user_average_stars < 3", "source_tables": ["users"]}, "evidence": "average star less than 3 stars refers to user_average_stars < 3; in 2012 refers to user_yelping_since_year = 2012"}
{"sample_id": 3766, "db_id": "public_review_platform", "final": {"question": "What business category is the Yelp business which got the most 5 star reviews in?", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Reviews AS T4 ON T3.business_id = T4.business_id WHERE T4.review_stars = 5 GROUP BY T1.category_name ORDER BY COUNT(T1.category_name) DESC LIMIT 1", "source_tables": ["reviews", "business_categories", "business", "categories"]}, "evidence": "business category refers to category_name; most 5 star reviews refers to MAX(COUNT(category_name WHERE star_reviews = 5));"}
{"sample_id": 4136, "db_id": "public_review_platform", "final": {"question": "What is the opening time of the active businesses in Glendale that have a medium review count.", "sql": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Glendale' AND T1.review_count = 'Medium' AND T1.active = 'true'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "active business ID refers to active = 'true'; Glendale is a city; medium review count refers to review_count = 'Medium'"}
{"sample_id": 3767, "db_id": "public_review_platform", "final": {"question": "In which year did the user who gave the most number of \"5\" star reviews join the Yelp?", "sql": "SELECT T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_stars = 5 GROUP BY T2.user_yelping_since_year ORDER BY COUNT(T1.review_stars) DESC LIMIT 1", "source_tables": ["reviews", "users"]}, "evidence": "year the user join the Yelp refers to user_yelping_since_year; star reviews refers to review_stars;"}
{"sample_id": 4096, "db_id": "public_review_platform", "final": {"question": "How many user's compliment in photo has medium in number?", "sql": "SELECT COUNT(T2.user_id) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'photos' AND T2.number_of_compliments = 'Medium'", "source_tables": ["compliments", "users_compliments"]}, "evidence": "user's compliment in photo refers to compliment_type = 'photo'; photo has medium in number refers to number_of_compliments = 'Medium'"}
{"sample_id": 4082, "db_id": "public_review_platform", "final": {"question": "Among the elite users of 10 consecutive year from 2005 to 2014, list down the user ID and their number of compliment on photos.", "sql": "SELECT T2.user_id, T2.number_of_compliments FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Elite AS T3 ON T2.user_id = T3.user_id WHERE T3.year_id BETWEEN 2005 AND 2014 AND T1.compliment_type = 'photos'", "source_tables": ["compliments", "elite", "users_compliments"]}, "evidence": "from 2005 to 2014 refers to year_id BETWEEN 2005 AND 2014; compliment_type = 'photos';"}
{"sample_id": 4024, "db_id": "public_review_platform", "final": {"question": "Among the businesses without attribute, how many businesses located in Gilbert?", "sql": "SELECT COUNT(T2.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'Gilbert' AND T1.attribute_value IN ('None', 'no', 'false')", "source_tables": ["business_attributes", "business"]}, "evidence": "without attribute refers to attribute_value = 'None'; in Gilbert refers to city = 'Gilbert'"}
{"sample_id": 3824, "db_id": "public_review_platform", "final": {"question": "What are the attribute numbers that are related to payment?", "sql": "SELECT attribute_id FROM Attributes WHERE attribute_name LIKE '%payment%'", "source_tables": ["attributes"]}, "evidence": "attribute numbers refers to attribute_id; related to payment refers to attribute_name like '%payment%';"}
{"sample_id": 4027, "db_id": "public_review_platform", "final": {"question": "List out the category name of business id 5.", "sql": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.business_id = 5", "source_tables": ["business_categories", "categories"]}, "evidence": ""}
{"sample_id": 3784, "db_id": "public_review_platform", "final": {"question": "Give the number of \"dogs allowed\" Yelp businesses.", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Dogs Allowed' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "number of Yelp businesses refers to business_id; dogs allowed refers to attribute_name = 'Dogs Allowed' AND attribute_value = 'true';"}
{"sample_id": 3884, "db_id": "public_review_platform", "final": {"question": "Among the businesses in Chandler, list the attribute of the business with a low review count.", "sql": "SELECT DISTINCT T3.attribute_id, T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.attribute_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.review_count = 'Low' AND T1.city = 'Chandler'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "in Chandler refers to city = 'Chandler'; attribute refers to attribute_name"}
{"sample_id": 4004, "db_id": "public_review_platform", "final": {"question": "How many active businesses from Casa Grande are registered in the database?", "sql": "SELECT COUNT(business_id) FROM Business WHERE active = 'true' AND city = 'Casa Grande'", "source_tables": ["business"]}, "evidence": "active business refers to active = 'true'; Casa Grande refers to city = 'Casa Grande'"}
{"sample_id": 3848, "db_id": "public_review_platform", "final": {"question": "Among the long reviews made by user ID 3, how many of them have received a medium number of useful votes?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3 AND review_length LIKE 'Long' AND review_votes_useful LIKE 'Medium'", "source_tables": ["reviews"]}, "evidence": "long reviews refers to review_length = 'Long'; medium number of useful votes refers to review_votes_useful = 'medium';"}
{"sample_id": 4113, "db_id": "public_review_platform", "final": {"question": "How many users who have received a low cool vote have also received at least 1 low cool vote for some of their reviews?", "sql": "SELECT COUNT(DISTINCT T1.user_id) FROM Users AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id WHERE T1.user_votes_cool = 'Low' AND T2.review_votes_cool = 'Low'", "source_tables": ["reviews", "users"]}, "evidence": "low cool vote for user refers to user_votes_cool = 'Low';\u00a0 low cool vote for review refers to review_votes_cool = 'Low'"}
{"sample_id": 3829, "db_id": "public_review_platform", "final": {"question": "Please name one attribute that business number 2 does not have.", "sql": "SELECT T1.attribute_name FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'none' LIMIT 1", "source_tables": ["business_attributes", "attributes"]}, "evidence": "business number refers to business_id; business_id = 2; does not have refers to attribute_value = 'none';"}
{"sample_id": 4034, "db_id": "public_review_platform", "final": {"question": "Which business ID has the most reviews?", "sql": "SELECT business_id FROM Reviews GROUP BY business_id ORDER BY COUNT(user_id) DESC LIMIT 1", "source_tables": ["reviews"]}, "evidence": "the most reviews refer to MAX(user_id);"}
{"sample_id": 3823, "db_id": "public_review_platform", "final": {"question": "What is the number of useful votes that the user 52592 received when reviewed for business number 2?", "sql": "SELECT review_votes_useful FROM Reviews WHERE user_id = 52592 AND business_id = 2", "source_tables": ["reviews"]}, "evidence": "number of useful votes refers to review_votes_useful; business number refers to business_id;"}
{"sample_id": 4124, "db_id": "public_review_platform", "final": {"question": "What is the review length of user 11021 to business with business ID 3?", "sql": "SELECT review_length FROM Reviews WHERE user_id = 11021 AND business_id = 3", "source_tables": ["reviews"]}, "evidence": "review length refers to review_length; user 11021 refers to user_id = 11021; business ID 3 refers to business_id = 3"}
{"sample_id": 4019, "db_id": "public_review_platform", "final": {"question": "List out city name of businesses which have medium length of review.", "sql": "SELECT DISTINCT T1.city FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_length = 'Medium'", "source_tables": ["reviews", "business"]}, "evidence": "medium length of review refers to review_length = 'Medium'"}
{"sample_id": 4052, "db_id": "public_review_platform", "final": {"question": "What is the average number of reviews written for active businesses that operate not more than 30 hours a week?", "sql": "SELECT AVG(T3.user_id) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Reviews AS T3 ON T1.business_id = T3.business_id WHERE T1.active = 'true' GROUP BY T2.closing_time - T2.opening_time HAVING SUM(T2.closing_time - T2.opening_time) < 30", "source_tables": ["reviews", "business", "business_hours"]}, "evidence": "avg(user_id) where active = 'true' and SUM(SUBTRACT(closing_time, opening_time)) < 30;"}
{"sample_id": 3842, "db_id": "public_review_platform", "final": {"question": "Which city has more Yelp_Business that's more appealing to users, Scottsdale or Anthem?", "sql": "SELECT city FROM Business ORDER BY review_count DESC LIMIT 1", "source_tables": ["business"]}, "evidence": "more appealing to users refers to MAX(review_count);"}
{"sample_id": 4131, "db_id": "public_review_platform", "final": {"question": "What is the closing and opening time of businesses located at Glendale with highest star rating?", "sql": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Glendale' ORDER BY T1.stars DESC LIMIT 1", "source_tables": ["business", "business_hours"]}, "evidence": "Glendale is a city; the highest star rating refers to MAX(stars)"}
{"sample_id": 3799, "db_id": "public_review_platform", "final": {"question": "How many businesses operating in the shopping business have opening times before 8AM?", "sql": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T4.opening_time < '8AM' AND T1.category_name LIKE 'Shopping'", "source_tables": ["business_categories", "business", "business_hours", "categories"]}, "evidence": "shopping business refers to category_name = 'Shopping'; opening time before 8AM refers to opening_time < '8AM';"}
{"sample_id": 4005, "db_id": "public_review_platform", "final": {"question": "What time does the business with ID no.12 open on Monday?", "sql": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.business_id = 12 AND T2.day_of_week = 'Monday'", "source_tables": ["days", "business_hours"]}, "evidence": "open time refers to opening_time; on Monday refers to day_of_week = 'Monday'; business with ID no. refers to business_id \n\n"}
{"sample_id": 4059, "db_id": "public_review_platform", "final": {"question": "Please indicate the closing hours and business days of the businesses with the category named Doctors.", "sql": "SELECT DISTINCT T3.opening_time, T3.day_id FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Doctors'", "source_tables": ["days", "business_categories", "business_hours", "categories"]}, "evidence": "closing hours refer to closing_time; business days refer to day_id from Business_Hours;"}
{"sample_id": 3921, "db_id": "public_review_platform", "final": {"question": "Among the businesses in Scottsdale, list the attribute of the business with a high review count.", "sql": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.review_count LIKE 'High' AND T1.city LIKE 'Scottsdale' GROUP BY T3.attribute_name", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "\"Scottsdale\" is the name of city; high review count refers to review_count = 'High'; attribute of the business refers to attribute_name"}
{"sample_id": 3793, "db_id": "public_review_platform", "final": {"question": "What is the average rating for the all Yelp businesses that open 24 hours?", "sql": "SELECT CAST(SUM(T3.stars) AS REAL) / COUNT(T2.business_id) AS \"avg\" FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'Open 24 Hours' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "open 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true'; rating refers to stars; average rating = AVG(stars);"}
{"sample_id": 4084, "db_id": "public_review_platform", "final": {"question": "Write down the ID and opening day of a week for the business which are running in Black Canyon City.", "sql": "SELECT T2.business_id, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' AND T1.active = 'true'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "running refers to active = 'true'; opening day of a week means days of the week when business is open;"}
{"sample_id": 4087, "db_id": "public_review_platform", "final": {"question": "Calculate the difference between running business in Glendale City and Mesa City.", "sql": "SELECT SUM(CASE WHEN city = 'Glendale' THEN 1 ELSE 0 END) - SUM(CASE WHEN city = 'Mesa' THEN 1 ELSE 0 END) AS diff FROM Business WHERE active = 'true'", "source_tables": ["business"]}, "evidence": "running business refers to business where active = 'true';"}
{"sample_id": 4130, "db_id": "public_review_platform", "final": {"question": "Count the active businesses that has an attribute of BYOB with high review count.", "sql": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name = 'BYOB' AND T1.review_count = 'High' AND T1.active = 'true'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "active business ID refers to active = 'true'; category of Food refers to category_name = 'Food'; attribute of BYOB refers to attribute_name = 'BYOB'; high review count refers to review_count = 'High'"}
{"sample_id": 3996, "db_id": "public_review_platform", "final": {"question": "How many businesses in Glendale are reviewed by user with the ID of 20241?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Glendale' AND T2.user_id = 20241", "source_tables": ["reviews", "business"]}, "evidence": "in Glendale refers to city = 'Glendale'"}
{"sample_id": 3949, "db_id": "public_review_platform", "final": {"question": "How many businesses accept insurance?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'Accepts Insurance' AND T1.attribute_value = 'true'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "business that accept insurance refers to attribute_name = 'Accepts Insurance' AND attribute_value = 'true'"}
{"sample_id": 3845, "db_id": "public_review_platform", "final": {"question": "Please list the cities of the Yelp_Businesses that have gotten a 5 in the Elitestar rating.", "sql": "SELECT city FROM Business WHERE stars = 5 GROUP BY city", "source_tables": ["business"]}, "evidence": "5 in the Elitestar rating refers to stars = 5;"}
{"sample_id": 3966, "db_id": "public_review_platform", "final": {"question": "Is the payment in mastercard possible for the Yelp business No.\"12476\"?", "sql": "SELECT T1.attribute_value FROM Business_Attributes AS T1 INNER JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.business_id = 12476 AND T2.attribute_name = 'payment_types_mastercard'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "Yelp business No.\"12476\" refers to business_id = '12476'; payment in mastercard refers to attribute_value = 'payment_types_mastercard'"}
{"sample_id": 3838, "db_id": "public_review_platform", "final": {"question": "How many businesses in AZ state do not open on Thursday?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Checkins AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.label_time_4 LIKE 'None' AND T1.state LIKE 'AZ' AND T3.day_of_week LIKE 'Thursday'", "source_tables": ["checkins", "business", "days"]}, "evidence": "do not open on Thursday refers to day_of_week = 'Thursday' AND label_time_4 = 'None';"}
{"sample_id": 3796, "db_id": "public_review_platform", "final": {"question": "How many active businesses of city are underrated?", "sql": "SELECT COUNT(business_id) FROM Business WHERE review_count LIKE 'Low' AND active LIKE 'TRUE'", "source_tables": ["business"]}, "evidence": "active businesses refers to active = 'true'; underrated refers to review_count = 'Low';"}
{"sample_id": 4048, "db_id": "public_review_platform", "final": {"question": "What is the average year for a user to be upgraded to elite user?", "sql": "SELECT CAST(SUM(T2.year_id - T1.user_yelping_since_year) AS REAL) / COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id", "source_tables": ["elite", "users"]}, "evidence": "AVG(user_yelping_since_year) where user_id from Elite;"}
{"sample_id": 3851, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Businesses do not provide alcohol?", "sql": "SELECT COUNT(T1.attribute_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Alcohol' AND T2.attribute_value LIKE 'none'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "do not provide alcohol refers to attribute_name = 'Alcohol'and attribute_value = 'none'\n"}
{"sample_id": 4011, "db_id": "public_review_platform", "final": {"question": "Identify the percent of long reviews among all 5-star reviews given to businesses by the Yelp users.", "sql": "SELECT CAST(SUM(CASE WHEN review_length = 'Long' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(review_length) FROM Reviews WHERE review_stars = 5", "source_tables": ["reviews"]}, "evidence": "percentage = divide(count(business_id where review_length = 'Long' and review_stars = 5), count(business_id)) * 100%; long reviews refers to review_length = 'Long'; 5-star review refers to review_stars = 5"}
{"sample_id": 3901, "db_id": "public_review_platform", "final": {"question": "How many attributes ID owned by business ID 2?", "sql": "SELECT COUNT(attribute_id) FROM Business_Attributes WHERE business_id = 2", "source_tables": ["business_attributes"]}, "evidence": ""}
{"sample_id": 3997, "db_id": "public_review_platform", "final": {"question": "State the locations of all Pet Services business.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Pet Services'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "location refers to city; Pet Services business refers to category_name = 'Pet Services'"}
{"sample_id": 4106, "db_id": "public_review_platform", "final": {"question": "How many of the users who use a high number of compliments do not have any fans?", "sql": "SELECT COUNT(T2.user_id) FROM Users_Compliments AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.number_of_compliments = 'High' AND T2.user_fans = 'None'", "source_tables": ["users_compliments", "users"]}, "evidence": "do not have fans refers to user_fans = 'None'; high number of compliment refers to number_of_compliments = 'High'"}
{"sample_id": 3941, "db_id": "public_review_platform", "final": {"question": "Among the active businesses in Ahwatukee, which of them are still open in Sunday?", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Ahwatukee' AND T1.active LIKE 'TRUE' AND T3.day_of_week LIKE 'Sunday'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "active business refers to active = 'true'; 'Ahwatukee' is the name of city; open in Sunday refers to day_of_week = 'Sunday'"}
{"sample_id": 3837, "db_id": "public_review_platform", "final": {"question": "How long does business number 12 in Scottsdale stay open on day number 3?", "sql": "SELECT T2.closing_time - T2.opening_time AS \"hour\" FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.business_id = 12 AND T1.city LIKE 'Scottsdale' AND T2.day_id = 3", "source_tables": ["business", "business_hours"]}, "evidence": "business number refers to business_id; Scottsdale refers to city = 'Scottsdale'; day number refers to day_id;"}
{"sample_id": 4038, "db_id": "public_review_platform", "final": {"question": "Which business ID have the shortest business operating hours?", "sql": "SELECT business_id FROM Business_Hours ORDER BY closing_time - opening_time LIMIT 1", "source_tables": ["business_hours"]}, "evidence": "the shortest business operating hours refer to MIN(SUBTRACT(closing_time, opening_time));"}
{"sample_id": 3864, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Business close after 8PM on Mondays?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Monday' AND T1.closing_time > '8PM'", "source_tables": ["days", "business_hours"]}, "evidence": "close after 8PM refers to closing_time = '9PM' or closing_time = '10PM' closing_time = '11PM' closing_time = '12PM'; Mondays refers to day_of_week = 'Monday'"}
{"sample_id": 4002, "db_id": "public_review_platform", "final": {"question": "What is the ratio between business in shopping category and business in pets category?", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Shopping' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS radio FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["business_categories", "categories"]}, "evidence": "ratio = divide(count(business_id where category_name = 'Shopping'), count(business_id where category_name = 'Pets'))"}
{"sample_id": 4023, "db_id": "public_review_platform", "final": {"question": "Among the users who received low compliments from other users, which users joined Yelp in 2012?", "sql": "SELECT DISTINCT T2.user_id FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2012 AND T2.number_of_compliments = 'Low'", "source_tables": ["users", "users_compliments"]}, "evidence": "low compliments refers to number_of_compliments = 'Low'; joined Yelp in 2012 refers to user_yelping_since_year = 2012"}
{"sample_id": 3882, "db_id": "public_review_platform", "final": {"question": "In users yelping since 2011 to 2013, how many of them have high count of fans?", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2011 AND 2013 AND user_fans LIKE 'High'", "source_tables": ["users"]}, "evidence": "In users yelping since 2011 to 2013 refers to user_yelping_since_year > = 2011 AND user_yelping_since_year < 2014"}
{"sample_id": 4043, "db_id": "public_review_platform", "final": {"question": "List out 10 business ID that are being reviewed the most by users and list out what are top 3 business categories.", "sql": "SELECT T2.business_id, T3.category_name FROM Reviews AS T1 INNER JOIN Business_categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id GROUP BY T2.business_id ORDER BY COUNT(T1.user_id) DESC LIMIT 10", "source_tables": ["business_categories", "reviews", "categories"]}, "evidence": "being reviewed the most refers to MAX(user_id); business categories refer to category_name;"}
{"sample_id": 4069, "db_id": "public_review_platform", "final": {"question": "How many businesses have the category named food? List those businesses and find the percentage of businesses with less than 2 stars.", "sql": "SELECT T3.business_id, CAST((( SELECT COUNT(business_id) FROM Business WHERE stars < 2 ) - ( SELECT COUNT(business_id) FROM Business WHERE stars > 2 )) AS REAL) * 100 / ( SELECT COUNT(stars) FROM Business ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.category_name = 'Food'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "businesses have the category named food refer to business_id where category_name = 'Food'; DIVIDE(COUNT(business_id where category_name = 'Food' and stars < 2), COUNT(business_id where category_name = 'Food')) as percentage;"}
{"sample_id": 3872, "db_id": "public_review_platform", "final": {"question": "How many elite users have reviewed Yelp_Business no.1?", "sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id INNER JOIN Reviews AS T3 ON T1.user_id = T3.user_id WHERE T3.business_id = 1", "source_tables": ["elite", "reviews", "users"]}, "evidence": "Yelp_Business no.1 refers to business_id = 1"}
{"sample_id": 4018, "db_id": "public_review_platform", "final": {"question": "What are the opening and closing time of business id 1 for day id 2?", "sql": "SELECT opening_time, closing_time FROM Business_Hours WHERE business_id = 1 AND day_id = 2", "source_tables": ["business_hours"]}, "evidence": "false"}
{"sample_id": 4017, "db_id": "public_review_platform", "final": {"question": "Mention the number of businesses that have no any attribute.", "sql": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_value IN ('none', 'no', 'false')", "source_tables": ["business_attributes"]}, "evidence": "have no attribute refers to attribute_value in( 'none', 'no', 'false')"}
{"sample_id": 4072, "db_id": "public_review_platform", "final": {"question": "Calculate the yearly average user who started using Yelp from the year of 2005 to 2014.", "sql": "SELECT AVG(user_id) FROM Users WHERE user_yelping_since_year >= 2005 AND user_yelping_since_year <= 2015", "source_tables": ["users"]}, "evidence": "avg(user_id) where user_yelping_since_year BETWEEN '2005' AND '2014';"}
{"sample_id": 3911, "db_id": "public_review_platform", "final": {"question": "What is the average number of review received by each business given that the user is an elite?", "sql": "SELECT CAST(COUNT(T1.user_id) AS REAL) / COUNT(DISTINCT T1.business_id) FROM Reviews AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id", "source_tables": ["elite", "reviews"]}, "evidence": "average review = Divide(Count(user_id), Count(business_id))"}
{"sample_id": 4091, "db_id": "public_review_platform", "final": {"question": "For businesses with long length reviews, which state are they located?", "sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.tip_length = 'Long'", "source_tables": ["tips", "business"]}, "evidence": "businesses with long length tips refer to business_id where tip_length = 'Long';"}
{"sample_id": 3977, "db_id": "public_review_platform", "final": {"question": "Under the attribute name of \"music_playlist\", describe the attribute ID, business ID, city and inactive status.", "sql": "SELECT T1.attribute_id, T2.business_id, T3.city FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'music_playlist' AND T3.active = 'false'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "active status refers to active; active = 'true' means the business is still running; active = 'false' means the business is inactive or not running now"}
{"sample_id": 4045, "db_id": "public_review_platform", "final": {"question": "What is the percentage of user not becoming an elite user?", "sql": "SELECT CAST((( SELECT COUNT(user_id) FROM Users ) - ( SELECT COUNT(DISTINCT user_id) FROM Elite )) AS REAL) * 100 / ( SELECT COUNT(user_id) FROM Users )", "source_tables": ["elite", "users"]}, "evidence": "DIVIDE(SUBTRACT(COUNT(user_id), COUNT(Elite.user_id)), COUNT(user_id)) as percentage;"}
{"sample_id": 3776, "db_id": "public_review_platform", "final": {"question": "Give the number of users who joined Yelp since \"2004\".", "sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2004", "source_tables": ["users"]}, "evidence": "joined yelp since 2004 refers to user_yelping_since_year = 2004;"}
{"sample_id": 3775, "db_id": "public_review_platform", "final": {"question": "What percentage more for the \"Women's Clothing\" Yelp businesses to \"Men's Clothing\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.category_name LIKE 'Women''s Clothing' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) - CAST(SUM(CASE WHEN T2.category_name LIKE 'Men''s Clothing' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS \"more percentage\" FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["business_categories", "categories"]}, "evidence": "Women's clothing refers to category_name = 'Women''s Clothing'; Men's clothing refers to category_name = 'Men''s Clothing'; percentage more = MULTIPLY(DIVIDE(SUBTRACT(SUM(category_name = 'Women''s Clothing'), SUM(category_name = 'Men''s Clothing')), COUNT(business_id)), 1.0);"}
{"sample_id": 3846, "db_id": "public_review_platform", "final": {"question": "How many reviews have the user whose ID is 3 posted?", "sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3", "source_tables": ["reviews"]}, "evidence": ""}
{"sample_id": 4138, "db_id": "public_review_platform", "final": {"question": "List the closing time and day of week of active businesses in Goodyear with stars greater than the 80% of average age of star rating.", "sql": "SELECT DISTINCT T2.closing_time, T3.day_of_week FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.active = 'true' AND T1.city = 'Goodyear' AND T1.stars > ( SELECT AVG(stars) * 0.8 FROM Business WHERE active = 'true' AND city = 'Goodyear' )", "source_tables": ["days", "business", "business_hours"]}, "evidence": "active business ID refers to active = 'true'; Goodyear is a city; Calculation = AVG(stars) * 0.8; businesses with stars greater than 80% of average star rating refers to stars > AVG(stars) * 0.8"}
{"sample_id": 3896, "db_id": "public_review_platform", "final": {"question": "Among the businesses with a category of Accessories, what is the percentage of the business with less than 4 stars?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars < 4 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.stars) AS \"percentage\" FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Accessories'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "category of Accessories refers to category_name = 'Accessories'; percentage of the business with less than 4 stars = divide(count(Business.business_id(stars < 4)), count(Business.business_id)) * 100%"}
{"sample_id": 3833, "db_id": "public_review_platform", "final": {"question": "What are the categories that business number 15 belongs to?", "sql": "SELECT T2.category_name FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.business_id = 15", "source_tables": ["business_categories", "categories"]}, "evidence": "business number refers to business_id;"}
{"sample_id": 4000, "db_id": "public_review_platform", "final": {"question": "List the business located in Mesa that have alcohol attribute.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Mesa' AND T3.attribute_name = 'Alcohol'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "in Mesa refers to city = 'Mesa'; alcohol attribute refers to attribute_name = 'Alcohol'"}
{"sample_id": 3821, "db_id": "public_review_platform", "final": {"question": "What percentage of businesses are in the Real Estate sector and have the rating of 5 out of all businesses in Chandler?", "sql": "SELECT CAST(SUM(CASE WHEN T1.stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS \"percentage\" FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.city LIKE 'Chandler' AND T3.category_name LIKE 'Real Estate'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "Real Estate sector refers to category_name = 'Real Estate'; rating of 5 refers to stars = 5; Chandler refers to city = 'Chandler'; percentage = MULTIPLY(DIVIDE(SUM(category_name = 'Real Estate' and stars = 5), COUNT(business_id)), 100);"}
{"sample_id": 3805, "db_id": "public_review_platform", "final": {"question": "Please list the businesses names whose length of user review is long with business id from 1 to 20.", "sql": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Long' AND T3.category_id BETWEEN 1 AND 20 GROUP BY T4.category_name", "source_tables": ["business", "business_categories", "reviews", "categories"]}, "evidence": "businesses names refers to business_id; length of user review is long refers to review_length = 'Long'; business_id BETWEEN 1 AND 20;"}
{"sample_id": 3856, "db_id": "public_review_platform", "final": {"question": "Among the Yelp_Businesses which are still running, how many of them fall under the category of \"Food\"?", "sql": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Food' AND T3.active LIKE 'TRUE'", "source_tables": ["tips", "business_categories", "business", "categories"]}, "evidence": "are still running refers to active = 'true'; the category of \"Food\" refers to category_name = 'Food'"}
{"sample_id": 4036, "db_id": "public_review_platform", "final": {"question": "How many 5 star businesses have uber review votes for funny?", "sql": "SELECT COUNT(business_id) FROM Reviews WHERE review_stars = 5 AND review_votes_funny = 'Uber'", "source_tables": ["reviews"]}, "evidence": "businesses refer to business_id; review_stars = 5.0; review_votes_funny = 'uber';"}
{"sample_id": 4057, "db_id": "public_review_platform", "final": {"question": "What are the categories of businesses that have opening time on Sunday?", "sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T2.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T4.day_of_week = 'Sunday' AND T3.opening_time <> ''", "source_tables": ["days", "business_categories", "business_hours", "categories"]}, "evidence": "categories of businesses refer to category_name; Sunday refers to day_of_week where day_id = 1;"}
{"sample_id": 3926, "db_id": "public_review_platform", "final": {"question": "Count the active businesses that has an attribute of Wi-Fi with medium review count.", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T3.attribute_name LIKE 'Wi-Fi' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "active business refers to active = 'true'; 'Wi-Fi' is the attribute_name; medium review count refers to review_count = 'Medium'"}
{"sample_id": 3827, "db_id": "public_review_platform", "final": {"question": "How many businesses in the AZ state got low quality of reviews?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND review_count LIKE 'Low'", "source_tables": ["business"]}, "evidence": "low quality of reviews refers to review_count = 'low';"}
{"sample_id": 4022, "db_id": "public_review_platform", "final": {"question": "Among the users whose fan is medium, how many users received high compliments from other users.", "sql": "SELECT COUNT(T1.user_id) FROM Users AS T1 INNER JOIN Users_Compliments AS T2 ON T1.user_id = T2.user_id WHERE T2.number_of_compliments = 'High' AND T1.user_fans = 'Medium'", "source_tables": ["users", "users_compliments"]}, "evidence": "is medium refers to user_fans = 'Medium'; high compliments refers to number_of_compliments = 'High'"}
{"sample_id": 4095, "db_id": "public_review_platform", "final": {"question": "What are the states of businesses with attribute of beer and wine located?", "sql": "SELECT DISTINCT T2.state FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'beer_and_wine'", "source_tables": ["business_attributes", "business"]}, "evidence": "with attribute of beer and wine refers to attribute_value = 'beer_and_wine';"}
{"sample_id": 4003, "db_id": "public_review_platform", "final": {"question": "How many businesses are registered in the database under 'Banks & Credit Unions' category?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name = 'Banks & Credit Unions'", "source_tables": ["business_categories", "categories"]}, "evidence": "category refers to category_name"}
{"sample_id": 3807, "db_id": "public_review_platform", "final": {"question": "How many compliments received from medium users that Phoenix city achieved?", "sql": "SELECT COUNT(T1.number_of_compliments) FROM Users_Compliments AS T1 INNER JOIN Reviews AS T2 ON T1.user_id = T2.user_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city LIKE 'Phoenix' AND T1.number_of_compliments LIKE 'Medium'", "source_tables": ["business", "reviews", "users_compliments"]}, "evidence": "medium refers to number_of_compliments = 'Medium';"}
{"sample_id": 3834, "db_id": "public_review_platform", "final": {"question": "How many businesses are there in Scottsdale city under the category of \"Beauty & Spas\"?", "sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city LIKE 'Scottsdale' AND T1.category_name LIKE 'Beauty & Spas'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "category refers to category_name;"}
{"sample_id": 4008, "db_id": "public_review_platform", "final": {"question": "Find the 5-star business in Ahwatukee, AZ and identify it's business category.", "sql": "SELECT T1.business_id, T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.city = 'Ahwatukee' AND T1.stars = 5", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "5-star refers to stars = 5; in Ahwatukee refers to city = 'Ahwatukee'; business category refers to category_name"}
{"sample_id": 3961, "db_id": "public_review_platform", "final": {"question": "For the Yelp businesses which received a \"5\" star review with \"uber\" number of votes for funny, which one is located in \"Phoenix\"? Give the business ID.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix' AND T2.review_stars = 5 AND T2.review_votes_funny = 'Uber'", "source_tables": ["reviews", "business"]}, "evidence": "located in \"Phoenix\" refers to city = 'Phoenix'; received a \"5\" star review refers to review_stars = '5'; \"uber\" number of votes for funny refers to review_votes_funny = 'Uber'"}
{"sample_id": 3865, "db_id": "public_review_platform", "final": {"question": "Please list the opening time on Mondays of all the Yelp_Businesses in Anthem that are still running.", "sql": "SELECT T1.opening_time FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Monday' AND T3.city LIKE 'Anthem' AND T3.active LIKE 'True' GROUP BY T1.opening_time", "source_tables": ["days", "business", "business_hours"]}, "evidence": "Mondays refers to day_of_week = 'Monday'; in Anthem refers to city = 'Anthem'; are still running refers to active = 'true'"}
{"sample_id": 3929, "db_id": "public_review_platform", "final": {"question": "List the categories of inactive businesses in AZ.", "sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'FALSE' AND T1.state LIKE 'AZ'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "inactive business refers to active = 'FALSE'; 'AZ' is the state; category refers to category_name"}
{"sample_id": 3765, "db_id": "public_review_platform", "final": {"question": "How many more \"buffets\" than \"gyms\" in Yelp business?", "sql": "SELECT SUM(CASE WHEN T1.category_name LIKE 'Buffets' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name LIKE 'Gyms' THEN 1 ELSE 0 END) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id", "source_tables": ["business_categories", "categories"]}, "evidence": "buffets refers to category_name = 'Buffets'; gyms refers to category_name = 'Gyms'; difference = SUBTRACT(SUM(category_name = 'Buffets'), SUM(category_name = 'Gyms'));"}
{"sample_id": 3850, "db_id": "public_review_platform", "final": {"question": "Please list the IDs of the users who have a high number of followers.", "sql": "SELECT user_id FROM Users WHERE user_fans LIKE 'High' GROUP BY user_id", "source_tables": ["users"]}, "evidence": "high number of followers refers to user_fans = 'High'"}
{"sample_id": 3763, "db_id": "public_review_platform", "final": {"question": "What kind of \"wi-fi\" does Yelp business No.\"10172\" have?", "sql": "SELECT T2.attribute_value FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.business_id = 10172 AND T1.attribute_name LIKE 'wi-fi'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "kind of wi-fi refers to attribute_value where attribute_name = 'Wi-Fi'; business No. refers to business_id;"}
{"sample_id": 4105, "db_id": "public_review_platform", "final": {"question": "How many reviews of businesses that are still open received an uber rating on the funny vote?", "sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_votes_funny = 'Uber' AND T1.active = 'true'", "source_tables": ["reviews", "business"]}, "evidence": "businesses that still open refers to active = 'true'; business received an uber rating on the funny vote refers to review_votes_funny = 'Uber'"}
{"sample_id": 3898, "db_id": "public_review_platform", "final": {"question": "How many active businesses are located at Phoenix, Arizona?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Phoenix' AND active LIKE 'True'", "source_tables": ["business"]}, "evidence": "active business refers to active = 'true'; 'Phoenix' is the city"}
{"sample_id": 3953, "db_id": "public_review_platform", "final": {"question": "How many actively running Yelp businesses are there located in \"Phoenix\" city?", "sql": "SELECT COUNT(business_id) FROM Business WHERE active = 'true' AND city = 'Phoenix'", "source_tables": ["business"]}, "evidence": "actively running business refers to active = 'true'; 'Phoenix' is the name of city"}
{"sample_id": 3835, "db_id": "public_review_platform", "final": {"question": "Please list any two user numbers that have an \"Uber\" number of cute compliments.", "sql": "SELECT T1.user_id FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.number_of_compliments LIKE 'Uber' AND T2.compliment_type LIKE 'cute' LIMIT 2", "source_tables": ["compliments", "users_compliments"]}, "evidence": "user numbers refers to user_id; Uber number refers to number_of_compliments = 'Uber'; cute compliments refers to compliment_type = 'cute';"}
{"sample_id": 3947, "db_id": "public_review_platform", "final": {"question": "What city does the business came from where they received a high volume of check-ins from 12 am to 1 am on Saturday.", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time = '1AM' AND T2.opening_time = '12AM' AND T3.day_of_week = 'Saturday'", "source_tables": ["days", "business", "business_hours"]}, "evidence": "12 am refers to opening_time = '12AM'; 1 am refers to closing_time = '1AM'; on Saturday refers to day_of_week = 'Saturday'"}
{"sample_id": 3843, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Businesses in Arizona have a Elitestar rating of over 4?", "sql": "SELECT COUNT(business_id) FROM Business WHERE state LIKE 'AZ' AND stars > 4", "source_tables": ["business"]}, "evidence": "Arizona refers to state = 'AZ'; Elitestar rating of over 4 refers to stars > 4;"}
{"sample_id": 3819, "db_id": "public_review_platform", "final": {"question": "Please list all business IDs in Mesa city that review stars of over 3.", "sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Mesa' AND T2.review_stars > 3 GROUP BY T1.business_id", "source_tables": ["reviews", "business"]}, "evidence": "stars > 3;"}
{"sample_id": 3795, "db_id": "public_review_platform", "final": {"question": "List the names of business in AZ with a rating of 5.", "sql": "SELECT business_id FROM Business WHERE state LIKE 'AZ' AND stars = 5", "source_tables": ["business"]}, "evidence": "AZ refers to state = 'AZ'; rating refers to stars;"}
{"sample_id": 4107, "db_id": "public_review_platform", "final": {"question": "What is the most common type of compliments that a user has received from other users?", "sql": "SELECT T2.compliment_type FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id GROUP BY T2.compliment_type ORDER BY COUNT(T2.compliment_type) DESC LIMIT 1", "source_tables": ["compliments", "users_compliments"]}, "evidence": "the most common type of compliments refers to MAX(COUNT(compliment_type))"}
{"sample_id": 4103, "db_id": "public_review_platform", "final": {"question": "How many businesses have more than 1 attribute?", "sql": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_value > 1", "source_tables": ["business_attributes"]}, "evidence": "businesses have more than 1 attribute refers to COUNT(attribute_value) > 1"}
{"sample_id": 4098, "db_id": "public_review_platform", "final": {"question": "Sum up the number of business with \"ambience_romantic\" attribute.", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name = 'ambience_romantic' AND T2.attribute_value = 'true'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "\"ambience_romantic\" attribute refers to attribute_name = 'ambience_romantic' AND attribute_value = 'true'"}
{"sample_id": 3879, "db_id": "public_review_platform", "final": {"question": "How many of the busineses are in Casa Grande?", "sql": "SELECT COUNT(city) FROM Business WHERE city LIKE 'Casa Grande'", "source_tables": ["business"]}, "evidence": "in Casa Grande refers to city = 'Casa Grande'"}
{"sample_id": 3818, "db_id": "public_review_platform", "final": {"question": "Which city has the highest number of businesses in the food industry whose number of reviews is high?", "sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.review_count LIKE 'High' AND T3.category_name LIKE 'Food' GROUP BY T1.city", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "highest number of businesses refers to MAX(business_id); food industry refers to category_name = 'Food'; number of reviews is high refers to review_count = 'High';"}
{"sample_id": 3772, "db_id": "public_review_platform", "final": {"question": "User No. 70271 only has given one tip to the Yelp business, which category was that business belonged to?", "sql": "SELECT T4.category_name FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.user_id = 70271", "source_tables": ["tips", "business_categories", "business", "categories"]}, "evidence": "user No. refers to user_id; short tip refers to tip_length = 'short'; category refers to category_name;"}
{"sample_id": 3912, "db_id": "public_review_platform", "final": {"question": "List out the user who is an elite user for consecutively 5 years or more and what is the user average star? How many likes does this user gets?", "sql": "SELECT T2.user_average_stars, COUNT(T3.likes) FROM Elite AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id INNER JOIN Tips AS T3 ON T3.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(T1.user_id) > 5", "source_tables": ["tips", "elite", "users"]}, "evidence": "elite user for consecutively 5 years or more refers to user_id COUNT(year_id) > 5; Average star = AVG(likes)"}
{"sample_id": 4127, "db_id": "public_review_platform", "final": {"question": "List the active business ID and its stars of the businesses fall under the category of Food.", "sql": "SELECT DISTINCT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.active = 'true'", "source_tables": ["business_categories", "business", "categories"]}, "evidence": "active business ID refers to active = 'true'; category of Food refers to category_name = 'Food'"}
{"sample_id": 4097, "db_id": "public_review_platform", "final": {"question": "Among businesses with \"Wi-Fi\" attribute, which businesses id are located at SC State?", "sql": "SELECT T3.business_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'Wi-Fi' AND T2.attribute_value = 'true' AND T3.state = 'SC'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "\"Wi-Fi\" attribute refers to attribute_name = 'Wi-Fi' AND attribute_value = 'true'"}
{"sample_id": 3918, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a star range from 3 to 4, located at Tempe.", "sql": "SELECT business_id FROM Business WHERE city LIKE 'Tempe' AND stars BETWEEN 3 AND 4", "source_tables": ["business"]}, "evidence": "star range from 3 to 4 refers to stars > = 3 AND stars < 5; 'Tempe' is the name of city"}
{"sample_id": 4090, "db_id": "public_review_platform", "final": {"question": "Sum up the likes get by short reviews on businesses located in City Goodyear.", "sql": "SELECT SUM(T2.likes) AS likes FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Goodyear'", "source_tables": ["tips", "business"]}, "evidence": "short reviews refer to tip_length = 'Short';"}
{"sample_id": 4032, "db_id": "public_review_platform", "final": {"question": "Among the businesses which have attribute of beer_and_wine, how many business located in Peoria?", "sql": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'Peoria' AND T1.attribute_value = 'beer_and_wine'", "source_tables": ["business_attributes", "business"]}, "evidence": "attribute of beer_and_wine refers to attribute_value = 'beer_and_wine'; in Peoria refers to city = 'Peoria'"}
{"sample_id": 3862, "db_id": "public_review_platform", "final": {"question": "How long does Yelp_Business no.1 open on Tuesdays?", "sql": "SELECT T1.closing_time - T1.opening_time AS \"opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Tuesday' AND T1.business_id = 1", "source_tables": ["days", "business_hours"]}, "evidence": "\"How long\" and \"how much time\" are synonyms; how much time does this business open refers to subtract(closing_time, opening_time); Yelp_Business no.1 refers to business_id = 1; Tuesdays refers to day_of_week = 'Tuesday'"}
{"sample_id": 3978, "db_id": "public_review_platform", "final": {"question": "Calculate the percentage of business with attribute name of \"Accepts Credit Cards\".", "sql": "SELECT CAST(SUM(CASE WHEN T1.attribute_name = 'Accepts Credit Cards' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.attribute_name) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id", "source_tables": ["business_attributes", "attributes"]}, "evidence": "percentage refers to DIVIDE(COUNT(attribute_name = 'Accepts Credit Cards'), COUNT(business_id))*100%"}
{"sample_id": 3841, "db_id": "public_review_platform", "final": {"question": "How many Yelp_Businesses in Scottsdale have received positive comments in the Elitestar rating?", "sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Scottsdale' AND stars > 3", "source_tables": ["business"]}, "evidence": "Scottsdale refers to city = 'Scottsdale'; positive comments refers to stars > 3; Elitestar rating refers to stars;"}
{"sample_id": 3762, "db_id": "public_review_platform", "final": {"question": "How many Yelp businesses are opened 24 hours?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_name LIKE 'Open 24 Hours' AND T2.attribute_value LIKE 'TRUE'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "open 24 hours refers to attribute_name = 'Open 24 Hours' AND attribute_value = 'true';"}
{"sample_id": 3871, "db_id": "public_review_platform", "final": {"question": "Please list the business IDs of the Yelp_Business that have a business time of longer than 12 hours on Sundays.", "sql": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T1.closing_time + 12 - T1.opening_time > 12 AND T2.day_of_week LIKE 'Sunday' GROUP BY T1.business_id", "source_tables": ["days", "business", "business_hours"]}, "evidence": "business time of longer than 12 hours refers to subtract(closing_time, opening_time) > 12; on Sundays refers to day_of_week = 'Sunday'"}
{"sample_id": 3995, "db_id": "public_review_platform", "final": {"question": "How many business have low check-in on Sunday at 10AM?", "sql": "SELECT COUNT(T2.business_id) FROM Days AS T1 INNER JOIN Checkins AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday' AND T2.label_time_10 = 'Low'", "source_tables": ["checkins", "days"]}, "evidence": "on Sunday refers to day_of_week = 'Sunday'; low check-in at 10AM refers to label_time_10 = 'Low'"}
{"sample_id": 3931, "db_id": "public_review_platform", "final": {"question": "What is the attribute value of an inactive business with a medium review count and 3.5 stars which is located at Phoenix, AZ?", "sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'Medium' AND T1.active LIKE 'FALSE' AND T1.city LIKE 'Phoenix' AND T1.stars = 3.5", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "inactive business refers to active = 'FALSE'; 'AZ' is the state; 'Phoenix' is the name of city; medium review count refers to review_count = 'Medium'; 3.5 stars refers to stars = 3.5"}
{"sample_id": 3916, "db_id": "public_review_platform", "final": {"question": "List down the business ID with a low review count in Phoenix.", "sql": "SELECT business_id FROM Business WHERE city LIKE 'Phoenix' AND review_count LIKE 'Low'", "source_tables": ["business"]}, "evidence": "\"Phoenix\" is the city; low review count refers to review_count = 'Low'"}
{"sample_id": 3804, "db_id": "public_review_platform", "final": {"question": "Which businesses are no longer in business but have a low number of votes useful?", "sql": "SELECT DISTINCT T1.business_id FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active LIKE 'FALSE' AND T1.review_votes_useful LIKE 'Low'", "source_tables": ["business", "business_categories", "reviews", "categories"]}, "evidence": "no longer in business refers to active = 'False'; low number of votes useful refers to review_votes_useful = 'Low';"}
{"sample_id": 3814, "db_id": "public_review_platform", "final": {"question": "What is the average rating of inactive businesses?", "sql": "SELECT CAST(SUM(stars) AS REAL) / COUNT(business_id) AS \"average\" FROM Business WHERE active LIKE 'FALSE'", "source_tables": ["business"]}, "evidence": "rating refers to stars; inactive refers to active = 'False'; average rating of inactive businesses = DIVIDE(SUM(stars), COUNT(business_id));"}
{"sample_id": 4066, "db_id": "public_review_platform", "final": {"question": "Which businesses with the category name Accessories have opening hours before 7AM?", "sql": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Accessories' AND SUBSTR(T1.opening_time, -4, 2) * 1 < 7 AND T1.opening_time LIKE '%AM'", "source_tables": ["business_categories", "business_hours", "categories"]}, "evidence": "opening hours before 7AM refer to opening_time < '7AM'; businesses refer to business_id;"}
{"sample_id": 4071, "db_id": "public_review_platform", "final": {"question": "Write down the number of running business with each review count in Cave Creek city.", "sql": "SELECT SUM(CASE WHEN review_count = 'High' THEN 1 ELSE 0 END) AS high , SUM(CASE WHEN review_count = 'Medium' THEN 1 ELSE 0 END) AS Medium , SUM(CASE WHEN review_count = 'Low' THEN 1 ELSE 0 END) AS low FROM Business WHERE city = 'Cave Creek' AND active = 'true'", "source_tables": ["business"]}, "evidence": "number of running business refers to COUNT(business_id) where active = 'true'; each review count includes review_count = 'High', review_count = 'Medium', review_count = 'Low';"}
{"sample_id": 4110, "db_id": "public_review_platform", "final": {"question": "List by their id all businesses that are open on Sunday.", "sql": "SELECT T1.business_id FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T1.day_id = 1", "source_tables": ["days", "business_hours"]}, "evidence": "day_of_week = 'Sunday'; open on Sunday refers to day_id = 1"}
{"sample_id": 4074, "db_id": "public_review_platform", "final": {"question": "List any five of user ID who became elite user in 2006.", "sql": "SELECT user_id FROM Elite WHERE year_id = 2006 LIMIT 5", "source_tables": ["elite"]}, "evidence": "year_id = '2006';"}
{"sample_id": 3809, "db_id": "public_review_platform", "final": {"question": "How many businesses in Glendale city that are still running is opened from 8AM to 6PM?", "sql": "SELECT COUNT(T1.category_name) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T3.city LIKE 'Glendale' AND T4.opening_time LIKE '8AM' AND T4.closing_time LIKE '6PM'", "source_tables": ["business_categories", "business", "business_hours", "categories"]}, "evidence": "still running refers to active = 'true'; opened from 8AM to 6PM refers to opening_time = '8AM' AND closing_time = '6PM';"}
{"sample_id": 4053, "db_id": "public_review_platform", "final": {"question": "How many business ids have opening hours from 8AM to 6PM?", "sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'", "source_tables": ["business_hours"]}, "evidence": "opening hours from 8AM to 6PM refer to Business_Hours where opening_time = '8AM' and closing_time = '6PM';"}
{"sample_id": 4092, "db_id": "public_review_platform", "final": {"question": "How much time do businesses in El Mirage City, AZ State operate in average daily?", "sql": "SELECT SUM(T2.closing_time - T2.opening_time) FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'El Mirage' AND T1.state = 'AZ'", "source_tables": ["business", "business_hours"]}, "evidence": "how much time does this business open refers to SUBTRACT(closing_time, opening_time); DIVIDE(SUM(SUBTRACT(closing_time, opening_time)), SUM(Business.business_id))"}
{"sample_id": 4099, "db_id": "public_review_platform", "final": {"question": "What is the percentage of businesses with \"Good for Kids\" attribute over the other attributes?", "sql": "SELECT CAST(SUM(CASE WHEN attribute_name = 'Good for Kids' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value = 'true'", "source_tables": ["business_attributes", "attributes"]}, "evidence": "\"Good for Kids\" attribute refers to attribute_name = 'Good for Kids' AND attribute_value = 'true'; Calculation = DIVIDE(SUM(attribute_name = 'Good for Kids' AND attribute_value = 'true')), SUM(business_id) * 100"}
{"sample_id": 3960, "db_id": "public_review_platform", "final": {"question": "How long is the Yelp business No. 15098 opened on Monday?", "sql": "SELECT SUBSTR(T1.closing_time, 1, 2) + 12 - SUBSTR(T1.opening_time, 1, 2) AS YYSJ FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week = 'Monday' AND T1.business_id = 15098", "source_tables": ["days", "business_hours"]}, "evidence": "Yelp business No. 15098 refers to business_id = '15098'; Monday refers to day_of_week = 'Monday'"}
{"sample_id": 4063, "db_id": "public_review_platform", "final": {"question": "List active business ids with opening times of 7AM and closing times of 8PM.", "sql": "SELECT DISTINCT T4.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T2.business_id = T3.business_id INNER JOIN Business AS T4 ON T3.business_id = T4.business_id WHERE T4.active = 'true' AND T3.opening_time = '7AM' AND T3.closing_time = '8PM'", "source_tables": ["business_categories", "business", "business_hours", "categories"]}, "evidence": "opening times of 7AM and closing times of 8PM refer to Business_Hours where opening_time = '7AM' and closing_time = '8PM'; active business refers to business_id where active = 'true';"}
{"sample_id": 3852, "db_id": "public_review_platform", "final": {"question": "Among the Yelp_Businesses in Arizona, how many of them do not provide alcohol?", "sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name LIKE 'Alcohol' AND T2.attribute_value LIKE 'none' AND T3.state LIKE 'AZ'", "source_tables": ["business_attributes", "attributes", "business"]}, "evidence": "Arizona refers to state = 'AZ'; do not provide alcohol refers to attribute_name = 'Alcohol' and attribute_value = 'none'"}
{"sample_id": 3825, "db_id": "public_review_platform", "final": {"question": "How long was the review for business number 2 that user number 612 wrote?", "sql": "SELECT review_length FROM Reviews WHERE user_id = 612 AND review_stars = 5 AND business_id = 2", "source_tables": ["reviews"]}, "evidence": "how long was the review refers to review_length; business number refers to business_id; user number refers to user_id;"}
{"sample_id": 4149, "db_id": "citeseer", "final": {"question": "List all paper ID and its class type with more than 20 cited words.", "sql": "SELECT DISTINCT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T2.paper_id, T1.class_label HAVING COUNT(T2.word_cited_id) > 20", "source_tables": ["paper", "content"]}, "evidence": "class type refers to class_label; count(word_cited_id)>20"}
{"sample_id": 4156, "db_id": "citeseer", "final": {"question": "Among the papers under DB classification, which paper has the highest number of words cited?", "sql": "SELECT T1.paper_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'DB' GROUP BY T1.paper_id ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1", "source_tables": ["paper", "content"]}, "evidence": "classification refers to class_label; class_label = 'DB';"}
{"sample_id": 4151, "db_id": "citeseer", "final": {"question": "Name the paper which is cited most times and the paper which is cited least times? Also, find the number of times each one is cited.", "sql": "SELECT cited_paper_id, COUNT(cited_paper_id), ( SELECT cited_paper_id FROM cites GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) ASC LIMIT 1 ), ( SELECT COUNT(cited_paper_id) FROM cites GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) ASC LIMIT 1 ) FROM cites GROUP BY cited_paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1", "source_tables": ["cites"]}, "evidence": ""}
{"sample_id": 4139, "db_id": "citeseer", "final": {"question": "Among all the citation, what is the percentage of paper ID under the Agents classification?", "sql": "SELECT CAST(COUNT(CASE WHEN class_label = 'Agents' THEN paper_id ELSE NULL END) AS REAL) * 100 / COUNT(paper_id) FROM paper", "source_tables": ["paper"]}, "evidence": "classification refers to class_label; class_label = 'Agents'; percentage = (divide(count(paper_id where class_label = 'Agents')), (count(paper_id)))*100;"}
{"sample_id": 4148, "db_id": "citeseer", "final": {"question": "What is the class label of paper ID 'chakrabarti01integrating'. How many words were cited by this paper ID?", "sql": "SELECT DISTINCT T1.class_label, COUNT(T2.word_cited_id) FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 'chakrabarti01integrating' GROUP BY T1.class_label", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4152, "db_id": "citeseer", "final": {"question": "On average, how many papers are under the ML class?", "sql": "SELECT CAST(COUNT(CASE WHEN class_label = 'ML' THEN paper_id ELSE NULL END) AS REAL) / COUNT(paper_id) FROM paper", "source_tables": ["paper"]}, "evidence": "class refers to class_label; average = divide(count(paper_id where class_label = 'M')), (count(paper_id)));"}
{"sample_id": 4146, "db_id": "citeseer", "final": {"question": "List all the paper ID and its class type that cited the word 'word1002'.", "sql": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1002'", "source_tables": ["paper", "content"]}, "evidence": "class type refers to class_label;"}
{"sample_id": 4140, "db_id": "citeseer", "final": {"question": "What is the most cited word? How many papers was that word cited in?", "sql": "SELECT word_cited_id, COUNT(paper_id) FROM content GROUP BY word_cited_id ORDER BY COUNT(word_cited_id) DESC LIMIT 1", "source_tables": ["content"]}, "evidence": "most cited word refers to max(count(word_cited_id);"}
{"sample_id": 4145, "db_id": "citeseer", "final": {"question": "Which paper ID cited the most word? In which class label does it belongs to?", "sql": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id, T1.class_label ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1", "source_tables": ["paper", "content"]}, "evidence": "most cited word refers to max(word_cited_id);"}
{"sample_id": 4143, "db_id": "citeseer", "final": {"question": "Among all the DB class type citation, which word is the most frequently cited?", "sql": "SELECT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'DB' GROUP BY T2.word_cited_id ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1", "source_tables": ["paper", "content"]}, "evidence": "class type refers to class_label; class_label = 'DB'; word that is most frequently cited refers to max(count(word_cited_id);"}
{"sample_id": 4147, "db_id": "citeseer", "final": {"question": "List all words cited in the AI class label.", "sql": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI'", "source_tables": ["paper", "content"]}, "evidence": ""}
{"sample_id": 4309, "db_id": "simpson_episodes", "final": {"question": "State the number of votes for episode with rating of 7 and above.", "sql": "SELECT votes FROM Episode WHERE rating > 7;", "source_tables": ["episode"]}, "evidence": "rating of 7 and above refers to rating > 7.0"}
{"sample_id": 4202, "db_id": "simpson_episodes", "final": {"question": "What is the title of the episode that received the lowest rating?", "sql": "SELECT title FROM Episode ORDER BY rating LIMIT 1;", "source_tables": ["episode"]}, "evidence": "lowest rating refers to Min(rating)"}
{"sample_id": 4194, "db_id": "simpson_episodes", "final": {"question": "Name all the person who involved in the making of simpson 20s episode that aired between October to November.", "sql": "SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.air_date, 6, 2) BETWEEN '10' AND '11';", "source_tables": ["credit", "episode"]}, "evidence": "aired between October to November refers to strftime('%m', air_date) between '10' and '11';"}
{"sample_id": 4325, "db_id": "simpson_episodes", "final": {"question": "State the birth place of co-executive producer for nominee of \"Outstanding Animated Program (For Programming Less Than One Hour)\" award.", "sql": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.role = 'co-executive producer';", "source_tables": ["award", "person"]}, "evidence": "co-executive producer refers to role = 'co-executive producer'; nominee of \"Outstanding Animated Program (For Programming Less Than One Hour)\" award refers to award = 'Outstanding Animated Program (For Programming Less Than One Hour)' and result = 'Nominee'"}
{"sample_id": 4217, "db_id": "simpson_episodes", "final": {"question": "Provide the episode number, title and rating of which were aired in October, 2008.", "sql": "SELECT episode, title, rating FROM Episode WHERE SUBSTR(air_date, 1, 7) LIKE '2008-10%';", "source_tables": ["episode"]}, "evidence": "episode number refers to episode; aired in refers to air_date; October refers to Substr(air_date, 6, 2) = '10': 2008 refers to Substr(air_date, 0, 5) = '2008'"}
{"sample_id": 4248, "db_id": "simpson_episodes", "final": {"question": "Please indicate the birthplace of the crew which name is Dan Castellaneta.", "sql": "SELECT birth_place FROM Person WHERE name = 'Dan Castellaneta';", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 4178, "db_id": "simpson_episodes", "final": {"question": "What is the average number of stars received by the episode titled 'Wedding for Disaster.'", "sql": "SELECT AVG(T2.stars) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Wedding for Disaster';", "source_tables": ["episode", "vote"]}, "evidence": "\"Wedding for Disaster\" is the title of episode; average number of stars = Divide(Sum(stars), Count(stars))"}
{"sample_id": 4187, "db_id": "simpson_episodes", "final": {"question": "Calculate the difference between the highest votes for episode and the lowest votes for episode.", "sql": "SELECT MAX(votes) - MIN(votes) FROM Vote;", "source_tables": ["vote"]}, "evidence": "highest vote refers to Max(votes); lowest vote refers to Min(votes); difference = Subtract(Max(votes), Min(votes))"}
{"sample_id": 4218, "db_id": "simpson_episodes", "final": {"question": "Write down the award ID, award name and winner for character named \"Homer simpson 20\".", "sql": "SELECT T1.award_id, T1.award, T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Homer Simpson' AND T1.result = 'Winner';", "source_tables": ["award", "character_award"]}, "evidence": "\"Homer simpson 20\" is the character; \"Winner\" is the result; award name refers to award"}
{"sample_id": 4234, "db_id": "simpson_episodes", "final": {"question": "What is the average number of stars assigned to The simpson 20s: S20-E12? What is the said episode all about?", "sql": "SELECT AVG(T2.stars), T1.summary FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.episode_id = 'S20-E12';", "source_tables": ["episode", "vote"]}, "evidence": "average number of stars refers to AVG(stars); simpson 20s: S20-E12 refers to episode_id = 'S20-E12'; episode all about refers to summary"}
{"sample_id": 4228, "db_id": "simpson_episodes", "final": {"question": "Describe name, birth country, role in episode and age in 2022 of the oldest crew member..", "sql": "SELECT T1.name, T1.birth_place, T2.role, 2022 - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birthdate IS NOT NULL ORDER BY T1.birthdate LIMIT 1;", "source_tables": ["credit", "person"]}, "evidence": "age in 2022 refers to SUBTRACT(2022, substr(birthdate, 0, 5)); oldest refers to MIN(birthdate)"}
{"sample_id": 4197, "db_id": "simpson_episodes", "final": {"question": "List all the keyword for 'Take My Life, Please' episode.", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';", "source_tables": ["keyword", "episode"]}, "evidence": "\"Take My Life,Please\" is the title of episode"}
{"sample_id": 4334, "db_id": "simpson_episodes", "final": {"question": "How many awards classified as \"Primetime Emmy\" category?", "sql": "SELECT COUNT(award_id) FROM Award WHERE award_category = 'Primetime Emmy';", "source_tables": ["award"]}, "evidence": "category refers to award_category"}
{"sample_id": 4277, "db_id": "simpson_episodes", "final": {"question": "What are the keywords of the episode \"Take My Life, Please\"?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';", "source_tables": ["keyword", "episode"]}, "evidence": "episode \"Take My Life, Please\" refers to title = 'Take My Life, Please'"}
{"sample_id": 4161, "db_id": "simpson_episodes", "final": {"question": "In which country was the winner of the Outstanding Voice-Over Performance award of 2009 born?", "sql": "SELECT T1.birth_country FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';", "source_tables": ["award", "person"]}, "evidence": "\"Outstanding Voice-Over Performance\" is the award; 2009 refers to year = 2009; 'Winner' is the result; country refers to birth_country"}
{"sample_id": 4316, "db_id": "simpson_episodes", "final": {"question": "What is the character that won the award in Primetime Emmy 2009?", "sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award_category = 'Primetime Emmy' AND T1.year = 2009 AND T1.result = 'Winner';", "source_tables": ["award", "character_award"]}, "evidence": "won the award in Primetime Emmy 2009 refers to award_category = 'Primetime Emmy' and year = 2009"}
{"sample_id": 4192, "db_id": "simpson_episodes", "final": {"question": "What is the title of episode that has a keyword of 'riot' and 'cake'?", "sql": "SELECT DISTINCT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword IN ('riot', 'cake');", "source_tables": ["keyword", "episode"]}, "evidence": "\"riot\" and \"cake\" are both keyword"}
{"sample_id": 4349, "db_id": "simpson_episodes", "final": {"question": "How many awards did simpson 20 won in 2009?", "sql": "SELECT COUNT(award_id) FROM Award WHERE SUBSTR(year, 1, 4) = '2009' AND result = 'Winner';", "source_tables": ["award"]}, "evidence": "won refers to result = 'Winner'; in 2009 refers to year = 2009"}
{"sample_id": 4195, "db_id": "simpson_episodes", "final": {"question": "State the name of director for the 'Treehouse of Horror XIX' episode.", "sql": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Treehouse of Horror XIX' AND T2.role = 'director';", "source_tables": ["credit", "episode"]}, "evidence": "\"Treehouse of Horror XIX\" is the title of episode; 'director' is the role of person; name refers to person"}
{"sample_id": 4341, "db_id": "simpson_episodes", "final": {"question": "List out the names of the awarded character in the awards held in 2009.", "sql": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009;", "source_tables": ["award", "character_award"]}, "evidence": "in 2009 refers to year = 2009; name of awarded character refers to character\n\n"}
{"sample_id": 4191, "db_id": "simpson_episodes", "final": {"question": "List the name of persons who were not included in the credit for the 'How the Test Was Won' episode.", "sql": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'How the Test Was Won' AND T2.credited = 'false';", "source_tables": ["credit", "episode"]}, "evidence": "\"How the Test Was Won\" is the title of episode; not included in the credit refers to credited = ' '; name of person refers to person"}
{"sample_id": 4168, "db_id": "simpson_episodes", "final": {"question": "How many 7-star votes in star score did the episode Lost Verizon have?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' AND T2.stars = 7;", "source_tables": ["episode", "vote"]}, "evidence": "7-stars vote refers to stars = 7; 'Lost Verizon' is the title of episode"}
{"sample_id": 4323, "db_id": "simpson_episodes", "final": {"question": "Which title is the winner of Best International TV Series in 2017?", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Best International TV Series' AND SUBSTR(T1.year, 1, 4) = '2017';", "source_tables": ["award", "episode"]}, "evidence": "winner refers to result = 'Winner'; Best International TV Series in 2017 refers to award = 'Best International TV Series' and year = '2017'\n\n"}
{"sample_id": 4317, "db_id": "simpson_episodes", "final": {"question": "What are the characters that were nominated for Primetime Emmy Award from 2009 to 2010 but did not win?", "sql": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award_category = 'Primetime Emmy' AND T1.year BETWEEN 2009 AND 2010 AND T1.result != 'Winner';", "source_tables": ["award", "character_award"]}, "evidence": "nominated for Primetime Emmy Award but did not win refers to award_category = 'Primetime Emmy' and result = 'Nominee';\u00a0 from 2009 to 2010 refers to year > = '2009' and\u00a0 year < = '2010'"}
{"sample_id": 4301, "db_id": "simpson_episodes", "final": {"question": "What percentage of votes are from the nominated episodes?", "sql": "SELECT CAST(SUM(CASE WHEN T1.result = 'Nominee' THEN T2.votes ELSE 0 END) AS REAL) * 100 / SUM(T2.votes) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id;", "source_tables": ["award", "episode"]}, "evidence": "nominated episodes refers to result = 'Nominee'; percentage of votes = DIVIDE(SUM(result = 'Nominee), SUM(Votes)) as percentage"}
{"sample_id": 4366, "db_id": "simpson_episodes", "final": {"question": "List the title of the episode with stars greater than the 70% of average stars of all episodes.", "sql": "SELECT DISTINCT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars > 0.7 * ( SELECT AVG(stars) FROM Vote );", "source_tables": ["episode", "vote"]}, "evidence": "stars greater than the 70% of average stars refers to stars > multiply(avg(stars), 0.7)"}
{"sample_id": 4354, "db_id": "simpson_episodes", "final": {"question": "Give the title of the episode won in Primetime Emmy Awards 2009.", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Primetime Emmy Awards' AND T1.year = 2009 AND T1.result = 'Winner';", "source_tables": ["award", "episode"]}, "evidence": "won refers to result = 'Winner'; in Primetime Emmy Awards refers to organization = 'Primetime Emmy Awards'; 2009 refers to year = 2009"}
{"sample_id": 4300, "db_id": "simpson_episodes", "final": {"question": "What are the titles of the episodes that have received more 7-star votes than the season average?", "sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 7 AND T2.votes > 0.7 * ( SELECT CAST(COUNT(votes) AS REAL) / COUNT(CASE WHEN stars = 7 THEN 1 ELSE 0 END) FROM Vote );", "source_tables": ["episode", "vote"]}, "evidence": "episodes that have received more 7-star votes than the season average refers to votes > DIVIDE(SUM(votes), COUNT(stars = 7))"}
{"sample_id": 4254, "db_id": "simpson_episodes", "final": {"question": "Among episodes from 10 to 20, which episode has more than 200 votes?", "sql": "SELECT DISTINCT T1.episode FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.episode BETWEEN 10 AND 20 AND T2.votes > 200;", "source_tables": ["episode", "vote"]}, "evidence": "episodes from 10 to 20 refers to episode BETWEEN 10 and 20; more than 200 votes refers to COUNT(votes) > 200"}
{"sample_id": 4182, "db_id": "simpson_episodes", "final": {"question": "How many episodes have more than 1000 votes?", "sql": "SELECT COUNT(episode_id) FROM Episode WHERE votes > 1000;", "source_tables": ["episode"]}, "evidence": "more than 1000 votes refers to votes > 1000"}
{"sample_id": 4264, "db_id": "simpson_episodes", "final": {"question": "What award did the character Homer simpson 20 achieve in 2009?", "sql": "SELECT DISTINCT T1.award FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T2.character = 'Homer Simpson';", "source_tables": ["award", "character_award"]}, "evidence": "in 2009 refers to year = 2009"}
{"sample_id": 4203, "db_id": "simpson_episodes", "final": {"question": "What year did the Simpsons receive its first ever award for Favorite Animated Comedy in People's Choice Award?", "sql": "SELECT year FROM Award WHERE result = 'Winner' AND award = 'Favorite Animated Comedy' ORDER BY year DESC LIMIT 1;", "source_tables": ["award"]}, "evidence": "\"Favorite Animated Comedy\" is the award; 'People's Choice Award' is the award_category; received award refers to result = 'Winner'; first ever award refers to Min(year)"}
{"sample_id": 4312, "db_id": "simpson_episodes", "final": {"question": "How many people who were born after 1970 are animation executive producer?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE STRFTIME(T1.birthdate) > '1970' AND T2.role = 'animation executive producer';", "source_tables": ["credit", "person"]}, "evidence": "born after 1980 refers to birthdate > 1970; assistant to the producers refers to role = 'animation executive producer'"}
{"sample_id": 4276, "db_id": "simpson_episodes", "final": {"question": "Please list all of the episodes that aired in 2008 that have the highest number of votes for the maximum star rating.", "sql": "SELECT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "aired in 2008 refers to air_date like '2008%'; highest number of votes refers to MAX(votes); maximum star rating refers to stars = 10"}
{"sample_id": 4242, "db_id": "simpson_episodes", "final": {"question": "Among episodes aired in 2009, which episode has received the worst response based on the rating.", "sql": "SELECT episode_id FROM Episode WHERE air_date LIKE '2009%' ORDER BY rating LIMIT 1;", "source_tables": ["episode"]}, "evidence": "aired in 2009 refers to year(air_date) = 2009; received the worst response based on the rating refers to MIN(rating)"}
{"sample_id": 4243, "db_id": "simpson_episodes", "final": {"question": "List the categories for which Bonita Pietila was given credit and her role in creating the episodes.", "sql": "SELECT DISTINCT category, role FROM Credit WHERE person = 'Bonita Pietila';", "source_tables": ["credit"]}, "evidence": ""}
{"sample_id": 4212, "db_id": "simpson_episodes", "final": {"question": "In Season 20 Episode 11, how many times was Doofus included in the credit list?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.nickname = 'Doofus' AND T2.credited = 'true' AND T2.episode_id = 'S20-E11';", "source_tables": ["credit", "person"]}, "evidence": "in Season 20 Episode 11 refers to episode_id = 'S20-E11'; 'Doofus' is the nickname of person; include in credit list refers to credited = 'true'"}
{"sample_id": 4351, "db_id": "simpson_episodes", "final": {"question": "List down the names of person born in California, USA.", "sql": "SELECT name FROM Person WHERE birth_region = 'California' AND birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "California refers to birth_region = 'California'; USA refers to birth_country = 'USA'"}
{"sample_id": 4313, "db_id": "simpson_episodes", "final": {"question": "Write down the summary of episode whereby it has crew members that are not included in the credit list.", "sql": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'false';", "source_tables": ["credit", "episode"]}, "evidence": "are not included in the credit list refers to credited = ''"}
{"sample_id": 4199, "db_id": "simpson_episodes", "final": {"question": "What is the ratio between the 5 stars votes for 'No Loan Again, Naturally' episode and 'Coming to Homerica' episode?", "sql": "SELECT CAST(SUM(CASE WHEN T1.title = 'No Loan Again, Naturally' THEN T1.votes ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.title = 'Coming to Homerica' THEN T1.votes ELSE 0 END) AS ratio FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 5;", "source_tables": ["episode", "vote"]}, "evidence": "5 stars votes refers to stars = 5 ; 'No Loan Again, Naturally' and 'Coming to Homerica' are both the title of episode;\u00a0 ratio = Divide (votes where title = 'No Loan Again, Naturally', votes where title = 'Coming to Homerica')"}
{"sample_id": 4249, "db_id": "simpson_episodes", "final": {"question": "How many crews were born in the USA?", "sql": "SELECT COUNT(name) FROM Person WHERE birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "born in the USA refers to birth_country = 'USA'"}
{"sample_id": 4250, "db_id": "simpson_episodes", "final": {"question": "Please list the name of crew that were born before 1970.", "sql": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) < '1970';", "source_tables": ["person"]}, "evidence": "born before 1970 refers to birthdate < '1970-01-01'"}
{"sample_id": 4339, "db_id": "simpson_episodes", "final": {"question": "List out the star scores of episode which has title of \"How the Test Was Won\".", "sql": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'How the Test Was Won';", "source_tables": ["episode", "vote"]}, "evidence": "star scores refers to stars"}
{"sample_id": 4262, "db_id": "simpson_episodes", "final": {"question": "The person named Al Jean achieved the Primetime Emmy Award category in 2009, which episode did AI Jean achieve?", "sql": "SELECT T2.episode_id FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Al Jean' AND T1.award_category = 'Primetime Emmy';", "source_tables": ["award", "episode"]}, "evidence": "in 2009 refers to year = 2009"}
{"sample_id": 4314, "db_id": "simpson_episodes", "final": {"question": "List down the rating of episodes that were produced by Jason Bikowski.", "sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Jason Bikowski';", "source_tables": ["credit", "episode"]}, "evidence": "produced by Jason Bikowski refers to person = 'Jason Bikowski'"}
{"sample_id": 4251, "db_id": "simpson_episodes", "final": {"question": "Name of the crew that were born in California, USA between 1958 and 1969.", "sql": "SELECT name FROM Person WHERE SUBSTR(birthdate, 1, 4) = '1958' AND birth_place = 'California' AND birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "born in California refers to birth_place = 'California'; USA refers to birth_country = 'USA'; between 1958 and 1969 refers to birthdate BETWEEN '1958-01-01' and '1958-12-31'"}
{"sample_id": 4293, "db_id": "simpson_episodes", "final": {"question": "Among the episodes with an award nominee or winner, which has the highest percent of 5 star votes?", "sql": "SELECT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 5 ORDER BY T2.percent DESC LIMIT 1;", "source_tables": ["award", "vote"]}, "evidence": "highest percent of 5 star votes refers to max(percent) where star = 5"}
{"sample_id": 4183, "db_id": "simpson_episodes", "final": {"question": "How many persons were born in New York, USA?", "sql": "SELECT COUNT(name) FROM Person WHERE birth_place = 'New York City' AND birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "\"New York\" is the birth_place; 'USA' is the birth_region"}
{"sample_id": 4165, "db_id": "simpson_episodes", "final": {"question": "Please list all the keywords of the episode Lost Verizon.", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Lost Verizon';", "source_tables": ["keyword", "episode"]}, "evidence": "\"Lost Verizon\" is the title of episode"}
{"sample_id": 4198, "db_id": "simpson_episodes", "final": {"question": "Among the episode that get more than 950 votes, how many of the episodes were nominated for the 'Outstanding Voice-Over Performance Award in 2009'? Find the percentage of the episodes.", "sql": "SELECT CAST(SUM(CASE WHEN T1.award = 'Outstanding Voice-Over Performance' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 950 AND T1.year = 2009;", "source_tables": ["award", "episode"]}, "evidence": "more than 950 votes refers to votes > 950; in 2009 refers to year = 2009; number of episode = Count(episode_id); nominated refers to result = 'Nominee'; percentage = Divide(Count(award = 'Outstanding Voice-Over Performance'), Count(episode_id)) * 100"}
{"sample_id": 4347, "db_id": "simpson_episodes", "final": {"question": "Among the episodes which have star score less than 8, how many episodes were aired in 2009?", "sql": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2009' AND T2.stars < 8;", "source_tables": ["episode", "vote"]}, "evidence": "star score less than 8 refers to stars < 8; aired in 2009 refers to air_date LIKE '2009%'"}
{"sample_id": 4175, "db_id": "simpson_episodes", "final": {"question": "Name the title of the episode where Pamela Hayden voiced the character 'Ruthie.'", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Pamela Hayden' AND T2.role = 'Ruthie';", "source_tables": ["credit", "episode"]}, "evidence": "\"Pamela Hayden\" is the person; voice the character 'Ruthie' refers to role = 'Ruthie'"}
{"sample_id": 4181, "db_id": "simpson_episodes", "final": {"question": "What is the percentage ratio between uncredited and credited roles on the episode that won the 2017 Jupiter Award for Best International TV Series? Please include the title of the episode and the names of the persons who were uncredited alongside their role in that episode.", "sql": "SELECT CAST(SUM(CASE WHEN T2.credited = 'false' THEN 1 END) AS REAL) * 100 / SUM(CASE WHEN T2.credited = 'true' THEN 1 END), T3.title, T2.person FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2017' AND T1.award_category = 'Jupiter Award' AND T1.award = 'Best International TV Series' AND T1.result = 'Winner';", "source_tables": ["credit", "award", "episode"]}, "evidence": "uncredited refers to credited = ''; credited refers to credited = 'true'; won refers to result = 'Winner'; 2017 is the year; 'Jupiter Award' is the award_category; 'Best International TV Series' is the award; percentage ratio = Divide (SUM(credited = ''), SUM(credited = 'true')) * 100"}
{"sample_id": 4304, "db_id": "simpson_episodes", "final": {"question": "What is the average height of people from USA?", "sql": "SELECT AVG(height_meters) FROM Person WHERE birth_country = 'USA';", "source_tables": ["person"]}, "evidence": "people from USA refers to birth_country = 'USA'; average height = AVG(height_meters)"}
{"sample_id": 4267, "db_id": "simpson_episodes", "final": {"question": "Please list two people who are the nominees for the \"Outstanding Voice-Over Performance\" award for season 20.", "sql": "SELECT person FROM Award WHERE result = 'Nominee' AND award = 'Outstanding Voice-Over Performance' AND episode_id LIKE 'S20%' LIMIT 2;", "source_tables": ["award"]}, "evidence": "season 20 refers to episode_id LIKE 'S20%'"}
{"sample_id": 4255, "db_id": "simpson_episodes", "final": {"question": "Please indicate the keywords of the episode that won the Primetime Emmy Award category.", "sql": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Primetime Emmy';", "source_tables": ["award", "keyword"]}, "evidence": "Primetime Emmy Award refers to award_category = 'Primetime Emmy'"}
{"sample_id": 4186, "db_id": "simpson_episodes", "final": {"question": "Find the average height for each person.", "sql": "SELECT AVG(height_meters) FROM Person;", "source_tables": ["person"]}, "evidence": "average high = Divide(Sum(height_meters), Count(name))"}
{"sample_id": 4332, "db_id": "simpson_episodes", "final": {"question": "Name the organization which hold the award id 328.", "sql": "SELECT organization FROM Award WHERE award_id = 328;", "source_tables": ["award"]}, "evidence": ""}
{"sample_id": 4318, "db_id": "simpson_episodes", "final": {"question": "Calculate the total votes of episodes that Adam Kuhlman had involved.", "sql": "SELECT SUM(T1.votes) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Adam Kuhlman';", "source_tables": ["credit", "episode"]}, "evidence": "Adam Kuhlman had involved refers to person = 'Adam Kuhlman'"}
{"sample_id": 4331, "db_id": "simpson_episodes", "final": {"question": "How many episodes have the keyword \"2d animation\"?", "sql": "SELECT COUNT(episode_id) FROM Keyword WHERE keyword = '2d animation';", "source_tables": ["keyword"]}, "evidence": ""}
{"sample_id": 4291, "db_id": "simpson_episodes", "final": {"question": "What is the summary of the episode in which Emily Blunt is featured in?", "sql": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Emily Blunt';", "source_tables": ["credit", "episode"]}, "evidence": ""}
{"sample_id": 4263, "db_id": "simpson_episodes", "final": {"question": "How much more votes for episode 1 than for episode 5?", "sql": "SELECT SUM(CASE WHEN T1.episode = 1 THEN T2.votes ELSE 0 END) - SUM(CASE WHEN T1.episode = 5 THEN T2.votes ELSE 0 END) AS diff FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id;", "source_tables": ["episode", "vote"]}, "evidence": "more votes refers to SUBTRACT(SUM(votes when episode = 1), SUM(votes when episode = 5))"}
{"sample_id": 4303, "db_id": "simpson_episodes", "final": {"question": "Which country has the tallest person in the crew?", "sql": "SELECT birth_country FROM Person ORDER BY height_meters DESC LIMIT 1;", "source_tables": ["person"]}, "evidence": "country refers to birth_country; tallest person refers to max(height_meters)"}
{"sample_id": 4302, "db_id": "simpson_episodes", "final": {"question": "List down person's name who has nickname.", "sql": "SELECT name FROM Person WHERE nickname IS NOT NULL;", "source_tables": ["person"]}, "evidence": "has nickname refers to nickname is NOT NULL"}
{"sample_id": 4358, "db_id": "simpson_episodes", "final": {"question": "List the episode ID and title of episode where casting was credited to Bonita Pietila.", "sql": "SELECT T1.episode_id, T1.title FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'true' AND T2.person = 'Bonita Pietila' AND T2.role = 'casting';", "source_tables": ["credit", "episode"]}, "evidence": "was credited refers to credited = 'true'; to Bonita Pietila refers to person = 'Bonita Pietila'"}
{"sample_id": 4287, "db_id": "simpson_episodes", "final": {"question": "What are the episodes Oscar Cervantes is credited with?", "sql": "SELECT episode_id FROM Credit WHERE person = 'Oscar Cervantes' AND credited = 'true';", "source_tables": ["credit"]}, "evidence": "is credited refers to credited = 'true';"}
{"sample_id": 4272, "db_id": "simpson_episodes", "final": {"question": "Please list any three episodes that have an excellent rating.", "sql": "SELECT title FROM Episode WHERE rating BETWEEN 7 AND 10 LIMIT 3;", "source_tables": ["episode"]}, "evidence": "an excellent rating refers to 7 < rating < = 10"}
{"sample_id": 4265, "db_id": "simpson_episodes", "final": {"question": "How many episodes have won the award for Outstanding Animated Program (Programming Under One Hour) with less than 100 votes? Calculate the percentage of episodes with less than 100 votes out of total episodes.", "sql": "SELECT SUM(CASE WHEN T2.votes < 100 THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T2.votes < 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)';", "source_tables": ["award", "episode", "vote"]}, "evidence": "less than 100 votes refers to votes < 100; percentage refers to DIVIDE(COUNT(episode_id when votes < 100), COUNT(episode_id)) * 100%"}
{"sample_id": 4361, "db_id": "simpson_episodes", "final": {"question": "Among the people in Animation Department, who are credited for additional time in the episode titled by \"How the Test Was Won\"?", "sql": "SELECT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'How the Test Was Won' AND T2.role = 'additional timer' AND T2.credited = 'true' AND T2.category = 'Animation Department';", "source_tables": ["credit", "episode"]}, "evidence": "Animation Department refers to category = 'Animation Department'; credited refers to credited = 'true'; for additional timer refers to role = 'additional timer'"}
{"sample_id": 4367, "db_id": "simpson_episodes", "final": {"question": "In year 2009, what is the percentage of the episode titled by \"Gone Maggie Gone\" being nominated?", "sql": "SELECT CAST((SUM(CASE WHEN T1.result = 'Nominee' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.result = 'Winner' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.result) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.title = 'Gone Maggie Gone' AND T1.year = 2009;", "source_tables": ["award", "episode"]}, "evidence": "being nominated refers to result = 'Nominee'; percentage = divide(count(result = 'Nominee'), count(result)) * 100%"}
{"sample_id": 4223, "db_id": "simpson_episodes", "final": {"question": "What is the voting numbers and percentage of the best rating scale of the episode which had keyword of \"arab stereotype\"?", "sql": "SELECT T2.votes, T2.percent FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.keyword = 'arab stereotype' AND T2.stars = 10;", "source_tables": ["keyword", "vote"]}, "evidence": "best rating scale refers to stars = 10"}
{"sample_id": 4236, "db_id": "simpson_episodes", "final": {"question": "What is the birth name of Al Jean and his role in creating The simpson 20s: Season 20?", "sql": "SELECT DISTINCT T1.birth_name, T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.name = 'Al Jean';", "source_tables": ["credit", "person"]}, "evidence": ""}
{"sample_id": 4295, "db_id": "simpson_episodes", "final": {"question": "List all of the award winners' birth dates.", "sql": "SELECT T1.birthdate FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';", "source_tables": ["award", "person"]}, "evidence": "award winner refers to result = 'Winner'"}
{"sample_id": 4207, "db_id": "simpson_episodes", "final": {"question": "Among the episodes aired on April of 2009, how many episodes won an award?", "sql": "SELECT COUNT(T1.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T2.air_date LIKE '2009-04%';", "source_tables": ["award", "episode"]}, "evidence": "aired on refers to air_date, April refers to SUBSTR(air_date, 6, 2) = '04'; 2009 refers to SUBSTR (air_date, 0, 5) = '2009'"}
{"sample_id": 4362, "db_id": "simpson_episodes", "final": {"question": "List the stars of episodes aired in November 2008.", "sql": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 7) = '2008-11';", "source_tables": ["episode", "vote"]}, "evidence": "in November 2008 refers to air_date LIKE '2008-11%'"}
{"sample_id": 4292, "db_id": "simpson_episodes", "final": {"question": "Who did \"The Tiny Canadian\" play as in the show?", "sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.nickname = 'The Tiny Canadian';", "source_tables": ["credit", "person"]}, "evidence": "\"The Tiny Canadian\" refers to nickname = 'The Tiny Canadian'; play as in the show refers to role\n"}
{"sample_id": 4290, "db_id": "simpson_episodes", "final": {"question": "Which character did the \"Outstanding Voice-Over Performance\" winner voice?", "sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND T1.result = 'Winner';", "source_tables": ["award", "character_award"]}, "evidence": "the \"Outstanding Voice-Over Performance\" refers to award = 'Outstanding Voice-Over Performance'; winner refers to result = 'Winner';"}
{"sample_id": 4322, "db_id": "simpson_episodes", "final": {"question": "Please check is \"limbo dancing\" the keyword for title \"Dangerous Curves\"?", "sql": "SELECT CASE WHEN T2.Keyword = 'limbo dancing' THEN 'Yes' ELSE 'No' END AS result FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves';", "source_tables": ["keyword", "episode"]}, "evidence": ""}
{"sample_id": 4299, "db_id": "simpson_episodes", "final": {"question": "What are the keywords for episode 426 of the series?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.number_in_series = 426;", "source_tables": ["keyword", "episode"]}, "evidence": "episode 426 refers to number_in_series = 426"}
{"sample_id": 4185, "db_id": "simpson_episodes", "final": {"question": "How many crew have their own nickname? List their full name along with the nickname.", "sql": "SELECT COUNT(name) FROM Person WHERE nickname IS NOT NULL;", "source_tables": ["person"]}, "evidence": "crew refers to Person; full name refers to name; have nickname refers to nickname IS NOT NULL"}
{"sample_id": 4260, "db_id": "simpson_episodes", "final": {"question": "How many WGA Award (TV) award recipients were born in the USA from 2009 to 2010?", "sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award_category = 'WGA Award (TV)' AND T1.birth_country = 'USA' AND T2.year BETWEEN 2009 AND 2010;", "source_tables": ["award", "person"]}, "evidence": "WGA Award (TV) award refers to award_category = 'WGA Award (TV)'; born in the USA refers to birth_country = 'USA'; from 2009 to 2010 refers to birthdate BETWEEN '2019-01-01' and '2019-12-31'"}
{"sample_id": 4244, "db_id": "simpson_episodes", "final": {"question": "Who from The simpson 20s: Season 20 cast and crew was born in October 29, 1957 in Chicago, Illinois?", "sql": "SELECT name FROM Person WHERE birthdate = '1957-10-29' AND birth_place = 'Chicago' AND birth_region = 'Illinois';", "source_tables": ["person"]}, "evidence": "born in October 29, 1957 refers to birthdate = '1957-10-29'; in Chicago refers to birth_place = 'Chicago'; Illinois refers to birth_region = 'Illinois'"}
{"sample_id": 4326, "db_id": "simpson_episodes", "final": {"question": "Sum up the votes from star 1 to 5 for all of the contestants in Blimp Award.", "sql": "SELECT T2.stars, SUM(T2.stars) FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Blimp Award' AND T2.stars BETWEEN 1 AND 5 GROUP BY T2.stars;", "source_tables": ["award", "vote"]}, "evidence": "contestants refers to result = 'Winner' and result = 'Nominee'; in Blimp Award refers to award = 'Blimp Award'; star 1 to 5 refers to 1 < stars < 5"}
{"sample_id": 4346, "db_id": "simpson_episodes", "final": {"question": "What are the keywords of the episodes which have the air date in 2008?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008';", "source_tables": ["keyword", "episode"]}, "evidence": "have air date in 2008 refers to air_date LIKE '2008%'"}
{"sample_id": 4247, "db_id": "simpson_episodes", "final": {"question": "Which episode of The simpson 20s: Season 20 has received the most nominations? Indicate the title.", "sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.episode_id ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["award", "episode"]}, "evidence": "received the most nomination refers to MAX(COUNT(episode_id))"}
{"sample_id": 4282, "db_id": "simpson_episodes", "final": {"question": "What is the difference between the number of votes for 1-star vs. 10-star for the episode \"The Burns and the Bees\"?", "sql": "SELECT SUM(CASE WHEN T2.stars = 10 THEN T2.votes ELSE 0 END) - SUM(CASE WHEN T2.stars = 1 THEN T2.votes ELSE 0 END) AS Difference FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'The Burns and the Bees';", "source_tables": ["episode", "vote"]}, "evidence": "1-star refers to stars = 1; 10-star refers to stars = 10; episode \"The Burns and the Bees\" refers to title = 'The Burns and the Bees'; difference refers to SUBTRACT(votes when stars = 1, votes when stars = 10)"}
{"sample_id": 4162, "db_id": "simpson_episodes", "final": {"question": "Please list the names of all the awards won by the crew member whose nickname is Doofus.", "sql": "SELECT T2.award FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.nickname = 'Doofus' AND T2.result = 'Winner';", "source_tables": ["award", "person"]}, "evidence": "award won refers to result = 'Winner'"}
{"sample_id": 4232, "db_id": "simpson_episodes", "final": {"question": "What is the total number of awards won by The simpson 20s: Season 20?", "sql": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner';", "source_tables": ["award"]}, "evidence": "total number of awards refers to COUNT(award); awards won refers to result = 'Winner';"}
{"sample_id": 4210, "db_id": "simpson_episodes", "final": {"question": "In \"No Loan Again, Naturally\", how many stars received votes of no more than 50?", "sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'No Loan Again, Naturally' AND T2.votes < 50;", "source_tables": ["episode", "vote"]}, "evidence": "\"No Loan Again, Naturally\" is the title of episode; votes of no more than 50 refers to votes < 50; number of stars refers to SUM(stars)"}
{"sample_id": 4169, "db_id": "simpson_episodes", "final": {"question": "How many stars did most of the voters give in star score for the episode Lost Verizon?", "sql": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon' ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "\"Lost Verizon\" is the title of episode; most voters refers to Max(votes)"}
{"sample_id": 4343, "db_id": "simpson_episodes", "final": {"question": "What is the awarded category that the awarded character Lenny won?", "sql": "SELECT DISTINCT T1.award_category FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Lenny';", "source_tables": ["award", "character_award"]}, "evidence": "\n\nawarded category refers to award_category"}
{"sample_id": 4271, "db_id": "simpson_episodes", "final": {"question": "How many people were considered as prospective recipients of the \"Animation\" award?", "sql": "SELECT COUNT(*) FROM Award WHERE award = 'Animation' AND result = 'Nominee';", "source_tables": ["award"]}, "evidence": "prospective recipients refers to result = 'Nominee'"}
{"sample_id": 4239, "db_id": "simpson_episodes", "final": {"question": "Indicate the name and category of the most recent award received by the show.", "sql": "SELECT award, award_category FROM Award WHERE result = 'Winner' ORDER BY year DESC LIMIT 1;", "source_tables": ["award"]}, "evidence": "most recent refers to MAX(year); received refers to result = 'Winner'; name of award refers to award; category refers to award_category"}
{"sample_id": 4335, "db_id": "simpson_episodes", "final": {"question": "List out the birth name of crews who are co-executive producer and higher than 1.60 meters.", "sql": "SELECT T1.birth_name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.role = 'co-executive producer' AND T1.height_meters > 1.60;", "source_tables": ["award", "person"]}, "evidence": "co-executive producer refers to role = 'co-executive producer'; higher than 1.60 meters refers to height_meters > 1.60"}
{"sample_id": 4286, "db_id": "simpson_episodes", "final": {"question": "Who is the oldest among all the casts and crews?", "sql": "SELECT name FROM Person ORDER BY birthdate ASC LIMIT 1;", "source_tables": ["person"]}, "evidence": "oldest refers to MIN(birthdate)"}
{"sample_id": 4356, "db_id": "simpson_episodes", "final": {"question": "Among the episode with highest votes, what is the category credited to Carlton Batten?", "sql": "SELECT T2.category FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Carlton Batten' AND T2.credited = 'true' ORDER BY T1.votes DESC LIMIT 1;", "source_tables": ["credit", "episode"]}, "evidence": "highest votes refers to max(votes); to Carlton Batten refers to person = 'Carlton Batten'"}
{"sample_id": 4224, "db_id": "simpson_episodes", "final": {"question": "For the episode who won the award held by Jupiter Award, describe award name, aired date and rating of that episode.", "sql": "SELECT T1.award, T2.air_date, T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.organization = 'Jupiter Award' AND T1.result = 'Winner';", "source_tables": ["award", "episode"]}, "evidence": "held by Jupiter Award refers to organization = 'Jupiter Award'; won the award refers to result = 'Winner'"}
{"sample_id": 4213, "db_id": "simpson_episodes", "final": {"question": "What was the first award won by the cast or crew member of the show? Give the name of the person who won the said award.", "sql": "SELECT T2.award, T1.name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner' ORDER BY T2.year LIMIT 1;", "source_tables": ["award", "person"]}, "evidence": "won refers to result = 'Winner'; first award refers to Min(year)"}
{"sample_id": 4294, "db_id": "simpson_episodes", "final": {"question": "What is the credited cast for the episode \"In the Name of the Grandfather\"?", "sql": "SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'In the Name of the Grandfather' AND T2.category = 'Cast' AND T2.credited = 'true';", "source_tables": ["credit", "episode"]}, "evidence": "credited cast refers to category = 'Cast' and\u00a0 credited = 'true'; episode \"In the Name of the Grandfather\" refers to title = 'In the Name of the Grandfather'"}
{"sample_id": 4164, "db_id": "simpson_episodes", "final": {"question": "Which character won the Outstanding Voice-Over Performance award in 2009?", "sql": "SELECT DISTINCT T1.character FROM Character_Award AS T1 INNER JOIN Award AS T2 ON T1.award_id = T2.award_id WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.year = 2009 AND T2.result = 'Winner';", "source_tables": ["award", "character_award"]}, "evidence": "won refers to result = 'Winner'"}
{"sample_id": 4229, "db_id": "simpson_episodes", "final": {"question": "Provide the number of credits, category, role and birthplace of the crew member who was born in North Korea.", "sql": "SELECT DISTINCT T2.credited, T2.category, T2.role, T1.birth_place FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'North Korea';", "source_tables": ["credit", "person"]}, "evidence": "number of credits refers to credited; born in North Korea refers to birth_country = 'North Korea'"}
{"sample_id": 4338, "db_id": "simpson_episodes", "final": {"question": "List out the title of episodes which have star score of 2.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 2;", "source_tables": ["episode", "vote"]}, "evidence": "star score of 2 refers to stars = 2"}
{"sample_id": 4321, "db_id": "simpson_episodes", "final": {"question": "What is the percentage of star score 5 that was collected by title \"Sex, Pies and Idiot Scrapes\"?", "sql": "SELECT CAST(SUM(CASE WHEN T2.stars = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Sex, Pies and Idiot Scrapes';", "source_tables": ["episode", "vote"]}, "evidence": "percentage = DIVIDE(SUM(stars = 5), COUNT(stars)) as percentage"}
{"sample_id": 4359, "db_id": "simpson_episodes", "final": {"question": "In episode nominated in Annie Awards, how many of the episodes have a percent greater than 6?", "sql": "SELECT COUNT(*) FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.organization = 'Annie Awards' AND T1.result = 'Nominee' AND T2.percent > 6;", "source_tables": ["award", "vote"]}, "evidence": "nominated refers to result = 'Nominee'; Annie Awards refers to organization = 'Annie Awards'; percent greater than 6 refers to percent > 6"}
{"sample_id": 4159, "db_id": "simpson_episodes", "final": {"question": "What's the nickname for Dan Castellaneta?", "sql": "SELECT nickname FROM Person WHERE name = 'Dan Castellaneta';", "source_tables": ["person"]}, "evidence": "\"Dan Castellaneta\" is the name of Person"}
{"sample_id": 4180, "db_id": "simpson_episodes", "final": {"question": "What is the birth name of the person who voiced 'Helen Lovejoy?'", "sql": "SELECT DISTINCT T1.birth_name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.role = 'Helen Lovejoy';", "source_tables": ["credit", "person"]}, "evidence": "voiced refers to role; role = 'Helen Lovejoy\""}
{"sample_id": 4201, "db_id": "simpson_episodes", "final": {"question": "What is the name of the person that has the highest number of nominated award but didn't win?", "sql": "SELECT person FROM Award WHERE result = 'Nominee' GROUP BY person ORDER BY COUNT(person) DESC LIMIT 1;", "source_tables": ["award"]}, "evidence": "nominated refers to result = 'Nominee'; highest number of nominated award refers to Max(Count(person))"}
{"sample_id": 4345, "db_id": "simpson_episodes", "final": {"question": "What are the keywords of the episode which has title as Dangerous Curves?", "sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves';", "source_tables": ["keyword", "episode"]}, "evidence": ""}
{"sample_id": 4252, "db_id": "simpson_episodes", "final": {"question": "Which episode ids are rated 5 stars and have more than 100 votes?", "sql": "SELECT episode_id FROM Vote WHERE stars = 5 AND votes > 100;", "source_tables": ["vote"]}, "evidence": "more than 100 votes refers to votes > 100"}
{"sample_id": 4177, "db_id": "simpson_episodes", "final": {"question": "Write down the title and summary of the episode with the keyword 'eviction.'", "sql": "SELECT T1.title, T1.summary FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T2.keyword = 'eviction';", "source_tables": ["keyword", "episode"]}, "evidence": ""}
{"sample_id": 4246, "db_id": "simpson_episodes", "final": {"question": "How old was composer of the show when he was nominated for Emmy's Outstanding Music Composition for a Series in 2009. Indicate his full name as well.", "sql": "SELECT T1.year - T2.birthdate AS ageIn2009, T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person = T2.name WHERE T1.role = 'composer' AND T1.organization = 'Primetime Emmy Awards' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T1.result = 'Nominee' AND T1.year = 2009;", "source_tables": ["award", "person"]}, "evidence": "in 2009 refers to year = 2009; old refers to SUBTRACT(2009, birthdate); composer of the show refers to role = 'composer'; Emmy's refers to organization = 'Primetime Emmy Awards'; nominated refers to result = 'Nominee'; Outstanding Music Composition refers to award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'"}
{"sample_id": 4231, "db_id": "simpson_episodes", "final": {"question": "Name the title of the episode that received the highest star score and the highest number of votes.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id ORDER BY T2.stars DESC, T2.votes DESC LIMIT 1;", "source_tables": ["episode", "vote"]}, "evidence": "received the highest star score refers to MAX(stars); the highest number of votes refers to MAX(votes)"}
{"sample_id": 4348, "db_id": "simpson_episodes", "final": {"question": "State the birth name of crews who are director and have birth country in South Korea.", "sql": "SELECT T1.birth_name FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.role = 'director' AND T1.birth_country = 'South Korea';", "source_tables": ["award", "person"]}, "evidence": "director refers to role = 'director'"}
{"sample_id": 4281, "db_id": "simpson_episodes", "final": {"question": "What is the number of votes for 10-star for the episode that has the keyword \"reference to the fantastic four\"?", "sql": "SELECT T2.votes FROM Keyword AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 AND T1.keyword = 'reference to the fantastic four';", "source_tables": ["keyword", "vote"]}, "evidence": "10-star refers to stars = 10"}
{"sample_id": 4353, "db_id": "simpson_episodes", "final": {"question": "What is the episode ID that received 2 stars and 9 votes?", "sql": "SELECT episode_id FROM Vote WHERE stars = 2 AND votes = 9;", "source_tables": ["vote"]}, "evidence": "2 stars refers to stars = 2; 9 votes refers to votes = 9"}
{"sample_id": 4176, "db_id": "simpson_episodes", "final": {"question": "List down all the roles of Matt Groening on the episode titled 'In the Name of the Grandfather' along with the episode number and series number.", "sql": "SELECT T2.role, T1.episode, T1.number_in_series FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Matt Groening' AND T1.title = 'In the Name of the Grandfather';", "source_tables": ["credit", "episode"]}, "evidence": "\"Matt Groening\" is the person; 'In the Name of the Grandfather' is the title of episode; episode number refers to episode; series number refers to number_in_series"}
{"sample_id": 4256, "db_id": "simpson_episodes", "final": {"question": "Who is the recipient of the Primetime Emmy Award with the most votes?", "sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'Primetime Emmy' ORDER BY T2.votes DESC LIMIT 1;", "source_tables": ["award", "vote"]}, "evidence": "Primetime Emmy Award refers to award_category = 'Primetime Emmy'; the most votes refers to MAX(votes)"}
{"sample_id": 4219, "db_id": "simpson_episodes", "final": {"question": "List down the award name, result, credit category and credited status of the \"Billy Kimball\".", "sql": "SELECT DISTINCT T1.award, T1.result, T2.category, T2.credited FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id WHERE T2.person = 'Billy Kimball';", "source_tables": ["credit", "award"]}, "evidence": "\"Billy Kimball\" is the person; award name refers to award; credited category refers to category; credited status refers to credited; credited = 'true' means the person is included in the credit list and vice versa"}
{"sample_id": 4221, "db_id": "simpson_episodes", "final": {"question": "Describe the birth country, height and person name who were not included in credit list with category of casting.", "sql": "SELECT T1.birth_country, T1.height_meters, T1.name FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Cast' AND T2.credited = 'false';", "source_tables": ["credit", "person"]}, "evidence": "height refers to height_meters; not in credit list refers to credited = ''; category of casting refers to category = 'Casting Department'"}
{"sample_id": 4307, "db_id": "simpson_episodes", "final": {"question": "List down the title of episode S20-E1, S20-E2 & S20-E3.", "sql": "SELECT title FROM Episode WHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3');", "source_tables": ["episode"]}, "evidence": "episode S20-E1, S20-E2 & S20-E3 refers to episode_id = 'S20-E1' and episode_id = 'S20-E2' and episode_id = 'S20-E3'"}
{"sample_id": 4170, "db_id": "simpson_episodes", "final": {"question": "Please list the titles of the episodes that have over 200 voters voting a 10 in star score.", "sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.votes > 200 AND T2.stars = 10;", "source_tables": ["episode", "vote"]}, "evidence": "over 200 votes refers to votes > 200; 10 in star score refers to stars = 10"}
{"sample_id": 4330, "db_id": "simpson_episodes", "final": {"question": "Which episode has the highest number of vote of the star score?", "sql": "SELECT episode_id FROM Vote ORDER BY votes DESC LIMIT 1;", "source_tables": ["vote"]}, "evidence": "highest number of vote of the star score refers to max(votes)"}
{"sample_id": 4315, "db_id": "simpson_episodes", "final": {"question": "What is the average heights of crew members from Animation Department?", "sql": "SELECT AVG(T1.height_meters) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE T2.category = 'Animation Department';", "source_tables": ["credit", "person"]}, "evidence": "from Animation Department refers to category = 'Animation Department';\u00a0AVG(height_meters) where category = 'Animation Department'"}
{"sample_id": 4237, "db_id": "simpson_episodes", "final": {"question": "How many nominations have Billy Kimball received in 2010 for The simpson 20s: Season 20?", "sql": "SELECT COUNT(award_id) FROM Award WHERE person = 'Billy Kimball' AND SUBSTR(year, 1, 4) = '2010' AND result = 'Nominee';", "source_tables": ["award"]}, "evidence": "in 2010 refers to year = 2010; nominations refers to result = 'Nominee'"}
{"sample_id": 4184, "db_id": "simpson_episodes", "final": {"question": "List the name of all awards along with the award category, nominated by Marc Wilmore.", "sql": "SELECT award_id, award_category FROM Award WHERE person = 'Marc Wilmore';", "source_tables": ["award"]}, "evidence": "\"Marc Wilmore\" is the name of person"}
{"sample_id": 4226, "db_id": "simpson_episodes", "final": {"question": "Among the episodes with excellent rating which were aired in 2008, describe the title, episode's image, award name and person who were nominated.", "sql": "SELECT T2.title, T2.episode_image, T1.award, T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating BETWEEN 7 AND 10 AND SUBSTR(T2.air_date, 1, 4) = '2008' AND T1.result = 'Nominee';", "source_tables": ["award", "episode"]}, "evidence": "excellent rating refers to 7 < = rating < = 10; aired in 2008 refers to SUBSTRACT(air_date, 0, 5) = '2008'; who were nominated refers to result = 'Nominee'"}
{"sample_id": 4500, "db_id": "student_loan", "final": {"question": "How many students are enrolled in smc during month 1?", "sql": "SELECT COUNT(name) FROM enrolled WHERE school = 'smc' AND month = 1", "source_tables": ["enrolled"]}, "evidence": "smc refers to school = 'smc';"}
{"sample_id": 4471, "db_id": "student_loan", "final": {"question": "List at least 10 students who have no payment due and are enlisted in Fire Department organization.", "sql": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T1.bool = 'neg' AND T2.organ = 'fire_department' LIMIT 10", "source_tables": ["enlist", "no_payment_due"]}, "evidence": "no payment due refers to bool = 'neg'; organization refers to organ; organ = 'fire_department';"}
{"sample_id": 4491, "db_id": "student_loan", "final": {"question": "Define the gender of \"student995\" and his/her enrolled schools.", "sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') AS gen , T1.school FROM enrolled AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T1.name = 'student995'", "source_tables": ["male", "enrolled"]}, "evidence": "male.name = 'student995' means student995's gender is male; if 'student995' can not be found in 'male.name', it means student995 is female;"}
{"sample_id": 4506, "db_id": "student_loan", "final": {"question": "List out student names that enrolled in two schools and two organizations?", "sql": "SELECT T.name FROM ( SELECT T1.name, COUNT(T1.organ) AS num FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num = 2", "source_tables": ["enlist", "enrolled"]}, "evidence": "enrolled in two schools refers to COUNT(school) = 2; two organizations refers to COUNT(organ) = 2;"}
{"sample_id": 4457, "db_id": "student_loan", "final": {"question": "List all the disabled female students.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN male AS T2 ON T1.name <> T2.name", "source_tables": ["disabled", "male"]}, "evidence": ""}
{"sample_id": 4474, "db_id": "student_loan", "final": {"question": "How many unemployed students have payment due?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "have payment due refers to bool = 'pos';"}
{"sample_id": 4472, "db_id": "student_loan", "final": {"question": "How many female students are enlisted in the Navy organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy' AND name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "enlist"]}, "evidence": "female students refers to enlist.name who are NOT in male.name; organization refers to organ; organ = 'navy';"}
{"sample_id": 4433, "db_id": "student_loan", "final": {"question": "State the unemployed students who enlisted in marines.", "sql": "SELECT T1.name FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'", "source_tables": ["enlist", "unemployed"]}, "evidence": "enlisted in marines refers to organ = 'marines';"}
{"sample_id": 4537, "db_id": "student_loan", "final": {"question": "How many students have absent from school?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 1", "source_tables": ["longest_absense_from_school"]}, "evidence": "have absent from school refers to month > 1;"}
{"sample_id": 4515, "db_id": "student_loan", "final": {"question": "What is the average absent month for a unemployed male students?", "sql": "SELECT AVG(T2.month) AS avg FROM unemployed AS T1 INNER JOIN longest_absense_from_school AS T2 ON T2.name = T1.name INNER JOIN male AS T3 ON T3.name = T2.name", "source_tables": ["longest_absense_from_school", "male", "unemployed"]}, "evidence": "average = DIVIDE(SUM(month), COUNT(unemployed.name who are in male.name)); unemployed male students refers to unemployed.name who are IN male.name;"}
{"sample_id": 4393, "db_id": "student_loan", "final": {"question": "List 10 students that have no due payments and are not males.", "sql": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN person AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.\"name\" NOT IN ( SELECT name FROM male ) AND T1.bool = 'neg'", "source_tables": ["male", "no_payment_due", "person"]}, "evidence": "no due payments refers to bool = 'neg'; not males refers to not in male table"}
{"sample_id": 4411, "db_id": "student_loan", "final": {"question": "How many unemployed and bankrupt students that have payment dues?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name INNER JOIN no_payment_due AS T3 ON T2.name = T3.name WHERE T3.bool = 'pos'", "source_tables": ["unemployed", "no_payment_due", "filed_for_bankrupcy"]}, "evidence": "have payment dues refers to bool = 'pos'"}
{"sample_id": 4518, "db_id": "student_loan", "final": {"question": "Calculate the ratio of unemployed students who have never been absent from school.", "sql": "SELECT CAST(SUM(IIF(T2.month = 0, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM unemployed AS T1 INNER JOIN longest_absense_from_school AS T2 ON T2.name = T1.name", "source_tables": ["longest_absense_from_school", "unemployed"]}, "evidence": "ratio = CONCAT(DIVIDE(MULTIPLY(COUNT(unemployed.name WHERE month = 0), 100), COUNT(month)),'%'); unemployed students who have never been absent from school refers to (unemployed.name WHERE month = 0);"}
{"sample_id": 4397, "db_id": "student_loan", "final": {"question": "How many male students have no due payments?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN male AS T2 ON T1.name = T2.name WHERE T1.bool = 'neg'", "source_tables": ["male", "no_payment_due"]}, "evidence": "have no due payments refers to bool = 'neg';"}
{"sample_id": 4509, "db_id": "student_loan", "final": {"question": "How many students is disabled and unemployed at the same time?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name", "source_tables": ["disabled", "unemployed"]}, "evidence": "students who are disabled and unemployed at the same time refers to disabled.name = unemployed.name;"}
{"sample_id": 4381, "db_id": "student_loan", "final": {"question": "Which department has the most disabled students?", "sql": "SELECT T2.organ, COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" GROUP BY T2.organ ORDER BY COUNT(T1.name) DESC LIMIT 1", "source_tables": ["disabled", "enlist"]}, "evidence": "department refers to organ; most disabled students refers to MAX(disabled.name)"}
{"sample_id": 4507, "db_id": "student_loan", "final": {"question": "What is the percentage difference between month 0 absence and month 9 absence?", "sql": "SELECT CAST(((SUM(IIF(month = 0, 1, 0)) - SUM(IIF(month = 9, 1, 0)))) AS REAL) * 100 / SUM(IIF(month = 0, 1, 0)) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "percentage difference = CONCAT(DIVIDE(MULTIPLY(SUBTRACT(COUNT(name WHERE month = 0), COUNT(name WHERE month = 9)), 100), COUNT(name WHERE month = 0)),'%');"}
{"sample_id": 4419, "db_id": "student_loan", "final": {"question": "What is the average absence period of a student?", "sql": "SELECT AVG(month) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4569, "db_id": "student_loan", "final": {"question": "How many employed disabled students have zero absences?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN unemployed AS T3 ON T3.name = T2.name WHERE T1.month = 0", "source_tables": ["disabled", "longest_absense_from_school", "unemployed"]}, "evidence": "employed students refers to disabled.name who are NOT in unemployed.name; zero absences refers to month = 0;"}
{"sample_id": 4530, "db_id": "student_loan", "final": {"question": "How many students in the Air Force?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'", "source_tables": ["enlist"]}, "evidence": "Air Force refers to organ = 'air_force';"}
{"sample_id": 4497, "db_id": "student_loan", "final": {"question": "List any ten male students who enlisted for foreign legion.", "sql": "SELECT T1.name FROM enlist AS T1 INNER JOIN male AS T2 ON T2.name = T1.name WHERE T1.organ = 'foreign_legion' LIMIT 10", "source_tables": ["male", "enlist"]}, "evidence": "male students are mentioned in male.name; foreign legion refers to organ = 'foreign_legion';"}
{"sample_id": 4451, "db_id": "student_loan", "final": {"question": "Which female students had never been absent?", "sql": "SELECT T2.name FROM male AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name <> T2.name WHERE T2.month = 0", "source_tables": ["longest_absense_from_school", "male"]}, "evidence": "had never been absent refers to month = 0"}
{"sample_id": 4453, "db_id": "student_loan", "final": {"question": "List all the organisations of students who filed for bankcrupcy.", "sql": "SELECT T2.organ FROM filed_for_bankrupcy AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name", "source_tables": ["enlist", "filed_for_bankrupcy"]}, "evidence": "organization refers to organ; students who filed for bankrupcy refers to file_for_bankrupcy.name"}
{"sample_id": 4398, "db_id": "student_loan", "final": {"question": "Which students that are in the marines have been absent for 6 months?", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.organ = 'marines' AND T1.\"month\" = 6", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "in the marines refers to organ = 'marines'; absent for 6 months refers to month = 6"}
{"sample_id": 4447, "db_id": "student_loan", "final": {"question": "Find the average number of absences for each student.", "sql": "SELECT AVG(month) FROM longest_absense_from_school", "source_tables": ["longest_absense_from_school"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4445, "db_id": "student_loan", "final": {"question": "Which students have absents the most?", "sql": "SELECT name FROM longest_absense_from_school WHERE month = ( SELECT MAX(month) FROM longest_absense_from_school )", "source_tables": ["longest_absense_from_school"]}, "evidence": "absents the most refers to MAX(month)"}
{"sample_id": 4547, "db_id": "student_loan", "final": {"question": "List the longest duration of absense for a student enlisted in the fire department.", "sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'fire_department' ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "longest duration of absence refers to MAX(month); department refers to organ; organ = 'fire_department';"}
{"sample_id": 4380, "db_id": "student_loan", "final": {"question": "Please list the departments the students are absent from school for 9 months are in.", "sql": "SELECT T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.\"month\" = 9", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "absent from school for 9 months refers to month = 9"}
{"sample_id": 4558, "db_id": "student_loan", "final": {"question": "How many students have absences of no more than 3 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < 3", "source_tables": ["longest_absense_from_school"]}, "evidence": "absences of no more than 3 months refers to month < 3;"}
{"sample_id": 4470, "db_id": "student_loan", "final": {"question": "How many unemployed students have never been absent?", "sql": "SELECT COUNT(T2.name) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.month = 0", "source_tables": ["longest_absense_from_school", "unemployed"]}, "evidence": "never been absent refers to month = 0;"}
{"sample_id": 4462, "db_id": "student_loan", "final": {"question": "How many students are enrolled in UCLA school?", "sql": "SELECT COUNT(name) FROM enrolled WHERE school = 'ucla'", "source_tables": ["enrolled"]}, "evidence": "enrolled in UCLA refers to school = 'ucla';"}
{"sample_id": 4476, "db_id": "student_loan", "final": {"question": "How many disabled students are female?", "sql": "SELECT COUNT(name) FROM disabled WHERE name NOT IN ( SELECT name FROM male )", "source_tables": ["disabled", "male"]}, "evidence": "female refers to disabled.name who are NOT in male.name;"}
{"sample_id": 4552, "db_id": "student_loan", "final": {"question": "Calculate the average number of disabled female students enrolled in UCI.", "sql": "SELECT CAST(SUM(IIF(T1.school = 'uci' AND T4.name IS NULL, 1, 0)) AS REAL) / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name INNER JOIN person AS T3 ON T1.name = T3.name LEFT JOIN male AS T4 ON T3.name = T4.name", "source_tables": ["disabled", "person", "male", "enrolled"]}, "evidence": "average = DIVIDE(SUM(disabled.name who are not in male.name WHERE school = 'uci'), COUNT(enrolled.name)); female students refers to disabled.name who are NOT in male.name; UCI refers to school = 'uci';"}
{"sample_id": 4495, "db_id": "student_loan", "final": {"question": "Among the students with payment due, how many of them are unemployed?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.bool = 'pos'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "with payment due refers to bool = 'pos';"}
{"sample_id": 4493, "db_id": "student_loan", "final": {"question": "How many unemployed students filed for bankruptcy?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T2.name = T1.name", "source_tables": ["unemployed", "filed_for_bankrupcy"]}, "evidence": "unemployed students who filed for bankruptcy refers to unemployed.name who are IN filed_for_bankrupcy.name;"}
{"sample_id": 4475, "db_id": "student_loan", "final": {"question": "List at least 5 students who have payment due and are enlisted in Peace Corps organization?", "sql": "SELECT T1.name FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T2.organ = 'peace_corps' AND T1.bool = 'pos' LIMIT 5", "source_tables": ["enlist", "no_payment_due"]}, "evidence": "have payment due refers to bool = 'pos'; organization refers to organ; organ = 'Peace Corps';"}
{"sample_id": 4513, "db_id": "student_loan", "final": {"question": "What is the school and organization enrolled by student211?", "sql": "SELECT T2.school, T1.organ FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T2.name = T1.name WHERE T1.name = 'student211'", "source_tables": ["enlist", "enrolled"]}, "evidence": "organization refers to organ; student211 is a name of student;"}
{"sample_id": 4468, "db_id": "student_loan", "final": {"question": "Among the unemployed students, how many of them have no payment due?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "have no payment due refers to bool = 'neg';\n\n"}
{"sample_id": 4529, "db_id": "student_loan", "final": {"question": "Calculate the ratio of disabled students who have never been absent from school.", "sql": "SELECT 100 * SUM(IIF(T2.month = 0, 1, 0)) AS num FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "ratio = MULTIPLY(DIVIDE(SUM(month = 0), COUNT(disabled.name)), 100); never been absent from school refers to month = 0;"}
{"sample_id": 4501, "db_id": "student_loan", "final": {"question": "How many students enlist in the air force organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'", "source_tables": ["enlist"]}, "evidence": "organization refers to organ; organ = 'air_force';"}
{"sample_id": 4391, "db_id": "student_loan", "final": {"question": "Is student281 disabled and which school is the student enrolled in?", "sql": "SELECT T2.name, T1.school FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.name = 'student281'", "source_tables": ["disabled", "enrolled"]}, "evidence": ""}
{"sample_id": 4454, "db_id": "student_loan", "final": {"question": "How many male students join more than one organization?", "sql": "SELECT COUNT(T.a) FROM ( SELECT COUNT(DISTINCT T1.name) AS a, COUNT(T2.organ) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T1.name ) T WHERE T.num > 1", "source_tables": ["male", "enlist"]}, "evidence": "more than one organization refers to COUNT(organ) > 1"}
{"sample_id": 4568, "db_id": "student_loan", "final": {"question": "Among the students who filed for bankruptcy with an absence in school of no more than 6 months, how many students enlisted for the fire department?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name INNER JOIN enlist AS T3 ON T3.name = T2.name WHERE T3.organ = 'fire_department'", "source_tables": ["longest_absense_from_school", "enlist", "filed_for_bankrupcy"]}, "evidence": "absence of no more than 6 months refers to month < 6; department refers to organ; organ = 'fire_department';"}
{"sample_id": 4390, "db_id": "student_loan", "final": {"question": "Which organization did student285 enlist?", "sql": "SELECT organ FROM enlist WHERE name = 'student285'", "source_tables": ["enlist"]}, "evidence": ""}
{"sample_id": 4409, "db_id": "student_loan", "final": {"question": "What is the number of unemployed and bankrupt students?", "sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name", "source_tables": ["unemployed", "filed_for_bankrupcy"]}, "evidence": ""}
{"sample_id": 4564, "db_id": "student_loan", "final": {"question": "List the names of the disabled students who were absent from school for more than 5 months.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.month > 5", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "absent for more than 5 months refers to month > 5;"}
{"sample_id": 4379, "db_id": "student_loan", "final": {"question": "How many disabled students have never been absent from school?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.\"month\" = 0", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "never been absent from school refers to month = 0"}
{"sample_id": 4534, "db_id": "student_loan", "final": {"question": "State name of female students who filed for bankruptcy.", "sql": "SELECT T1.name FROM person AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T3.name IS NULL", "source_tables": ["male", "filed_for_bankrupcy", "person"]}, "evidence": "female students refers to filed_for_bankrupcy.name who are NOT in male.name;"}
{"sample_id": 4434, "db_id": "student_loan", "final": {"question": "Calculate the average duration of absense of disabled students.", "sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))"}
{"sample_id": 4431, "db_id": "student_loan", "final": {"question": "List out the number of female students who enlisted in the air force.", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force' AND name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "enlist"]}, "evidence": "enlisted in the air force refers to organ = 'air_force';"}
{"sample_id": 4443, "db_id": "student_loan", "final": {"question": "How many students are disabled?", "sql": "SELECT COUNT(name) FROM disabled", "source_tables": ["disabled"]}, "evidence": ""}
{"sample_id": 4402, "db_id": "student_loan", "final": {"question": "Student21 is enlisted in which organization and has the student been absent?", "sql": "SELECT T2.month, T1.organ FROM enlist AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.name = 'student21'", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "organization refers to organ"}
{"sample_id": 4485, "db_id": "student_loan", "final": {"question": "List down the enrolled schools and duration of student214.", "sql": "SELECT school, month FROM enrolled WHERE name = 'student214'", "source_tables": ["enrolled"]}, "evidence": "enrolled schools refers to school; duration refers to month; student214 is a name of student;"}
{"sample_id": 4387, "db_id": "student_loan", "final": {"question": "Which school is student829 enrolled in?", "sql": "SELECT school FROM enrolled WHERE name = 'student829'", "source_tables": ["enrolled"]}, "evidence": ""}
{"sample_id": 4535, "db_id": "student_loan", "final": {"question": "Mention the status of payment of student 299.", "sql": "SELECT bool FROM no_payment_due WHERE name = 'student299'", "source_tables": ["no_payment_due"]}, "evidence": "status of payment is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student299 is a name of student;"}
{"sample_id": 4543, "db_id": "student_loan", "final": {"question": "Among the male students, list down the names of students with payment due.", "sql": "SELECT T1.name FROM male AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'", "source_tables": ["male", "no_payment_due"]}, "evidence": "male students are mentioned in male.name; with payment due refers to bool = 'pos';"}
{"sample_id": 4502, "db_id": "student_loan", "final": {"question": "What is the organization enlisted by student168?", "sql": "SELECT organ FROM enlist WHERE name = 'student168'", "source_tables": ["enlist"]}, "evidence": "organization refers to organ; student168 is a name of student;"}
{"sample_id": 4560, "db_id": "student_loan", "final": {"question": "How many female students have enlisted for the Army?", "sql": "SELECT SUM(IIF(T3.name IS NULL, 1, 0)) AS \"result\" FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T1.organ = 'army'", "source_tables": ["male", "enlist", "person"]}, "evidence": "female students refers to enlist.name who are NOT in male.name; Army refers to organ = 'army';"}
{"sample_id": 4417, "db_id": "student_loan", "final": {"question": "How many female students are not joining any of the organization?", "sql": "SELECT COUNT(name) FROM person WHERE name NOT IN ( SELECT name FROM male ) AND name NOT IN ( SELECT name FROM enrolled )", "source_tables": ["male", "enrolled", "person"]}, "evidence": "female students refers to enlist.name who are NOT in male.name"}
{"sample_id": 4388, "db_id": "student_loan", "final": {"question": "How many months has student217 been absent?", "sql": "SELECT month FROM longest_absense_from_school WHERE name = 'student217'", "source_tables": ["longest_absense_from_school"]}, "evidence": ""}
{"sample_id": 4466, "db_id": "student_loan", "final": {"question": "How many male stuents do not have payment due?", "sql": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'", "source_tables": ["male", "no_payment_due"]}, "evidence": "do not have payment due refers to bool = 'neg';"}
{"sample_id": 4510, "db_id": "student_loan", "final": {"question": "List out students that enrolled in occ school and enlisted in a fire department.", "sql": "SELECT T1.name FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T2.name = T1.name WHERE T2.school = 'occ' AND T1.organ = 'fire_department'", "source_tables": ["enlist", "enrolled"]}, "evidence": "occ school refers to school = 'occ'; department refers to organ; organ = 'fire_department';"}
{"sample_id": 4540, "db_id": "student_loan", "final": {"question": "Among the students that filed for bankruptcy, how many of them have been enrolled in OCC?", "sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T2.school = 'occ'", "source_tables": ["enrolled", "filed_for_bankrupcy"]}, "evidence": "OCC refers to school = 'occ';"}
{"sample_id": 4372, "db_id": "student_loan", "final": {"question": "Please list the names of the male students that belong to the navy department.", "sql": "SELECT T1.name FROM enlist AS T1 INNER JOIN male AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.organ = 'navy'", "source_tables": ["male", "enlist"]}, "evidence": "belong to the navy department refers to organ = 'navy';"}
{"sample_id": 4396, "db_id": "student_loan", "final": {"question": "Which students that filed for bankruptcy are also in the foreign legion?", "sql": "SELECT T2.name FROM enlist AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.organ = 'foreign_legion'", "source_tables": ["enlist", "filed_for_bankrupcy"]}, "evidence": "in the foreign legion refers to organ = 'foreign_legion';"}
{"sample_id": 4439, "db_id": "student_loan", "final": {"question": "How many disabled students have been absent for 3 months from school?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.month = 3", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "have been absent for 3 months from school refers to month = 3"}
{"sample_id": 4438, "db_id": "student_loan", "final": {"question": "Mention the name of unemployed students who have never been absent from school.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.month = 0", "source_tables": ["longest_absense_from_school", "unemployed"]}, "evidence": "have never been absent from school refers to month = 0"}
{"sample_id": 4489, "db_id": "student_loan", "final": {"question": "List any five female students' names who enlisted for the air force.", "sql": "SELECT T1.name FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T2.name IS NULL AND T1.organ = 'air_force' LIMIT 5", "source_tables": ["male", "enlist"]}, "evidence": "female students refers to enlist.name who are NOT in male.name; air force refers to organ = 'air_force';"}
{"sample_id": 4479, "db_id": "student_loan", "final": {"question": "Calculate the ratio in percentage between the average number of female and male students who joined Fire Department organization.", "sql": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name), CAST(SUM(IIF(T2.name IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T1.organ = 'fire_department'", "source_tables": ["male", "enlist"]}, "evidence": "ratio = CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name WHERE organ = 'fire_department' which is NOT in male.name), COUNT(enlist.name WHERE organ = 'fire_department),'%'))) AS FEMALE; ratio = CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name WHERE organ = 'fire_department' which is IN male.name), COUNT(enlist.name WHERE organ = 'fire_department), 100))) AS MALE; female students refers to enlist.name who are NOT in male.name; male students refers to enlist.name who are IN male.name; organization refers to organ; organ = 'fire_department';"}
{"sample_id": 4422, "db_id": "student_loan", "final": {"question": "Which organization does student 313 belong to?", "sql": "SELECT organ FROM enlist WHERE name = 'studenT113'", "source_tables": ["enlist"]}, "evidence": "organization refers to organ"}
{"sample_id": 4368, "db_id": "student_loan", "final": {"question": "How many students have never been absent from school?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE \"month\" = 0", "source_tables": ["longest_absense_from_school"]}, "evidence": "have never been absent refers to `month` = 0;"}
{"sample_id": 4542, "db_id": "student_loan", "final": {"question": "List the names of disabled students enlisted in the navy.", "sql": "SELECT T1.name FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'", "source_tables": ["disabled", "enlist"]}, "evidence": "navy refers to organ = 'navy';"}
{"sample_id": 4548, "db_id": "student_loan", "final": {"question": "Among students with 1 month of absenses, how many of them are enlisted in the air force department?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T1.month = 1 AND T2.organ = 'air_force'", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "1 month of absences refers to month = 1; department refers to organ; organ = 'air_force';"}
{"sample_id": 4503, "db_id": "student_loan", "final": {"question": "How many disabled male students joined an organization?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name INNER JOIN enlist AS T3 ON T3.name = T2.name", "source_tables": ["disabled", "male", "enlist"]}, "evidence": "organization refers to organ; disabled male students refers to disabled.name who are IN male.name;"}
{"sample_id": 4541, "db_id": "student_loan", "final": {"question": "How many disabled students are male?", "sql": "SELECT COUNT(T1.name) FROM male AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "source_tables": ["disabled", "male"]}, "evidence": "male students are mentioned in male.name;"}
{"sample_id": 4371, "db_id": "student_loan", "final": {"question": "Among the students that have been absent from school for more than 5 months, how many of them are male?", "sql": "SELECT COUNT(T1.name) FROM longest_absense_from_school AS T1 INNER JOIN male AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.\"month\" >= 5", "source_tables": ["longest_absense_from_school", "male"]}, "evidence": "absent from school for more than 5 months refers to `month`\u00a0 > = 5;"}
{"sample_id": 4424, "db_id": "student_loan", "final": {"question": "How many students who have never been absent from school?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0", "source_tables": ["longest_absense_from_school"]}, "evidence": "have never been absent refers to `month` = 0;"}
{"sample_id": 4455, "db_id": "student_loan", "final": {"question": "List all the navy students who are disabled.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'", "source_tables": ["disabled", "enlist"]}, "evidence": "navy students refers to organ = 'navy'; disabled student refers to disabled.name"}
{"sample_id": 4378, "db_id": "student_loan", "final": {"question": "What is the longest time for a student from the navy department to be absent from school?", "sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.organ = 'navy' ORDER BY T1.\"month\" DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "navy department refers to organ = 'navy'; longest time to be absent from school refers to MAX(month)"}
{"sample_id": 4550, "db_id": "student_loan", "final": {"question": "How many male students are enrolled at OCC?", "sql": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN male AS T2 ON T1.name = T2.name WHERE T1.school = 'occ'", "source_tables": ["male", "enrolled"]}, "evidence": "male students are mentioned in male.name; OCC refers to school = 'occ';"}
{"sample_id": 4482, "db_id": "student_loan", "final": {"question": "What is the ratio of students who have payment due and those who do not have payment due?", "sql": "SELECT CAST(SUM(IIF(\"bool\" = 'pos', 1, 0)) AS REAL) / SUM(IIF(\"bool\" = 'neg', 1, 0)) FROM no_payment_due", "source_tables": ["no_payment_due"]}, "evidence": "ratio = \u00a0DIVIDE(COUNT(name WHERE `bool` = 'pos'), COUNT(name WHERE `bool` = 'neg')); have payment due refers to `bool` = 'pos'; no payment due refers to `bool` = 'neg';"}
{"sample_id": 4385, "db_id": "student_loan", "final": {"question": "Name all students enlisted in the foreign legion.", "sql": "SELECT name FROM enlist WHERE organ = 'foreign_legion'", "source_tables": ["enlist"]}, "evidence": "in the foreign legion organ = 'foreign_legion';"}
{"sample_id": 4557, "db_id": "student_loan", "final": {"question": "What is the name of the organization which most of the students are enlisted in?", "sql": "SELECT organ FROM ( SELECT organ, COUNT(organ) AS num FROM enlist GROUP BY organ ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["enlist"]}, "evidence": "name of the organization refers to organ; organization which most of the students are enlisted in refers to MAX(COUNT(organ));"}
{"sample_id": 4463, "db_id": "student_loan", "final": {"question": "List at least 5 students who has the longest absense from schoool?", "sql": "SELECT name FROM longest_absense_from_school ORDER BY month DESC LIMIT 5", "source_tables": ["longest_absense_from_school"]}, "evidence": "longest absense refers to MAX(month)"}
{"sample_id": 4484, "db_id": "student_loan", "final": {"question": "Calculate the average enlisted students per organization.", "sql": "SELECT CAST(COUNT(NAME) AS REAL) * 100 / COUNT(DISTINCT organ) FROM enlist", "source_tables": ["enlist"]}, "evidence": "average = DIVIDE(FLOOR(COUNT(NAME), COUNT(DISTINCT organ)));"}
{"sample_id": 4555, "db_id": "student_loan", "final": {"question": "How many students enlisted in the Navy?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "source_tables": ["enlist"]}, "evidence": "Navy refers to organ = 'navy';"}
{"sample_id": 4549, "db_id": "student_loan", "final": {"question": "Provide the name of disabled male students that are unemployed.", "sql": "SELECT T2.NAME FROM unemployed AS T1 INNER JOIN male AS T2 ON T1.name = T2.name INNER JOIN disabled AS T3 ON T3.name = T2.name", "source_tables": ["disabled", "male", "unemployed"]}, "evidence": "disabled male students that are unemployed refers to unemployed.name = male.name = disabled.name;"}
{"sample_id": 4536, "db_id": "student_loan", "final": {"question": "How many students are enlisted to the air force?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'air_force'", "source_tables": ["enlist"]}, "evidence": "Air Force refers to organ = 'air_force';"}
{"sample_id": 4498, "db_id": "student_loan", "final": {"question": "Calculate the percentage of female students.", "sql": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name", "source_tables": ["male", "person"]}, "evidence": "percentage = CONCAT(DIVIDE(MULTIPLY(COUNT(person.name which is not in male.name)), 100), COUNT(person.name that is IN male.name),'%'); female students refers to person.name who are NOT in male.name;"}
{"sample_id": 4565, "db_id": "student_loan", "final": {"question": "How many bankrupt students are there in the Marines?", "sql": "SELECT COUNT(T1.name) FROM filed_for_bankrupcy AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'", "source_tables": ["enlist", "filed_for_bankrupcy"]}, "evidence": "Marines refers to organ = 'marines';"}
{"sample_id": 4522, "db_id": "student_loan", "final": {"question": "State the number of disabled students who have payment due.", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.bool = 'neg'", "source_tables": ["disabled", "no_payment_due"]}, "evidence": "have payment due refers to bool = 'pos';"}
{"sample_id": 4483, "db_id": "student_loan", "final": {"question": "Provide the students' names and schools who enrolled for 15 months.", "sql": "SELECT name, school FROM enrolled WHERE month = 15", "source_tables": ["enrolled"]}, "evidence": "enrolled for 15 months refers to month = 15;"}
{"sample_id": 4423, "db_id": "student_loan", "final": {"question": "How many students enlisted in the fire-department?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'fire_department'", "source_tables": ["enlist"]}, "evidence": "enlisted in the fire-department refers to organ = 'fire_department';"}
{"sample_id": 4487, "db_id": "student_loan", "final": {"question": "Among students who have been absent for nine months, how many of them are disabled?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 LEFT JOIN longest_absense_from_school AS T2 ON T2.name = T1.name WHERE T2.month = 9", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "absent for 9 months refers to month = 9;"}
{"sample_id": 4376, "db_id": "student_loan", "final": {"question": "How many female students are disabled?", "sql": "SELECT COUNT(name) FROM disabled WHERE name NOT IN ( SELECT name FROM male )", "source_tables": ["disabled", "male"]}, "evidence": "females students are disabled refers to name that appeared in both disabled and male tables"}
{"sample_id": 4404, "db_id": "student_loan", "final": {"question": "What percentage of students who enlisted in the navy make up the number of students enrolled in OCC?", "sql": "SELECT CAST(SUM(IIF(T1.school = 'occ', 1.0, 0)) AS REAL) * 100 / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.organ = 'navy'", "source_tables": ["enlist", "enrolled"]}, "evidence": "in the navy refers to organ = 'navy'; enrolled in OCC refers to school = 'occ'"}
{"sample_id": 4523, "db_id": "student_loan", "final": {"question": "State name of students who have the longest duration of absense from school and do not have payment due.", "sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg' ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "no_payment_due"]}, "evidence": "longest duration of absence from school refers to MAX(month); do not have payment due refers to bool = 'neg';"}
{"sample_id": 4464, "db_id": "student_loan", "final": {"question": "How many of the students joined two organization?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ >= 2", "source_tables": ["enlist"]}, "evidence": "joined two organization refers to COUNT(organ) > = 2"}
{"sample_id": 4545, "db_id": "student_loan", "final": {"question": "Among all students, calculate the percentage of male students.", "sql": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name", "source_tables": ["male", "person"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(male.name), COUNT(person.name)), 100); male students are mentioned in male.name;"}
{"sample_id": 4427, "db_id": "student_loan", "final": {"question": "Give the number of students who have payment due.", "sql": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'pos'", "source_tables": ["no_payment_due"]}, "evidence": "who have payment due refers to bool = 'pos';"}
{"sample_id": 4508, "db_id": "student_loan", "final": {"question": "Which school have the highest student enrollment? How many of those students are filed for bankruptcy?", "sql": "SELECT T.school, num FROM ( SELECT T1.school, COUNT(T2.name) AS num FROM enrolled AS T1 LEFT JOIN filed_for_bankrupcy AS T2 ON T2.name = T1.name GROUP BY T1.school ) T ORDER BY T.num DESC LIMIT 1", "source_tables": ["filed_for_bankrupcy", "enrolled"]}, "evidence": "highest student enrollment refers to MAX(COUNT(school));"}
{"sample_id": 4456, "db_id": "student_loan", "final": {"question": "How many SMC's students that absent for 7 months?", "sql": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T1.school = 'smc' AND T2.month = 7", "source_tables": ["longest_absense_from_school", "enrolled"]}, "evidence": "SMC's students refers to school = 'smc'; absent for 7 months refers to month = 7"}
{"sample_id": 4528, "db_id": "student_loan", "final": {"question": "Give the number of students who enlisted in marines and have payment due.", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T1.bool = 'pos' AND T2.organ = 'marines'", "source_tables": ["enlist", "no_payment_due"]}, "evidence": "marines refers to organ = 'marines'; have payment due refers to bool = 'pos';"}
{"sample_id": 4514, "db_id": "student_loan", "final": {"question": "How many male students filed for bankruptcy as compare to female students?", "sql": "SELECT COUNT(T2.name) - SUM(IIF(T2.name IS NULL, 1, 0)) AS num FROM filed_for_bankrupcy AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name", "source_tables": ["male", "filed_for_bankrupcy"]}, "evidence": "difference = SUBTRACT(COUNT(filed_for_bankrupcy.name who are In male.name), COUNT(filed_for_bankrupcy.name who are NOT in male.name)); male students are mentioned in male.name; female students refers to filed_for_bankrupy.name who are NOT in male.name;"}
{"sample_id": 4448, "db_id": "student_loan", "final": {"question": "Sum up the number of students enlisted in foreign legion, peace corps and army.", "sql": "SELECT COUNT(name) FROM enlist WHERE organ IN ('army', 'peace_corps', 'foreign_legion')", "source_tables": ["enlist"]}, "evidence": "enlisted in foreign legion refers to organ = 'foreign_legion'; peace corps refers to organ = 'peace_corps'; army refers to organ = 'army'"}
{"sample_id": 4418, "db_id": "student_loan", "final": {"question": "List out all bankrupt students that are able to make payment before due?", "sql": "SELECT T1.name FROM filed_for_bankrupcy AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'neg'", "source_tables": ["no_payment_due", "filed_for_bankrupcy"]}, "evidence": "make payment before due refers to bool = 'neg';"}
{"sample_id": 4375, "db_id": "student_loan", "final": {"question": "Please list the male students that are disabled and have filed for bankruptcy.", "sql": "SELECT T1.name, T2.name, T3.name FROM disabled AS T1 INNER JOIN male AS T2 ON T1.\"name\" = T2.\"name\" INNER JOIN filed_for_bankrupcy AS T3 ON T1.\"name\" = T3.\"name\"", "source_tables": ["disabled", "male", "filed_for_bankrupcy"]}, "evidence": "male students that are disabled and have filed for bankruptcy refers to name that appeared in all three male, disabled and filed_for_bankrupcy tables."}
{"sample_id": 4458, "db_id": "student_loan", "final": {"question": "Calculate the ratio between unemployed students and disabled students.", "sql": "SELECT CAST(( SELECT COUNT(name) FROM unemployed ) AS REAL ) / ( SELECT COUNT(name) FROM disabled )", "source_tables": ["disabled", "unemployed"]}, "evidence": "ratio refers to DIVIDE(COUNT(name from unemployed), COUNT(name from disabled))"}
{"sample_id": 4562, "db_id": "student_loan", "final": {"question": "How many disabled students have zero absences?", "sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T2.month = 0", "source_tables": ["disabled", "longest_absense_from_school"]}, "evidence": "zero absences refers to month = 0;"}
{"sample_id": 4469, "db_id": "student_loan", "final": {"question": "How many female students have no payment due?", "sql": "SELECT COUNT(name) FROM no_payment_due WHERE name NOT IN ( SELECT name FROM male )", "source_tables": ["male", "no_payment_due"]}, "evidence": "have no payment due refers to bool = 'neg'; female students refers to name NOT in male table"}
{"sample_id": 4526, "db_id": "student_loan", "final": {"question": "List out the number of students who have the longest duration of absense from school and enlisted in the peace corps.", "sql": "SELECT COUNT(T1.NAME) FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'peace_corps' ORDER BY T1.month DESC LIMIT 1", "source_tables": ["longest_absense_from_school", "enlist"]}, "evidence": "longest duration of absence refers to MAX(month); peace corps refers to organ = 'peace_corps';"}
{"sample_id": 4370, "db_id": "student_loan", "final": {"question": "How many students belong to the navy department?", "sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "source_tables": ["enlist"]}, "evidence": "belong to the navy department refers to organ = 'navy';"}
{"sample_id": 4532, "db_id": "student_loan", "final": {"question": "Count the number of female students who belong to marines organization.", "sql": "SELECT COUNT(*) FROM person AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T1.name = T3.name WHERE T2.organ = 'marines' AND T3.name IS NULL", "source_tables": ["male", "enlist", "person"]}, "evidence": "female students refers to enlist.name who are NOT in male.name; organization refers to organ; organ = 'marines';"}
{"sample_id": 4444, "db_id": "student_loan", "final": {"question": "How many students have been absents for more than 6 months?", "sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 6", "source_tables": ["longest_absense_from_school"]}, "evidence": "absents for more than 6 months refers to month > 6"}
{"sample_id": 4539, "db_id": "student_loan", "final": {"question": "How many disabled students have payment due?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.bool = 'pos'", "source_tables": ["disabled", "no_payment_due"]}, "evidence": "payment due refers to bool = 'pos';"}
{"sample_id": 4556, "db_id": "student_loan", "final": {"question": "What is the name of the student with the longest duration of absence?", "sql": "SELECT name FROM longest_absense_from_school WHERE month = ( SELECT MAX(month) FROM longest_absense_from_school )", "source_tables": ["longest_absense_from_school"]}, "evidence": "longest duration of absence refers to MAX(month);"}
{"sample_id": 4403, "db_id": "student_loan", "final": {"question": "What is the percentage ratio of students who are enlisted in foreign legions that have a due payment?", "sql": "SELECT CAST(SUM(IIF(T1.bool = 'pos', 1, 0)) AS REAL) * 100 / SUM(IIF(T1.bool = 'neg', 1, 0)) FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.organ = 'foreign_legion'", "source_tables": ["enlist", "no_payment_due"]}, "evidence": "have a due payment refers to bool = 'pos'; in foreign legions refers to organ = 'foreign_legion'; ratio refers to DIVIDE(COUNT(bool = 'pos'), COUNT(bool = 'neg'))"}
{"sample_id": 4386, "db_id": "student_loan", "final": {"question": "Does student348 have a due payment?", "sql": "SELECT bool FROM no_payment_due WHERE name = 'student348'", "source_tables": ["no_payment_due"]}, "evidence": "payment due refers to bool = 'pos' means the student has payment due , bool = 'neg' means the student does not have payment due;"}
{"sample_id": 4405, "db_id": "student_loan", "final": {"question": "List out student IDs that have the longest absence duration from school.", "sql": "SELECT name FROM longest_absense_from_school WHERE \"month\" = ( SELECT MAX(month) FROM longest_absense_from_school )", "source_tables": ["longest_absense_from_school"]}, "evidence": "longest absence duration refers to MAX(month)"}
{"sample_id": 4492, "db_id": "student_loan", "final": {"question": "Among the students with disabilities, list any five students' names who are unemployed.", "sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name LIMIT 5", "source_tables": ["disabled", "unemployed"]}, "evidence": "students with disabilities who are unemployed refers to disabled.name who are IN unemployed.name;"}
{"sample_id": 4559, "db_id": "student_loan", "final": {"question": "Among the students that have a payment due, how many students are unemployed?", "sql": "SELECT COUNT(T1.name) FROM no_payment_due AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.bool = 'pos'", "source_tables": ["unemployed", "no_payment_due"]}, "evidence": "students that have a payment due refers to bool = 'pos';"}
{"sample_id": 4620, "db_id": "mental_health_survey", "final": {"question": "List the top three popular responses to the question of the survey in 2017 with the question ID no.85.", "sql": "SELECT AnswerText FROM Answer WHERE QuestionID = 85 AND SurveyID = 2017 GROUP BY AnswerText ORDER BY COUNT(AnswerText) DESC LIMIT 3", "source_tables": ["answer"]}, "evidence": "\n\nsurvey in 2017 refers to SurveyID = 2017; questionID = 85; MAX(COUNT(AnswerText))"}
{"sample_id": 4596, "db_id": "mental_health_survey", "final": {"question": "How many users answered the question No.20?", "sql": "SELECT MAX(UserID) - MIN(UserID) + 1 FROM Answer WHERE QuestionID = 20", "source_tables": ["answer"]}, "evidence": "question No.20 refers to QuestionID = 20"}
{"sample_id": 4574, "db_id": "mental_health_survey", "final": {"question": "In 2019, how many users in the United States have a family history of mental illness?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN ( SELECT T2.questionid FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 6 AND T1.AnswerText LIKE 'Yes' ) AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2019 AND T2.questionid = 3 AND T1.AnswerText LIKE 'United States'", "source_tables": ["answer", "question"]}, "evidence": "2019 refer to SurveyID; Users in the United States refers to AnswerText = 'United States' where questionid = 3; have a family history of mental illness refers to AnswerText = 'Yes' where questionid = 6"}
{"sample_id": 4586, "db_id": "mental_health_survey", "final": {"question": "How many users participated in the mental health survey for 2014?", "sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2014'", "source_tables": ["answer", "survey"]}, "evidence": "mental health survey for 2014 refers to SurveyID = 2014"}
{"sample_id": 4595, "db_id": "mental_health_survey", "final": {"question": "Tell the question ID for \"Would you bring up a physical health issue with a potential employer in an interview?\".", "sql": "SELECT questionid FROM Question WHERE questiontext LIKE 'Would you bring up a physical health issue with a potential employer in an interview?'", "source_tables": ["question"]}, "evidence": ""}
{"sample_id": 4577, "db_id": "mental_health_survey", "final": {"question": "How many users believed that their productivity is ever affected by a mental health issue overall?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 54 AND T1.AnswerText LIKE 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "Users who believed that their productivity is affected by a mental health issues overall refers to AnswerText = 'Yes' where questionid = 54"}
{"sample_id": 4575, "db_id": "mental_health_survey", "final": {"question": "Betweeen 2016 to 2019, which year recorded the highest number of people with mental illness?", "sql": "SELECT T1.SurveyID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID BETWEEN 2016 AND 2019 AND T2.questionid = 34 AND T1.AnswerText LIKE 'Yes' GROUP BY T1.SurveyID ORDER BY COUNT(T1.UserID) DESC LIMIT 1", "source_tables": ["answer", "question"]}, "evidence": "Between 2016 to 2019 refer to SurveyID 2016 BETWEEN 2019; People with mental illness refers to AnswerText = 'Yes' where questionid = 34"}
{"sample_id": 4582, "db_id": "mental_health_survey", "final": {"question": "How many questions in 2014's survey had more than 200 answers?", "sql": "SELECT COUNT(QuestionID) FROM Answer WHERE SurveyID LIKE 2014 GROUP BY QuestionID ORDER BY COUNT(QuestionID) > 200 LIMIT 1", "source_tables": ["answer"]}, "evidence": "2014 refer to SurveyID; COUNT(QuestionID) where COUNT(AnswerText) > 200"}
{"sample_id": 4615, "db_id": "mental_health_survey", "final": {"question": "What is the average number of respondents per survey between 2014 and 2019?", "sql": "SELECT CAST(COUNT(SurveyID) AS REAL) / 5 FROM Answer WHERE SurveyID BETWEEN 2014 AND 2019", "source_tables": ["answer"]}, "evidence": "respondents and 'users' are synonyms; average number = avg(count(userID(SurveyID = 2014)), count(userID(SurveyID = 2019)))"}
{"sample_id": 4576, "db_id": "mental_health_survey", "final": {"question": "How many female users were surveyed in the mental health survey for 2017 in the state of Nebraska?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T3.Description = 'mental health survey for 2017' AND T1.questionid = 2 AND T2.AnswerText = 'Female' UNION SELECT T2.UserID FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID INNER JOIN Survey AS T3 ON T2.SurveyID = T3.SurveyID WHERE T1.questionid = 4 AND T2.AnswerText = 'Nebraska' AND T3.Description = 'mental health survey for 2017' )", "source_tables": ["answer", "question", "survey"]}, "evidence": "AnswerText = 'Yes' where questiontext = 'Do you have a family history of mental illness?'; AnswerText = 'Female' where questionid = 2; AnswerText = 'Nebraska' where questionid = 4"}
{"sample_id": 4590, "db_id": "mental_health_survey", "final": {"question": "Please list all the questions in the mental health survey for 2014.", "sql": "SELECT T2.questiontext FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid INNER JOIN Survey AS T3 ON T1.SurveyID = T3.SurveyID WHERE T3.Description LIKE 'mental health survey for 2014' GROUP BY T2.questiontext", "source_tables": ["answer", "question", "survey"]}, "evidence": "mental health survey for 2014 refers to SurveyID = 2014"}
{"sample_id": 4608, "db_id": "mental_health_survey", "final": {"question": "Give the number of users who took the \"mental health survey for 2018\".", "sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018'", "source_tables": ["answer", "survey"]}, "evidence": "mental health survey for 2018 refers to SurveyID = 2018"}
{"sample_id": 4572, "db_id": "mental_health_survey", "final": {"question": "From 2016 to 2019, how many users each year were asked the question 13?", "sql": "SELECT SurveyID, COUNT(UserID) FROM Answer WHERE QuestionID = 13 AND SurveyID BETWEEN 2016 AND 2019 GROUP BY SurveyID", "source_tables": ["answer"]}, "evidence": "From 2016 to 2019 refer to SurveyID 2016 BETWEEN 2019; Question 13 refer to QuestionID"}
{"sample_id": 4583, "db_id": "mental_health_survey", "final": {"question": "What is the oldest age of the users in 2014's survey?", "sql": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'What is your age?' AND T2.SurveyID = 2014 ORDER BY T2.AnswerText DESC LIMIT 1", "source_tables": ["answer", "question"]}, "evidence": "what is your age? refer to QuestionText; 2014 refer to SurveyID; oldest age refers to MAX(AnswerText)\n\n"}
{"sample_id": 4614, "db_id": "mental_health_survey", "final": {"question": "How many respondents younger than 25 years old did participate in the survey in 2016?", "sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 1 AND T1.SurveyID = 2016 AND T1.AnswerText <= 25", "source_tables": ["answer", "question"]}, "evidence": "respondents' and 'users' are synonyms; younger than 25 years old refers to AnswerText(SurveyID = 2016& QuestionID = 1)< 25"}
{"sample_id": 4591, "db_id": "mental_health_survey", "final": {"question": "According to 2016's survey, what is the number of users with a mental health disorder in the past?", "sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2016 AND T1.questiontext LIKE 'Have you had a mental health disorder in the past?' AND T2.AnswerText = 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "users with a mental health disorder in the past refers to AnswerText(QuestionID(32)) = 'Yes'"}
{"sample_id": 4599, "db_id": "mental_health_survey", "final": {"question": "State the number of questions that were asked in the \"mental health survey for 2018\".", "sql": "SELECT COUNT(T1.QuestionID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018'", "source_tables": ["answer", "survey"]}, "evidence": "mental health survey for 2018 refers to SurveyID = 2018"}
{"sample_id": 4597, "db_id": "mental_health_survey", "final": {"question": "How many questions did user No.5 answer?", "sql": "SELECT COUNT(QuestionID) FROM Answer WHERE UserID = 5", "source_tables": ["answer"]}, "evidence": "user No.5 refers to userID = 5"}
{"sample_id": 4610, "db_id": "mental_health_survey", "final": {"question": "For which question did the user No.2183 gave the answer \"Mood Disorder (Depression, Bipolar Disorder, etc)\"?", "sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 2183 AND T1.AnswerText = 'Mood Disorder (Depression, Bipolar Disorder, etc)'", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; user No.2183 refers to userID = 2183"}
{"sample_id": 4573, "db_id": "mental_health_survey", "final": {"question": "How many users, between the age 27 to 35, were surveyed in 2018?", "sql": "SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.SurveyID = 2018 AND T2.questionid = 1 AND T1.AnswerText BETWEEN '27' AND '35'", "source_tables": ["answer", "question"]}, "evidence": "Age 27 to 35 refer to AnswerText 27 BETWEEN 35 where questionid = 1; 2018 refer to SurveyID\n\n"}
{"sample_id": 4617, "db_id": "mental_health_survey", "final": {"question": "How many respondents who participated in the survey in 2014 work remotely at least 50% of the time?", "sql": "SELECT COUNT(T1.AnswerText) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 93 AND T1.SurveyID = 2014 AND T1.AnswerText = 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "respondents' and 'users' are synonyms; work remotely at least 50% of the time refers to AnswerText(SurveyID = 2014& QuestionID = 93) = 'Yes'"}
{"sample_id": 4593, "db_id": "mental_health_survey", "final": {"question": "What is the average result of the question \"What is your age?\" in 2014's survey?", "sql": "SELECT CAST(SUM(T2.AnswerText) AS REAL) / COUNT(T2.UserID) AS \"avg\" FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2014 AND T1.questiontext LIKE 'What is your age?'", "source_tables": ["answer", "question"]}, "evidence": "average result refers to avg(AnswerText(SurveyID = 2014& QuestionID = 1))"}
{"sample_id": 4571, "db_id": "mental_health_survey", "final": {"question": "How many users answered \"No\" to question 19?", "sql": "SELECT COUNT(QuestionID) FROM Answer WHERE QuestionID = 19 AND AnswerText LIKE 'No'", "source_tables": ["answer"]}, "evidence": "Question 19 refer to QuestionID = 19; No refer to AnswerText = 'No'\n"}
{"sample_id": 4601, "db_id": "mental_health_survey", "final": {"question": "What answer did user No. 2681 give to the question \"Do you currently have a mental health disorder?\"?", "sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'Do you currently have a mental health disorder?' AND T1.UserID = 2681", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; user No. 2681 refers to UserID = 2681\n\n"}
{"sample_id": 4607, "db_id": "mental_health_survey", "final": {"question": "For all the users who have been asked \"Have you ever been diagnosed with a mental health disorder?\", how many of them said \"Yes\"?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Have you ever been diagnosed with a mental health disorder?' AND T1.AnswerText = 'Yes'", "source_tables": ["answer", "question"]}, "evidence": "have asked refers to questiontext; said 'Yes' refers to AnswerText = 'Yes'"}
{"sample_id": 4605, "db_id": "mental_health_survey", "final": {"question": "For the question \u201cWhat US state or territory do you work in?\u201d, how many people gave \"Kansas\" as the answer?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'What US state or territory do you work in?' AND T1.AnswerText = 'Kansas'", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext; AnswerText = 'Kansas'"}
{"sample_id": 4578, "db_id": "mental_health_survey", "final": {"question": "What are the ages of the oldest and youngest user that were surveyed? Indicate their user id.", "sql": "SELECT MAX(T1.AnswerText), MIN(T1.AnswerText) , ( SELECT T1.UserID FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1 ORDER BY T1.AnswerText LIMIT 1 ) AS \"youngest id\" FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questionid = 1", "source_tables": ["answer", "question"]}, "evidence": "Oldest user refer to MAX(AnswerText) where questionid = 1; Youngest user refer to MIN(AnswerText) where questionid = 1\n"}
{"sample_id": 4594, "db_id": "mental_health_survey", "final": {"question": "What is the rate of increase of users with a current mental disorder from 2019's survey to 2016's survey?", "sql": "SELECT CAST(( SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2019 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.AnswerText = 'Yes' ) - ( SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2016 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.AnswerText = 'Yes' ) AS REAL) * 100 / ( SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID = 2016 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.AnswerText = 'Yes' )", "source_tables": ["answer", "question"]}, "evidence": "rate of increase = subtract(divide(count(SurveyID = 2019& QuestionID = 33& AnswerText = 'Yes'), count(SurveyID = 2019& QuestionID = 33)), divide(count(SurveyID = 2016& QuestionID = 33& AnswerText = 'Yes'), count(SurveyID = 2016& QuestionID = 33)))"}
{"sample_id": 4609, "db_id": "mental_health_survey", "final": {"question": "How many users answered the question \"Overall, how much importance does your employer place on physical health?\"?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Overall, how much importance does your employer place on physical health?'", "source_tables": ["answer", "question"]}, "evidence": "question refers to questiontext"}
{"sample_id": 4616, "db_id": "mental_health_survey", "final": {"question": "How many respondents who participated in the survey in 2019 have ever sought treatment for a mental health disorder from a mental health professional?", "sql": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 7 AND T1.SurveyID = 2019 AND T1.AnswerText = 1", "source_tables": ["answer", "question"]}, "evidence": "respondents' and 'users' are synonyms, have ever sought treatment for a mental health disorder from a mental health professional refers to AnswerText(SurveyID = 2019& QuestionID = 7) = 1"}
{"sample_id": 4712, "db_id": "disney", "final": {"question": "Which director had the most popular film from 1937 to 1990?", "sql": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name INNER JOIN movies_total_gross AS T3 ON T3.movie_title = T1.movie_title WHERE SUBSTR(T3.release_date, LENGTH(T3.release_date) - 3, LENGTH(T3.release_date)) BETWEEN '1937' AND '1990' ORDER BY CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["director", "characters", "movies_total_gross"]}, "evidence": "from 1937 to 1990 refers to substr(release_date, length(release_date) - 3, length(release_date)) between '1937' and '1990'; the most popular film refers to movie_title where MAX(total_gross);"}
{"sample_id": 4710, "db_id": "disney", "final": {"question": "List the names of the directors whose films grossed over $100 million.", "sql": "SELECT DISTINCT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name INNER JOIN movies_total_gross AS T3 ON T1.movie_title = T3.movie_title WHERE CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL) > 100000000", "source_tables": ["director", "characters", "movies_total_gross"]}, "evidence": "films grossed over $100 million refer to movie_title where total_gross > 100000000;"}
{"sample_id": 4679, "db_id": "disney", "final": {"question": "What proportion of the total gross of all movies is from movies with songs?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.song IS NOT NULL THEN T2.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T2.movie_title) FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie_title = T2.movie_title", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "Movies with songs refer song = 'not null'; DIVIDE(SUM(total_gross where song = 'not null'), sum(total_gross)) as percentage;"}
{"sample_id": 4680, "db_id": "disney", "final": {"question": "List the movies and genres released in 2016.", "sql": "SELECT movie_title, genre FROM movies_total_gross WHERE SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '2016'", "source_tables": ["movies_total_gross"]}, "evidence": "released in 2016 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '2016'; movies refer to the movie_title;"}
{"sample_id": 4664, "db_id": "disney", "final": {"question": "Which director has made the most movies?", "sql": "SELECT director, COUNT(name) FROM director GROUP BY director ORDER BY COUNT(name) DESC LIMIT 1", "source_tables": ["director"]}, "evidence": "the most movies refers to MAX(COUNT(name));"}
{"sample_id": 4697, "db_id": "disney", "final": {"question": "Among the movies released from 1991 to 2000, calculate the percentage of comedy movies. Provide any five movie titles and directors.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.genre = 'Comedy' THEN T1.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_title), group_concat(T1.movie_title), group_concat(T2.director) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) BETWEEN '1991' AND '2000'", "source_tables": ["movies_total_gross", "director"]}, "evidence": "DIVIDE(COUNT(movie_title where genre = 'Comedy'), COUNT(movie_title)) as percentage where substr(release_date, length(release_date) - 3, length(release_date)) between '1991' and '2000';"}
{"sample_id": 4701, "db_id": "disney", "final": {"question": "List the movie titles with the voice actor Jeff Bennet", "sql": "SELECT movie FROM \"voice-actors\" WHERE \"voice-actor\" = 'Jeff Bennett'", "source_tables": ["voice-actors"]}, "evidence": "Jeff Bennett refers to voice-actor = 'Jeff Bennett';"}
{"sample_id": 4641, "db_id": "disney", "final": {"question": "Who is the hero character of the Disney movie directed by Will Finn?", "sql": "SELECT T1.hero FROM characters AS T1 INNER JOIN director AS T2 ON T2.name = T1.movie_title WHERE T2.director = 'Will Finn'", "source_tables": ["director", "characters"]}, "evidence": "Will Finn refers to director = 'Will Finn';"}
{"sample_id": 4654, "db_id": "disney", "final": {"question": "What is the Motion Picture Association of America rating for the movie featuring a villain named Turbo?", "sql": "SELECT T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.villian = 'Turbo'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "The Motion Picture Association of America rating refers to MPAA_rating; villian = 'Turbo';"}
{"sample_id": 4735, "db_id": "disney", "final": {"question": "Among all Disney movies directed by Gary Trousdale, determine the percentage that earned over USD100m based on actual grossing.", "sql": "SELECT CAST(COUNT(CASE WHEN CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T1.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_title) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Gary Trousdale'", "source_tables": ["movies_total_gross", "director"]}, "evidence": "DIVIDE(COUNT(movie_title where director = 'Gary Trousdale' and total_gross > 100000000), COUNT(movie_title where director = 'Gary Trousdale')) as percentage;"}
{"sample_id": 4658, "db_id": "disney", "final": {"question": "What is the most popular movie directed by Ron Clements?", "sql": "SELECT T2.name FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T2.name = T1.movie_title WHERE T2.director = 'Ron Clements' ORDER BY CAST(REPLACE(SUBSTR(total_gross, 2), ',', '') AS int) DESC LIMIT 1", "source_tables": ["movies_total_gross", "director"]}, "evidence": "Ron Clements refers to director = 'Ron Clements'; the most popular movie refers to movie_title where MAX(total_gross);"}
{"sample_id": 4621, "db_id": "disney", "final": {"question": "How much more total box office gross did the Walt Disney Company have in revenue in 1998 than in 1997?", "sql": "SELECT SUM(CASE WHEN \"Year\" = 1998 THEN Total ELSE 0 END) - SUM(CASE WHEN \"Year\" = 1997 THEN Total ELSE 0 END) FROM revenue", "source_tables": ["revenue"]}, "evidence": "SUBTRACT(SUM(Year = 1998), SUM(Year = 1997))"}
{"sample_id": 4681, "db_id": "disney", "final": {"question": "Who is the villain in Little Mermaid?", "sql": "SELECT villian FROM characters WHERE movie_title = 'Little Mermaid'", "source_tables": ["characters"]}, "evidence": "Little Mermaid refers to movie_title = 'Little Mermaid';"}
{"sample_id": 4630, "db_id": "disney", "final": {"question": "Among the movies directed by Wolfgang Reitherman, how many of them are Comedies?", "sql": "SELECT COUNT(T3.name) FROM ( SELECT T2.name FROM \"movies_total_gross\" AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.genre = 'Comedy' GROUP BY T2.name ) T3", "source_tables": ["movies_total_gross", "director"]}, "evidence": "directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; comedies refers to genre = 'Comedy'; movies refer to movie_title;"}
{"sample_id": 4725, "db_id": "disney", "final": {"question": "Name the main character of Disney's most popular adventure movie based on its inflation-adjusted gross.", "sql": "SELECT T2.hero FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Adventure' ORDER BY CAST(REPLACE(trim(T1.inflation_adjusted_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "adventure movie refers to genre = 'Adventure'; the main character of the movie refers to hero; most popular movie based on its inflation-adjusted gross refers to where MAX(inflation_adjusted_gross);"}
{"sample_id": 4657, "db_id": "disney", "final": {"question": "Which director did Bill Thompson work the most with?", "sql": "SELECT director FROM director AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.name = T2.movie WHERE T2.\"voice-actor\" = 'Bill Thompson' GROUP BY director ORDER BY COUNT(director) DESC LIMIT 1", "source_tables": ["voice-actors", "director"]}, "evidence": "Bill Thompson refers to voice-actor = 'Bill Thompson'; worked the most refers to MAX(COUNT(name));"}
{"sample_id": 4724, "db_id": "disney", "final": {"question": "Determine Disney's total box office gross between 2010 and 2016.", "sql": "SELECT SUM(Total) FROM revenue WHERE \"Year\" BETWEEN 2010 AND 2016", "source_tables": ["revenue"]}, "evidence": "between 2010 and 2016 refers to Year between 2010 and 2016;"}
{"sample_id": 4643, "db_id": "disney", "final": {"question": "Give the name of the director of the movie in which Verna Felton was the voice actor for its character \"Aunt Sarah\".", "sql": "SELECT T1.director FROM director AS T1 INNER JOIN \"voice-actors\" AS T2 ON T2.movie = T1.name WHERE T2.character = 'Aunt Sarah' AND T2.\"voice-actor\" = 'Verna Felton'", "source_tables": ["voice-actors", "director"]}, "evidence": "FALSE;"}
{"sample_id": 4625, "db_id": "disney", "final": {"question": "Among the movies directed by Wolfgang Reitherman, how many of them were released in December?", "sql": "SELECT COUNT(movie_title) FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(release_date, INSTR(release_date, '-') + 1, 3) = 'Dec' AND T2.director = 'Wolfgang Reitherman'", "source_tables": ["director", "characters"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; released in December refers to (release_date, instr(release_date, '-') + 1, 3) = 'Dec';"}
{"sample_id": 4653, "db_id": "disney", "final": {"question": "How much is the total gross of the movie with a song titled \"Little Wonders\"?", "sql": "SELECT T1.total_gross FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.song = 'Little Wonders'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "song = 'Little Wonders'"}
{"sample_id": 4720, "db_id": "disney", "final": {"question": "How many movies were released by Disney between 2010 and 2016?", "sql": "SELECT COUNT(movie_title) FROM characters WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '10' AND '16'", "source_tables": ["characters"]}, "evidence": "Movies refer to movie_title; released between 2010 and 2016 refers to substr(release_date, length(release_date) - 1, length(release_date)) between '10' and '16';"}
{"sample_id": 4675, "db_id": "disney", "final": {"question": "List the directors of movies that feature a song.", "sql": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song IS NOT NULL GROUP BY T2.director", "source_tables": ["director", "characters"]}, "evidence": "movies that feature a song refer to movie_title where song is not NULL;"}
{"sample_id": 4711, "db_id": "disney", "final": {"question": "Which movie's song title has the highest total gross?", "sql": "SELECT T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "The highest total gross refers to MAX(total_gross);"}
{"sample_id": 4690, "db_id": "disney", "final": {"question": "Provide the title, total gross, and MPAA rating of the movie which has a hero named Elsa.", "sql": "SELECT T1.movie_title, T1.total_gross, T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T3.name = T1.movie_title WHERE T2.hero = 'Elsa'", "source_tables": ["movies_total_gross", "director", "characters"]}, "evidence": "Elsa is the main character of the movie which refers to hero = 'Elsa'; title refers to movie_title;"}
{"sample_id": 4644, "db_id": "disney", "final": {"question": "For the movie in which Tress MacNeille was the voice actor for its character \"Hyacinth Hippo\", what was the release date of that movie?", "sql": "SELECT T1.release_date FROM characters AS T1 INNER JOIN \"voice-actors\" AS T2 ON T2.movie = T1.movie_title WHERE T2.character = 'Hyacinth Hippo' AND T2.\"voice-actor\" = 'Tress MacNeille'", "source_tables": ["voice-actors", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4696, "db_id": "disney", "final": {"question": "Provide the directors and MPAA ratings of the musical movies released in 1993.", "sql": "SELECT T2.director, T1.MPAA_rating FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.genre = 'Musical' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1993'", "source_tables": ["movies_total_gross", "director"]}, "evidence": "Musical movies refer to genre = 'Musical'; released in 1993 refers to substr(release_date, length(release_date) - 3, length(release_date)) = '1993';"}
{"sample_id": 4629, "db_id": "disney", "final": {"question": "Among the movies in which Alan Tudyk is a voice actor, how many of them were released after 2012?", "sql": "SELECT COUNT(T2.movie) FROM characters AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.movie_title = T2.movie WHERE T2.\"voice-actor\" = 'Alan Tudyk' AND SUBSTR(release_date, INSTR(release_date, '-') + 5) > 12", "source_tables": ["voice-actors", "characters"]}, "evidence": "released after 2012 refers to (release_date, instr(release_date, '-') + 5) > 12;"}
{"sample_id": 4719, "db_id": "disney", "final": {"question": "Name the first movie released by Disney.", "sql": "SELECT movie_title FROM characters ORDER BY SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) ASC LIMIT 1", "source_tables": ["characters"]}, "evidence": "The first movie released refers to movie_title where substr(release_date, length(release_date) - 1, length(release_date)) asc limit 1;"}
{"sample_id": 4705, "db_id": "disney", "final": {"question": "Provide the name of the song from the movie directed by Ben Sharpsteen.", "sql": "SELECT T1.song FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ben Sharpsteen'", "source_tables": ["director", "characters"]}, "evidence": "Ben Sharpsteen refers to director = 'Ben Sharpsteen';"}
{"sample_id": 4655, "db_id": "disney", "final": {"question": "How many movies for mature audiences or parental guidance suggested did Bill Thompson work as a voice actor?", "sql": "SELECT COUNT(T.movie) FROM ( SELECT T1.movie FROM \"voice-actors\" AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie = T2.movie_title WHERE MPAA_rating = 'PG' AND \"voice-actor\" = 'Bill Thompson' GROUP BY T1.movie ) AS T", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "movies for mature audiences or parental guidance refer to movie_title where MPAA_rating = 'PG';"}
{"sample_id": 4729, "db_id": "disney", "final": {"question": "How many voice-actors were involved in the Bambi movie?", "sql": "SELECT COUNT(DISTINCT \"voice-actor\") FROM \"voice-actors\" WHERE movie = 'Bambi'", "source_tables": ["voice-actors"]}, "evidence": "Bambi is the name of the movie which refers to movie = 'Bambi';"}
{"sample_id": 4647, "db_id": "disney", "final": {"question": "Who is the hero character of the adventure movie which was released on 2016/3/4?", "sql": "SELECT T1.hero FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T2.genre = 'Adventure' AND T1.release_date = '4-Mar-16'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "released on 2016/3/4 refers to release_date = '4-Mar-16'; adventure movie refers to genre = 'Adventure' ;"}
{"sample_id": 4683, "db_id": "disney", "final": {"question": "Provide the movie titles and the estimated inflation rate of the highest total grossed movie.", "sql": "SELECT movie_title, CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) / CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) FROM movies_total_gross ORDER BY CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross"]}, "evidence": "The highest grossed movie refers to MAX(total_gross); DIVIDE(inflation_adjusted_gross, total_gross) as percentage;"}
{"sample_id": 4651, "db_id": "disney", "final": {"question": "How many restricted horror movies were released between 1/1/1990 to 12/31/2015?", "sql": "SELECT COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'R' AND genre = 'Horror' AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS int) BETWEEN 1990 AND 2015", "source_tables": ["movies_total_gross"]}, "evidence": "Restricted refers to MPAA_rating = 'R'; horror refers to genre = 'Horror'; released between 1/1/1990 to 12/31/2015 refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1990 and 2015);"}
{"sample_id": 4692, "db_id": "disney", "final": {"question": "Among Frank Welker's voice-acted movies, list the movie titles and the total gross when the estimated inflation rate was less than 2.", "sql": "SELECT T1.movie_title, T1.total_gross FROM movies_total_gross AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.movie_title = T2.movie WHERE T2.\"voice-actor\" = 'Frank Welker' AND CAST(REPLACE(trim(T1.inflation_adjusted_gross, '$'), ',', '') AS REAL) * 1.0 / CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) * 1.0 < 2", "source_tables": ["voice-actors", "movies_total_gross"]}, "evidence": "Frank Welker refers to voice-actor = 'Frank Welker'; estimated inflation rate was less than 2 can be computed as follows DIVIDE(inflation_adjusted_gross, total_gross) as percentage < 2;"}
{"sample_id": 4624, "db_id": "disney", "final": {"question": "Please list the villains of all the movies directed by Wolfgang Reitherman.", "sql": "SELECT T2.villian FROM director AS T1 INNER JOIN characters AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Wolfgang Reitherman' AND T2.villian IS NOT NULL", "source_tables": ["director", "characters"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';"}
{"sample_id": 4634, "db_id": "disney", "final": {"question": "What is the genre of the movie whose villain is Commander Rourke?", "sql": "SELECT T2.genre FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T1.villian = 'Commander Rourke'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4706, "db_id": "disney", "final": {"question": "Indicate the release date of the film The Lion King directed by Roger Allers.", "sql": "SELECT T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Roger Allers' AND T1.movie_title = 'The Lion King'", "source_tables": ["director", "characters"]}, "evidence": "The Lion King refers to movie_title = 'The Lion King'; Roger Allers refers to director = 'Roger Allers';"}
{"sample_id": 4704, "db_id": "disney", "final": {"question": "How many movies were released between 1937 and 1950?", "sql": "SELECT COUNT(movie_title) FROM characters WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '37' AND '50'", "source_tables": ["characters"]}, "evidence": "released between 1937 and 1950 refers to substr(release_date, length(release_date) - 1,length(release_date)) between '37' and '50';"}
{"sample_id": 4707, "db_id": "disney", "final": {"question": "Name the villain of the movie with Scott Weinger and Brad Kane as voice actors.", "sql": "SELECT T1.villian FROM characters AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.movie_title = T2.movie WHERE T2.\"voice-actor\" = 'Scott Weinger Brad Kane'", "source_tables": ["voice-actors", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4718, "db_id": "disney", "final": {"question": "Calculate the percentage of voice actors whose main character in the movie is in the Drama genre.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.genre = 'Drama' THEN T3.\"voice-actor\" ELSE NULL END) AS REAL) * 100 / COUNT(T3.\"voice-actor\") FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN \"voice-actors\" AS T3 ON T3.movie = T1.movie_title", "source_tables": ["voice-actors", "movies_total_gross", "characters"]}, "evidence": "DIVIDE(COUNT(voice-actor where genre = 'Drama'), COUNT(voice-actor)) as percentage;"}
{"sample_id": 4662, "db_id": "disney", "final": {"question": "Who is the villain in the movie \"The Great Mouse Detective\"?", "sql": "SELECT villian FROM characters WHERE movie_title = 'The Great Mouse Detective'", "source_tables": ["characters"]}, "evidence": "The Great Mouse Detective refers to movie_title = 'The Great Mouse Detective';"}
{"sample_id": 4715, "db_id": "disney", "final": {"question": "What genre of movie has Taran as the main character?", "sql": "SELECT T1.genre FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T2.hero = 'Taran'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "Taran is the main character of the movie which refers to hero = 'Taran';"}
{"sample_id": 4640, "db_id": "disney", "final": {"question": "Which song is associated with the most popular Disney movie in 1970s?", "sql": "SELECT T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE CAST(SUBSTR(T1.release_date, INSTR(T1.release_date, ', ') + 1) AS int) BETWEEN 1970 AND 1979 ORDER BY CAST(REPLACE(SUBSTR(T1.total_gross, 2), ',', '') AS float) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "the most popular movie refers to movie_title where MAX(total_gross); in 1970s refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1970 and 1979);"}
{"sample_id": 4709, "db_id": "disney", "final": {"question": "List the titles of movies directed by Jack Kinney that were released before 1947.", "sql": "SELECT T1.movie_title FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Jack Kinney' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 1, LENGTH(T1.release_date)) < '47'", "source_tables": ["director", "characters"]}, "evidence": "Jack Kinney refers to director = 'Jack Kinney'; released before 1947 refers to substr(release_date, length(release_date) - 1, length(release_date)) < '47';"}
{"sample_id": 4670, "db_id": "disney", "final": {"question": "List all of Wolfgang Reitherman's movies and their voice actors.", "sql": "SELECT T1.name, T2.\"voice-actor\" FROM director AS T1 INNER JOIN \"voice-actors\" AS T2 ON T1.name = T2.movie WHERE T1.director = 'Wolfgang Reitherman'", "source_tables": ["voice-actors", "director"]}, "evidence": "Wolfgang Reitherman refers to director = 'Wolfgang Reitherman';"}
{"sample_id": 4730, "db_id": "disney", "final": {"question": "Find the estimated inflation rate that was used to adjust the 1995 box office revenue for Disney's films.", "sql": "SELECT SUM(CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL)) / SUM(CAST(REPLACE(trim(total_gross, '$'), ',', '') AS REAL)) FROM movies_total_gross WHERE SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '1995' GROUP BY SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '1995'", "source_tables": ["movies_total_gross"]}, "evidence": "DIVIDE(inflation_adjusted_gross, total_gross) as percentage where substr(release_date, length(release_date) - 3, length(release_date)) = '1995';"}
{"sample_id": 4684, "db_id": "disney", "final": {"question": "List the PG-13 romantic comedy movie titles and their release dates.", "sql": "SELECT movie_title, release_date FROM movies_total_gross WHERE MPAA_rating = 'PG-13' AND genre = 'Romantic Comedy'", "source_tables": ["movies_total_gross"]}, "evidence": "PG-13 refers to MPAA_rating = 'PG-13'; romantic comedy refers to genre = 'Romantic Comedy';"}
{"sample_id": 4726, "db_id": "disney", "final": {"question": "Name the director of Disney's lowest grossing movie.", "sql": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) ASC LIMIT 1", "source_tables": ["movies_total_gross", "director"]}, "evidence": "lowest grossing movie refers to movie_title where MIN(total_gross);"}
{"sample_id": 4695, "db_id": "disney", "final": {"question": "Who is the voice actor of the hero in Lion King?", "sql": "SELECT T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T2.movie_title = 'Lion King' AND T1.character = 'Lion King'", "source_tables": ["voice-actors", "characters"]}, "evidence": "Lion King refers to movie_title = 'Lion King';"}
{"sample_id": 4723, "db_id": "disney", "final": {"question": "Which actor voices Akela from The Jungle Book?", "sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE character = 'Akela'", "source_tables": ["voice-actors"]}, "evidence": "Akela refers character = 'Akela'; which actor voices refers to voice-actor;"}
{"sample_id": 4672, "db_id": "disney", "final": {"question": "What is the highest grossing movie without a song?", "sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie_title WHERE T2.song IS NULL ORDER BY CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "the highest grossing movie without song refers to movie_title where MAX(total_gross) and song = 'null';"}
{"sample_id": 4734, "db_id": "disney", "final": {"question": "Name the top 5 highest-grossing Disney movies adjusted for inflation. Identify the percentage they contributed to the total of Disney's current gross.", "sql": "SELECT SUM(CASE WHEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) > 1236035515 THEN CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END) * 100 / SUM(CAST(REPLACE(trim(inflation_adjusted_gross, '$'), ',', '') AS REAL)) FROM movies_total_gross", "source_tables": ["movies_total_gross"]}, "evidence": "The top 5 highest-grossing movies adjusted for inflation refer to MAX(inflation_adjusted_gross)LIMIT 5; DIVIDE(SUM(MAX(inflation_adjusted_gross LIMIT 5)), SUM(inflation_adjusted_gross)) as percentage;"}
{"sample_id": 4694, "db_id": "disney", "final": {"question": "Describe the voice actors and villains in Cinderella.", "sql": "SELECT T1.\"voice-actor\", T2.villian FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T2.movie_title = 'Cinderella'", "source_tables": ["voice-actors", "characters"]}, "evidence": "Cinderella refers to movie_title = ' Cinderella';"}
{"sample_id": 4656, "db_id": "disney", "final": {"question": "How many of Gary Trousdale's movies are adventure movies?", "sql": "SELECT COUNT(T.name) FROM ( SELECT T1.name FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Gary Trousdale' AND T2.genre = 'Adventure' GROUP BY T1.name ) T", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Gary Trousdale refers director = 'Gary Trousdale'; the adventure movie refers to genre = 'Adventure';"}
{"sample_id": 4660, "db_id": "disney", "final": {"question": "How many PG adventure movies did Ron Clements direct?", "sql": "SELECT COUNT(*) FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Ron Clements' AND T2.MPAA_rating = 'PG' AND T2.genre = 'Adventure'", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Ron Clements refers to director = 'Ron Clements'; PG is an abbreviation for parental guidance and refers to MPAA_rating = 'PG'; adventure movie refers to genre = 'Adventure';"}
{"sample_id": 4688, "db_id": "disney", "final": {"question": "Which movies had the main character named Donald Duck and who directed them?", "sql": "SELECT T1.movie_title, T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.hero = 'Donald Duck'", "source_tables": ["director", "characters"]}, "evidence": "Donald Duck is the main character of the movie which refers to hero = 'Donald Duck'; movies refer to movie_title; who directed refers director;"}
{"sample_id": 4667, "db_id": "disney", "final": {"question": "Who are the voice actors for all the heroes?", "sql": "SELECT T2.\"voice-actor\" FROM characters AS T1 INNER JOIN \"voice-actors\" AS T2 ON T2.character = T1.hero WHERE T2.movie = T1.movie_title", "source_tables": ["voice-actors", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4632, "db_id": "disney", "final": {"question": "Please list the movies directed by Wolfgang Reitherman that can be watched by the general audience.", "sql": "SELECT T1.movie_title FROM \"movies_total_gross\" AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.MPAA_rating = 'G' AND T2.director = 'Wolfgang Reitherman'", "source_tables": ["movies_total_gross", "director"]}, "evidence": "directed by Wolfgang Reitherman refers to director = 'Wolfgang Reitherman'; movies refer to movie_title; general audience refers to MPAA_rating = 'G';"}
{"sample_id": 4626, "db_id": "disney", "final": {"question": "The song \"Once Upon a Dream\" is associated with the movie directed by whom?", "sql": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song = 'Once Upon a Dream'", "source_tables": ["director", "characters"]}, "evidence": "directed by whom refers to director; movie refers to movie_title;"}
{"sample_id": 4642, "db_id": "disney", "final": {"question": "Who is the voice actor of the hero character from the movie The Little Mermaid?", "sql": "SELECT T2.\"voice-actor\" FROM characters AS T1 INNER JOIN \"voice-actors\" AS T2 ON T2.movie = T1.movie_title WHERE T1.movie_title = 'The Little Mermaid' AND T2.character = T1.hero", "source_tables": ["voice-actors", "characters"]}, "evidence": "The Little Mermaid refers to movie_title = 'The Little Mermaid';"}
{"sample_id": 4628, "db_id": "disney", "final": {"question": "Please list the release dates of all the movies in which Alan Tudyk is a voice actor.", "sql": "SELECT T2.release_date FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.\"voice-actor\" = 'Alan Tudyk'", "source_tables": ["voice-actors", "characters"]}, "evidence": "FALSE;"}
{"sample_id": 4713, "db_id": "disney", "final": {"question": "List all the main characters of the movie that are comedy genre.", "sql": "SELECT T2.hero FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title WHERE T1.genre = 'Comedy'", "source_tables": ["movies_total_gross", "characters"]}, "evidence": "Comedy refers to genre = 'Comedy'; the main character of the movie refers to hero;"}
{"sample_id": 4622, "db_id": "disney", "final": {"question": "In which segment did the Walt Disney Company earned a bigger revenue in 1998, Studio Entertainment or Disney Media Networks?", "sql": "SELECT CASE WHEN \"Studio Entertainment[NI 1]\" > \"Disney Media Networks\" THEN \"Studio Entertainment[NI 1]\" ELSE \"Disney Media Networks\" END FROM revenue WHERE \"Year\" = 1998", "source_tables": ["revenue"]}, "evidence": "\"Studio Entertainment[NI 1]\" > `Disney Media Networks` where `Year` = 1998;"}
{"sample_id": 4668, "db_id": "disney", "final": {"question": "Provide a list of directors from the 1990s.", "sql": "SELECT T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS int) BETWEEN 1990 AND 2000 GROUP BY T2.director", "source_tables": ["movies_total_gross", "director"]}, "evidence": "the 1990s refers to (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) between 1990 and 2000);"}
{"sample_id": 4702, "db_id": "disney", "final": {"question": "Provide the director's name of Wreck-It Ralph movie.", "sql": "SELECT director FROM director WHERE name = 'Wreck-It Ralph'", "source_tables": ["director"]}, "evidence": "Wreck-It Ralph is the name of the movies which refers to name = 'Wreck-It Ralph';"}
{"sample_id": 4638, "db_id": "disney", "final": {"question": "Who is the voice actor of the character \"Binkie Muddlefoot\"?", "sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE character = 'Binkie Muddlefoot'", "source_tables": ["voice-actors"]}, "evidence": "FALSE;"}
{"sample_id": 4677, "db_id": "disney", "final": {"question": "Which of the movies directed by Ron Clements has the highest total gross?", "sql": "SELECT T2.movie_title FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T1.name = T2.movie_title WHERE T1.director = 'Ron Clements' ORDER BY CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1", "source_tables": ["director", "movies_total_gross"]}, "evidence": "Ron Clements refer to director = 'Ron Clements'; the highest total gross refers to MAX(total_gross);"}
{"sample_id": 4650, "db_id": "disney", "final": {"question": "Who is the most productive director?", "sql": "SELECT director FROM director GROUP BY director ORDER BY COUNT(name) DESC LIMIT 1", "source_tables": ["director"]}, "evidence": "Most productive director refers to director where MAX(COUNT(name));"}
{"sample_id": 4889, "db_id": "legislator", "final": {"question": "What is the current official Instagram handle of current legislator Bob Corker?", "sql": "SELECT T2.instagram FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Bob Corker'", "source_tables": ["social-media", "current"]}, "evidence": "official Instagram handle refers to instagram;"}
{"sample_id": 4909, "db_id": "legislator", "final": {"question": "Give the type and start date of the term of the legislator born on November 26, 1727.", "sql": "SELECT T2.type, T2.start FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1727-11-26'", "source_tables": ["historical", "historical-terms"]}, "evidence": "start date of the term refers to start; born on November 26, 1727 refers to birthday_bio = '1727-11-26';"}
{"sample_id": 4752, "db_id": "legislator", "final": {"question": "Among all the female current legislators, how many of them have served for more than 4 terms?", "sql": "SELECT COUNT(CID) FROM ( SELECT T1.bioguide_id AS CID FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4 )", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; served for more than 4 terms refers to COUNT(bioguide > 4)"}
{"sample_id": 4846, "db_id": "legislator", "final": {"question": "Does Thomas Carnes have an account on ballotpedia.org?", "sql": "SELECT CASE WHEN ballotpedia_id IS NULL THEN 'doesn''t have' ELSE 'have' END AS HaveorNot FROM historical WHERE first_name = 'Thomas' AND last_name = 'Carnes'", "source_tables": ["historical"]}, "evidence": "if first_name = 'Thomas' and last_name = 'Carnes' AND ballotpedia_id is null then Thomas Carnes doesn't have an account on ballotpedia.org; if first_name = 'Thomas' and last_name = 'Carnes' AND ballotpedia_id is NOT null then Thomas Carnes have an account on ballotpedia.org;"}
{"sample_id": 4818, "db_id": "legislator", "final": {"question": "State the opensecrets_id of the legislator whose YouTube name is Bluetkemeyer.", "sql": "SELECT T1.opensecrets_id FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.youtube = 'BLuetkemeyer'", "source_tables": ["social-media", "current"]}, "evidence": "Bluetkemeyer refers to youtube"}
{"sample_id": 4808, "db_id": "legislator", "final": {"question": "Give the full name of legislators who have accounts on OpenSecrets.org.", "sql": "SELECT COUNT(*) FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> ''", "source_tables": ["current"]}, "evidence": "full name refers to first_name, last_name; have accounts on OpenSecrets.org refers to opensecrets_id IS NOT NULL AND opensecrets_id <> ''"}
{"sample_id": 4906, "db_id": "legislator", "final": {"question": "Provide the Instagram username of the legislator named Benjamin Hawkins.", "sql": "SELECT T1.instagram FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Benjamin' AND T2.last_name = 'Hawkins'", "source_tables": ["social-media", "current"]}, "evidence": "Instagram username refers to instagram;"}
{"sample_id": 4804, "db_id": "legislator", "final": {"question": "Provide the start date, end date, and party of Pearl Peden Oldfield.", "sql": "SELECT T2.start, T2.\"end\", T2.party FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Pearl' AND T1.middle_name = 'Peden' AND T1.last_name = 'Oldfield'", "source_tables": ["historical", "historical-terms"]}, "evidence": "start date refers to start; end date refers to end date; Pearl Peden Oldfield refers to official_full_name; official_full_name refers to first_name, middle_name, last_name"}
{"sample_id": 4861, "db_id": "legislator", "final": {"question": "Which historical female legislator that have their term ended on the 3rd of March 1791?", "sql": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.end = '1791-03-03' AND T1.gender_bio = 'F'", "source_tables": ["historical", "historical-terms"]}, "evidence": "female legislator refers to gender_bio = 'F'; term ended on the 3rd of March 1791 refers to end = '1791-03-03';"}
{"sample_id": 4893, "db_id": "legislator", "final": {"question": "What was current legislator Sherrod Brown's Washington, D.C. office phone number during his term starting on 2013/1/3?", "sql": "SELECT T1.phone FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Sherrod Brown' AND T1.start = '2013-01-03'", "source_tables": ["current-terms", "current"]}, "evidence": "Washington, DC office phone number refers to phone; terms starting on 2013/1/3 refers to start = '2013-01-03';"}
{"sample_id": 4742, "db_id": "legislator", "final": {"question": "What is the username of the current official Facebook presence of current legislator Todd Young?", "sql": "SELECT T1.facebook FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.official_full_name = 'Todd Young'", "source_tables": ["social-media", "current"]}, "evidence": "Todd Young is an official_full_name; username of current official Facebook presences refers to facebook;"}
{"sample_id": 4911, "db_id": "legislator", "final": {"question": "How many female representatives are there in Michigan?", "sql": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'rep' AND T2.state = 'MI' AND T1.gender_bio = 'F' GROUP BY T1.bioguide_id ) T", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; representatives refers to type = 'rep'; Michigan refers to state = 'MI';"}
{"sample_id": 4844, "db_id": "legislator", "final": {"question": "Among the male legislators born between 1955 to 1965, what is the percentage of the legislators with an independent party?", "sql": "SELECT CAST(SUM(CASE WHEN T2.party = 'Independent' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.party) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND strftime('%Y', T1.birthday_bio) BETWEEN '1955' AND '1965'", "source_tables": ["current-terms", "current"]}, "evidence": "male refers to gender_bio = 'M'; born between 1955 to 1965 refers to strftime('%Y', birthday_bio) between '1955' and '1965'; percentage = MULTIPLY(DIVIDE(SUM(party = 'Independent' WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965'), COUNT(party WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) between '1955' and '1965')), 100.0);"}
{"sample_id": 4858, "db_id": "legislator", "final": {"question": "How many female legislators become representatives for California in 2015?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE STRFTIME('%Y', T2.start) = '2015' AND T2.state = 'CA' AND T1.gender_bio = 'F'", "source_tables": ["current-terms", "current"]}, "evidence": "female legislators refers to gender_bio = 'F'; representatives refers to type = 'rep'; for California refers to state = 'CA'; in 2015 refers to the year of start date is '2015';"}
{"sample_id": 4807, "db_id": "legislator", "final": {"question": "State the number of female legislators in the list.", "sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'F'", "source_tables": ["current"]}, "evidence": "female refers to gender_bio = 'F'"}
{"sample_id": 4801, "db_id": "legislator", "final": {"question": "Among the legislators who started a term on 2nd December 1793, how many of them were males?", "sql": "SELECT COUNT(T1.bioguide_id) FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND T2.start = '1793-12-02'", "source_tables": ["historical", "historical-terms"]}, "evidence": "started a term on 2nd December 1793 refers to start = '1793-12-02'; male refers to gender_bio = 'M'"}
{"sample_id": 4777, "db_id": "legislator", "final": {"question": "Which party does Christopher Henderson Clark belong to?", "sql": "SELECT T1.party FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name OR T2.middle_name OR T2.last_name = 'ChristopherHendersonClark'", "source_tables": ["historical", "historical-terms"]}, "evidence": "Christopher Henderson Clark is full name; full name refers to first_name, middle_name, last_name"}
{"sample_id": 4744, "db_id": "legislator", "final": {"question": "To which current legislator does twitter ID234128524 belong? Please give his or her full official name.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.twitter_id = 234128524", "source_tables": ["social-media", "current"]}, "evidence": "full official name refers to official_full_name"}
{"sample_id": 4853, "db_id": "legislator", "final": {"question": "Which legislators do not have instagram account?", "sql": "SELECT T1.first_name, T1.last_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.instagram IS NULL", "source_tables": ["social-media", "current"]}, "evidence": "do not have instagram account refers to instagram is null;"}
{"sample_id": 4820, "db_id": "legislator", "final": {"question": "What is the first name of the legislator whose address at 1005 Longworth HOB; Washington DC 20515-1408?", "sql": "SELECT T1.first_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.address = '1005 Longworth HOB Washington DC 20515-1408' GROUP BY T1.first_name", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 4904, "db_id": "legislator", "final": {"question": "What is the total number of senators New Jersey have?", "sql": "SELECT COUNT(type) FROM \"historical-terms\" WHERE state = 'NJ' AND type = 'rep'", "source_tables": ["historical-terms"]}, "evidence": "senators refers to type = 'rep'; New Jersey refers to state = 'NJ';"}
{"sample_id": 4774, "db_id": "legislator", "final": {"question": "Calculate the percentage of the total number of current female legislators and past female legislators. State which one has the highest value.", "sql": "SELECT CAST(COUNT(CASE WHEN current.gender_bio = 'F' THEN current.bioguide_id ELSE NULL END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN historical.gender_bio = 'F' THEN historical.bioguide_id ELSE NULL END) FROM historical ) FROM current", "source_tables": ["historical", "current"]}, "evidence": "female refers to gender_bio = 'F'; calculation = MULTIPLY(DIVIDE(COUNT(current.gender_bio = 'F' THEN current.bioguide_id)), (COUNT(historical.gender_bio = 'F' then historical.bioguide_id)), 1.0); the highest value refers to MAX(calculation)"}
{"sample_id": 4761, "db_id": "legislator", "final": {"question": "What type of political party Sherrod Brown has in 2005?", "sql": "SELECT T1.party FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Sherrod' AND T2.last_name = 'Brown' AND T1.start LIKE '%2005%'", "source_tables": ["current-terms", "current"]}, "evidence": "political party refers to party; Sherrod Brown is an official_full_name; official_full_name refers to first_name, last_name; 2005 refers to start = 2005"}
{"sample_id": 4826, "db_id": "legislator", "final": {"question": "Provide the facebook ID of the facebook account named \"RepWilson\".", "sql": "SELECT facebook_id FROM \"social-media\" WHERE facebook = 'RepWilson'", "source_tables": ["social-media"]}, "evidence": ""}
{"sample_id": 4851, "db_id": "legislator", "final": {"question": "What is the ratio between male and female legislators?", "sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) FROM historical", "source_tables": ["historical"]}, "evidence": "ratio = DIVIDE(SUM(gender_bio = 'M'),\u00a0 SUM(gender_bio = 'F')); male refers to gender_bio = 'M'; female refers to gender_bio = 'F'"}
{"sample_id": 4782, "db_id": "legislator", "final": {"question": "List the full names of 10 legislators who only have a Facebook account.", "sql": "SELECT T2.official_full_name FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE (T1.youtube IS NULL OR T1.youtube = '') AND (T1.instagram IS NULL OR T1.instagram = '') AND (T1.twitter IS NULL OR T1.twitter = '') AND T1.facebook IS NOT NULL AND T1.facebook != ''", "source_tables": ["social-media", "current"]}, "evidence": "full names refers to official_full_name; only have a Facebook account refers to youtube is NULL or youtube = '', instagram is NULL or instagram = '', twitter is NULL or twitter = '', facebook is not NULL and facebook = ''"}
{"sample_id": 4833, "db_id": "legislator", "final": {"question": "Give the full name of the legislators with an independent party.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name;"}
{"sample_id": 4787, "db_id": "legislator", "final": {"question": "Which state did Veronica Grace Boland represent and which party is she affiliated?", "sql": "SELECT T2.state, T2.party FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name OR T1.middle_name OR T1.last_name = 'VeronicaGraceBoland'", "source_tables": ["historical", "historical-terms"]}, "evidence": "Veronica Grace Boland is a full name; full name refers to first_name, middle_name, last_name; party affiliated refers to party"}
{"sample_id": 4776, "db_id": "legislator", "final": {"question": "What are the Facebook, Twitter and YouTube usernames of Adam Kinzinger?", "sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Adam Kinzinger'", "source_tables": ["social-media", "current"]}, "evidence": "Facebook, Twitter and YouTube usernames refers to facebook, twitter, youtube; Adam Kinzinger is an official_full_name"}
{"sample_id": 4749, "db_id": "legislator", "final": {"question": "For how many terms has current legislator Sherrod Brown served?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown'", "source_tables": ["current-terms", "current"]}, "evidence": "Sherrod Brown is an official_full_name"}
{"sample_id": 4843, "db_id": "legislator", "final": {"question": "Find the difference between the number of female senators and representatives born between 1930 to 1970.", "sql": "SELECT SUM(CASE WHEN T2.type = 'sen' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'rep' THEN 1 ELSE 0 END) FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND strftime('%Y', T1.birthday_bio) BETWEEN '1930' AND '1970'", "source_tables": ["historical", "historical-terms"]}, "evidence": "difference = SUBTRACT(SUM(type = 'sen' WHERE gender_bio = 'F' AND strftime('%Y', birthday_bio) between '1930' and '1970'), SUM(type = 'rep' WHERE gender_bio = 'F' AND strftime('%Y', birthday_bio) between '1930' and '1970')); female refers to gender_bio = 'F'; senators refers to type = 'sen'; representatives refers to type = 'rep'; born between 1930 to 1970 strftime('%Y', birthday_bio) between '1930' and '1970';"}
{"sample_id": 4840, "db_id": "legislator", "final": {"question": "Provide the full name and birth date of the legislator with a contact form of http://www.brown.senate.gov/contact/.", "sql": "SELECT T1.official_full_name, T1.birthday_bio FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.contact_form = 'http://www.brown.senate.gov/contact/'", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; birth date refers to birthday_bio;"}
{"sample_id": 4780, "db_id": "legislator", "final": {"question": "Which historical legislators are members of the National Greenbacker party? Write their first and last names.", "sql": "SELECT T2.first_name, T2.last_name FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'National Greenbacker'", "source_tables": ["historical", "historical-terms"]}, "evidence": "members of the National Greenbacker party refers to party = 'National Greenbacker'; first and last names refers to first_name, last_name"}
{"sample_id": 4788, "db_id": "legislator", "final": {"question": "How many historical legislators were born in 1973?", "sql": "SELECT COUNT(*) FROM historical WHERE CAST(birthday_bio AS date) = 1973", "source_tables": ["historical"]}, "evidence": "born in 1973 refers to birthday_bio = 1973"}
{"sample_id": 4896, "db_id": "legislator", "final": {"question": "Among the current legislators who served the term starting on 2013/1/3, how many of them are female?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start = '2013-01-03' AND T1.gender_bio = 'F'", "source_tables": ["current-terms", "current"]}, "evidence": "term starting on 2013/1/3 refers to start = '2013-01-03; female refers to gender_bio = 'F';"}
{"sample_id": 4894, "db_id": "legislator", "final": {"question": "Current legislator Sherrod Brown has been in the Democrat party during how many terms that he has served?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown' AND T2.party = 'Democrat'", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 4883, "db_id": "legislator", "final": {"question": "Among all the current legislators born after the year 1960, how many of them are not google entities?", "sql": "SELECT COUNT(*) FROM current WHERE strftime('%Y', birthday_bio) > '1960' AND google_entity_id_id IS NULL", "source_tables": ["current"]}, "evidence": "born after the year 1960 refers to strftime('%Y', birthday_bio) > '1960'; not google entities refers to google_entity_id_id is null;"}
{"sample_id": 4877, "db_id": "legislator", "final": {"question": "What are the Wikipedia page names of all the anti-administration senators?", "sql": "SELECT T1.wikipedia_id FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.party = 'Anti-Administration'", "source_tables": ["historical", "historical-terms"]}, "evidence": "Wikipedia page names refers to wikipedia_id; anti-administration refers to party = 'Anti-Administration'; senators refers to type = 'sen';"}
{"sample_id": 4856, "db_id": "legislator", "final": {"question": "State the address of Amy Klobuchar at the term of 4th of January 2001.", "sql": "SELECT T2.address FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Amy' AND T1.last_name = 'Klobuchar' AND T2.start = '2001-04-01'", "source_tables": ["current-terms", "current"]}, "evidence": "at the term of 4th of January 2001 refers to start = '2001-04-01';"}
{"sample_id": 4769, "db_id": "legislator", "final": {"question": "List the full name of all past legislators that chose Pro-Administration as their political party in year 1791.", "sql": "SELECT T1.first_name, T1.last_name FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Pro-Administration' AND CAST(T2.start AS DATE) <= 1791 AND CAST(T2.END AS DATE) >= 1791", "source_tables": ["historical", "historical-terms"]}, "evidence": "full name refers to official_full_name; chose Pro-Administration as their political party refers to party = 'Pro-Administration'; 1791 refers to start < = 1791 AND END > = 1791"}
{"sample_id": 4900, "db_id": "legislator", "final": {"question": "Which current legislator has served for more terms, Sherrod Brown or Maria Cantwell?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T1.official_full_name = 'Maria Cantwell' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.official_full_name = 'Sherrod Brown' THEN 1 ELSE 0 END) THEN 'Maria Cantwell' ELSE 'Sherrod Brown' END FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide", "source_tables": ["current-terms", "current"]}, "evidence": "if sum(official_full_name = 'Maria Cantwell') > sum(official_full_name = 'Sherrod Brown') then Maria Cantwell has served for more term than Sherrod Brown; if sum(official_full_name = 'Sherrod Brown') > sum(official_full_name = 'Maria Cantwell'), then Sherrod Brown has served for more terms than Maria Cantwell;"}
{"sample_id": 4803, "db_id": "legislator", "final": {"question": "List the full names, Twitter IDs, and YouTube IDs of legislators who have Richard as their first name.", "sql": "SELECT T2.official_full_name, T1.twitter_id, T1.youtube_id FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.first_name = 'Richard'", "source_tables": ["social-media", "current"]}, "evidence": "full names refers to official_full_name; Richard as their first name refers to first_name = 'Richard'"}
{"sample_id": 4908, "db_id": "legislator", "final": {"question": "List down the MapLight ID of the representatives in Maine.", "sql": "SELECT T1.maplight_id FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'rep' AND T2.state = 'ME' GROUP BY T1.maplight_id", "source_tables": ["historical", "historical-terms"]}, "evidence": "representatives refers to type = 'rep'; Maine refers to state = 'ME';"}
{"sample_id": 4786, "db_id": "legislator", "final": {"question": "List the full names of Republican legislators who have a nickname.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T1.nickname_name IS NOT NULL GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "full names refers to official_full_name; Republican refers to party = 'Republican'; nickname refers to nickname_name"}
{"sample_id": 4882, "db_id": "legislator", "final": {"question": "Who is the Lutheran representative that served in the state of Ohio for 14 years before becoming a senator?", "sql": "SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.end) AS int) - CAST(strftime('%Y', T2.start) AS int)) = 14 THEN official_full_name END FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Lutheran' AND T2.state = 'OH' AND T2.type = 'rep'", "source_tables": ["current-terms", "current"]}, "evidence": "Lutheran refers to religion_bio = 'Lutheran'; representative refers to type = 'rep'; served for 14 years refers to SUBTRACT(SUM(CAST(strftime('%Y', end)), CAST(strftime('%Y', start)))) = 14;"}
{"sample_id": 4859, "db_id": "legislator", "final": {"question": "What is the Twitter ID of Emanuel Cleaver?", "sql": "SELECT T1.twitter_id FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.first_name = 'Emanuel' AND T2.last_name = 'Cleaver'", "source_tables": ["social-media", "current"]}, "evidence": ""}
{"sample_id": 4842, "db_id": "legislator", "final": {"question": "Provide the type and end date of the term of the legislator named John Vining.", "sql": "SELECT T2.type, T2.end FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'John' AND T1.last_name = 'Vining'", "source_tables": ["historical", "historical-terms"]}, "evidence": "end date of the term refers to end;"}
{"sample_id": 4838, "db_id": "legislator", "final": {"question": "List down the district number of the representative of the house named Jonathan Grout.", "sql": "SELECT T2.district FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.last_name = 'Grout' AND T1.first_name = 'Jonathan' AND T2.type = 'rep'", "source_tables": ["historical", "historical-terms"]}, "evidence": "district number refers to district; representative of the house refers to type = 'rep';"}
{"sample_id": 4832, "db_id": "legislator", "final": {"question": "What are the first and last name of the representatives of the house in district 9?", "sql": "SELECT T2.first_name, T2.last_name FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.district = 9", "source_tables": ["historical", "historical-terms"]}, "evidence": "representatives refers to type = 'rep';"}
{"sample_id": 4852, "db_id": "legislator", "final": {"question": "Calculate the percentage of famous_legislatorss.", "sql": "SELECT CAST(SUM(CASE WHEN wikipedia_id IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bioguide_id) FROM historical", "source_tables": ["historical"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(wikipedia_id is not null), (bioguide_id)), 100.0); famous legislators refers to wikipedia_id is not null;"}
{"sample_id": 4800, "db_id": "legislator", "final": {"question": "List the IDs and full names of legislators from the Liberal Republican party.", "sql": "SELECT T2.bioguide_id, T2.first_name, T2.last_name FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.party = 'Liberal Republican'", "source_tables": ["historical", "historical-terms"]}, "evidence": "full_name refers to first_name, last_name; from the Liberal Republican party refers to party = 'Liberal Republican'"}
{"sample_id": 4860, "db_id": "legislator", "final": {"question": "State all the Facebook ID for current legislators under the democrat party.", "sql": "SELECT T2.facebook_id FROM \"current-terms\" AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide = T2.bioguide WHERE T1.party = 'Democrat' GROUP BY T2.facebook_id", "source_tables": ["current-terms", "social-media"]}, "evidence": ""}
{"sample_id": 4739, "db_id": "legislator", "final": {"question": "Among all the current female legislators, how many of them have not been registered in Federal Election Commission data?", "sql": "SELECT COUNT(*) FROM current WHERE (fec_id IS NULL OR fec_id = '') AND gender_bio = 'F'", "source_tables": ["current"]}, "evidence": "have not been registered refers to fec_id IS NULL; female refers to gender_bio = 'F'"}
{"sample_id": 4760, "db_id": "legislator", "final": {"question": "How many male legislators are Roman Catholic?", "sql": "SELECT COUNT(*) FROM current WHERE religion_bio = 'Roman Catholic' AND gender_bio = 'M'", "source_tables": ["current"]}, "evidence": "male refers to gender_bio = 'M'; Roman Catholic is a religion_bio"}
{"sample_id": 4754, "db_id": "legislator", "final": {"question": "What is the average number of terms for a current female legislator?", "sql": "SELECT CAST(COUNT(T2.bioguide) AS REAL) / COUNT(DISTINCT T1.bioguide_id) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F'", "source_tables": ["current-terms", "current"]}, "evidence": "female refers to gender_bio = 'F'; calculation refers to DIVIDE(COUNT(bioguide WHERE gender_bio = 'F'), COUNT(bioguide_id))"}
{"sample_id": 4745, "db_id": "legislator", "final": {"question": "Please list the current official YouTube usernames of all the current female legislators.", "sql": "SELECT T2.youtube FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.gender_bio = 'F'", "source_tables": ["social-media", "current"]}, "evidence": "official YouTube usernames refers to youtube; female refers to gender_bio = 'F'"}
{"sample_id": 4834, "db_id": "legislator", "final": {"question": "List down the open secrets and thomas ID of the democrat senators of New Jersey.", "sql": "SELECT T1.opensecrets_id, T1.thomas_id FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.state = 'NJ' GROUP BY T1.opensecrets_id, T1.thomas_id", "source_tables": ["current-terms", "current"]}, "evidence": "open secrets refers to opensecrets_id; democrat refers to party = democrat; senators refers to type = 'sen'; New Jersey refers to state = 'NJ';"}
{"sample_id": 4872, "db_id": "legislator", "final": {"question": "Among the Independent senators that started their term in 2011 and onwards, what are the official full names of the senators that caucused with the Democrat?", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' AND strftime('%Y', T2.start) >= '2011' AND T2.type = 'sen' AND T2.caucus = 'Democrat'", "source_tables": ["current-terms", "current"]}, "evidence": "Independent refers to party = 'Independent'; senators refers to type = 'sen'; started the term in 2011 and onwards refers to strftime('%Y', start) > = '2011'; caucused with the Democrat refers to caucus = 'Democrat';"}
{"sample_id": 4887, "db_id": "legislator", "final": {"question": "What is the religion of current legislator Sherrod Brown?", "sql": "SELECT religion_bio FROM current WHERE official_full_name = 'Sherrod Brown'", "source_tables": ["current"]}, "evidence": "religion refers to religion_bio;"}
{"sample_id": 4738, "db_id": "legislator", "final": {"question": "How many current legislators were born after the year 1960?", "sql": "SELECT COUNT(bioguide_id) FROM current WHERE birthday_bio >= '1961-01-01'", "source_tables": ["current"]}, "evidence": "born after the year 1960 refers to birthday_bio > '1960-01-01'"}
{"sample_id": 4870, "db_id": "legislator", "final": {"question": "List all of the ids of the representatives belonging to the Democrat party in district 13 that ended their term on 1/3/2019?", "sql": "SELECT bioguide FROM \"current-terms\" WHERE type = 'rep' AND party = 'Democrat' AND end = '2019-01-03' AND district = 13", "source_tables": ["current-terms"]}, "evidence": "ids refers to bioguide; representatives refers to type = 'rep'; ended the term on 1/3/2019 refers to end = '2019-01-03';"}
{"sample_id": 4793, "db_id": "legislator", "final": {"question": "Provide the current legislators' official full names who are from the Independent party.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "Independent party refers to party = 'Independent'"}
{"sample_id": 4878, "db_id": "legislator", "final": {"question": "List the official full names of all the legislators that served 13 district for 26 consecutive years.", "sql": "SELECT DISTINCT CASE WHEN SUM(CAST(strftime('%Y', T2.end) AS int) - CAST(strftime('%Y', T2.start) AS int)) = 26 THEN T1.official_full_name END FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.official_full_name, T2.district HAVING COUNT(T1.official_full_name) = 13", "source_tables": ["current-terms", "current"]}, "evidence": "served only one district for 26 consecutive years refers to SUBTRACT(SUM(cast(strftime('%Y', end)), CAST(strftime('%Y', start)))) = 26"}
{"sample_id": 4886, "db_id": "legislator", "final": {"question": "Among all the current female legislators, how many of them have attended in Senate roll call votes?", "sql": "SELECT COUNT(lis_id) FROM current WHERE gender_bio = 'F' AND lis_id IS NOT NULL", "source_tables": ["current"]}, "evidence": "female refers to gender_bio = 'F'; have attended in Senate roll call votes refers to lis_id is not null;"}
{"sample_id": 4790, "db_id": "legislator", "final": {"question": "Among the legislators who will end in 2009, how many are from the Republican party?", "sql": "SELECT \"END\", party FROM \"current-terms\" WHERE STRFTIME('%Y', \"END\") = '2009' AND party = 'Republican'", "source_tables": ["current-terms"]}, "evidence": "the legislators who will end in 2009 refers to END 2009; from the Republican party refers to party = 'Republican'"}
{"sample_id": 4767, "db_id": "legislator", "final": {"question": "What is the numeric ID of Chris Van Hollen on GovTrack.us?", "sql": "SELECT T2.govtrack FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.official_full_name = 'Chris Van Hollen'", "source_tables": ["social-media", "current"]}, "evidence": "Chris Van Hollen is an official_full_name; numeric ID on GovTrack.us refers to govtrack"}
{"sample_id": 4784, "db_id": "legislator", "final": {"question": "What is the contact URL of Claire McCaskill?", "sql": "SELECT T2.contact_form FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Claire McCaskill' GROUP BY T2.contact_form", "source_tables": ["current-terms", "current"]}, "evidence": "contact URL refers to contact_form; Claire McCaskill is an official_full_name"}
{"sample_id": 4759, "db_id": "legislator", "final": {"question": "How many females were members of the past legislators?", "sql": "SELECT COUNT(*) FROM historical WHERE gender_bio = 'F'", "source_tables": ["historical"]}, "evidence": "female refers to gender_bio = 'F'"}
{"sample_id": 4821, "db_id": "legislator", "final": {"question": "What is the Instagram name of the legislator whose birthday was on 8/24/1952?", "sql": "SELECT T1.instagram FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.birthday_bio = '1952-08-24'", "source_tables": ["social-media", "current"]}, "evidence": "Instagram name refers to instagram; birthday on 8/24/1952 refers to birthday_bio = '1952-08-24'"}
{"sample_id": 4828, "db_id": "legislator", "final": {"question": "Give the district numbers with an Anti-Administration party.", "sql": "SELECT district FROM \"historical-terms\" WHERE party = 'Anti-Administration' GROUP BY district", "source_tables": ["historical-terms"]}, "evidence": ""}
{"sample_id": 4813, "db_id": "legislator", "final": {"question": "List out the first name of legislators who are senior Senator.", "sql": "SELECT T1.first_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state_rank = 'senior' GROUP BY T1.first_name", "source_tables": ["current-terms", "current"]}, "evidence": "senior refers to state_rank = 'senior'; only senator has this value 'senior'"}
{"sample_id": 4827, "db_id": "legislator", "final": {"question": "What is the total number of legislators with \"John\" as their first name?", "sql": "SELECT COUNT(*) FROM current WHERE first_name = 'John'", "source_tables": ["current"]}, "evidence": ""}
{"sample_id": 4765, "db_id": "legislator", "final": {"question": "List the last name of all current legislators who live in California.", "sql": "SELECT T1.last_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'CA' GROUP BY T1.last_name", "source_tables": ["current-terms", "current"]}, "evidence": "California refers to state = 'CA'"}
{"sample_id": 4891, "db_id": "legislator", "final": {"question": "Please list the username of the current official Facebook presence of all the current legislators that are famous or impact.", "sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.wikipedia_id IS NOT NULL GROUP BY T2.facebook", "source_tables": ["social-media", "current"]}, "evidence": "username of the current official Facebook presence of the legislators refers to facebook; legislators that are famous or impact refers to wikipedia_id is not null;"}
{"sample_id": 4849, "db_id": "legislator", "final": {"question": "How many districts are in Idaho?", "sql": "SELECT COUNT(district) FROM \"current-terms\" WHERE state = 'ID'", "source_tables": ["current-terms"]}, "evidence": "Idaho refers to state = 'ID';"}
{"sample_id": 4837, "db_id": "legislator", "final": {"question": "What is the party of the legislator named Susan M. Collins?", "sql": "SELECT T2.party FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Susan M. Collins' GROUP BY T2.party", "source_tables": ["current-terms", "current"]}, "evidence": "legislator's name refers to offical_full_name;"}
{"sample_id": 4830, "db_id": "legislator", "final": {"question": "What is the google entity ID of Benjamin Hawkins?", "sql": "SELECT google_entity_id_id FROM historical WHERE first_name = 'Benjamin' AND last_name = 'Hawkins'", "source_tables": ["historical"]}, "evidence": ""}
{"sample_id": 4817, "db_id": "legislator", "final": {"question": "What is the twitter name of the legislator whose birthday was on 5/27/1946?", "sql": "SELECT T2.twitter FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T1.birthday_bio = '1946-05-27'", "source_tables": ["social-media", "current"]}, "evidence": "birthday on 5/27/1946 refers to birthday_bio = '1946-05-27'"}
{"sample_id": 4871, "db_id": "legislator", "final": {"question": "What is the official Twitter handle of Jason Lewis?", "sql": "SELECT T2.twitter FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Jason Lewis'", "source_tables": ["social-media", "current"]}, "evidence": "official Twitter handle refers to twitter;"}
{"sample_id": 4898, "db_id": "legislator", "final": {"question": "For how many terms has current legislator Sherrod Brown served as a representative for district no.13?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Sherrod Brown' AND T2.district = 13", "source_tables": ["current-terms", "current"]}, "evidence": "district no. 13 refers to district = 13;"}
{"sample_id": 4750, "db_id": "legislator", "final": {"question": "Please list the official full names of all the current legislators who were once a senator during his or her terms.", "sql": "SELECT T2.official_full_name FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.state_rank IS NOT NULL", "source_tables": ["current-terms", "current"]}, "evidence": "once a senator during term refers to state_rank IS NOT NULL"}
{"sample_id": 4847, "db_id": "legislator", "final": {"question": "How many legislators were born in 1736?", "sql": "SELECT COUNT(bioguide_id) FROM historical WHERE birthday_bio LIKE '1736%'", "source_tables": ["historical"]}, "evidence": "born in 1736 refers to birthday_bio like '1736%';"}
{"sample_id": 4802, "db_id": "legislator", "final": {"question": "Compare the number of legislators who started the term in 1875 and 2005.", "sql": "SELECT SUM(CASE WHEN \"current-terms\".start LIKE '2005%' THEN 1 ELSE 0 END) - ( SELECT SUM(CASE WHEN start LIKE '1875%' THEN 1 ELSE 0 END) FROM \"historical-terms\" ) FROM \"current-terms\"", "source_tables": ["current-terms", "historical-terms"]}, "evidence": "started the term in 1875 refers to start LIKE '1875%'; started the term in 2005 refers to start LIKE '2005%'"}
{"sample_id": 4868, "db_id": "legislator", "final": {"question": "In California, how many representatives ended their term in 1995?", "sql": "SELECT COUNT(*) FROM \"current-terms\" WHERE state = 'CA' AND type = 'rep' AND end LIKE '1995%'", "source_tables": ["current-terms"]}, "evidence": "California refers to state = 'CA'; representatives refers to type = 'rep'; ended the term in 1995 refers to end like '1995%';"}
{"sample_id": 4822, "db_id": "legislator", "final": {"question": "State number of legislators who are not the senator among female legislators.", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND (T2.class IS NULL OR T2.class = '')", "source_tables": ["current-terms", "current"]}, "evidence": "not the senator refers to class IS NULL OR class = ''; female refers to gender_bio = 'F';"}
{"sample_id": 4766, "db_id": "legislator", "final": {"question": "List the full name of all current female senators.", "sql": "SELECT T2.first_name, T2.last_name FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.type = 'sen' AND T2.gender_bio = 'F' GROUP BY T2.ballotpedia_id", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; female refers to gender_bio = 'F'; senators refers to type = 'sen'"}
{"sample_id": 4884, "db_id": "legislator", "final": {"question": "Please list the official full names of all the current legislators who have served in the U.S. House.", "sql": "SELECT official_full_name FROM current WHERE house_history_id IS NOT NULL", "source_tables": ["current"]}, "evidence": "have served in the U.S. House refers to house_history_id is not null;"}
{"sample_id": 4778, "db_id": "legislator", "final": {"question": "List the official full names of 10 legislators who have a YouTube account but no Instagram account.", "sql": "SELECT T2.official_full_name FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.facebook IS NOT NULL AND (T1.instagram IS NULL OR T1.instagram = '') LIMIT 10", "source_tables": ["social-media", "current"]}, "evidence": "have a YouTube account but no Instagram account refers to facebook is not null and (instagram is null or instagram = '')"}
{"sample_id": 4747, "db_id": "legislator", "final": {"question": "Among the current legislators who do not have accounts on OpenSecrets.org., how many of them do not have instagram accounts either?", "sql": "SELECT SUM(CASE WHEN T1.instagram IS NULL THEN 1 ELSE 0 END) AS count FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.opensecrets_id IS NULL OR T2.opensecrets_id = ''", "source_tables": ["social-media", "current"]}, "evidence": "do not have accounts on OpenSecrets.org refers to opensecrets_ID is NULL OR opensecrets_id = ''; do not have instagram accounts refers to instagram is null"}
{"sample_id": 4755, "db_id": "legislator", "final": {"question": "Among all the current legislators whose religion is Roman Catholic, what is the percentage of the ones without an instagram account?", "sql": "SELECT CAST(SUM(CASE WHEN T1.instagram IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.religion_bio = 'Roman Catholic'", "source_tables": ["social-media", "current"]}, "evidence": "religion is Roman Catholic refers to religion_bio = 'Roman Catholic'; calculation = MULTIPLY(DIVIDE(COUNT(instagram is null), COUNT(bioguide_id)), 1.0)"}
{"sample_id": 4762, "db_id": "legislator", "final": {"question": "List the full name of all the senior senators in year 2013.", "sql": "SELECT T2.official_full_name FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.state_rank = 'senior' AND T1.type = 'sen' AND T1.start LIKE '2013%'", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; senior refers to state_rank = 'senior'; senators refers to type = 'sen'; 2013 refers to start LIKE '2013%'"}
{"sample_id": 4841, "db_id": "legislator", "final": {"question": "Give the state and type of term of the legislator with the google entity ID of kg:/m/02pyzk.", "sql": "SELECT T2.state, T2.type FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.google_entity_id_id = 'kg:/m/02pyzk'", "source_tables": ["historical", "historical-terms"]}, "evidence": "type of term refers to type; google entity ID refers to google_entity_id_id; google_entity_id_id = 'kg:/m/02pyzk';"}
{"sample_id": 4876, "db_id": "legislator", "final": {"question": "How many districts did John Conyers, Jr. serve in total?", "sql": "SELECT COUNT(T3.district) FROM ( SELECT T2.district FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.' GROUP BY T2.district ) T3", "source_tables": ["current-terms", "current"]}, "evidence": ""}
{"sample_id": 4899, "db_id": "legislator", "final": {"question": "What is the official full name of the current legislator whose current official Facebook presence is \"senjoniernst\"?", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook = 'senjoniernst'", "source_tables": ["social-media", "current"]}, "evidence": "current official Facebook presence is \"senjoniernst\" refers to facebook = 'senjoniernst';"}
{"sample_id": 4810, "db_id": "legislator", "final": {"question": "How many legislators hold the title \"Majority Leader\"?", "sql": "SELECT COUNT(bioguide) FROM \"current-terms\" WHERE title = 'Majority Leader'", "source_tables": ["current-terms"]}, "evidence": ""}
{"sample_id": 4855, "db_id": "legislator", "final": {"question": "State all the district that Benjamin Contee has served before.", "sql": "SELECT T2.district FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T1.last_name = 'Contee'", "source_tables": ["historical", "historical-terms"]}, "evidence": ""}
{"sample_id": 4885, "db_id": "legislator", "final": {"question": "How many current legislators have both accounts on both VoteView.com and maplight.org?", "sql": "SELECT COUNT(*) FROM current WHERE icpsr_id IS NOT NULL AND maplight_id IS NOT NULL", "source_tables": ["current"]}, "evidence": "have both accounts on both VoteView.com and maplight.org refers to icpsr_id is not null AND maplight_id is not null;"}
{"sample_id": 4753, "db_id": "legislator", "final": {"question": "Among the current legislators who have served for more than 6 terms, how many of them were born after 1960?", "sql": "SELECT COUNT(CID) FROM ( SELECT T1.bioguide_id AS CID FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio >= '1960-01-01' GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 6 )", "source_tables": ["current-terms", "current"]}, "evidence": "served for more than 6 terms refers to COUNT(bioguide > 6); born after 1960 refers to birthday_bio > = '1960-01-01'"}
{"sample_id": 4812, "db_id": "legislator", "final": {"question": "What is the gender of the legislator whose address at 317 Russell Senate Office Building Washington DC 20510?", "sql": "SELECT T1.gender_bio FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.address = '317 Russell Senate Office Building Washington DC 20510'", "source_tables": ["current-terms", "current"]}, "evidence": "gender refers to gender_bio"}
{"sample_id": 4806, "db_id": "legislator", "final": {"question": "How many legislators have not been registered in Federal Election Commission data?", "sql": "SELECT COUNT(*) FROM current WHERE fec_id IS NULL OR fec_id = ''", "source_tables": ["current"]}, "evidence": "have not been registered in Federal Election Commission data refers to fec_id is null OR fec_id = ''"}
{"sample_id": 4764, "db_id": "legislator", "final": {"question": "How many official social media does Mark Warner have?", "sql": "SELECT CASE WHEN T1.facebook IS NOT NULL THEN 1 END + CASE WHEN T1.instagram IS NOT NULL THEN 1 END + CASE WHEN T1.twitter IS NOT NULL THEN 1 END + CASE WHEN T1.youtube IS NOT NULL THEN 1 END AS COUNTSOCIAL FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.first_name = 'Mark' AND T2.last_name = 'Warner'", "source_tables": ["social-media", "current"]}, "evidence": "official social media refers to facebook is not null, instagram is not null, twitter is not null, youtube is not null; Mark Warner is an official_full_name; official_full_name refers to first_name, last_name"}
{"sample_id": 4895, "db_id": "legislator", "final": {"question": "Please list the full official names of all the current legislators who served the term that started on 2013/1/3.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.start = '2013-01-03'", "source_tables": ["current-terms", "current"]}, "evidence": "term that started on 2013/1/3 refers to start = '2013-01-03';"}
{"sample_id": 4791, "db_id": "legislator", "final": {"question": "List the official full names and genders of legislators who have Collins as their last name.", "sql": "SELECT official_full_name, gender_bio FROM current WHERE last_name = 'Collins'", "source_tables": ["current"]}, "evidence": "genders refers to gender_bio; Collins is a last_name"}
{"sample_id": 4824, "db_id": "legislator", "final": {"question": "How many minority leaders have not been registered in Federal Election Commission data?", "sql": "SELECT COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.title = 'Minority Leader' AND (T1.fec_id IS NULL OR T1.fec_id = '')", "source_tables": ["current-terms", "current"]}, "evidence": "minority leaders is a title; have not been registered in Federal Election Commission data refers to fec_id IS NULL OR fec_id = ''"}
{"sample_id": 4741, "db_id": "legislator", "final": {"question": "Which current legislator is older, Sherrod Brown or Maria Cantwell?", "sql": "SELECT official_full_name FROM current WHERE official_full_name = 'Sherrod Brown' OR official_full_name = 'Maria Cantwell' ORDER BY birthday_bio LIMIT 1", "source_tables": ["current"]}, "evidence": "older refers to MAX(birthday_bio); 'Sherrod Brown' and 'Maria Cantwell' are official_full_name"}
{"sample_id": 4783, "db_id": "legislator", "final": {"question": "Write the full names of junior ranked Republicans.", "sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Republican' AND T2.state_rank = 'junior' GROUP BY T1.official_full_name", "source_tables": ["current-terms", "current"]}, "evidence": "full name refers to official_full_name; junior refers to state_rank = 'junior'; Republicans refers to party = 'Republican'"}
{"sample_id": 5027, "db_id": "olympics", "final": {"question": "How many competitors were there who participated in 2000 Summer with age 31?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2000 Summer' AND T2.age = 31", "source_tables": ["games", "games_competitor"]}, "evidence": "in 2000 Summer refers to games_name = '2000 Summer'; age = 31"}
{"sample_id": 4926, "db_id": "olympics", "final": {"question": "Among the competitors of the 1994 Winter Olympic Game, what is the percentage of those from Finland?", "sql": "SELECT CAST(COUNT(CASE WHEN T5.region_name = 'Finland' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '1994 Winter'", "source_tables": ["noc_region", "games_competitor", "person_region", "games", "person"]}, "evidence": "DIVIDE(COUNT(id where region_name = 'Finland'), COUNT(id)) as percentage where games_name = '1994 Winter';"}
{"sample_id": 5042, "db_id": "olympics", "final": {"question": "What is the percentage of the people who are under 35 and participated in the summer season?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.age < 35 THEN 1 END) AS REAL) * 100 / COUNT(T2.games_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer'", "source_tables": ["games", "games_competitor"]}, "evidence": "DIVIDE(COUNT(age < 35) / COUNT(person_id)) as percentage where season = 'Summer';"}
{"sample_id": 5005, "db_id": "olympics", "final": {"question": "How many people have won the gold medal of the event \"Rowing Women's Coxed Eights\"?", "sql": "SELECT COUNT(T1.competitor_id) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN medal AS T3 ON T1.medal_id = T3.id WHERE T2.event_name LIKE 'Rowing Women%s Coxed Eights' AND T3.medal_name = 'Gold'", "source_tables": ["event", "competitor_event", "medal"]}, "evidence": "won the gold medal refers to medal_name = 'Gold'; event \"Rowing Women's Coxed Eights\" refers to event_name = 'Rowing Women''s Coxed Eights';"}
{"sample_id": 5019, "db_id": "olympics", "final": {"question": "Where was the 1920 Summer held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1920 Summer'", "source_tables": ["games_city", "city", "games"]}, "evidence": "where it was held refers to city_name; the 1920 Summer refers to games_name = '1920 Summer';"}
{"sample_id": 4995, "db_id": "olympics", "final": {"question": "How many athletes over the age of 59 competed in the 2016 Summer Olympics?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2016 Summer' AND T2.age > 59", "source_tables": ["games", "games_competitor"]}, "evidence": "over the age of 59 refers to age > 59; the 2016 Summer Olympics refer to games_name = '2016 Summer';"}
{"sample_id": 5063, "db_id": "olympics", "final": {"question": "Calculate the average age of the competitors who participated in the 1924 Winter.", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1924 Winter'", "source_tables": ["games", "games_competitor"]}, "evidence": "AVG(age) where games_name = '1924 Winter';"}
{"sample_id": 5035, "db_id": "olympics", "final": {"question": "What is the region id of Christine Jacoba Aaftink?", "sql": "SELECT T1.region_id FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T2.full_name = 'Christine Jacoba Aaftink'", "source_tables": ["person_region", "person"]}, "evidence": ""}
{"sample_id": 4980, "db_id": "olympics", "final": {"question": "What is the percentage of female athletes below 20s who participated in the 2002 Winter Olympic?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2002 Winter' AND T2.age < 20", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "DIVIDE(COUNT(person_id where gender = 'F' and age < 20), COUNT(person_id)) as percentage where games_name = '2002 Winter';"}
{"sample_id": 4917, "db_id": "olympics", "final": {"question": "Please list the names of all the Olympic competitors from Finland.", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "names of competitors refer to full_name; from Finland refers to region_name = 'Finland';"}
{"sample_id": 4975, "db_id": "olympics", "final": {"question": "How many athlete from China participate in the 2016 Summer Olympics?", "sql": "SELECT COUNT(T3.id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id INNER JOIN person_region AS T4 ON T3.id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.games_name = '2016 Summer' AND T5.region_name = 'China'", "source_tables": ["noc_region", "games_competitor", "person_region", "games", "person"]}, "evidence": "athletes from China refer to person_id where region_name = 'China'; the 2016 Summer Olympics refer to games_name = '2016 Summer';"}
{"sample_id": 4998, "db_id": "olympics", "final": {"question": "What is the average age of the athletes from the United States of America who competed in the 2016 Summer Olympics?", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE T1.games_name = '2016 Summer' AND T4.region_name = 'USA'", "source_tables": ["games", "person_region", "noc_region", "games_competitor"]}, "evidence": "AVG(age) where games_name = '2016 Summer' and region_name = 'USA';"}
{"sample_id": 4999, "db_id": "olympics", "final": {"question": "Which region does the NOC code \"COL\" stand for?", "sql": "SELECT region_name FROM noc_region WHERE noc = 'COL'", "source_tables": ["noc_region"]}, "evidence": "region refers to region_name; NOC code \"COL\" refers to noc = 'COL';"}
{"sample_id": 4990, "db_id": "olympics", "final": {"question": "How many Men's 200 Metres Freestyle events did Ian James Thorpe compete in?", "sql": "SELECT COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN event AS T4 ON T3.event_id = T4.id WHERE T1.full_name = 'Ian James Thorpe' AND T4.event_name LIKE 'Swimming Men%s 200 metres Freestyle'", "source_tables": ["event", "competitor_event", "games_competitor", "person"]}, "evidence": "Men's 200 Metres Freestyle events refer to event_name = 'Swimming Men''s 200 metres Freestyle'; events compete in refers to event_id;"}
{"sample_id": 4982, "db_id": "olympics", "final": {"question": "Which summer Olympic have the highest and lowest number of participants?", "sql": "SELECT ( SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' GROUP BY T1.games_year ORDER BY COUNT(T2.person_id) DESC LIMIT 1 ) AS HIGHEST , ( SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Summer' GROUP BY T1.games_year ORDER BY COUNT(T2.person_id) LIMIT 1 ) AS LOWEST", "source_tables": ["games", "games_competitor"]}, "evidence": "the highest number of participants refers to MAX(COUNT(person_id)); the lowest number of participants refers to MIN(COUNT(person_id)); Which summer Olympic refers to games_name where season = 'Summer';"}
{"sample_id": 4988, "db_id": "olympics", "final": {"question": "At what age did Michael Fred Phelps, II join the Olympics?", "sql": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Michael Fred Phelps, II' ORDER BY T2.age LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "At what age join the Olympics refers to MIN(age);"}
{"sample_id": 5076, "db_id": "olympics", "final": {"question": "Compute the average height of competitors whose age ranges from 22 to 28.", "sql": "SELECT AVG(T1.height) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age BETWEEN 22 AND 28", "source_tables": ["games_competitor", "person"]}, "evidence": "AVG(height) where age BETWEEN 22 AND 28;"}
{"sample_id": 5016, "db_id": "olympics", "final": {"question": "Which region has the most athletes?", "sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1", "source_tables": ["person_region", "noc_region"]}, "evidence": "region refers to region_name; the most athletes refer to MAX(COUNT(region_name));"}
{"sample_id": 4942, "db_id": "olympics", "final": {"question": "How many 24 years old competitors competed in Men's Basketball?", "sql": "SELECT COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball' AND T2.age = 24", "source_tables": ["event", "competitor_event", "games_competitor"]}, "evidence": "24 years old competitors refer to id where age = 24; Men's Basketball refers to event_name = 'Basketball Men''s Basketball';"}
{"sample_id": 4994, "db_id": "olympics", "final": {"question": "Which city was the 1992 Summer Olympic held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'", "source_tables": ["games_city", "city", "games"]}, "evidence": "city refers to city_name; 1992 Summer Olympic refers to games_name = '1992 Summer';"}
{"sample_id": 5008, "db_id": "olympics", "final": {"question": "When did Roma host the Olympic Games?", "sql": "SELECT T3.games_year FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Roma'", "source_tables": ["games_city", "city", "games"]}, "evidence": "Roma refers to city_name = 'Roma'; When host refers to games_year;"}
{"sample_id": 5050, "db_id": "olympics", "final": {"question": "Which sport did John Aalberg participate in?", "sql": "SELECT DISTINCT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T5.full_name = 'John Aalberg'", "source_tables": ["competitor_event", "sport", "games_competitor", "event", "person"]}, "evidence": "sport refers to sport_name;"}
{"sample_id": 5026, "db_id": "olympics", "final": {"question": "At which age did A Lamusi participate in 2012 Summer?", "sql": "SELECT T2.age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2012 Summer' AND T3.full_name = 'A Lamusi'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "2012 Summer refers to games_name = '2012 Summer';"}
{"sample_id": 4918, "db_id": "olympics", "final": {"question": "The Olympic competitor John Aalberg is from which region?", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "from which region refers to region_name;"}
{"sample_id": 4945, "db_id": "olympics", "final": {"question": "What is the name of the event where competitors received the most gold medals?", "sql": "SELECT T2.event_name FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN medal AS T3 ON T1.medal_id = T3.id WHERE T3.medal_name = 'Gold' GROUP BY T2.id ORDER BY COUNT(T1.event_id) DESC LIMIT 1", "source_tables": ["event", "competitor_event", "medal"]}, "evidence": "received the most gold medals refers to MAX(COUNT(medal_name = 'Gold'));"}
{"sample_id": 4997, "db_id": "olympics", "final": {"question": "How many 10-year old athletes participated in the Gymnastics Men's Parallel Bars, Teams event?", "sql": "SELECT COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id WHERE T3.event_name LIKE 'Gymnastics Men%s Parallel Bars, Teams' AND T2.age = 10", "source_tables": ["event", "competitor_event", "games_competitor"]}, "evidence": "10-year old athletes refer to competitor_id where age = 10; Gymnastics Men's Parallel Bars, Teams refer to event_name = 'Gymnastics Men''s Parallel Bars, Teams';"}
{"sample_id": 4973, "db_id": "olympics", "final": {"question": "How many athletes participated in the 2014 Winter Olympics?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'", "source_tables": ["games", "games_competitor"]}, "evidence": "athletes refer to person_id; 2014 Winter Olympics refer to games_name = '2014 Winter';"}
{"sample_id": 4928, "db_id": "olympics", "final": {"question": "Which city was the host of 1936 Winter Olympic Games?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1936 Winter'", "source_tables": ["games_city", "city", "games"]}, "evidence": "Which city refers to city_name; 1936 Winter Olympic refers to games_name = '1936 Winter';"}
{"sample_id": 4986, "db_id": "olympics", "final": {"question": "How many female athletes are from the Philippines?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Philippines' AND T3.gender = 'F'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "female athletes refer to id where gender = 'F'; from the Philippines region_name = 'Philippines';"}
{"sample_id": 5049, "db_id": "olympics", "final": {"question": "What is the name of the oldest competitor?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "name refers to full_name; the oldest refers to MAX(age);"}
{"sample_id": 4933, "db_id": "olympics", "final": {"question": "Show the name of the sport with the most events.", "sql": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id GROUP BY T1.sport_name ORDER BY COUNT(T2.event_name) DESC LIMIT 1", "source_tables": ["event", "sport"]}, "evidence": "name of the sport with the most events refers to sport_name where MAX(COUNT(id));"}
{"sample_id": 4939, "db_id": "olympics", "final": {"question": "Calculate the bmi of the competitor id 147420.", "sql": "SELECT CAST(T1.weight AS REAL) / (T1.height * T1.height) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.id = 147420", "source_tables": ["games_competitor", "person"]}, "evidence": "DIVIDE(weight), MULTIPLY(height, height) where id = 147420;"}
{"sample_id": 4989, "db_id": "olympics", "final": {"question": "How many athletes are there in the region where Clara Hughes is from?", "sql": "SELECT COUNT(person_id) FROM person_region WHERE region_id = ( SELECT T1.region_id FROM person_region AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.id WHERE T2.full_name = 'Clara Hughes' )", "source_tables": ["person_region", "person"]}, "evidence": ""}
{"sample_id": 5017, "db_id": "olympics", "final": {"question": "What is the percentage of athletes from Vanuatu who are taller than 175?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.height > 175 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Vanuatu'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "DIVIDE(COUNT(id where height > 175), COUNT(id)) as percentage where region_name = 'Vanuatu';"}
{"sample_id": 4993, "db_id": "olympics", "final": {"question": "How many Olympic games were held in London?", "sql": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'", "source_tables": ["games_city", "city"]}, "evidence": "London refers to city_name = 'London';"}
{"sample_id": 5012, "db_id": "olympics", "final": {"question": "How many kinds of events does athletics have?", "sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Athletics'", "source_tables": ["event", "sport"]}, "evidence": "kinds of events refer to event_name; athletics refer to sport_name = 'Athletics';"}
{"sample_id": 4963, "db_id": "olympics", "final": {"question": "In which Olympic Games have the largest number of women participation?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'F' GROUP BY T1.games_name ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "the largest number of women participation refers to MAX(COUNT(gender = 'F')); In which Olympic Games refer to games_year;"}
{"sample_id": 4959, "db_id": "olympics", "final": {"question": "What is the name of the competitor who has won the most medals?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.id != 4 GROUP BY T1.full_name ORDER BY COUNT(T4.id) DESC LIMIT 1", "source_tables": ["medal", "competitor_event", "games_competitor", "person"]}, "evidence": "name of the competitor refers to full_name; won the most medals refer to MAX(COUNT(medal_id));"}
{"sample_id": 5058, "db_id": "olympics", "final": {"question": "List the name of competitors from Argentina.", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Argentina'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "name refers to full_name; Argentina refers to region_name = 'Argentina';"}
{"sample_id": 4953, "db_id": "olympics", "final": {"question": "How many Olympic events did Michael Phelps II join in total? Find the percentage of the events where he won a gold medal.", "sql": "SELECT COUNT(T3.event_id) , CAST(COUNT(CASE WHEN T4.id = '1' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T4.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Michael Fred Phelps, II'", "source_tables": ["medal", "competitor_event", "games_competitor", "person"]}, "evidence": "DIVIDE(COUNT(event_id where medal_name = 'Gold'), COUNT(event_id)) as percentage where full_name = 'Michael Fred Phelps, II';"}
{"sample_id": 5023, "db_id": "olympics", "final": {"question": "Which city hosted the most games?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id GROUP BY T2.city_name ORDER BY COUNT(T2.city_name) DESC LIMIT 1", "source_tables": ["games_city", "city"]}, "evidence": "Which city refers to city_name; the most games refer to MAX(COUNT(city_name));"}
{"sample_id": 5044, "db_id": "olympics", "final": {"question": "What is the name of medal that competitor id 9 obtained?", "sql": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T2.competitor_id = 9", "source_tables": ["medal", "competitor_event"]}, "evidence": "name of medal refers to medal_name;"}
{"sample_id": 4977, "db_id": "olympics", "final": {"question": "Which region has the highest medal number?", "sql": "SELECT T5.region_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person_region AS T4 ON T3.person_id = T4.person_id INNER JOIN noc_region AS T5 ON T4.region_id = T5.id WHERE T1.id != 4 GROUP BY T5.region_name ORDER BY COUNT(T2.competitor_id) DESC LIMIT 1", "source_tables": ["medal", "competitor_event", "games_competitor", "person_region", "noc_region"]}, "evidence": "region refers to region_name; the highest medal number refers to MAX(COUNT(medal_id <> 4));"}
{"sample_id": 5033, "db_id": "olympics", "final": {"question": "What is the sport name of \"Cross Country Skiing Men's 10/15 kilometres Pursuit\" event?", "sql": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name LIKE 'Cross Country Skiing Men%s 10/15 kilometres Pursuit'", "source_tables": ["event", "sport"]}, "evidence": "\"Cross Country Skiing Men's 10/15 kilometres Pursuit\" refers to event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit';"}
{"sample_id": 4930, "db_id": "olympics", "final": {"question": "Tell the number of swimming related events.", "sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Swimming'", "source_tables": ["event", "sport"]}, "evidence": "swimming refers to sport_name = 'Swimming';"}
{"sample_id": 4937, "db_id": "olympics", "final": {"question": "Show the name of the competitor id 90991.", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.id = 90991", "source_tables": ["games_competitor", "person"]}, "evidence": "name of the competitor refers to full_name;"}
{"sample_id": 4991, "db_id": "olympics", "final": {"question": "How many times was Larysa Semenivna Latynina (Diriy-) declared as champion in Gymnastics Women's Individual All-Around?", "sql": "SELECT COUNT(T1.id) FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.full_name = 'Larysa Semenivna Latynina (Diriy-)' AND T1.event_name LIKE 'Gymnastics Women%s Individual All-Around' AND T2.medal_id = 1", "source_tables": ["event", "person", "competitor_event", "games_competitor"]}, "evidence": "Gymnastics Women's Individual All-Around refers to event_name = 'Gymnastics Women''s Individual All-Around'; declared as champion refers to medal_name = 'Gold' or medal_id = 1;"}
{"sample_id": 5047, "db_id": "olympics", "final": {"question": "Which city were the Olympic games held in 1992?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_year = 1992", "source_tables": ["games_city", "city", "games"]}, "evidence": "city refers to city_name; in 1992 refers to games_year = 1992;"}
{"sample_id": 4921, "db_id": "olympics", "final": {"question": "In which city was the 1992 Summer Olympic Games held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'", "source_tables": ["games_city", "city", "games"]}, "evidence": "In which city refers to city_name; 1992 Summer Olympic Games refer to games_name = '1992 Summer';"}
{"sample_id": 5018, "db_id": "olympics", "final": {"question": "Calculate the average weight of male athletes from Tonga.", "sql": "SELECT AVG(T3.weight) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Tonga' AND T3.gender = 'M'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "AVG(weight) where region_name = 'Tonga' and gender = 'M';"}
{"sample_id": 5011, "db_id": "olympics", "final": {"question": "State the number of athletes in the 1984 Summer Olympic Games who were more than 50 years old.", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1984 Summer' AND T2.age > 50", "source_tables": ["games", "games_competitor"]}, "evidence": "the 1984 Summer Olympic Games refer to games_name = '1984 Summer'; athletes more than 50 years old refer to person_id where age > 50;"}
{"sample_id": 5041, "db_id": "olympics", "final": {"question": "What is the average age of the people who participated in the winter season?", "sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.season = 'Winter'", "source_tables": ["games", "games_competitor"]}, "evidence": "AVG(age) where season = 'Winter';"}
{"sample_id": 4966, "db_id": "olympics", "final": {"question": "In which Olympic Games has Morten Aleksander Djupvik participated?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Morten Aleksander Djupvik'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "In which Olympic Games refer to games_year;"}
{"sample_id": 5021, "db_id": "olympics", "final": {"question": "How many Summer games are there that were held in Paris?", "sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris' AND T3.season = 'Summer'", "source_tables": ["games_city", "city", "games"]}, "evidence": "Summer games refer to games_id where season = 'Summer'; Paris refers to city_name = 'Paris';"}
{"sample_id": 4967, "db_id": "olympics", "final": {"question": "How many persons in total have participated in 12 meter Mixed Sailing competitions?", "sql": "SELECT COUNT(T1.competitor_id) FROM competitor_event AS T1 INNER JOIN event AS T2 ON T1.event_id = T2.id INNER JOIN sport AS T3 ON T2.sport_id = T3.id WHERE T2.event_name = 'Sailing Mixed 12 metres'", "source_tables": ["event", "competitor_event", "sport"]}, "evidence": "12 meter Mixed Sailing competitions refer to event_name = 'Sailing Mixed 12 metres';"}
{"sample_id": 4913, "db_id": "olympics", "final": {"question": "Please list the names of all the Olympic games that John Aalberg has taken part in.", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "name of the Olympic games refers to games_name;"}
{"sample_id": 5034, "db_id": "olympics", "final": {"question": "What is the percentage of people whose age greater than 24 and participate in winter season?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.age > 24 AND T1.season = 'Winter' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.games_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id", "source_tables": ["games", "games_competitor"]}, "evidence": "DIVIDE(COUNT(season = 'Winter' and age > 24), COUNT(person_id)) as percentage;"}
{"sample_id": 5069, "db_id": "olympics", "final": {"question": "List down the games ID of games held in Tokyo.", "sql": "SELECT T1.games_id FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'Tokyo'", "source_tables": ["games_city", "city"]}, "evidence": "Tokyo refers to city_name = 'Tokyo';"}
{"sample_id": 4960, "db_id": "olympics", "final": {"question": "Where is competitor Estelle Nze Minko from?", "sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Estelle Nze Minko'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "Where competitor is from refers to region_name;"}
{"sample_id": 4956, "db_id": "olympics", "final": {"question": "In which cities beginning with the letter M have the Olympic Games been held?", "sql": "SELECT city_name FROM city WHERE city_name LIKE 'M%'", "source_tables": ["city"]}, "evidence": "cities beginning with the letter M refer to city_name LIKE 'M%';"}
{"sample_id": 4947, "db_id": "olympics", "final": {"question": "Which cities hosted at least 3 Olympic games?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id GROUP BY T2.id HAVING COUNT(T1.games_id) >= 3", "source_tables": ["games_city", "city"]}, "evidence": "cities refer to city_name; hosted at least 3 Olympic games refers to COUNT(games_id) > = 3;"}
{"sample_id": 4936, "db_id": "olympics", "final": {"question": "Who has participated in the most Olympic Games in the database?", "sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id GROUP BY T2.person_id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "source_tables": ["games_competitor", "person"]}, "evidence": "Who refers to full_name; participated in the most Olympic Games refers to MAX(COUNT(games_id));"}
{"sample_id": 4981, "db_id": "olympics", "final": {"question": "What is the ratio male to female athletes in the 2012 Summer Olympic?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'M' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T3.gender = 'F' THEN 1 ELSE NULL END) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2012 Summer'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "DIVIDE(COUNT(gender = 'M'), COUNT(gender = 'F')) where games_name = '2012 Summer';"}
{"sample_id": 4979, "db_id": "olympics", "final": {"question": "List out all the medals won by Lee Chong Wei.", "sql": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id WHERE T4.full_name = 'Lee Chong Wei' AND T2.medal_id <> 4", "source_tables": ["medal", "person", "competitor_event", "games_competitor"]}, "evidence": "medals refer to medal_id where medal_id <> 4;"}
{"sample_id": 5004, "db_id": "olympics", "final": {"question": "What is the id of Rio de Janeiro?", "sql": "SELECT id FROM city WHERE city_name = 'Rio de Janeiro'", "source_tables": ["city"]}, "evidence": "Rio de Janeiro refers to city_name = 'Rio de Janeiro';"}
{"sample_id": 5009, "db_id": "olympics", "final": {"question": "How many 20 years old athletes were there in the 1984 Summer Olympic Games?", "sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1984 Summer' AND T2.age = 20", "source_tables": ["games", "games_competitor"]}, "evidence": "20 years old athletes refer to person_id where age = 20; 1984 Summer Olympic Games refer to games_name = '1984 Summer';"}
{"sample_id": 5080, "db_id": "olympics", "final": {"question": "In the 2014 Winter game, what is the percentage of competitors who age 28 years old?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.age = 28 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'", "source_tables": ["games", "games_competitor"]}, "evidence": "DIVIDE(COUNT(age = 28), COUNT(id)) as percentage where games_name = '2014 Winter';"}
{"sample_id": 5051, "db_id": "olympics", "final": {"question": "How many Belgian men have competed in an Olympic Games?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Belgium' AND T3.gender = 'M'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "Belgian men refer to gender = 'M' where region_name = 'Belgium';"}
{"sample_id": 4958, "db_id": "olympics", "final": {"question": "What was the medal that Coleen Dufresne got?", "sql": "SELECT T4.medal_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Coleen Dufresne (-Stewner)'", "source_tables": ["medal", "competitor_event", "games_competitor", "person"]}, "evidence": "What medal refers to medal_name;"}
{"sample_id": 5001, "db_id": "olympics", "final": {"question": "Give the id of the event \"Shooting Mixed Skeet\".", "sql": "SELECT id FROM event WHERE event_name = 'Shooting Mixed Skeet'", "source_tables": ["event"]}, "evidence": "\"Shooting Mixed Skeet\" refers to event_name = 'Shooting Mixed Skeet';"}
{"sample_id": 4943, "db_id": "olympics", "final": {"question": "What are the names of the events under Art Competitions?", "sql": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Art Competitions'", "source_tables": ["event", "sport"]}, "evidence": "Art Competitions refer to sport_name = 'Art Competitions'; names of events refers to event_name;"}
{"sample_id": 4914, "db_id": "olympics", "final": {"question": "What was the name of the Olympic game that John Aalberg took part in when he was 31?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T2.age = 31", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "when he was 31 refers to age = 31; name of the Olympic games refers to games_name;"}
{"sample_id": 4934, "db_id": "olympics", "final": {"question": "Give the name of the tallest athlete from Sweden.", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Sweden' ORDER BY T3.height DESC LIMIT 1", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "the tallest athlete refers to id where MAX(height); from Sweden refers to region_name = 'Sweden'; name refers to full_name;"}
{"sample_id": 4950, "db_id": "olympics", "final": {"question": "Where was the first Olympic game held?", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id ORDER BY T3.games_year LIMIT 1", "source_tables": ["games_city", "city", "games"]}, "evidence": "Where it was held refers to city_name; the first Olympic game refers to id where MIN(games_year);"}
{"sample_id": 5037, "db_id": "olympics", "final": {"question": "State the name of the city that held game id 3.", "sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T1.games_id = 3", "source_tables": ["games_city", "city"]}, "evidence": "name of city refers to city_name"}
{"sample_id": 4916, "db_id": "olympics", "final": {"question": "How many Olympic competitors are from Finland?", "sql": "SELECT COUNT(T1.person_id) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Finland'", "source_tables": ["person_region", "noc_region"]}, "evidence": "competitors refer to person_id; from Finland refers to region_name = 'Finland';"}
{"sample_id": 5061, "db_id": "olympics", "final": {"question": "List the name of the games that Georgios Abaris participated.", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Georgios Abaris'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "name of games refers to games_name;"}
{"sample_id": 4992, "db_id": "olympics", "final": {"question": "What are the names of the cities where Carl Lewis Borack competed?", "sql": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'Carl Lewis Borack'", "source_tables": ["games_city", "city", "games_competitor", "person"]}, "evidence": "name of the cities refers to city_name"}
{"sample_id": 5066, "db_id": "olympics", "final": {"question": "Provide the competitors' names who joined the 2000 Summer.", "sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2000 Summer'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "the competitors' names refer to full_name; the 2000 Summer refers to games_name = '2000 Summer';"}
{"sample_id": 5062, "db_id": "olympics", "final": {"question": "Provide the name of competitors from Greece.", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Greece'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "name refers to full_name; Greece refers to region_name = 'Greece';"}
{"sample_id": 5032, "db_id": "olympics", "final": {"question": "What is the percentage of female competitors whose heights are over 170 that participated in the game in 1988?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' AND T3.height > 170 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_year = 1988", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "DIVIDE(COUNT(person_id where gender = 'F' and height > 170), COUNT(person_id)) as percentage where games_year = 1988;"}
{"sample_id": 4940, "db_id": "olympics", "final": {"question": "What is the percentage of male athletes from Estonia?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Estonia'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "DIVIDE(COUNT(id where gender = 'M'), COUNT(id)) as percentage where region_name = 'Estonia';"}
{"sample_id": 4951, "db_id": "olympics", "final": {"question": "What is the name of the game in which the oldest Olympian has ever participated?", "sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id ORDER BY T2.age LIMIT 1", "source_tables": ["games", "games_competitor"]}, "evidence": "the oldest Olympian refers to id where MAX(age); name of the game refers to games_name;"}
{"sample_id": 5013, "db_id": "olympics", "final": {"question": "Who is the heaviest athlete from Russia?", "sql": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Russia' ORDER BY T3.weight DESC LIMIT 1", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "the heaviest athlete refers to full_name where MAX(weight); from Russia refers to region_name = 'Russia';"}
{"sample_id": 4972, "db_id": "olympics", "final": {"question": "How many Olympics games were held during the 90s?", "sql": "SELECT COUNT(games_year) FROM games WHERE games_year BETWEEN '1990' AND '1999'", "source_tables": ["games"]}, "evidence": "games refer to id; during the 90s refers to games_year BETWEEN 1990 AND 1999;"}
{"sample_id": 5003, "db_id": "olympics", "final": {"question": "Tell the weight of Dagfinn Sverre Aarskog.", "sql": "SELECT weight FROM person WHERE full_name = 'Dagfinn Sverre Aarskog'", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 5070, "db_id": "olympics", "final": {"question": "Give the NOC code and region name of the heaviest competitor.", "sql": "SELECT T1.noc, T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id ORDER BY T3.weight DESC LIMIT 1", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "NOC code refers to noc; the heaviest refers to MAX(weight);"}
{"sample_id": 5072, "db_id": "olympics", "final": {"question": "What is the average weight of the competitors who won a silver medal?", "sql": "SELECT AVG(T1.weight) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Silver'", "source_tables": ["medal", "competitor_event", "games_competitor", "person"]}, "evidence": "AVG(weight) where medal_name = 'Silver';"}
{"sample_id": 5079, "db_id": "olympics", "final": {"question": "Among the competitors with age ranges 24 and below, calculate the difference between the number of competitors who weighed greater than 70 kg and competitors who weighted less than 70 kg.", "sql": "SELECT COUNT(CASE WHEN T1.weight > 70 THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.weight < 70 THEN 1 ELSE NULL END) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age < 24", "source_tables": ["games_competitor", "person"]}, "evidence": "SUBTRACT(COUNT(weight > 70), COUNT(weight < 70)) where age < 24;"}
{"sample_id": 4935, "db_id": "olympics", "final": {"question": "How many athletes in the database are from Guatemala?", "sql": "SELECT COUNT(T1.person_id) FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id WHERE T2.region_name = 'Guatemala'", "source_tables": ["person_region", "noc_region"]}, "evidence": "from Guatemala refers to region_name = 'Guatemala';"}
{"sample_id": 4968, "db_id": "olympics", "final": {"question": "How many different events are there of Modern Pentathlon?", "sql": "SELECT COUNT(DISTINCT T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Modern Pentathlon'", "source_tables": ["event", "sport"]}, "evidence": "Modern Pentathlon refers to sport_name = 'Modern Pentathlon';"}
{"sample_id": 5052, "db_id": "olympics", "final": {"question": "How many athletes took part in the Olympic games held in Barcelona?", "sql": "SELECT COUNT(T1.person_id) FROM games_competitor AS T1 INNER JOIN games_city AS T2 ON T1.games_id = T2.games_id INNER JOIN city AS T3 ON T2.city_id = T3.id WHERE T3.city_name = 'Barcelona'", "source_tables": ["games_city", "city", "games_competitor"]}, "evidence": "Barcelona refers to city_name = 'Barcelona';"}
{"sample_id": 4984, "db_id": "olympics", "final": {"question": "How many athletes playing in Canoeing fall into overweight BMI category in the 2008 Summer games?", "sql": "SELECT COUNT(T5.id) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id INNER JOIN games AS T6 ON T4.games_id = T6.id WHERE T1.sport_name = 'Canoeing' AND T6.games_name = '2008 Summer' AND T5.weight * 10000.0 / (T5.height * T5.height) BETWEEN 25.0 AND 30", "source_tables": ["competitor_event", "sport", "games_competitor", "games", "event", "person"]}, "evidence": "fall into overweight BMI category refers to DIVIDE(weight), MULTIPLY(height, height) < 30; Canoeing refers to a sport name; the 2008 Summer games refer to games_name = '2008 Summer';"}
{"sample_id": 5055, "db_id": "olympics", "final": {"question": "In Barcelona, how many Olympic games were held?", "sql": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'Barcelona'", "source_tables": ["games_city", "city"]}, "evidence": "Barcelona refers to city_name = 'Barcelona';"}
{"sample_id": 5046, "db_id": "olympics", "final": {"question": "Who is the heaviest athlete?", "sql": "SELECT full_name FROM person ORDER BY weight DESC LIMIT 1", "source_tables": ["person"]}, "evidence": "Who refers to full_name; the heaviest refers to MAX(weight);"}
{"sample_id": 4915, "db_id": "olympics", "final": {"question": "When John Aalberg took part in the 1994 Winter Olympic Game, how old was he?", "sql": "SELECT T2.age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'John Aalberg' AND T1.games_name = '1994 Winter'", "source_tables": ["games", "person", "games_competitor"]}, "evidence": "how old was he refers to age; 1994 Winter refers to games_name = '1994 Winter';"}
{"sample_id": 5053, "db_id": "olympics", "final": {"question": "How many different football events are there?", "sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Football'", "source_tables": ["event", "sport"]}, "evidence": "events refer to event_name; football refers to sport_name = 'Football';"}
{"sample_id": 4927, "db_id": "olympics", "final": {"question": "Which sport does the event \"Shooting Women's Trap\" belong to?", "sql": "SELECT T1.sport_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name LIKE 'Shooting Women%s Trap'", "source_tables": ["event", "sport"]}, "evidence": "sport refers to sport_name; event \"Shooting Women's Trap\" refers to event_name = 'Shooting Women''s Trap';"}
{"sample_id": 4964, "db_id": "olympics", "final": {"question": "How many males from Belgium have participated in an Olympic Games?", "sql": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Belgium' AND T3.gender = 'M'", "source_tables": ["person", "person_region", "noc_region"]}, "evidence": "males refer to gender = 'M'; Belgium refers to region_name = 'Belgium';"}
{"sample_id": 4944, "db_id": "olympics", "final": {"question": "How many gold medals does Henk Jan Zwolle have?", "sql": "SELECT COUNT(T1.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T1.full_name = 'Henk Jan Zwolle' AND T4.medal_name = 'Gold'", "source_tables": ["medal", "competitor_event", "games_competitor", "person"]}, "evidence": "gold medals refer to medal_name = 'Gold';"}
{"sample_id": 4922, "db_id": "olympics", "final": {"question": "Please list the names of the Olympic games that were held in London.", "sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London'", "source_tables": ["games_city", "city", "games"]}, "evidence": "held in London refers to city_name = 'London';"}
{"sample_id": 5156, "db_id": "address", "final": {"question": "List down the area code and country of the city named Savoy.", "sql": "SELECT T1.area_code, T2.county FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON T1.zip_code = T3.zip_code WHERE T3.city = 'Savoy'", "source_tables": ["area_code", "zip_data", "country"]}, "evidence": "Savoy is the city;"}
{"sample_id": 5211, "db_id": "address", "final": {"question": "Provide the alias of the city with the highest population in year 2020.", "sql": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2020 = ( SELECT MAX(population_2020) FROM zip_data )", "source_tables": ["zip_data", "alias"]}, "evidence": "the highest population in year 2020 refers to MAX(population_2020);"}
{"sample_id": 5227, "db_id": "address", "final": {"question": "Provide the congress representatives' IDs of the postal points in East Springfield.", "sql": "SELECT T2.district FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code WHERE T1.city = 'East Springfield'", "source_tables": ["zip_data", "zip_congress"]}, "evidence": "congress representatives' IDs refer to CID; East Springfield is the city;"}
{"sample_id": 5091, "db_id": "address", "final": {"question": "Among the residential areas with the bad alias \"Internal Revenue Service\", how many of them are in the Eastern time zone?", "sql": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'Internal Revenue Service' AND T1.time_zone = 'Eastern'", "source_tables": ["avoid", "zip_data"]}, "evidence": "\"Internal Revenue Service\" is the bad_alias; in Eastern time zone refers to time_zone = 'Eastern'"}
{"sample_id": 5152, "db_id": "address", "final": {"question": "Provide the alias and elevation of the city with zip code 1028.", "sql": "SELECT T1.alias, T2.elevation FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 1028", "source_tables": ["zip_data", "alias"]}, "evidence": ""}
{"sample_id": 5128, "db_id": "address", "final": {"question": "What is the CBSA name and type in York, ME?", "sql": "SELECT T1.CBSA_name, T1.CBSA_type FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'York' AND T2.state = 'ME'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"York\" is the city; 'ME' is the state; type refers to CBSA_type"}
{"sample_id": 5200, "db_id": "address", "final": {"question": "Indicate the name of the country with a population greater than 10000 in 2010.", "sql": "SELECT DISTINCT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 > 10000", "source_tables": ["zip_data", "country"]}, "evidence": "population greater than 10000 in 2010 refers to population_2010 > 10000;"}
{"sample_id": 5119, "db_id": "address", "final": {"question": "Give the name and the position of the cbsa officer from the area with the zip code 45503.", "sql": "SELECT T1.CBSA_name, T2.latitude, T2.longitude FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.zip_code = 45503 GROUP BY T1.CBSA_name, T2.latitude, T2.longitude", "source_tables": ["cbsa", "zip_data"]}, "evidence": "position refers to latitude, longitude"}
{"sample_id": 5194, "db_id": "address", "final": {"question": "Provide the names of bad aliases in the city of Aguadilla.", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Aguadilla'", "source_tables": ["avoid", "zip_data"]}, "evidence": ""}
{"sample_id": 5141, "db_id": "address", "final": {"question": "What is the longitude and latitude for the district represented by Grayson Alan?", "sql": "SELECT T1.latitude, T1.longitude FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Grayson' AND T3.last_name = 'Alan'", "source_tables": ["congress", "zip_data", "zip_congress"]}, "evidence": ""}
{"sample_id": 5147, "db_id": "address", "final": {"question": "Among the zip code under Saint Croix county, which zip code has the biggest land area?", "sql": "SELECT T1.zip_code FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'SAINT CROIX' ORDER BY T2.land_area DESC LIMIT 1", "source_tables": ["zip_data", "country"]}, "evidence": "biggest land area refers to Max(land_area); \"SAINT CROIX\" is the county"}
{"sample_id": 5129, "db_id": "address", "final": {"question": "List 10 cities with a median age over 40. Include their zip codes and area codes.", "sql": "SELECT T2.city, T2.zip_code, T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.median_age >= 40 LIMIT 10", "source_tables": ["area_code", "zip_data"]}, "evidence": "median age over 40 refers to median_age > 40"}
{"sample_id": 5190, "db_id": "address", "final": {"question": "What percentage of households are in \"Coroyell\" out of its state?", "sql": "SELECT CAST(SUM(CASE WHEN T1.county = 'CORYELL' THEN T2.households ELSE 0 END) AS REAL) * 100 / SUM(T2.households) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code", "source_tables": ["zip_data", "country"]}, "evidence": "DIVIDE(SUM(households where county = 'CORYELL'), SUM(households)) as percentage;"}
{"sample_id": 5196, "db_id": "address", "final": {"question": "Which state has the most bad aliases?", "sql": "SELECT T2.state FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.state ORDER BY COUNT(T1.bad_alias) DESC LIMIT 1", "source_tables": ["avoid", "zip_data"]}, "evidence": "the most bad aliases refer to MAX(COUNT(bad_alias));"}
{"sample_id": 5088, "db_id": "address", "final": {"question": "Please list the names of all the counties with at least one residential area that implements daylight saving.", "sql": "SELECT DISTINCT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.daylight_savings = 'Yes'", "source_tables": ["zip_data", "country"]}, "evidence": "implements daylight savings refers to daylight_savings = 'Yes'"}
{"sample_id": 5144, "db_id": "address", "final": {"question": "Which zip code in Massachusetts that have more than 1 area code?", "sql": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'MA' GROUP BY T1.zip_code HAVING COUNT(T1.area_code) > 1", "source_tables": ["area_code", "zip_data"]}, "evidence": "\"Massachusetts\" is the state; zip code more than 1 area code refers to Count (zip_code) > 1"}
{"sample_id": 5107, "db_id": "address", "final": {"question": "In the state where Lisa Murkowski is the representative, how many cities have zero employees?", "sql": "SELECT COUNT(T3.city) FROM congress AS T1 INNER JOIN state AS T2 ON T1.abbreviation = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T1.first_name = 'Murkowski' AND T1.last_name = 'Lisa' AND T3.employees = 0", "source_tables": ["state", "congress", "zip_data"]}, "evidence": "zero employee refers to employees = 0"}
{"sample_id": 5167, "db_id": "address", "final": {"question": "List the bad alias of the postal point located in Camuy.", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Camuy'", "source_tables": ["avoid", "zip_data"]}, "evidence": "postal points refer to zip_code; Camuy is the city;"}
{"sample_id": 5131, "db_id": "address", "final": {"question": "What is the area code of Phillips county in Montana?", "sql": "SELECT DISTINCT T1.area_code FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN state AS T3 ON T2.state = T3.abbreviation WHERE T2.county = 'PHILLIPS' AND T3.name = 'Montana'", "source_tables": ["state", "area_code", "country"]}, "evidence": "\"PHILLIPS\" is the county; 'Montana' is the name of state"}
{"sample_id": 5202, "db_id": "address", "final": {"question": "Calculate the percentage of households in residential areas of countries over 10000.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.households > 10000 THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code", "source_tables": ["zip_data", "country"]}, "evidence": "DIVIDE(SUM(households > 10000), SUM(households)) as percentage;"}
{"sample_id": 5145, "db_id": "address", "final": {"question": "State the county for Arecibo City.", "sql": "SELECT DISTINCT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Arecibo'", "source_tables": ["zip_data", "country"]}, "evidence": "\"Arecibo\" is the city"}
{"sample_id": 5175, "db_id": "address", "final": {"question": "Provide the zip codes and the congress representatives' names of the postal points which are affiliated with Readers Digest.", "sql": "SELECT T1.zip_code, T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.organization = 'Readers Digest'", "source_tables": ["congress", "zip_data", "zip_congress"]}, "evidence": "representative's full names refer to first_name, last_name; postal points affiliated with Readers Digest refer to zip_code where organization = 'Readers Digest';"}
{"sample_id": 5084, "db_id": "address", "final": {"question": "Please list the numbers of males in all the residential areas in Arecibo county.", "sql": "SELECT SUM(T1.male_population) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'", "source_tables": ["zip_data", "country"]}, "evidence": "\"ARECIBO\" is the county; number of males refers to Sum(male_population)"}
{"sample_id": 5207, "db_id": "address", "final": {"question": "Give the country and area code of the city with zip code 1116.", "sql": "SELECT T2.county, T1.area_code FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 1116", "source_tables": ["area_code", "country"]}, "evidence": ""}
{"sample_id": 5216, "db_id": "address", "final": {"question": "Among the cities with alias Ponce, what is the percentage of cities with a country level FIPS code of less than 20?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.county_fips < 20 THEN T2.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T2.zip_code) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Ponce'", "source_tables": ["zip_data", "alias"]}, "evidence": "DIVIDE(COUNT(county_fips < 20), COUNT(county_fips)) as percentage where alias = 'Ponce';"}
{"sample_id": 5132, "db_id": "address", "final": {"question": "Which district has the largest land area in Wisconsin? Write the full name of the congress representative and include the postal codes.", "sql": "SELECT T2.zip_code, T1.first_name, T1.last_name FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Wisconsin' ORDER BY T1.land_area DESC LIMIT 1", "source_tables": ["congress", "zip_congress"]}, "evidence": "\"Wisconsin\" is the state; largest land area refers to Max(land_area); full name refers to first_name, last_name; postal code refers to zip_code"}
{"sample_id": 5179, "db_id": "address", "final": {"question": "List all the counties in Georgia.", "sql": "SELECT T2.county FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Georgia' GROUP BY T2.county", "source_tables": ["state", "country"]}, "evidence": "Georgia is the name of the state, in which name = 'Georgia';"}
{"sample_id": 5100, "db_id": "address", "final": {"question": "What are the precise locations of the cities with an area code of 787?", "sql": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = '787' GROUP BY T2.latitude, T2.longitude", "source_tables": ["area_code", "zip_data"]}, "evidence": "precise location refers to latitude, longitude"}
{"sample_id": 5192, "db_id": "address", "final": {"question": "Indicate the country name of the city Las Marias.", "sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Las Marias'", "source_tables": ["zip_data", "country"]}, "evidence": ""}
{"sample_id": 5086, "db_id": "address", "final": {"question": "Among all the residential areas in Arecibo county, what is the zip_code of the one with the highest white population?", "sql": "SELECT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' ORDER BY T1.white_population DESC LIMIT 1", "source_tables": ["zip_data", "country"]}, "evidence": "\"ARECIBO\" is the county; highest white population refers to Max(white_population)"}
{"sample_id": 5169, "db_id": "address", "final": {"question": "Among the daylight savings areas in the Midwest region, how many postal points are there in Illinois?", "sql": "SELECT COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Illinois' AND T2.daylight_savings = 'Yes' AND T2.region = 'Midwest'", "source_tables": ["state", "zip_data"]}, "evidence": "postal points refer to zip_code; the daylight savings areas refer to daylight_savings = 'Yes'; Illinois is the name of the state, in which name = 'Illinois';"}
{"sample_id": 5099, "db_id": "address", "final": {"question": "How many post offices are there in New York?", "sql": "SELECT COUNT(DISTINCT T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.abbreviation = 'NY' AND T2.type = 'Post Office'", "source_tables": ["state", "zip_data"]}, "evidence": "\"New York\" refers to state = 'NY' and name = 'New York'; 'Post Office' is the type"}
{"sample_id": 5225, "db_id": "address", "final": {"question": "Provide the zip codes and area codes of the postal points with the community post office type at the elevation above 6000.", "sql": "SELECT T1.zip_code, T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.type = 'Community Post Office ' AND T2.elevation > 6000", "source_tables": ["area_code", "zip_data"]}, "evidence": "community post office type refers to type = 'Community Post Office'; elevation above 6000 refers to elevation > 6000;"}
{"sample_id": 5219, "db_id": "address", "final": {"question": "Provide the zip codes and coordinates of the postal points under Allentown-Bethlehem-Easton, PA-NJ.", "sql": "SELECT T2.zip_code, T2.latitude, T2.longitude FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "coordinates refer to latitude and longitude; under Allentown-Bethlehem-Easton, PA-NJ refers to CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';"}
{"sample_id": 5217, "db_id": "address", "final": {"question": "List down the country of the cities with a population greater than 97% of the average population of all countries in 2020.", "sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2020 > 0.97 * ( SELECT AVG(population_2020) FROM zip_data )", "source_tables": ["zip_data", "country"]}, "evidence": "population_2020 > MULTIPLY(0.97, AVG(population_2020));"}
{"sample_id": 5118, "db_id": "address", "final": {"question": "How many counties are there in Virginia State?", "sql": "SELECT COUNT(T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virginia'", "source_tables": ["state", "country"]}, "evidence": "\"Virginia\" is the state"}
{"sample_id": 5160, "db_id": "address", "final": {"question": "What is the country and state of the city named Dalton?", "sql": "SELECT T2.county FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T3.city = 'Dalton' GROUP BY T2.county", "source_tables": ["state", "zip_data", "country"]}, "evidence": "Dalton is the city;"}
{"sample_id": 5110, "db_id": "address", "final": {"question": "What party does the area with the zip code 91701 belong to?", "sql": "SELECT T1.party FROM congress AS T1 INNER JOIN state AS T2 ON T1.abbreviation = T2.abbreviation INNER JOIN zip_data AS T3 ON T2.abbreviation = T3.state WHERE T3.zip_code = 91701 GROUP BY T1.party", "source_tables": ["state", "congress", "zip_data"]}, "evidence": ""}
{"sample_id": 5183, "db_id": "address", "final": {"question": "What was the population of Wilcox County in 2010?", "sql": "SELECT SUM(T2.population_2010) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'WILCOX'", "source_tables": ["zip_data", "country"]}, "evidence": "population of Wilcox County in 2010 refers to SUM(population_2010) where county = 'WILCOX';"}
{"sample_id": 5159, "db_id": "address", "final": {"question": "Provide the average elevation of the cities with alias Amherst.", "sql": "SELECT AVG(T2.elevation) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Amherst'", "source_tables": ["zip_data", "alias"]}, "evidence": "AVG(elevation) where alias = 'Amherst';"}
{"sample_id": 5204, "db_id": "address", "final": {"question": "Among the area code 787, list the country of the cities with a postal point type of unique postal office.", "sql": "SELECT DISTINCT T2.county FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON T1.zip_code = T3.zip_code WHERE T1.area_code = '787' AND T3.type = 'Unique Post Office'", "source_tables": ["area_code", "zip_data", "country"]}, "evidence": "postal point type of unique postal office refers to type = 'Unique Post Office';"}
{"sample_id": 5206, "db_id": "address", "final": {"question": "In cities that do not implement daylight savings, what is the total number of cities?", "sql": "SELECT COUNT(T1.area_code) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.daylight_savings = 'No'", "source_tables": ["area_code", "zip_data"]}, "evidence": "do not implement daylight savings refers to daylight_savings = 'No';"}
{"sample_id": 5181, "db_id": "address", "final": {"question": "What is the name of the CBSA of the city with the highest average house value?", "sql": "SELECT DISTINCT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.avg_house_value = ( SELECT MAX(avg_house_value) FROM zip_data ) LIMIT 1", "source_tables": ["cbsa", "zip_data"]}, "evidence": "the highest average house value refers to avg_house_value;"}
{"sample_id": 5220, "db_id": "address", "final": {"question": "Provide the zip codes, cities, and locations of the postal points that have Shared Reshipper as a bad alias.", "sql": "SELECT T1.zip_code, T2.city, T2.latitude, T2.longitude FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Shared Reshipper'", "source_tables": ["avoid", "zip_data"]}, "evidence": "latitude and longitude coordinates can be used to identify the location;"}
{"sample_id": 5197, "db_id": "address", "final": {"question": "What is the difference in the number of bad alias between Aguada city and Aguadilla city?", "sql": "SELECT COUNT(CASE WHEN T2.city = 'Aguada' THEN T1.bad_alias ELSE NULL END) - COUNT(CASE WHEN T2.city = 'Aguadilla' THEN T1.bad_alias ELSE NULL END) AS DIFFERENCE FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code", "source_tables": ["avoid", "zip_data"]}, "evidence": "SUBTRACT(COUNT(bad_alias where city = 'Aguada'), COUNT(bad_alias where city = 'Aguadilla'));"}
{"sample_id": 5186, "db_id": "address", "final": {"question": "What is the name of the state with the most counties?", "sql": "SELECT T1.name FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state GROUP BY T2.state ORDER BY COUNT(T2.county) DESC LIMIT 1", "source_tables": ["state", "country"]}, "evidence": "the most counties refer to MAX(COUNT(county));"}
{"sample_id": 5161, "db_id": "address", "final": {"question": "Give at least five alias of cities with a postal point of post office.", "sql": "SELECT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.type = 'Post Office' LIMIT 5", "source_tables": ["zip_data", "alias"]}, "evidence": "postal point of post office refers to type = 'Post Office';"}
{"sample_id": 5146, "db_id": "address", "final": {"question": "How many zip codes are under Barre, VT?", "sql": "SELECT COUNT(T2.zip_code) FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Barre, VT'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Barre, VT\" is the CBSA_name"}
{"sample_id": 5137, "db_id": "address", "final": {"question": "Calculate the average of 2020's population in each zip code.", "sql": "SELECT CAST(SUM(population_2020) AS REAL) / COUNT(zip_code) FROM zip_data", "source_tables": ["zip_data"]}, "evidence": "average of 2020 population in each zip code refers to Divide (Sum(population_2020), Count(zip_code))"}
{"sample_id": 5108, "db_id": "address", "final": {"question": "What are the top 3 states with the highest Asian population? List the full names of all the representatives in the said states.", "sql": "SELECT t.state, T1.first_name, T1.last_name FROM zip_data AS T INNER JOIN congress AS T1 ON t.state = T1.abbreviation GROUP BY t.state ORDER BY SUM(t.asian_population) DESC LIMIT 3", "source_tables": ["congress", "zip_data"]}, "evidence": "city with highest asian population refers to Max(Sum(asian_population)); full name refers to first_name, last_name"}
{"sample_id": 5149, "db_id": "address", "final": {"question": "Based on the population in 2020, calculate the percentage for the population of Asian in the zip code where the CBSA was Atmore, AL.", "sql": "SELECT CAST(T2.asian_population AS REAL) * 100 / T2.population_2010 FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Atmore, AL'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Atmore, AL\" is CBSA_name; percentage = Divide(asian_population, population_2020) * 100"}
{"sample_id": 5222, "db_id": "address", "final": {"question": "Count the number of postal points under New York-Newark-Jersey City, NY-NJ-PA.", "sql": "SELECT COUNT(T2.zip_code) FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "postal points refer to zip_code; under New York-Newark-Jersey City, NY-NJ-PA refers to CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA';"}
{"sample_id": 5095, "db_id": "address", "final": {"question": "What is the average median female age of all the residential areas in the Arecibo county?", "sql": "SELECT SUM(T1.female_median_age) / COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO'", "source_tables": ["zip_data", "country"]}, "evidence": "\"ARECIBO\" is the county; average median female age = Divide (Sum(median_female_age), Count(country))"}
{"sample_id": 5198, "db_id": "address", "final": {"question": "Which state has greater than 50 CBSA officers of metro type?", "sql": "SELECT T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_type = 'Metro' GROUP BY T2.state HAVING COUNT(T1.CBSA_type) > 50", "source_tables": ["cbsa", "zip_data"]}, "evidence": "greater than 50 CBSA officers of metro type refers to COUNT(CBSA_type = 'Metro') > 50;"}
{"sample_id": 5151, "db_id": "address", "final": {"question": "Give the name of the country and state of the city with elevation of 1039.", "sql": "SELECT DISTINCT T1.name, T2.state FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T3.elevation = 1039", "source_tables": ["state", "zip_data", "country"]}, "evidence": "elevation of 1039 refers to elevation = 1039"}
{"sample_id": 5093, "db_id": "address", "final": {"question": "Please list the bad alias of all the residential areas with a median female age of over 32.", "sql": "SELECT DISTINCT T2.bad_alias FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.female_median_age > 32", "source_tables": ["avoid", "zip_data"]}, "evidence": "median female age of over 32 refers to median_female_age > 32"}
{"sample_id": 5215, "db_id": "address", "final": {"question": "What is the average of the white population in the cities with area code 920?", "sql": "SELECT AVG(T2.white_population) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 920", "source_tables": ["area_code", "zip_data"]}, "evidence": "AVG(white_population) where area_code = 920;"}
{"sample_id": 5218, "db_id": "address", "final": {"question": "Count the number of postal points in the district represented by Kirkpatrick Ann.", "sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'Kirkpatrick' AND T1.last_name = 'Ann'", "source_tables": ["congress", "zip_congress"]}, "evidence": "postal points refer to zip_code;"}
{"sample_id": 5148, "db_id": "address", "final": {"question": "Calculate the difference between the 2020 population and the 2010 population for the districts represented by Griffin Tim.", "sql": "SELECT T1.population_2020 - T1.population_2010 FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Griffin' AND T3.last_name = 'Tim'", "source_tables": ["congress", "zip_data", "zip_congress"]}, "evidence": "difference = Subtract (population_2020, population_2010)"}
{"sample_id": 5168, "db_id": "address", "final": {"question": "Provide the zip code, city, and congress representative's full names of the area which has highest population in 2020.", "sql": "SELECT T1.zip_code, T1.city, T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id GROUP BY T2.district ORDER BY T1.population_2020 DESC LIMIT 1", "source_tables": ["congress", "zip_data", "zip_congress"]}, "evidence": "representative's full names refer to first_name, last_name; area which has highest population in 2020 refers to MAX(population_2020);"}
{"sample_id": 5115, "db_id": "address", "final": {"question": "Give the location coordinates of the city with area code 636.", "sql": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 636", "source_tables": ["area_code", "zip_data"]}, "evidence": "location coordinate refers to (latitude, longitude)"}
{"sample_id": 5092, "db_id": "address", "final": {"question": "What is the bad alias of the residential area with the highest average house value?", "sql": "SELECT T2.bad_alias FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T1.avg_house_value = ( SELECT MAX(avg_house_value) FROM zip_data ) LIMIT 1", "source_tables": ["avoid", "zip_data"]}, "evidence": "highest average house value refers to Max(avg_house_value)"}
{"sample_id": 5116, "db_id": "address", "final": {"question": "Show the zip code of the county represented by Buchanan Vernon.", "sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.first_name = 'Buchanan' AND T1.last_name = 'Vernon'", "source_tables": ["congress", "zip_congress"]}, "evidence": ""}
{"sample_id": 5125, "db_id": "address", "final": {"question": "Which city and state has the bad alias of Lawrenceville?", "sql": "SELECT T2.city, T2.state FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Lawrenceville' GROUP BY T2.city, T2.state", "source_tables": ["avoid", "zip_data"]}, "evidence": "\"Lawrenceville\" is the bad_alias"}
{"sample_id": 5188, "db_id": "address", "final": {"question": "What is the average household income in the city known as \"Danzig\"?", "sql": "SELECT T2.avg_income_per_household FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.bad_alias = 'Danzig'", "source_tables": ["avoid", "zip_data"]}, "evidence": "average household income refers to avg_income_per_household; city known as \"Danzig\" refers to bad_alias = 'Danzig';"}
{"sample_id": 5191, "db_id": "address", "final": {"question": "What is the name and the position of the CBSA officer in the city of Cabo Rojo?", "sql": "SELECT T1.CBSA_name, T1.CBSA_type FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'Cabo Rojo' GROUP BY T1.CBSA_name, T1.CBSA_type", "source_tables": ["cbsa", "zip_data"]}, "evidence": "name of the CBSA officer refers to CBSA_name; position of the CBSA officer refers to CBSA_type;"}
{"sample_id": 5090, "db_id": "address", "final": {"question": "Please list the Asian populations of all the residential areas with the bad alias \"URB San Joaquin\".", "sql": "SELECT SUM(T1.asian_population) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'URB San Joaquin'", "source_tables": ["avoid", "zip_data"]}, "evidence": "\"URB San Joaquin\" is the bad_alias"}
{"sample_id": 5189, "db_id": "address", "final": {"question": "What are the states with an above-average female population?", "sql": "SELECT DISTINCT T2.state FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T2.female_population > ( SELECT AVG(female_population) FROM zip_data )", "source_tables": ["state", "zip_data"]}, "evidence": "above-average female population refers to female_population > DIVIDE(SUM(female_population), COUNT(state));"}
{"sample_id": 5138, "db_id": "address", "final": {"question": "State the male population for all zip code which were under the Berlin, NH CBSA.", "sql": "SELECT T2.male_population FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Berlin, NH' GROUP BY T2.male_population", "source_tables": ["cbsa", "zip_data"]}, "evidence": "\"Berlin, NH\" is the CBSA_name"}
{"sample_id": 5114, "db_id": "address", "final": {"question": "For the county represented by Thompson Bennie G, how many bad aliases does it have?", "sql": "SELECT COUNT(DISTINCT T2.bad_alias) FROM zip_congress AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T1.district = T3.cognress_rep_id WHERE T3.first_name = 'Thompson' AND T3.last_name = 'Bennie G'", "source_tables": ["congress", "avoid", "zip_congress"]}, "evidence": ""}
{"sample_id": 5164, "db_id": "address", "final": {"question": "Among the postal points in Texas, provide the zip codes and cities of postal points which have total beneficiaries of above 10000.", "sql": "SELECT T2.zip_code, T2.city FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Texas' AND T2.total_beneficiaries > 10000", "source_tables": ["state", "zip_data"]}, "evidence": "Texas is the name of the state, in which name = 'Texas'; total beneficiaries of above 10000 refer to total_beneficiaries > 10000;"}
{"sample_id": 5155, "db_id": "address", "final": {"question": "What is the Asian population in the city with the alias Leeds?", "sql": "SELECT SUM(T2.asian_population) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Leeds'", "source_tables": ["zip_data", "alias"]}, "evidence": ""}
{"sample_id": 5224, "db_id": "address", "final": {"question": "Describe the number of postal points and the countries in West Virginia.", "sql": "SELECT COUNT(DISTINCT T2.zip_code), COUNT(DISTINCT T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'West Virginia'", "source_tables": ["state", "country"]}, "evidence": "postal points refer to zip_code; West Virginia is the name of the state, in which name = 'West Virginia';"}
{"sample_id": 5210, "db_id": "address", "final": {"question": "Among the listed cities, provide the area code of the city with the largest water area.", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.water_area = ( SELECT MAX(water_area) FROM zip_data )", "source_tables": ["area_code", "zip_data"]}, "evidence": "the largest water area refers to MAX(water_area);"}
{"sample_id": 5154, "db_id": "address", "final": {"question": "Give the area code of the city with the white population ranging between 1700 to 2000.", "sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.white_population BETWEEN 1700 AND 2000", "source_tables": ["area_code", "zip_data"]}, "evidence": ""}
{"sample_id": 5187, "db_id": "address", "final": {"question": "What is the number of households in the \"FL-10\" district?", "sql": "SELECT SUM(CASE WHEN T2.district = 'FL-10' THEN 1 ELSE 0 END) FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code", "source_tables": ["zip_data", "zip_congress"]}, "evidence": ""}
{"sample_id": 5121, "db_id": "address", "final": {"question": "Calculate the average male median age of all the residential areas in Windham county.", "sql": "SELECT SUM(T2.male_median_age) / COUNT(T2.median_age) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'WINDHAM'", "source_tables": ["zip_data", "country"]}, "evidence": "average male median age refers to Divide (Sum(male_median_age), Count(county)); 'WINDHAM' is the county"}
{"sample_id": 5136, "db_id": "address", "final": {"question": "Calculate the ratio between the number of representatives in Alabama and the number of representatives in Illinois.", "sql": "SELECT CAST(COUNT(CASE WHEN state = 'Alabama' THEN cognress_rep_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN state = 'Illinois' THEN cognress_rep_id ELSE NULL END) FROM congress", "source_tables": ["congress"]}, "evidence": "\"Alabama\" and \"Illinois\" are both state; Ratio = Divide (Count(state = 'Alabama'), Count(state = 'Illinois'))"}
{"sample_id": 5102, "db_id": "address", "final": {"question": "In which county can you find the city with the highest number of females?", "sql": "SELECT T4.county FROM zip_data AS T3 INNER JOIN country AS T4 ON T3.zip_code = T4.zip_code GROUP BY T4.county ORDER BY T3.female_population DESC LIMIT 1", "source_tables": ["zip_data", "country"]}, "evidence": "highest number of females refers to Max(female_population)"}
{"sample_id": 5124, "db_id": "address", "final": {"question": "Name the bad alias of Geneva, AL.", "sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Geneva' AND T2.state = 'AL'", "source_tables": ["avoid", "zip_data"]}, "evidence": "\"Geneva\" is the city; 'AL' is the state"}
{"sample_id": 5205, "db_id": "address", "final": {"question": "What is the elevation of the city with the alias East Longmeadow?", "sql": "SELECT T2.elevation FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'East Longmeadow'", "source_tables": ["zip_data", "alias"]}, "evidence": ""}
{"sample_id": 5173, "db_id": "address", "final": {"question": "Provide the zip codes and CBSA officers of the postal point in Oxford.", "sql": "SELECT T2.zip_code, T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'Oxford'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "CBSA officers refer to CBSA_name; postal point refers to zip_code; Oxford is the city;"}
{"sample_id": 5111, "db_id": "address", "final": {"question": "How many males are there in New Haven County's residential areas?", "sql": "SELECT SUM(T1.male_population) FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'NEW HAVEN'", "source_tables": ["zip_data", "country"]}, "evidence": "\"NEW HAVEN\" is the county; male refers to male_population"}
{"sample_id": 5185, "db_id": "address", "final": {"question": "List all the cities with micro CBSA.", "sql": "SELECT T2.city FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_type = 'Micro'", "source_tables": ["cbsa", "zip_data"]}, "evidence": "micro CBSA refers to CBSA_type = 'Micro';"}
{"sample_id": 5163, "db_id": "address", "final": {"question": "Among the cities belonging to the country named Arroyo, calculate the percentage of increase in the population in these cities from 2010 to 2020.", "sql": "SELECT CAST((SUM(T2.population_2020) - SUM(T2.population_2010)) AS REAL) * 100 / SUM(T2.population_2010) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Arroyo'", "source_tables": ["zip_data", "country"]}, "evidence": "DIVIDE(SUBTRACT(SUM(population_2020)), SUM(population_2010)), SUM(population_2010) as percentage where county = 'ARROYO';"}
{"sample_id": 5083, "db_id": "address", "final": {"question": "Which residential area in Arecibo county has the highest average house value? Please give its zip_code.", "sql": "SELECT T1.zip_code FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' ORDER BY T1.avg_house_value DESC LIMIT 1", "source_tables": ["zip_data", "country"]}, "evidence": "\"ARECIBO\" is the county; highest average house value refers to Max(avg_house_value)"}
{"sample_id": 5097, "db_id": "address", "final": {"question": "What is the alias of the city called Hartford?", "sql": "SELECT DISTINCT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.city = 'Hartford'", "source_tables": ["zip_data", "alias"]}, "evidence": "\"Hartford\" is the city"}
{"sample_id": 5142, "db_id": "address", "final": {"question": "What is the state for area code of 787?", "sql": "SELECT DISTINCT T2.state FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 787", "source_tables": ["area_code", "zip_data"]}, "evidence": ""}
{"sample_id": 5209, "db_id": "address", "final": {"question": "List down the names of the cities belonging to Noble, Oklahoma.", "sql": "SELECT T3.city FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Oklahoma' AND T2.county = 'NOBLE'", "source_tables": ["state", "zip_data", "country"]}, "evidence": "the county of Noble is located in the state of Oklahoma;"}
{"sample_id": 5109, "db_id": "address", "final": {"question": "Which state is Outagamie County in? Give the full name of the state.", "sql": "SELECT DISTINCT T2.name FROM country AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation WHERE T1.county = 'OUTAGAMIE'", "source_tables": ["state", "country"]}, "evidence": "\"OUTAGAMIE\" is the county"}
{"sample_id": 5338, "db_id": "beer_factory", "final": {"question": "List out the root beer ID for the brand Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's.", "sql": "SELECT T1.RootBeerID FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T2.BrandID = T1.BrandID WHERE T2.BrandName IN ('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s')", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's refers to BrandName IN('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s');"}
{"sample_id": 5299, "db_id": "beer_factory", "final": {"question": "In the female customers, how many bought root beer that contains artificial sweetener?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.Gender = 'F' AND T4.ArtificialSweetener = 'TRUE'", "source_tables": ["rootbeerbrand", "rootbeer", "customers", "transaction"]}, "evidence": "female refers to Gender = 'F'; contains artificial sweetener refers to ArtificialSweetener = 'TRUE';"}
{"sample_id": 5238, "db_id": "beer_factory", "final": {"question": "How many transactions had Frank-Paul Santangelo made in July, 2014?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'", "source_tables": ["customers", "transaction"]}, "evidence": "in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';"}
{"sample_id": 5302, "db_id": "beer_factory", "final": {"question": "Among the male customers in Sacramento, what percentage bought Dominion root beer in 2013?", "sql": "SELECT CAST(COUNT(CASE WHEN T4.BrandName = 'Dominion' THEN T1.CustomerID ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.City = 'Sacramento' AND T1.Gender = 'M' AND T2.TransactionDate LIKE '2014%'", "source_tables": ["rootbeerbrand", "rootbeer", "customers", "transaction"]}, "evidence": "male customers refers to Gender = 'M'; Sacramento refers to City = 'Sacramento'; percentage = MULTIPLY(DIVIDE(SUM(BrandID WHERE BrandName = 'Dominion'), COUNT(BrandID) WHERE City = 'Sacramento'), 1.0); Dominion refers to BrandName = 'Dominion'; in 2013 refers to TransactionDate > = 2013-01-01 AND TransactionDate < 2014-01-01;"}
{"sample_id": 5306, "db_id": "beer_factory", "final": {"question": "What is the precise location of all paying customers with American Express?", "sql": "SELECT DISTINCT T2.Latitude, T2.Longitude FROM \"transaction\" AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.CreditCardType = 'American Express'", "source_tables": ["geolocation", "transaction"]}, "evidence": "precise location refers to Latitude, Longitude; American Express refers to CreditCardType = 'American Express';"}
{"sample_id": 5270, "db_id": "beer_factory", "final": {"question": "How many customers are named Charles in Sacramento?", "sql": "SELECT COUNT(CustomerID) FROM customers WHERE First = 'Charles' AND City = 'Sacramento'", "source_tables": ["customers"]}, "evidence": "Sacramento refers to City = 'Sacramento';"}
{"sample_id": 5323, "db_id": "beer_factory", "final": {"question": "How many female mailing list subscribers from Sacramento gave a 4-star rating between 1/3/2016 and 10/26/2016?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 4 AND T1.City = 'Sacramento' AND T1.Gender = 'F' AND T1.SubscribedToEmailList = 'TRUE' AND T2.ReviewDate BETWEEN '2013-01-03' AND '2013-10-26'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "female refers to Gender = 'F'; mailing list subscribers refers to SubscribedToEmailList = 'TRUE'; Elk Grove refers to City = 'Sacramento'; 4-star rating refers to StarRating = 4; between 1/3/2016 and 10/26/2016 refers to ReviewDate BETWEEN '2016-01-03' AND '2016-10-26';"}
{"sample_id": 5293, "db_id": "beer_factory", "final": {"question": "On average how many caffeinated root beers are sold a day?", "sql": "SELECT CAST(COUNT(T2.RootBeerID) AS REAL) / COUNT(DISTINCT T2.PurchaseDate) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN \"transaction\" AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.Caffeinated = 'TRUE'", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "average = DIVIDE(COUNT(RootBeerID WHERE Caffeinated = 'TRUE'), COUNT(PurchaseDate)); caffeinated refers to Caffeinated = 'TRUE';"}
{"sample_id": 5325, "db_id": "beer_factory", "final": {"question": "List the brand names of bottled root beer whose first brewing year is no later than 1930.", "sql": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FirstBrewedYear < '1930-01-01' AND T1.ContainerType = 'Bottle' ORDER BY T2.FirstBrewedYear LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "bottled root beer refers to ContainerType = 'Bottle'; first brewing year is no later than 1930 refers to FirstBrewedYear < 1930;"}
{"sample_id": 5362, "db_id": "beer_factory", "final": {"question": "What is the precise location of the Sac State American River Courtyard?", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State American River Courtyard'", "source_tables": ["geolocation", "location"]}, "evidence": "precise location = Latitude, Longitude; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"}
{"sample_id": 5337, "db_id": "beer_factory", "final": {"question": "List out the root beers bought by Tim Ocel and Dawn Childress.", "sql": "SELECT T2.RootBeerID FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T2.CustomerID = T1.CustomerID WHERE (T1.First = 'Tim' AND T1.Last = 'Ocel') OR (T1.First = 'Dawn' AND T1.Last = 'Childress')", "source_tables": ["customers", "transaction"]}, "evidence": "FALSE;"}
{"sample_id": 5352, "db_id": "beer_factory", "final": {"question": "How many transactions were made at Sac State Union?", "sql": "SELECT COUNT(T1.TransactionID) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State Union'", "source_tables": ["location", "transaction"]}, "evidence": "Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5301, "db_id": "beer_factory", "final": {"question": "Which brewery brewed the most sold root beer in 2015?", "sql": "SELECT T3.BreweryName FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2015%' GROUP BY T3.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "brewery refers to BreweryName; most sold root beer refers to MAX(COUNT(BrandID)); in 2015 refers to TransactionDate > = '2015-01-01' AND TransactionDate < = '2015-12-31';"}
{"sample_id": 5329, "db_id": "beer_factory", "final": {"question": "Calculate the total purchases made by customers using their Visa credit cards in the Sac State American River Courtyard between 6/3/2014 and 11/27/2015.", "sql": "SELECT SUM(T1.PurchasePrice) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State American River Courtyard' AND T1.CreditCardType = 'Visa' AND T1.TransactionDate BETWEEN '2014-06-03' AND '2015-11-27'", "source_tables": ["location", "transaction"]}, "evidence": "total purchases = SUM(PurchasePrice); Visa credit card refers to CreditCardType = 'Visa'; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; between 6/3/2014 and 11/27/2015 refers to TransactionDate BETWEEN '2014-06-03' AND '2015-11-27';"}
{"sample_id": 5250, "db_id": "beer_factory", "final": {"question": "What is the average number of root beers of the brand A&W sold in a day in August, 2014?", "sql": "SELECT CAST(COUNT(T1.BrandID) AS REAL) / 31 FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'A&W'", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "average = DIVIDE(SUM(COUNT(RootBeerID WHERE BrandName = 'A&W' AND SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08')), 31); A&W refers to BrandName = 'A&W'; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"}
{"sample_id": 5260, "db_id": "beer_factory", "final": {"question": "When did Natalie Dorris buy her first root beer?", "sql": "SELECT T2.TransactionDate FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Natalie' AND T1.Last = 'Dorris' ORDER BY T2.TransactionDate LIMIT 1", "source_tables": ["customers", "transaction"]}, "evidence": "when a customer bought their first root beer refers to FirstPurchaseDate;"}
{"sample_id": 5272, "db_id": "beer_factory", "final": {"question": "Which brand of root beer did Jayne Collins give the lowest rating?", "sql": "SELECT T3.BrandName FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Jayne' AND T1.Last = 'Collins' AND T2.StarRating = 1", "source_tables": ["rootbeerbrand", "rootbeerreview", "customers"]}, "evidence": "brand of root beer refers to BrandName; lowest rating refers to MIN(StarRating);"}
{"sample_id": 5346, "db_id": "beer_factory", "final": {"question": "Which of the root beer brand have the lowest purchase?", "sql": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "root beer brand refers to BrandName; lowest purchase refers to MIN(COUNT(BrandID));"}
{"sample_id": 5267, "db_id": "beer_factory", "final": {"question": "What is the name of the brand of the beer with the shortest brewed history?", "sql": "SELECT BrandName FROM rootbeerbrand ORDER BY FirstBrewedYear DESC LIMIT 1", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the brand of the beer refers to BrandName; shortest brewed history refers to MAX(FirstBrewedYear);"}
{"sample_id": 5360, "db_id": "beer_factory", "final": {"question": "Which location sold more bottles of beer?", "sql": "SELECT T2.LocationName FROM rootbeer AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ContainerType = 'Bottle' GROUP BY T2.LocationID ORDER BY COUNT(T1.LocationID) DESC LIMIT 1", "source_tables": ["rootbeer", "location"]}, "evidence": "location refers to LocationName; bottle of beer refers to ContainerType = 'Bottle'; location that sold more bottles of beer refers to MAX(COUNT(LocationID WHERE ContainerType = 'Bottle'));"}
{"sample_id": 5342, "db_id": "beer_factory", "final": {"question": "What is the amount difference between the bottles of root beer sold from Louisiana and Missouri?", "sql": "SELECT ( SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.State = 'LA' AND T1.ContainerType = 'Bottle' ) - ( SELECT COUNT(T3.BrandID) FROM rootbeer AS T3 INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T4.State = 'MO' AND T3.ContainerType = 'Bottle' ) AS DIFFERENCE", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "difference = SUBTRACT(COUNT(ContainerType = 'Bottle' WHERE State = 'LA'), COUNT(ContainerType = 'Bottle' State = 'MO')); bottles refers to ContainerType = 'Bottle'; Louisiana refers to State = 'LA'; Missouri refers to State = 'MO';"}
{"sample_id": 5242, "db_id": "beer_factory", "final": {"question": "Please list the brands of all the root beer that Frank-Paul Santangelo had purchased on 2014/7/7.", "sql": "SELECT DISTINCT T4.BrandName FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'", "source_tables": ["rootbeerbrand", "rootbeer", "customers", "transaction"]}, "evidence": "brands of the root beer refers to BrandName; purchased on 2014/7/7 refers to transactiondate = '2014-07-07';"}
{"sample_id": 5300, "db_id": "beer_factory", "final": {"question": "Calculate the difference between the number of root beers sold that use cane sugar and corn syrup.", "sql": "SELECT COUNT(CASE WHEN T3.CaneSugar = 'TRUE' THEN T1.BrandID ELSE NULL END) - COUNT(CASE WHEN T3.CornSyrup = 'TRUE' THEN T1.BrandID ELSE NULL END) AS DIFFERENCE FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "difference = SUBTRACT(SUM(CaneSugar = 'TRUE'), SUM(CornSyrup = 'TRUE')); use cane sugar refers to CaneSugar = 'TRUE'; corn syrup refers to CornSyrup = 'TRUE';"}
{"sample_id": 5290, "db_id": "beer_factory", "final": {"question": "Among the transactions, what percentage is done by using a visa card?", "sql": "SELECT CAST(COUNT(CASE WHEN CreditCardType = 'Visa' THEN TransactionID ELSE NULL END) AS REAL) * 100 / COUNT(TransactionID) FROM \"transaction\"", "source_tables": ["transaction"]}, "evidence": "visa card refers to CreditCardType = 'Visa'; percentage = MULTIPLY(DIVIDE(SUM(CreditCardType = 'Visa'), COUNT(TransactionID)), 1.0);"}
{"sample_id": 5248, "db_id": "beer_factory", "final": {"question": "Among all the root beers purchased by Frank-Paul Santangelo, how many of them were non-sweetened?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T4.ArtificialSweetener = 'FALSE' AND T4.Honey = 'FALSE'", "source_tables": ["rootbeerbrand", "rootbeer", "customers", "transaction"]}, "evidence": "non-sweetened refers to honey = 'FALSE' AND artificialsweetener = 'FALSE';"}
{"sample_id": 5296, "db_id": "beer_factory", "final": {"question": "Among the root beers sold in bottles, how many are sold at the location 38.559615, -121.42243?", "sql": "SELECT COUNT(T4.BrandID) FROM \"transaction\" AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID INNER JOIN rootbeer AS T4 ON T1.RootBeerID = T4.RootBeerID WHERE T2.Latitude = 38.559615 AND T2.Longitude = -121.42243 AND T4.ContainerType = 'Bottle'", "source_tables": ["geolocation", "transaction", "rootbeer", "location"]}, "evidence": "in bottles refers to ContainerType = 'Bottle';\u00a0 location 38.559615, -121.42243 refers to latitude = 38.559615 AND longitude = -121.42243;"}
{"sample_id": 5276, "db_id": "beer_factory", "final": {"question": "How many root beers did Tom Hanks purchase between 2015 to 2016?", "sql": "SELECT COUNT(T2.RootBeerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Tom' AND T1.Last = 'Hanks' AND T2.TransactionDate BETWEEN '2015-01-01' AND '2016-12-31'", "source_tables": ["customers", "transaction"]}, "evidence": "between 2015 to 2016 refers to TransactionDate > = '2015-01-01' AND TransactionDate < '2016-12-31';"}
{"sample_id": 5353, "db_id": "beer_factory", "final": {"question": "How many stars did Urijah Faber rate for Frostie?", "sql": "SELECT T2.StarRating FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Urijah' AND T1.Last = 'Faber' AND T3.BrandName = 'Frostie'", "source_tables": ["rootbeerbrand", "rootbeerreview", "customers"]}, "evidence": "stars refers to StarRating; Frostie refers to BrandName = 'Frostie';"}
{"sample_id": 5268, "db_id": "beer_factory", "final": {"question": "What are the full names of the first top 10 customers?", "sql": "SELECT First, Last FROM customers ORDER BY FirstPurchaseDate LIMIT 10", "source_tables": ["customers"]}, "evidence": "full name = First Last; first top 10 customers refers to MIN(FirstPurchaseDate) LIMIT 10;"}
{"sample_id": 5239, "db_id": "beer_factory", "final": {"question": "Among the transactions made in July, 2014, how many of them were made by a male customer?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Gender = 'M' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'", "source_tables": ["customers", "transaction"]}, "evidence": "in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07'; male customer refers to Gender = 'M';"}
{"sample_id": 5309, "db_id": "beer_factory", "final": {"question": "What brands of beer has Peg Winchester consumed?", "sql": "SELECT T3.BrandName FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T1.First = 'Peg' AND T1.Last = 'Winchester'", "source_tables": ["rootbeerbrand", "rootbeerreview", "customers"]}, "evidence": "brands of beer refers to BrandName;"}
{"sample_id": 5357, "db_id": "beer_factory", "final": {"question": "What is the precise location of the place where Tommy Kono made a purchase in 2014?", "sql": "SELECT DISTINCT T1.Latitude, T1.Longitude FROM geolocation AS T1 INNER JOIN \"transaction\" AS T2 ON T2.LocationID = T1.LocationID INNER JOIN customers AS T3 ON T3.CustomerID = T2.CustomerID WHERE T3.First = 'Tommy' AND T3.Last = 'Kono' AND T2.TransactionDate LIKE '2014%'", "source_tables": ["geolocation", "customers", "transaction"]}, "evidence": "precise location = Latitude, Longitude; in 2014 refers to TransactionDate LIKE '2014%';"}
{"sample_id": 5339, "db_id": "beer_factory", "final": {"question": "How many bottles of beer have been bought by Jim Breech?", "sql": "SELECT COUNT(T3.ContainerType) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T2.CustomerID = T1.CustomerID INNER JOIN rootbeer AS T3 ON T3.RootBeerID = T2.RootBeerID WHERE T3.ContainerType = 'Bottle' AND T1.First = 'Jim' AND T1.Last = 'Breech'", "source_tables": ["rootbeer", "customers", "transaction"]}, "evidence": "bottles refers to ContainerType = 'Bottle';"}
{"sample_id": 5305, "db_id": "beer_factory", "final": {"question": "In the reviews of September 2014. Which brand of beers obtained the highest star ratings?", "sql": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2014-09-01' AND '2014-09-30'", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "September 2014 refers to ReviewDate LIKE '2014-09%'; brand of beers refers to BrandName; highest star ratings refers to MAX(StarRating);"}
{"sample_id": 5344, "db_id": "beer_factory", "final": {"question": "List out the name of the top 10 spenders and what credit card type are they using.", "sql": "SELECT T1.First, T1.Last, T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T2.PurchasePrice) DESC LIMIT 10", "source_tables": ["customers", "transaction"]}, "evidence": "top 10 spenders refers to MAX(PurchasePrice) LIMIT 10;"}
{"sample_id": 5318, "db_id": "beer_factory", "final": {"question": "What percentage of customers who paid with a Discover Credit Card gave a 3-star rating?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.StarRating = 3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM rootbeerreview AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardType = 'Discover'", "source_tables": ["rootbeerreview", "transaction"]}, "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(CustomerID WHERE StarRating = 3), COUNT(CustomerID) WHERE CreditCardType = 'Discover'), 100); Discover Credit Card refers to CreditCardType = 'Discover'; 3-star rating refers to StarRating = 3;"}
{"sample_id": 5249, "db_id": "beer_factory", "final": {"question": "Please list the dates on which a male customer has purchased more than 3 root beers.", "sql": "SELECT T2.TransactionDate FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Gender = 'M' GROUP BY T2.TransactionDate HAVING COUNT(T2.CustomerID) > 3", "source_tables": ["customers", "transaction"]}, "evidence": "dates of purchase refers to TransactionDate; male customer refers to Gender = 'M'; purchased more than 3 root beers refers to COUNT(CustomerID) > 3;"}
{"sample_id": 5308, "db_id": "beer_factory", "final": {"question": "From which cities are the customers who gave 5 stars in their reviews in November 2012?", "sql": "SELECT DISTINCT T1.City FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2012-11-01' AND '2012-11-30'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "5 stars refers to StarRating = 5; in November 2012 refers to ReviewDate LIKE '2012-11%';"}
{"sample_id": 5310, "db_id": "beer_factory", "final": {"question": "What brand of beer has been the worst rated most times?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T2.BrandID = T1.BrandID WHERE T2.StarRating = 1 GROUP BY T1.BrandName ORDER BY COUNT(T1.BrandName) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "brand of beer refers to BrandName; worst rated most times refers to MAX(COUNT(StarRating = 1));"}
{"sample_id": 5254, "db_id": "beer_factory", "final": {"question": "State the coordinate of Sac State American River Courtyard.", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State American River Courtyard'", "source_tables": ["geolocation", "location"]}, "evidence": "coordinate = Latitude, Longitude; Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"}
{"sample_id": 5237, "db_id": "beer_factory", "final": {"question": "In which city is the brewery AJ Stephans Beverages located?", "sql": "SELECT City FROM rootbeerbrand WHERE BreweryName = 'AJ Stephans Beverages'", "source_tables": ["rootbeerbrand"]}, "evidence": "AJ Stephans refers to BreweryName = 'AJ Stephans Beverages';"}
{"sample_id": 5333, "db_id": "beer_factory", "final": {"question": "List down the brand names of root beer that gained a 5-star rating from a customer's review in 2013. Calculate the unit profit available to wholesalers for each brand.", "sql": "SELECT T1.BrandName, T1.CurrentRetailPrice - T1.WholesaleCost AS result FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 AND T2.ReviewDate BETWEEN '2013-01-01' AND '2013-12-31'", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "5-star rating refers to StarRating = 5; in 2013 refers to ReviewDate LIKE '2013%'; unit profit available to wholesalers = SUBTRACT(CurrentRetailPrice, WholesaleCost);"}
{"sample_id": 5356, "db_id": "beer_factory", "final": {"question": "Which brand in 2012 has the lowest star rating and contains cane sugar as well as honey?", "sql": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CaneSugar = 'TRUE' AND T1.Honey = 'TRUE' AND T2.StarRating = 1 AND T2.ReviewDate LIKE '2012%'", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "brand refers to BrandName; in 2012 refers to ReviewDate LIKE '2012%'; lowest star rating refers to MIN(StarRating); contains cane sugar as well as honey refers to CaneSugar = 'TRUE' AND Honey = 'TRUE';"}
{"sample_id": 5282, "db_id": "beer_factory", "final": {"question": "What is the precise location of Sac State Union?", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'", "source_tables": ["geolocation", "location"]}, "evidence": "precise location = Latitude, Longitude; Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5327, "db_id": "beer_factory", "final": {"question": "What is the average star rating given by female customers to brand ID 10018 from 1/25/2015 to 3/10/2015?", "sql": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.BrandID = 10018 AND T1.Gender = 'F' AND T2.ReviewDate BETWEEN '2013-01-25' AND '2015-03-10'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "average star rating = AVG(StarRating); female customers refers to Gender = 'F; from 1/25/2015 to 3/10/2015 refers to ReviewDate BETWEEN '2015-01-25' AND '2015-03-10';"}
{"sample_id": 5315, "db_id": "beer_factory", "final": {"question": "What is the precise location of zip code 95819?", "sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ZipCode = 95819", "source_tables": ["geolocation", "location"]}, "evidence": "precise location = Latitude, Longitude;"}
{"sample_id": 5277, "db_id": "beer_factory", "final": {"question": "Which brand of root beer was highly rated by customers?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "brand of root beer refers to BrandName; highly rated refers to MAX(COUNT(StarRating = 5));"}
{"sample_id": 5326, "db_id": "beer_factory", "final": {"question": "How many times did Anna Himes use her Mastercard when paying between 12/25/2014 and 5/20/2016 ?", "sql": "SELECT COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Anna' AND T1.Last = 'Himes' AND T2.CreditCardType = 'MasterCard' AND T2.TransactionDate BETWEEN '2014-12-25' AND '2016-05-20'", "source_tables": ["customers", "transaction"]}, "evidence": "Mastercard refers to CreditCardType = 'MasterCard'; between 12/25/2014 and 5/20/2016 refers to TransactionDate BETWEEN '2014-12-25' AND '2016-05-20';"}
{"sample_id": 5354, "db_id": "beer_factory", "final": {"question": "Which brand has the lowest star rating with a \"Too spicy!\" review?", "sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T2.BrandID = T1.BrandID WHERE T2.StarRating = 1 AND T2.Review = 'Too Spicy!'", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "lowest star rating refers to MIN(StarRating); \"Too spicy!\" review refers to Review = 'Too Spicy!';"}
{"sample_id": 5264, "db_id": "beer_factory", "final": {"question": "What is the percentage of 5 star ratings River City brand root beer get?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.StarRating = 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.StarRating) FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BrandName = 'River City'", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(BrandID WHERE StarRating = 5), COUNT(BrandID) WHERE BrandName = 'River City'), 1.0); 5 star ratings refers to StarRating = 5; River City refers to BrandName = 'River City';"}
{"sample_id": 5288, "db_id": "beer_factory", "final": {"question": "Give the name of the brands that brewed their first drink between 1996 and 2000 in the descending order of the date brewed.", "sql": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear BETWEEN '1996' AND '2000' ORDER BY FirstBrewedYear DESC", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the brands refers to BrandName; between 1996 and 2000 refers to FirstBrewedYear > = 1996 AND FirstBrewedYear < = 2000;"}
{"sample_id": 5253, "db_id": "beer_factory", "final": {"question": "Show the credit card number of Lisa Ling.", "sql": "SELECT DISTINCT T2.CreditCardNumber FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Lisa' AND T1.Last = 'Ling'", "source_tables": ["customers", "transaction"]}, "evidence": "FALSE;"}
{"sample_id": 5359, "db_id": "beer_factory", "final": {"question": "How many transactions were made to purchase a bottle of beer using American Express?", "sql": "SELECT COUNT(T1.RootBeerID) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID WHERE T1.ContainerType = 'Bottle' AND T2.CreditCardType = 'American Express'", "source_tables": ["rootbeer", "transaction"]}, "evidence": "bottle of beer refers to ContainerType = 'Bottle'; American Express refers to CreditCardType = 'American Express';"}
{"sample_id": 5280, "db_id": "beer_factory", "final": {"question": "Between Sac State Union and Sac State American River Courtyard, which location sold the most Dog n Suds root beer?", "sql": "SELECT T3.LocationName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Dog n Suds' AND T3.LocationName IN ('Sac State American River Courtyard', 'Sac State Union') GROUP BY T1.LocationID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer", "location"]}, "evidence": "Between Sac State Union and Sac State American River Courtyard refers to LocationName IN('Sac State American River Courtyard', 'Sac State Union'); Dog n Suds refers to BrandName = 'Dog n Suds'; sold the most root beer refers to MAX(COUNT(BrandID));"}
{"sample_id": 5316, "db_id": "beer_factory", "final": {"question": "What brands of beers are manufactured at coordinates 38,566,129, -121,426,432?", "sql": "SELECT DISTINCT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T3.Latitude = '38.566129' AND T3.Longitude = '-121.426432'", "source_tables": ["rootbeerbrand", "rootbeer", "geolocation"]}, "evidence": "coordinates 38,566,129, -121,426,432 refers to Latitude = 38.566129 AND Longitude = -121.426432;"}
{"sample_id": 5292, "db_id": "beer_factory", "final": {"question": "Calculate the percentage of sales done at Sac State American River Courtyard.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.LocationName = 'Sac State American River Courtyard' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.TransactionID) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID", "source_tables": ["location", "transaction"]}, "evidence": "percentage = \u00a0 MULTIPLY(DIVIDE(SUM(LocationName = 'Sac State American River Courtyard'), COUNT(LocationID)), 1.0); Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard';"}
{"sample_id": 5252, "db_id": "beer_factory", "final": {"question": "Tell the number of reviews given by James House.", "sql": "SELECT COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'James' AND T1.Last = 'House'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "FALSE;"}
{"sample_id": 5234, "db_id": "beer_factory", "final": {"question": "Please list the names of all the root beer brands that are advertised on facebook.", "sql": "SELECT BrandName FROM rootbeerbrand WHERE FacebookPage IS NOT NULL", "source_tables": ["rootbeerbrand"]}, "evidence": "name of the root beer brand refers to BrandName; advertised on facebook refers to FacebookPage IS not NULL;"}
{"sample_id": 5261, "db_id": "beer_factory", "final": {"question": "For the root beer brand with the most 5 star ratings, what is the name of the brewery?", "sql": "SELECT T1.BreweryName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 GROUP BY T1.BrandID ORDER BY COUNT(T2.StarRating) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "most 5 star ratings refers to MAX(COUNT(StarRating = 5)); name of the brewery refers to BreweryName;"}
{"sample_id": 5233, "db_id": "beer_factory", "final": {"question": "How many breweries are located in North America?", "sql": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE Country = 'United States'", "source_tables": ["rootbeerbrand"]}, "evidence": "North America refers to country = 'United States'; North America is the name of continent where country = 'United States' is located;"}
{"sample_id": 5322, "db_id": "beer_factory", "final": {"question": "Tally the email addresses and phone numbers of customers from Sacramento who gave a star rating of more than 3 in 2014.", "sql": "SELECT DISTINCT T1.Email, T1.PhoneNumber FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating > 3 AND T1.City = 'Sacramento' AND T2.ReviewDate BETWEEN '2014-01-01' AND '2014-12-31'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "email addresses refers to Email; Sacramento refers to City = 'Sacramento'; star rating of more than 3 refers to StarRating > 3; in 2014 refers to ReviewDate LIKE '2014%';"}
{"sample_id": 5285, "db_id": "beer_factory", "final": {"question": "Which brand of root beer has the lowest unit profit available to wholesalers? Indicate the ID of the customer that has the highest number of purchases of the said brand.", "sql": "SELECT T3.BrandName, T2.CustomerID FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID GROUP BY T3.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost, COUNT(T1.BrandID) DESC LIMIT 1", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "brand of root beer refers to BrandName; lowest unit profit available to wholesalers refers to MIN(SUBTRACT(CurrentRetailPrice, WholesaleCost)); ID of the customer refers to CustomerID; highest number of purchases refers to MAX(COUNT(CustomerID));"}
{"sample_id": 5343, "db_id": "beer_factory", "final": {"question": "What is the transaction ratio being made at Sac State American River Courtyard and Sac State Union?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.LocationName = 'Sac State American River Courtyard' THEN T1.TransactionID ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN T2.LocationName = 'Sac State Union' THEN T1.TransactionID ELSE NULL END) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID", "source_tables": ["location", "transaction"]}, "evidence": "transaction ratio = DIVIDE(SUM(TransactionID WHERE LocationName = 'Sac State American River Courtyard'), SUM(TransactionID WHERE LocationName = 'Sac State Union')); Sac State American River Courtyard refers to LocationName = 'Sac State American River Courtyard'; Sac State Union refers to LocationName = 'Sac State Union';"}
{"sample_id": 5297, "db_id": "beer_factory", "final": {"question": "Among the customers not subscribed to the mailing list, what percentage has given three or more stars in a review?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.StarRating > 3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.CustomerID) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'FALSE'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "not subscribed to the mailing list refers to SubscribedToEmailList = 'FALSE'; percentage = MULTIPLY(DIVIDE(SUM(CustomerID WHERE StarRating > 3), COUNT(CustomerID) WHERE SubscribedToEmailList = 'FALSE'), 1.0);"}
{"sample_id": 5286, "db_id": "beer_factory", "final": {"question": "List the full name and phone number of male customers from Fair Oaks who are subscribed to the email list.", "sql": "SELECT First, Last, PhoneNumber FROM customers WHERE Gender = 'M' AND City = 'Fair Oaks' AND SubscribedToEmailList = 'TRUE'", "source_tables": ["customers"]}, "evidence": "full name = First, Last; male customers refers to Gender = 'M'; Fair Oaks refers to City = 'Fair Oaks'; subscribed to the email list refers to SubscribedToEmailList = 'TRUE';"}
{"sample_id": 5340, "db_id": "beer_factory", "final": {"question": "How many transactions have been made to purchase a root beer brand from California?", "sql": "SELECT COUNT(T3.RootBeerID) FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID INNER JOIN \"transaction\" AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.State = 'CA'", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "California refers to State = 'CA';"}
{"sample_id": 5332, "db_id": "beer_factory", "final": {"question": "What did the customer say in his or her review of Bulldog root beer on 7/26/2013?", "sql": "SELECT T2.Review FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BrandName = 'Bulldog' AND T2.ReviewDate = '2013-07-26'", "source_tables": ["rootbeerbrand", "rootbeerreview"]}, "evidence": "Bulldog refers to BrandName = 'Bulldog'; on 7/26/2013 refers to ReviewDate = '2013-07-26';"}
{"sample_id": 5243, "db_id": "beer_factory", "final": {"question": "Of the 4 root beers that Frank-Paul Santangelo purchased on 2014/7/7, how many of them were in cans?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07' AND T3.ContainerType = 'Can'", "source_tables": ["rootbeer", "customers", "transaction"]}, "evidence": "on 2014/7/7 refers to transactiondate = '2014-07-07'; in cans refers to containertype = 'Can';"}
{"sample_id": 5281, "db_id": "beer_factory", "final": {"question": "How many canned A&W were purchased in 2016?", "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.ContainerType = 'Can' AND T2.BrandName = 'A&W' AND T1.PurchaseDate LIKE '2016%'", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "canned refers to ContainerType = 'Can'; A&W refers to BrandName = 'A&W'; in 2016 refers to PurchaseDate > = '2016-01-01' AND PurchaseDate < = '2016-12-31';"}
{"sample_id": 5321, "db_id": "beer_factory", "final": {"question": "What is the full name of the customer who gave a 5-star rating and commented \"The quintessential dessert root beer. No ice cream required\" on his review?", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5 AND T2.Review = 'The quintessential dessert root beer. No ice cream required.'", "source_tables": ["rootbeerreview", "customers"]}, "evidence": "full name = First, Last; 5-star rating refers to StarRating = 5; commented \"The quintessential dessert root beer. No ice cream required\" refers to Review = 'The quintessential dessert root beer. No ice cream required.';"}
{"sample_id": 5278, "db_id": "beer_factory", "final": {"question": "How many Henry Weinhard's were bought by Nicholas Sparks?", "sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Nicholas' AND T1.Last = 'Sparks' AND T4.BrandName LIKE 'Henry Weinhard%s'", "source_tables": ["rootbeerbrand", "rootbeer", "customers", "transaction"]}, "evidence": "Henry Weinhard's refers to BrandName = 'Henry Weinhard''s';"}
{"sample_id": 5317, "db_id": "beer_factory", "final": {"question": "What is the average unit profit for wholesalers of canned beers?", "sql": "SELECT AVG(T2.CurrentRetailPrice - T2.WholesaleCost) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.ContainerType = 'Can'", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "average unit profit = DIVIDE(SUM(SUBTRACT(CurrentRetailPrice, WholesaleCost)), COUNT(ContainerType = 'Can')); canned beers refers to ContainerType = 'Can';"}
{"sample_id": 5275, "db_id": "beer_factory", "final": {"question": "What are the full names of the customer who gave River City a 5-star?", "sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID WHERE T3.BrandName = 'River City' AND T2.StarRating = 5", "source_tables": ["rootbeerbrand", "rootbeerreview", "customers"]}, "evidence": "full name = First, Last; River City refers to BrandName = 'River City'; 5-star refers to StarRating = 5;"}
{"sample_id": 5284, "db_id": "beer_factory", "final": {"question": "List the brands of root beer produced by Dr Pepper Snapple Group and calculate their percentage of purchases between 2014 to 2016.", "sql": "SELECT T1.BrandName , CAST(SUM(CASE WHEN T2.PurchaseDate >= '2014-01-01' AND T2.PurchaseDate <= '2016-12-31' THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.BrandID) AS purchase FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BreweryName = 'Dr Pepper Snapple Group' GROUP BY T2.BrandID", "source_tables": ["rootbeerbrand", "rootbeer"]}, "evidence": "brand of root beer refers to BrandName; produced by Dr Pepper Snapple Group refers to BreweryName = 'Dr Pepper Snapple Group'; percentage of purchases = MULTIPLY(DIVIDE(SUM(BrandID WHERE PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2016-12-31'), COUNT(BrandID) WHERE BreweryName = 'Dr Pepper Snapple Group'), 1.0); between 2014 to 2016 refers to PurchaseDate > = '2014-01-01' AND PurchaseDate < = '2016-12-31;"}
{"sample_id": 5266, "db_id": "beer_factory", "final": {"question": "How many female customers permit the company to send regular emails to them?", "sql": "SELECT COUNT(CustomerID) FROM customers WHERE Gender = 'F' AND SubscribedToEmailList = 'TRUE'", "source_tables": ["customers"]}, "evidence": "female refers to Gender = 'F'; customer permits the company to send regular emails to them refers to SubscribedToEmailList = 'TRUE';"}
{"sample_id": 5246, "db_id": "beer_factory", "final": {"question": "Among the root beer brands that do not advertise on Twitter, how many of them have root beers sold in August, 2014?", "sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.Twitter IS NULL", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "do not advertise on Twitter refers to twitter IS NULL; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';"}
{"sample_id": 5348, "db_id": "beer_factory", "final": {"question": "What is the percentage difference of River City sale compare to Frostie?", "sql": "SELECT CAST((SUM(CASE WHEN T3.BrandName = 'River City' THEN T2.PurchasePrice ELSE 0 END) - SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID", "source_tables": ["rootbeerbrand", "rootbeer", "transaction"]}, "evidence": "percentage difference = (DIVIDE(MULTIPLY(SUBTRACT(SUM(PurchasePrice WHERE BrandName = 'River City'), SUM(PurchasePrice WHERE BrandName = 'Frostie')), 100), SUM(PurchasePrice WHERE BrandName = 'Frostie'))); River City refers to BrandName = 'River City'; Frostie refers to BrandName = 'Frostie';"}
{"sample_id": 5349, "db_id": "beer_factory", "final": {"question": "Please name all of the cities in California.", "sql": "SELECT DISTINCT City FROM customers WHERE State = 'CA'", "source_tables": ["customers"]}, "evidence": "California refers to State = 'CA';"}
{"sample_id": 5422, "db_id": "sales", "final": {"question": "Please provide sales ID for products named Hex Nut with a price greater than 100.", "sql": "SELECT T2.SalesID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Hex Nut%' AND T1.Price > 100", "source_tables": ["products", "sales"]}, "evidence": "price greater than 100 refers to price > 100;"}
{"sample_id": 5398, "db_id": "sales", "final": {"question": "What is the difference in price between HL Mountain Frame - Black, 42 and LL Mountain Frame - Black, 42?", "sql": "SELECT ( SELECT Price FROM Products WHERE Name = 'HL Mountain Frame - Black, 42' ) - ( SELECT Price FROM Products WHERE Name = 'LL Mountain Frame - Black, 42' ) AS num", "source_tables": ["products"]}, "evidence": "difference = SUBTRACT((Price WHERE Name = 'HL Mountain Frame - Black, 42'), (Price WHERE Name = 'HL Mountain Frame - Black, 42'));"}
{"sample_id": 5386, "db_id": "sales", "final": {"question": "Has Alex purchased product with id 498?", "sql": "SELECT IIF(T1.ProductID = 498, 'YES', 'NO') FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Alex'", "source_tables": ["customers", "sales"]}, "evidence": "WHEN ProductID = 498 AND FirstName = 'Alex' means that Alex purchased a product; WHEN ProductID = 498 AND FirstName NOT 'Alex' means Alex has not purchased a product;"}
{"sample_id": 5371, "db_id": "sales", "final": {"question": "How many customer ids have purchased Hex Nut 9?", "sql": "SELECT COUNT(T1.CustomerID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 9'", "source_tables": ["products", "sales"]}, "evidence": "Hex Nut 9' is name of product;"}
{"sample_id": 5391, "db_id": "sales", "final": {"question": "List the product ID of the top five products, by descending order, in terms of price.", "sql": "SELECT ProductID FROM Products ORDER BY Price DESC LIMIT 5", "source_tables": ["products"]}, "evidence": "top 5 products in terms of Price refers to MAX(Price) LIMIT 5;"}
{"sample_id": 5372, "db_id": "sales", "final": {"question": "Calculate the total sales ids that were sales of Flat Washer 8.", "sql": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Flat Washer 8'", "source_tables": ["products", "sales"]}, "evidence": "Flat Washer 8' is name of product;"}
{"sample_id": 5412, "db_id": "sales", "final": {"question": "How many customers have the first name Abigail?", "sql": "SELECT COUNT(CustomerID) FROM Customers WHERE FirstName = 'Abigail'", "source_tables": ["customers"]}, "evidence": ""}
{"sample_id": 5448, "db_id": "sales", "final": {"question": "What is the name of the sales person who handled the highest number of sales?", "sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T2.SalesPersonID = T1.EmployeeID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 1", "source_tables": ["employees", "sales"]}, "evidence": "name of the sales person = FirstName, MiddleInitial, LastName; highest number of sales refers to MAX(COUNT(SalesID));"}
{"sample_id": 5430, "db_id": "sales", "final": {"question": "Give the product ID and name of the product with the highest prices among the quantity ranges from 400 to 500.", "sql": "SELECT T1.ProductID, T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity BETWEEN 400 AND 500 ORDER BY T1.Price DESC LIMIT 1", "source_tables": ["products", "sales"]}, "evidence": "highest prices refers to MAX(Price); quantity ranges from 400 to 500 refers to Quantity BETWEEN 400 AND 500;"}
{"sample_id": 5403, "db_id": "sales", "final": {"question": "How many sales people managed to sell Headlights - Weatherproof?", "sql": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Headlights - Weatherproof'", "source_tables": ["products", "sales"]}, "evidence": "Headlights - Weatherproof' is name of product"}
{"sample_id": 5413, "db_id": "sales", "final": {"question": "Indicate the quantity of Blade products sold.", "sql": "SELECT DISTINCT T2.Quantity FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Blade'", "source_tables": ["products", "sales"]}, "evidence": "Blade' is name of product;"}
{"sample_id": 5442, "db_id": "sales", "final": {"question": "Among the sales ID ranges from 1 to 200, what is the percentage of the products with a price ranging from 200 to 300?", "sql": "SELECT CAST(SUM(IIF(T2.Price BETWEEN 200 AND 300, 1, 0)) AS REAL) * 100 / COUNT(T2.Price) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.SalesID BETWEEN 1 AND 200", "source_tables": ["products", "sales"]}, "evidence": "sales ID ranges from 1 to 200 refers to SalesID between 1 and 200; percentage = MULTIPLY(DIVIDE(SUM(Price between 200 and 300), COUNT(Price)), 1.0);"}
{"sample_id": 5458, "db_id": "sales", "final": {"question": "How many employees sold over 20,000 quantities of \"Touring-2000 Blue, 50\"?", "sql": "SELECT COUNT(*) FROM ( SELECT SUM(Quantity) FROM Sales WHERE ProductID IN ( SELECT ProductID FROM Products WHERE Name = 'Touring-2000 Blue, 50' ) GROUP BY Quantity, SalesPersonID HAVING SUM(Quantity) > 20000 )", "source_tables": ["products", "sales"]}, "evidence": "over 20,000 quantities refers to Quantity > 20000; 'Touring-2000 Blue, 50' is name of product;"}
{"sample_id": 5364, "db_id": "sales", "final": {"question": "Count the total quantity for sales from id 1 to 10.", "sql": "SELECT SUM(Quantity) FROM Sales WHERE SalesID BETWEEN 1 AND 10", "source_tables": ["sales"]}, "evidence": "sales from id 1 to 10 refers to SalesID BETWEEN 1 AND 10;"}
{"sample_id": 5392, "db_id": "sales", "final": {"question": "Among the products, how many of them are freebies?", "sql": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0", "source_tables": ["products"]}, "evidence": "freebies refers to Price = 0;"}
{"sample_id": 5466, "db_id": "sales", "final": {"question": "Of the employees who sold Blade, who has the most amount of sales?", "sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID ORDER BY T2.Quantity * T3.Price DESC LIMIT 1", "source_tables": ["products", "employees", "sales"]}, "evidence": "Blade' is name of product; most amount of sales refers to MAX(MULTIPLY(Quantity, Price));"}
{"sample_id": 5406, "db_id": "sales", "final": {"question": "Name the customers who received 'Touring Rim' as a free gift.", "sql": "SELECT DISTINCT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T3.Name = 'Touring Rim' AND T3.Price = 0", "source_tables": ["customers", "products", "sales"]}, "evidence": "name of the customer = FirstName, MiddleInitial, LastName; 'Touring Rim' is name of product;"}
{"sample_id": 5445, "db_id": "sales", "final": {"question": "How many types of \"HL Touring Frames\" are there?", "sql": "SELECT COUNT(ProductID) FROM Products WHERE Name LIKE '%HL Touring Frame%'", "source_tables": ["products"]}, "evidence": "types of HL Touring Frames refers to Name like '%HL Touring Frame%';"}
{"sample_id": 5390, "db_id": "sales", "final": {"question": "Calculate the total quantity of products purchased by customer called Adrian.", "sql": "SELECT SUM(T2.Quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Adam'", "source_tables": ["customers", "sales"]}, "evidence": ""}
{"sample_id": 5378, "db_id": "sales", "final": {"question": "What is the last name of sales person for sales id 100?", "sql": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.SalesID = 100", "source_tables": ["employees", "sales"]}, "evidence": ""}
{"sample_id": 5410, "db_id": "sales", "final": {"question": "Name the most expensive and the least expensive products available, excluding free gifts.", "sql": "SELECT Name FROM Products WHERE Price IN (( SELECT MAX(Price) FROM Products ), ( SELECT MIN(Price) FROM Products ))", "source_tables": ["products"]}, "evidence": "most expensive product refers to MAX(Price); least expensive product refers to MIN(Price); excluding free gifts refers to not including Price = 0;"}
{"sample_id": 5401, "db_id": "sales", "final": {"question": "Among all customers handled by Innes E. del Castillo, how many have purchased Short-Sleeve Classic Jersey, L?", "sql": "SELECT COUNT(T2.CustomerID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T3.FirstName = 'Innes' AND T3.LastName = 'del Castillo' AND T1.Name = 'Short-Sleeve Classic Jersey, L' AND T3.MiddleInitial = 'e'", "source_tables": ["products", "employees", "sales"]}, "evidence": "Short-Sleeve Classic Jersey, L' is name of product;"}
{"sample_id": 5405, "db_id": "sales", "final": {"question": "How many sales transactions were given by the customer named Joe L. Lopez?", "sql": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Joe' AND T2.MiddleInitial = 'L' AND T2.LastName = 'Lopez'", "source_tables": ["customers", "sales"]}, "evidence": "sales transactions refers to SalesID;"}
{"sample_id": 5394, "db_id": "sales", "final": {"question": "What is the full name of employee who sold 1000 units?", "sql": "SELECT DISTINCT T2.FirstName, T2.MiddleInitial, T2.LastName FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID WHERE T1.Quantity = 1000", "source_tables": ["employees", "sales"]}, "evidence": "full name of employee = FirstName, MiddleInitial, LastName; units refers to quantity; Quantity = 100"}
{"sample_id": 5421, "db_id": "sales", "final": {"question": "Among the customers whose first name is Cameron, who bought the product in the most quantity?", "sql": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.FirstName = 'Cameron' ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["customers", "sales"]}, "evidence": "most quantity refers to MAX(Quantity); who refers to FirstName, LastName;"}
{"sample_id": 5431, "db_id": "sales", "final": {"question": "Among customers named Kate, who has the highest quantity?", "sql": "SELECT T2.FirstName, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Kate' ORDER BY T1.Quantity DESC LIMIT 1", "source_tables": ["customers", "sales"]}, "evidence": "highest quantity refers to MAX(Quantity);"}
{"sample_id": 5365, "db_id": "sales", "final": {"question": "Calculate the average quantity per sales from sales id 20 to 30.", "sql": "SELECT AVG(Quantity) FROM Sales WHERE SalesID BETWEEN 20 AND 30", "source_tables": ["sales"]}, "evidence": "average quantity = AVG(Quantity); SalesID BETWEEN 20 AND 30;"}
{"sample_id": 5374, "db_id": "sales", "final": {"question": "List down the first name of customers who placed order for product id 1.", "sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T2.ProductID = 1", "source_tables": ["customers", "products", "sales"]}, "evidence": ""}
{"sample_id": 5395, "db_id": "sales", "final": {"question": "Tally the product name and quantity of the first ten sales.", "sql": "SELECT T3.Name, T2.Quantity FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T2.SalesID BETWEEN 1 AND 10", "source_tables": ["customers", "products", "sales"]}, "evidence": "first ten sales refers to SalesID BETWEEN 1 AND 10;"}
{"sample_id": 5373, "db_id": "sales", "final": {"question": "List down all of the product names that were placed by sales person with id 10.", "sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 10", "source_tables": ["products", "sales"]}, "evidence": "id refers to SalesPersonID; SalesPersonID = 10"}
{"sample_id": 5460, "db_id": "sales", "final": {"question": "Which product has the highest total amount of quantity sold? Calculate its overall total price.", "sql": "SELECT T1.Name, SUM(T2.Quantity * T1.Price) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID, T1.Name ORDER BY SUM(T2.Quantity) DESC LIMIT 1", "source_tables": ["products", "sales"]}, "evidence": "highest total amount of quantity refers to MAX(Quantity); overall total price = SUM(MULTIPLY(Quantity, Price));"}
{"sample_id": 5381, "db_id": "sales", "final": {"question": "What is the full name of customers who dealt with sales person with id 5?", "sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 5", "source_tables": ["customers", "sales"]}, "evidence": "full name = FirstName, MiddleInitial, LastName;"}
{"sample_id": 5437, "db_id": "sales", "final": {"question": "What is the price and quantity of the product named Seat Tube?", "sql": "SELECT DISTINCT T2.Price, T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Seat Tube'", "source_tables": ["products", "sales"]}, "evidence": ""}
{"sample_id": 5369, "db_id": "sales", "final": {"question": "List down the product name for products from id 1 to 10.", "sql": "SELECT Name FROM Products WHERE ProductID BETWEEN 1 AND 10", "source_tables": ["products"]}, "evidence": "products from id 1 to 10 refers to ProductID BETWEEN 1 AND 10;"}
{"sample_id": 5459, "db_id": "sales", "final": {"question": "What is the total cost of all the \"Road-650, Red, 60\" products that Abraham E. Bennet sold?", "sql": "SELECT SUM(T2.Quantity * T3.Price) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Abraham' AND T1.MiddleInitial = 'e' AND T1.LastName = 'Bennet' AND T3.Name = 'Road-650 Red, 60'", "source_tables": ["products", "employees", "sales"]}, "evidence": "total cost = SUM(MULTIPLY(Quantity, Price)); 'Road-650, Red, 60' is name of product;"}
{"sample_id": 5399, "db_id": "sales", "final": {"question": "Calculate the total number of sales closed by Michel E. DeFrance?", "sql": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID WHERE T2.FirstName = 'Michel' AND T2.MiddleInitial = 'e' AND T2.LastName = 'DeFrance'", "source_tables": ["employees", "sales"]}, "evidence": ""}
{"sample_id": 5446, "db_id": "sales", "final": {"question": "How many customers share the most common last name?", "sql": "SELECT COUNT(CustomerID) FROM Customers GROUP BY LastName ORDER BY COUNT(LastName) DESC LIMIT 1", "source_tables": ["customers"]}, "evidence": "most common last name refers to MAX(COUNT(LastName));"}
{"sample_id": 5432, "db_id": "sales", "final": {"question": "Among the products that have price ranges from 100 to 150, what is the customer ID and sales ID of the product with a quantity lower than 25?", "sql": "SELECT T2.CustomerID, T2.SalesID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 100 AND 150 AND T2.Quantity < 25", "source_tables": ["products", "sales"]}, "evidence": "price ranges from 100 to 150 refers to Price BETWEEN 100 AND 150; quantity lower than 25 refers to Quantity < 25;"}
{"sample_id": 5366, "db_id": "sales", "final": {"question": "List down the product id for products with the highest quantity.", "sql": "SELECT DISTINCT ProductID FROM Sales WHERE Quantity = ( SELECT MAX(Quantity) FROM Sales )", "source_tables": ["sales"]}, "evidence": "highest quantity refers to MAX(Quantity);"}
{"sample_id": 5380, "db_id": "sales", "final": {"question": "How many free gifts have customer with id 11782 received?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.CustomerID = 11782 AND T1.Price = 0", "source_tables": ["products", "sales"]}, "evidence": "free gifts refers to Price = 0;"}
{"sample_id": 5443, "db_id": "sales", "final": {"question": "What is the name of the most expensive product?", "sql": "SELECT Name FROM Products WHERE Price = ( SELECT MAX(Price) FROM Products )", "source_tables": ["products"]}, "evidence": "most expensive product refers to MAX(Price);"}
{"sample_id": 5450, "db_id": "sales", "final": {"question": "How many \"Mountain-500 Black 42\" were sold in total?", "sql": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Mountain-500 Black, 42'", "source_tables": ["products", "sales"]}, "evidence": "Mountain-500 Black 42' is name of product; sold in total = SUM(Quantity);"}
{"sample_id": 5382, "db_id": "sales", "final": {"question": "List down all of the sales IDs for sales handled by sales people with first name starting with alphabet \"s\".", "sql": "SELECT T1.SalesID FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID WHERE SUBSTR(T2.FirstName, 1, 1) = 's'", "source_tables": ["employees", "sales"]}, "evidence": "first name starting with alphabet \"s\" refers to FirstName LIKE 's%';"}
{"sample_id": 5408, "db_id": "sales", "final": {"question": "How many sales people are handling all the customers?", "sql": "SELECT COUNT(EmployeeID) FROM Employees", "source_tables": ["employees"]}, "evidence": ""}
{"sample_id": 5463, "db_id": "sales", "final": {"question": "What is the average price of products that cost between 100 and 200?", "sql": "SELECT AVG(Price) FROM Products WHERE Price BETWEEN 100 AND 200", "source_tables": ["products"]}, "evidence": "average price = DIVIDE(SUM(Price, COUNT(Price))); cost refers to Price; Price BETWEEN 100 AND 200;"}
{"sample_id": 5388, "db_id": "sales", "final": {"question": "Calculate the total price for products from id 400 to 500.", "sql": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID BETWEEN 400 AND 500", "source_tables": ["products", "sales"]}, "evidence": "total price = SUM(MULTIPLY(Price, Quantity)); from id 400 to 500 refers to ProductID BETWEEN 400 AND 500;"}
{"sample_id": 5462, "db_id": "sales", "final": {"question": "Among the employee names, what is the most common middle initial?", "sql": "SELECT MiddleInitial FROM Employees GROUP BY MiddleInitial ORDER BY COUNT(MiddleInitial) DESC LIMIT 1", "source_tables": ["employees"]}, "evidence": "most common middle initial refers to MAX(COUNT(MiddleInitial));"}
{"sample_id": 5387, "db_id": "sales", "final": {"question": "Calculate the total price of products purchased by Adam.", "sql": "SELECT SUM(T3.Price * T2.quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Adam'", "source_tables": ["customers", "products", "sales"]}, "evidence": "total price = SUM(MULTIPLY(Price, Quantity));"}
{"sample_id": 5385, "db_id": "sales", "final": {"question": "Sum up the number sales ids handled by employees called Morningstar, Heather and Dean.", "sql": "SELECT SUM(IIF(T2.FirstName = 'Morningstar', 1, 0)) + SUM(IIF(T2.FirstName = 'Heather', 1, 0)) + SUM(IIF(T2.FirstName = 'Dean', 1, 0)) AS num FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID", "source_tables": ["employees", "sales"]}, "evidence": "SUM = ADD(SUM(SalesID WHERE FirstName = 'Morningstar'), SUM(SalesID WHERE FirstName = 'Heather'), SUM(SalesID WHERE FirstName = 'Dean'));"}
{"sample_id": 5419, "db_id": "sales", "final": {"question": "Calculate the total trading quantity of Abraham sold to Aaron Alexander.", "sql": "SELECT SUM(T2.Quantity) FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T2.SalesPersonID = 1 AND T1.FirstName = 'Aaron' AND T1.LastName = 'Alexander' AND T3.FirstName = 'Abraham'", "source_tables": ["customers", "employees", "sales"]}, "evidence": "total trading quantity = SUM(Quantity WHERE Employees.FirstName = 'Abraham' AND Customers.FirstName = 'Aaron' AND Customers.LastName = 'Alexander');"}
{"sample_id": 5440, "db_id": "sales", "final": {"question": "In sales ID between 30 and 40, who is the customer that bought a total quantity of 403?", "sql": "SELECT T2.FirstName, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Quantity = 403 AND T1.SalesID BETWEEN 30 AND 40", "source_tables": ["customers", "sales"]}, "evidence": "who refers to FirstName, LastName;"}
{"sample_id": 5367, "db_id": "sales", "final": {"question": "How many product ids have the lowest price?", "sql": "SELECT COUNT(DISTINCT ProductID) FROM Products WHERE Price = ( SELECT MAX(Price) FROM Products )", "source_tables": ["products"]}, "evidence": "lowest price refers to MIN(Price);"}
{"sample_id": 5429, "db_id": "sales", "final": {"question": "Give the product's name brought by Aaron Alexander.", "sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Aaron' AND T3.LastName = 'Alexander'", "source_tables": ["customers", "products", "sales"]}, "evidence": ""}
{"sample_id": 5428, "db_id": "sales", "final": {"question": "Among the products with product ID lower than 15, how many of them costs 10 and below?", "sql": "SELECT COUNT(ProductID) FROM Products WHERE ProductID < 15 AND Price <= 10", "source_tables": ["products"]}, "evidence": "product ID lower than 15 refers to ProductID < 15; costs 10 and below refers to Price; Price < = 10;"}
{"sample_id": 5415, "db_id": "sales", "final": {"question": "List the full name of the customer who purchased the most quantity of products.", "sql": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["customers", "sales"]}, "evidence": "full name of the customer = FirstName, LastName; most quantity refers to MAX(Quantity);"}
{"sample_id": 5455, "db_id": "sales", "final": {"question": "Among the \"Mountain-500 Black\" product types, which type was purchased the most?", "sql": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Mountain-500 Black%' GROUP BY T2.Quantity, T1.Name ORDER BY SUM(T2.Quantity) DESC LIMIT 1", "source_tables": ["products", "sales"]}, "evidence": "Mountain-500 Black product types refers to Name like 'Mountain-500 Black%'; purchased the most refers to MAX(SUM(Quantity));"}
{"sample_id": 5411, "db_id": "sales", "final": {"question": "Among all the customers who have purchased ML Bottom Bracket, identify the percentage of sales by Albert I. Ringer?", "sql": "SELECT CAST(SUM(IIF(T3.FirstName = 'Albert' AND T3.MiddleInitial = 'I' AND T3.LastName = 'Ringer', 1, 0)) AS REAL) * 100 / COUNT(T2.CustomerID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.Name = 'ML Bottom Bracket'", "source_tables": ["products", "employees", "sales"]}, "evidence": "ML Bottom Bracket' is name of product; percentage = MULTIPLY(DIVIDE(SUM(CustomerID WHERE FirstName = 'Albert' AND MiddleInitial = 'I' AND LastName = 'Ringer'), COUNT(CustomerID)), 1.0);"}
{"sample_id": 5433, "db_id": "sales", "final": {"question": "List the quantity and price of the product bought by Abigail Henderson.", "sql": "SELECT T2.Quantity, T1.Price FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Abigail' AND T3.LastName = 'Henderson'", "source_tables": ["customers", "products", "sales"]}, "evidence": ""}
{"sample_id": 5389, "db_id": "sales", "final": {"question": "Calculate the total quantity of products with name starting with alphabet \"c\".", "sql": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE SUBSTR(T1.Name, 1, 1) = 'C'", "source_tables": ["products", "sales"]}, "evidence": "name starting with alphabet \"c\" refers to Name LIKE 'C%';"}
{"sample_id": 5444, "db_id": "sales", "final": {"question": "How many customers are named Madison?", "sql": "SELECT COUNT(CustomerID) FROM Customers WHERE FirstName = 'Madison'", "source_tables": ["customers"]}, "evidence": ""}
{"sample_id": 5377, "db_id": "sales", "final": {"question": "Write down all of the product ids that were placed by Meander.", "sql": "SELECT DISTINCT T2.ProductID FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T1.FirstName = 'Meander'", "source_tables": ["employees", "sales"]}, "evidence": ""}
{"sample_id": 5465, "db_id": "sales", "final": {"question": "Give the full name of the customer who bought the most amount of products.", "sql": "SELECT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID ORDER BY T2.Quantity * T1.Price DESC LIMIT 1", "source_tables": ["customers", "products", "sales"]}, "evidence": "full name of the customer = FirstName, MiddleInitial, LastName; most amount of products refers to MAX(MULTIPLY(Quantity, Price));"}
{"sample_id": 5452, "db_id": "sales", "final": {"question": "How many \"Mountain-100 Silver, 38\" were sold by Stearns MacFeather?", "sql": "SELECT SUM(T2.Quantity) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Stearns' AND T1.LastName = 'MacFeather' AND T3.Name = 'Mountain-100 Silver, 38'", "source_tables": ["products", "employees", "sales"]}, "evidence": "Mountain-100 Silver, 38' is name of product;"}
{"sample_id": 5436, "db_id": "sales", "final": {"question": "Among products bought by Kathryn Ashe, what is the name of the product with the highest quantity?", "sql": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Kathryn' AND T3.LastName = 'Ashe' ORDER BY T2.Quantity DESC LIMIT 1", "source_tables": ["customers", "products", "sales"]}, "evidence": "highest quantity refers to MAX(Quantity);"}
{"sample_id": 5571, "db_id": "menu", "final": {"question": "Please list the page numbers of all the menu pages on which the dish \"Chicken gumbo\" had appeared.", "sql": "SELECT T1.page_number FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Chicken gumbo'", "source_tables": ["menuitem", "dish", "menupage"]}, "evidence": "Chicken gumbo is a name of dish;"}
{"sample_id": 5558, "db_id": "menu", "final": {"question": "Please list the IDs of all the menus that are DIYs of the restaurant.", "sql": "SELECT id FROM Menu WHERE sponsor IS NULL", "source_tables": ["menu"]}, "evidence": "menus that are DIYs of the restaurant refers to sponsor is null;"}
{"sample_id": 5547, "db_id": "menu", "final": {"question": "What are the names of the dishes with a stable price that were created in April of 2011?", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE SUBSTR(T2.created_at, 1, 4) = '2011' AND SUBSTR(T2.created_at, 7, 1) = '4' AND T1.highest_price IS NULL", "source_tables": ["dish", "menuitem"]}, "evidence": "dishes with a stable price refers to highest_price is null; created in April of 2011 refers to SUBSTR(created_at,1,4) = '2011' and SUBSTR(created_at, 7, 1) = '4';"}
{"sample_id": 5516, "db_id": "menu", "final": {"question": "How much is the price of menu with image ID 4000009194?", "sql": "SELECT T3.price FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id WHERE T2.image_id = 4000009194", "source_tables": ["menu", "menuitem", "menupage"]}, "evidence": "FALSE;"}
{"sample_id": 5519, "db_id": "menu", "final": {"question": "List down name of dishes from menu with menu page ID 1389.", "sql": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.menu_page_id = 1389", "source_tables": ["menuitem", "dish"]}, "evidence": "FALSE;"}
{"sample_id": 5490, "db_id": "menu", "final": {"question": "How many menus were used in Dutcher House?", "sql": "SELECT COUNT(*) FROM Menu WHERE location = 'Dutcher House'", "source_tables": ["menu"]}, "evidence": "Dutcher House refers to location = 'Dutcher House';"}
{"sample_id": 5513, "db_id": "menu", "final": {"question": "Is \"c02c9a3b-6881-7080-e040-e00a180631aa\" the uuid for menu called \"The Biltmore\"?", "sql": "SELECT CASE WHEN T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa' THEN 'yes' ELSE 'no' END AS yn FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'The Biltmore' AND T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa'", "source_tables": ["menu", "menupage"]}, "evidence": "if 'c02c9a3b-6881-7080-e040-e00a180631aa' can be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is the uuid for the menu called The Biltmore; if 'c02c9a3b-6881-7080-e040-e00a180631aa' can not be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is not the uuid for the menu called The Biltmore; The Biltmore is a name of menu;"}
{"sample_id": 5550, "db_id": "menu", "final": {"question": "Among the menus sponsored by Pacific Mail Steamship Company, how many menus have no more than 2 pages?", "sql": "SELECT COUNT(*) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY' GROUP BY T2.menu_id HAVING COUNT(T2.page_number) <= 2", "source_tables": ["menu", "menupage"]}, "evidence": "sponsored by Pacific Mail Steamship Company refers to sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY'; no more than 2 pages refers to COUNT(page_number) < = 2;"}
{"sample_id": 5570, "db_id": "menu", "final": {"question": "Please list the names of all the dishes on page 1 of menu ID12882.", "sql": "SELECT T3.name FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T1.menu_id = 12882 AND T1.page_number = 1", "source_tables": ["menuitem", "dish", "menupage"]}, "evidence": "page 1 refers to page_number = 1;"}
{"sample_id": 5556, "db_id": "menu", "final": {"question": "Among the menus that include baked apples with cream, who is the sponsor of the menu with the highest price?", "sql": "SELECT T4.sponsor FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id INNER JOIN Menu AS T4 ON T4.id = T1.menu_id WHERE T3.name = 'Baked apples with cream' AND T3.id = 107 ORDER BY T2.price DESC LIMIT 1", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "baked apples with cream is a name of dish; highest price refers to MAX(price);"}
{"sample_id": 5524, "db_id": "menu", "final": {"question": "List the top five dishes, by descending order, in terms of highest price.", "sql": "SELECT name FROM Dish ORDER BY highest_price DESC LIMIT 5", "source_tables": ["dish"]}, "evidence": "highest price refers to MAX(highest_price);"}
{"sample_id": 5494, "db_id": "menu", "final": {"question": "Name the dishes that were on the menu page ID 174.", "sql": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.menu_page_id = 174", "source_tables": ["menuitem", "dish"]}, "evidence": "FALSE;"}
{"sample_id": 5503, "db_id": "menu", "final": {"question": "How many percent of Bluefish dishes are located at the center of the menu page?", "sql": "SELECT CAST(SUM(CASE WHEN T2.xpos BETWEEN 0.25 AND 0.75 AND T2.ypos BETWEEN 0.25 AND 0.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name LIKE '%BLuefish%'", "source_tables": ["dish", "menuitem"]}, "evidence": "percent = MULTIPLY(DIVIDE(SUM(xpos BETWEEN 0.25 AND 0.75 and ypos BETWEEN 0.25 AND 0.75), COUNT(id)), 1.0); Bluefish is a sub name of dish; located at the center of the menu page refers to xpos BETWEEN 0.25 AND 0.75 and ypos BETWEEN 0.25 AND 0.75;"}
{"sample_id": 5476, "db_id": "menu", "final": {"question": "Among all the menu pages with the appearance of the dish \"Clear green turtle\", how many of them have the dish at a stable price?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Clear green turtle' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.highest_price IS NULL", "source_tables": ["dish", "menuitem"]}, "evidence": "Clear green turtle is a name of dish; stable price refers to highest_price is null;"}
{"sample_id": 5553, "db_id": "menu", "final": {"question": "List the positions of the dish \"breaded veal cutlet with peas\" on every menu where it appeared.", "sql": "SELECT T2.xpos, T2.ypos FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'breaded veal cutlet with peas'", "source_tables": ["dish", "menuitem"]}, "evidence": "positions = xpos, ypos; breaded veal cutlet with peas is a name of dish;"}
{"sample_id": 5518, "db_id": "menu", "final": {"question": "List down the name of dishes from menu created in April.", "sql": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE SUBSTR(T1.created_at, 7, 1) = '4'", "source_tables": ["menuitem", "dish"]}, "evidence": "created in April refers to SUBSTR(created_at, 7, 1) = '4';"}
{"sample_id": 5562, "db_id": "menu", "final": {"question": "How many dishes are there on the menu \"Zentral Theater Terrace\"?", "sql": "SELECT COUNT(*) FROM Menu WHERE name = 'Zentral Theater Terrace'", "source_tables": ["menu"]}, "evidence": "Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5495, "db_id": "menu", "final": {"question": "List the names and menu page IDs of the dishes that first appeared in 1861.", "sql": "SELECT T2.name, T1.dish_id FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T2.first_appeared = 1861", "source_tables": ["menuitem", "dish"]}, "evidence": "first appeared in 1861 refers to first_appeared = 1861;"}
{"sample_id": 5506, "db_id": "menu", "final": {"question": "Where is the place that menu with ID 12472 was created for?", "sql": "SELECT location FROM Menu WHERE id = 12472", "source_tables": ["menu"]}, "evidence": "place refers to location;"}
{"sample_id": 5521, "db_id": "menu", "final": {"question": "List down the name of dishes that were positioned on the left upper corner.", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.xpos < 0.25 AND T2.ypos < 0.25", "source_tables": ["dish", "menuitem"]}, "evidence": "positioned on the left upper corner refers to xpos < 0.25 AND ypos < 0.25;"}
{"sample_id": 5496, "db_id": "menu", "final": {"question": "Among the dishes on menu page ID 7610, list the names and highest prices of the dishes in menu items that were created on 23rd May 2011.", "sql": "SELECT T1.name, T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.created_at LIKE '2011-05-23%' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["dish", "menuitem"]}, "evidence": "highest prices of the dishes refers to MAX(price); created on 23rd May 2011 refers to created_at like '2011-05-23%';"}
{"sample_id": 5576, "db_id": "menu", "final": {"question": "How much space does page 1 of the menu \"Zentral Theater Terrace\" cover?", "sql": "SELECT T2.full_height * T2.full_width FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'Zentral Theater Terrace' AND T2.page_number = 1", "source_tables": ["menu", "menupage"]}, "evidence": "how much space = MULTIPLY(full_height, full_width); Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5530, "db_id": "menu", "final": {"question": "Tally the dishes that have appeared on the menu for more than 100 years.", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared > 100", "source_tables": ["dish", "menuitem"]}, "evidence": "appeared on the menu for more than 100 years = SUBTRACT(last_appeared, first_appeared) > 100;"}
{"sample_id": 5471, "db_id": "menu", "final": {"question": "Which dish lasted longer, Anchovies or Fresh lobsters in every style?", "sql": "SELECT CASE WHEN SUM(CASE WHEN name = 'Anchovies' THEN last_appeared - first_appeared ELSE 0 END) - SUM(CASE WHEN name = 'Fresh lobsters in every style' THEN last_appeared - first_appeared ELSE 0 END) > 0 THEN 'Anchovies' ELSE 'Fresh lobsters in every style' END FROM Dish WHERE name IN ('Fresh lobsters in every style', 'Anchovies')", "source_tables": ["dish"]}, "evidence": "if (SUBTRACT(last_appeared, first_appeared) WHERE name = 'Anchovies') > (SUBTRACT(last_appeared, first_appeared) WHERE name = 'Fresh lobsters in every style'), it means 'Anchovies' lasted longer; if (SUBTRACT(last_appeared , first_appeared) WHERE name = 'Fresh lobsters in every style') > (SUBTRACT(last_appeared , first_appeared) WHERE name = 'Anchovies') it means 'Fresh lobsters in every style' last longer;"}
{"sample_id": 5505, "db_id": "menu", "final": {"question": "What is the event sponsored by the Republican House?", "sql": "SELECT event FROM Menu WHERE sponsor = 'REPUBLICAN HOUSE'", "source_tables": ["menu"]}, "evidence": "sponsored by the Republican House refers to sponsor = 'REPUBLICAN HOUSE';"}
{"sample_id": 5515, "db_id": "menu", "final": {"question": "What is the page count for menu with page ID of 130?", "sql": "SELECT T1.page_count FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.id = 130", "source_tables": ["menu", "menupage"]}, "evidence": "page ID of 130 refers MenuPage.id = 130;"}
{"sample_id": 5554, "db_id": "menu", "final": {"question": "What are the names of the dishes shown in the lower right corner of menu page 48706?", "sql": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE T1.xpos > 0.75 AND T1.ypos > 0.75 AND T1.menu_page_id = 48706", "source_tables": ["menuitem", "dish"]}, "evidence": "shown in the lower right corner refers to xpos > 0.75 AND ypos > 0.75;"}
{"sample_id": 5522, "db_id": "menu", "final": {"question": "Calculate the total dish count for menu with uuid of \"510d47e4-2958-a3d9-e040-e00a18064a99\" & \"510d47e4-295a-a3d9-e040-e00a18064a99\".", "sql": "SELECT SUM(CASE WHEN T2.uuid = '510d47e4-2958-a3d9-e040-e00a18064a99' THEN T1.dish_count ELSE 0 END) - SUM(CASE WHEN T2.uuid = '510d47e4-295a-a3d9-e040-e00a18064a99' THEN T1.dish_count ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "source_tables": ["menu", "menupage"]}, "evidence": "total dish count for uuid of '510d47e4-2958-a3d9-e040-e00a18064a99' = SUM(dish_count WHERE uuid = '510d47e4-2958-a3d9-e040-e00a18064a99'); total dish count for uuid of '510d47e4-295a-a3d9-e040-e00a18064a99 = SUM(dish_count WHERE uuid = '510d47e4-295a-a3d9-e040-e00a18064a99');"}
{"sample_id": 5537, "db_id": "menu", "final": {"question": "Under what events was the menu page's full width less than 2000 mm?", "sql": "SELECT T1.event FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.full_width = 2000", "source_tables": ["menu", "menupage"]}, "evidence": "full width less than 2000 mm refers to full_width < 2000;"}
{"sample_id": 5498, "db_id": "menu", "final": {"question": "Provide the page IDs and name of the menu which had the highest page count.", "sql": "SELECT T1.page_number, T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T2.page_count DESC LIMIT 1", "source_tables": ["menu", "menupage"]}, "evidence": "page IDs refers to page_number; highest page count refers to MAX(page_count);"}
{"sample_id": 5523, "db_id": "menu", "final": {"question": "Calculate the total price of items for menu with ID 12882.", "sql": "SELECT SUM(T2.price) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id WHERE T1.menu_id = 12882", "source_tables": ["menuitem", "menupage"]}, "evidence": "total price = SUM(price);"}
{"sample_id": 5479, "db_id": "menu", "final": {"question": "Among the menus in which the dish \"Clear green turtle\" had appeared, how many of them used the dollar as their currency?", "sql": "SELECT SUM(CASE WHEN T3.currency = 'Dollars' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle'", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "Clear green turtle is a name of dish; dollar as currency refers to currency = 'Dollars';"}
{"sample_id": 5507, "db_id": "menu", "final": {"question": "Please describe the menu sponsored by Noviomagus physically.", "sql": "SELECT physical_description FROM Menu WHERE sponsor = 'Noviomagus'", "source_tables": ["menu"]}, "evidence": "describe the menu physically refers to physical_description; sponsored by Noviomagus refers to sponsor = 'Noviomagus';"}
{"sample_id": 5536, "db_id": "menu", "final": {"question": "Write down the image ID, full height, and full width of the menu that were used in the \"100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER\" event.", "sql": "SELECT T1.image_id, T1.full_height, T1.full_width FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.event = '100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER'", "source_tables": ["menu", "menupage"]}, "evidence": "FALSE;"}
{"sample_id": 5545, "db_id": "menu", "final": {"question": "How many pages are there in the \"Emil Kuehn\" menu?", "sql": "SELECT SUM(CASE WHEN T1.name = 'Emil Kuehn' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "source_tables": ["menu", "menupage"]}, "evidence": "Emil Kuehn is a name of menu;"}
{"sample_id": 5502, "db_id": "menu", "final": {"question": "Provide the sponsor and event of the menu which includes Cerealine with Milk.", "sql": "SELECT T3.name, T3.event FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Cerealine with Milk'", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "Cerealine with Milk is a name of dish;"}
{"sample_id": 5483, "db_id": "menu", "final": {"question": "How many dishes are there on the menu \"Zentral Theater Terrace\"?", "sql": "SELECT SUM(CASE WHEN T3.name = 'Zentral Theater Terrace' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id", "source_tables": ["menu", "menuitem", "menupage"]}, "evidence": "Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5541, "db_id": "menu", "final": {"question": "How many dishes appeared more than once on a menu?", "sql": "SELECT COUNT(*) FROM Dish WHERE times_appeared > Dish.menus_appeared", "source_tables": ["dish"]}, "evidence": "appeared more than once on a menu refers to times_appeared > menus_appeared;"}
{"sample_id": 5481, "db_id": "menu", "final": {"question": "Please list the names of all the dishes that appeared on the menu \"Zentral Theater Terrace\".", "sql": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Zentral Theater Terrace'", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5478, "db_id": "menu", "final": {"question": "Please list the IDs of all the menus in which the dish \"Clear green turtle\" had appeared.", "sql": "SELECT T1.menu_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Clear green turtle'", "source_tables": ["menuitem", "dish", "menupage"]}, "evidence": "Clear green turtle is a name of dish;"}
{"sample_id": 5533, "db_id": "menu", "final": {"question": "How much does the dish on page 2 of menu ID 12474 cost?", "sql": "SELECT T1.price FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T2.id = T1.menu_page_id WHERE T2.menu_id = 12474 AND T2.page_number = 2", "source_tables": ["menuitem", "menupage"]}, "evidence": "page 2 refers to page_number = 2;"}
{"sample_id": 5534, "db_id": "menu", "final": {"question": "Among the dishes, how many of them were created between 2011-03-31 at 20:24:46 UTC and 2011-04-15 at 23:09:51 UTC.", "sql": "SELECT SUM(CASE WHEN T2.created_at BETWEEN '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id", "source_tables": ["dish", "menuitem"]}, "evidence": "created between 2011-03-31 at 20:24:46 UTC and 2011-04-15 at 23:09:51 UTC refers to created_at between '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC';"}
{"sample_id": 5482, "db_id": "menu", "final": {"question": "Which dish has the highest price on the menu \"Zentral Theater Terrace\"? Please give its name.", "sql": "SELECT T4.name FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Zentral Theater Terrace' ORDER BY T1.price DESC LIMIT 1", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "highest price refers to MAX(Price); Zentral Theater Terrace is a name of menu;"}
{"sample_id": 5575, "db_id": "menu", "final": {"question": "What is the highest price of the dish \"Chicken gumbo\" on a menu page?", "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Chicken gumbo' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["dish", "menuitem"]}, "evidence": "highest price refers to MAX(price); Chicken gumbo is a name of dish;"}
{"sample_id": 5517, "db_id": "menu", "final": {"question": "List down the page numbers for menu with dishes on the right upper corner.", "sql": "SELECT T2.page_number FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id WHERE T3.xpos > 0.75 AND T3.ypos < 0.25", "source_tables": ["menu", "menuitem", "menupage"]}, "evidence": "on the right upper corner refers to xpos > 0.75 AND ypos < 0.25;"}
{"sample_id": 5489, "db_id": "menu", "final": {"question": "How many dishes are included in the menu page ID 144?", "sql": "SELECT COUNT(*) FROM MenuItem WHERE menu_page_id = 144", "source_tables": ["menuitem"]}, "evidence": "FALSE;"}
{"sample_id": 5470, "db_id": "menu", "final": {"question": "How many dishes do not have correct data for the year in which it appeared first?", "sql": "SELECT COUNT(*) FROM Dish WHERE first_appeared < 1851 OR first_appeared > 2012", "source_tables": ["dish"]}, "evidence": "do not have correct data refers to first_appeared < 1851 or first_appeared > 2012;"}
{"sample_id": 5520, "db_id": "menu", "final": {"question": "What is the highest price of dishes with menu item ID 1 to 5?", "sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.id BETWEEN 1 AND 5 ORDER BY T2.price DESC LIMIT 1", "source_tables": ["dish", "menuitem"]}, "evidence": "highest price refers to MAX(price); menu item ID 1 to 5 refers to MenuItem.id BETWEEN 1 AND 5;"}
{"sample_id": 5504, "db_id": "menu", "final": {"question": "Who is the sponsor of menu with ID 12463?", "sql": "SELECT sponsor FROM Menu WHERE id = 12463", "source_tables": ["menu"]}, "evidence": "FALSE;"}
{"sample_id": 5572, "db_id": "menu", "final": {"question": "Among the menu pages on which the dish \"Chicken gumbo\" had appeared, what is the menu ID of the one with the biggest width?", "sql": "SELECT T1.id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Chicken gumbo' ORDER BY T1.full_width DESC LIMIT 1", "source_tables": ["menuitem", "dish", "menupage"]}, "evidence": "Chicken gumbo is a name of dish; biggest width refers to MAX(full_width);"}
{"sample_id": 5491, "db_id": "menu", "final": {"question": "How many dishes appeared on a menu more than once?", "sql": "SELECT COUNT(*) FROM Dish WHERE times_appeared > menus_appeared", "source_tables": ["dish"]}, "evidence": "appeared on a menu more than once refers to times_appeared > menus_appeared;"}
{"sample_id": 5528, "db_id": "menu", "final": {"question": "How many dishes appear in the right upper corner of the menu page?", "sql": "SELECT COUNT(*) FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T1.dish_id = T2.id WHERE T1.xpos > 0.75 AND T1.ypos < 0.25", "source_tables": ["menuitem", "dish"]}, "evidence": "appear in the right upper corner of the menu page refers to xpos > 0.75 and ypos < 0.25;"}
{"sample_id": 5474, "db_id": "menu", "final": {"question": "What is the name of the dish that appeared on the upper left corner on menu page no. 1389?", "sql": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.menu_page_id = 1389 AND T2.xpos < 0.25 AND T2.ypos < 0.25", "source_tables": ["dish", "menuitem"]}, "evidence": "appeared on the upper left corner on menu refers to xpos < 0.25 AND ypos < 0.25; menu page no. refers to menu_page_id; menu_page_id = 1389;"}
{"sample_id": 5488, "db_id": "menu", "final": {"question": "How many menu items were created on 28th March 2011?", "sql": "SELECT COUNT(*) FROM MenuItem WHERE created_at LIKE '2011-03-28%'", "source_tables": ["menuitem"]}, "evidence": "created on 28th March 2011 refers to created_at like '2011-03-28%';"}
{"sample_id": 5510, "db_id": "menu", "final": {"question": "List down the menu page IDs for menu sponsored by Occidental & Oriental?", "sql": "SELECT T2.id FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.sponsor = 'Occidental & Oriental'", "source_tables": ["menu", "menupage"]}, "evidence": "menu page IDs refers to MenuPage.id; sponsored by Occidental & Oriental refers to sponsor = 'Occidental & Oriental';"}
{"sample_id": 5555, "db_id": "menu", "final": {"question": "What are the names of the dishes in the menu sponsored by The Society of Cumberland that was created for the 19th reunion at Grand Pacific Hotel in Chicago, Illinois?", "sql": "SELECT T4.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id INNER JOIN MenuItem AS T3 ON T2.id = T3.menu_page_id INNER JOIN Dish AS T4 ON T3.dish_id = T4.id WHERE T1.sponsor = 'THE SOCIETY OF THE CUMBERLAND' AND T1.event = '19NTH REUNION' AND T1.place = 'GRAND PACIFIC HOTEL,CHICAGO,ILL'", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "sponsored by The Society of Cumberland refers to sponsor = 'THE SOCIETY OF THE CUMBERLAND'; created for the 19th reunion refers to event = '19NTH REUNION'; Grand Pacific Hotel in Chicago, Illinois refers to place = 'GRAND PACIFIC HOTEL, CHICAGO, ILL';"}
{"sample_id": 5527, "db_id": "menu", "final": {"question": "Write down the top ten menus with the highest dish count.", "sql": "SELECT name FROM Menu GROUP BY name ORDER BY dish_count DESC LIMIT 10", "source_tables": ["menu"]}, "evidence": "highest dish count refers to MAX(dish_count);"}
{"sample_id": 5577, "db_id": "menu", "final": {"question": "What is the average number of dishes per menu page of menu ID12882?", "sql": "SELECT CAST(COUNT(dish_id) AS REAL) / COUNT(T3.page_count) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id WHERE T2.menu_id = 12882", "source_tables": ["menu", "menuitem", "menupage"]}, "evidence": "average number of dishes per menu = DIVIDE(COUNT(dish_id), COUNT(page_count));"}
{"sample_id": 5539, "db_id": "menu", "final": {"question": "What is the position coordinate on the page menu of the \"Small Hominy\" dish and how long did it appear?", "sql": "SELECT T2.xpos, T2.ypos, T1.last_appeared - T1.first_appeared FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Small Hominy'", "source_tables": ["dish", "menuitem"]}, "evidence": "position coordinate = xpos, ypos; Small Hominy is a name of dish; how long it appear = SUBTRACT(last_appeared, first_appeared);"}
{"sample_id": 5486, "db_id": "menu", "final": {"question": "What is the average page number of the menus that have the dish \"Clear green turtle\"?", "sql": "SELECT AVG(T1.page_number) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Clear green turtle'", "source_tables": ["menuitem", "dish", "menupage"]}, "evidence": "average page number = AVG(page_number); Clear green turtle is a name of dish;"}
{"sample_id": 5548, "db_id": "menu", "final": {"question": "What is the name of the menu with the highest number of pages?", "sql": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id GROUP BY T2.menu_id ORDER BY COUNT(T2.page_number) DESC LIMIT 1", "source_tables": ["menu", "menupage"]}, "evidence": "highest number of pages refers to MAX(COUNT(page_number));"}
{"sample_id": 5480, "db_id": "menu", "final": {"question": "Among the menus in which the dish \"Clear green turtle\" had appeared, how many of them did not support taking out or booking in advance?", "sql": "SELECT SUM(CASE WHEN T4.name = 'Clear green turtle' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.call_number IS NULL", "source_tables": ["menu", "menuitem", "dish", "menupage"]}, "evidence": "Clear green turtle is a name of dish; not support taking out or booking in advance refers to call_number is null;"}
{"sample_id": 5511, "db_id": "menu", "final": {"question": "List down the image IDs for menu located at Manhattan Hotel.", "sql": "SELECT T1.image_id FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.location = 'Manhattan Hotel'", "source_tables": ["menu", "menupage"]}, "evidence": "located at Manhattan Hotel refers to location = 'Manhattan Hotel';"}
{"sample_id": 5567, "db_id": "menu", "final": {"question": "Which menu page of \"Ritz Carlton\" has the biggest height?", "sql": "SELECT T1.page_number FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.name = 'Ritz Carlton' ORDER BY T1.full_height DESC LIMIT 1", "source_tables": ["menu", "menupage"]}, "evidence": "Ritz Carlton is a name of menu; biggest height refers to MAX(full_height);"}
{"sample_id": 5610, "db_id": "shipping", "final": {"question": "How many of the shipments bound for New York City were shipped to Harry's Hot Rod Auto and Truck Accessories?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.city_name = 'New York' AND T1.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories'", "source_tables": ["shipment", "customer", "city"]}, "evidence": "\"New York\" is the city_name; 'Harry's Hot Rod Auto & Truck Accessories' is the cust_name"}
{"sample_id": 5635, "db_id": "shipping", "final": {"question": "What is the first name of the driver who transported shipment id 1028?", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = 1028", "source_tables": ["shipment", "driver"]}, "evidence": "shipment id 1028 refers to ship_id = 1028"}
{"sample_id": 5632, "db_id": "shipping", "final": {"question": "State the weight of shipments transported by Peterbilt.", "sql": "SELECT T2.weight FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE make = 'Peterbilt'", "source_tables": ["shipment", "truck"]}, "evidence": "\"Peterbilt\" is the make"}
{"sample_id": 5643, "db_id": "shipping", "final": {"question": "What is the brand and model of truck used in shipment id 1055?", "sql": "SELECT T1.make, T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1055'", "source_tables": ["shipment", "truck"]}, "evidence": "shipment id 1055 refers to ship_id = 1055; brand refers to make; model refers to model_year"}
{"sample_id": 5661, "db_id": "shipping", "final": {"question": "Calculate the average number of shipments that Zachery Hicks shipped in year 2017.", "sql": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' THEN T1.ship_id ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017'", "source_tables": ["shipment", "driver"]}, "evidence": "in year 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count(ship_id where first_name = 'Zachery' AND last_name = 'Hicks'), Count(ship_id)) * 100"}
{"sample_id": 5601, "db_id": "shipping", "final": {"question": "What is the area of the destination city of shipment No.1346?", "sql": "SELECT T2.area FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1346'", "source_tables": ["shipment", "city"]}, "evidence": "shipment no. 1346 refers to ship_id = 1346"}
{"sample_id": 5645, "db_id": "shipping", "final": {"question": "How many customers are manufacturer?", "sql": "SELECT COUNT(*) FROM customer WHERE cust_type = 'manufacturer'", "source_tables": ["customer"]}, "evidence": "\"manufacturer\" is the cust_type"}
{"sample_id": 5578, "db_id": "shipping", "final": {"question": "How many shipments were ordered by S K L Enterprises Inc in 2017?", "sql": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND STRFTIME('%Y', T2.ship_date) = '2017'", "source_tables": ["shipment", "customer"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name; in 2017 refers to Cast(ship_date AS DATE) = 2017"}
{"sample_id": 5616, "db_id": "shipping", "final": {"question": "How many shipments did Holger Nohr transport to North Las Vegas overall?", "sql": "SELECT COUNT(*) FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T1.first_name = 'Holger' AND T1.last_name = 'Nohr' AND T3.city_name = 'North Las Vegas'", "source_tables": ["shipment", "city", "driver"]}, "evidence": "\"North Las Vegas\" is the city_name"}
{"sample_id": 5646, "db_id": "shipping", "final": {"question": "How many customers who live in California that are retailers?", "sql": "SELECT COUNT(*) FROM customer WHERE cust_type = 'retailer' AND state = 'CA'", "source_tables": ["customer"]}, "evidence": "\"retailer\" is the cust_type; live in California refers to state = 'CA'"}
{"sample_id": 5608, "db_id": "shipping", "final": {"question": "What is the full name of the driver who transported the first shipment of the company?", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id ORDER BY T1.ship_date ASC LIMIT 1", "source_tables": ["shipment", "driver"]}, "evidence": "first shipment of the company refers to Min(ship_date); full name refers to first_name, last_name"}
{"sample_id": 5618, "db_id": "shipping", "final": {"question": "Determine the percentage of manufacturers who are from Texas among all of Lorenzo's customers.", "sql": "SELECT CAST(SUM(CASE WHEN cust_type = 'manufacturer' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer WHERE state = 'TX'", "source_tables": ["customer"]}, "evidence": "\"Texas\" refers to state = 'TX'; 'manufacturer' is the cust_type; percentage = Divide (Count(cust_id where state = 'TX'), Count(cust_id)) * 100"}
{"sample_id": 5638, "db_id": "shipping", "final": {"question": "Give the full name of driver who transported the items on 3/2/2016.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2016-03-02'", "source_tables": ["shipment", "driver"]}, "evidence": "on 3/2/2016 refers to ship_date = '2016-02-03'; full name refers to first_name, last_name"}
{"sample_id": 5603, "db_id": "shipping", "final": {"question": "Who was the driver of truck no.3 on 2016/9/19? Tell the full name.", "sql": "SELECT T3.first_name, T3.last_name FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T1.truck_id = '3' AND T2.ship_date = '2016-09-19'", "source_tables": ["shipment", "truck", "driver"]}, "evidence": "truck no. 3 refers to truck_id = 3; on 2016/9/19 refers to ship_date = '2016-09-19'; full name refers to first_name, last_name"}
{"sample_id": 5626, "db_id": "shipping", "final": {"question": "Determine the number of shipments delivered by Andrea Simons to Huntsville in 2016.", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T3.first_name = 'Andrea' AND T3.last_name = 'Simons' AND T2.city_name = 'Huntsville' AND STRFTIME('%Y', T1.ship_date) = '2016'", "source_tables": ["shipment", "city", "driver"]}, "evidence": "\"Huntsville\" is the city_name; in 2016 refers to Cast(ship_date AS DATE) = 2016; number of shipment refers to Count(ship_id)"}
{"sample_id": 5630, "db_id": "shipping", "final": {"question": "How many cities which belong to New Jersey have transported weight greater than 20000?", "sql": "SELECT COUNT(*) FROM ( SELECT T2.city_id AS CITYID FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.state = 'New Jersey' GROUP BY T2.city_id HAVING SUM(T1.weight) > 20000 )", "source_tables": ["shipment", "city"]}, "evidence": "\"New Jersey\" is the state; transported weight greater than 20000 refers to Sum(weight) > 20000"}
{"sample_id": 5586, "db_id": "shipping", "final": {"question": "Among the shipments in 2017, how many of them have the destination in New Jersey?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.state = 'New Jersey'", "source_tables": ["shipment", "city"]}, "evidence": "in 2017 refers to Cast(ship_date AS DATE) = 2017; 'New Jersey' is the state"}
{"sample_id": 5647, "db_id": "shipping", "final": {"question": "How many cities are in Connecticut?", "sql": "SELECT COUNT(*) FROM city WHERE state = 'Connecticut'", "source_tables": ["city"]}, "evidence": "\"Connecticut\" is the state"}
{"sample_id": 5664, "db_id": "shipping", "final": {"question": "What is the ship ID of shipments shipped to the city with the largest area?", "sql": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area DESC LIMIT 1", "source_tables": ["shipment", "city"]}, "evidence": "city with largest area refers to Max(area)"}
{"sample_id": 5615, "db_id": "shipping", "final": {"question": "Among the shipments for Downey, how many shipments were shipped to California in 2016?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T3.cust_id = T1.cust_id WHERE T2.city_name = 'Downey' AND STRFTIME('%Y', T1.ship_date) = '2016' AND T3.state = 'CA'", "source_tables": ["shipment", "customer", "city"]}, "evidence": "\"Downey\" is the city_name; 'California' is the state, whose abbreviation is CA; in 2016 refers to year(ship_date) = 2016,"}
{"sample_id": 5679, "db_id": "shipping", "final": {"question": "List the weight of the customer's shipment with annual revenue of 39448581.", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.annual_revenue = 39448581", "source_tables": ["shipment", "customer"]}, "evidence": ""}
{"sample_id": 5588, "db_id": "shipping", "final": {"question": "How much more pounds in total were transported to New York than to Chicago?", "sql": "SELECT SUM(CASE WHEN T2.city_name = 'New York' THEN T1.weight ELSE 0 END) - SUM(CASE WHEN T2.city_name = 'Chicago' THEN T1.weight ELSE 0 END) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id", "source_tables": ["shipment", "city"]}, "evidence": "\"New York\" and \"Chicago\" are both city_name; more pounds in total refers to Subtract (Sum(weight where city_name = 'New York'), Sum(weight where city_name = 'Chicago'))"}
{"sample_id": 5617, "db_id": "shipping", "final": {"question": "How many shipments were shipped to the most densely populated city?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area / T2.population DESC LIMIT 1", "source_tables": ["shipment", "city"]}, "evidence": "most densely populated city refers to Max(Divide(area, population))"}
{"sample_id": 5612, "db_id": "shipping", "final": {"question": "What is the full name of the driver who delivered the most shipments to the least populated city?", "sql": "SELECT T1.first_name, T1.last_name FROM driver AS T1 INNER JOIN shipment AS T2 ON T1.driver_id = T2.driver_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id GROUP BY T1.first_name, T1.last_name, T3.population HAVING T3.population = MAX(T3.population) ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["shipment", "city", "driver"]}, "evidence": "least populated city refers to Min(population); fullname refers to first_name, last_name; most shipment refers to driver_id where Max(Count (ship_id))"}
{"sample_id": 5666, "db_id": "shipping", "final": {"question": "Among the shipments shipped to Cicero, Illinois, how many shipments weighed between 9,000 to 15,000?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'Cicero' AND T2.state = 'Illinois' AND T1.weight BETWEEN 9000 AND 15000", "source_tables": ["shipment", "city"]}, "evidence": "\"Cicero\" is the city; 'Illinois' is the state"}
{"sample_id": 5629, "db_id": "shipping", "final": {"question": "Among all shipments delivered by Sue Newel, identify the percentage of shipments that were placed by Autoware Inc.", "sql": "SELECT CAST(SUM(CASE WHEN T3.cust_name = 'Autoware Inc' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id INNER JOIN customer AS T3 ON T3.cust_id = T1.cust_id WHERE T2.first_name = 'Sue' AND T2.last_name = 'Newell'", "source_tables": ["shipment", "customer", "driver"]}, "evidence": "\"Autoware Inc\" is the cust_name; percentage = Divide (Count(ship_id where cust_name = 'Autoware Inc'), Count(ship_id)) * 100"}
{"sample_id": 5621, "db_id": "shipping", "final": {"question": "What was the maximum weight of the shipment carried to Boston? Name the customer of that shipment.", "sql": "SELECT T1.weight, T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Boston' ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["shipment", "customer", "city"]}, "evidence": "\"Boston\" is the city_name; maximum weight refers to Max(weight); customer refers to cust_name"}
{"sample_id": 5675, "db_id": "shipping", "final": {"question": "How many shipments were delivered to a customer from New York?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'NY'", "source_tables": ["shipment", "customer"]}, "evidence": "\"New York\" refers to state = 'NY'"}
{"sample_id": 5611, "db_id": "shipping", "final": {"question": "Among the top 5 heaviest shipments, how many shipments were transported via Mack?", "sql": "SELECT COUNT(T2.ship_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Mack' ORDER BY T2.weight DESC LIMIT 1", "source_tables": ["shipment", "truck"]}, "evidence": "heaviest shipment refers to Max(weight); via Mack refers to make = 'Mack'"}
{"sample_id": 5582, "db_id": "shipping", "final": {"question": "Please list the IDs of all the shipments made by a retailer customer.", "sql": "SELECT T2.ship_id FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_type = 'retailer'", "source_tables": ["shipment", "customer"]}, "evidence": "\"retailer\" is the cust_type;\u00a0 IDs of shipments refers to ship_id"}
{"sample_id": 5671, "db_id": "shipping", "final": {"question": "Where does the driver of ship ID 1127 live?", "sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1127'", "source_tables": ["shipment", "driver"]}, "evidence": "live refers to address"}
{"sample_id": 5633, "db_id": "shipping", "final": {"question": "What is the model year of the truck used in shipment id 1003?", "sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1003'", "source_tables": ["shipment", "truck"]}, "evidence": "shipment id 1003 refers to ship_id = 1003"}
{"sample_id": 5609, "db_id": "shipping", "final": {"question": "In total, how many shipments were transported to Olympic Camper Sales Inc?", "sql": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'Olympic Camper Sales Inc'", "source_tables": ["shipment", "customer"]}, "evidence": "\"Olympic Camper Sales Inc\" is the cust_name"}
{"sample_id": 5599, "db_id": "shipping", "final": {"question": "Provide the ship date of the first shipment to customers in South Carolina.", "sql": "SELECT MIN(T1.ship_date) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'SC'", "source_tables": ["shipment", "customer"]}, "evidence": "\"South Carolina\" refers to state = 'SC'; first shipment refers to Min(ship_date)"}
{"sample_id": 5681, "db_id": "shipping", "final": {"question": "Among the shipments to a customer from Texas, what percentage of the shipments shipped in 2017?", "sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.ship_date) = '2017' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'TX'", "source_tables": ["shipment", "customer"]}, "evidence": "\"Texas\" refers to state = 'TX'; shipped in 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count (ship_id where CAST(ship_date AS DATE) = 2017), Count (ship_id)) * 100"}
{"sample_id": 5669, "db_id": "shipping", "final": {"question": "Among the shipments delivered by Maria Craft, how many shipments were delivered in 2017?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Maria' AND T2.last_name = 'Craft' AND STRFTIME('%Y', T1.ship_date) = '2017'", "source_tables": ["shipment", "driver"]}, "evidence": "delivered in 2017 refers to Cast(ship_date AS DATE) = 2017"}
{"sample_id": 5602, "db_id": "shipping", "final": {"question": "Provide the weight of the shipment to U-haul Center Of N Syracuse on 2016/9/21.", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.cust_name = 'U-haul Center Of N Syracuse' AND T1.ship_date = '2016-09-21'", "source_tables": ["shipment", "customer"]}, "evidence": "\"U-haul Center Of N Syracuse\" is the cust_name; on 2016/9/21 refers to ship_date = '2016/09/21'"}
{"sample_id": 5597, "db_id": "shipping", "final": {"question": "Tell the name of the driver who received the shipment on 2017/11/5.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2017-11-05'", "source_tables": ["shipment", "driver"]}, "evidence": "shipment on 2017/11/5 refers to ship_date = '2017-11/05'; name refers to first_name, last_name"}
{"sample_id": 5627, "db_id": "shipping", "final": {"question": "How many shipments does each driver deliver per month on average?", "sql": "SELECT CAST(COUNT(*) AS REAL) / (12 * COUNT(T2.driver_id)) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id", "source_tables": ["shipment", "driver"]}, "evidence": "shipment data was for 24 months in 2016 and 2017 respectively; deliver per month on average refers to\u00a0Divide(Count(ship_id), Multiply (24, Count(driver_id)))"}
{"sample_id": 5655, "db_id": "shipping", "final": {"question": "What is the shipment ID of the heaviest shipment that Zachery Hicks transported?", "sql": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["shipment", "driver"]}, "evidence": "shipment ID refers to ship_id; heaviest shipment refers to Max(weight)"}
{"sample_id": 5628, "db_id": "shipping", "final": {"question": "Among all shipments placed by Sunguard Window Tinting & Truck Accessories in 2017, identify the percentage of shipments whose weight exceeded 10,000 pounds.", "sql": "SELECT CAST(SUM(CASE WHEN T1.weight >= 10000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.cust_name = 'Sunguard Window Tinting & Truck Accessories' AND STRFTIME('%Y', T1.ship_date) = '2017'", "source_tables": ["shipment", "customer"]}, "evidence": "\"Sunguard Window Tinting & Truck Accessories\" is the cust_name; weight exceed 10,000 pounds refers to weight > = 10000; in 2017 refers to Cast(ship_date AS DATE) = 2017; percentage = Divide (Sum(weight > = 10000), Sum(weight)) * 100"}
{"sample_id": 5598, "db_id": "shipping", "final": {"question": "Show the population of the city which was the destination of shipment no.1398.", "sql": "SELECT T2.population FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1398'", "source_tables": ["shipment", "city"]}, "evidence": "shipment no. 1398 refers to ship_id = 1398"}
{"sample_id": 5663, "db_id": "shipping", "final": {"question": "How many shipments were shipped by the driver named Zachary Hicks?", "sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.driver_id = 23", "source_tables": ["shipment", "driver"]}, "evidence": ""}
{"sample_id": 5648, "db_id": "shipping", "final": {"question": "What is the most populated city in California?", "sql": "SELECT city_name FROM city WHERE state = 'California' AND population = ( SELECT MAX(population) FROM city WHERE state = 'California' )", "source_tables": ["city"]}, "evidence": "in California refers to state = 'CA'; most populated city refers to Max(population)"}
{"sample_id": 5596, "db_id": "shipping", "final": {"question": "Give the name of the driver of shipment no.1021.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1021'", "source_tables": ["shipment", "driver"]}, "evidence": "shipment no. 1021 refers to ship_id = 1021; name refers to first_name, last_name"}
{"sample_id": 5651, "db_id": "shipping", "final": {"question": "How many shipments were shipped to customers living in California in year 2016?", "sql": "SELECT COUNT(*) AS per FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2016' AND T1.state = 'CA'", "source_tables": ["shipment", "customer"]}, "evidence": "living in California refers to state = 'CA'; in year 2016 refers to CAST(ship_date AS DATE) = 2016"}
{"sample_id": 5642, "db_id": "shipping", "final": {"question": "Give the phone of drivers who transported shipment weight of greater than 20000 pounds.", "sql": "SELECT T2.phone FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.driver_id HAVING SUM(T1.weight) > 20000", "source_tables": ["shipment", "driver"]}, "evidence": "shipment weight of greater than 20000 pounds refers to Sum(weight) > 20000"}
{"sample_id": 5592, "db_id": "shipping", "final": {"question": "State the headquarter of the truck which completed shipment no.1045.", "sql": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = 1045", "source_tables": ["shipment", "truck"]}, "evidence": "shipment no. 1045 refers to ship_id = 1045; headquarter refers to if make = 'Peterbit', then 'Texax(TX)', if make = 'Mack', then 'North Carolina (NC)'; if make = 'Kenworth', then 'Washington (WA)'"}
{"sample_id": 5580, "db_id": "shipping", "final": {"question": "Among the shipments done by Sue Newell, how many of them are for S K L Enterprises Inc?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND T3.first_name = 'Sue' AND T3.last_name = 'Newell'", "source_tables": ["shipment", "customer", "driver"]}, "evidence": "\"S K L Enterprises Inc\" is the cust_name"}
{"sample_id": 5639, "db_id": "shipping", "final": {"question": "What is the average annual revenue of customers who have shipment weight of less than 65000 pounds?", "sql": "SELECT AVG(T1.annual_revenue) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.weight < 65000", "source_tables": ["shipment", "customer"]}, "evidence": "weight of less than 65000 pounds refers to weight < 65000; average annual revenue refers to AVG(annual_revenue)"}
{"sample_id": 5657, "db_id": "shipping", "final": {"question": "Which headquarter's truck has the highest shipments in year 2016?", "sql": "SELECT CASE WHEN T2.make = 'Peterbilt' THEN 'Texas (TX)' WHEN T2.make = 'Mack' THEN 'North Carolina (NC)' WHEN T2.make = 'Kenworth' THEN 'Washington (WA)' END AS \"result\" FROM shipment AS T1 INNER JOIN truck AS T2 ON T1.truck_id = T2.truck_id WHERE CAST(T1.ship_date AS DATE) = 2016 GROUP BY T2.make ORDER BY COUNT(T1.ship_id) DESC LIMIT 1", "source_tables": ["truck", "shipment"]}, "evidence": "in 2016 refers to CAST(ship_date AS DATE) = 2016; make = 'Peterbilt' means headquarter is 'Texas (TX)', make = 'Mack' means headquarter is 'North Carolina (NC)', make = 'Kenworth' means headquarter is 'Washington (WA)'; highest shipment refers to MAX(COUNT(ship_id))"}
{"sample_id": 5683, "db_id": "shipping", "final": {"question": "List the driver's name of the shipment with a weight greater than 95% of the average weight of all shipments.", "sql": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.weight * 100 > ( SELECT 95 * AVG(weight) FROM shipment )", "source_tables": ["shipment", "driver"]}, "evidence": "weight greater than 95% of average weight refers to weight > Multiply (AVG(weight), 0.95); driver name refers to first_name, last_name"}
{"sample_id": 5662, "db_id": "shipping", "final": {"question": "Calculate the percentage of the weight of goods being transported by Zachery Hicks to California in year 2016.", "sql": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' THEN T1.weight ELSE 0 END) AS REAL) * 100 / SUM(T1.weight) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2016'", "source_tables": ["shipment", "driver"]}, "evidence": "\"California\" is the state; in 2016 refers to CAST (ship_date AS DATE) = 2016; percentage = Divide (Sum(weight where first_name = 'Zachery' AND last_name = 'Hicks'), Sum(weight)) * 100"}
{"sample_id": 5587, "db_id": "shipping", "final": {"question": "What is the maximum weight being transported to New York during a single shipment?", "sql": "SELECT MAX(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'New York'", "source_tables": ["shipment", "city"]}, "evidence": "\"New York\" is the city_name; maximum weight refers to Max(weight)"}
{"sample_id": 5591, "db_id": "shipping", "final": {"question": "Among all the shipments to Florida, what is the percentage of the shipment to Jacksonville?", "sql": "SELECT CAST(SUM(CASE WHEN T2.city_name = 'Jacksonville' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.state = 'Florida'", "source_tables": ["shipment", "city"]}, "evidence": "\"Florida\" is the state; \"Jacksonville\" is city_name;"}
{"sample_id": 5668, "db_id": "shipping", "final": {"question": "What is the address of the driver that delivers the shipment for the customer lives at 7052 Carroll Road, San Diego, California?", "sql": "SELECT T3.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.address = '7052 Carroll Road' AND T2.city = 'San Diego' AND T2.state = 'CA'", "source_tables": ["shipment", "customer", "driver"]}, "evidence": "\"7052 Carroll Road\" is the address of customer; 'San Diego' is the city; 'California' is the state"}
{"sample_id": 5600, "db_id": "shipping", "final": {"question": "For the shipment received by Leszek Kieltyka on 2017/9/25, what was its weight?", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Leszek' AND T2.last_name = 'Kieltyka' AND T1.ship_date = '2017-09-25'", "source_tables": ["shipment", "driver"]}, "evidence": "on 2017/9/25 refers to ship_date = '2017-09-25'"}
{"sample_id": 5607, "db_id": "shipping", "final": {"question": "To whom did the company transport its heaviest shipment?", "sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["shipment", "customer"]}, "evidence": "heaviest shipment refers to Max(weight)"}
{"sample_id": 5614, "db_id": "shipping", "final": {"question": "How much is the annual revenue of the customer with the most number of shipments?", "sql": "SELECT T2.annual_revenue FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_id ORDER BY COUNT(T1.cust_id) DESC LIMIT 1", "source_tables": ["shipment", "customer"]}, "evidence": "customer with the most number of shipment refers to cust_id where Max(Count(ship_id))"}
{"sample_id": 5660, "db_id": "shipping", "final": {"question": "List all the cities where Zachery Hicks transported goods.", "sql": "SELECT DISTINCT T3.city_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id INNER JOIN city AS T3 ON T1.city_id = T3.city_id WHERE T2.first_name = 'Zachery' AND T2.last_name = 'Hicks'", "source_tables": ["shipment", "city", "driver"]}, "evidence": "city refers to city_name"}
{"sample_id": 5665, "db_id": "shipping", "final": {"question": "List the drivers who shipped the shipments to the least populated city.", "sql": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id ORDER BY T2.population ASC LIMIT 1", "source_tables": ["shipment", "city", "driver"]}, "evidence": "least populated city refers to Min(population); name refers to first_name, last_name"}
{"sample_id": 5606, "db_id": "shipping", "final": {"question": "How many pounds did Sue Newell transport during her first shipment?", "sql": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Sue' AND T2.last_name = 'Newell' ORDER BY T1.ship_date ASC LIMIT 1", "source_tables": ["shipment", "driver"]}, "evidence": "first shipment refers to Min(ship_date); pounds refers to weight"}
{"sample_id": 5674, "db_id": "shipping", "final": {"question": "Provide the destination city of the shipment shipped by January 16, 2017.", "sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_date = '2017-01-16'", "source_tables": ["shipment", "city"]}, "evidence": "January 16, 2017 refers to ship_date = '2017-01-16'; city refers to city_name"}
{"sample_id": 5706, "db_id": "language_corpus", "final": {"question": "What is the revision page ID of title \"Aigua dol\u00c3\u00a7a\"?", "sql": "SELECT revision FROM pages WHERE title = 'Aigua dol\u00c3\u00a7a'", "source_tables": ["pages"]}, "evidence": "title \"Aigua dol\u00c3\u00a7a\" refers to title LIKE 'Aigua dol\u00c3\u00a7a%'"}
{"sample_id": 5686, "db_id": "language_corpus", "final": {"question": "List the page number for Catalan language wikipedia pages containing the word 'Art' in the page title.", "sql": "SELECT page FROM pages WHERE title LIKE 'Art%' OR title LIKE '%Art%' OR title LIKE '%Art'", "source_tables": ["pages"]}, "evidence": "containing the word 'Art' refers to title LIKE '% Art %'"}
{"sample_id": 5782, "db_id": "language_corpus", "final": {"question": "What's the occurrence of the biwords pair whose first word is \"\u00e0bac\" and second word is \"xin\u00e8s\"?", "sql": "SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xin\u00e8s' )", "source_tables": ["words", "biwords"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; xin\u00e8s refers to word = 'xin\u00e8s'; occurrence refers to occurrences"}
{"sample_id": 5798, "db_id": "language_corpus", "final": {"question": "How many appearances does the word ID No. 2823 have in the Wikipedia page \"Astre\"?", "sql": "SELECT SUM(T2.occurrences) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Astre' AND T2.wid = 2823", "source_tables": ["pages_words", "pages"]}, "evidence": "Astre refers to title = 'Astre'; word ID No. 2823 refers to wid = 2823; appearances refers to pages_words_sampling.occurrences"}
{"sample_id": 5784, "db_id": "language_corpus", "final": {"question": "How many more times does the first word in the biwords pair \"\u00e0bac-xin\u00e8s\" occur than the biwords pair itself?", "sql": "SELECT occurrences - ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xin\u00e8s' ) ) AS CALUS FROM words WHERE word = '\u00e0bac'", "source_tables": ["words", "biwords"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; xin\u00e8s refers to word = 'xin\u00e8s'; How many more times the first word in the biwords occur than the biwords pair itself means SUBTRACT(words.occurrence, biwords.occurrences)"}
{"sample_id": 5787, "db_id": "language_corpus", "final": {"question": "How many Wikipedia pages are there on the language of the biwords pair \"\u00e0bac-xin\u00e8s\"?", "sql": "SELECT COUNT(T1.pages) FROM langs AS T1 INNER JOIN biwords AS T2 ON T1.lid = T2.lid WHERE T2.w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND T2.w2nd = ( SELECT wid FROM words WHERE word = 'xin\u00e8s' )", "source_tables": ["langs", "words", "biwords"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; xin\u00e8s refers to word = 'xin\u00e8s'; Wikipedia pages refer to pages"}
{"sample_id": 5689, "db_id": "language_corpus", "final": {"question": "How many Catalan language wikipedia pages have between 1000 to 2000 number of different words?", "sql": "SELECT COUNT(pid) FROM pages WHERE words BETWEEN 1000 AND 2000", "source_tables": ["pages"]}, "evidence": "between 1000 to 2000 number of different words refers to words BETWEEN 1000 AND 2000"}
{"sample_id": 5701, "db_id": "language_corpus", "final": {"question": "What are the titles of the top 5 Catalan language Wikipedia page with the least number of different words? Indicate each title's word id that has appeared the most in the said pages.", "sql": "SELECT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid ORDER BY T1.words LIMIT 5", "source_tables": ["pages_words", "pages"]}, "evidence": "least number of different words refers to min(words); word id refers to wid; appeared the most refers to max(occurrences)"}
{"sample_id": 5746, "db_id": "language_corpus", "final": {"question": "What is the language of the pair of words numbered 1 and 616?", "sql": "SELECT T2.lang FROM biwords AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.w1st = 1 AND T1.w2nd = 616", "source_tables": ["langs", "biwords"]}, "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 616;"}
{"sample_id": 5788, "db_id": "language_corpus", "final": {"question": "How much higher in percentage does the word \"grec\" occur on the page titled \"\u00c0bac\" than on the page titled \"Astronomia\"?", "sql": "SELECT CAST((SUM(CASE WHEN T3.title = '\u00c0bac' THEN T2.occurrences END) - SUM(CASE WHEN T3.title = 'Astronomia' THEN T2.occurrences END)) AS REAL) * 100 / SUM(CASE WHEN T3.title = 'Astronomia' THEN T2.occurrences END) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec'", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "grec refers to word = 'grec'; \u00c0bac refers to title = '\u00c0bac'; Astronomia refers to title = 'Astronomia'; percentage = DIVIDE(SUBTRACT(occurrences where title = '\u00c0bac' AND word = 'grec', occurrences where title = 'Astronomia' AND word = 'grec'), occurrences where title = 'Astronomia' AND word = 'grec')"}
{"sample_id": 5691, "db_id": "language_corpus", "final": {"question": "Which word has the most occurrences within the same page of wikipedia about Catalan language?", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = ( SELECT MAX(occurrences) FROM pages_words )", "source_tables": ["pages_words", "words"]}, "evidence": "most occurrences refers to max(occurrences)"}
{"sample_id": 5712, "db_id": "language_corpus", "final": {"question": "What is the word id for title \"Sometent\"?", "sql": "SELECT T2.wid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.title = 'Sometent'", "source_tables": ["pages_words", "pages"]}, "evidence": "word id refers to wid"}
{"sample_id": 5704, "db_id": "language_corpus", "final": {"question": "What is the word pair that occured the highest amount of times in Addicio? Indicate how many times such word pair occured.", "sql": "SELECT T3.w1st, T3.w2nd, T3.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN biwords AS T3 ON T2.wid = T3.w1st OR T2.wid = T3.w2nd WHERE T1.title = 'Addicio' ORDER BY T3.occurrences DESC LIMIT 1", "source_tables": ["pages_words", "pages", "biwords"]}, "evidence": "word pair refers to w1st.word w2nd.word; occurred the highest amount of times refers to max(occurrences); Addicio refers to title = 'Addicio'; times occurred refer to occurrences"}
{"sample_id": 5816, "db_id": "language_corpus", "final": {"question": "How many biwords pairs are there whose second word is \"grec\"?", "sql": "SELECT COUNT(T2.w1st) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w2nd WHERE T1.word = 'grec'", "source_tables": ["words", "biwords"]}, "evidence": "grec refers to word = 'grec'; wid where word = 'grec' AS w2nd"}
{"sample_id": 5688, "db_id": "language_corpus", "final": {"question": "List the titles for all Catalan language wikipedia page from revision page id 106600 to 106700.", "sql": "SELECT title FROM pages WHERE revision BETWEEN 106600 AND 106700", "source_tables": ["pages"]}, "evidence": "from revision page id 106600 to 106700 refers to revision BETWEEN 106600 AND 106700"}
{"sample_id": 5747, "db_id": "language_corpus", "final": {"question": "How many times does the Catalan word \"nombre\" repeat itself?", "sql": "SELECT T1.occurrences FROM langs_words AS T1 INNER JOIN words AS T2 ON T1.wid = T2.wid WHERE T2.word = 'nombre'", "source_tables": ["words", "langs_words"]}, "evidence": "the Catalan means Catalan language and refers to lid = 1; How many times repeat refers to occurrences;"}
{"sample_id": 5698, "db_id": "language_corpus", "final": {"question": "What is the title of the Catalan language Wikipedia page that has the highest number of different words?", "sql": "SELECT title FROM pages WHERE words = ( SELECT MAX(words) FROM pages )", "source_tables": ["pages"]}, "evidence": "highest number of different words refers to max(words)"}
{"sample_id": 5783, "db_id": "language_corpus", "final": {"question": "Which biwords pair has a higher occurrence, \"\u00e0bac-xin\u00e8s\" or \"\u00e0bac-grec\"?", "sql": "SELECT CASE WHEN ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xin\u00e8s' ) ) > ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = '\u00e0bac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'grec' ) ) THEN '\u00e0bac-xin\u00e8s' ELSE '\u00e0bac-grec' END AS CALUS FROM words LIMIT 1", "source_tables": ["words", "biwords"]}, "evidence": "higher occurrence is MAX(occurrences); \u00e0bac refers to word = '\u00e0bac'; xin\u00e8s refers to word = 'xin\u00e8s'; grec refers to word = 'grec'"}
{"sample_id": 5697, "db_id": "language_corpus", "final": {"question": "What is the word id of the catalan language that was repeated no more than 10 times in the said language?", "sql": "SELECT wid FROM langs_words WHERE occurrences <= 10", "source_tables": ["langs_words"]}, "evidence": "word id refers to wid; repeated no more than 10 times refers to occurrences < = 10"}
{"sample_id": 5765, "db_id": "language_corpus", "final": {"question": "State the total pages of the words that has repeated times of 2593.", "sql": "SELECT COUNT(T1.pages) FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T2.occurrences = 2593", "source_tables": ["langs", "langs_words"]}, "evidence": "repeated times of 2593 refers to occurrences = 2593;"}
{"sample_id": 5772, "db_id": "language_corpus", "final": {"question": "How many pages of Wikipedia are there in total on the Catalan language?", "sql": "SELECT pages FROM langs WHERE lang = 'ca'", "source_tables": ["langs"]}, "evidence": "Catalan language refers to lang = 'ca';"}
{"sample_id": 5763, "db_id": "language_corpus", "final": {"question": "What is the locale of the language of the page titled \"Abril\"?", "sql": "SELECT T1.locale FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Abril'", "source_tables": ["langs", "pages"]}, "evidence": "the page titled \"Abril\" refers to title = 'Abril';"}
{"sample_id": 5780, "db_id": "language_corpus", "final": {"question": "Please list the title of the pages on which the word \"grec\" occurred for over 20 times.", "sql": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences > 20", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "occurred for over 20 times refers to occurrences > 20;"}
{"sample_id": 5770, "db_id": "language_corpus", "final": {"question": "List out the total pages of the words that has repeated times more than 3000.", "sql": "SELECT T1.pages FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T2.occurrences > 3000 GROUP BY T1.pages", "source_tables": ["langs", "langs_words"]}, "evidence": "repeated more than 3000 times refers to occurrences > 3000;"}
{"sample_id": 5810, "db_id": "language_corpus", "final": {"question": "What is the word that occurs the most in the Catalan language?", "sql": "SELECT word FROM words WHERE occurrences = ( SELECT MAX(occurrences) FROM words )", "source_tables": ["words"]}, "evidence": "MAX(occurrences)"}
{"sample_id": 5759, "db_id": "language_corpus", "final": {"question": "State the Wikipedia page title that has revision page id of 28040864.", "sql": "SELECT title FROM pages WHERE revision = 28040864", "source_tables": ["pages"]}, "evidence": "revision page id of 28040864 refers to revision = 28040864;"}
{"sample_id": 5734, "db_id": "language_corpus", "final": {"question": "Calculate the average of repetitions in the pages that have a total of 100 different words.", "sql": "SELECT CAST(SUM(T2.occurrences) AS REAL) / COUNT(T1.page) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.words = 100", "source_tables": ["pages_words", "pages"]}, "evidence": "Repetition refers to occurrences; 100 different words refers to words = 100; DIVIDE(SUM(occurrences where words = 100), COUNT(page where words = 100)) as percentage;"}
{"sample_id": 5719, "db_id": "language_corpus", "final": {"question": "List down the words with word id from 1 to 10 and write down a paired word for each of them.", "sql": "SELECT T1.word AS W1, T3.word AS W2 FROM words AS T1 LEFT JOIN biwords AS T2 ON T1.wid = T2.w1st LEFT JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.wid <= 10 GROUP BY T1.wid", "source_tables": ["words", "biwords"]}, "evidence": "word id from 1 to 10 refers to wid BETWEEN 1 AND 10"}
{"sample_id": 5809, "db_id": "language_corpus", "final": {"question": "Please list the titles of all the Wikipedia pages on the Catalan language with 10 different words.", "sql": "SELECT title FROM pages WHERE lid = 1 AND words = 10 LIMIT 10", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; 10 different words refers to words = 10; titles refers to title"}
{"sample_id": 5803, "db_id": "language_corpus", "final": {"question": "How many biword pairs contain the word \"base\" as the second word?", "sql": "SELECT COUNT(w1st) FROM biwords WHERE w2nd = ( SELECT wid FROM words WHERE word = 'base' )", "source_tables": ["words", "biwords"]}, "evidence": "base refers to word = 'base'; SUM(w2nd) where w2nd = wid for word = 'base'"}
{"sample_id": 5738, "db_id": "language_corpus", "final": {"question": "Please list the top three most frequently occurring words and their ids.", "sql": "SELECT word, wid FROM words ORDER BY occurrences DESC LIMIT 3", "source_tables": ["words"]}, "evidence": "most frequently occurring words refer to MAX(occurrences); id refers to wid;"}
{"sample_id": 5801, "db_id": "language_corpus", "final": {"question": "Which word has the most appearances in the Wikipedia page revision ID No. 28278070? Give the word ID.", "sql": "SELECT pid FROM pages_words WHERE pid = ( SELECT pid FROM pages WHERE revision = 28278070 ) ORDER BY occurrences DESC LIMIT 1", "source_tables": ["pages_words", "pages"]}, "evidence": "the most appearances refers to MAX(occurrences); revision ID No. 28278070 refers to revision = 28278070; word ID refers to wid"}
{"sample_id": 5804, "db_id": "language_corpus", "final": {"question": "How many times of repetition does the word \"exemple\" show in the Catalan language?", "sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'exemple' AND T2.lid = 1", "source_tables": ["words", "langs_words"]}, "evidence": "exemple refers to word = 'exemple'; repetition refers to langs_words.occurrences; lid = 1 menas it's Catalan language"}
{"sample_id": 5692, "db_id": "language_corpus", "final": {"question": "List all the first words of the biwords pair where the second word is 'antic'.", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T2.w2nd = ( SELECT wid FROM words WHERE word = 'antic' )", "source_tables": ["words", "biwords"]}, "evidence": "first words refer to w1st.word; second word is 'antic' refers to w2nd.word = 'antic'"}
{"sample_id": 5756, "db_id": "language_corpus", "final": {"question": "List out the total pages of Wikipedia in Catalan language.", "sql": "SELECT pages FROM langs", "source_tables": ["langs"]}, "evidence": "This is not;"}
{"sample_id": 5752, "db_id": "language_corpus", "final": {"question": "What is the percentage of the words that have been repeated under 180 times in the Catalan language?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.occurrences < 180 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.lid) FROM langs AS T1 INNER JOIN langs_words AS T2 ON T1.lid = T2.lid WHERE T1.lang = 'ca'", "source_tables": ["langs", "langs_words"]}, "evidence": "repeated under 180 times refers to occurrences < 180; Catalan language refers to lang = 'ca'; DIVIDE(COUNT(words WHERE occurrences < 180 and lang = 'ca'), COUNT(words WHERE lang = 'ca')) as percentage;"}
{"sample_id": 5794, "db_id": "language_corpus", "final": {"question": "State the word ID for \"periodograma\".", "sql": "SELECT wid FROM words WHERE word = 'periodograma'", "source_tables": ["words"]}, "evidence": "word ID refers to wid; periodograma refers to word = 'periodograma'"}
{"sample_id": 5762, "db_id": "language_corpus", "final": {"question": "Which word that has 71303 appearance in the Catalan language?", "sql": "SELECT T1.word FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = 71303", "source_tables": ["words", "langs_words"]}, "evidence": "has 71303 appearance refers to occurrences = 71303;"}
{"sample_id": 5741, "db_id": "language_corpus", "final": {"question": "What is the percentage of words in the Catalan language that have a repetition of more than 16,000 times?", "sql": "SELECT CAST(COUNT(CASE WHEN occurrences > 16000 THEN lid ELSE NULL END) AS REAL) * 100 / COUNT(lid) FROM langs_words", "source_tables": ["langs_words"]}, "evidence": "words in the Catalan language refers lid = 1; repetition of more than 16,000 times refers to occurrences > 16000; DIVIDE(COUNT(words where lid = 1 and occurrences > 16000), COUNT(words where lid = 1)) as percentage;"}
{"sample_id": 5815, "db_id": "language_corpus", "final": {"question": "How many Wikipedia pages on Catalan are there with the word \"nombre\" appearing for more than 5 times?", "sql": "SELECT COUNT(T2.pid) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'nombre' AND T2.occurrences > 5", "source_tables": ["pages_words", "words"]}, "evidence": "nombre refers to word = 'nombre'; appear for more than 5 times refers to\u00a0 pages_words.occurrences > 5"}
{"sample_id": 5731, "db_id": "language_corpus", "final": {"question": "Indicate on how many different pages the word ripoll appears.", "sql": "SELECT T3.page FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'ripoll'", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "This is not;"}
{"sample_id": 5735, "db_id": "language_corpus", "final": {"question": "Which Wikipedia page number does the Catalan language's name, Acampada, appear on?", "sql": "SELECT page FROM pages WHERE title = 'Acampada'", "source_tables": ["pages"]}, "evidence": "Wikipedia page number refers to page; title = 'Acampada';"}
{"sample_id": 5767, "db_id": "language_corpus", "final": {"question": "How many word that has number of different words equal to 3?", "sql": "SELECT COUNT(T2.wid) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.words = 3", "source_tables": ["pages_words", "pages"]}, "evidence": "This is not;"}
{"sample_id": 5761, "db_id": "language_corpus", "final": {"question": "What is the locale of the language of the page titled \"Anys 90\"?", "sql": "SELECT T1.locale FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Anys 90'", "source_tables": ["langs", "pages"]}, "evidence": "page titled \"Anys 90\" refers to title = 'Anys 90';"}
{"sample_id": 5745, "db_id": "language_corpus", "final": {"question": "Please list any three Wikipedia pages that are written in Catalan, together with their titles and revision page numbers.", "sql": "SELECT title, revision FROM pages WHERE lid = 1 LIMIT 3", "source_tables": ["pages"]}, "evidence": "in Catalan means in Catalan-language and refers to lid = 1; revision page numbers refer to revision;"}
{"sample_id": 5818, "db_id": "language_corpus", "final": {"question": "Among the biwords pairs with \"\u00e0bac\" as its first word, how many of them have an occurrence of over 10?", "sql": "SELECT COUNT(T2.w2nd) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T1.word = '\u00e0bac' AND T2.occurrences > 10", "source_tables": ["words", "biwords"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; as first word refers to w1st; occurrence of over 10 refers to occurrences > 10"}
{"sample_id": 5728, "db_id": "language_corpus", "final": {"question": "Calculate the percentage of pages that have 1500 different words.", "sql": "SELECT CAST(COUNT(CASE WHEN words = 1500 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(page) FROM pages WHERE words > 300 LIMIT 3", "source_tables": ["pages"]}, "evidence": "DIVIDE(COUNT(pages WHERE words = 1500), COUNT(pages)) as percentage;"}
{"sample_id": 5755, "db_id": "language_corpus", "final": {"question": "How many words has the appearance times greater than 10?", "sql": "SELECT COUNT(w1st) AS countwords FROM biwords WHERE occurrences > 10", "source_tables": ["biwords"]}, "evidence": "appearance times greater than 10 refers to occurrences > 10;"}
{"sample_id": 5720, "db_id": "language_corpus", "final": {"question": "For corpus title \"Atomium\", pick 3 words appear in the title and calculate the total occurence of these words.", "sql": "SELECT T1.word, T1.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T2.pid = ( SELECT pid FROM pages WHERE title = 'Atomium' ) LIMIT 3", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "total occurrences refers to sum(occurrences)"}
{"sample_id": 5769, "db_id": "language_corpus", "final": {"question": "Calculate the average percentage of word appearance in the page that have revision page id smaller than 106680.", "sql": "SELECT CAST(SUM(T1.words) AS REAL) * 100 / SUM(T2.occurrences) FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T1.revision < 106680", "source_tables": ["pages_words", "pages"]}, "evidence": "revision page id smaller than 106680 refers to revision < 106680; word appearance refers to occurrences; DIVIDE(SUM(occurrences where revision < 106680), COUNT(occurrences)) as percentage;"}
{"sample_id": 5739, "db_id": "language_corpus", "final": {"question": "How frequently did the words 1 and 25 appear together?", "sql": "SELECT occurrences FROM biwords WHERE w1st = 1 AND w2nd = 25", "source_tables": ["biwords"]}, "evidence": "How frequently refers to occurrences;\u00a0 word 1 refers to wid = 1; word 25 refers to wid = 25; appear together means pair, which is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;\u00a0 w1st or w2nd = wid = 1; w1st or w2nd = wid = 25;"}
{"sample_id": 5724, "db_id": "language_corpus", "final": {"question": "What is the pair of words that is repeated the most times? Identify them by their ID.", "sql": "SELECT w1st, w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )", "source_tables": ["biwords"]}, "evidence": "repeated the most times refer to MAX(occurrences); pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word;"}
{"sample_id": 5696, "db_id": "language_corpus", "final": {"question": "In the Catalan language, which biwords pair appeared the most in this language/page?", "sql": "SELECT w1st, w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )", "source_tables": ["biwords"]}, "evidence": "biwords pair refers to w1st.word w2nd.word; appeared the most refers to max(occurrences)"}
{"sample_id": 5716, "db_id": "language_corpus", "final": {"question": "What are the total occurence of words that paired with \"nombre\"?", "sql": "SELECT SUM(T2.occurrences) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE T2.w1st IN (( SELECT wid FROM words WHERE word = 'nombre' ) OR T2.w2nd IN ( SELECT wid FROM words WHERE word = 'nombre' ))", "source_tables": ["words", "biwords"]}, "evidence": "total occurrence refers to sum(occurrences); paired with \"nombre\" refers to w1st.word = \"nombre\" or w2nd.word = \"nombre\""}
{"sample_id": 5814, "db_id": "language_corpus", "final": {"question": "Please list the page IDs of all the Wikipedia pages that have the word \"nombre\" appeared on it.", "sql": "SELECT T2.pid FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'nombre'", "source_tables": ["pages_words", "words"]}, "evidence": "nombre refers to word = 'nombre'; page IDs refers to pid"}
{"sample_id": 5813, "db_id": "language_corpus", "final": {"question": "Among the wikipedia pages on Catalan with more than 300 different words, how many of them have a revision ID of over 28330000?", "sql": "SELECT COUNT(lid) FROM pages WHERE lid = 1 AND words > 300 AND revision > 28330000", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; more than 300 different words refers to words > 300; revision ID of over 28330000 refers to revision > 28330000"}
{"sample_id": 5793, "db_id": "language_corpus", "final": {"question": "Which word has the time of occurrences as 340691?", "sql": "SELECT word FROM words WHERE occurrences = 340691", "source_tables": ["words"]}, "evidence": "occurrences of 340691 refers to occurrences = 340691"}
{"sample_id": 5796, "db_id": "language_corpus", "final": {"question": "How many times does the word \"riu\" appears in the biwords pair?", "sql": "SELECT COUNT(T1.wid) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = 'riu'", "source_tables": ["words", "biwords"]}, "evidence": "riu refers to word = 'riu'; SUM(w1st where wid is word = 'riu' AND w2nd where wid is word = 'riu')"}
{"sample_id": 5708, "db_id": "language_corpus", "final": {"question": "What is the average words of the 10 fewest words title?", "sql": "SELECT CAST(SUM(CASE WHEN words >= 10 THEN words ELSE 0 END) AS REAL) / SUM(CASE WHEN words >= 10 THEN 1 ELSE 0 END) FROM pages", "source_tables": ["pages"]}, "evidence": "average words = avg(words); 10 fewest words refers to words > = 10"}
{"sample_id": 5711, "db_id": "language_corpus", "final": {"question": "What is the title of corpus where word \"desena\" appear?", "sql": "SELECT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'desena'", "source_tables": ["pages_words", "pages", "words"]}, "evidence": "This is not"}
{"sample_id": 5721, "db_id": "language_corpus", "final": {"question": "Indicate which is the word that is repeated the most times.", "sql": "SELECT word FROM words WHERE occurrences = ( SELECT MAX(occurrences) FROM words )", "source_tables": ["words"]}, "evidence": "repeated the most times refer to MAX(occurrences);"}
{"sample_id": 5703, "db_id": "language_corpus", "final": {"question": "What are the word pairs that occured only twice?", "sql": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.occurrences = 2", "source_tables": ["words", "biwords"]}, "evidence": "word pair refers to w1st.word w2nd.word; occured only twice refers to occurrences = 2"}
{"sample_id": 5713, "db_id": "language_corpus", "final": {"question": "Is word id \"88\" the word id for title \"Animals\"?", "sql": "SELECT CASE WHEN COUNT(T1.pid) > 0 THEN 'YES' ELSE 'NO' END AS YORN FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.wid = 88 AND T1.title = 'Animals'", "source_tables": ["pages_words", "pages"]}, "evidence": "word id \"88\" refers to wid = 88"}
{"sample_id": 5753, "db_id": "language_corpus", "final": {"question": "What percentage of Catalan-language Wikipedia pages have more than 10,000 words?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.words > 10000 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.page) FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T1.lang = 'ca'", "source_tables": ["langs", "pages"]}, "evidence": "Catalan-language refers to lang = 'ca'; more than 10,000 words refer to\u00a0words > 10000; DIVIDE(COUNT(pages WHERE words > 10000 and lang = 'ca'), COUNT(pages WHERE lang = 'ca')) as percentage;"}
{"sample_id": 5790, "db_id": "language_corpus", "final": {"question": "Which word has the most repetitions in the Catalan language? Give the ID of the word.", "sql": "SELECT wid FROM langs_words WHERE occurrences = ( SELECT MAX(occurrences) FROM langs_words )", "source_tables": ["langs_words"]}, "evidence": "word with the most repetitions refers to MAX(occurrences); ID of the word refers to wid"}
{"sample_id": 5799, "db_id": "language_corpus", "final": {"question": "In which Wikipedia page does the word ID No. 174 have the most appearances? Give the title.", "sql": "SELECT title FROM pages WHERE pid = ( SELECT pid FROM pages_words WHERE wid = 174 ORDER BY occurrences DESC LIMIT 1 )", "source_tables": ["pages_words", "pages"]}, "evidence": "word ID No. 174 refers to wid = 174; appearances refers to pages_words_sampling.occurrences"}
{"sample_id": 5785, "db_id": "language_corpus", "final": {"question": "Please list all the biwords pairs with \"\u00e0bac\" as its first word.", "sql": "SELECT T1.word AS W1, T3.word AS W2 FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T1.word = '\u00e0bac'", "source_tables": ["words", "biwords"]}, "evidence": "\u00e0bac refers to word = '\u00e0bac'; first word refers to w1st"}
{"sample_id": 5732, "db_id": "language_corpus", "final": {"question": "How many words are repeated on the Llista de conflictes armats page?", "sql": "SELECT occurrences FROM pages_words WHERE pid = ( SELECT pid FROM pages WHERE title = 'Llista de conflictes armats' )", "source_tables": ["pages_words", "pages"]}, "evidence": "title = 'Llista de conflictes armats'; How many repeated refers to occurrences;"}
{"sample_id": 5791, "db_id": "language_corpus", "final": {"question": "What is the word ID for the second word for the biwords pair with most repetitions?", "sql": "SELECT w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )", "source_tables": ["biwords"]}, "evidence": "second word refers to w2nd; biwords pair with most repetitions refers to MAX(biwords.occurrences)"}
{"sample_id": 5737, "db_id": "language_corpus", "final": {"question": "How many times did the word number 8 appear?", "sql": "SELECT occurrences FROM words WHERE wid = 8", "source_tables": ["words"]}, "evidence": "word number 8 refers to wid = 8; How many times refer to occurrences;"}
{"sample_id": 5710, "db_id": "language_corpus", "final": {"question": "List down the page id of titles start with alphabet \"b\".", "sql": "SELECT pid FROM pages WHERE title LIKE 'b%'", "source_tables": ["pages"]}, "evidence": "start with alphabet \"b\" refers to title LIKE 'b%'"}
{"sample_id": 5757, "db_id": "language_corpus", "final": {"question": "How many words have repetitions greater than 2000 and lower than 5000?", "sql": "SELECT COUNT(wid) FROM langs_words WHERE occurrences BETWEEN '2000' AND '5000'", "source_tables": ["langs_words"]}, "evidence": "repetitions greater than 2000 and lower than 5000 refer to occurrences between 2000 and 5000;"}
{"sample_id": 5773, "db_id": "language_corpus", "final": {"question": "Please list the titles of the Wikipedia pages on the Catalan language with more than 4000 words.", "sql": "SELECT title FROM pages WHERE lid = 1 AND words > 4000", "source_tables": ["pages"]}, "evidence": "Catalan language refers to lid = 1; more than 4000 words refers to words > 4000;"}
{"sample_id": 5750, "db_id": "language_corpus", "final": {"question": "How many times on page number 44 does the word \"votives\" appear?", "sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'votives' AND T2.pid = 44", "source_tables": ["pages_words", "words"]}, "evidence": "How many times refers to occurrences; page number 44 refers to pid = 44;"}
{"sample_id": 5726, "db_id": "language_corpus", "final": {"question": "Calculate the average number of different words that appear on all pages whose title begins with A.", "sql": "SELECT AVG(words) FROM pages WHERE title LIKE 'A%'", "source_tables": ["pages"]}, "evidence": "DIVIDE(SUM(words WHERE title = 'A%'), COUNT(words WHERE title = 'A%')) as percentage; A is a letter;"}
{"sample_id": 5774, "db_id": "language_corpus", "final": {"question": "How many words are there on the page titled \"Asclepi\"?", "sql": "SELECT words FROM pages WHERE title = 'Asclepi'", "source_tables": ["pages"]}, "evidence": "page titled \"Asclepi\" refers to title = 'Asclepi' ;"}
{"sample_id": 5723, "db_id": "language_corpus", "final": {"question": "What is the title of the page that has the fewest words?", "sql": "SELECT title FROM pages WHERE title = ( SELECT MIN(words) FROM pages )", "source_tables": ["pages"]}, "evidence": "has the fewest words refers to MIN(COUNT(words));"}
{"sample_id": 5781, "db_id": "language_corpus", "final": {"question": "How many words are there on the page that the word \"grec\" has occurred for 52 times?", "sql": "SELECT SUM(T3.words) FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences = 52", "source_tables": ["pages", "pages_words", "words"]}, "evidence": "the word \"grec\" refers to word = 'grec'; occurred for 52 times refers to occurrences = 52"}
{"sample_id": 5775, "db_id": "language_corpus", "final": {"question": "Which of these pages have more words, the page titled \"Afluent\" or \"Asclepi\"?", "sql": "SELECT CASE WHEN ( SELECT words FROM pages WHERE title = 'Asclepi' ) > ( SELECT words FROM pages WHERE title = 'Afluent' ) THEN 'Asclepi' ELSE 'Afluent' END", "source_tables": ["pages"]}, "evidence": "COUNT(words where title = 'Afluent')> COUNT(words where title = 'Asclepi')"}
{"sample_id": 5808, "db_id": "language_corpus", "final": {"question": "How many Wikipedia pages with over 4000 different words are there on the Catalan language?", "sql": "SELECT COUNT(lid) FROM pages WHERE lid = 1 AND words > 4000", "source_tables": ["pages"]}, "evidence": "lid = 1 means it's Catalan language; over 4000 different words means words > 4000; Wikipedia pages refers to pid"}
{"sample_id": 5806, "db_id": "language_corpus", "final": {"question": "How many times greater is the appearances of the biword pair \"a base\" than \"a decimal\"?", "sql": "SELECT CAST(occurrences AS REAL) / ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'a' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'decimal' ) ) FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'a' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'base' )", "source_tables": ["words", "biwords"]}, "evidence": "a, base AND decimal are words; wid is the ID of word; w1st is the first word of a biword pair; w2nd is the second word of a biword pair; appearances refers to biwords.occurrences; biword pair 'a base' refers to word = 'a' as w1st AND word = 'base' as w2nd; biword pair 'a decimal' refers to word = 'a' as w1st AND word = 'decimal' as w2nd; appearances of 'a base' greater than 'a decimal' refers to DIVIDE(SUBTRACT(biwords.occurrences'a base', biwords.occurrences'a decimal'), biwords.occurrences'a decimal')"}
{"sample_id": 5845, "db_id": "airline", "final": {"question": "How many planes of Spirit Air Lines took off on 2018/8/7?", "sql": "SELECT COUNT(T2.Code) FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/7' AND T2.Description = 'Spirit Air Lines: NK'", "source_tables": ["airlines", "air carriers"]}, "evidence": "Spirit Air Lines refers to Description = 'Spirit Air Lines: NK'; on 2018/8/7 refers to FL_DATE = '2018/8/7';"}
{"sample_id": 5903, "db_id": "airline", "final": {"question": "What is the tail number of the flight with air carrier named Iscargo Hf: ICQ and arrival time of 1000 and below?", "sql": "SELECT T2.TAIL_NUM FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_TIME <= 1000 AND T1.Description = 'Iscargo Hf: ICQ'", "source_tables": ["airlines", "air carriers"]}, "evidence": "tail number refers to TAIL_NUM; Iscargo Hf: ICQ refers to Description = 'Iscargo Hf: ICQ'; arrival time of 1000 and below refers to ARR_TIME < = 1000;"}
{"sample_id": 5898, "db_id": "airline", "final": {"question": "List the air carrier's description of the flights with 0 departure delay.", "sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEP_DELAY = 0 GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "0 departure delay refers to DEP_DELAY = 0;"}
{"sample_id": 5877, "db_id": "airline", "final": {"question": "How many flights from Dallas to Santa Ana departed on time?", "sql": "SELECT COUNT(*) FROM Airlines WHERE DEST = 'SNA' AND ORIGIN = 'DFW' AND DEP_DELAY = 0", "source_tables": ["airlines"]}, "evidence": "from Dallas refers to ORIGIN = 'DFW'; to Santa Ana refers to DEST = 'SNA'; departed on time refers to DEP_DELAY = 0;"}
{"sample_id": 5861, "db_id": "airline", "final": {"question": "On August 2018, which day had the highest number of cancelled flights due to the most serious reasons in Dallas/Fort Worth International?", "sql": "SELECT T2.FL_DATE FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International' AND T2.ORIGIN = 'DFW' AND T2.CANCELLED = 1 AND T2.CANCELLATION_CODE = 'A' GROUP BY T2.FL_DATE ORDER BY COUNT(T2.FL_DATE) DESC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "On August 2018 refers to FL_DATE like '2018/8%'; day with the highest number of cancelled flights refers to MAX(COUNT(FL_DATE WHERE CANCELLED = 1)); cancelled due to the most serious reasons refers to CANCELLATION_CODE = 'A'; in Dallas/Fort Worth International refers to Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International';"}
{"sample_id": 5884, "db_id": "airline", "final": {"question": "How many airports have a code starting with the letter C?", "sql": "SELECT COUNT(*) FROM Airports WHERE Code LIKE 'C%'", "source_tables": ["airports"]}, "evidence": "code starting with the letter C refers to Code like 'C%';"}
{"sample_id": 5868, "db_id": "airline", "final": {"question": "What is the tail number of a Compass Airline's plane that flew the most number of flights from LAX to ABQ?", "sql": "SELECT T2.OP_CARRIER_AIRLINE_ID FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Compass Airlines: CP' AND T2.ORIGIN = 'LAX' AND T2.DEST = 'ABQ' GROUP BY T2.OP_CARRIER_AIRLINE_ID ORDER BY COUNT(T2.OP_CARRIER_AIRLINE_ID) DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "tail number refers to TAIL_NUM; Compass Airline refers to Description = 'Compass Airlines: CP'; flew the most number of lights from LAX TO ABQ refers to MAX(COUNT(OP_CARRIER_AIRLINE_ID WHERE ORIGIN = 'LAX' and DEST = 'ABQ')); from LAX refers to ORIGIN = 'LAX'; to ABQ refers to DEST = 'ABQ';"}
{"sample_id": 5890, "db_id": "airline", "final": {"question": "Provide the origin of the flight that has the shortest actual elapsed time.", "sql": "SELECT ORIGIN FROM Airlines ORDER BY ACTUAL_ELAPSED_TIME ASC LIMIT 1", "source_tables": ["airlines"]}, "evidence": "shortest actual elapsed time refers to MIN(ACTUAL_ELAPSED_TIME);"}
{"sample_id": 5823, "db_id": "airline", "final": {"question": "Please list the dates of the flights that were cancelled due to the most serious reason.", "sql": "SELECT FL_DATE FROM Airlines WHERE CANCELLATION_CODE = 'A' GROUP BY FL_DATE", "source_tables": ["airlines"]}, "evidence": "dates of the flights refers to FL_DATE; cancelled refers to CANCELLED = 1; most serious reason refers to CANCELLATION_CODE = 'A';"}
{"sample_id": 5822, "db_id": "airline", "final": {"question": "Please list the destination cities of all the flights that were cancelled on 2018/8/1.", "sql": "SELECT DEST FROM Airlines WHERE FL_DATE = '2018/8/1' AND CANCELLED = 1 GROUP BY DEST", "source_tables": ["airlines"]}, "evidence": "destination cities refers to DEST; cancelled refers to CANCELLED = 1; on 2018/8/1 refers to FL_DATE = '2018/8/1';"}
{"sample_id": 5829, "db_id": "airline", "final": {"question": "How many flights on 2018/8/1 were operated by American Airlines Inc.?", "sql": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1' AND T3.Description = 'American Airlines Inc.: AA'", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA';"}
{"sample_id": 5891, "db_id": "airline", "final": {"question": "Provide the date and tail number of flight with air carrier \"Ross Aviation Inc.: GWE\".", "sql": "SELECT T1.FL_DATE, T1.TAIL_NUM FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T2.Description = 'Ross Aviation Inc.: GWE'", "source_tables": ["airlines", "air carriers"]}, "evidence": "date of flight refers to FL_DATE; tail number of flight refers to TAIL_NUM; Ross Aviation Inc.: GWE refers to Description = 'Ross Aviation Inc.: GWE';"}
{"sample_id": 5872, "db_id": "airline", "final": {"question": "Please list any three airports with their codes.", "sql": "SELECT Code, Description FROM Airports LIMIT 3", "source_tables": ["airports"]}, "evidence": ""}
{"sample_id": 5879, "db_id": "airline", "final": {"question": "Which flight carrier operator has the most cancelled flights?", "sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.CANCELLED DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "flight carrier operator refers to OP_CARRIER_AIRLINE_ID; most cancelled flights refers to MAX(COUNT(CANCELLED = 1));"}
{"sample_id": 5843, "db_id": "airline", "final": {"question": "How many flights from American Airlines were cancelled due to a type A cancellation code?", "sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.CANCELLATION_CODE = 'A' AND T2.Description = 'American Airlines Inc.: AA' AND T1.CANCELLED = 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "American Airlines refers to Description = 'American Airlines Inc.: AA'; cancelled refers to Cancelled = 1; cancelled due to type A cancellation code refers to CANCELLATION_CODE = 'A';"}
{"sample_id": 5858, "db_id": "airline", "final": {"question": "What is the origin airport id that recorded the longest delay due to a late aircraft?", "sql": "SELECT ORIGIN_AIRPORT_ID FROM Airlines ORDER BY LATE_AIRCRAFT_DELAY DESC LIMIT 1", "source_tables": ["airlines"]}, "evidence": "origin airport id refers to ORIGIN_AIRPORT_ID; longest delay due to a late aircraft refers to MAX(LATE_AIRCRAFT_DELAY);"}
{"sample_id": 5867, "db_id": "airline", "final": {"question": "What is the name of the airline that flew the most flights to Chicago Midway International?", "sql": "SELECT T3.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T1.Description = 'Chicago, IL: Chicago Midway International' AND T2.DEST = 'MDW' GROUP BY T3.Description ORDER BY COUNT(T3.Description) DESC LIMIT 1", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "name of the airline refers to Description; flights to refers to DEST; Chicago Midway International refers to Description = 'Chicago, IL: Chicago Midway International'; most flights to Chicago Midway International refers to MAX(COUNT(DEST WHERE Description = 'Chicago, IL: Chicago Midway International'));"}
{"sample_id": 5826, "db_id": "airline", "final": {"question": "For the flight on 2018/8/1 that was delayed for the longest time, which was the destination airport of this flight?", "sql": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/1' ORDER BY T2.DEP_DELAY DESC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1';\u00a0 delayed for the longest time refers to MAX(DEP_DELAY); destination airport refers to DEST;"}
{"sample_id": 5830, "db_id": "airline", "final": {"question": "Please list the flight numbers of all the flights operated by American Airlines Inc. that were scheduled to depart from John F. Kennedy International.", "sql": "SELECT T2.OP_CARRIER_FL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' AND T1.Description = 'New York, NY: John F. Kennedy International' AND T2.FL_DATE = '2018/8/1'", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "flight numbers refers to OP_CARRIER_FL_NUM; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; depart from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International';"}
{"sample_id": 5892, "db_id": "airline", "final": {"question": "List the air carrier description and code of the flight with the shortest arrival time.", "sql": "SELECT T1.Description, T1.Code FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ARR_TIME ASC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "shortest arrival time refers to MIN(ARR_TIME);"}
{"sample_id": 5856, "db_id": "airline", "final": {"question": "How long was the longest minute delay caused by a weather problem in airport id 12264?", "sql": "SELECT WEATHER_DELAY FROM Airlines WHERE ORIGIN_AIRPORT_ID = 12264 ORDER BY WEATHER_DELAY DESC LIMIT 1", "source_tables": ["airlines"]}, "evidence": "longest minute delay caused by a weather problem refers to MAX(WEATHER_DELAY); airport id refers to ORIGIN_AIRPORT_ID; ORIGIN_AIRPORT_ID = 12264;"}
{"sample_id": 5820, "db_id": "airline", "final": {"question": "How many flights were there on 2018/8/1?", "sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1'", "source_tables": ["airlines"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1';"}
{"sample_id": 5869, "db_id": "airline", "final": {"question": "Which airport did Republic Airline fly the most from?", "sql": "SELECT T2.DEST FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Republic Airline: YX' GROUP BY T2.DEST ORDER BY COUNT(T2.DEST) DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "Republic Airline refers to Description = 'Republic Airline: YX'; fly the most from refers to MAX(COUNT(ORIGIN));"}
{"sample_id": 5827, "db_id": "airline", "final": {"question": "Among the flights departing from John F. Kennedy International, how many of them arrived earlier than scheduled?", "sql": "SELECT SUM(CASE WHEN T2.ARR_DELAY < 0 THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'New York, NY: John F. Kennedy International'", "source_tables": ["airlines", "airports"]}, "evidence": "departing from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International'; arrived earlier than scheduled refers to ARR_DELAY < 0;"}
{"sample_id": 5849, "db_id": "airline", "final": {"question": "Tell the number of flights that landed at Lake Charles Regional Airport on 2018/8/15.", "sql": "SELECT COUNT(T1.Code) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/15' AND T1.Description = 'Lake Charles, LA: Lake Charles Regional'", "source_tables": ["airlines", "airports"]}, "evidence": "landed at refers to DEST; Lake Charles Regional Airport refers to Description = 'Lake Charles, LA: Lake Charles Regional'; on 2018/8/15 refers to FL_DATE = '2018/8/15';"}
{"sample_id": 5900, "db_id": "airline", "final": {"question": "What are the destinations of the flights with air carrier description \"Southeast Alaska Airlines: WEB\"?", "sql": "SELECT T2.DEST FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Southeast Alaska Airlines: WEB'", "source_tables": ["airlines", "air carriers"]}, "evidence": "destinations refers to DEST; Southeast Alaska Airlines: WEB refers to Description = 'Southeast Alaska Airlines: WEB';"}
{"sample_id": 5906, "db_id": "airline", "final": {"question": "What are the air carriers of the flights that flew on August 25, 2018 that have departure delay of -5?", "sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.FL_DATE = '2018/8/25' GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "on August 25, 2018 refers to FL_DATE = '2018/8/25'; departure delay of -5 refers to DEP_DELAY = -5;"}
{"sample_id": 5821, "db_id": "airline", "final": {"question": "Among the flights on 2018/8/1, how many of them departed from an airport in New York?", "sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'JFK'", "source_tables": ["airlines"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; departed from an airport in New York refers to ORIGIN = 'JFK';"}
{"sample_id": 5907, "db_id": "airline", "final": {"question": "Provide the air carrier description of the flight with a tail number N922US from Phoenix.", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T2.Code = T1.OP_CARRIER_AIRLINE_ID WHERE T1.TAIL_NUM = 'N922US' AND T1.ORIGIN = 'PHX' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "tail number refers to TAIL_NUM; TAIL_NUM = 'N922US'; from Phoenix refers to ORIGIN = 'PHX';"}
{"sample_id": 5844, "db_id": "airline", "final": {"question": "How many flights of Endeavor Air Inc. were faster than scheduled on 2018/8/31?", "sql": "SELECT SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS count FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/31' AND T2.Description = 'Endeavor Air Inc.: 9E'", "source_tables": ["airlines", "air carriers"]}, "evidence": "Endeavor Air Inc. refers to Description = 'Endeavor Air Inc.: 9E'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME; on 2018/8/31 refers to FL_DATE = '2018/8/31';"}
{"sample_id": 5893, "db_id": "airline", "final": {"question": "How many flights of air carrier called JetBlue Airways: B6 have 0 new arrival delay?", "sql": "SELECT COUNT(*) FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%JetBlue Airways: B6%' AND T2.ARR_DELAY_NEW = 0", "source_tables": ["airlines", "air carriers"]}, "evidence": "JetBlue Airways refers to Description = '%JetBlue Airway%'; 0 new arrival delay refers to ARR_DELAY_NEW = 0;"}
{"sample_id": 5825, "db_id": "airline", "final": {"question": "Among the flights on 2018/8/1, how many of them were scheduled to depart from John F. Kennedy International in New York?", "sql": "SELECT COUNT(T1.Code) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T1.Description = 'New York, NY: John F. Kennedy International'", "source_tables": ["airlines", "airports"]}, "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; depart from refers to ORIGIN; John F. Kennedy International in New York refers to Description = 'New York, NY: John F. Kennedy International';"}
{"sample_id": 5848, "db_id": "airline", "final": {"question": "For the flight from ATL to PHL on 2018/8/1 that scheduled local departure time as \"2040\", which air carrier does this flight belong to?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/1' AND T1.ORIGIN = 'ATL' AND T1.DEST = 'PHL' AND T1.CRS_DEP_TIME = '2040' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "flight from ATL refers to ORIGIN = 'ATL'; flight to PHL refers to DEST = 'PHL'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; local departure time refers to CRS_DEP_TIME; CRS_DEP_TIME = '2040';"}
{"sample_id": 5828, "db_id": "airline", "final": {"question": "Among all the flights scheduled to depart from John F. Kennedy International on 2018/8/1, when was the earliest one scheduled to depart?", "sql": "SELECT T2.DEP_TIME FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T1.Description = 'New York, NY: John F. Kennedy International' AND T2.DEP_TIME IS NOT NULL ORDER BY T2.DEP_TIME ASC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "depart from refers to ORIGIN; John F. Kennedy International refers to Description = 'New York, NY: John F. Kennedy International'; on 2018/8/1 refers to FL_DATE = '2018/8/1'; earliest one scheduled to depart refers to MIN(DEP_TIME);"}
{"sample_id": 5874, "db_id": "airline", "final": {"question": "What is the scheduled local departure time and the actual departure time of the flight from Philadelphia to Harrisburg with the plane's tail number N627AE on the 13th of August 2018?", "sql": "SELECT CRS_DEP_TIME, DEP_TIME FROM Airlines WHERE ORIGIN = 'PHL' AND DEST = 'MDT' AND TAIL_NUM = 'N627AE' AND FL_DATE = '2018/8/13'", "source_tables": ["airlines"]}, "evidence": "scheduled local departure time refers to CRS_DEP_TIME; actual departure time refers to DEP_TIME; from Philadelphia refers to ORIGIN = 'PHL'; to Harrisburg refers to DEST = 'MDT'; tail number refers to TAIL_NUM; TAIL_NUM = 'N627AE'; on the 13th of August 2018 refers to FL_DATE = '2018/8/13';"}
{"sample_id": 5876, "db_id": "airline", "final": {"question": "What is the only flight destination for flights from Albany?", "sql": "SELECT DEST FROM Airlines WHERE ORIGIN = 'ABY' GROUP BY DEST", "source_tables": ["airlines"]}, "evidence": "flight destination refers to DEST; from Albany refers to ORIGIN = 'ABY';"}
{"sample_id": 5905, "db_id": "airline", "final": {"question": "Among the flights with air carrier named Republic Airline, how many of the flights have departure delay of 30 minutes and above?", "sql": "SELECT COUNT(*) FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%Republic Airline%' AND T2.DEP_DELAY > 30", "source_tables": ["airlines", "air carriers"]}, "evidence": "Republic Airline refers to Description which contains 'Republic Airline'; departure delay of 30 minutes and above refers to DEP_DELAY > 30;"}
{"sample_id": 5832, "db_id": "airline", "final": {"question": "What is the flight number of the flight operated by American Airlines Inc. that had the longest delay in departure?", "sql": "SELECT T1.OP_CARRIER_FL_NUM FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T1.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA' ORDER BY T1.DEP_TIME DESC LIMIT 1", "source_tables": ["airlines", "airports", "air carriers"]}, "evidence": "flight numbers refers to OP_CARRIER_FL_NUM; American Airlines Inc. refers to Description = 'American Airlines Inc.: AA'; longest delay in departure refers to MAX(DEP_DELAY);"}
{"sample_id": 5883, "db_id": "airline", "final": {"question": "What is the total number of flights that have Oklahoma as their origin?", "sql": "SELECT COUNT(*) AS num FROM Airlines WHERE Origin = 'OKC'", "source_tables": ["airlines"]}, "evidence": "Oklahoma as origin refers to Origin = 'OKC';"}
{"sample_id": 5870, "db_id": "airline", "final": {"question": "Which airline does the aircraft with the fastest flight belong to?", "sql": "SELECT T1.OP_CARRIER_AIRLINE_ID FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ACTUAL_ELAPSED_TIME IS NOT NULL AND T1.CRS_ELAPSED_TIME IS NOT NULL ORDER BY T1.ACTUAL_ELAPSED_TIME - T1.CRS_ELAPSED_TIME ASC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "fastest flight refers to MIN(SUBTRACT(ACTUAL_ELAPSED_TIME, CRS_ELAPSED_TIME));"}
{"sample_id": 5838, "db_id": "airline", "final": {"question": "What is the number of air carriers in the database?", "sql": "SELECT COUNT(Code) FROM \"Air Carriers\"", "source_tables": ["air carriers"]}, "evidence": ""}
{"sample_id": 5847, "db_id": "airline", "final": {"question": "Provide the name of the airport which landed the most number of flights on 2018/8/15.", "sql": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/15' ORDER BY T2.DEST DESC LIMIT 1", "source_tables": ["airlines", "airports"]}, "evidence": "name of the airport refers to Description; airport that landed the most number of flights refers to MAX(COUNT(DEST)); on 2018/8/15 refers to FL_DATE = '2018/8/15';"}
{"sample_id": 5885, "db_id": "airline", "final": {"question": "Provide the destinations of flight number 1596.", "sql": "SELECT DEST FROM Airlines WHERE OP_CARRIER_FL_NUM = 1596", "source_tables": ["airlines"]}, "evidence": "destination refers to DEST; flight number refers to OP_CARRIER_FL_NUM; OP_CARRIER_FL_NUM = 1596;"}
{"sample_id": 5854, "db_id": "airline", "final": {"question": "How many flights departed on time on 8/1/2018?", "sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND DEP_DELAY <= 0", "source_tables": ["airlines"]}, "evidence": "departed on time refers to DEP_DELAY < = 0; on 8/1/2018 refers to FL_DATE = '2018/8/1';"}
{"sample_id": 5850, "db_id": "airline", "final": {"question": "How many flights were there from San Diego International airport to Los Angeles International airport in the August of 2018?", "sql": "SELECT COUNT(FL_DATE) FROM Airlines WHERE FL_DATE LIKE '2018/8%' AND ORIGIN = ( SELECT T2.ORIGIN FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'San Diego, CA: San Diego International' ) AND DEST = ( SELECT T4.DEST FROM Airports AS T3 INNER JOIN Airlines AS T4 ON T3.Code = T4.DEST WHERE T3.Description = 'Los Angeles, CA: Los Angeles International' )", "source_tables": ["airlines", "airports"]}, "evidence": "flights from refers to ORIGIN; San Diego International airport refers to Description = 'San Diego, CA: San Diego International'; flights to refers to DEST; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International';\u00a0in the August of 2018 refers to FL_DATE like '2018/8%';"}
{"sample_id": 5902, "db_id": "airline", "final": {"question": "What is the total number of flights that flew on August 2, 2018 with air carrier described as Horizon Air?", "sql": "SELECT COUNT(*) FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description LIKE '%Horizon Air%' AND T2.FL_DATE = '2018/8/2'", "source_tables": ["airlines", "air carriers"]}, "evidence": "on August 2, 2018 refers to FL_DATE = '2018/8/2'; Horizon Air refers to Description which includs 'Horizon Air';"}
{"sample_id": 5862, "db_id": "airline", "final": {"question": "List the tail numbers of all the aircraft that arrived on time at Meadows Field airport in August of 2018?", "sql": "SELECT T2.TAIL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Bakersfield, CA: Meadows Field' AND T2.DEST = 'BFL' AND T2.ARR_DELAY <= 0 GROUP BY T2.TAIL_NUM", "source_tables": ["airlines", "airports"]}, "evidence": "tail number refers to TAIL_NUM; arrived on time refers to ARR_DELAY < = 0; Meadows Field airport refers to Description = 'Bakersfield, CA: Meadows Field'; in August of 2018 refers to FL_DATE like '2018/8%';"}
{"sample_id": 5882, "db_id": "airline", "final": {"question": "What is the airport description of the airport code A11?", "sql": "SELECT Description FROM Airports WHERE Code = 'A11'", "source_tables": ["airports"]}, "evidence": ""}
{"sample_id": 5896, "db_id": "airline", "final": {"question": "Give the actual elapsed time of the flights with air carrier named Semo Aviation Inc.: SEM.", "sql": "SELECT T2.ACTUAL_ELAPSED_TIME FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Semo Aviation Inc.: SEM'", "source_tables": ["airlines", "air carriers"]}, "evidence": "actual elapsed time refers to ACTUAL_ELAPSED_TIME; Semo Aviation Inc.: SEM. Refers to Description = 'Semo Aviation Inc.: SEM';"}
{"sample_id": 5859, "db_id": "airline", "final": {"question": "How many flights depart to Hartsfield-Jackson Atlanta International from Chicago O'Hare International?", "sql": "SELECT COUNT(FL_DATE) FROM Airlines WHERE ORIGIN = ( SELECT T2.ORIGIN FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'Chicago, IL: Chicago O''Hare International' ) AND DEST = ( SELECT T4.DEST FROM Airports AS T3 INNER JOIN Airlines AS T4 ON T3.Code = T4.DEST WHERE T3.Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International' )", "source_tables": ["airlines", "airports"]}, "evidence": "depart to refers to DEST; Hartsfield-Jackson Atlanta International refers to Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International'; depart from refers to ORIGIN; Chicago O'Hare International refes to Description = 'Chicago, IL: Chicago O'Hare International';"}
{"sample_id": 5895, "db_id": "airline", "final": {"question": "What is the air carrier's description of the cancelled flights?", "sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.CANCELLED = 1 GROUP BY T1.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "cancelled flights refers to CANCELLED = 1;"}
{"sample_id": 5871, "db_id": "airline", "final": {"question": "How many hours in total did all of the Delta Air Lines aircraft were delayed due to a late aircraft in August of 2018? Identify the plane number of the aircraft with the highest delayed hours.", "sql": "SELECT T1.TAIL_NUM, SUM(CAST(T1.LATE_AIRCRAFT_DELAY AS REAL) / 60) AS delay FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T2.Code = T1.OP_CARRIER_AIRLINE_ID WHERE T1.FL_DATE LIKE '2018/8/%' AND T2.Description = 'Delta Air Lines Inc.: DL' ORDER BY delay DESC LIMIT 1", "source_tables": ["airlines", "air carriers"]}, "evidence": "hours in total = DIVIDE(SUM(LATE_AIRCRAFT_DELAY), 60); Delta Air Lines refers to Description = 'Delta Air Lines Inc.: DL'; delayed due to a late aircraft refers to LATE_AIRCRAFT_DELAY; in August of 2018 refers to FL_DATE like '2018/8/%'; plane number refers to TAIL_NUM; highest delayed hours refers to MAX(DIVIDE(SUM(LATE_AIRCRAFT_DELAY),60));"}
{"sample_id": 5846, "db_id": "airline", "final": {"question": "For the flight with the tail number 'N702SK', which air carrier does it belong to?", "sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.TAIL_NUM = 'N702SK' GROUP BY T2.Description", "source_tables": ["airlines", "air carriers"]}, "evidence": "tail number refers to TAIL_NUM; TAIL_NUM = 'N702SK';"}
{"sample_id": 5901, "db_id": "airline", "final": {"question": "From August 10 to August 20, 2018, how many cancelled flights of air carrier named Spirit Air Lines: NK are there?", "sql": "SELECT COUNT(*) FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Spirit Air Lines: NK' AND T2.CANCELLED = 0 AND T2.FL_DATE BETWEEN '2018/8/10' AND '2018/8/20'", "source_tables": ["airlines", "air carriers"]}, "evidence": "From August 10 to August 20, 2018 refers to FL_DATE BETWEEN '2018/8/10' AND '2018/8/20'; cancelled flights refers to CANCELLED = 1; Trans Southern Airways: 'Spirit Air Lines: NK' refers to Description = 'Spirit Air Lines: NK';"}
{"sample_id": 5824, "db_id": "airline", "final": {"question": "Please list the departure airports of the flights on 2018/8/1 that were delayed.", "sql": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T2.DEP_DELAY > 0 GROUP BY T1.Description", "source_tables": ["airlines", "airports"]}, "evidence": "departure airports refers ORIGIN; on 2018/8/1 refers to FL_DATE = '2018/8/1'; delayed refers to DEP_DELAY > 0;"}
{"sample_id": 5967, "db_id": "books", "final": {"question": "List the title of the books purchased by the customer named Zia Roizin.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Zia' AND T4.last_name = 'Roizin'", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": ""}
{"sample_id": 6066, "db_id": "books", "final": {"question": "Write the full name of the customers whose address is at 55 Dorton Pass, Huangqiao.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id WHERE T3.street_number = 55 AND T3.street_name = 'Dorton Pass' AND T3.city = 'Huangqiao'", "source_tables": ["address", "customer", "customer_address"]}, "evidence": "full name refers to first_name, last_name; '55' is the street_number, 'Dorton Pass' is the street_name; 'Huangqiao' is the city"}
{"sample_id": 5951, "db_id": "books", "final": {"question": "How many orders were delivered in 2021?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND STRFTIME('%Y', T2.status_date) = '2021'", "source_tables": ["order_status", "order_history"]}, "evidence": "delivered refers to status_value = 'Delivered'; in 2021 refers to status_date LIKE '2021%'"}
{"sample_id": 6081, "db_id": "books", "final": {"question": "What is the order price of the book \"The Servant Leader\" in 2003?", "sql": "SELECT T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Servant Leader' AND STRFTIME('%Y', T1.publication_date) = '2003'", "source_tables": ["book", "order_line"]}, "evidence": "\"The Servant Leader\" is the title of the book; book in 2003 refers to SUBSTR(publication_date, 1, 4) = '2003'"}
{"sample_id": 5914, "db_id": "books", "final": {"question": "What is the name of the publisher of the book \"The Illuminati\"?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Illuminati'", "source_tables": ["book", "publisher"]}, "evidence": "\"The Illuminati\" is the title of the book; name of publisher refers to publisher_name"}
{"sample_id": 6055, "db_id": "books", "final": {"question": "List all the books published by BBC Audiobooks.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'BBC Audiobooks'", "source_tables": ["book", "publisher"]}, "evidence": "\"BBC Audiobooks\" refers to publisher_name; books refers to title"}
{"sample_id": 6070, "db_id": "books", "final": {"question": "List all books written in Arabic.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Arabic'", "source_tables": ["book", "book_language"]}, "evidence": "\"Arabic\" is the language_name; book refers to title"}
{"sample_id": 5959, "db_id": "books", "final": {"question": "What is the name of the publisher with publisher ID 22?", "sql": "SELECT publisher_name FROM publisher WHERE publisher_id = 22", "source_tables": ["publisher"]}, "evidence": "name of publisher refers to publisher_name"}
{"sample_id": 5996, "db_id": "books", "final": {"question": "List all the order dates for the customer named \"Adrian Kunzelmann\".", "sql": "SELECT T3.order_date FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Adrian' AND T4.last_name = 'Kunzelmann'", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": ""}
{"sample_id": 6018, "db_id": "books", "final": {"question": "How many customers ordered the oldest book?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id GROUP BY T1.publication_date ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["book", "order_line"]}, "evidence": "oldest book refers to Min(publiation_date)"}
{"sample_id": 5987, "db_id": "books", "final": {"question": "Provide the customers' names who ordered the Fantasmas.", "sql": "SELECT T4.first_name, T4.last_name FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'Fantasmas'", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": "\"Fantasmas\" is the title of the book; customer names refers to first_name, last_name"}
{"sample_id": 5966, "db_id": "books", "final": {"question": "Among the books that cost less than 1 dollar, how many were published by Berkley Trade?", "sql": "SELECT COUNT(*) FROM publisher AS T1 INNER JOIN book AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN order_line AS T3 ON T3.book_id = T2.book_id WHERE T1.publisher_name = 'Berkley' AND T3.price < 1", "source_tables": ["book", "order_line", "publisher"]}, "evidence": "book cost less than 1 dollar refers to price < 1; 'Berkley Trade' is the publisher_name;"}
{"sample_id": 5993, "db_id": "books", "final": {"question": "What is the most common domain for the email address among all the customers?", "sql": "SELECT SUBSTR(email, INSTR(email, '@') + 1, LENGTH(email) - INSTR(email, '@')) AS ym FROM customer GROUP BY SUBSTR(email, INSTR(email, '@') + 1, LENGTH(email) - INSTR(email, '@')) ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["customer"]}, "evidence": "most common domain for the email refers to Max(Count(SUBSTR(email, CHARINDEX('@', email) + 1, length(email) - charindex('@', email))))"}
{"sample_id": 6099, "db_id": "books", "final": {"question": "Provide the ISBN and price of the book with book ID 7160.", "sql": "SELECT T1.isbn13, T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.book_id = 6503", "source_tables": ["book", "order_line"]}, "evidence": "ISBN refers to isbn13;"}
{"sample_id": 5926, "db_id": "books", "final": {"question": "How much money on average does Lucas Wyldbore spend on book orders?", "sql": "SELECT SUM(T1.price) / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'", "source_tables": ["customer", "cust_order", "order_line"]}, "evidence": "average spend on book orders = AVG (price)"}
{"sample_id": 5982, "db_id": "books", "final": {"question": "How many books were published in Japanese?", "sql": "SELECT COUNT(T2.book_id) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id WHERE T1.language_name = 'Japanese'", "source_tables": ["book", "book_language"]}, "evidence": "published in Japanese refers to language_name = 'Japanese'"}
{"sample_id": 5916, "db_id": "books", "final": {"question": "What is the name of the publisher that has published the most number of books?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T1.book_id) DESC LIMIT 1", "source_tables": ["book", "publisher"]}, "evidence": "name of publisher refers to publisher_name; publisher published the most number of books refers to Max(Count(book_id))"}
{"sample_id": 5980, "db_id": "books", "final": {"question": "How many books were published by Ace Hardcover?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Ace Hardcover'", "source_tables": ["book", "publisher"]}, "evidence": "\"Ace Hardcover\" is the publisher_name"}
{"sample_id": 5955, "db_id": "books", "final": {"question": "List all the names of the books written by Danielle Steel.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Danielle Steel'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"Danielle Steel\" is the author_name; name of books refers to title"}
{"sample_id": 6049, "db_id": "books", "final": {"question": "Provide the full address of Ursola Purdy.", "sql": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.first_name = 'Ursola' AND T1.last_name = 'Purdy'", "source_tables": ["address", "customer", "country", "customer_address"]}, "evidence": "full address refers to street_number, street_name, city, country_name"}
{"sample_id": 5917, "db_id": "books", "final": {"question": "Please give the title of the oldest book published by publisher \"Thomas Nelson\".", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["book", "publisher"]}, "evidence": "\"Thomas Nelson\" is the publisher_name; oldest book refers to Min(publication_date)"}
{"sample_id": 6037, "db_id": "books", "final": {"question": "What is the status of the orders placed on 04/10/2022?", "sql": "SELECT DISTINCT T1.status_value FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id WHERE T3.order_date LIKE '2022-04-10%'", "source_tables": ["order_status", "cust_order", "order_history"]}, "evidence": "placed on 04/10/2022 refers to SUBSTR(order_date, 1, 10) = '2022-04-10'; status of order refers to status_value"}
{"sample_id": 5970, "db_id": "books", "final": {"question": "List the author's name of the books published by Abrams.", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T4.publisher_name = 'Abrams'", "source_tables": ["book_author", "book", "author", "publisher"]}, "evidence": "\"Abrams\" is the publisher_name; author's name refers to author_name"}
{"sample_id": 5969, "db_id": "books", "final": {"question": "List the email of customers that bought the book titled Switch on the Night.", "sql": "SELECT T4.email FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T1.title = 'Switch on the Night'", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": "\"Switch on the Night\" is the title"}
{"sample_id": 5932, "db_id": "books", "final": {"question": "How many books were published by Kensington?", "sql": "SELECT COUNT(T1.book_id) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Kensington'", "source_tables": ["book", "publisher"]}, "evidence": "\"Kensington\" is the publisher_name;"}
{"sample_id": 6040, "db_id": "books", "final": {"question": "List the titles of all the books that Peter H. Smith wrote.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Peter H. Smith'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"Peter H.Smit\" is the author_name"}
{"sample_id": 6043, "db_id": "books", "final": {"question": "What is the average number of pages in the books written by Jennifer Crusie?", "sql": "SELECT AVG(T1.num_pages) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Jennifer Crusie'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"Jennifer Crusie\" is the author_name; average number of pages refers to AVG(num_pages)"}
{"sample_id": 6038, "db_id": "books", "final": {"question": "What is the highest price at which a customer bought the book 'The Prophet'?", "sql": "SELECT MAX(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'The Prophet'", "source_tables": ["book", "order_line"]}, "evidence": "\"The Prophet\" is the title of the book; highest price refers to Max(price)"}
{"sample_id": 6107, "db_id": "books", "final": {"question": "In books published by Ace Book, what is the percentage of English books published?", "sql": "SELECT CAST(SUM(CASE WHEN T1.language_name = 'English' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T3.publisher_name = 'Ace Book'", "source_tables": ["book", "book_language", "publisher"]}, "evidence": "\"Ace Book\" is the publisher_name; English book refers to language_name = 'English'; percentage = Divide (Count(book_id where language_name = 'English'), Count(book_id)) * 100"}
{"sample_id": 5913, "db_id": "books", "final": {"question": "What is the publication date of the book with the most pages?", "sql": "SELECT publication_date FROM book ORDER BY num_pages DESC LIMIT 1", "source_tables": ["book"]}, "evidence": "book with the most pages refers to Max(num_pages)"}
{"sample_id": 6058, "db_id": "books", "final": {"question": "Among all orders updated in 2022, identify the percentage that has been returned.", "sql": "SELECT CAST(SUM(CASE WHEN T1.status_value = 'Returned' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE STRFTIME('%Y', T2.status_date) = '2022'", "source_tables": ["order_status", "order_history"]}, "evidence": "order updated in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'; has been returned refers to status_value = 'Returned'; percentage = Divide (Count(status_value = 'Returned'), Count(status_value)) * 100"}
{"sample_id": 6088, "db_id": "books", "final": {"question": "What is the percentage of books that cost greater than $10 and were ordered by customer Ruthanne Vatini?", "sql": "SELECT CAST(SUM(CASE WHEN T1.price > 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Ruthanne' AND T3.last_name = 'Vatini'", "source_tables": ["customer", "cust_order", "order_line"]}, "evidence": "cost greater than $10 refers to price > 10; percentage = Divide (Count(book_id where price >10), Count(book_id)) * 100; full name refers to the composition of first name, lastname"}
{"sample_id": 6002, "db_id": "books", "final": {"question": "How many of the customer addresses are inactive?", "sql": "SELECT COUNT(*) FROM customer_address AS T1 INNER JOIN address_status AS T2 ON T1.status_id = T2.status_id WHERE T2.address_status = 'Inactive'", "source_tables": ["address_status", "customer_address"]}, "evidence": "addresses are inactive refers to address_status = 'Inactive'"}
{"sample_id": 6086, "db_id": "books", "final": {"question": "Name the publisher who published the most books.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1", "source_tables": ["book", "publisher"]}, "evidence": "published the most books refers to Max(Count(book_id)); publisher refers to publisher_name"}
{"sample_id": 6069, "db_id": "books", "final": {"question": "What is the shipping method ordered by Nicolette Sadler at 6/29/2020 7:40:07 PM?", "sql": "SELECT T3.method_name FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T1.shipping_method_id WHERE T2.first_name = 'Nicolette' AND T2.last_name = 'Sadler' AND T1.order_date = '2020-06-29 19:40:07'", "source_tables": ["customer", "cust_order", "shipping_method"]}, "evidence": "ordered at 6/29/2020 7:40:07 PM refers to order_date = '2020-06-29 19:40:07'; shipping method refers to method_name"}
{"sample_id": 6071, "db_id": "books", "final": {"question": "Which language is 'El plan infinito' written in?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'El plan infinito'", "source_tables": ["book", "book_language"]}, "evidence": "\"El plan infinito\" is the title of the book; language refers to language_name"}
{"sample_id": 6057, "db_id": "books", "final": {"question": "Provide the International Standard Book Number of the book The Mystery in the Rocky Mountains.", "sql": "SELECT isbn13 FROM book WHERE title = 'The Mystery in the Rocky Mountains'", "source_tables": ["book"]}, "evidence": "International Standard Book Number refers to isbn13; 'The Mystery in the Rocky Mountains' is the title of the book"}
{"sample_id": 5948, "db_id": "books", "final": {"question": "What is the full name of the customer who ordered the most books of all time?", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["customer", "cust_order"]}, "evidence": "customer who ordered the most book refers to customer_id where Max(count(order_id)); full name refers to first_name, last_name"}
{"sample_id": 6047, "db_id": "books", "final": {"question": "Who is the author of the book with the biggest page count?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.num_pages DESC LIMIT 1", "source_tables": ["book_author", "book", "author"]}, "evidence": "author refers to author_name, biggest page count refers to Max(num_pages)"}
{"sample_id": 5942, "db_id": "books", "final": {"question": "What is the average number of pages of David Coward's books?", "sql": "SELECT AVG(T1.num_pages) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'David Coward'", "source_tables": ["book_author", "book", "author"]}, "evidence": "number of pages refers to num_pages; average = Divide (Sum(num_pages), Count(book_id))"}
{"sample_id": 5973, "db_id": "books", "final": {"question": "Among the books published in 2004, list the name of the publisher of books with number of pages greater than 70% of the average number of pages of all books.", "sql": "SELECT T1.title, T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE STRFTIME('%Y', T1.publication_date) = '2004' AND T1.num_pages * 100 > ( SELECT AVG(num_pages) FROM book ) * 70", "source_tables": ["book", "publisher"]}, "evidence": "published in 2004 refers to publication_date LIKE '2004%'; books with number of pages greater than 70% of the average number of pages refers to num_pages > Multiply(Avg(num_pages), 0.7); name of publisher refers to publisher_name"}
{"sample_id": 5927, "db_id": "books", "final": {"question": "Among the books ordered by Lucas Wyldbore, what is the percentage of those books over $13?", "sql": "SELECT CAST(SUM(CASE WHEN T1.price > 13 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'", "source_tables": ["customer", "cust_order", "order_line"]}, "evidence": "books over $13 refers to price > 13; percentage = Divide (Sum (order_id where price > 13), Count (order_id)) * 100"}
{"sample_id": 6012, "db_id": "books", "final": {"question": "How many customers use a Yahoo! Mail e-mail address?", "sql": "SELECT COUNT(*) FROM customer WHERE email LIKE '%@yahoo.com'", "source_tables": ["customer"]}, "evidence": "Yahoo! Mail e-mail address refers to email LIKE '%@yahoo.com'"}
{"sample_id": 6017, "db_id": "books", "final": {"question": "What is the most expensive price paid by a customer for the book \"Bite Me If You Can (Argeneau #6)\"?", "sql": "SELECT MAX(T2.price) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'Bite Me If You Can (Argeneau #6)'", "source_tables": ["book", "order_line"]}, "evidence": "\"Bite Me If You Can (Argeneau #6)\" is the title of the book; most expensive price refers to Max(price)"}
{"sample_id": 5929, "db_id": "books", "final": {"question": "How many orders has Cordy Dumbarton made?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Cordy' AND T1.last_name = 'Dumbarton'", "source_tables": ["customer", "cust_order"]}, "evidence": ""}
{"sample_id": 6056, "db_id": "books", "final": {"question": "How many books were published in 2017?", "sql": "SELECT COUNT(*) FROM book WHERE STRFTIME('%Y', publication_date) = '2017'", "source_tables": ["book"]}, "evidence": "published in 2017 refers to Substr(publication_date,1, 4) = '2017'"}
{"sample_id": 5943, "db_id": "books", "final": {"question": "What is the cost of the slowest and least expensive shipping method?", "sql": "SELECT method_name FROM shipping_method ORDER BY cost ASC LIMIT 1", "source_tables": ["shipping_method"]}, "evidence": "slowest and least expesive method refers to shipping_method = 'Standard'"}
{"sample_id": 5938, "db_id": "books", "final": {"question": "Which country does Malina Johnson live in?", "sql": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.first_name = 'Malina' AND T1.last_name = 'Johnson' AND T2.status_id = 2", "source_tables": ["address", "customer", "country", "customer_address"]}, "evidence": "country refers to country_name"}
{"sample_id": 5974, "db_id": "books", "final": {"question": "Provide the contact email of Moss Zarb.", "sql": "SELECT email FROM customer WHERE first_name = 'Moss' AND last_name = 'Zarb'", "source_tables": ["customer"]}, "evidence": ""}
{"sample_id": 6075, "db_id": "books", "final": {"question": "Which book has the most number of pages?", "sql": "SELECT title FROM book ORDER BY num_pages DESC LIMIT 1", "source_tables": ["book"]}, "evidence": "books with the most number of pages refers to Max(num_pages)"}
{"sample_id": 6061, "db_id": "books", "final": {"question": "Who is the author of First Things First?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'First Things First'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"First Things First\" is the title of the book; author refers to author_name"}
{"sample_id": 5935, "db_id": "books", "final": {"question": "Name the book title of the bestseller.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id GROUP BY T1.title ORDER BY COUNT(T1.title) DESC LIMIT 1", "source_tables": ["book", "order_line"]}, "evidence": "book title refers to title; best sellers refers to title where Max(count(order_id))"}
{"sample_id": 6104, "db_id": "books", "final": {"question": "Give the publisher's name of the books authored by Alan Lee.", "sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Alan Lee' GROUP BY T4.publisher_name", "source_tables": ["book_author", "book", "author", "publisher"]}, "evidence": "\"Alan Lee\" is the author_name; publisher's name refers to publisher_name"}
{"sample_id": 6006, "db_id": "books", "final": {"question": "Which customer has the most addresses?", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(T2.customer_id) DESC LIMIT 1", "source_tables": ["customer", "customer_address"]}, "evidence": "customer refers to first_name, last_name; the most address refers to Max(count(address_id))"}
{"sample_id": 5920, "db_id": "books", "final": {"question": "How many books are in English?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'English'", "source_tables": ["book", "book_language"]}, "evidence": "books in English refers to language_name = 'English'"}
{"sample_id": 6094, "db_id": "books", "final": {"question": "Among the books published by Birlinn in 2008, how many books have pages around 600 to 700?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Birlinn' AND STRFTIME('%Y', T1.publication_date) = '2008' AND T1.num_pages BETWEEN 600 AND 700", "source_tables": ["book", "publisher"]}, "evidence": "\"Birlinn\" is the publisher_name; books have pages around 600 to 700 refers to num_pages BETWEEN 600 AND 700; in 2008 refers to SUBSTR(publication_date, 1, 4) = '2008'"}
{"sample_id": 6036, "db_id": "books", "final": {"question": "Identify by their id all the orders that have been cancelled.", "sql": "SELECT T2.order_id FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Cancelled'", "source_tables": ["order_status", "order_history"]}, "evidence": "have been cancelled refers to status_value = 'cancelled'; id refers to order_id"}
{"sample_id": 6073, "db_id": "books", "final": {"question": "What is the average number of book pages written by Zilpha Keatley Snyder?", "sql": "SELECT AVG(T3.num_pages) FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id INNER JOIN book AS T3 ON T3.book_id = T1.book_id WHERE T2.author_name = 'Zilpha Keatley Snyder'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"Zilpha Keatley Snyder\" is the author_name; average number of book pages refers to AVG(num_pages)"}
{"sample_id": 6108, "db_id": "books", "final": {"question": "Among the books purchased by less than 1 dollar, what is the difference between the number of books with less than 500 pages and books with greater than 500 pages?", "sql": "SELECT SUM(CASE WHEN T1.num_pages < 500 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.num_pages > 500 THEN 1 ELSE 0 END) AS dif FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.price < 1", "source_tables": ["book", "order_line"]}, "evidence": "book purchased by less than 1 dollar refers to price < 1; books with less than 500 pages refers to num_pages < 500; greater than 500 pages refers to num_pages > 500; Difference = Subtract (Count(book_id where num_pages < 500), Count(book_id where num_pages > 500))"}
{"sample_id": 6109, "db_id": "books", "final": {"question": "What are the language and title of the ordered books with price less than 20% of the average price of all ordered books?", "sql": "SELECT DISTINCT T3.language_name, T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id INNER JOIN book_language AS T3 ON T3.language_id = T2.language_id WHERE T1.price * 100 < ( SELECT AVG(price) FROM order_line ) * 20", "source_tables": ["book", "book_language", "order_line"]}, "evidence": "language refers to language_name; books with price less than 20% of the average price refers to price < Multiply (AVG(price), 0.2)"}
{"sample_id": 6015, "db_id": "books", "final": {"question": "Which books have the most expensive price?", "sql": "SELECT T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id ORDER BY T1.price DESC LIMIT 1", "source_tables": ["book", "order_line"]}, "evidence": "most expensive book refers to Max(price)"}
{"sample_id": 6046, "db_id": "books", "final": {"question": "List every book that Ursola Purdy has ordered.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Ursola' AND T4.last_name = 'Purdy'", "source_tables": ["customer", "book", "cust_order", "order_line"]}, "evidence": "book refers to title"}
{"sample_id": 6098, "db_id": "books", "final": {"question": "How many books were published by Brava in 2006?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Brava' AND STRFTIME('%Y', T1.publication_date) = '2006'", "source_tables": ["book", "publisher"]}, "evidence": "\"Brava\" is the publisher_name; in 2006 refers to SUBSTR(publication_date, 1, 4) = '2006'"}
{"sample_id": 5977, "db_id": "books", "final": {"question": "Count the number of books written by Orson Scott Card.", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Orson Scott Card'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"Orson Scott Card\" is the author_name"}
{"sample_id": 6004, "db_id": "books", "final": {"question": "What is the address that received the most orders?", "sql": "SELECT T2.street_name, T2.city FROM cust_order AS T1 INNER JOIN address AS T2 ON T1.dest_address_id = T2.address_id GROUP BY T2.street_number, T2.street_name, T2.city ORDER BY COUNT(T1.dest_address_id) DESC LIMIT 1", "source_tables": ["address", "cust_order"]}, "evidence": "address refers to street_name, city; received the most orders refers to Max(count(dest_address_id))"}
{"sample_id": 6030, "db_id": "books", "final": {"question": "Indicate the full name of all customers whose last name begins with the letter K.", "sql": "SELECT first_name, last_name FROM customer WHERE last_name LIKE 'K%'", "source_tables": ["customer"]}, "evidence": "full name refers to first_name, last_name; last name begin with the letter 'K' refers to last_name LIKE 'K%'"}
{"sample_id": 5945, "db_id": "books", "final": {"question": "What is the full name of the customer who owns the \"aalleburtonkc@yellowbook.com\" e-mail address?", "sql": "SELECT first_name, last_name FROM customer WHERE email = 'aalleburtonkc@yellowbook.com'", "source_tables": ["customer"]}, "evidence": "\"aalleburtonkc@yellowbook.com\" is the email of customer; full name refers to first_name, last_name"}
{"sample_id": 5971, "db_id": "books", "final": {"question": "What is the publisher name of the book titled The Illuminati?", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Illuminati'", "source_tables": ["book", "publisher"]}, "evidence": "\"The Illuminati\" is the title of book"}
{"sample_id": 6106, "db_id": "books", "final": {"question": "Write down the author's name of the book most recently published.", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.publication_date DESC LIMIT 1", "source_tables": ["book_author", "book", "author"]}, "evidence": "author's name refers to author_name; book most recently published refers to Max(publication_date)"}
{"sample_id": 5912, "db_id": "books", "final": {"question": "Among the books published by publisher ID 1929, how many of them have over 500 pages?", "sql": "SELECT COUNT(*) FROM book WHERE publisher_id = 1929 AND num_pages > 500", "source_tables": ["book"]}, "evidence": "books have over 500 pages refers to num_pages > 500"}
{"sample_id": 5944, "db_id": "books", "final": {"question": "What is the title of the first book that was published in 1900?", "sql": "SELECT title FROM book WHERE STRFTIME('%Y', publication_date) = '1900' ORDER BY publication_date LIMIT 1", "source_tables": ["book"]}, "evidence": "published in 1900 refers to publication_date LIKE '1900%'; first book refers to Min(publication_date)"}
{"sample_id": 6054, "db_id": "books", "final": {"question": "How many orders have been cancelled in 2022?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Cancelled' AND STRFTIME('%Y', T2.status_date) = '2022'", "source_tables": ["order_status", "order_history"]}, "evidence": "cancelled refers to status_value = 'Cancelled'; in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'"}
{"sample_id": 5961, "db_id": "books", "final": {"question": "List the author's and publisher's name of the book published on July 10, 1997.", "sql": "SELECT T3.author_name, T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T1.publication_date = '1997-07-10'", "source_tables": ["book_author", "book", "author", "publisher"]}, "evidence": "author's name refers to author_name; publisher's name refers to publisher_name; book published on July 10, 1997 refers to publication_date LIKE '1997-07-10'"}
{"sample_id": 6093, "db_id": "books", "final": {"question": "Provide the publisher name of the book with ISBN 76092025986.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.isbn13 = 76092025986", "source_tables": ["book", "publisher"]}, "evidence": "\"76092025986\" is the isbn13"}
{"sample_id": 6025, "db_id": "books", "final": {"question": "Indicate the last number of each street.", "sql": "SELECT street_number FROM address", "source_tables": ["address"]}, "evidence": "street refers to street_name; last number of each street refers to Substr (street_number, -1)"}
{"sample_id": 5921, "db_id": "books", "final": {"question": "Please list the titles of all the books in British English.", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'British English'", "source_tables": ["book", "book_language"]}, "evidence": "\"British English\" is the language_name of the book"}
{"sample_id": 5985, "db_id": "books", "final": {"question": "How many customers are from Australia?", "sql": "SELECT COUNT(*) FROM customer_address AS T1 INNER JOIN address AS T2 ON T2.address_id = T1.address_id INNER JOIN country AS T3 ON T3.country_id = T2.country_id WHERE T3.country_name = 'Australia'", "source_tables": ["address", "customer_address", "country"]}, "evidence": "\"Australia\" is the country_name;"}
{"sample_id": 5952, "db_id": "books", "final": {"question": "What is the name of the first book written by J.K Rowling?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'J.K. Rowling' ORDER BY T1.publication_date ASC LIMIT 1", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"J.K Rowling\" is the author_name; first published book refers to book_id where Min(publication_date); name of the book refers to title"}
{"sample_id": 5933, "db_id": "books", "final": {"question": "Which language was book id 1405 written in?", "sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T1.book_id = 1405", "source_tables": ["book", "book_language"]}, "evidence": "language written in refers to language_name;"}
{"sample_id": 6077, "db_id": "books", "final": {"question": "Name the title of books written by author A.J.Ayer.", "sql": "SELECT T3.title FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id INNER JOIN book AS T3 ON T3.book_id = T1.book_id WHERE T2.author_name = 'A.J. Ayer'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"A.J. Ayer\" is the author_name;"}
{"sample_id": 6011, "db_id": "books", "final": {"question": "How many authors are named Adam?", "sql": "SELECT COUNT(*) FROM author WHERE author_name LIKE 'Adam%'", "source_tables": ["author"]}, "evidence": "authors named Adam refers to author_name LIKE 'Adam'"}
{"sample_id": 6063, "db_id": "books", "final": {"question": "Which book by Hirohiko Araki was published on 6/6/2006?", "sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Hirohiko Araki' AND T1.publication_date = '2006-06-06'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"Hirohiko Araki\" is the author_name; on 6/6/2006 refers to publication_date = '2006-06-06'; which book refers to title"}
{"sample_id": 5975, "db_id": "books", "final": {"question": "Name the streets in Dallas.", "sql": "SELECT street_name FROM address WHERE city = 'Dallas'", "source_tables": ["address"]}, "evidence": "\"Dallas\" is the city; streets refers to street_name"}
{"sample_id": 6041, "db_id": "books", "final": {"question": "How many books under 300 pages has HarperCollins Publishers published?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'HarperCollins Publishers' AND T1.num_pages < 300", "source_tables": ["book", "publisher"]}, "evidence": "under 300 pages refers to num_pages < 300; 'HarperCollins Publishers\" is the publisher_name"}
{"sample_id": 5958, "db_id": "books", "final": {"question": "What is the total shipping cost of all the orders made by Page Holsey? Indicate how many of the said orders were ordered in 2022.", "sql": "SELECT SUM(T3.cost) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Page' AND T1.last_name = 'Holsey' AND STRFTIME('%Y', T2.order_date) = '2022'", "source_tables": ["customer", "shipping_method", "cust_order"]}, "evidence": "shipping cost refers to cost; ordered in 2022 refers to order_date LIKE '2022%'"}
{"sample_id": 6044, "db_id": "books", "final": {"question": "What percentage of the orders placed by Kaleena were shipped by the international method?", "sql": "SELECT CAST(SUM(CASE WHEN T3.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Kaleena'", "source_tables": ["customer", "shipping_method", "cust_order"]}, "evidence": "shipped by international method refers to method_name = 'International'; percentage = Divide (Sum(method_name = 'International'), Count(method_name)) * 100"}
{"sample_id": 5990, "db_id": "books", "final": {"question": "Which year has the most customer orders?", "sql": "SELECT strftime('%Y', order_date) FROM cust_order GROUP BY strftime('%Y', order_date) ORDER BY COUNT(strftime('%Y', order_date)) DESC LIMIT 1", "source_tables": ["cust_order"]}, "evidence": "year with the most customer orders refers to Max(count(order_id))"}
{"sample_id": 6097, "db_id": "books", "final": {"question": "Provide the title of the books published in British-English.", "sql": "SELECT DISTINCT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'British English'", "source_tables": ["book", "book_language"]}, "evidence": "\"British English\" is the language_name of the book"}
{"sample_id": 6005, "db_id": "books", "final": {"question": "How much time does it take to update the status of order \"2398\"?", "sql": "SELECT strftime('%J', T2.status_date) - strftime('%J', T1.order_date) FROM cust_order AS T1 INNER JOIN order_history AS T2 ON T1.order_id = T2.order_id WHERE T1.order_id = 2398", "source_tables": ["cust_order", "order_history"]}, "evidence": "\"2398\" is the order_id; time = \u00a0 Subtract(strftime('%Y', status_date), strftime('%Y', order_date)) AS \"year\" , Subtract(strftime('%m', status_date), strftime('%m', order_date)) AS \"month\", Subtract (strftime('%d', status_date), strftime('%d', order_date)) AS \"day\""}
{"sample_id": 6039, "db_id": "books", "final": {"question": "On what dates were books ordered at a price of 16.54?", "sql": "SELECT T1.order_date FROM cust_order AS T1 INNER JOIN order_line AS T2 ON T1.order_id = T2.order_id WHERE T2.price = 16.54", "source_tables": ["cust_order", "order_line"]}, "evidence": "price of 16.54 refers to price = 16.54; dates the book ordered refers to order_date"}
{"sample_id": 5978, "db_id": "books", "final": {"question": "Provide the authors and titles of the books which have more than 3000 pages.", "sql": "SELECT T3.author_name, T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.num_pages > 3000", "source_tables": ["book_author", "book", "author"]}, "evidence": "authors refers to author_name; more than 3000 pages refers to num_pages > 3000"}
{"sample_id": 5928, "db_id": "books", "final": {"question": "Which city does the address id 547 belong to?", "sql": "SELECT city FROM address WHERE address_id = 547", "source_tables": ["address"]}, "evidence": ""}
{"sample_id": 6102, "db_id": "books", "final": {"question": "Provide the email of the customers that purchased books with a price range of 3 to 5 dollars.", "sql": "SELECT DISTINCT T3.email FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T1.price BETWEEN 3 AND 5", "source_tables": ["customer", "cust_order", "order_line"]}, "evidence": "books with a price range of 3 to 5 dollars refers to price BETWEEN 3 AND 5"}
{"sample_id": 5941, "db_id": "books", "final": {"question": "Calculate the percentage of the International shipping orders on 2022/11/10.", "sql": "SELECT CAST(SUM(CASE WHEN T1.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipping_method AS T1 INNER JOIN cust_order AS T2 ON T1.method_id = T2.shipping_method_id WHERE T2.order_date LIKE '2022-11-10%'", "source_tables": ["cust_order", "shipping_method"]}, "evidence": "International shipping order refers to method_name = 'International'; orders on 2022/11/10 refers to order_date LIKE '2022-11-10%'; percentage = Divide (Sum(order_id\u00a0 where method_name = 'International'), Count(order_id)) * 100"}
{"sample_id": 5946, "db_id": "books", "final": {"question": "How many orders in 2022 have Iran as their destinations?", "sql": "SELECT COUNT(*) FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id INNER JOIN cust_order AS T3 ON T3.dest_address_id = T2.address_id WHERE T1.country_name = 'Iran' AND STRFTIME('%Y', T3.order_date) = '2022'", "source_tables": ["address", "cust_order", "country"]}, "evidence": "Iran as their destination refers to country_name = 'Iran'; orders in 2022 refers to order_date LIKE '2022%'"}
{"sample_id": 5989, "db_id": "books", "final": {"question": "List all the authors named \"George\".", "sql": "SELECT author_name FROM author WHERE author_name LIKE 'George%'", "source_tables": ["author"]}, "evidence": "author named 'George' refers to author_name = 'George%'"}
{"sample_id": 5925, "db_id": "books", "final": {"question": "What is the total price of all the books ordered by Lucas Wyldbore?", "sql": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Lucas' AND T3.last_name = 'Wyldbore'", "source_tables": ["customer", "cust_order", "order_line"]}, "evidence": "total price refers to Sum(price)"}
{"sample_id": 5947, "db_id": "books", "final": {"question": "Among Daisey Lamball's orders, how many were shipped via International shipping?", "sql": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Daisey' AND T1.last_name = 'Lamball' AND T3.method_name = 'International'", "source_tables": ["customer", "shipping_method", "cust_order"]}, "evidence": "via international shipping refers to method_name = 'International'"}
{"sample_id": 6008, "db_id": "books", "final": {"question": "List all the authors who wrote fewer pages than the average.", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.num_pages < ( SELECT AVG(num_pages) FROM book )", "source_tables": ["book_author", "book", "author"]}, "evidence": "author refers to author_name; who wrote fewer pages than the average refers to num_pages < AVG(num_pages)"}
{"sample_id": 5994, "db_id": "books", "final": {"question": "How many publishers have the word \"book\" in their name?", "sql": "SELECT COUNT(*) FROM publisher WHERE publisher_name LIKE '%book%'", "source_tables": ["publisher"]}, "evidence": "publisher have the word 'book' refers to publisher_name LIKE '%book%'"}
{"sample_id": 6103, "db_id": "books", "final": {"question": "List the ISBN of the books that cost 7.5 dollars.", "sql": "SELECT T1.isbn13 FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.price = 7.5", "source_tables": ["book", "order_line"]}, "evidence": "ISBN refers to isbn13; books cost 7.5 dollars refers to price = 7.5"}
{"sample_id": 6083, "db_id": "books", "final": {"question": "How many books were ordered by customer Kandy Adamec?", "sql": "SELECT COUNT(*) FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T3.first_name = 'Kandy' AND T3.last_name = 'Adamec'", "source_tables": ["customer", "cust_order", "order_line"]}, "evidence": ""}
{"sample_id": 5936, "db_id": "books", "final": {"question": "How many books did David Foster Wallace write?", "sql": "SELECT COUNT(T1.title) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'David Foster Wallace'", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"David Foster Wallace\" is the author_name;"}
{"sample_id": 6076, "db_id": "books", "final": {"question": "How many books were written by author A.J. Ayer?", "sql": "SELECT COUNT(*) FROM book_author AS T1 INNER JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.author_name = 'A.J. Ayer'", "source_tables": ["book_author", "author"]}, "evidence": "\"A.J. Ayer\" is the author_name;"}
{"sample_id": 6033, "db_id": "books", "final": {"question": "What is the full name of the customers who live in Baiyin city?", "sql": "SELECT T3.first_name, T3.last_name FROM address AS T1 INNER JOIN customer_address AS T2 ON T1.address_id = T2.address_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id WHERE T1.city = 'Baiyin'", "source_tables": ["customer", "address", "customer_address"]}, "evidence": "full name refers to first_name, last_name; 'Baiyin' is the city"}
{"sample_id": 5939, "db_id": "books", "final": {"question": "Give the number of Ukrainian addresses in the database.", "sql": "SELECT COUNT(*) FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'Ukraine'", "source_tables": ["address", "country"]}, "evidence": "Ukrainian address refers to country_name = 'Ukraine'"}
{"sample_id": 5934, "db_id": "books", "final": {"question": "Which customer has made the most orders? Show his/her full name.", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["customer", "cust_order"]}, "evidence": "most order refers to Max(Count(order_id)); customer refers to first_name, last_name"}
{"sample_id": 5956, "db_id": "books", "final": {"question": "How many books by William Shakespeare were published by Penguin Classics?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'William Shakespeare' AND T4.publisher_name = 'Penguin Classics'", "source_tables": ["book_author", "book", "author", "publisher"]}, "evidence": "\"William Shakespeare\" is the author_name; \"Penguin Classics\" is the publisher_name"}
{"sample_id": 5998, "db_id": "books", "final": {"question": "Who is the author who wrote the most books?", "sql": "SELECT T1.author_name FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_name ORDER BY COUNT(T2.author_id) DESC LIMIT 1", "source_tables": ["book_author", "author"]}, "evidence": "author refers to author_name; who wrote the most book refers to Max(Count(author_id))"}
{"sample_id": 6016, "db_id": "books", "final": {"question": "How many customers ordered the book titled \"Anleitung zum Zickigsein\"", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'Anleitung zum Zickigsein'", "source_tables": ["book", "order_line"]}, "evidence": "\"Anleitung zum Zickigsein\" is the title of the book"}
{"sample_id": 6034, "db_id": "books", "final": {"question": "What is the email of the customers who place their orders with priority method?", "sql": "SELECT T1.email FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T3.method_name = 'Priority'", "source_tables": ["customer", "shipping_method", "cust_order"]}, "evidence": "priority method refers to method_name = 'Priority'"}
{"sample_id": 6003, "db_id": "books", "final": {"question": "What is the book with the most orders?", "sql": "SELECT T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id GROUP BY T2.title ORDER BY COUNT(T1.book_id) DESC LIMIT 1", "source_tables": ["book", "order_line"]}, "evidence": "books refers to title; the most orders refers to Max(Count(order_id))"}
{"sample_id": 6050, "db_id": "books", "final": {"question": "Who is the author of the book The Mystery in the Rocky Mountains?", "sql": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'The Mystery in the Rocky Mountains'", "source_tables": ["book_author", "book", "author"]}, "evidence": "author refers to author_name; 'The Mystery in the Rocky Mountains' is the title of the book"}
{"sample_id": 6060, "db_id": "books", "final": {"question": "How many pages does 'Seaward' have?", "sql": "SELECT num_pages FROM book WHERE title = 'Seaward'", "source_tables": ["book"]}, "evidence": "\"Seaward\" is the title of the book; pages refers to num_pages"}
{"sample_id": 6051, "db_id": "books", "final": {"question": "Identify the publisher of the book Girls' Night In.", "sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'Girls'' Night In'", "source_tables": ["book", "publisher"]}, "evidence": "\"Girls' Night In\" is the title of the book; publisher is the publisher_name"}
{"sample_id": 5960, "db_id": "books", "final": {"question": "How many of the books authored by Al Gore have less than 400 pages?", "sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Al Gore' AND T1.num_pages < 400", "source_tables": ["book_author", "book", "author"]}, "evidence": "\"AI Gore\" is the author_name; have less than 400 pages refers to num_pages < 400"}
{"sample_id": 6007, "db_id": "books", "final": {"question": "What percentage of the total prices of all orders are shipped internationally?", "sql": "SELECT CAST(SUM(CASE WHEN T3.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN order_line AS T2 ON T1.order_id = T2.order_id INNER JOIN shipping_method AS T3 ON T3.method_id = T1.shipping_method_id", "source_tables": ["cust_order", "shipping_method", "order_line"]}, "evidence": "shipped internationally refers to method_name = 'International'; percentage = Divide (Sum(price where method_name = 'International'), Sum(price)) * 100"}
{"sample_id": 5986, "db_id": "books", "final": {"question": "How many orders were delivered in December 2019?", "sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND STRFTIME('%Y', T2.status_date) = '2019'", "source_tables": ["order_status", "order_history"]}, "evidence": "delivered refers to status_value = 'Delivered'; in December 2019 refers to status_date LIKE '2019-12%'"}
{"sample_id": 6136, "db_id": "food_inspection_2", "final": {"question": "State the salary of the employee who did the most inspections.", "sql": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT T.employee_id, COUNT(T.inspection_id) FROM inspection AS T GROUP BY T.employee_id ORDER BY COUNT(T.inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id", "source_tables": ["employee", "inspection"]}, "evidence": "the most inspections refers to max(count(employee_id))"}
{"sample_id": 6149, "db_id": "food_inspection_2", "final": {"question": "How many businesses from ward 42 have at least 5 failed inspection results between 1/1/2010 to 12/31/2015?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' AND T1.ward = 42 AND T1.license_no IN ( SELECT license_no FROM ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no HAVING COUNT(results) >= 5 ) )", "source_tables": ["inspection", "establishment"]}, "evidence": "ward 42 refers to ward = 42; at least 5 failed inspection results refers to count(results = 'Fail') > = 5; between 1/1/2010 to 12/31/2015 refers to inspection_date between '2010-01-01' and '2015-12-31'"}
{"sample_id": 6159, "db_id": "food_inspection_2", "final": {"question": "What is the employee's last name at 7211 S Hermitage Ave, Chicago, IL?", "sql": "SELECT last_name FROM employee WHERE address = '7211 S Hermitage Ave' AND city = 'Chicago' AND state = 'IL'", "source_tables": ["employee"]}, "evidence": "7211 S Hermitage Ave refers to address = '7211 S Hermitage Ave'; Chicago refers to city = 'Chicago'; IL refers to state = 'IL'"}
{"sample_id": 6198, "db_id": "food_inspection_2", "final": {"question": "What are the inspection results for Xando Coffee & Bar / Cosi Sandwich Bar?", "sql": "SELECT DISTINCT T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'", "source_tables": ["inspection", "establishment"]}, "evidence": "Xando Coffee & Bar / Cosi Sandwich Bar refers to dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'"}
{"sample_id": 6140, "db_id": "food_inspection_2", "final": {"question": "What is the assumed name of the business located at 2903 W Irving Park Rd?", "sql": "SELECT DISTINCT dba_name FROM establishment WHERE address = '2903 W IRVING PARK RD '", "source_tables": ["establishment"]}, "evidence": "assumed name refers to dba_name; 2903 W Irving Park Rd refers to address = '2903 W IRVING PARK RD '"}
{"sample_id": 6233, "db_id": "food_inspection_2", "final": {"question": "How many restaurants failed the inspection in April 2010?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-04' AND T1.facility_type = 'Restaurant' AND T2.results = 'Fail'", "source_tables": ["inspection", "establishment"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; failed the inspection refers to results = 'Fail'; in April 2010 refers to inspection_date like '2010-04%'"}
{"sample_id": 6220, "db_id": "food_inspection_2", "final": {"question": "What is the facility type of the establishment named \"Kinetic Playground\"?", "sql": "SELECT facility_type FROM establishment WHERE dba_name = 'Kinetic Playground'", "source_tables": ["establishment"]}, "evidence": "the establishment named \"Kinetic Playground\" refers to dba_name = 'Kinetic Playground'"}
{"sample_id": 6234, "db_id": "food_inspection_2", "final": {"question": "List all inspection IDs where the employee named \"Rosemary Kennedy\" was involved.", "sql": "SELECT DISTINCT T2.inspection_id FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Rosemary' AND T1.last_name = 'Kennedy'", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6173, "db_id": "food_inspection_2", "final": {"question": "Among the employees that receive a salary between $75000 to $85000, what is the difference between the number of employees which undergone an inspection that fined 100 and 500?", "sql": "SELECT SUM(CASE WHEN T3.fine = 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T3.fine = 500 THEN 1 ELSE 0 END) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.salary BETWEEN 75000 AND 80000", "source_tables": ["employee", "violation", "inspection"]}, "evidence": "salary between $75000 and $85000 refers to 75000 < = salary < = 80000; difference = subtract(count(inspection_id where fine = 100), count(inspection_id where fine = 500)) where 75000 < = salary < = 80000"}
{"sample_id": 6230, "db_id": "food_inspection_2", "final": {"question": "List point level of inspections with no fine.", "sql": "SELECT DISTINCT T1.point_level FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 0", "source_tables": ["violation", "inspection_point"]}, "evidence": "no fine refers to fine = 0"}
{"sample_id": 6189, "db_id": "food_inspection_2", "final": {"question": "Calculate the percentage of inspections with verified quality. Among them, how many businesses were from Chicago?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.results LIKE '%Pass%' THEN T2.inspection_id END) AS REAL) * 100 / COUNT(T2.inspection_id), COUNT(DISTINCT T2.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.city = 'CHICAGO'", "source_tables": ["inspection", "establishment"]}, "evidence": "verified quality refers to results like 'Pass%'; from Chicago refers to city = 'CHICAGO'; percentage = divide(count(inspection_id where results like 'Pass%'), sum(inspection_id)) * 100%"}
{"sample_id": 6130, "db_id": "food_inspection_2", "final": {"question": "State the number of violations did Royal Thai Cuisine has during the 2015/5/8 inspection.", "sql": "SELECT COUNT(T3.point_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2015-05-08' AND T1.dba_name = 'ROYAL THAI CUISINE'", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "Royal Thai Cuisine refers to dba_name = 'ROYAL THAI CUISINE'; 2015/5/8 refers to inspection_date = '2015-05-08'"}
{"sample_id": 6181, "db_id": "food_inspection_2", "final": {"question": "Which facilities were inspected by Sarah Lindsey on 20th November 2012?", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T2.inspection_date = '2012-11-20' AND T3.first_name = 'Sarah' AND T3.last_name = 'Lindsey'", "source_tables": ["inspection", "establishment", "employee"]}, "evidence": "facility name refers to dba_name; on 20th November 2012 refers to inspection_date = '2012-11-20'"}
{"sample_id": 6221, "db_id": "food_inspection_2", "final": {"question": "How much salary does Jessica Anthony receive?", "sql": "SELECT salary FROM employee WHERE first_name = 'Jessica' AND last_name = 'Anthony'", "source_tables": ["employee"]}, "evidence": ""}
{"sample_id": 6244, "db_id": "food_inspection_2", "final": {"question": "How many of the inspections with serious point levels have no fines?", "sql": "SELECT COUNT(DISTINCT T2.inspection_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0", "source_tables": ["violation", "inspection_point"]}, "evidence": "serious point level refers to point_level = 'Serious'; no fines refers to fine = 0"}
{"sample_id": 6170, "db_id": "food_inspection_2", "final": {"question": "What are the inspection description and inspector's comments in the inspection ID 164795?", "sql": "SELECT T1.Description, T2.inspector_comment FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = 44247", "source_tables": ["violation", "inspection_point"]}, "evidence": "inspection description refers to Description; inspector's comment refers to inspector_comment"}
{"sample_id": 6215, "db_id": "food_inspection_2", "final": {"question": "What is the title of the employee that inspected the establishment with license number 1576687?", "sql": "SELECT DISTINCT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1576687", "source_tables": ["employee", "inspection"]}, "evidence": "license number 1576687 refers to license_no = 1576687"}
{"sample_id": 6218, "db_id": "food_inspection_2", "final": {"question": "What is the percentage of establishments with a risk level of 1 among all of the establishments that passed the inspection?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.risk_level = 1 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results = 'Pass'", "source_tables": ["inspection", "establishment"]}, "evidence": "a risk level of 1 refers to risk_level = 1; pass the inspection refers to results = 'Pass'; percentage = divide(sum(license_no where risk_level = 1), count(license_no)) * 100% where results = 'Pass'"}
{"sample_id": 6157, "db_id": "food_inspection_2", "final": {"question": "What is the average number of inspections done by the top 5 employees with the highest salary? List the names of the said employees.", "sql": "SELECT CAST(COUNT(DISTINCT T2.inspection_id) AS REAL) / 5, T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.title = 'Sanitarian' ORDER BY T1.salary DESC LIMIT 5", "source_tables": ["employee", "inspection"]}, "evidence": "the highest salary refers to max(salary); sanitarian refers to title = 'Sanitarian'; name refers to first_name, last_name; average number = divide(sum(inspection_id), 5)"}
{"sample_id": 6129, "db_id": "food_inspection_2", "final": {"question": "How many \"food maintenance\" related violations did inspection no.1454071 have?", "sql": "SELECT COUNT(T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = '1454071' AND T1.category = 'Food Maintenance'", "source_tables": ["violation", "inspection_point"]}, "evidence": "\"food maintenance\" related refers to category = 'Food Maintenance'; inspection no.1454071 refers to inspection_id = '1454071'"}
{"sample_id": 6179, "db_id": "food_inspection_2", "final": {"question": "Provide the names and inspection results of the facilities located in Burnham.", "sql": "SELECT DISTINCT T1.dba_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.city = 'BURNHAM'", "source_tables": ["inspection", "establishment"]}, "evidence": "names refers to dba_name; inspection result refers to results; in Burnham refers to city = 'BURNHAM'"}
{"sample_id": 6174, "db_id": "food_inspection_2", "final": {"question": "How many inspections were done in January 2011?", "sql": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y-%m', inspection_date) = '2011-01'", "source_tables": ["inspection"]}, "evidence": "in January 2011 refers to inspection_date like '2011-01%'"}
{"sample_id": 6209, "db_id": "food_inspection_2", "final": {"question": "How many employees have salary greater than 70000 but fail the inspection?", "sql": "SELECT COUNT(DISTINCT T1.employee_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND T1.salary > 70000", "source_tables": ["employee", "inspection"]}, "evidence": "salary greater than 70000 refers to salary > 70000; fail the inspection refers to results = 'Fail'"}
{"sample_id": 6161, "db_id": "food_inspection_2", "final": {"question": "Give the address of the schools that passed the inspection in March 2010.", "sql": "SELECT DISTINCT T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-03' AND T2.results = 'Pass' AND T1.facility_type = 'School'", "source_tables": ["inspection", "establishment"]}, "evidence": "school refers to facility_type = 'School'; pass refers to results = 'Pass'; in March 2010 refers to inspection_date like '2010-03%'"}
{"sample_id": 6248, "db_id": "food_inspection_2", "final": {"question": "Among the establishments that paid a 500 fine, what is the percentage of restaurants?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.facility_type = 'Restaurant' THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.facility_type) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T3.fine = 500", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "a 500 fine refers to fine = 500; restaurant refers to facility_type = 'Restaurant'; percentage = divide(count(license_no where facility_type = 'Restaurant'), count(license_no)) * 100% where fine = 500"}
{"sample_id": 6142, "db_id": "food_inspection_2", "final": {"question": "How many establishments that are doing business as Homemade Pizza have a risk level of 2?", "sql": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 2 AND dba_name = 'HOMEMADE PIZZA'", "source_tables": ["establishment"]}, "evidence": "Homemade Pizza refers to dba_name = 'HOMEMADE PIZZA'; a risk level of 2 refers to risk_level = 2"}
{"sample_id": 6206, "db_id": "food_inspection_2", "final": {"question": "When did restaurant John Schaller has its first inspection in 2010?", "sql": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'JOHN SCHALLER' AND strftime('%Y', T2.inspection_date) = '2010'", "source_tables": ["inspection", "establishment"]}, "evidence": "John Schaller refers to dba_name = 'JOHN SCHALLER'; first inspection refers to min(inspection_date); in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6165, "db_id": "food_inspection_2", "final": {"question": "List the names of employees involved in an inspection with the Display of Inspection Report Summary category.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T4.category = 'Display of Inspection Report Summary'", "source_tables": ["inspection_point", "employee", "violation", "inspection"]}, "evidence": "name refers to first_name, last_name; Display of Inspection Report Summary category refers to category = 'Display of Inspection Report Summary'"}
{"sample_id": 6237, "db_id": "food_inspection_2", "final": {"question": "List down the names of the establishments with the highest risk level and failed the inspection.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Fail'", "source_tables": ["inspection", "establishment"]}, "evidence": "name of establishment refers to dba_name; the highest risk level refers to max(risk_level); failed the inspection refers to results = 'Fail'"}
{"sample_id": 6171, "db_id": "food_inspection_2", "final": {"question": "What are the inspector's comments and clean operating requirement code for inspection ID 54216 and point ID 34?", "sql": "SELECT T2.inspector_comment, T1.code FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = 54216 AND T2.point_id = 34", "source_tables": ["violation", "inspection_point"]}, "evidence": "inspector's comment refers to inspector_comment; clean operating requirement code refers to code"}
{"sample_id": 6139, "db_id": "food_inspection_2", "final": {"question": "How many sanitarian employees in Chicago are from the zip code 60617?", "sql": "SELECT COUNT(employee_id) FROM employee WHERE zip = '60617'", "source_tables": ["employee"]}, "evidence": "sanitarian refers to title = 'Sanitarian'; in Chicago refers to city = 'Chicago'; zip code 60617 refers to zip = 60617"}
{"sample_id": 6242, "db_id": "food_inspection_2", "final": {"question": "What is the category of the inspection of the establishment named \"J & J FOOD\"?", "sql": "SELECT DISTINCT T4.category FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T1.dba_name = 'J & J FOOD'", "source_tables": ["inspection_point", "inspection", "violation", "establishment"]}, "evidence": "the establishment named \"J & J FOOD\" refers to dba_name = 'J & J FOOD'"}
{"sample_id": 6163, "db_id": "food_inspection_2", "final": {"question": "Provide the inspection ID of the establishment named \"PIZZA RUSTICA, INC.\"", "sql": "SELECT DISTINCT T2.inspection_id FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'PIZZA RUSTICA, INC'", "source_tables": ["inspection", "establishment"]}, "evidence": "\"PIZZA RUSTICA, INC.\" refers to dba_name = 'PIZZA RUSTICA, INC'"}
{"sample_id": 6114, "db_id": "food_inspection_2", "final": {"question": "Among the facilities that have undergone at least one inspection in 2010, how many of them are restaurants or cafeterias?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.facility_type = 'Restaurant'", "source_tables": ["inspection", "establishment"]}, "evidence": "in 2010 refers to inspection_date like '2010%'; restaurant or cafeteria refers to facility_type = 'Restaurant'"}
{"sample_id": 6190, "db_id": "food_inspection_2", "final": {"question": "Calculate the average inspections per year done by Jessica Anthony from 2010 to 2017.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.first_name = 'Jessica' AND T1.last_name = 'Anthony' THEN T2.inspection_id ELSE 0 END) AS REAL) / 8 FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) BETWEEN '2010' AND '2017'", "source_tables": ["employee", "inspection"]}, "evidence": "from 2010 to 2017 refers to inspection_date > '2010-01-01' AND T2.inspection_id < '2017-12-31'; average inspections per year = divide(count(inspection_id where inspection_date > '2010-01-01' AND T2.inspection_id < '2017-12-31'), 8)"}
{"sample_id": 6132, "db_id": "food_inspection_2", "final": {"question": "Who is responsible for most of the inspections? Give the full name.", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.employee_id, T2.first_name, T2.last_name, COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id GROUP BY T2.employee_id, T2.first_name, T2.last_name ORDER BY COUNT(T1.inspection_id) DESC LIMIT 1 ) AS T", "source_tables": ["inspection", "employee"]}, "evidence": "full name refers to first_name, last_name; most of the inspections refers to max(count(employee_id))"}
{"sample_id": 6145, "db_id": "food_inspection_2", "final": {"question": "When did Renaldi's Pizza had its first inspection?", "sql": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'RENALDI''S PIZZA'", "source_tables": ["inspection", "establishment"]}, "evidence": "Renaldi's Pizza refers to dba_name = 'RENALDI''S PIZZA'; first inspection refers to min(inspection_date)"}
{"sample_id": 6172, "db_id": "food_inspection_2", "final": {"question": "Among the establishments that failed in the inspection, what is the percentage of establishments with the highest risk level?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.risk_level = 3 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.risk_level) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results = 'Fail'", "source_tables": ["inspection", "establishment"]}, "evidence": "failed in inspection refers to results = 'Fail'; the highest risk level refers to max(risk_level); percentage = divide(count(license_no where risk_level = max(risk_level)), count(license_no)) * 100% where results = 'Fail'"}
{"sample_id": 6135, "db_id": "food_inspection_2", "final": {"question": "Show the phone number of the sanitarian who was responsible for inspection no.634597.", "sql": "SELECT T2.phone FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id = 634597 AND T2.title = 'Sanitarian'", "source_tables": ["inspection", "employee"]}, "evidence": "phone number refers to phone; sanitarian refers to title = 'Sanitarian'; inspection no.634597 refers to inspection_id = '634597'"}
{"sample_id": 6126, "db_id": "food_inspection_2", "final": {"question": "How many inspections did All Style Buffet Restaurant have?", "sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.facility_type = 'Restaurant' AND T1.dba_name = 'All Style Buffet'", "source_tables": ["inspection", "establishment"]}, "evidence": "All Style Buffet refers to dba_name = 'All Style Buffet'; Restaurant refers to facility_type = 'Restaurant'"}
{"sample_id": 6155, "db_id": "food_inspection_2", "final": {"question": "List the full names of the employees who were responsible for inspecting Taqueria La Paz.", "sql": "SELECT DISTINCT T3.first_name, T3.last_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'TAQUERIA LA PAZ'", "source_tables": ["inspection", "establishment", "employee"]}, "evidence": "full name refers to first_name, last_name; Taqueria La Paz refers to dba_name = 'TAQUERIA LA PAZ'"}
{"sample_id": 6187, "db_id": "food_inspection_2", "final": {"question": "Calculate the total amount of fine under the food equipment and utensil category.", "sql": "SELECT SUM(T2.fine) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Food Equipment and Utensil'", "source_tables": ["violation", "inspection_point"]}, "evidence": "under the food equipment and utensil category refers to category = 'Food Equipment and Utensil'"}
{"sample_id": 6223, "db_id": "food_inspection_2", "final": {"question": "Among the list of employees, what is the total number of supervisors?", "sql": "SELECT COUNT(employee_id) FROM employee WHERE title = 'Supervisor'", "source_tables": ["employee"]}, "evidence": "supervisor refers to title = 'Supervisor'"}
{"sample_id": 6203, "db_id": "food_inspection_2", "final": {"question": "Calculate the total salary for employees who did inspection from ID 52270 to 52272.", "sql": "SELECT SUM(T2.salary) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_id BETWEEN 52270 AND 52272", "source_tables": ["inspection", "employee"]}, "evidence": "inspection from ID 52270 to 52272 refers to inspection_id between 52270 and 52272"}
{"sample_id": 6227, "db_id": "food_inspection_2", "final": {"question": "Who is the employee that receives 82700 as their salary?", "sql": "SELECT first_name, last_name FROM employee WHERE salary = 82700", "source_tables": ["employee"]}, "evidence": "employee name refers to first_name, last_name; receives 82700 as salary refers to salary = 82700"}
{"sample_id": 6152, "db_id": "food_inspection_2", "final": {"question": "What is the precise location of the establishment with the highest number of failed inspections?", "sql": "SELECT T1.latitude, T1.longitude FROM establishment AS T1 INNER JOIN ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no ORDER BY COUNT(results) DESC LIMIT 1 ) AS T2 ON T1.license_no = T2.license_no", "source_tables": ["inspection", "establishment"]}, "evidence": "precise location refers to latitude, longitude; the highest number of failed inspections refers to max(count(results where results = 'Fail'))"}
{"sample_id": 6193, "db_id": "food_inspection_2", "final": {"question": "Write down the last name of employee who did inspection ID 52238?", "sql": "SELECT T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52238", "source_tables": ["employee", "inspection"]}, "evidence": ""}
{"sample_id": 6110, "db_id": "food_inspection_2", "final": {"question": "Please list the full names of all the sanitarians under the supervision of Darlisha Jacobs.", "sql": "SELECT first_name, last_name FROM employee WHERE title = 'Sanitarian' AND supervisor = ( SELECT employee_id FROM employee WHERE first_name = 'Darlisha' AND last_name = 'Jacobs' )", "source_tables": ["employee"]}, "evidence": "full name refers to first_name, last_name"}
{"sample_id": 6243, "db_id": "food_inspection_2", "final": {"question": "Name the taverns that failed the inspection in January 2010.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-01' AND T2.results = 'Fail' AND T1.facility_type = 'TAVERN'", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "tavern refers to facility_type = 'Tavern'; failed the inspection refers to results = 'Fail'; in January 2010 refers to inspection_date like '2010-01%'"}
{"sample_id": 6146, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the employee who was responsible for the most inspection in March 2016?", "sql": "SELECT T3.first_name, T3.last_name FROM ( SELECT T1.employee_id, COUNT(T1.inspection_id) FROM inspection AS T1 WHERE strftime('%Y-%m', T1.inspection_date) = '2016-03' GROUP BY T1.employee_id ORDER BY COUNT(T1.inspection_id) DESC LIMIT 1 ) AS T2 INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id", "source_tables": ["employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; the most inspection refers to max(count(employee_id)); in March 2016 refers to inspection_date like '2016-03%'"}
{"sample_id": 6211, "db_id": "food_inspection_2", "final": {"question": "What is the name of the establishment that Joshua Rosa inspected?", "sql": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "name of the establishment refers to dba_name"}
{"sample_id": 6133, "db_id": "food_inspection_2", "final": {"question": "How many inspections done by Lisa Tillman ended up with the result of \"Out of Business\"?", "sql": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.first_name = 'Lisa' AND T2.last_name = 'Tillman' AND T1.results = 'Out of Business'", "source_tables": ["inspection", "employee"]}, "evidence": "the result of \"Out of Business\" refers to results = 'Out of Business'"}
{"sample_id": 6238, "db_id": "food_inspection_2", "final": {"question": "What is the inspection ID where the employee named \"David Hodges\" is currently employed in the \"Kamayan Express\" establishment?", "sql": "SELECT T2.inspection_id FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T3.first_name = 'David' AND T3.last_name = 'Hodges' AND T1.dba_name = 'KAMAYAN EXPRESS'", "source_tables": ["inspection", "establishment", "employee"]}, "evidence": "the \"Kamayan Express\" establishment refers to dba_name = 'KAMAYAN EXPRESS'"}
{"sample_id": 6150, "db_id": "food_inspection_2", "final": {"question": "How much is the salary of the employee who has the highest number of inspections done of all time?", "sql": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT employee_id, COUNT(inspection_id) FROM inspection GROUP BY employee_id ORDER BY COUNT(inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id", "source_tables": ["employee", "inspection"]}, "evidence": "the highest number of inspections done refers to max(count(employee_id))"}
{"sample_id": 6143, "db_id": "food_inspection_2", "final": {"question": "How many inspections with critical food safety problems are under inspection point id 3?", "sql": "SELECT COUNT(inspection_id) FROM violation WHERE point_id = 3 AND fine = 500", "source_tables": ["violation"]}, "evidence": "critical food safety problems refers to fine = 500; point_id = 3"}
{"sample_id": 6186, "db_id": "food_inspection_2", "final": {"question": "How much did Hacienda Los Torres from ward 36 fine for failing an inspection?", "sql": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.dba_name = 'HACIENDA LOS TORRES' AND T1.ward = 36 AND T2.results = 'Fail'", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "Hacienda Los Torres refers to dba_name = 'HACIENDA LOS TORRES'; ward 36 refers to ward = 36; failing an inspection refers to results = 'Fail';"}
{"sample_id": 6200, "db_id": "food_inspection_2", "final": {"question": "List down the dba name of restaurants that were inspected due to license.", "sql": "SELECT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'License'", "source_tables": ["inspection", "establishment"]}, "evidence": "inspected due to license refers to inspection_type = 'License'"}
{"sample_id": 6229, "db_id": "food_inspection_2", "final": {"question": "Please list the names of taverns that paid a $100 fine upon inspection.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Tavern' AND T3.fine = 100", "source_tables": ["inspection", "violation", "establishment"]}, "evidence": "name refers to dba_name; tavern refers to facility_type = 'Tavern'; a $100 fine refers to fine = 100"}
{"sample_id": 6116, "db_id": "food_inspection_2", "final": {"question": "Among the facilities that have undergone at least one inspection in 2010, how many of them are in ward no.42?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.ward = 42", "source_tables": ["inspection", "establishment"]}, "evidence": "in 2010 refers to inspection_date like '2010%'; in ward no.42 refers to ward = 42"}
{"sample_id": 6235, "db_id": "food_inspection_2", "final": {"question": "What type of inspection was done on July 07, 2010, involving the employee named \"Lisa Tillman\"?", "sql": "SELECT DISTINCT T2.inspection_type FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Lisa' AND T1.last_name = 'Tillman' AND T2.inspection_date = '2010-07-07'", "source_tables": ["employee", "inspection"]}, "evidence": "type of inspection refers to inspection_type; on July 07, 2010 refers to inspection_date = '2010-07-07'"}
{"sample_id": 6213, "db_id": "food_inspection_2", "final": {"question": "What is the risk level of the establishment that Bob Benson inspected?", "sql": "SELECT DISTINCT T3.risk_level FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Bob' AND T1.last_name = 'Benson'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": ""}
{"sample_id": 6122, "db_id": "food_inspection_2", "final": {"question": "Among the facilities that had undergone at least one inspection in 2010, how many of them have the most serious food safety issues?", "sql": "SELECT COUNT(DISTINCT T2.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.risk_level = 3", "source_tables": ["inspection", "establishment"]}, "evidence": "in 2010 refers to inspection_date like '2010%'; the most serious food safety issues refers to risk_level = 3"}
{"sample_id": 6240, "db_id": "food_inspection_2", "final": {"question": "List down the inspection ID with the inspector's comment \"A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED\" and inspection category of Personnel.", "sql": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.category = 'Personnel' AND T2.inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served.FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'", "source_tables": ["violation", "inspection_point"]}, "evidence": "inspector's comment \"A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED\" refers to inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served.FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'; inspection category of Personnel refers to category = 'Personnel'"}
{"sample_id": 6169, "db_id": "food_inspection_2", "final": {"question": "What is the inspection ID of the inspection with critical point level, $500 fine, and inspector comment \"CDI ON 5-17-10\"?", "sql": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 500 AND T1.point_level = 'Critical' AND T2.inspector_comment = 'CDI ON 5-17-10'", "source_tables": ["violation", "inspection_point"]}, "evidence": "critical point level refers to point_level = 'Critical'; $500 fine refers to fine = 500; inspector comment \"CDI ON 5-17-10\" refers to inspector_comment = 'CDI ON 5-17-10'"}
{"sample_id": 6210, "db_id": "food_inspection_2", "final": {"question": "Name the food businesses that passed the inspection in 2010.", "sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T2.inspection_date) = '2010' AND T2.results = 'Pass' AND T1.facility_type = 'Liquor'", "source_tables": ["inspection", "establishment"]}, "evidence": "business name refers to dba_name; food business refers to restaurant; pass the inspection refers to results = 'Pass'; in 2010 refers to inspection_date like '2010%'"}
{"sample_id": 6219, "db_id": "food_inspection_2", "final": {"question": "Where does the employee named \"Standard Murray\" live?", "sql": "SELECT address, city, state FROM employee WHERE first_name = 'Standard' AND last_name = 'Murray'", "source_tables": ["employee"]}, "evidence": "address refers to address, city, state"}
{"sample_id": 6182, "db_id": "food_inspection_2", "final": {"question": "Provide the categories and fines for the inspections done by Lisa Tillman in January 2014.", "sql": "SELECT DISTINCT T4.category, T3.fine FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T1.inspection_id = T3.inspection_id INNER JOIN inspection_point AS T4 ON T3.point_id = T4.point_id WHERE T2.first_name = 'Lisa' AND T2.last_name = 'Tillman' AND strftime('%Y-%m', T1.inspection_date) = '2014-01'", "source_tables": ["inspection_point", "inspection", "violation", "employee"]}, "evidence": "in January 2014 refers to inspection_date like '2014-01%'"}
{"sample_id": 6208, "db_id": "food_inspection_2", "final": {"question": "Which establishments did Joshua Rosa inspect?", "sql": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "establishment name refers to dba_name"}
{"sample_id": 6184, "db_id": "food_inspection_2", "final": {"question": "List the types and results of the inspections done on Riverwalk caf\u00e9.", "sql": "SELECT T2.inspection_type, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.facility_type = 'RIVERWALK CAFE'", "source_tables": ["inspection", "establishment"]}, "evidence": "type refers to inspection_type; Riverwalk caf\u00e9 refers to facility_type = 'RIVERWALK CAFE'"}
{"sample_id": 6212, "db_id": "food_inspection_2", "final": {"question": "How many taverns failed in July 2010?", "sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T2.inspection_date) = '2010-07' AND T2.results = 'Fail' AND T1.facility_type = 'Restaurant'", "source_tables": ["inspection", "establishment"]}, "evidence": "tavern refers to facility_type = 'Tavern'; failed refers to results = 'Fail'; in July 2010 refers to inspection_date like '2010-07%'"}
{"sample_id": 6113, "db_id": "food_inspection_2", "final": {"question": "Please list the assumed name of all the facilities inspected by Joshua Rosa.", "sql": "SELECT DISTINCT T3.dba_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "assumed name refers to dba_name"}
{"sample_id": 6156, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the employee who gave the highest amount of fine of all time?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, SUM(T3.fine) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id GROUP BY T1.first_name, T1.last_name ORDER BY SUM(T3.fine) DESC LIMIT 1 ) t", "source_tables": ["employee", "violation", "inspection"]}, "evidence": "full name refers to first_name, last_name; the highest amount of fine refers to max(sum(fine))"}
{"sample_id": 6199, "db_id": "food_inspection_2", "final": {"question": "What type of inspection was done at John Schaller?", "sql": "SELECT DISTINCT T2.inspection_type FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'JOHN SCHALLER'", "source_tables": ["inspection", "establishment"]}, "evidence": "type of inspection refers to inspection_type; John Schaller refers to dba_name = 'JOHN SCHALLER'"}
{"sample_id": 6117, "db_id": "food_inspection_2", "final": {"question": "Please list the full names of all the sanitarians who have inspected the facility Burbank.", "sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T3.dba_name = 'Burbank' AND T1.title = 'Sanitarian'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "full name refers to first_name, last_name; the facility Burbank refers to dba_name = 'Burbank'"}
{"sample_id": 6176, "db_id": "food_inspection_2", "final": {"question": "Calculate the percentage of inspections with the fine for a minor food safety problem.", "sql": "SELECT CAST(COUNT(CASE WHEN fine = 100 THEN inspection_id END) AS REAL) * 100 / COUNT(inspection_id) FROM violation", "source_tables": ["violation"]}, "evidence": "fine for a minor food safety problem refers to fine = 100; percentage = divide(count(inspection_id where fine = 100), sum(inspection_id)) * 100%"}
{"sample_id": 6128, "db_id": "food_inspection_2", "final": {"question": "How many restaurants were inspected on 2015/5/8?", "sql": "SELECT COUNT(T2.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_date = '2015-05-08' AND T1.facility_type = 'Restaurant'", "source_tables": ["inspection", "establishment"]}, "evidence": "restaurant refers to facility_type = 'Restaurant'; on 2015/5/8 refers to inspection_date = '2015-05-08'"}
{"sample_id": 6147, "db_id": "food_inspection_2", "final": {"question": "What are the names of the businesses that passed with conditions in May 2012?", "sql": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T1.inspection_date) = '2012-05' AND T1.results = 'Pass w/ Conditions'", "source_tables": ["inspection", "establishment"]}, "evidence": "name of business refers to dba_name; passed with conditions refers to results = 'Pass w/ Conditions'; in May 2012 refers to inspection_date like '2012-05%'"}
{"sample_id": 6121, "db_id": "food_inspection_2", "final": {"question": "After Azha Restaurant Inc. passed the inspection on 2010/1/21, when was the follow-up inspection done?", "sql": "SELECT T1.followup_to FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T2.dba_name = 'Azha Restaurant Inc.' AND T1.results = 'Pass' AND T1.inspection_date = '2010-01-21'", "source_tables": ["inspection", "establishment"]}, "evidence": "Azha Restaurant Inc. refers to dba_name = 'Azha Restaurant Inc.'; on 2010/1/21 refers to inspection_date = '2010-01-21'; follow-up inspection date refers to followup_to"}
{"sample_id": 6225, "db_id": "food_inspection_2", "final": {"question": "How many employees are living in Hoffman Estates, IL?", "sql": "SELECT COUNT(employee_id) FROM employee WHERE state = 'IL' AND city = 'Hoffman Estates'", "source_tables": ["employee"]}, "evidence": "in Hoffman Estates refers to city = 'Hoffman Estates'; IL refers to state = 'IL'"}
{"sample_id": 6144, "db_id": "food_inspection_2", "final": {"question": "How many employees are under Gregory Cardenas?", "sql": "SELECT COUNT(T1.employee_id) FROM employee AS T1 WHERE T1.supervisor = ( SELECT employee_id FROM employee WHERE first_name = 'Gregory' AND last_name = 'Cardenas' )", "source_tables": ["employee"]}, "evidence": ""}
{"sample_id": 6188, "db_id": "food_inspection_2", "final": {"question": "Provide the names and locations of the facilities that failed inspections on 29th July 2013.", "sql": "SELECT T2.dba_name, T2.longitude, T2.latitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2013-07-29' AND T1.results = 'Fail'", "source_tables": ["inspection", "establishment"]}, "evidence": "name refers to dba_name; location refers to latitude, longitude; failed inspections refers to results = 'Fail'; on 29th July 2013 refers to inspection_date = '2013-07-29'"}
{"sample_id": 6195, "db_id": "food_inspection_2", "final": {"question": "List down the address of employees who did inspection dated 11/5/2010.", "sql": "SELECT DISTINCT T1.address FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-11-05'", "source_tables": ["employee", "inspection"]}, "evidence": "dated 11/5/2010 refers to inspection_date = '2010-11-05'"}
{"sample_id": 6119, "db_id": "food_inspection_2", "final": {"question": "What is the full name of the sanitarian who inspected Amundsen High School on 2010/5/11?", "sql": "SELECT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T2.inspection_date = '2010-05-11' AND T3.dba_name = 'AMUNDSEN HIGH SCHOOL' AND T1.title = 'Sanitarian'", "source_tables": ["establishment", "employee", "inspection"]}, "evidence": "full name refers to first_name, last_name;\u00a0 Amundsen High School refers to dba_name = 'AMUNDSEN HIGH SCHOOL'; on 2010/5/11 refers to inspection_date = '2010-05-11'"}
{"sample_id": 6286, "db_id": "coinmarketcap", "final": {"question": "What is the name of the coin that creates the most total value in the past 24 hours?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.volume_24h = ( SELECT MAX(volume_24h) FROM historical )", "source_tables": ["historical", "coins"]}, "evidence": "creates the most total value in the past 24 hours refers to max(volume_24h)"}
{"sample_id": 6280, "db_id": "coinmarketcap", "final": {"question": "List the names and symbols of the coins that were added on June 14, 2013.", "sql": "SELECT name, symbol FROM coins WHERE date_added LIKE '2013-06-14%'", "source_tables": ["coins"]}, "evidence": "added on June 14, 2013 refers to date_added like '2013-06-14%'"}
{"sample_id": 6263, "db_id": "coinmarketcap", "final": {"question": "Which crytocurrency was ranked the first by CoinMarketCap on 2013/4/28?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T2.cmc_rank = 1", "source_tables": ["historical", "coins"]}, "evidence": "ranked the first refers to cmc_rank = 1; on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6257, "db_id": "coinmarketcap", "final": {"question": "What was the price of 1 Bitcoin in 2016?", "sql": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' AND STRFTIME('%Y', T2.date) = '2016'", "source_tables": ["historical", "coins"]}, "evidence": "2016 refers to historical date where year(date) = 2016"}
{"sample_id": 6277, "db_id": "coinmarketcap", "final": {"question": "Please list the names of coins that has been disappeared.", "sql": "SELECT name FROM coins WHERE status = 'extinct'", "source_tables": ["coins"]}, "evidence": "has disappeared refers to status = 'extinct'"}
{"sample_id": 6293, "db_id": "coinmarketcap", "final": {"question": "When is the highest price of Terracoin?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Terracoin' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "when refers to date; the highest price refers to max(price)"}
{"sample_id": 6279, "db_id": "coinmarketcap", "final": {"question": "How many coins were added in May 2013? Please list the names of coins.", "sql": "SELECT COUNT(id) num FROM coins WHERE STRFTIME('%Y-%m', date_added) = '2013-05' UNION ALL SELECT name FROM coins WHERE STRFTIME('%Y-%m', date_added) = '2013-05'", "source_tables": ["coins"]}, "evidence": "in May 2013 refers to year(date_added) = 2013 and month(date_added) = 5"}
{"sample_id": 6252, "db_id": "coinmarketcap", "final": {"question": "For all transactions for WRAP in August 2016, list the time to achieve highest price and the time to achieve the lowest price.", "sql": "SELECT T2.time_high, T2.time_low, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'WARP' AND STRFTIME('%Y-%m', T2.date) = '2016-08'", "source_tables": ["historical", "coins"]}, "evidence": "in May 2013 refers to month(date) = 5 AND year(date) = 2013; time to achieve the highest price refers to time_high; time to achieve the lowest price refers to time_low; WRAP refers to name = 'WARP'"}
{"sample_id": 6273, "db_id": "coinmarketcap", "final": {"question": "Which crytocurrency had a bigger number of coins circulating in the market and in the general public's hands on 2013/4/28, Bitcoin or Litecoin?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name IN ('Bitcoin', 'Litecoin') ORDER BY T2.circulating_supply DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "a bigger number of coins circulating in the market refers to max(circulating_supply); on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6290, "db_id": "coinmarketcap", "final": {"question": "When is Devcoin most valuable in the market?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Devcoin' ORDER BY T2.market_cap DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "when refers to date; most valuable refers to max(market_cap)"}
{"sample_id": 6275, "db_id": "coinmarketcap", "final": {"question": "What was the average price of a Bitcoin in the year 2013?", "sql": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y', T2.date) = '2013' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "average price refers SUM(price)/COUNT(named = 'Bitcoin'); in the year 2013 refers to year(date) = 2013"}
{"sample_id": 6276, "db_id": "coinmarketcap", "final": {"question": "What was the percentage of the Bitcoins verifiably burned until 2018/4/28?", "sql": "SELECT CAST((SUM(T2.max_supply) - SUM(T2.total_supply)) AS REAL) / SUM(T2.total_supply) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date < '2018-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "the percentage of the Bitcoins verifiably burned = divide(subtract(SUM(max_supply), SUM(total_supply)),SUM(total_supply))*100%; until 2013/4/28 refers to date<'2013-04-08'"}
{"sample_id": 6255, "db_id": "coinmarketcap", "final": {"question": "What is the average monthly circulating supply for Frozen in 2014.", "sql": "SELECT CAST(SUM(T2.circulating_supply) AS REAL) / 12 FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Frozen' AND STRFTIME('%Y', T2.date) = '2014'", "source_tables": ["historical", "coins"]}, "evidence": "average monthly circulating supply = AVG(circulating_supply); in 2017 refers to date BETWEEN '2017-01-01' AND '2017-12-31'"}
{"sample_id": 6285, "db_id": "coinmarketcap", "final": {"question": "When is the best time to purchase Bitcoin?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.low LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "lowest price refers to low; best time refers to date with the low;"}
{"sample_id": 6291, "db_id": "coinmarketcap", "final": {"question": "List the names of the top five coins traded on January 1, 2014.", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2014-01-01' AND T2.cmc_rank <= 5", "source_tables": ["historical", "coins"]}, "evidence": "the top five coins refers to cmc_rank< = 5; on January 1, 2014 refers to date = '2014-01-01'"}
{"sample_id": 6254, "db_id": "coinmarketcap", "final": {"question": "Name the coin with the highest percentage price changed in 24 hours. State the transaction date and price.", "sql": "SELECT T1.name, T2.DATE, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_24h = ( SELECT MAX(percent_change_24h) FROM historical )", "source_tables": ["historical", "coins"]}, "evidence": "the highest percentage price changed in 24 hours refers to max(percent_change_24h)"}
{"sample_id": 6264, "db_id": "coinmarketcap", "final": {"question": "How much dollars was a Bitcoin worth on 2013/4/28 according to the coin market?", "sql": "SELECT T2.market_cap FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "worth refers to price; on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6256, "db_id": "coinmarketcap", "final": {"question": "List all the inactive coins and state the last date of its transaction?", "sql": "SELECT T1.NAME, MAX(T2.DATE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.ID = T2.coin_id WHERE T1.status = 'inactive' ORDER BY T2.DATE DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "the last date refers to max(date); inactive coins refers to status = 'inactive'"}
{"sample_id": 6269, "db_id": "coinmarketcap", "final": {"question": "What was the number of Bitcoins verifiably burned until 2013/4/28?", "sql": "SELECT T2.max_supply - T2.total_supply FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "the number of Bitcoins verifiably burned = max_supply - total_supply; 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6294, "db_id": "coinmarketcap", "final": {"question": "How many times was Bytecoin traded in June 2013?", "sql": "SELECT COUNT(T2.coin_id) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bytecoin' AND STRFTIME('%Y-%m', T2.date) = '2013-06'", "source_tables": ["historical", "coins"]}, "evidence": "in June 2013 refers to year(date) = 2013 AND month(date) = 6"}
{"sample_id": 6251, "db_id": "coinmarketcap", "final": {"question": "List the price for Zetacoin on 13/11/1 and the next 7 consecutive days. What is the average price for these 7 days?", "sql": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07' UNION ALL SELECT AVG(T2.PRICE) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Zetacoin' AND T2.date BETWEEN '2013-11-01' AND '2013-11-07'", "source_tables": ["historical", "coins"]}, "evidence": "on 1/11/13 and the next 7 consecutive days refers to DATE BETWEEN '2013-11-01' AND '2013-11-07'; average price refers to AVG(price); Zetacoin refers to name = 'Zetacoin'"}
{"sample_id": 6253, "db_id": "coinmarketcap", "final": {"question": "State the transaction date whereby DigixDAO was transacted at the hightest price.", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'DigixDAO' ORDER BY T2.price DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "the highest price refers to max(price); DigixDAO refers to name = 'DigixDAO'"}
{"sample_id": 6265, "db_id": "coinmarketcap", "final": {"question": "Which crytocurrency was not opened on 2013/5/3?", "sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-05-03' AND T2.open IS NULL", "source_tables": ["historical", "coins"]}, "evidence": "not opened refers to open IS NULL; on 2013/5/3 refers to date = '2013-05-03'"}
{"sample_id": 6268, "db_id": "coinmarketcap", "final": {"question": "What was the max profit a user can make on Bitcoin on 2013/4/28?", "sql": "SELECT T2.high - T2.low FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'", "source_tables": ["historical", "coins"]}, "evidence": "the max profit = subtract(high, low); on 2013/4/28 refers to date = '2013-04-28'"}
{"sample_id": 6278, "db_id": "coinmarketcap", "final": {"question": "What's the descripition of BitBar?", "sql": "SELECT description FROM coins WHERE name = 'BitBar'", "source_tables": ["coins"]}, "evidence": ""}
{"sample_id": 6288, "db_id": "coinmarketcap", "final": {"question": "When is the highest closed price of CHNCoin?", "sql": "SELECT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'CHNCoin' ORDER BY T2.close DESC LIMIT 1", "source_tables": ["historical", "coins"]}, "evidence": "the highest closed price refers to max(close)"}
{"sample_id": 6281, "db_id": "coinmarketcap", "final": {"question": "List the names of coins that cannot be traded in 2014.", "sql": "SELECT name FROM coins WHERE date_added LIKE '2014%' AND status = 'untracked'", "source_tables": ["coins"]}, "evidence": "cannot be tracked refers to status = 'untracked'; in 2014 refers to year(date_added) = '2014'"}
{"sample_id": 6292, "db_id": "coinmarketcap", "final": {"question": "When was Lebowskis not opened?", "sql": "SELECT DISTINCT T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Lebowskis' AND (T2.open IS NULL OR T2.open = 0)", "source_tables": ["historical", "coins"]}, "evidence": "when refers to date; not opened refers to open IS NULL"}
{"sample_id": 6324, "db_id": "retail_world", "final": {"question": "Please list the names of all the products whose supplier is in Japan.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'", "source_tables": ["products", "suppliers"]}, "evidence": "names of the products refers to ProductName; Japan refers to Country = 'Japan';"}
{"sample_id": 6344, "db_id": "retail_world", "final": {"question": "Which category does \"tofu\" belong to?", "sql": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Tofu'", "source_tables": ["products", "categories"]}, "evidence": "category refers to CategoryName; tofu refers to ProductName = 'Tofu';"}
{"sample_id": 6656, "db_id": "retail_world", "final": {"question": "Mention the first name of employee who took care the order id 10250.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10250", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6315, "db_id": "retail_world", "final": {"question": "Please list the names of all the products ordered in order no. 10248.", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248", "source_tables": ["products", "order details"]}, "evidence": "names of the products refers to ProductName; order no. refers to OrderID;"}
{"sample_id": 6359, "db_id": "retail_world", "final": {"question": "How many suppliers are there in the United States of America?", "sql": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'", "source_tables": ["suppliers"]}, "evidence": "United States of America refers to Country = 'USA'"}
{"sample_id": 6549, "db_id": "retail_world", "final": {"question": "What were the products supplied by the company in Spain?", "sql": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Spain'", "source_tables": ["products", "suppliers"]}, "evidence": "company in Spain refers to Country = 'Spain'; product supplied refers to ProductName"}
{"sample_id": 6534, "db_id": "retail_world", "final": {"question": "What are the ID and description of the condiments category?", "sql": "SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments'", "source_tables": ["categories"]}, "evidence": "condiments category refers to CategoryName = 'Condiments'; the ID refers to CategoryID"}
{"sample_id": 6320, "db_id": "retail_world", "final": {"question": "How many orders have asked for the product Tofu?", "sql": "SELECT COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Tofu'", "source_tables": ["products", "order details"]}, "evidence": "product refers to ProductName;"}
{"sample_id": 6495, "db_id": "retail_world", "final": {"question": "How many customers are there in Berlin, Germany?", "sql": "SELECT COUNT(City) FROM Customers WHERE Country = 'Germany' AND City = 'Berlin'", "source_tables": ["customers"]}, "evidence": "\"Berlin\" is the City; 'Germany' is the Country"}
{"sample_id": 6411, "db_id": "retail_world", "final": {"question": "What is the name of the contact person of the Pavlova supplier company?", "sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Pavlova'", "source_tables": ["products", "suppliers"]}, "evidence": "contact person refers to ContactName; Pavlova is the name of the product;"}
{"sample_id": 6349, "db_id": "retail_world", "final": {"question": "Tell the country name of the supplier for \"Scottish Longbreads\".", "sql": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Scottish Longbreads'", "source_tables": ["products", "suppliers"]}, "evidence": "\"Scottish Longbreads\" refers to ProductName = 'Scottish Longbreads'"}
{"sample_id": 6629, "db_id": "retail_world", "final": {"question": "What is the most common product ordered by a customer from Germany?", "sql": "SELECT T2.ProductID FROM Customers AS T1 INNER JOIN \"Order Details\" AS T2 WHERE T1.Country = 'Germany' GROUP BY T2.ProductID ORDER BY COUNT(T2.ProductID) DESC LIMIT 1", "source_tables": ["customers", "order details"]}, "evidence": "most common product refers to max(count(ProductID)); customer from Germany\u00a0refers to Country = 'Germany'"}
{"sample_id": 6463, "db_id": "retail_world", "final": {"question": "How many orders have Margaret Peacock placed?", "sql": "SELECT COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Margaret' AND T1.LastName = 'Peacock'", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6635, "db_id": "retail_world", "final": {"question": "Which customer is a regular customer in this shop and what are the products category that he mostly buy?", "sql": "SELECT T1.CustomerID, T4.CategoryName FROM Orders AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Categories AS T4 ON T3.CategoryID = T4.CategoryID ORDER BY T1.CustomerID DESC, T4.CategoryName DESC", "source_tables": ["products", "order details", "categories", "orders"]}, "evidence": "regular customer refers to max(count(CustomerID)); products category refers to CategoryName; mostly buy refers to max(count(CategoryID))"}
{"sample_id": 6348, "db_id": "retail_world", "final": {"question": "Give the contact name of the supplier for the product \"Gudbrandsdalsost\".", "sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gudbrandsdalsost'", "source_tables": ["products", "suppliers"]}, "evidence": "product refers to ProductName"}
{"sample_id": 6508, "db_id": "retail_world", "final": {"question": "Please calculate the number of orders from customers by country in 1996.", "sql": "SELECT COUNT(T2.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' GROUP BY T1.Country", "source_tables": ["customers", "orders"]}, "evidence": "in 1996 refer to YEAR(OrderDate) = 1996; number of order = Count(OrderID)"}
{"sample_id": 6666, "db_id": "retail_world", "final": {"question": "Give the full name of employee who handled the order id 10280.", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10280", "source_tables": ["employees", "orders"]}, "evidence": "full name refers to FirstName, LastName"}
{"sample_id": 6614, "db_id": "retail_world", "final": {"question": "The product 'Mozzarella di Giovanni' belongs in which category? Include the category's description as well.", "sql": "SELECT T2.CategoryName, T2.Description FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Mozzarella di Giovanni'", "source_tables": ["products", "categories"]}, "evidence": "Mozzarella di Giovanni' is a ProductName; category refers to CategoryName;"}
{"sample_id": 6316, "db_id": "retail_world", "final": {"question": "What is the quantity of Ikura ordered in order no. 10273?", "sql": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'", "source_tables": ["products", "order details"]}, "evidence": "Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;"}
{"sample_id": 6502, "db_id": "retail_world", "final": {"question": "What percentage of orders were placed by customers in Madrid city in 1996?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.City = 'Madrid' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.City) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = 1996", "source_tables": ["customers", "orders"]}, "evidence": "\"Madrid\" is the City; in 1996 refers to YEAR (OrderDate) = 1996; percentage = Divide (Count (CustomerID where City = 'Madrid'), Count (CustomerID)) * 100"}
{"sample_id": 6506, "db_id": "retail_world", "final": {"question": "In 1996, how many orders were from customers in the UK?", "sql": "SELECT COUNT(T1.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' AND T1.Country = 'UK'", "source_tables": ["customers", "orders"]}, "evidence": "in 1996 refers to YEAR (OrderDate) = 1996; 'UK' is the Country;"}
{"sample_id": 6602, "db_id": "retail_world", "final": {"question": "How many product names have order quantity less than 50? Calculate the percentage of orders less than 50 out of total order quantity.", "sql": "SELECT SUM(CASE WHEN T2.Quantity < 50 THEN 1 ELSE 0 END) , CAST(SUM(IF(T2.Quantity < 50, 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID", "source_tables": ["products", "order details"]}, "evidence": "order quantity less than 50 refers to Quantity < 50; Calculation = DIVIDE(SUM(Quantity < 50), SUM(ProductID)) * 100"}
{"sample_id": 6425, "db_id": "retail_world", "final": {"question": "What is the family name of the employee who shipped the order 10521 to CACTU?", "sql": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10521 AND T2.CustomerID = 'CACTU'", "source_tables": ["employees", "orders"]}, "evidence": "order 10521 refers to OrderID = 10521; CustomerID = 'CACTU'; family name refers to LastName;"}
{"sample_id": 6330, "db_id": "retail_world", "final": {"question": "What is the average quantity of Ikura ordered in one order?", "sql": "SELECT CAST(SUM(T2.Quantity) AS REAL) / COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Ikura'", "source_tables": ["products", "order details"]}, "evidence": "average = AVG(Quantity); Ikura refers to ProductName = 'Ikura';"}
{"sample_id": 6583, "db_id": "retail_world", "final": {"question": "How many companies do ship Northwind's orders?", "sql": "SELECT COUNT(ShipperID) FROM Shippers", "source_tables": ["shippers"]}, "evidence": "companies refers to ShipperID"}
{"sample_id": 6580, "db_id": "retail_world", "final": {"question": "How many suppliers does Northwind have in USA?", "sql": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'", "source_tables": ["suppliers"]}, "evidence": "'USA' is a country; supplier refers to CompanyName"}
{"sample_id": 6379, "db_id": "retail_world", "final": {"question": "What is the full name of the employee who handled the highest amount of orders?", "sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.FirstName, T1.LastName ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["employees", "orders"]}, "evidence": "full name refers to FirstName LastName; highest amount of orders refers to max(count(OrderID))"}
{"sample_id": 6469, "db_id": "retail_world", "final": {"question": "Calculate the total products that are supplied by Japan suppliers.", "sql": "SELECT COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'", "source_tables": ["products", "suppliers"]}, "evidence": "Japan Supplier refers to Country = 'Japan'; total product refers to Count (ProductName)"}
{"sample_id": 6622, "db_id": "retail_world", "final": {"question": "How many suppliers are from UK?", "sql": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'UK'", "source_tables": ["suppliers"]}, "evidence": "from UK refers to Country = 'UK'"}
{"sample_id": 6374, "db_id": "retail_world", "final": {"question": "What is the most ordered products by customers?", "sql": "SELECT T1.ProductID FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["products", "order details"]}, "evidence": "most ordered refers to max(count(ProductID)); product refers to ProductID"}
{"sample_id": 6339, "db_id": "retail_world", "final": {"question": "For the order from \"HILAA\" on 1997/12/25, what was the total quantity of the products in that order?", "sql": "SELECT SUM(T2.Quantity) FROM Orders AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.OrderID = T2.OrderID WHERE T1.CustomerID = 'HILAA' AND T1.OrderDate LIKE '1997-12-25%'", "source_tables": ["order details", "orders"]}, "evidence": "HILLA refers to CustomerID = 'HILAA'; on 1997/12/25 refers to OrderDate = '1997/12/25';"}
{"sample_id": 6669, "db_id": "retail_world", "final": {"question": "List out the phone number of the shipping company of order id 10296.", "sql": "SELECT T2.Phone FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260", "source_tables": ["shippers", "orders"]}, "evidence": "shipping company refers to Shippers; phone number refers to Phone"}
{"sample_id": 6585, "db_id": "retail_world", "final": {"question": "Indicate category name of soft drinks, coffees, teas, beers, and ales in description list.", "sql": "SELECT CategoryName FROM Categories WHERE Description = 'Soft drinks, coffees, teas, beers, and ales'", "source_tables": ["categories"]}, "evidence": "Soft drinks, coffees, teas, beers, and ales' is Description of CategoryName"}
{"sample_id": 6481, "db_id": "retail_world", "final": {"question": "Compute the total order quantity for Uncle Bob's Organic Dried Pears so far.", "sql": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName LIKE 'Uncle Bob%s Organic Dried Pears'", "source_tables": ["products", "order details"]}, "evidence": "\"Uncle Bob's Organic Dried Pears\" is the ProductName; total order quantity refers to Sum(Quantity)"}
{"sample_id": 6343, "db_id": "retail_world", "final": {"question": "How many kinds of products are there in the the category of \"dairy products\"?", "sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Dairy Products'", "source_tables": ["products", "categories"]}, "evidence": "kinds of products refers to ProductID; category refers to CategoryName;"}
{"sample_id": 6514, "db_id": "retail_world", "final": {"question": "Which country are the majority of the suppliers located?", "sql": "SELECT Country FROM Suppliers GROUP BY Country ORDER BY COUNT(SupplierID) DESC LIMIT 1", "source_tables": ["suppliers"]}, "evidence": "majority of the suppliers located refers to MAX(COUNT(SupplierID))"}
{"sample_id": 6658, "db_id": "retail_world", "final": {"question": "What is the country location of the employee who handled order id 10257?", "sql": "SELECT T1.Country FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6578, "db_id": "retail_world", "final": {"question": "How many boxes of 'Pavlova' did Northwind sell?", "sql": "SELECT COUNT(T2.Quantity) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Pavlova'", "source_tables": ["products", "order details"]}, "evidence": "'Pavlova' is a ProductName"}
{"sample_id": 6413, "db_id": "retail_world", "final": {"question": "What product is the least shipped to the postal code 28023?", "sql": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN \"Order Details\" AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.PostalCode = 28023 ORDER BY T3.Quantity LIMIT 1", "source_tables": ["customers", "products", "order details", "orders"]}, "evidence": "the least shipped product refers ProductName where MIN(Quantity);"}
{"sample_id": 6334, "db_id": "retail_world", "final": {"question": "Provide the number of orders that were handled by Michael Suyama.", "sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'", "source_tables": ["employees", "orders"]}, "evidence": ""}
{"sample_id": 6727, "db_id": "retails", "final": {"question": "How many part supplies were nearly out of stock?", "sql": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10", "source_tables": ["partsupp"]}, "evidence": "supplies nearly out of stock refer to ps_partkey where ps_availqty < 10;"}
{"sample_id": 6688, "db_id": "retails", "final": {"question": "Among all the customers, what is the percentage of the customer's nation being Germany?", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey", "source_tables": ["customer", "nation"]}, "evidence": "DIVIDE(COUNT(c_custkey when n_name = 'GERMANY'), COUNT(c_custkey)) as percentage;"}
{"sample_id": 6702, "db_id": "retails", "final": {"question": "What is the percentage of the European countries among the given countries?", "sql": "SELECT CAST(SUM(IIF(T2.r_name = 'EUROPE', 1, 0)) AS REAL) * 100 / COUNT(T1.n_name) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey", "source_tables": ["region", "nation"]}, "evidence": "DIVIDE(COUNT(n_name where r_name = 'EUROPE'), COUNT(n_name)) as percentage;"}
{"sample_id": 6805, "db_id": "retails", "final": {"question": "Please list any three customers with debt.", "sql": "SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3", "source_tables": ["customer"]}, "evidence": "customer refers to c_name; with debt refers to c_acctbal < 0"}
{"sample_id": 6797, "db_id": "retails", "final": {"question": "Calculate the average profit of prom brushed steel products.", "sql": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity) / COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_type = 'PROMO BRUSHED STEEL'", "source_tables": ["partsupp", "lineitem", "part"]}, "evidence": "prom brushed steel refers to p_type = 'PROMO BRUSHED STEEL'; average profit = divide(sum(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))), count(ps_partkey))"}
{"sample_id": 6716, "db_id": "retails", "final": {"question": "Among the customers from the United States, which market segment has the highest number of customers?", "sql": "SELECT T.c_mktsegment FROM ( SELECT T1.c_mktsegment, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'UNITED STATES' GROUP BY T1.c_mktsegment ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "nation"]}, "evidence": "the highest number of customers refer to MAX(COUNT(c_custkey)); the United States is the name of the nation which refers to n_name = 'UNITED STATES'; market segment refers to c_mktsegment;"}
{"sample_id": 6841, "db_id": "retails", "final": {"question": "How many line items were returned in 1998?", "sql": "SELECT l_linenumber FROM lineitem WHERE STRFTIME('%Y', l_shipdate) < 1997 AND l_shipmode = 'TRUCK'", "source_tables": ["lineitem"]}, "evidence": "line item refers to l_linenumber; returned refers to returnflag = 'R'; in 1998 refers to year(l_shipdate) = 1998"}
{"sample_id": 6750, "db_id": "retails", "final": {"question": "List down the countries that are located in Asia.", "sql": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'", "source_tables": ["region", "nation"]}, "evidence": "countries in Asia refer to n_name where r_name = 'ASIA';"}
{"sample_id": 6904, "db_id": "retails", "final": {"question": "How many customers in the building segments have orders with a total price of no less than 50,000?", "sql": "SELECT COUNT(T2.c_name) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'BUILDING' AND T1.o_totalprice > 50000", "source_tables": ["customer", "orders"]}, "evidence": "building segment refers to c_mktsegment = 'BUILDING'; a total price of no less than 50,000 refers to o_totalprice > 50000"}
{"sample_id": 6713, "db_id": "retails", "final": {"question": "How many in debt customers in the household market segment are from Russia?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'RUSSIA'", "source_tables": ["customer", "nation"]}, "evidence": "in debt customers refer to c_custkey where c_acctbal < 0; c_mktsegment = 'HOUSEHOLD'; Russian is the name of the nation which refers to n_name = 'RUSSIA';"}
{"sample_id": 6808, "db_id": "retails", "final": {"question": "What is the supply cost of large plated tin?", "sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'large plated tin'", "source_tables": ["partsupp", "part"]}, "evidence": "supply cost refers to ps_supplycost; large plated tin refers to p_type = 'large plated tin'"}
{"sample_id": 6829, "db_id": "retails", "final": {"question": "What is the account balance of the supplier with the most parts?", "sql": "SELECT T.s_acctbal FROM ( SELECT T1.s_acctbal, COUNT(T2.ps_suppkey) AS num FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey GROUP BY T1.s_suppkey ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["partsupp", "supplier"]}, "evidence": "account balance refers to s_acctbal; the most parts refers to max(count(ps_suppkey))"}
{"sample_id": 6719, "db_id": "retails", "final": {"question": "How many countries are there in the region whose comment description is \"asymptotes sublate after the r.\"", "sql": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_comment = 'asymptotes sublate after the r'", "source_tables": ["region", "nation"]}, "evidence": "r_comment = 'asymptotes sublate after the r'; countries refer to n_nationkey;"}
{"sample_id": 6862, "db_id": "retails", "final": {"question": "What is the name of the product with the highest retail price?", "sql": "SELECT p_name FROM part WHERE p_retailprice = ( SELECT MAX(p_retailprice) FROM part )", "source_tables": ["part"]}, "evidence": "name of the product refers to p_name; the highest retail price refers to p_retailprice"}
{"sample_id": 6781, "db_id": "retails", "final": {"question": "List by order number the 3 items with the lowest price after applying the discount.", "sql": "SELECT l_orderkey FROM lineitem ORDER BY l_extendedprice * (1 - l_discount) LIMIT 3", "source_tables": ["lineitem"]}, "evidence": "order number refers to l_orderkey; the lowest price after applying the discount refers to MIN(MULTIPLY(l_extendedprice), SUBTRACT(1, l_discount));"}
{"sample_id": 6819, "db_id": "retails", "final": {"question": "Which customer is the most in debt?", "sql": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )", "source_tables": ["customer"]}, "evidence": "customer refers to c_name; the most in debt refers to max(c_acctbal)"}
{"sample_id": 6782, "db_id": "retails", "final": {"question": "How many orders of more than 10 items have been returned?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity > 10 AND l_returnflag = 'R'", "source_tables": ["lineitem"]}, "evidence": "more than 10 items have been returned refer to l_returnflag = 'R' where l_quantity > 10; orders refer to l_orderkey;"}
{"sample_id": 6722, "db_id": "retails", "final": {"question": "What is the average price before discount of the top 10 orders with the highest total price?", "sql": "SELECT SUM(T2.l_extendedprice) / 10 FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 10", "source_tables": ["lineitem", "orders"]}, "evidence": "DIVIDE(SUM(l_extendedprice), 10) where MAX(o_totalprice);"}
{"sample_id": 6800, "db_id": "retails", "final": {"question": "Please list any three line item numbers that have 10% off.", "sql": "SELECT l_linenumber FROM lineitem WHERE l_discount = 0.1 LIMIT 3", "source_tables": ["lineitem"]}, "evidence": "line item number refers to l_linenumber; 10% off refers to l_discount = 0.1"}
{"sample_id": 6766, "db_id": "retails", "final": {"question": "Find the supply key of the top ten suppliers with the most account balance, and list the supply key along with the account balance in descending order of account balance.", "sql": "SELECT s_suppkey, s_acctbal FROM supplier ORDER BY s_acctbal DESC LIMIT 10", "source_tables": ["supplier"]}, "evidence": "supply key refers to s_suppkey; the most amount account balance refers to MAX(s_acctbal);"}
{"sample_id": 6710, "db_id": "retails", "final": {"question": "When was the order with the highest amount of total price shipped?", "sql": "SELECT T2.l_shipdate FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 1", "source_tables": ["lineitem", "orders"]}, "evidence": "when shipped refers to l_shipdate; the highest amount of total price refers to MAX(o_totalprice);"}
{"sample_id": 6784, "db_id": "retails", "final": {"question": "Of the orders with a lower delivery priority, how many have an urgent priority order?", "sql": "SELECT COUNT(o_orderkey) FROM orders WHERE o_orderpriority = '1-URGENT' GROUP BY o_orderdate ORDER BY o_orderdate DESC LIMIT 1", "source_tables": ["orders"]}, "evidence": "an urgent priority order refers to o_orderkey where o_orderpriority = '1-URGENT'; earlier orderdate have higher priority in delivery; lower delivery priority refers to MAX(o_orderdate);"}
{"sample_id": 6849, "db_id": "retails", "final": {"question": "Please indicate the names of the customers whose order with a total price over $300000.", "sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000", "source_tables": ["customer", "orders"]}, "evidence": "customer name refers to c_name; a total price over $300000 refers to o_totalprice > 300000"}
{"sample_id": 6902, "db_id": "retails", "final": {"question": "What is the name of the customer whose order was delivered the longest?", "sql": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY (JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate)) DESC LIMIT 1", "source_tables": ["lineitem", "customer", "orders"]}, "evidence": "name of the customer refers to c_name; delivered the longest refers to max(subtract(l_receiptdate, l_commitdate))"}
{"sample_id": 6712, "db_id": "retails", "final": {"question": "How many urgent orders were shipped the next day?", "sql": "SELECT COUNT(T2.o_orderkey) FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE JULIANDAY(T1.l_shipdate) - JULIANDAY(T2.o_orderdate) = 1 AND T2.o_orderpriority = '1-URGENT'", "source_tables": ["lineitem", "orders"]}, "evidence": "the order is urgent if o_orderpriority = '1-URGENT'; shipped the next day refers to SUBTRACT(l_shipdate, o_orderdate) = 1;"}
{"sample_id": 6745, "db_id": "retails", "final": {"question": "Give the phone number of the customer with the highest account balance.", "sql": "SELECT c_phone FROM customer ORDER BY c_acctbal DESC LIMIT 1", "source_tables": ["customer"]}, "evidence": "phone number of the customer refers to c_phone; the highest account balance refers to MAX(c_acctbal);"}
{"sample_id": 6821, "db_id": "retails", "final": {"question": "How many of the items are instructed to be delivered in person?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'", "source_tables": ["lineitem"]}, "evidence": "instructed to be delivered in person refers to l_shipinstruct = 'DELIVER IN PERSON'"}
{"sample_id": 6824, "db_id": "retails", "final": {"question": "List all the nations in Europe.", "sql": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'EUROPE'", "source_tables": ["region", "nation"]}, "evidence": "nation refers to n_name; Europe refers to r_name = 'EUROPE'"}
{"sample_id": 6840, "db_id": "retails", "final": {"question": "List line items shipped by truck with delivery time before 1997.", "sql": "SELECT l_linenumber FROM lineitem WHERE STRFTIME('%Y', l_shipdate) < 1997 AND l_shipmode = 'truck'", "source_tables": ["lineitem"]}, "evidence": "line item refers to l_linenumber; shipped by truck refers to l_shipmode = 'truck'; delivery time before 1997 refers to year(l_shipdate) < 1997"}
{"sample_id": 6828, "db_id": "retails", "final": {"question": "What are the shipping methods for the orders on 12/31/1994?", "sql": "SELECT DISTINCT T2.l_shipmode FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1994-12-31'", "source_tables": ["lineitem", "orders"]}, "evidence": "shipping method refers to l_shipmode; order on 12/31/1994 refers to o_orderdate = '1994-12-31'"}
{"sample_id": 6760, "db_id": "retails", "final": {"question": "Among the customers with an account balance lower than 4000, what is the percentage of the customers in the US?", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'United States', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 4000", "source_tables": ["customer", "nation"]}, "evidence": "DIVIDE(COUNT(c_custkey where n_name = 'United States' and c_acctbal < 4000), COUNT(c_custkey where c_acctbal < 4000)) as percentage;"}
{"sample_id": 6818, "db_id": "retails", "final": {"question": "How many Japanese suppliers have their accounts in debt?", "sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'JAPAN'", "source_tables": ["supplier", "nation"]}, "evidence": "Japanese refers to n_name = 'Japan'; have accounts in debt refers to s_acctbal < 0"}
{"sample_id": 6814, "db_id": "retails", "final": {"question": "How many customers from the furniture segments come from Iraq?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'FURNITURE' AND T2.n_name = 'IRAQ'", "source_tables": ["customer", "nation"]}, "evidence": "furniture segment refers to c_mktsegment = 'FURNITURE'; Iraq refers to n_name = 'Iraq'"}
{"sample_id": 6726, "db_id": "retails", "final": {"question": "Calculate the percentage of customers' accounts in debt.", "sql": "SELECT CAST(SUM(IIF(c_acctbal < 0, 1, 0)) AS REAL) * 100 / COUNT(c_custkey) FROM customer", "source_tables": ["customer"]}, "evidence": "DIVIDE(COUNT(c_custkey where c_acctbal < 0), COUNT(c_custkey)) as percentage;"}
{"sample_id": 6872, "db_id": "retails", "final": {"question": "What is the total quantity available by all suppliers for the part \"hot spring dodger dim light\"?", "sql": "SELECT SUM(T1.ps_availqty) FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T2.p_name = 'hot spring dodger dim light'", "source_tables": ["partsupp", "part"]}, "evidence": "total quantity available refers to sum(ps_availqty); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6735, "db_id": "retails", "final": {"question": "How many items did Customer#000021159 order? Calculate those items total charges.", "sql": "SELECT COUNT(T2.o_orderkey), SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax)) FROM customer AS T1 INNER JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey INNER JOIN lineitem AS T3 ON T2.o_orderkey = T3.l_orderkey WHERE T1.c_name = 'Customer#000021159' GROUP BY T3.l_linenumber", "source_tables": ["lineitem", "customer", "orders"]}, "evidence": "items Customer#000021159 order refer to l_linenumber where c_name = 'Customer#000021159'; SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where c_name = 'Customer#000021159';"}
{"sample_id": 6740, "db_id": "retails", "final": {"question": "Among the parts shipped by rail on 1st December, 1995, list part names with 10% discount.", "sql": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey INNER JOIN lineitem AS T3 ON T1.ps_partkey = T3.l_partkey WHERE T3.l_discount = 0.1 AND T3.l_shipdate = '1995-12-01' AND T3.l_shipmode = 'RAIL'", "source_tables": ["partsupp", "lineitem", "part"]}, "evidence": "shipped by rail on 1st December, 1995 refers to l_shipmode = 'RAIL' where l_shipdate = '1995-12-01'; part names with 10% discount refer to p_name where l_discount = 0.1;"}
{"sample_id": 6759, "db_id": "retails", "final": {"question": "List the country name of the customers in the building marketing segment with an account balance greater than 80% of the average account balance of all customers.", "sql": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN ( SELECT AVG(c_acctbal) * 0.8 AS avg_acctbal FROM customer ) AS T3 WHERE T1.c_acctbal > T3.avg_acctbal", "source_tables": ["customer", "nation"]}, "evidence": "country name refers to n_name; building marketing segment refers to c_mktsegment = 'BUILDING'; account balance greater than 80% of the average account balance of all customers refers to c_acctbal > MULTIPLY(AVG(c_acctbal), 0.8);"}
{"sample_id": 6767, "db_id": "retails", "final": {"question": "How many customers who are not in debt ordered an urgent order?", "sql": "SELECT COUNT(T2.c_custkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal > 0 AND T1.o_orderpriority = '1-URGENT'", "source_tables": ["customer", "orders"]}, "evidence": "customers who are not in debt refer to c_custkey where c_acctbal > 0; the order is urgent if o_orderpriority = '1-URGENT' ;"}
{"sample_id": 6896, "db_id": "retails", "final": {"question": "Which market segment does the customer with the highest amount of debt belongs to?", "sql": "SELECT c_mktsegment FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )", "source_tables": ["customer"]}, "evidence": "market segment refers to c_mktsegment; the highest amount of debt refers to max(c_acctbal)"}
{"sample_id": 6832, "db_id": "retails", "final": {"question": "List the phone number of the customer who placed orders with a total price of more than $300,000.", "sql": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000", "source_tables": ["customer", "orders"]}, "evidence": "phone number refers to c_phone; a total price of more than $300,000 refers to o_totalprice > 300000"}
{"sample_id": 6885, "db_id": "retails", "final": {"question": "Among the suppliers for the parts ordered in order no.4, how many of them are in debt?", "sql": "SELECT COUNT(T1.l_linenumber) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 4 AND T2.s_acctbal < 0", "source_tables": ["lineitem", "supplier"]}, "evidence": "order no.4 refers to l_orderkey = 4; in debt refers to s_acctbal < 0"}
{"sample_id": 6838, "db_id": "retails", "final": {"question": "Please indicate the total price of order key 32.", "sql": "SELECT o_totalprice FROM orders WHERE o_orderkey = 32", "source_tables": ["orders"]}, "evidence": "total price refers to o_totalprice; order key 32 refers to o_orderkey = 32"}
{"sample_id": 6763, "db_id": "retails", "final": {"question": "List the order key of the orders with a total price between 200000 and 300000.", "sql": "SELECT o_orderkey FROM orders WHERE o_totalprice BETWEEN 200000 AND 300000", "source_tables": ["orders"]}, "evidence": "orders with a total price between 200000 and 300000 refer to o_totalprice between 200000 and 300000;"}
{"sample_id": 6894, "db_id": "retails", "final": {"question": "What is the profit for part no.98768 in order no.1?", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_orderkey = 1 AND T1.l_partkey = 98768", "source_tables": ["partsupp", "lineitem"]}, "evidence": "part no.98768 refers to l_partkey = 98768; order no.1 refers to l_orderkey = 1; profit = subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))"}
{"sample_id": 6909, "db_id": "retails", "final": {"question": "What is the name of the country of the supplier with the highest debt?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey ORDER BY T1.s_suppkey DESC LIMIT 1", "source_tables": ["supplier", "nation"]}, "evidence": "name of the country refers to n_name; the highest debt refers to min(s_acctbal)"}
{"sample_id": 6804, "db_id": "retails", "final": {"question": "How many orders in 1998 had a total price under 950?", "sql": "SELECT COUNT(o_orderkey) AS countorders FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1998' AND o_totalprice < 950", "source_tables": ["orders"]}, "evidence": "1998 refers to year(o_orderdate) = '1998'; a total price under 950 refers to o_totalprice < 950"}
{"sample_id": 6830, "db_id": "retails", "final": {"question": "Which nation does the supplier with the account balance of \"4393.04\" belong to?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal = 4393.04", "source_tables": ["supplier", "nation"]}, "evidence": "nation refers to n_name; account balance of \"4393.04\" refers to s_acctbal = 4393.04"}
{"sample_id": 6901, "db_id": "retails", "final": {"question": "How many urgent orders did Clerk#000000001 handle in 1997?", "sql": "SELECT COUNT(o_orderkey) FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1997' AND o_clerk = 'Clerk#000000001' AND o_orderpriority = '1-URGENT'", "source_tables": ["orders"]}, "evidence": "urgent order refers to o_orderpriority = '1-URGENT'; Clerk#000000001 refers to o_clerk = 'Clerk#000000001'; 1997 refers to year(o_orderdate) = 1997"}
{"sample_id": 6691, "db_id": "retails", "final": {"question": "Which region does \"Supplier#000000129\" belong to?", "sql": "SELECT T3.r_name FROM nation AS T1 INNER JOIN supplier AS T2 ON T1.n_nationkey = T2.s_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.s_name = 'Supplier#000000129'", "source_tables": ["region", "supplier", "nation"]}, "evidence": "\"Supplier#000000129\" is the name of the supplier which refers to s_name; Which region refers to r_name;"}
{"sample_id": 6701, "db_id": "retails", "final": {"question": "Which country has the most number of suppliers whose account is in debt?", "sql": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T2.n_name ) AS T ORDER BY T.num LIMIT 1", "source_tables": ["supplier", "nation"]}, "evidence": "country refers to n_name; the most number of suppliers whose account is in debt refers to MAX(SUM(s_acctbal < 0));"}
{"sample_id": 6734, "db_id": "retails", "final": {"question": "Calculate the total price of orders by Customer#000000013.", "sql": "SELECT SUM(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_name = 'Customer#000000013'", "source_tables": ["customer", "orders"]}, "evidence": "Customer#000000013 is the name of the customer which refers to c_name;"}
{"sample_id": 6807, "db_id": "retails", "final": {"question": "What is the difference between the number of returned items and not returned items with the full price of under 16947.7?", "sql": "SELECT SUM(IIF(l_returnflag = 'A', 1, 0)) - SUM(IIF(l_returnflag = 'N', 1, 0)) AS diff FROM lineitem WHERE l_extendedprice < 16947.7", "source_tables": ["lineitem"]}, "evidence": "full price of under 16947.7 refers to l_extendedprice < 16947.7; returned item refers to l_returnflag = 'R'; not returned item refers to l_returnflag = 'A' OR l_returnflag = 'N'; difference = subtract(count(l_linenumber where l_returnflag = 'A' OR l_returnflag = 'N'), count(l_linenumber where l_returnflag = 'R')) where l_extendedprice < 16947.7"}
{"sample_id": 6756, "db_id": "retails", "final": {"question": "What is the name and marketing segment of the customer with the total order price of 199180.63?", "sql": "SELECT T2.c_name, T2.c_mktsegment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 199180.63", "source_tables": ["customer", "orders"]}, "evidence": "name of the customer refers to c_name; total order price of 199180.63 refers o_totalprice = 199180.63; marketing segment refers to c_mktsegment;"}
{"sample_id": 6833, "db_id": "retails", "final": {"question": "What are the clerks of orders with line items shipped by mail?", "sql": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'MAIL'", "source_tables": ["lineitem", "orders"]}, "evidence": "clerk refers to o_clerk; shipped by mail refers to l_shipmode = 'MAIL'"}
{"sample_id": 6876, "db_id": "retails", "final": {"question": "Among the suppliers providing parts under the type \"promo brushed steel\", how many of them are in debt?", "sql": "SELECT COUNT(T3.s_name) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T3.s_acctbal < 0 AND T1.p_type = 'PROMO BRUSHED STEEL'", "source_tables": ["partsupp", "part", "supplier"]}, "evidence": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; in debt refers to s_acctbal < 0"}
{"sample_id": 6869, "db_id": "retails", "final": {"question": "Please list the names of all the suppliers for the part \"hot spring dodger dim light\".", "sql": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'", "source_tables": ["partsupp", "supplier", "part"]}, "evidence": "supplier name refers to s_name; part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6886, "db_id": "retails", "final": {"question": "Among the parts that are returned, how many of them are provided by a supplier in debt?", "sql": "SELECT COUNT(T1.l_partkey) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_returnflag = 'R' AND T2.s_acctbal < 0", "source_tables": ["lineitem", "supplier"]}, "evidence": "returned refers to l_returnflag = 'R'; in debt refers to s_acctbal < 0"}
{"sample_id": 6723, "db_id": "retails", "final": {"question": "Identify the names of the top 3 customers with the highest number of orders of all time and calculate for the average total price per order of each customers.", "sql": "SELECT T.c_name, T.res FROM ( SELECT T2.c_name, SUM(T1.o_totalprice) / COUNT(T1.o_orderkey) AS res , COUNT(T1.o_orderkey) AS num FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey GROUP BY T1.o_custkey ) AS T ORDER BY T.num DESC LIMIT 3", "source_tables": ["customer", "orders"]}, "evidence": "customers with the highest number of orders refer to c_name where MAX(COUNT(o_orderkey)); DIVIDE(SUM(o_totalprice), COUNT(o_orderkey));"}
{"sample_id": 6875, "db_id": "retails", "final": {"question": "How many suppliers for the part \"hot spring dodger dim light\" are in Vietnam?", "sql": "SELECT COUNT(T3.s_name) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey INNER JOIN nation AS T4 ON T3.s_nationkey = T4.n_nationkey WHERE T1.p_name = 'hot spring dodger dim light' AND T4.n_name = 'VIETNAM'", "source_tables": ["partsupp", "part", "supplier", "nation"]}, "evidence": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; Vietnam refers to n_name = 'VIETNAM'"}
{"sample_id": 6870, "db_id": "retails", "final": {"question": "What is the lowest supply cost for the part \"hot spring dodger dim light\"?", "sql": "SELECT MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T2.p_name = 'hot spring dodger dim light'", "source_tables": ["partsupp", "part"]}, "evidence": "the lowest supply cost refers to min(ps_supplycost); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6793, "db_id": "retails", "final": {"question": "How many different clerks have served the customer with the address uFTe2u518et8Q8UC?", "sql": "SELECT COUNT(T1.o_clerk) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_address = 'uFTe2u518et8Q8UC'", "source_tables": ["customer", "orders"]}, "evidence": "clerk who have served the customer refers to o_clerk\n"}
{"sample_id": 6835, "db_id": "retails", "final": {"question": "List all the addresses for the suppliers of the biggest parts.", "sql": "SELECT T2.s_address FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey ORDER BY T3.p_size DESC LIMIT 1", "source_tables": ["partsupp", "supplier", "part"]}, "evidence": "addresses refers to s_address; the biggest part refers to max(p_size)"}
{"sample_id": 6802, "db_id": "retails", "final": {"question": "Which ship mode has more \"deliver in person\" instructions, rail or mail?", "sql": "SELECT IIF(SUM(IIF(l_shipmode = 'RAIL', 1, 0)) - SUM(IIF(l_shipmode = 'MAIL', 1, 0)), 'RAIL', 'MAIL') AS result FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'", "source_tables": ["lineitem"]}, "evidence": "ship mode refers to l_shipmode; \"deliver in person\" instruction refers to l_shipinstruct = 'DELIVER IN PERSON'"}
{"sample_id": 6730, "db_id": "retails", "final": {"question": "Among the orders shipped in November, 1998 by air, how many orders were urgent?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'AIR' AND T1.o_orderpriority = '1-URGENT' AND SUBSTR(T2.l_shipdate, 1, 7) = '1998-11'", "source_tables": ["lineitem", "orders"]}, "evidence": "orders shipped in November, 1998 refer to o_orderkey where l_shipdate LIKE '1998-11-%'; by air refers to l_shipmode = 'AIR'; the order is urgent if o_orderpriority = '1-URGENT' ;"}
{"sample_id": 6707, "db_id": "retails", "final": {"question": "How many items that were shipped via air were returned in 1994?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag = 'R' AND l_shipmode = 'AIR' AND STRFTIME('%Y', l_shipdate) = '1994'", "source_tables": ["lineitem"]}, "evidence": "items refer to l_linenumber; shipped via air in 1994 refers to year(l_shipdate) = 1994 where l_shipmode = 'AIR'; returned refer to l_returnflag = 'R';"}
{"sample_id": 6672, "db_id": "retails", "final": {"question": "Which order has a higher priority, order no. 4 or order no. 36?", "sql": "SELECT l_orderkey FROM lineitem WHERE l_orderkey IN (4, 36) ORDER BY l_shipdate DESC LIMIT 1", "source_tables": ["lineitem"]}, "evidence": "earlier orderdate have higher priority in delivery; which order no. 4 or order no. 36 refers to o_orderkey in (4, 36) where MIN(o_orderdate);"}
{"sample_id": 6697, "db_id": "retails", "final": {"question": "Clerk#000000936 dealt with a \"Not Specified\" order on 1995/3/13, what was the charge for the part of the order shipped by truck?", "sql": "SELECT T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax) AS num FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_clerk = 'Clerk#000000936' AND T2.l_shipmode = 'TRUCK' AND T1.o_orderstatus = '4-NOT SPECIFIED' AND T1.o_orderdate = '1995-03-13'", "source_tables": ["lineitem", "orders"]}, "evidence": "MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax)) WHERE o_clerk = 'Clerk#000000936', o_orderstatus = '4-NOT SPECIFIED', o_orderdate = '1995-03-13' AND l_shipmode = 'TRUCK';"}
{"sample_id": 6695, "db_id": "retails", "final": {"question": "For the order with the total price of 231499.38, what was the discounted price for supplier No. 9397?", "sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) AS DISCOUNTERPRICE FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE T1.l_suppkey = 9397 AND T2.o_totalprice = 231499.38", "source_tables": ["lineitem", "orders"]}, "evidence": "MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)) where o_totalprice = 231499.38 AND l_suppkey = 9397;"}
{"sample_id": 6854, "db_id": "retails", "final": {"question": "Please indicate the names of customers whose orders are eligible for 10% discount with order dates between 1/1/1994 and 1/1/1995.", "sql": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey WHERE T2.l_discount = 0.1 AND STRFTIME('%Y', T1.o_orderdate) BETWEEN 1994 AND 1995", "source_tables": ["lineitem", "customer", "orders"]}, "evidence": "customer name refers to c_name; 10% discount refers to l_discount = 0.1; order dates between 1/1/1994 and 1/1/1995 refers to year(o_orderdate) = 1994 OR o_orderdate = '1995-01-01'"}
{"sample_id": 6715, "db_id": "retails", "final": {"question": "How many orders shipped via ship have a medium priority?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'SHIP' AND T1.o_orderpriority = '3-MEDIUM'", "source_tables": ["lineitem", "orders"]}, "evidence": "orders shipped via ship refer to o_orderkey where l_shipmode = 'SHIP'; medium priority refers to o_orderpriority = '3-MEDIUM';"}
{"sample_id": 6776, "db_id": "retails", "final": {"question": "What is the average discount for the parts made by Manufacturer#5?", "sql": "SELECT AVG(T3.l_discount) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_suppkey = T3.l_suppkey WHERE T1.p_mfgr = 'Manufacturer#5'", "source_tables": ["partsupp", "part", "lineitem"]}, "evidence": "DIVIDE(SUM(l_discount), COUNT(l_partkey)) where p_mfgr = 'Manufacturer#5';"}
{"sample_id": 6844, "db_id": "retails", "final": {"question": "How many customers belong to the household segment in Germany?", "sql": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'GERMANY'", "source_tables": ["customer", "nation"]}, "evidence": "household segment refers to c_mktsegment = 'household'; Germany refers to n_name = 'Germany'"}
{"sample_id": 6698, "db_id": "retails", "final": {"question": "Customer No.129301 made an order on 1996/7/27, what was the delivery time for the first part of that order?", "sql": "SELECT JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = '129301' AND T1.o_orderdate = '1996-07-27'", "source_tables": ["lineitem", "orders"]}, "evidence": "SUBTRACT(l_receiptdate, l_commitdate) WHERE o_orderdate = '1996-07-27' AND o_custkey = '129301';"}
{"sample_id": 6747, "db_id": "retails", "final": {"question": "What is the total number of orders made by customers in United States?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey INNER JOIN nation AS T3 ON T2.c_nationkey = T3.n_nationkey WHERE T3.n_name = 'UNITED STATES'", "source_tables": ["customer", "nation", "orders"]}, "evidence": "orders refer to o_orderkey; the United States is the name of the nation which refers to n_name = 'UNITED STATES';"}
{"sample_id": 6865, "db_id": "retails", "final": {"question": "What is the size of the smallest part in a jumbo case container?", "sql": "SELECT MIN(p_size) FROM part WHERE p_container = 'JUMBO CASE'", "source_tables": ["part"]}, "evidence": "size refers to p_size; the smallest part refers to min(p_size); jumbo case container refers to p_container = 'JUMBO CASE'"}
{"sample_id": 6693, "db_id": "retails", "final": {"question": "Give customer No.106936's region name.", "sql": "SELECT T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_custkey = 106936", "source_tables": ["region", "customer", "nation"]}, "evidence": "\"Customer#000000055\" is the name of the customer which refers to c_name; region name refers to r_name;"}
{"sample_id": 6675, "db_id": "retails", "final": {"question": "How many orders in total have the customers in the household segment made?", "sql": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["customer", "orders"]}, "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD';"}
{"sample_id": 6892, "db_id": "retails", "final": {"question": "What is the average supply cost for the part \"hot spring dodger dim light\"?", "sql": "SELECT AVG(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'", "source_tables": ["partsupp", "supplier", "part"]}, "evidence": "average supply cost refers to avg(ps_supplycost); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6705, "db_id": "retails", "final": {"question": "How many orders were shipped in 1998?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1998'", "source_tables": ["lineitem"]}, "evidence": "orders refer to l_orderkey; shipped in 1998 refers to year(l_shipdate) = 1998;"}
{"sample_id": 6893, "db_id": "retails", "final": {"question": "How much higher in percentage is the highest supply cost of the part \"hot spring dodger dim light\" than the lowest supply cost?", "sql": "SELECT CAST((MAX(T1.ps_supplycost) - MIN(T1.ps_supplycost)) AS REAL) * 100 / MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'", "source_tables": ["partsupp", "supplier", "part"]}, "evidence": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; percentage = divide(subtract(max(ps_supplycost), min(ps_supplycost)), min(ps_supplycost)) * 100%"}
{"sample_id": 6867, "db_id": "retails", "final": {"question": "Please list the names of the top 3 suppliers with the most amount of money in their accounts.", "sql": "SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3", "source_tables": ["supplier"]}, "evidence": "supplier name refers to s_name; the most amount of money refers to max(s_acctbal)"}
{"sample_id": 6696, "db_id": "retails", "final": {"question": "For the order with the total price of 218195.43, which supplier handled the returned item? Give the supplier id.", "sql": "SELECT T2.l_suppkey FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_totalprice = 218195.43 AND T2.l_returnflag = 'R'", "source_tables": ["lineitem", "orders"]}, "evidence": "returned item refers to l_returnflag = 'R'; supplier id refers to l_suppkey; order with the total price of 218195.43 refers to o_totalprice = 218195.43;"}
{"sample_id": 6770, "db_id": "retails", "final": {"question": "What percentage of customers from France is in the automobile segment?", "sql": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'AUTOMOBILE', 1, 0)) AS REAL) * 100 / COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'FRANCE'", "source_tables": ["customer", "nation"]}, "evidence": "DIVIDE(COUNT(c_name where c_mktsegment = 'AUTOMOBILE' and n_name = 'FRANCE'), COUNT(c_name where n_name = 'FRANCE')) as percentage;"}
{"sample_id": 6746, "db_id": "retails", "final": {"question": "What is the order priority of the order with the highest total price?", "sql": "SELECT o_orderpriority FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )", "source_tables": ["orders"]}, "evidence": "order with the highest total price refers to MAX(o_totalprice);"}
{"sample_id": 6877, "db_id": "retails", "final": {"question": "Please list the names of all the suppliers for parts under Brand#55.", "sql": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_brand = 'Brand#55'", "source_tables": ["partsupp", "part", "supplier"]}, "evidence": "supplier name refers to s_name; Brand#55 refers to p_brand = 'Brand#55'"}
{"sample_id": 6732, "db_id": "retails", "final": {"question": "Among the customers from Morocco, how many customers were in debt?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T2.n_name = 'MOROCCO'", "source_tables": ["customer", "nation"]}, "evidence": "customers refer to c_custkey; Morocco is the name of the nation which refers to n_name = 'MOROCCO'; in debt refers to c_acctbal < 0;"}
{"sample_id": 6686, "db_id": "retails", "final": {"question": "Among the orders made by customers in Germany, which one of them has the highest priority in delivery? Please give its order key.", "sql": "SELECT T3.o_orderkey FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY' ORDER BY T3.o_orderdate LIMIT 1", "source_tables": ["customer", "nation", "orders"]}, "evidence": "orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY'; earlier orderdate have higher priority in delivery therefore MIN(o_orderdate);"}
{"sample_id": 6826, "db_id": "retails", "final": {"question": "List all the customers' phone numbers from Ethiopia.", "sql": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'Ethiopia'", "source_tables": ["customer", "nation"]}, "evidence": "phone number refers to c_phone; Ethiopia refers to n_name = 'Ethiopia'"}
{"sample_id": 6855, "db_id": "retails", "final": {"question": "Calculate the percentage of countries that belong to the American region.", "sql": "SELECT CAST(SUM(IIF(T1.r_name = 'America', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey", "source_tables": ["region", "nation"]}, "evidence": "the American region refers to r_name = 'America'; percentage = divide(count(n_name where r_name = 'America'), count(n_name)) * 100%"}
{"sample_id": 6884, "db_id": "retails", "final": {"question": "Please list the phone numbers of all the suppliers for the parts ordered in order no.1.", "sql": "SELECT T2.s_phone FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 1", "source_tables": ["lineitem", "supplier"]}, "evidence": "phone number refers to s_phone; order no.1 refers to l_orderkey = 1"}
{"sample_id": 6761, "db_id": "retails", "final": {"question": "Give the name and phone number of the customers who have more than 9000 account balance.", "sql": "SELECT c_name, c_phone FROM customer WHERE c_acctbal > 9000", "source_tables": ["customer"]}, "evidence": "the name of the customer refers to c_name; phone number of the customer refers to c_phone; have more than 9000 account balance refers to c_acctbal > 9000;"}
{"sample_id": 6888, "db_id": "retails", "final": {"question": "What is the quantity of the part \"burnished seashell gainsboro navajo chocolate\" ordered in order no.1?", "sql": "SELECT T1.l_quantity FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "source_tables": ["lineitem", "part"]}, "evidence": "quantity refers to l_quantity; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1"}
{"sample_id": 6741, "db_id": "retails", "final": {"question": "Among the parts supplied by Supplier#000000018, provide parts names which had supply costs above 900.", "sql": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey INNER JOIN supplier AS T3 ON T1.ps_suppkey = T3.s_suppkey WHERE T1.ps_supplycost > 900 AND T3.s_name = 'Supplier#000000018'", "source_tables": ["partsupp", "supplier", "part"]}, "evidence": "Supplier#000000018 is the name of supplier which refers to s_name; supply costs above 900 refer to ps_supplycost > 900;"}
{"sample_id": 6720, "db_id": "retails", "final": {"question": "Among the products manufactured by manufacturer 5 that have a retail price of no more than 1,000, how many products were shipped via rail?", "sql": "SELECT COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_mfgr = 'Manufacturer#5' AND T3.p_retailprice < 1000 AND T2.l_shipmode = 'RAIL'", "source_tables": ["partsupp", "lineitem", "part"]}, "evidence": "manufacturer 5 refers to p_mfgr = 'Manufacturer#5'; retail price of no more than 1,000 refers to p_retailprice < 1000; shipped via rail refers to shipmode = 'RAIL';"}
{"sample_id": 6912, "db_id": "retails", "final": {"question": "What is the total amount of tax charged for the order placed by customer 88931 on 7/13/994?", "sql": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax)) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = 88931 AND T1.o_orderdate = '1994-07-13'", "source_tables": ["lineitem", "orders"]}, "evidence": "total amount of tax refers to sum(multiply(multiply(l_extendedprice, subtract(1, l_discount)), add(1, l_tax))); customer 88931 refers to o_custkey = 88931; on 7/13/1994 refers to o_orderdate = '1994-07-13'"}
{"sample_id": 6796, "db_id": "retails", "final": {"question": "How many products shipped on 19/11/1994 were ordered on 21/09/1994?", "sql": "SELECT COUNT(T2.l_partkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1994-09-21' AND T2.l_shipdate = '1994-11-19'", "source_tables": ["lineitem", "orders"]}, "evidence": "shipped on 19/11/1994 refers to l_shipdate = '1994-11-19'; ordered on 21/09/1994 refers to o_orderdate = '1994-09-21'"}
{"sample_id": 6783, "db_id": "retails", "final": {"question": "What is the total price charged for orders shipped by air without shipping instructions?", "sql": "SELECT l_extendedprice * (1 - l_discount) * (1 + l_tax) AS totalprice FROM lineitem WHERE l_shipmode = 'AIR' AND l_shipinstruct = 'NONE'", "source_tables": ["lineitem"]}, "evidence": "SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where l_shipmode = 'AIR' and l_shipinstruct = 'NONE';"}
{"sample_id": 6883, "db_id": "retails", "final": {"question": "Among all the suppliers providing the part \"hot spring dodger dim light\", how many of them are in Europe?", "sql": "SELECT COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T1.r_name = 'EUROPE'", "source_tables": ["region", "supplier", "nation"]}, "evidence": "part \"hot spring dodger dim light\" refers to p_name = hot spring dodger dim light; Europe refers to r_name = 'EUROPE'"}
{"sample_id": 6866, "db_id": "retails", "final": {"question": "How many suppliers have their accounts in debt?", "sql": "SELECT COUNT(s_suppkey) FROM supplier WHERE s_acctbal < 0", "source_tables": ["supplier"]}, "evidence": "account in debt refers to s_acctbal < 0"}
{"sample_id": 6676, "db_id": "retails", "final": {"question": "Among all the orders made by a customer in the household segment, what is the highest total price?", "sql": "SELECT MAX(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'", "source_tables": ["customer", "orders"]}, "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the highest total price refers to MAX(o_totalprice);"}
{"sample_id": 6769, "db_id": "retails", "final": {"question": "In the parts supply by Supplier#000000654, list the top five parts with the most supply cost in descending order of supply cost.", "sql": "SELECT T2.ps_partkey FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey WHERE T1.s_name = 'Supplier#000000654' ORDER BY T2.ps_supplycost DESC LIMIT 5", "source_tables": ["partsupp", "supplier"]}, "evidence": "Supplier#000000654 is the name of the supplier which refers to s_name; parts with the most supply cost refer to ps_partkey where MAX(ps_supplycost);"}
{"sample_id": 6771, "db_id": "retails", "final": {"question": "Name the part which is most profitable.", "sql": "SELECT T.p_name FROM ( SELECT T3.p_name , T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity AS num FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["partsupp", "lineitem", "part"]}, "evidence": "profit can be calculated as SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))); part which is most profitable refers to p_name where MAX(profit);"}
{"sample_id": 6853, "db_id": "retails", "final": {"question": "How many countries belong to the Algeria region?", "sql": "SELECT COUNT(T1.r_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T2.n_name = 'ALGERIA'", "source_tables": ["region", "nation"]}, "evidence": "the algeria region refers to r_name = 'ALGERIA'"}
{"sample_id": 6718, "db_id": "retails", "final": {"question": "What are the names of the parts manufactured by manufacturer 3 that have a supply cost of 1,000?", "sql": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T1.ps_supplycost = 1000 AND T2.p_mfgr = 'Manufacturer#3'", "source_tables": ["partsupp", "part"]}, "evidence": "names of the parts refer to p_name; manufacturer 3 refers to p_mfgr = 'Manufacturer#3'; ps_supplycost = 1000;"}
{"sample_id": 6683, "db_id": "retails", "final": {"question": "Among all the customers in Germany, how many of them have an account balance of over 1000?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.c_acctbal > 1000", "source_tables": ["customer", "nation"]}, "evidence": "Germany is the name of the nation which refers to n_name = 'GERMANY'; account balance of over 1000 refers to c_acctbal > 1000;"}
{"sample_id": 6858, "db_id": "retails", "final": {"question": "What is the comment of the product \"burlywood plum powder puff mint\"?", "sql": "SELECT p_comment FROM part WHERE p_name = 'burlywood plum powder puff mint'", "source_tables": ["part"]}, "evidence": "comment refers to p_comment; product \"burlywood plum powder puff mint\" refers to p_name = 'burlywood plum powder puff mint'"}
{"sample_id": 6908, "db_id": "retails", "final": {"question": "What are the names of the parts that have a part supply cost of at least 1,000?", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_supplycost > 1000", "source_tables": ["partsupp", "part"]}, "evidence": "name of the part refers to p_name; part supply cost of at least 1,000 refers to ps_supplycost > 1000"}
{"sample_id": 6724, "db_id": "retails", "final": {"question": "How many items were shipped on 4th December, 1993?", "sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipdate = '1993-12-04'", "source_tables": ["lineitem"]}, "evidence": "items shipped on 4th December, 1993 refer to l_linenumber where l_shipdate = '1993-12-04';"}
{"sample_id": 6777, "db_id": "retails", "final": {"question": "In the parts shipped by rail, how many are of medium priority?", "sql": "SELECT COUNT(T2.l_partkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'RAIL' AND T1.o_orderpriority = '3-MEDIUM'", "source_tables": ["lineitem", "orders"]}, "evidence": "parts shipped by rail refer to l_partkey where l_shipmode = 'RAIL'; medium priority refers to o_orderpriority = '3-MEDIUM';"}
{"sample_id": 6809, "db_id": "retails", "final": {"question": "Please name any three parts that have an available quantity of more than 9998.", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_availqty > 9998 LIMIT 3", "source_tables": ["partsupp", "part"]}, "evidence": "part name refers to p_name; an available quantity of more than 9998 refers to ps_availqty > 9998"}
{"sample_id": 6860, "db_id": "retails", "final": {"question": "Among the products under the type \"promo brushed steel\", how many of them are manufactured by Manufacturer#5?", "sql": "SELECT COUNT(p_partkey) FROM part WHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5'", "source_tables": ["part"]}, "evidence": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; Manufacturer#5 refers to p_mfgr = 'Manufacturer#5'"}
{"sample_id": 6737, "db_id": "retails", "final": {"question": "Calculate the percentage of suppliers in Germany.", "sql": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0", "source_tables": ["supplier", "nation"]}, "evidence": "DIVIDE(COUNT(s_suppkey where n_name = 'GERMANY'), COUNT(s_suppkey)) as percentage;"}
{"sample_id": 6834, "db_id": "retails", "final": {"question": "What are the top 5 nations of suppliers with the lowest account balance?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey ORDER BY T1.s_acctbal LIMIT 1", "source_tables": ["supplier", "nation"]}, "evidence": "nation refers to n_name; the lowest account balance refers to min(s_acctbal)"}
{"sample_id": 6863, "db_id": "retails", "final": {"question": "Which part has a bigger size, \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\"?", "sql": "SELECT T.p_name FROM ( SELECT p_name, p_size FROM part WHERE p_name IN ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige') ) AS T ORDER BY p_size DESC LIMIT 1", "source_tables": ["part"]}, "evidence": "size refers to p_size; \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\" refers to p_name in ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige')"}
{"sample_id": 6882, "db_id": "retails", "final": {"question": "Among all the suppliers in debt, how many of them are in Europe?", "sql": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE' AND T3.s_acctbal < 0", "source_tables": ["region", "supplier", "nation"]}, "evidence": "in debt refers to s_acctbal < 0; Europe refers to r_name = 'EUROPE'"}
{"sample_id": 6731, "db_id": "retails", "final": {"question": "How many customers are there in India?", "sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDIA'", "source_tables": ["customer", "nation"]}, "evidence": "customers refer to c_custkey; India is the name of the nation which refers to n_name = 'INDIA';"}
{"sample_id": 6903, "db_id": "retails", "final": {"question": "How much is the total price of all the orders shipped to customers in Argentina?", "sql": "SELECT SUM(T3.o_totalprice) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'ARGENTINA'", "source_tables": ["customer", "nation", "orders"]}, "evidence": "total price = sum(o_totalprice); Argentina refers to n_name = 'Argentina'"}
{"sample_id": 6792, "db_id": "retails", "final": {"question": "Indicate the name of the product that is close to being sold out and that has the lowest cost price.", "sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_availqty < 10 ORDER BY T2.ps_supplycost LIMIT 1", "source_tables": ["partsupp", "part"]}, "evidence": "name of the product refers to p_name; close to being sold out refers to ps_availqty < 10; the lowest cost price refers to min(ps_supplycost)"}
{"sample_id": 6843, "db_id": "retails", "final": {"question": "List the names of customers whose accounts are in debt.", "sql": "SELECT c_name FROM customer WHERE c_acctbal < 0", "source_tables": ["customer"]}, "evidence": "name of customer refers to c_name; account in debt refers to c_acctbal < 0"}
{"sample_id": 6728, "db_id": "retails", "final": {"question": "Calculate the percentage of manufactured parts by Manufacturer#3.", "sql": "SELECT CAST(SUM(IIF(p_mfgr = 'Manufacturer#3', 1, 0)) AS REAL) * 100 / COUNT(p_partkey) FROM part", "source_tables": ["part"]}, "evidence": "DIVIDE(COUNT(p_partkey where p_mfgr = 'Manufacturer#3'), COUNT(p_partkey)) as percentage;"}
{"sample_id": 6755, "db_id": "retails", "final": {"question": "Among the products that have a retail price greater than 1,000, how many products were shipped via ship?", "sql": "SELECT COUNT(T1.ps_suppkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_retailprice > 1000 AND T2.l_shipmode = 'SHIP'", "source_tables": ["partsupp", "lineitem", "part"]}, "evidence": "products refer to l_partkey; retail price greater than 1,000 refers to p_retailprice > 1000; shipped via ship refers to l_shipmode = 'SHIP';"}
{"sample_id": 6752, "db_id": "retails", "final": {"question": "What is the total number of suppliers from Germany?", "sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY'", "source_tables": ["supplier", "nation"]}, "evidence": "suppliers refer to s_suppkey; Germany is the name of the nation which refers to n_name = 'GERMANY';"}
{"sample_id": 6847, "db_id": "retails", "final": {"question": "List the 5 orders with the highest total price, indicating the delivery date.", "sql": "SELECT T1.o_orderkey, T2.l_shipdate FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 5", "source_tables": ["lineitem", "orders"]}, "evidence": "order refers to o_orderkey; the highest total price refers to max(o_totalprice); delivery date refers to l_shipdate"}
{"sample_id": 6811, "db_id": "retails", "final": {"question": "What is the nationality of supplier number 1?", "sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 1", "source_tables": ["supplier", "nation"]}, "evidence": "nationality refers to n_name; supplier number 1 refers to s_suppkey = 1"}
{"sample_id": 6753, "db_id": "retails", "final": {"question": "Among the customers in Asia, how many customers are in debt?", "sql": "SELECT COUNT(T1.n_name) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_acctbal < 0 AND T3.r_name = 'ASIA'", "source_tables": ["region", "customer", "nation"]}, "evidence": "customers in Asia refer to n_name where r_name = 'ASIA'; customers in debt refer to c_acctbal < 0;"}
{"sample_id": 6787, "db_id": "retails", "final": {"question": "How many European suppliers are there?", "sql": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'", "source_tables": ["region", "supplier", "nation"]}, "evidence": "European suppliers refer to s_suppkey where r_name = 'EUROPE';"}
{"sample_id": 6744, "db_id": "retails", "final": {"question": "Among the customers in the furniture market segment, how many of them have a nation key of 1?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1", "source_tables": ["customer"]}, "evidence": "furniture market segment refers to c_mktsegment = 'FURNITURE';"}
{"sample_id": 6751, "db_id": "retails", "final": {"question": "Name the countries that belong in the region with comment description \"furiously express accounts wake sly\".", "sql": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_comment = 'furiously express accounts wake sly'", "source_tables": ["region", "nation"]}, "evidence": "r_comment = 'furiously express accounts wake sly';"}
{"sample_id": 6827, "db_id": "retails", "final": {"question": "What is the total price of all orders from the customer with the phone number \"627-220-3983\"?", "sql": "SELECT SUM(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_phone = '627-220-3983'", "source_tables": ["customer", "orders"]}, "evidence": "total price = sum(o_totalprice); phone number \"627-220-3983\" refers to c_phone = '627-220-3983'"}
{"sample_id": 6873, "db_id": "retails", "final": {"question": "Which supplier can provide the most number of \"hot spring dodger dim light\"? Please give the supplier's phone number.", "sql": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T2.ps_availqty DESC LIMIT 1", "source_tables": ["partsupp", "part", "supplier"]}, "evidence": "the most number refers to max(ps_availqty); \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; phone number refers to s_phone"}
{"sample_id": 6788, "db_id": "retails", "final": {"question": "To which segment belongs the customer that made the most orders in April 1994?", "sql": "SELECT T.c_mktsegment FROM ( SELECT T2.c_mktsegment, COUNT(T1.o_orderkey) AS num FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate LIKE '1994-04-%' GROUP BY T1.o_custkey ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "orders"]}, "evidence": "segment refers to c_mktsegment; customer made the most orders in April 1994 refers to c_custkey where o_orderdate LIKE '1994-04-%' and MAX(COUNT(o_orderkey));"}
{"sample_id": 6775, "db_id": "retails", "final": {"question": "Calculate the difference in the average retail price of parts shipped via ship and air.", "sql": "SELECT (CAST(SUM(IIF(T3.l_shipmode = 'SHIP', T1.p_retailprice, 0)) AS REAL) / SUM(IIF(T3.l_shipmode = 'SHIP', 1, 0))) - (CAST(SUM(IIF(T3.l_shipmode = 'AIR', T1.p_retailprice, 0)) AS REAL) / SUM(IIF(T3.l_shipmode = 'AIR', 1, 0))) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_suppkey = T3.l_suppkey", "source_tables": ["partsupp", "part", "lineitem"]}, "evidence": "SUBTRACT(DIVIDE(SUM(p_retailprice where l_shipmode = 'SHIP'), COUNT(l_shipmode = 'SHIP')), DIVIDE(SUM(p_retailprice where l_shipmode = 'AIR'), COUNT(l_shipmode = 'AIR')));"}
{"sample_id": 6898, "db_id": "retails", "final": {"question": "How many customers are in the furniture segment?", "sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE'", "source_tables": ["customer"]}, "evidence": "furniture segment refers to c_mktsegment = 'FURNITURE'"}
{"sample_id": 6874, "db_id": "retails", "final": {"question": "Please list the names of all the suppliers for the part with the highest retail price.", "sql": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T1.p_size DESC LIMIT 1", "source_tables": ["partsupp", "part", "supplier"]}, "evidence": "supplier name refers to s_name; the highest retail price refers to max(p_retailprice)"}
{"sample_id": 6839, "db_id": "retails", "final": {"question": "How many order keys are not applied for the discount?", "sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE l_discount = 0", "source_tables": ["lineitem"]}, "evidence": "order key refers to l_orderkey; not applied for the discount refers to l_discount = 0"}
{"sample_id": 6817, "db_id": "retails", "final": {"question": "What is the delivery time and the clerk of order number 6?", "sql": "SELECT JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate), T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderkey = 6", "source_tables": ["lineitem", "orders"]}, "evidence": "delivery time = subtract(l_receiptdate, l_commitdate); clerk refers to o_clerk; order number 6 refers to o_orderkey = 6"}
{"sample_id": 6845, "db_id": "retails", "final": {"question": "List the phone numbers of customers whose order priority is urgent.", "sql": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderpriority = '1-URGENT'", "source_tables": ["customer", "orders"]}, "evidence": "phone number refers to c_phone; order priority is urgent refers to o_orderpriority = '1-URGENT'"}
{"sample_id": 6868, "db_id": "retails", "final": {"question": "Please list the phone numbers of all the suppliers in Germany.", "sql": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'Germany'", "source_tables": ["supplier", "nation"]}, "evidence": "phone number refers to s_phone; Germany refers to n_name = 'Germany'"}
{"sample_id": 6879, "db_id": "retails", "final": {"question": "The part \"hot spring dodger dim light\" is ordered in how many orders?", "sql": "SELECT COUNT(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'", "source_tables": ["part", "lineitem"]}, "evidence": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'"}
{"sample_id": 6754, "db_id": "retails", "final": {"question": "Provide the phone number of the customer with the highest total price in an order.", "sql": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1", "source_tables": ["customer", "orders"]}, "evidence": "phone number of the customer refers to c_phone; the highest total price refers to MAX(o_totalprice);"}
{"sample_id": 6733, "db_id": "retails", "final": {"question": "List down the nation keys and names in Africa.", "sql": "SELECT T1.n_name, T1.n_nationkey FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'AFRICA'", "source_tables": ["region", "nation"]}, "evidence": "Africa refers to r_name = 'Africa';"}
{"sample_id": 6709, "db_id": "retails", "final": {"question": "What are the top 2 order keys of the item with the highest amount of extended price?", "sql": "SELECT l_orderkey FROM lineitem ORDER BY l_extendedprice DESC LIMIT 2", "source_tables": ["lineitem"]}, "evidence": "the highest amount of extended price refers to MAX(l_extendedprice);"}
{"sample_id": 6772, "db_id": "retails", "final": {"question": "List the names of the countries with the below-average number of customers in ascending order of customer numbers.", "sql": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name HAVING COUNT(T1.c_name) > ( SELECT COUNT(customer.c_name) / COUNT(DISTINCT nation.n_name) FROM customer INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey ) ORDER BY COUNT(T1.c_name)", "source_tables": ["customer", "nation"]}, "evidence": "the names of countries with the below-average number of customers refer to n_name where COUNT(c_name) < DIVIDE(COUNT(c_name)), COUNT(n_name);"}
{"sample_id": 6692, "db_id": "retails", "final": {"question": "What is the nationality of \"Customer#000000055\"?", "sql": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_name = 'Customer#000000055'", "source_tables": ["customer", "nation"]}, "evidence": "\"Customer#000000055\" is the name of the customer which refers to c_name; nationality is the state of belonging to a particular country, therefore nationality refers to n_name;"}
{"sample_id": 6729, "db_id": "retails", "final": {"question": "List any five parts name in Medium Plated Brass.", "sql": "SELECT p_name FROM part WHERE p_type = 'MEDIUM PLATED BRASS' LIMIT 5", "source_tables": ["part"]}, "evidence": "p_type = 'MEDIUM PLATED BRASS'; parts name refer to p_name;"}
{"sample_id": 6725, "db_id": "retails", "final": {"question": "What was the order date of items with the highest total price?", "sql": "SELECT o_orderdate FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )", "source_tables": ["orders"]}, "evidence": "the highest total price refers to MAX(o_totalprice);"}
{"sample_id": 6993, "db_id": "ice_hockey_draft", "final": {"question": "Who had the most assists of team Plymouth Whalers in the 1999-2000 season?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Plymouth Whalers' AND T2.SEASON = '1999-2000' ORDER BY T2.A DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "who refers to PlayerName; most assists refers to MAX(A); team Plymouth Whalers refers to TEAM = 'Plymouth Whalers'; 1999-2000 season refers to SEASON = '1999-2000';"}
{"sample_id": 6997, "db_id": "ice_hockey_draft", "final": {"question": "What is the percentage of Swedish players in playoffs games in the 1997 - 2000 season?", "sql": "SELECT DISTINCT CAST(COUNT(CASE WHEN T1.nation = 'Sweden' THEN T1.ELITEID ELSE NULL END) OVER (PARTITION BY T2.SEASON) AS REAL) * 100 / COUNT(T1.ELITEID) OVER (PARTITION BY T2.SEASON) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON IN ('1997-1998', '1998-1999', '1999-2000')", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(nation = 'Sweden'), COUNT(ELITEID) WHERE SEASON = '1997-2000'), 100); Swedish refers to nation = 'Sweden'; players refers to PlayerName; playoffs games refers to GAMETYPE = 'Playoffs'; 1997-2000 season refers to 3 consecutive SEASONs : '1997-1998', '1998-1999', '1999-2000';"}
{"sample_id": 6971, "db_id": "ice_hockey_draft", "final": {"question": "Who among the players in season 2000-2001 has committed the highest rule violations or penalty minutes?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' ORDER BY T1.PIM DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "committed the highest rule violations or penalty minutes refers to MAX(PIM); 2000-2001 season refers to SEASON = '2000-2001'"}
{"sample_id": 6940, "db_id": "ice_hockey_draft", "final": {"question": "What is the difference in the number of goals scored by Pavel Brendl during the regular season versus the playoffs in the 1998-1999 season?", "sql": "SELECT T3.Rs_G - T4.Pf_G AS diff FROM ( SELECT T2.PlayerName, T1.G AS Rs_G FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Pavel Brendl' AND T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Regular Season' ) AS T3 INNER JOIN ( SELECT T2.PlayerName, T1.G AS Pf_G FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Pavel Brendl' AND T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Playoffs' ) AS T4 ON T3.PlayerName = T4.PlayerName", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "difference = SUBTRACT(SUM(G WHERE GAMETYPE = 'Regular Season'), SUM(G WHERE GAMETYPE = 'Playoffs') WHERE SEASON = '1998-1999'); number of goals scored refers to G; regular season refers to GAMETYPE = 'Regular Season'; playoffs refers to GAMETYPE = 'Playoffs'; 1998-1999 season refers to SEASON = '1998-1999';"}
{"sample_id": 6935, "db_id": "ice_hockey_draft", "final": {"question": "Who is the most valuable player in QMJHL league during the 2004-2005 season?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON BETWEEN '2004' AND '2005' AND T1.LEAGUE = 'QMJHL' ORDER BY T1.P DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "most valuable player refers to MAX(P); QMJHL league refers to LEAGUE = 'QMJHL'; 2004-2005 season refers to SEASON = '2004-2005';"}
{"sample_id": 6950, "db_id": "ice_hockey_draft", "final": {"question": "Among all players drafted by the Toronto Maple Leafs in 2008, identify the player with the highest prospects for the draft.", "sql": "SELECT PlayerName FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND draftyear = '2008' ORDER BY CSS_rank DESC LIMIT 1", "source_tables": ["playerinfo"]}, "evidence": "players refers to PlayerName; drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; highest prospects for the draft refers to MAX(CSS_rank);"}
{"sample_id": 6995, "db_id": "ice_hockey_draft", "final": {"question": "Who is the oldest player that participated in OHL league in the 1997 - 2000 season?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL' AND T2.SEASON = '1999-2000' ORDER BY T1.birthdate LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "oldest player refers to MIN(birthdate); OHL league refers to LEAGUE = 'OHL'; 1997-2000 season refers to SEASON = '1997-2000';"}
{"sample_id": 6991, "db_id": "ice_hockey_draft", "final": {"question": "Name the player who had the most goals for team Rimouski Oceanic in playoff.", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Rimouski Oceanic' AND T2.GAMETYPE = 'Playoffs' ORDER BY T2.G DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; most goals refers to MAX(G); team Rimouski Oceanic refers to TEAM = 'Rimouski Oceanic'; playoff refers to GAMETYPE = 'Playoffs';"}
{"sample_id": 6928, "db_id": "ice_hockey_draft", "final": {"question": "What is the average height in centimeters of all the players in the position of defense?", "sql": "SELECT CAST(SUM(T2.height_in_cm) AS REAL) / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.position_info = 'D'", "source_tables": ["playerinfo", "height_info"]}, "evidence": "average = AVG(height_in_cm); players refers to PlayerName; position of defense refers to position_info = 'D' ;"}
{"sample_id": 6996, "db_id": "ice_hockey_draft", "final": {"question": "Who is the tallest player in team USA U20?", "sql": "SELECT T.PlayerName FROM ( SELECT T1.PlayerName, T3.height_in_cm FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' ORDER BY T3.height_in_cm DESC ) AS T WHERE T.height_in_cm = ( SELECT MAX(T3.height_in_cm) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' )", "source_tables": ["playerinfo", "seasonstatus", "height_info"]}, "evidence": "tallest refers to MAX(height_in_cm); \nplayer refers to PlayerName; team USA U20 refers to TEAM = 'USA U20';"}
{"sample_id": 6962, "db_id": "ice_hockey_draft", "final": {"question": "List out the seasons that Niklas Eckerblom played.", "sql": "SELECT DISTINCT T1.SEASON FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Niklas Eckerblom'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "FALSE;"}
{"sample_id": 6986, "db_id": "ice_hockey_draft", "final": {"question": "How heavy is Matthias Trattnig in kilograms?", "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'Pavel Patera'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "how heavy in kilograms refers to weight_in_kg;"}
{"sample_id": 6945, "db_id": "ice_hockey_draft", "final": {"question": "Identify the players who weigh 120 kg.", "sql": "SELECT T2.PlayerName FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T1.weight_in_kg = 120", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "players refers to PlayerName; weigh 120 kg refers to weight_in_kg = 120;"}
{"sample_id": 6963, "db_id": "ice_hockey_draft", "final": {"question": "Mention the type of game that Matthias Trattnig played.", "sql": "SELECT DISTINCT T1.GAMETYPE FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Matthias Trattnig'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "type of game refers to GAMETYPE;"}
{"sample_id": 6988, "db_id": "ice_hockey_draft", "final": {"question": "What team did Niklas Eckerblom play in the 1997-1998 season?", "sql": "SELECT T2.TEAM FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998' AND T1.PlayerName = 'Niko Kapanen'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "1997-1998 season refers to SEASON = '1997-1998';"}
{"sample_id": 6923, "db_id": "ice_hockey_draft", "final": {"question": "What is the weight of the player with the longest time on ice in the player\u2019s first 7 years of NHL career in kilograms?", "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.sum_7yr_TOI = ( SELECT MAX(t.sum_7yr_TOI) FROM PlayerInfo t )", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weight in kilograms refers to weight_in_kg; longest time on ice in the player's first 7 years of NHL career refers to MAX(sum_7yr_TOI);"}
{"sample_id": 6981, "db_id": "ice_hockey_draft", "final": {"question": "Among the players who played in OHL league during the regular season in 2007-2008, who is the player that attained the most number of assist?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.LEAGUE = 'OHL' AND T1.GAMETYPE = 'Regular Season' ORDER BY T1.A DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "OHL league refers to LEAGUE = 'OHL'; who refers to PlayerName; regular season refers to GAMETYPE = 'Regular Season'; most number of assist refers to MAX(A); 2007-2008 season refers to SEASON = '2007-2008';"}
{"sample_id": 6956, "db_id": "ice_hockey_draft", "final": {"question": "What is the birthplace of Aaron Gagnon?", "sql": "SELECT birthplace FROM PlayerInfo WHERE PlayerName = 'Aaron Gagnon'", "source_tables": ["playerinfo"]}, "evidence": "FALSE;"}
{"sample_id": 6927, "db_id": "ice_hockey_draft", "final": {"question": "What is the BMI of David Bornhammar?", "sql": "SELECT CAST(T2.weight_in_kg AS REAL) / (CAST(T3.height_in_cm AS REAL) / 100 * (CAST(T3.height_in_cm AS REAL) / 100)) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T1.PlayerName = 'David Bornhammar'", "source_tables": ["playerinfo", "weight_info", "height_info"]}, "evidence": "BMI = DIVIDE(weight_in_kg, power(DIVIDE(height_in_cm, 100), 2));"}
{"sample_id": 6941, "db_id": "ice_hockey_draft", "final": {"question": "What is the average weight in pounds of all the players with the highest prospects for the draft?", "sql": "SELECT CAST(SUM(T2.weight_in_lbs) AS REAL) / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.CSS_rank = ( SELECT MAX(CSS_rank) FROM PlayerInfo )", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "average = AVG(weight_in_lbs); weight in pounds refers to weight_in_lbs; players refers to PlayerName; highest prospects for the draft refers to MAX(CSS_rank);"}
{"sample_id": 6957, "db_id": "ice_hockey_draft", "final": {"question": "What is the weight in kg of Tony Martensson?", "sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'Tony Martensson'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "FALSE;"}
{"sample_id": 6926, "db_id": "ice_hockey_draft", "final": {"question": "Please list the names of all the players that are over 90 kg and are right-shooted.", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.shoots = 'R'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "names of the players refers to PlayerName; over 90 kg refers to weight_in_kg > 90; right-shooted refers to shoots = 'R';"}
{"sample_id": 6943, "db_id": "ice_hockey_draft", "final": {"question": "Name the player who scored the most goals in a single game in the 2007-2008 season of WHL?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2007-2008' AND T1.LEAGUE = 'WHL' ORDER BY T1.G DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "name of the player refers to PlayerName; scored the most goals in a single game refers to MAX(G); WHL refers to LEAGUE = 'WHL'; 2007-2008 season refers to SEASON = '2007-2008';"}
{"sample_id": 6976, "db_id": "ice_hockey_draft", "final": {"question": "Who is the most valuable player who played in the 2000-2001 season of the International league?", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' ORDER BY T1.P DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "most valuable player refers to MAX(P); 2000-2001 season refers to SEASON = '2000-2001'; International league refers to LEAGUE = 'International';"}
{"sample_id": 6977, "db_id": "ice_hockey_draft", "final": {"question": "How many players who were born in 1980 weigh 185 in pounds?", "sql": "SELECT COUNT(T2.ELITEID) FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T1.weight_in_lbs = 185 AND strftime('%Y', T2.birthdate) = '1980'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "born in 1980 refers to birthyear = 1980; weigh 185 in pounds refers to weight_in_lbs = 185;"}
{"sample_id": 6983, "db_id": "ice_hockey_draft", "final": {"question": "Calculate the average weight in pounds of all players drafted by Arizona Coyotes.", "sql": "SELECT CAST(SUM(T1.weight_in_lbs) AS REAL) / COUNT(T2.ELITEID) FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T2.overallby = 'Arizona Coyotes'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "average weight in pounds = AVG(weight_in_lbs); weight in pounds refers to weight_in_lbs; players refers to PlayerName; drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes';"}
{"sample_id": 6925, "db_id": "ice_hockey_draft", "final": {"question": "Among all the players that are right-shooted, how many of them weigh over 90 kg?", "sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.shoots = 'R'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "right-shooted refers to shoots = 'R'; weigh over 90 kg refers to weight_in_kg > 90;"}
{"sample_id": 6936, "db_id": "ice_hockey_draft", "final": {"question": "What are the names of the players who played for Acadie-Bathurst Titan during the regular season in 1998-1999?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1998-1999' AND T1.GAMETYPE = 'Regular Season' AND T1.TEAM = 'Acadie-Bathurst Titan'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "names of the players refers to PlayerName; played for Acadie-Bathurst Titan refers to TEAM = 'AcadieandBathurst Titan'; regular season refers to GAMETYPE = 'Regular Season'; in 1998-1999 refers to SEASON = '1998-1999';"}
{"sample_id": 6958, "db_id": "ice_hockey_draft", "final": {"question": "List out the name of players who weight 190 lbs.", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_lbs = 190", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "name of players refers to PlayerName; weight 190 lbs refers to weight_in_lbs = 190;"}
{"sample_id": 6966, "db_id": "ice_hockey_draft", "final": {"question": "Among the Italian players, who has the shortest height?", "sql": "SELECT T2.PlayerName FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.nation = 'Italy' ORDER BY T1.height_in_cm ASC LIMIT 1", "source_tables": ["playerinfo", "height_info"]}, "evidence": "Italian refers to nation = 'Italy'; players refers to PlayerName; shortest height refers to MIN(height_in_cm);"}
{"sample_id": 6989, "db_id": "ice_hockey_draft", "final": {"question": "Which team has the most Swedish?", "sql": "SELECT T.TEAM FROM ( SELECT T2.TEAM, COUNT(DISTINCT T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.nation = 'Sweden' GROUP BY T2.TEAM ORDER BY COUNT(DISTINCT T1.ELITEID) DESC LIMIT 1 ) AS T", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "Swedish refers to nation = 'Sweden'; team with the most Swedish refers to MAX(TEAM WHERE nation = 'Sweden');"}
{"sample_id": 6921, "db_id": "ice_hockey_draft", "final": {"question": "Among the players that weigh more than 90 kg, how many of them have a position of defense?", "sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.position_info = 'D'", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weigh more than 90 kg refers to weight_in_kg > 90; position of defense refers to position_info = 'D' ;"}
{"sample_id": 6970, "db_id": "ice_hockey_draft", "final": {"question": "Among the USA players, who has the lightest weight?", "sql": "SELECT T2.PlayerName FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T2.nation = 'USA' ORDER BY T1.weight_in_lbs ASC LIMIT 1", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "USA refers to nation = 'USA' ; players refers to PlayerName; lightest weight refers to MIN(weight_in_lbs);\n"}
{"sample_id": 6959, "db_id": "ice_hockey_draft", "final": {"question": "Who has the heaviest weight?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id ORDER BY T2.weight_in_kg DESC LIMIT 1", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "who refers to PlayerName; heaviest weight refers to MAX(weight_in_kg);"}
{"sample_id": 6922, "db_id": "ice_hockey_draft", "final": {"question": "Among the players that weigh more than 90 kg, what is the name of the player that has the most attendance in the player's first 7 years of NHL career?", "sql": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 AND T1.sum_7yr_GP = ( SELECT MAX(T1.sum_7yr_GP) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90 )", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weigh more than 90 kg refers to weight_in_kg > 90; name of the player refers to PlayerName; most attendance in the player's first 7 years of NHL career refers to MAX(sum_7yr_GP);"}
{"sample_id": 6969, "db_id": "ice_hockey_draft", "final": {"question": "What is the percentage of Russian players who have a height of under 200 inch?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.height_in_cm < 200 AND T2.nation = 'Russia' THEN T2.ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height", "source_tables": ["playerinfo", "height_info"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(nation = 'Russia' WHERE height_in_cm < 200), COUNT(ELITEID)), 100); Russian refers to nation = 'Russia'; players refers to PlayerName; height of under 200 inch refers to height_in_cm < 200;"}
{"sample_id": 6985, "db_id": "ice_hockey_draft", "final": {"question": "How many games did Per Mars play in the 1997-1998 season?", "sql": "SELECT T2.GP FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998' AND T1.PlayerName = 'Pavel Patera'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "1997-1998 season refers to SEASON = '1997-1998';"}
{"sample_id": 6965, "db_id": "ice_hockey_draft", "final": {"question": "What is the highest point highest point of Per Mars in the draft year?", "sql": "SELECT T1.P FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Per Mars' ORDER BY T1.P DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "highest point in the draft year refers to MAX(P);"}
{"sample_id": 6920, "db_id": "ice_hockey_draft", "final": {"question": "How many players weigh more than 90 kg?", "sql": "SELECT COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T2.weight_in_kg > 90", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "weigh more than 90 kg refers to weight_in_kg > 90;"}
{"sample_id": 6974, "db_id": "ice_hockey_draft", "final": {"question": "How many players were drafted by Arizona Coyotes whose height reaches 195 centimeters?", "sql": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.overallby = 'Arizona Coyotes' AND T1.height_in_cm = 195", "source_tables": ["playerinfo", "height_info"]}, "evidence": "drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes'; height reaches 195 centimeters refers to height_in_cm = 195;"}
{"sample_id": 6961, "db_id": "ice_hockey_draft", "final": {"question": "Which team does Andreas Jamtin belong to?", "sql": "SELECT DISTINCT T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.PlayerName = 'Andreas Jamtin'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "FALSE;"}
{"sample_id": 6973, "db_id": "ice_hockey_draft", "final": {"question": "Who among the players drafted by Arizona Coyotes in 2000 has committed the highest rule violations?", "sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.overallby = 'Arizona Coyotes' AND T2.draftyear = 2000 ORDER BY T1.PIM DESC LIMIT 1", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "who refers to PlayerName; drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes'; committed the highest rule violations refers to MAX(PIM); in 2000 refers to draftyear = 2000;"}
{"sample_id": 6960, "db_id": "ice_hockey_draft", "final": {"question": "What is the percentage of players who were born in Denmark and weight above 154 lbs?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.nation = 'Denmark' AND T2.weight_in_lbs > 154 THEN T1.ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id", "source_tables": ["playerinfo", "weight_info"]}, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(weight_in_lbs > 154 and nation = 'Denmark'), COUNT(ELITEID)), 100); players refers to PlayerName; born in Denmark refers to nation = 'Denmark'; weight above 154 lbs refers to weight_in_lbs > 154;"}
{"sample_id": 6933, "db_id": "ice_hockey_draft", "final": {"question": "How many players, who were drafted by Anaheim Ducks in 2008, have played for U.S. National U18 Team?", "sql": "SELECT COUNT(DISTINCT T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.overallby = 'Anaheim Ducks' AND T1.draftyear = 2008 AND T2.TEAM = 'U.S. National U18 Team'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "drafted by Anaheim Ducks refers to overallby = 'Anaheim Ducks'; in 2008 refers to draftyear = 2008; played for U.S. National U18 Team refers to TEAM = 'U.S. National U18 Team';"}
{"sample_id": 6975, "db_id": "ice_hockey_draft", "final": {"question": "List the names of all players from Avangard Omsk that have played for playoffs in season 2000-2001.", "sql": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.TEAM = 'Avangard Omsk' AND T1.GAMETYPE = 'Playoffs'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "names of the players refers to PlayerName; Avangard Omsk refers to TEAM = 'Avangard Omsk'; playoffs refers to GAMETYPE = 'Playoffs'; 2000-2001 season refers to SEASON = '2000-2001';"}
{"sample_id": 6952, "db_id": "ice_hockey_draft", "final": {"question": "How many players who were drafted by the Toronto Maple Leafs have played over 300 games in their first 7 years of the NHL career?", "sql": "SELECT COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND sum_7yr_GP > 300", "source_tables": ["playerinfo"]}, "evidence": "drafted by the Toronto Maple Leafs refers to overallby = 'Toronto Maple Leafs'; played over 300 games in their first 7 years of the NHL career refers to sum_7yr_GP > 300;"}
{"sample_id": 6939, "db_id": "ice_hockey_draft", "final": {"question": "Among the players who played 72 games, how many are left-shooters?", "sql": "SELECT COUNT(T2.ELITEID) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.GP = 72 AND T2.shoots = 'L'", "source_tables": ["playerinfo", "seasonstatus"]}, "evidence": "played 72 games refers to GP = 72; left-shooters refers to shoots = 'L';"}
{"sample_id": 7393, "db_id": "works_cycles", "final": {"question": "What is the primary type of all single female employees hired between 1/1/2008 to 12/31/2008?", "sql": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'F' AND T1.MaritalStatus = 'S' AND STRFTIME('%Y-%m-%d', T1.HireDate) BETWEEN '2008-1-1' AND '2008-12-31' GROUP BY T2.PersonType ORDER BY COUNT(T2.PersonType) DESC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "primary type refers to PersonType; single refers to MaritalStatus = 'S\"; female refers to Gender = 'F'; HireDate BETWEEN '2010-1-1'AND '2010-12-31';"}
{"sample_id": 7428, "db_id": "works_cycles", "final": {"question": "Has the product Chainring Bolts been on any of the sales?", "sql": "SELECT CASE WHEN COUNT(T1.Description) >= 1 THEN 'Yes' ELSE 'No' END FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T3.Name = 'Chainring Bolts'", "source_tables": ["specialofferproduct", "specialoffer", "product"]}, "evidence": "a product that's been on sale refers to SellStartDate NOT null and vice versa;"}
{"sample_id": 7267, "db_id": "works_cycles", "final": {"question": "What are the names of the vendors to which the company purchased its women's tights products?", "sql": "SELECT DISTINCT T4.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN ProductSubcategory AS T3 ON T1.ProductSubcategoryID = T3.ProductSubcategoryID INNER JOIN Vendor AS T4 ON T2.BusinessEntityID = T4.BusinessEntityID WHERE T1.MakeFlag = 0 AND T1.Style = 'W' AND T3.Name = 'Tights'", "source_tables": ["vendor", "productsubcategory", "product", "productvendor"]}, "evidence": "product is purchased refers to MakeFlag = 0; women's refers to Style = 'W'; ProductSubcategoryID = 'Tights';"}
{"sample_id": 7437, "db_id": "works_cycles", "final": {"question": "What is the bussiness id for Mr. Hung-Fu Ting?", "sql": "SELECT BusinessEntityID FROM Person WHERE Title = 'Mr.' AND FirstName = 'Hung-Fu' AND LastName = 'Ting'", "source_tables": ["person"]}, "evidence": "business id refers to BusinessEntityID;"}
{"sample_id": 7431, "db_id": "works_cycles", "final": {"question": "For all the employees that have left the Engineering Department, what is the average time of their stay?", "sql": "SELECT CAST(SUM(365 * (STRFTIME('%Y', T1.EndDate) - STRFTIME('%Y', T1.StartDate)) + 30 * (STRFTIME('%m', T1.EndDate) - STRFTIME('%m', T1.StartDate)) + STRFTIME('%d', T1.EndDate) - STRFTIME('%d', T1.StartDate)) AS REAL) / COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.Name = 'Engineering' AND T1.EndDate IS NOT NULL", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": "employees who left a department refers to EndDate NOT null; average stay = AVG(SUBTRACT(year(EndDate)), (year(T1.StartDate)));"}
{"sample_id": 7361, "db_id": "works_cycles", "final": {"question": "What is the order reference number for the \"Mountain End Caps\" product?", "sql": "SELECT T2.ReferenceOrderID FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Mountain End Caps'", "source_tables": ["transactionhistory", "product"]}, "evidence": "Order Reference Number refers to ReferenceOrderID"}
{"sample_id": 7084, "db_id": "works_cycles", "final": {"question": "List, by ProductID, all products whose profit, relative to the standard price, is negative.", "sql": "SELECT DISTINCT ProductID FROM ProductVendor WHERE StandardPrice - LastReceiptCost < 0", "source_tables": ["productvendor"]}, "evidence": "Profit = SUBTRACT(StandardPrice, LastRecipeCost)\n"}
{"sample_id": 7472, "db_id": "works_cycles", "final": {"question": "What proportion of work order is in Subassembly?", "sql": "SELECT 100.0 * SUM(CASE WHEN T1.Name = 'Subassembly' THEN 1 ELSE 0 END) / COUNT(T2.WorkOrderID) FROM Location AS T1 INNER JOIN WorkOrderRouting AS T2 ON T1.LocationID = T2.LocationID", "source_tables": ["location", "workorderrouting"]}, "evidence": "proportion = DIVIDE(SUM(Name = 'Subassembly'). (COUNT(WorkOrderID)));"}
{"sample_id": 7089, "db_id": "works_cycles", "final": {"question": "Identifies the ID number of the customer whose sales order for 32 units had a unit price of 35.", "sql": "SELECT T2.CustomerID FROM SalesOrderDetail AS T1 INNER JOIN Customer AS T2 WHERE T1.UnitPrice = 35 AND T1.OrderQty = 32", "source_tables": ["customer", "salesorderdetail"]}, "evidence": "sales order for 32 units refers to OrderQty = 32"}
{"sample_id": 7312, "db_id": "works_cycles", "final": {"question": "List the name of married employees with less than 20 vacation hours.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T2.VacationHours < 20", "source_tables": ["employee", "person"]}, "evidence": "married employee refers to MaritalStatus = 'M'; less than 20 vacation hours refers to VacationHours<20"}
{"sample_id": 7037, "db_id": "works_cycles", "final": {"question": "How many active employees whose payrate is equal or below 30 per hour.", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.Rate <= 30", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "active employee refers to CurrentFlag = 1; Rate< = 30;"}
{"sample_id": 7313, "db_id": "works_cycles", "final": {"question": "Name the oldest employee who is working on night shift. How old is the employee?", "sql": "SELECT T1.FirstName, T1.LastName , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.ShiftId = 3 ORDER BY STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate) DESC LIMIT 1", "source_tables": ["employeedepartmenthistory", "employee", "person"]}, "evidence": "working on night shift refers to ShiftID = 3; oldest employee refers to min(BirthDate); age = 2022-year(BirthDate)+1"}
{"sample_id": 7212, "db_id": "works_cycles", "final": {"question": "List all of the credit cards that had expired by 2007.", "sql": "SELECT CardNumber FROM CreditCard WHERE ExpYear < 2007", "source_tables": ["creditcard"]}, "evidence": "card that expires in 2007 refers to ExpYear = 2007;"}
{"sample_id": 7154, "db_id": "works_cycles", "final": {"question": "What are the unit measure codes for product ID No.762?", "sql": "SELECT T2.UnitMeasureCode FROM Product AS T1 INNER JOIN UnitMeasure AS T2 ON T1.SizeUnitMeasureCode = T2.UnitMeasureCode OR T1.WeightUnitMeasureCode = T2.UnitMeasureCode WHERE T1.ProductID = 762 GROUP BY T1.ProductID, T2.UnitMeasureCode", "source_tables": ["product", "unitmeasure"]}, "evidence": ""}
{"sample_id": 7189, "db_id": "works_cycles", "final": {"question": "How many of the non-sales employees are married?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'EM' AND T1.MaritalStatus = 'M'", "source_tables": ["employee", "person"]}, "evidence": "Married refers to MaritalStatus = 'M';\u00a0 non-sales employees refer to PersonType = 'EM'"}
{"sample_id": 7131, "db_id": "works_cycles", "final": {"question": "What are the salespeople's email addresses?", "sql": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SP'", "source_tables": ["emailaddress", "person"]}, "evidence": "Salespeople refers to PersonType = 'SP'"}
{"sample_id": 7275, "db_id": "works_cycles", "final": {"question": "How many salespersons haven't met quota?", "sql": "SELECT COUNT(BusinessEntityID) FROM SalesPerson WHERE Bonus = 0", "source_tables": ["salesperson"]}, "evidence": "salesperson that haven't met the quota refers to Bonus = 0;"}
{"sample_id": 7200, "db_id": "works_cycles", "final": {"question": "List down the email address of female single employees.", "sql": "SELECT T3.EmailAddress FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmailAddress AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.Gender = 'F' AND T1.MaritalStatus = 'S'", "source_tables": ["employee", "emailaddress", "person"]}, "evidence": "female refers to Gender = 'F'; single refers to MaritalStatus = 'S';"}
{"sample_id": 7162, "db_id": "works_cycles", "final": {"question": "What's the profit for the Freewheel?", "sql": "SELECT T1.LastReceiptCost - T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Freewheel'", "source_tables": ["productvendor", "product"]}, "evidence": "SUBTRACT(LastReceiptCost, StandardPrice) for ProductID where name = 'Freewheel'"}
{"sample_id": 7100, "db_id": "works_cycles", "final": {"question": "What is the name of the subcategory to which the gray product with the lowest safety stock level belongs?", "sql": "SELECT T1.Name FROM ProductSubcategory AS T1 INNER JOIN Product AS T2 USING (ProductSubcategoryID) WHERE T2.Color = 'Grey' GROUP BY T1.Name", "source_tables": ["productsubcategory", "product"]}, "evidence": "gray is color of product"}
{"sample_id": 7449, "db_id": "works_cycles", "final": {"question": "What is the scrap reason for work order \"57788\"?", "sql": "SELECT T2.Name FROM WorkOrder AS T1 INNER JOIN ScrapReason AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.WorkOrderID = 57788", "source_tables": ["scrapreason", "workorder"]}, "evidence": ""}
{"sample_id": 7170, "db_id": "works_cycles", "final": {"question": "What is the PreferredVendorStatus for the company which has the rowguid of \"684F328D-C185-43B9-AF9A-37ACC680D2AF\"?", "sql": "SELECT T1.PreferredVendorStatus FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '684F328D-C185-43B9-AF9A-37ACC680D2AF'", "source_tables": ["vendor", "businessentity"]}, "evidence": "PreferredVendorStatus = 1 means 'Do not use if another vendor is available'; CreditRating = 2 means 'Preferred over other vendors supplying the same product'"}
{"sample_id": 7250, "db_id": "works_cycles", "final": {"question": "In 2007, which job position was hired the most?", "sql": "SELECT JobTitle FROM Employee WHERE STRFTIME('%Y', HireDate) = '2007' GROUP BY HireDate ORDER BY COUNT(JobTitle) DESC LIMIT 1", "source_tables": ["employee"]}, "evidence": "Job position and job title are synonyms; job position that was hired the most refers to MAX(COUNT(JobTitle); HireDate BETWEEN '2007-1-1' AND '2007-12-31';"}
{"sample_id": 7161, "db_id": "works_cycles", "final": {"question": "What rating did Jill give for HL Mountain Pedal?", "sql": "SELECT T1.Rating FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ReviewerName = 'Jill' AND T2.Name = 'HL Mountain Pedal'", "source_tables": ["productreview", "product"]}, "evidence": "Jill refers to the name of reviewer; HL Mountain Pedal refers to the name of the product"}
{"sample_id": 7109, "db_id": "works_cycles", "final": {"question": "Please list the departments that are part of the Executive General and Administration group.", "sql": "SELECT Name FROM Department WHERE GroupName = 'Executive General and Administration'", "source_tables": ["department"]}, "evidence": "Department refers to Name where GroupName = 'Executive General and Administration'"}
{"sample_id": 7335, "db_id": "works_cycles", "final": {"question": "State the employee who are born in or after 1970 and with the least sick leave hour.", "sql": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T1.BirthDate) > '1970' ORDER BY T1.SickLeaveHours LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "born in or after 1970 refers to year(BirthDate) > = 1970;"}
{"sample_id": 7058, "db_id": "works_cycles", "final": {"question": "For the employees who have the highest pay frequency, please list their vacation hours.", "sql": "SELECT T2.VacationHours FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.BusinessEntityID = ( SELECT BusinessEntityID FROM EmployeePayHistory ORDER BY Rate DESC LIMIT 1 )", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "highest pay frequency refers to PayFrequency = 2"}
{"sample_id": 7002, "db_id": "works_cycles", "final": {"question": "Name all products and total quantity for each item for shopping cart ID 14951.", "sql": "SELECT T1.Name, T2.Quantity FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ShoppingCartID = 14951", "source_tables": ["shoppingcartitem", "product"]}, "evidence": ""}
{"sample_id": 7426, "db_id": "works_cycles", "final": {"question": "Please list the product names of all the products on the LL Road Frame Sale.", "sql": "SELECT T3.Name FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Description = 'LL Road Frame Sale'", "source_tables": ["specialofferproduct", "specialoffer", "product"]}, "evidence": "LL Road Frame Sale is a description of special offer"}
{"sample_id": 7140, "db_id": "works_cycles", "final": {"question": "What is the full address of business number 24?", "sql": "SELECT T1.AddressLine1, T1.AddressLine2 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T2.BusinessEntityID = 24", "source_tables": ["address", "businessentityaddress"]}, "evidence": "Full address refers to AddressLine1+AddressLine2; business number 24 refers to BusinessEntityID = '24'"}
{"sample_id": 7375, "db_id": "works_cycles", "final": {"question": "How much is the amount to be paid by the company for the purchase order with the third highest freight amount?", "sql": "SELECT TotalDue FROM PurchaseOrderHeader ORDER BY Freight DESC LIMIT 2, 1", "source_tables": ["purchaseorderheader"]}, "evidence": "amount to be paid refers to TotalDue;"}
{"sample_id": 7073, "db_id": "works_cycles", "final": {"question": "Among the married employees with the highest pay frequency, how many of them have an eastern name style?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeePayHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'M' AND T2.NameStyle = 1 AND T3.Rate = ( SELECT Rate FROM EmployeePayHistory ORDER BY Rate DESC LIMIT 1 )", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; Eastern name style refers to NameStyle = 1;"}
{"sample_id": 7387, "db_id": "works_cycles", "final": {"question": "Among the products with an average lead time of 60, which vendor has the highest profit on net? Indicate the credit rating of such vendor.", "sql": "SELECT T2.Name, T2.CreditRating FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.AverageLeadTime = 60 ORDER BY T1.LastReceiptCost - T1.StandardPrice DESC LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "profit on net = SUBTRACT(LastReceiptCost, StandardPrice);"}
{"sample_id": 7367, "db_id": "works_cycles", "final": {"question": "What is the Crankarm product's net profit?", "sql": "SELECT T2.LastReceiptCost - T2.StandardPrice FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Crankarm%'", "source_tables": ["product", "productvendor"]}, "evidence": "net profit = Subtract(LastReceiptCost, StandardPrice);"}
{"sample_id": 7256, "db_id": "works_cycles", "final": {"question": "What is the total amount due of all the purchases made by the company to the vendor that has the lowest selling price amount of a single product? Indicate the name of the vendor to which the purchases was made.", "sql": "SELECT T1.UnitPrice, T3.Name FROM PurchaseOrderDetail AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID INNER JOIN Vendor AS T3 ON T2.VendorID = T3.BusinessEntityID ORDER BY T1.UnitPrice LIMIT 1", "source_tables": ["purchaseorderdetail", "purchaseorderheader", "vendor"]}, "evidence": "Vendor's selling price of a single product refers to UnitPrice;"}
{"sample_id": 7266, "db_id": "works_cycles", "final": {"question": "How much is the average salary of female employees in comparison to male employees?", "sql": "SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'F'", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "female refers to Gender = 'F'; male refers to Gender = 'M'; difference in the average salary of female against male employees = SUBTRACT(AVG(Rate where Gender = 'F')), (AVG(Rate where Gender = 'M')));"}
{"sample_id": 7236, "db_id": "works_cycles", "final": {"question": "Where does the person with the BusinessEntityID \"5555\" live?", "sql": "SELECT T3.City, T3.AddressLine1 FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID INNER JOIN Address AS T3 ON T1.AddressID = T3.AddressID WHERE T1.BusinessEntityID = 5555 AND T2.Name = 'Home'", "source_tables": ["addresstype", "address", "businessentityaddress"]}, "evidence": "where the person live refers addresstype.Name = 'Home'"}
{"sample_id": 7114, "db_id": "works_cycles", "final": {"question": "Please list the top three employees with the most unused sick leave along with their position titles.", "sql": "SELECT JobTitle FROM Employee ORDER BY SickLeaveHours DESC LIMIT 3", "source_tables": ["employee"]}, "evidence": "employees refers to BusinessEntityID; most unused sick leave refers to MAX(SickLeaveHours); position title refers to JobTitle"}
{"sample_id": 7157, "db_id": "works_cycles", "final": {"question": "For the document Control Assistant who was born on 1975/12/25, how many private documents did he/she have?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Assistant' AND T2.BirthDate = '1975-12-25' AND T1.DocumentSummary IS NULL", "source_tables": ["employee", "document"]}, "evidence": "Document Control Assistant refers\u00a0to the\u00a0JobTitle = 'Document Control Assistant'; born on 1975/12/25 refers to BirthDate = '1975-12-25'; private documents indicate that DocumentSummary is null"}
{"sample_id": 7417, "db_id": "works_cycles", "final": {"question": "Please list the departments that David Bradley used to belong to.", "sql": "SELECT T2.DepartmentID FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["employeedepartmenthistory", "department", "person"]}, "evidence": ""}
{"sample_id": 7414, "db_id": "works_cycles", "final": {"question": "Please list the names of all the store contact employees whose credit cards expired in 2007.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T3.ExpYear = 2007 AND T1.PersonType = 'SC'", "source_tables": ["creditcard", "personcreditcard", "person"]}, "evidence": "year of credit card expiration refers to ExpYear; ExpYear = 2007; store contact refers to PersonType = 'SC';"}
{"sample_id": 7220, "db_id": "works_cycles", "final": {"question": "How many sales orders did the salesperson David R. Campbell create?", "sql": "SELECT COUNT(T2.TotalDue) FROM Person AS T1 INNER JOIN SalesOrderHeader AS T2 ON T1.ModifiedDate = T2.DueDate WHERE T1.FirstName = 'David' AND T1.MiddleName = 'R' AND T1.LastName = 'Campbell' AND T1.PersonType = 'SP'", "source_tables": ["salesorderheader", "person"]}, "evidence": "SP is an abbreviation for Sales Person; PersonType = 'SP';"}
{"sample_id": 7408, "db_id": "works_cycles", "final": {"question": "To which e-mail address should I write if I want to contact David Bradley?", "sql": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["emailaddress", "person"]}, "evidence": ""}
{"sample_id": 7347, "db_id": "works_cycles", "final": {"question": "Which work order transaction number has the highest product quantity?", "sql": "SELECT TransactionID FROM TransactionHistory WHERE TransactionType = 'W' ORDER BY Quantity DESC LIMIT 1", "source_tables": ["transactionhistory"]}, "evidence": "work order transaction refers to TransactionType = 'W';"}
{"sample_id": 7401, "db_id": "works_cycles", "final": {"question": "Where can I get the demographic information about the Valley Bicycle Specialists store?", "sql": "SELECT Demographics FROM Store WHERE Name = 'Valley Bicycle Specialists'", "source_tables": ["store"]}, "evidence": "Valley Bicycle Specialists is a name of a store;"}
{"sample_id": 7269, "db_id": "works_cycles", "final": {"question": "What product has the fewest online orders from one customer? List the product's class, line of business, and list price.", "sql": "SELECT T2.Class, T2.ProductLine, T2.ListPrice FROM ShoppingCartItem AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY SUM(Quantity) LIMIT 1", "source_tables": ["shoppingcartitem", "product"]}, "evidence": "fewest online orders refer to MIN(Quantity);"}
{"sample_id": 7121, "db_id": "works_cycles", "final": {"question": "What job is person number 322 currently holding?", "sql": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID WHERE T2.BusinessEntityID = 332", "source_tables": ["businessentitycontact", "contacttype"]}, "evidence": "person number 322 refers to PersonID = 18; job is the name of contacttype"}
{"sample_id": 7036, "db_id": "works_cycles", "final": {"question": "Who is the Vice President of Engineering and when did he join the company? Indicate his/her full name.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName, T1.HireDate FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T1.JobTitle = 'Vice President of Engineering'", "source_tables": ["employee", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName; HiredDate refers to the date the person joins the company;"}
{"sample_id": 7245, "db_id": "works_cycles", "final": {"question": "Compare the average pay rate of male and female employees.", "sql": "SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID GROUP BY T1.Gender", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "male refers to Gender = 'M'; female refers to Gender = 'F'; difference in average rate = DIVIDE(AVG(Rate where Gender = 'F')), (AVG(Rate where Gender = 'M'))) as diff;"}
{"sample_id": 7333, "db_id": "works_cycles", "final": {"question": "State the vendor for product number WB-H098.", "sql": "SELECT T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.ProductNumber = 'WB-H098'", "source_tables": ["vendor", "product", "productvendor"]}, "evidence": ""}
{"sample_id": 7006, "db_id": "works_cycles", "final": {"question": "Which is a high quality product but with the lowest transacted quantity?", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Class = 'H' ORDER BY T2.Quantity ASC LIMIT 1", "source_tables": ["transactionhistory", "product"]}, "evidence": "High quality refers to the product's quality class, therefore Class = 'H'; the lowest transacted quantity refers to Quantity = 1"}
{"sample_id": 7255, "db_id": "works_cycles", "final": {"question": "What is the age of the oldest Marketing Specialist by 12/31/2015 and what is his/her hourly rate?", "sql": "SELECT 2015 - STRFTIME('%Y', T1.BirthDate), T2.Rate FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Marketing Specialist' ORDER BY 2015 - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "age as of 12/31/2015 = SUBTRACT(2015, year(BirthDate)); hourly rate refers to Rate;"}
{"sample_id": 7419, "db_id": "works_cycles", "final": {"question": "Which employee has been in the Engineering Department the longest? Please give his or her firstname and lastname.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' ORDER BY T2.EndDate - T2.StartDate DESC LIMIT 1", "source_tables": ["employeedepartmenthistory", "department", "person"]}, "evidence": "length of stay in a department = SUBTRACT(EndDate, StartDate);"}
{"sample_id": 7391, "db_id": "works_cycles", "final": {"question": "How much are the minimum orders of the vendors that are no longer used by the company?", "sql": "SELECT T2.MinOrderQty FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.ActiveFlag = 0 ORDER BY T2.MinOrderQty LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "vendors that are no longer used by the company refers to ActiveFlag = 0;"}
{"sample_id": 7209, "db_id": "works_cycles", "final": {"question": "Among the employees born before 1980 , how many of them are single?", "sql": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalStatus = 's' AND BirthDate < '1980-1-1'", "source_tables": ["employee"]}, "evidence": "BirthDate<'1980-01-01'; single refers to MaritalStatus = 'S' or null;"}
{"sample_id": 7027, "db_id": "works_cycles", "final": {"question": "Between Northwest and Southeast of the United States, which territory one recorded the highest amount of sales last year?", "sql": "SELECT Name FROM SalesTerritory WHERE CountryRegionCode = 'US' AND (Name = 'Northwest' OR Name = 'Southeast') ORDER BY SalesLastYear DESC LIMIT 1", "source_tables": ["salesterritory"]}, "evidence": "United States refers to CountryRegionCode = 'US';"}
{"sample_id": 7360, "db_id": "works_cycles", "final": {"question": "Who is the \"Next-Door Bike Store\" point of contact?", "sql": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID INNER JOIN Store AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Next-Door Bike Store'", "source_tables": ["businessentitycontact", "contacttype", "store"]}, "evidence": "Next-Door Bike Store is name of a store"}
{"sample_id": 7301, "db_id": "works_cycles", "final": {"question": "Please list the email adresses of the reviewers who have given the lowest rating to the product HL Mountain Pedal.", "sql": "SELECT T1.EmailAddress FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Mountain Pedal' ORDER BY T1.Rating LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "lowest rating refers to Rating = 1"}
{"sample_id": 7404, "db_id": "works_cycles", "final": {"question": "Which product has the highest standard cost?", "sql": "SELECT Name FROM Product ORDER BY StandardCost DESC LIMIT 1", "source_tables": ["product"]}, "evidence": ""}
{"sample_id": 7035, "db_id": "works_cycles", "final": {"question": "Who is the company's highest-paid single female employee? Include her full name and job title.", "sql": "SELECT T3.FirstName, T3.MiddleName, T3.LastName, T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'S' AND T1.Gender = 'F' ORDER BY T2.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName; highest-paid refers to max(Rate); single refers to Status = 'S'; female refers to Gender = 'F';"}
{"sample_id": 7070, "db_id": "works_cycles", "final": {"question": "Among the active employees, how many of them have a courtesy title of \"Mr\"?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.Title = 'Mr.'", "source_tables": ["employee", "person"]}, "evidence": "active status of employees refers to CurrentFlag = 1;"}
{"sample_id": 7282, "db_id": "works_cycles", "final": {"question": "Which product gets the most reviews?", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "most reviews refers to MAX(count(ProductID))\n\n"}
{"sample_id": 7003, "db_id": "works_cycles", "final": {"question": "List the product name with more than 5 quantity in the shopping cart.", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ShoppingCartItem AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 5", "source_tables": ["shoppingcartitem", "product"]}, "evidence": "Product with more than 5 quantity refers to Quantity>5"}
{"sample_id": 7406, "db_id": "works_cycles", "final": {"question": "Among the employees who are store contacts, how many of them have a title of \"Mr.\"?", "sql": "SELECT COUNT(BusinessEntityID) FROM Person WHERE PersonType = 'SC' AND Title = 'Mr.'", "source_tables": ["person"]}, "evidence": "store contact refers to PersonType = 'SC';"}
{"sample_id": 7093, "db_id": "works_cycles", "final": {"question": "What is the job title of the newest employee in department 12?", "sql": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.DepartmentID = 12 ORDER BY T2.StartDate DESC LIMIT 1", "source_tables": ["employeedepartmenthistory", "employee"]}, "evidence": "newest employee refers to MAX(StartDate)"}
{"sample_id": 7141, "db_id": "works_cycles", "final": {"question": "Which year is credit card No.9648's Expiration Year?", "sql": "SELECT ExpYear FROM CreditCard WHERE CreditCardID = 9648", "source_tables": ["creditcard"]}, "evidence": "Expiration year refers to ExpYear"}
{"sample_id": 7369, "db_id": "works_cycles", "final": {"question": "What is the company's second highest salary per hour for employees who are paid monthly?", "sql": "SELECT Rate FROM EmployeePayHistory WHERE PayFrequency = 1 ORDER BY Rate DESC LIMIT 1, 1", "source_tables": ["employeepayhistory"]}, "evidence": "salary received monthly refers to PayFrequency = 1; highest salary per hour refers to Max(Rate);"}
{"sample_id": 7009, "db_id": "works_cycles", "final": {"question": "List all product names that are high in quality. Please also state its selling price.", "sql": "SELECT Name, ListPrice FROM Product WHERE Class = 'H'", "source_tables": ["product"]}, "evidence": "High quality refers to the product's quality class, therefore Class = 'H'"}
{"sample_id": 7448, "db_id": "works_cycles", "final": {"question": "With 100$, how many Cable Lock can you buy?", "sql": "SELECT 100 / T2.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Cable Lock'", "source_tables": ["productlistpricehistory", "product"]}, "evidence": "number of products a $100 can buy = DIVIDE(100, ListPrice);"}
{"sample_id": 7158, "db_id": "works_cycles", "final": {"question": "To the products which could make the profit as 21.9037, what were their list price after October of 2012?", "sql": "SELECT T1.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice - T1.StandardCost > 21.9037 AND STRFTIME('%Y-%m-%d', T2.StartDate) >= '2012-10-01'", "source_tables": ["productlistpricehistory", "product"]}, "evidence": "Profit as 82.41 = SUTRACT(ListPrice, StandardCost); May of 2012 refers to StartDate = '2012-05'"}
{"sample_id": 7237, "db_id": "works_cycles", "final": {"question": "List all the names of products with the special offer \"15\".", "sql": "SELECT T2.Name FROM SpecialOfferProduct AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.SpecialOfferID = 15", "source_tables": ["specialofferproduct", "product"]}, "evidence": ""}
{"sample_id": 7051, "db_id": "works_cycles", "final": {"question": "Please list the titles of the documents that are pending approval.", "sql": "SELECT Title FROM Document WHERE Status = 1", "source_tables": ["document"]}, "evidence": "documents pending approval refers to Status = 1"}
{"sample_id": 7321, "db_id": "works_cycles", "final": {"question": "What is the current payrate of Rob Walters? Calculate the percentage increment from his previous payrate.", "sql": "SELECT T2.Rate , (MAX(T2.Rate) - MIN(T2.Rate)) * 100 / MAX(T2.Rate) FROM Person AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Rob' AND T1.LastName = 'Walters'", "source_tables": ["employeepayhistory", "person"]}, "evidence": "current payrate refers to max(Rate); percentage increment = divide(subtract(max(Rate), min(Rate)), min(Rate))*100%"}
{"sample_id": 7260, "db_id": "works_cycles", "final": {"question": "What is the salary rate per hour that the company paid to the first 5 employees that they hired?", "sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID ORDER BY T2.HireDate ASC LIMIT 0, 5", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "salary rate per hour refers to Rate; first 5 employees that were hired refers to 5 oldest HireDate;"}
{"sample_id": 7427, "db_id": "works_cycles", "final": {"question": "How many products were on the LL Road Frame Sale?", "sql": "SELECT COUNT(DISTINCT ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'LL Road Frame Sale'", "source_tables": ["specialofferproduct", "specialoffer"]}, "evidence": "LL Road Frame Sale is a description of special offer"}
{"sample_id": 7421, "db_id": "works_cycles", "final": {"question": "Please list the credit card numbers of all the employees who have left the Finance Department.", "sql": "SELECT T3.CardNumber FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN CreditCard AS T3 ON T1.ModifiedDate = T3.ModifiedDate INNER JOIN PersonCreditCard AS T4 ON T3.CreditCardID = T4.CreditCardID WHERE T2.Name = 'Finance' AND T1.EndDate IS NOT NULL", "source_tables": ["employeedepartmenthistory", "department", "personcreditcard", "creditcard"]}, "evidence": "credit card number refers to CardNumber; employees who left the department refers to EndDate NOT null; Engineering Department is a name of department;"}
{"sample_id": 7137, "db_id": "works_cycles", "final": {"question": "What percentage of the AdventureWorks data is in Thai?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Thai' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CultureID) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID", "source_tables": ["productmodelproductdescriptionculture", "culture"]}, "evidence": "percentage = DIVIDE(Culture.Name = 'Thai', count(ALL Culture.Name))*100%"}
{"sample_id": 7049, "db_id": "works_cycles", "final": {"question": "Please list the unit measure code of the component that is of the greatest need in quantity to create the assembly.", "sql": "SELECT UnitMeasureCode FROM BillOfMaterials ORDER BY PerAssemblyQty DESC LIMIT 1", "source_tables": ["billofmaterials"]}, "evidence": "greatest need in quantity refers to max(PerAssemblyQty)"}
{"sample_id": 7277, "db_id": "works_cycles", "final": {"question": "Please give the highest product cost of a purchase order.", "sql": "SELECT ActualCost FROM TransactionHistory WHERE TransactionType = 'P' ORDER BY ActualCost DESC LIMIT 1", "source_tables": ["transactionhistory"]}, "evidence": "product cost refers to ActualCost; purchase order refers to TransactionType = 'P';"}
{"sample_id": 7091, "db_id": "works_cycles", "final": {"question": "What is the credit rating of the company whose average lead time is 16 days for a standard price of 18.9900 and whose last receipt date is August 27, 2011?", "sql": "SELECT T2.CreditRating FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.StandardPrice = 18.9900 AND T1.AverageLeadTime = 16 AND STRFTIME('%Y-%m-%d', T1.LastReceiptDate) = '2011-08-27'", "source_tables": ["vendor", "productvendor"]}, "evidence": "last receipt date is August 17, 2011 refers to LastReceiptDate> = '2011-08-17 00:00:00' and LastReceiptDate < '2011-08-18 00:00:00';"}
{"sample_id": 7199, "db_id": "works_cycles", "final": {"question": "Who are the employees that submitted resume to Human Resource Department and got hired? State the last name.", "sql": "SELECT T3.LastName FROM Employee AS T1 INNER JOIN JobCandidate AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T1.BusinessEntityID IN (212, 274)", "source_tables": ["person", "employee", "jobcandidate"]}, "evidence": "employees that submitted resume to Human Resource Department and got hired refers to BusinessEntittyID NOT null;"}
{"sample_id": 7384, "db_id": "works_cycles", "final": {"question": "Which department has the most number of night shifts?", "sql": "SELECT T3.Name FROM Shift AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.ShiftId = T2.ShiftId INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID GROUP BY T2.DepartmentID ORDER BY COUNT(T1.Name = 'Night') DESC LIMIT 1", "source_tables": ["shift", "employeedepartmenthistory", "department"]}, "evidence": "most number of night shift = MAX(count(shift.Name = 'Night'))"}
{"sample_id": 7062, "db_id": "works_cycles", "final": {"question": "How many male employees have the job position of sales person?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'SP'", "source_tables": ["employee", "person"]}, "evidence": "Sales person refers to PersonType = 'SP'; Male refers to Gender = 'M';"}
{"sample_id": 7102, "db_id": "works_cycles", "final": {"question": "What is the percentage of the total products ordered were not rejected by Drill size?", "sql": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "rejected quantity refers to ScrappedQty; rejected by Drill size refers to Name in ('Drill size too small','Drill size too large'); percentage = DIVIDE(SUM(ScrappedQty) where Name in('Drill size too small','Drill size too large'), OrderQty)"}
{"sample_id": 7398, "db_id": "works_cycles", "final": {"question": "How many discount are of the type \"Excess Inventory\"?", "sql": "SELECT COUNT(SpecialOfferID) FROM SpecialOffer WHERE Type = 'Excess Inventory'", "source_tables": ["specialoffer"]}, "evidence": "discount refers to DiscountPct; Excess Inventory is a type of special offer;"}
{"sample_id": 7383, "db_id": "works_cycles", "final": {"question": "Among the vendors with an average credit rating, what is the overall total due amount of purchases made by the company to the vendor that isn't preferrerd if another vendor is available?", "sql": "SELECT SUM(T2.TotalDue) FROM Vendor AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.BusinessEntityID = T2.VendorID WHERE T1.CreditRating = 4 AND T1.PreferredVendorStatus = 0", "source_tables": ["purchaseorderheader", "vendor"]}, "evidence": "average credit rating refers to CreditRating = 4;\u00a0 vendor that isn't preferrerd if another vendor is available refers to PreferredVendorStatus = 0; SUM(TotalDue);"}
{"sample_id": 7300, "db_id": "works_cycles", "final": {"question": "Among the products that get over at least 1 review, how many of them are from the mountain product line?", "sql": "SELECT SUM(CASE WHEN T2.ProductLine = 'M' THEN 1 ELSE 0 END) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID HAVING COUNT(T1.ProductReviewID) > 1", "source_tables": ["productreview", "product"]}, "evidence": "mountain product line refers to ProductLine = 'M'"}
{"sample_id": 7399, "db_id": "works_cycles", "final": {"question": "Which seasonal discount had the highest discount percentage?", "sql": "SELECT Description FROM SpecialOffer WHERE Type = 'Seasonal Discount' ORDER BY DiscountPct DESC LIMIT 1", "source_tables": ["specialoffer"]}, "evidence": "seasonal discount is a type of special offer; discount percentage refers to DiscountPct; highest discount percentage refers to MAX(DiscountPct);"}
{"sample_id": 7344, "db_id": "works_cycles", "final": {"question": "How many materials still need to be assembled and have a depth of 2 between each component and their parent product?", "sql": "SELECT COUNT(*) FROM BillOfMaterials WHERE BOMLevel = 2 AND EndDate IS NULL", "source_tables": ["billofmaterials"]}, "evidence": "still need to be assembled means the assembly doesn't finish or still going on which refers to EndDate IS NULL; a depth of 2 refers to BOMLevel = 2;"}
{"sample_id": 7423, "db_id": "works_cycles", "final": {"question": "What is the e-mail address of the employee who switched departments for the most times?", "sql": "SELECT T2.EmailAddress FROM EmployeeDepartmentHistory AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID GROUP BY T2.BusinessEntityID ORDER BY COUNT(T1.DepartmentID) DESC LIMIT 1", "source_tables": ["employeedepartmenthistory", "emailaddress"]}, "evidence": "switched department the most refers to MAX(count(DepartmentID));"}
{"sample_id": 7201, "db_id": "works_cycles", "final": {"question": "What are the color of products that were reviewed?", "sql": "SELECT T1.Color FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 709 OR 937 OR 798", "source_tables": ["productreview", "product"]}, "evidence": ""}
{"sample_id": 7232, "db_id": "works_cycles", "final": {"question": "What is the most common first name among the vendor contact?", "sql": "SELECT FirstName FROM Person WHERE PersonType = 'VC' GROUP BY FirstName ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["person"]}, "evidence": "vendor contact refers to PersonType = 'VC';"}
{"sample_id": 7122, "db_id": "works_cycles", "final": {"question": "Please list 3 businesses along with their IDs that use cellphones.", "sql": "SELECT T2.BusinessEntityID FROM PhoneNumberType AS T1 INNER JOIN PersonPhone AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID WHERE T1.Name = 'Cell' LIMIT 3", "source_tables": ["personphone", "phonenumbertype"]}, "evidence": "business along with their IDs = BusinessEntityID; Cellphones refers to PhoneNumberType.name = \u2018cell\u2019"}
{"sample_id": 7165, "db_id": "works_cycles", "final": {"question": "What's Kevin A Wright's email address?", "sql": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Kevin' AND T1.MiddleName = 'A' AND T1.LastName = 'Wright'", "source_tables": ["emailaddress", "person"]}, "evidence": ""}
{"sample_id": 7294, "db_id": "works_cycles", "final": {"question": "Among the vendors that sell the product Hex Nut 5, how many of them have a good credit rating?", "sql": "SELECT COUNT(DISTINCT T3.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5' AND T3.CreditRating = 1 AND 3", "source_tables": ["vendor", "productvendor", "product"]}, "evidence": "good credit rating refers to CreditRating between 1 and 3"}
{"sample_id": 7268, "db_id": "works_cycles", "final": {"question": "How frequently does the first-ever Scheduling Assistant get paid?", "sql": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Scheduling Assistant' ORDER BY T1.HireDate LIMIT 1", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "PayFrequency = 1 refers to \u2018Salary received monthly\u2019; PayFrequency = 2 refers to \u2018Salary received biweekly';"}
{"sample_id": 7470, "db_id": "works_cycles", "final": {"question": "List all the work orders that is related to the Down Tube.", "sql": "SELECT T2.WorkOrderID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Down Tube'", "source_tables": ["product", "workorder"]}, "evidence": "Down Tube is a name of a product;"}
{"sample_id": 7418, "db_id": "works_cycles", "final": {"question": "How many people were there in the Engineering Department in the year 2009?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' AND STRFTIME('%Y', T2.EndDate) > '2009' AND STRFTIME('%Y', T2.StartDate) < '2009'", "source_tables": ["employeedepartmenthistory", "department", "person"]}, "evidence": "year(EndDate)>2009 and year(StartDate)<2009;"}
{"sample_id": 7082, "db_id": "works_cycles", "final": {"question": "What percentage of male employees hired throughout the years 2009 are married?", "sql": "SELECT CAST(SUM(CASE WHEN MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee WHERE SUBSTR(HireDate, 1, 4) = '2009' AND Gender = 'M'", "source_tables": ["employee"]}, "evidence": "male refers to Gender = 'M'; hired throughout the years 2009 refers to Year(HireDate) = 2009; married refers to MaritalStatus = 'M'; percentage = DIVIDE(count(BusinessEntityID(Gender = 'M'& Year(HireDate) = '2009& MaritalStatus = 'M')), count(BusinessEntityID(Gender = 'M'& Year(HireDate) = 2009)))\n\n"}
{"sample_id": 7341, "db_id": "works_cycles", "final": {"question": "What categories of offers qualify for group discounts for resellers?", "sql": "SELECT Type FROM SpecialOffer WHERE Category = 'Reseller'", "source_tables": ["specialoffer"]}, "evidence": "resellers refers to Category = 'Reseller';"}
{"sample_id": 7213, "db_id": "works_cycles", "final": {"question": "List all the pay rates of all employees that were hired at 20 years of age.", "sql": "SELECT T2.Rate FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) = 20", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "pay rate refers to Rate; 20 years old at the time of being hired refers to SUBTRACT(year(HireDate)), (year(BirthDate))) = 20;"}
{"sample_id": 7246, "db_id": "works_cycles", "final": {"question": "What is the percentage of employees who work the night shift?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Night' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.BusinessEntityID) FROM Shift AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.ShiftId = T2.ShiftId", "source_tables": ["shift", "employeedepartmenthistory"]}, "evidence": "percentage = DIVIDE(SUM(Name = 'Night')), (COUNT(ShiftID)) as percentage;"}
{"sample_id": 7323, "db_id": "works_cycles", "final": {"question": "What is the average age of employee in Adventure Works?", "sql": "SELECT AVG(STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', BirthDate)) FROM Employee", "source_tables": ["employee"]}, "evidence": "average age = AVG(subtract(year(now), year(HireDate)))"}
{"sample_id": 7075, "db_id": "works_cycles", "final": {"question": "Please list the credit card IDs of the employees who work as store contact.", "sql": "SELECT T2.CreditCardID FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SC'", "source_tables": ["personcreditcard", "person"]}, "evidence": "store contact refers to PersonType = 'SC';"}
{"sample_id": 7352, "db_id": "works_cycles", "final": {"question": "How many shipments by truck were made?", "sql": "SELECT COUNT(*) FROM ShipMethod AS T1 INNER JOIN SalesOrderHeader AS T2 USING (ShipMethodID) WHERE T1.Name = 'XRQ - TRUCK GROUND'", "source_tables": ["shipmethod", "salesorderheader"]}, "evidence": "shipment by truck refers to Name = 'XRQ - TRUCK GROUND';"}
{"sample_id": 7308, "db_id": "works_cycles", "final": {"question": "List all the non-sales employees in ascending order of its business entitty ID.", "sql": "SELECT FirstName, LastName FROM Person WHERE PersonType = 'EM' ORDER BY BusinessEntityID", "source_tables": ["person"]}, "evidence": "non-sales employee refers to PersonType = 'EM'"}
{"sample_id": 7193, "db_id": "works_cycles", "final": {"question": "Which sales person achieved the highest sales YTD? What is the projected yearly sales quota in 2011 for this person?", "sql": "SELECT T1.BusinessEntityID, SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2011' GROUP BY T1.BusinessEntityID ORDER BY SUM(T1.SalesYTD) DESC LIMIT 1", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "Sales people refer to PersonType = 'SP'; projected yearly sales refers to SalesQuota"}
{"sample_id": 7452, "db_id": "works_cycles", "final": {"question": "List all the products with lower than average cost.", "sql": "SELECT DISTINCT T2.ProductID FROM ProductCostHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.StandardCost < ( SELECT SUM(StandardCost) / COUNT(ProductID) FROM Product )", "source_tables": ["productcosthistory", "product"]}, "evidence": "cost refers to StandardCost; lower than average cost = StandardCost<(AVG(StandardCost));"}
{"sample_id": 7064, "db_id": "works_cycles", "final": {"question": "What is the name style of the employee with the lowest pay rate?", "sql": "SELECT T2.NameStyle FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Rate IS NOT NULL ORDER BY T1.Rate ASC LIMIT 1", "source_tables": ["employeepayhistory", "person"]}, "evidence": "lowest pay rate refers to Min(Rate);"}
{"sample_id": 7038, "db_id": "works_cycles", "final": {"question": "Which department has a worker who just recently started working?", "sql": "SELECT T1.Name FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID ORDER BY T2.StartDate DESC LIMIT 1", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": "recently started working refers to latest StartDate;"}
{"sample_id": 7446, "db_id": "works_cycles", "final": {"question": "What are the products with a large photo?", "sql": "SELECT T2.ProductID FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.LargePhotoFileName LIKE '%large.gif'", "source_tables": ["productproductphoto", "productphoto"]}, "evidence": "product with large photo refers to LargePhoto NOT null;"}
{"sample_id": 7046, "db_id": "works_cycles", "final": {"question": "What is the postal code of the street address of the account that is latest updated?", "sql": "SELECT PostalCode FROM Address ORDER BY ModifiedDate DESC LIMIT 1", "source_tables": ["address"]}, "evidence": "account latest updated refers to year(ModifiedDate) = 2022 and month(ModifiedDate) = 10"}
{"sample_id": 7026, "db_id": "works_cycles", "final": {"question": "How many products with the highest unit price were ordered?", "sql": "SELECT OrderQty FROM PurchaseOrderDetail ORDER BY UnitPrice DESC LIMIT 1", "source_tables": ["purchaseorderdetail"]}, "evidence": "number of products refers to OrderQty"}
{"sample_id": 7019, "db_id": "works_cycles", "final": {"question": "What is the total ordered quantity for products under the 'Touring' line?", "sql": "SELECT SUM(T2.OrderQty) FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'T'", "source_tables": ["purchaseorderdetail", "product"]}, "evidence": "The Touring line refers to the product line, therefore ProductLine = 'T'"}
{"sample_id": 7139, "db_id": "works_cycles", "final": {"question": "Where is the address 15873 located, in what city and state? Does that city belong to a province where the code exists?", "sql": "SELECT T2.City, T1.Name, T1.IsOnlyStateProvinceFlag FROM StateProvince AS T1 INNER JOIN Address AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T2.AddressID = 15873", "source_tables": ["stateprovince", "address"]}, "evidence": "Address number 15873 refers to AddressID = '15873'; IsOnlyStateProvinceCode = '0' refers to StateProvinceCode exists; IsOnlyStateProvinceCode = '1' refers to StateProvinceCode unavailable;"}
{"sample_id": 7257, "db_id": "works_cycles", "final": {"question": "Who made the purchase order with the greatest total due before freight? Indicate her employee ID and calculate for his/her age when he/she was hired.", "sql": "SELECT T2.BusinessEntityID, STRFTIME('%Y', T2.HireDate) - STRFTIME('%Y', T2.BirthDate) FROM PurchaseOrderHeader AS T1 INNER JOIN Employee AS T2 ON T1.EmployeeID = T2.BusinessEntityID ORDER BY T1.TotalDue DESC LIMIT 1", "source_tables": ["employee", "purchaseorderheader"]}, "evidence": "total due before freight = SUBTRACT(TotalDue, Freight); age at the time an employee was hired = SUBTRACT(HireDate, year(BirthDate);"}
{"sample_id": 7388, "db_id": "works_cycles", "final": {"question": "What is the profit on net of the products that have exactly 200 maximum order quantity? Indicate the name of the vendors to which these products were purchased from.", "sql": "SELECT T1.LastReceiptCost - T1.StandardPrice, T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaxOrderQty = 200", "source_tables": ["vendor", "productvendor"]}, "evidence": "maximum orders refers to MaxOrderQty; MaxOrderQty = 200; profit on net = SUBTRACT(LastReceiptCost, StandardPrice);"}
{"sample_id": 7234, "db_id": "works_cycles", "final": {"question": "How many Minipumps have been sold?", "sql": "SELECT COUNT(OrderQty) FROM SalesOrderDetail WHERE ProductID IN ( SELECT ProductID FROM Product WHERE Name = 'Minipump' )", "source_tables": ["product", "salesorderdetail"]}, "evidence": "Minipump is name of a product"}
{"sample_id": 7133, "db_id": "works_cycles", "final": {"question": "How many employees work for AdvertureWorks that is single?", "sql": "SELECT COUNT(T1.BusinessentityID) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'EM' AND T2.MaritalStatus = 'S'", "source_tables": ["employee", "person"]}, "evidence": "Employees refer to PersonType = 'EM'; Single refers to MaritalStatus = 's'"}
{"sample_id": 7253, "db_id": "works_cycles", "final": {"question": "What is the average age of the sales agents in the company by 12/31/2009?", "sql": "SELECT AVG(2009 - STRFTIME('%Y', T2.BirthDate)) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SP'", "source_tables": ["employee", "person"]}, "evidence": "average age as of 12/31/2009 = AVG(SUBTRACT(2009, year(BirthDate));"}
{"sample_id": 7031, "db_id": "works_cycles", "final": {"question": "Of the products that has a reorder inventory point of no more than 600, how many manufactured in-house products that takes 1 day to manufacture with BOM Level 4 are there?", "sql": "SELECT COUNT(T1.ProductID) FROM Product AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.ProductID = T2.ProductAssemblyID WHERE T1.MakeFlag = 1 AND T1.DaysToManufacture = 1 AND T2.BOMLevel = 4 AND T1.ReorderPoint <= 600", "source_tables": ["billofmaterials", "product"]}, "evidence": "ReorderPoint<600; product is manufactured in-house refers to Makeflag = 1;"}
{"sample_id": 7370, "db_id": "works_cycles", "final": {"question": "How many Vista cards expired before the year 2007?", "sql": "SELECT COUNT(CreditCardID) FROM CreditCard WHERE CardType = 'Vista' AND ExpYear < 2007", "source_tables": ["creditcard"]}, "evidence": "Vista Card refers to CardType = 'Vista'; expire before the year 2007 refers to ExpYear< = 2006;\n\n"}
{"sample_id": 7134, "db_id": "works_cycles", "final": {"question": "How much do the works data saved in English and Arabic differ from one another?", "sql": "SELECT SUM(CASE WHEN T1.Name = 'English' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Name = 'Arabic' THEN 1 ELSE 0 END) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID WHERE T1.Name = 'English' OR T1.Name = 'Arabic'", "source_tables": ["productmodelproductdescriptionculture", "culture"]}, "evidence": "Data saved in English refers to the name of the language where Culture.Name = 'English'; data saved in Arabic refers to the name of the language where Culture.Name = 'Arabic';\u00a0\u00a0 SUBTRACT(count(Name = 'English'), count(Name = 'Bothell'))"}
{"sample_id": 7010, "db_id": "works_cycles", "final": {"question": "Which product line has the most products that are salable?", "sql": "SELECT ProductLine FROM Product WHERE FinishedGoodsFlag = 1 GROUP BY ProductLine ORDER BY COUNT(FinishedGoodsFlag) DESC LIMIT 1", "source_tables": ["product"]}, "evidence": "Saleable product refers to FinishedGoodsFlag = 1"}
{"sample_id": 7380, "db_id": "works_cycles", "final": {"question": "Which product allows the company to make the highest profit on a single item among those that are the fastest to manufacture? Indicate the rating of the product if there any.", "sql": "SELECT T1.Name, T2.Rating FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.DaysToManufacture = ( SELECT DaysToManufacture FROM Product ORDER BY DaysToManufacture LIMIT 1 ) ORDER BY T1.ListPrice - T1.StandardCost DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "profit on a single item = SUBTRACT(ListPrice, StandardCost); length of time to manufacture refers to DaysToManufacture; fastest to manucature refers to MIN(DaysToManufacture);"}
{"sample_id": 7028, "db_id": "works_cycles", "final": {"question": "What is the full name of the Document Control Manager who is in charge of all Level 1 approved documents?", "sql": "SELECT T1.FirstName, T1.MiddleName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Document AS T3 ON T3.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Manager' AND T3.DocumentLevel = 1 AND T3.Status = 2 GROUP BY T1.FirstName, T1.MiddleName, T1.LastName", "source_tables": ["employee", "document", "person"]}, "evidence": "full Name = FirstName+MiddleName+Last Name; approved document refers to Status = 2;"}
{"sample_id": 7346, "db_id": "works_cycles", "final": {"question": "What are the sales tax records charged by multiple types of tax?", "sql": "SELECT SalesTaxRateID FROM SalesTaxRate WHERE Name LIKE '%+%'", "source_tables": ["salestaxrate"]}, "evidence": "multiple types of tax refers to Name like '%+%';\n"}
{"sample_id": 7425, "db_id": "works_cycles", "final": {"question": "How many employees came into the Quality Assurance Group in the year 2007?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.GroupName = 'Quality Assurance' AND STRFTIME('%Y', T1.StartDate) = '2007'", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": "Quality Assurance Group is a group name of department; came in 2007 refers to year(StartDate) = 2007;"}
{"sample_id": 7340, "db_id": "works_cycles", "final": {"question": "Which three sales regions have generated the most revenue thus far?", "sql": "SELECT TerritoryID FROM SalesTerritory ORDER BY SalesYTD DESC LIMIT 3", "source_tables": ["salesterritory"]}, "evidence": "revenue refers to SalesYTD; the most revenue refers to Max(SalesYTD);"}
{"sample_id": 7314, "db_id": "works_cycles", "final": {"question": "List all staff in the Shipping and Receiving department who are hired in 2009.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID WHERE STRFTIME('%Y', T2.HireDate) = '2009' AND T4.Name = 'Shipping and Receiving'", "source_tables": ["department", "employeedepartmenthistory", "employee", "person"]}, "evidence": "hired in 2009 refers to year(HireDate) = 2009"}
{"sample_id": 7163, "db_id": "works_cycles", "final": {"question": "Did Rachel Valdez complete her sales task?", "sql": "SELECT T1.Bonus FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Rachel' AND T2.LastName = 'Valdez'", "source_tables": ["salesperson", "person"]}, "evidence": "Complete sales task refers to meeting sales quota; if Bonus = 0, it means this salesperson doesn't meet quota and vice versa"}
{"sample_id": 7196, "db_id": "works_cycles", "final": {"question": "State the last name and job title of owner for document \"Crank Arm and Tire Maintenance\".", "sql": "SELECT T1.LastName, T3.JobTitle FROM Person AS T1 INNER JOIN Document AS T2 ON T1.BusinessEntityID = T2.Owner INNER JOIN Employee AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Title = 'Crank Arm and Tire Maintenance'", "source_tables": ["employee", "document", "person"]}, "evidence": "The owner refers to BusinessEntityID"}
{"sample_id": 7223, "db_id": "works_cycles", "final": {"question": "What is the shipping address for the sales order \"43873\"?", "sql": "SELECT T1.ShipToAddressID FROM SalesOrderHeader AS T1 INNER JOIN Address AS T2 ON T1.BillToAddressID = T2.AddressID WHERE T1.SalesOrderID = 43873 GROUP BY T1.ShipToAddressID", "source_tables": ["address", "salesorderheader"]}, "evidence": "shipping address = AddressLine1+AddressLine2+City;"}
{"sample_id": 7331, "db_id": "works_cycles", "final": {"question": "List all product only MOQ of 1,000 and with standard cost more than 17.", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaxOrderQty = 1000 AND T2.StandardCost > 17", "source_tables": ["vendor", "productvendor", "product"]}, "evidence": "MOQ refers to minimum order quantity; MOQ of 1 refers to MinOrderQty = 1; standard cost more than 48 refers to StandardCost > 48;"}
{"sample_id": 7136, "db_id": "works_cycles", "final": {"question": "Please list the businesses along with their numbers that have their accounts located in Duvall.", "sql": "SELECT T2.BusinessEntityID FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T1.City = 'Duvall'", "source_tables": ["address", "businessentityaddress"]}, "evidence": "Business along with their numbers refers to the BusinessEntityID; located in Duvall refers to City = 'Duvall'"}
{"sample_id": 7435, "db_id": "works_cycles", "final": {"question": "Which product cost the least in 2013?", "sql": "SELECT ProductID FROM ProductCostHistory WHERE StartDate LIKE '2013%' ORDER BY StandardCost LIMIT 1", "source_tables": ["productcosthistory"]}, "evidence": "cost refers to StandardCost; cost the least refers to MIN(StandardCost);"}
{"sample_id": 7290, "db_id": "works_cycles", "final": {"question": "Please list the names of the products that have over 3 price changes.", "sql": "SELECT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.Name ORDER BY COUNT(T1.ListPrice) > 3", "source_tables": ["productlistpricehistory", "product"]}, "evidence": "over 3 price changes refers to count(ListPrice)>3"}
{"sample_id": 7345, "db_id": "works_cycles", "final": {"question": "How many of the approved documents are confidential?", "sql": "SELECT COUNT(DocumentNode) FROM Document WHERE Status = 2 AND DocumentSummary IS NULL", "source_tables": ["document"]}, "evidence": "approved refers to Status = 2; confidential document refers to DocumentSummary is null;"}
{"sample_id": 7433, "db_id": "works_cycles", "final": {"question": "How much more expensive in percentage is the product with the highest selling price from the product with the lowest selling price in the Clothing category?", "sql": "SELECT (MAX(T1.ListPrice) - MIN(T1.ListPrice)) * 100 / MIN(T1.ListPrice) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'", "source_tables": ["productsubcategory", "product", "productcategory"]}, "evidence": "selling price refers to ListPrice; highest selling price refers to MAX(ListPrice); lowest selling price refers to MIN(ListPrice);"}
{"sample_id": 7078, "db_id": "works_cycles", "final": {"question": "If a married employee has a western name style, what is the probability of him or her working as a store contact?", "sql": "SELECT CAST(COUNT(IIF(T1.PersonType = 'SC', T1.PersonType, NULL)) AS REAL) / COUNT(T1.PersonType) FROM Person AS T1 INNER JOIN Employee AS T2 WHERE T1.PersonType = 'SC' AND T1.NameStyle = 0 AND T2.MaritalStatus = 'M'", "source_tables": ["employee", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; western name style refers to NameStyle = 0; store contact refers to PersonType = 'SC'; probability = Divide (Count (BusinessEntityID( PersonType = 'SC' & MaritalStatus = 'M')), Count (BusinessEntityID ( PersonType) & MariatlStatus = 'M'))\n"}
{"sample_id": 7132, "db_id": "works_cycles", "final": {"question": "Which position does Suchitra hold?", "sql": "SELECT T2.JobTitle FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Suchitra'", "source_tables": ["employee", "person"]}, "evidence": "position refers to JobTitle"}
{"sample_id": 7235, "db_id": "works_cycles", "final": {"question": "What is the person's business ID with a vista credit card number \"11113366963373\"?", "sql": "SELECT T2.BusinessEntityID FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.CardNumber = 11113366963373", "source_tables": ["personcreditcard", "creditcard"]}, "evidence": "business id refers to BusinessEntityID"}
{"sample_id": 7467, "db_id": "works_cycles", "final": {"question": "Where are the locations where the product \"810\" is stored?", "sql": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.ProductID = 810", "source_tables": ["location", "productinventory"]}, "evidence": ""}
{"sample_id": 7281, "db_id": "works_cycles", "final": {"question": "Which reviewer gives the biggest number of the highest rating?", "sql": "SELECT ReviewerName FROM ProductReview WHERE Rating = ( SELECT Rating FROM ProductReview ORDER BY Rating DESC LIMIT 1 )", "source_tables": ["productreview"]}, "evidence": "highest rating refers to MAX(Rating)"}
{"sample_id": 7403, "db_id": "works_cycles", "final": {"question": "What is the minimum inventory quantity of Chainring Bolts?", "sql": "SELECT SafetyStockLevel FROM Product WHERE Name = 'Chainring Bolts'", "source_tables": ["product"]}, "evidence": "minimum inventory quantity refers to SafetyStockLevel; chainring bolts is a name of product;"}
{"sample_id": 7348, "db_id": "works_cycles", "final": {"question": "Please list any 3 vendors that are not recommended by Adventure Works.", "sql": "SELECT Name FROM Vendor WHERE PreferredVendorStatus = 0 LIMIT 3", "source_tables": ["vendor"]}, "evidence": "not recommended refers to PreferredVendorStatus = 0;"}
{"sample_id": 7332, "db_id": "works_cycles", "final": {"question": "Who is the oldest married male? State his job title.", "sql": "SELECT T2.FirstName, T2.LastName, T1.JobTitle FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T1.MaritalStatus = 'M' ORDER BY T1.BirthDate LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "Male refers to Gender = 'M'; married refers to MaritalStatus = 'M'; oldest refers to Min(BirthDate);"}
{"sample_id": 7222, "db_id": "works_cycles", "final": {"question": "How many customers are there in Canada?", "sql": "SELECT COUNT(T2.CustomerID) FROM SalesTerritory AS T1 INNER JOIN Customer AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.Name = 'Canada'", "source_tables": ["salesterritory", "customer"]}, "evidence": "Canada is name of sales territory"}
{"sample_id": 7456, "db_id": "works_cycles", "final": {"question": "Which product has the highest price in 2012?", "sql": "SELECT ProductID FROM ProductListPriceHistory WHERE StartDate LIKE '2012%' ORDER BY ListPrice DESC LIMIT 1", "source_tables": ["productlistpricehistory"]}, "evidence": "price refers to ListPrice; highest price refers to MAX(ListPrice);"}
{"sample_id": 7142, "db_id": "works_cycles", "final": {"question": "What's Emma H Harris's Business Entity ID number?", "sql": "SELECT BusinessEntityID FROM Person WHERE FirstName = 'Emma' AND LastName = 'Harris'", "source_tables": ["person"]}, "evidence": ""}
{"sample_id": 7247, "db_id": "works_cycles", "final": {"question": "How many married male employees were born before the year 1960?", "sql": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalStatus = 'M' AND STRFTIME('%Y', BirthDate) < '1960' AND Gender = 'M'", "source_tables": ["employee"]}, "evidence": "married refers to MaritalStatus = 'M'; male refers to Gender = 'M'; BirthDate < = '1959-12-31';"}
{"sample_id": 7151, "db_id": "works_cycles", "final": {"question": "Name cellphone number's Type ID?", "sql": "SELECT PhoneNumberTypeID FROM PhoneNumberType WHERE Name = 'Cell'", "source_tables": ["phonenumbertype"]}, "evidence": "Cellphone refers to Name = 'Cell'"}
{"sample_id": 7044, "db_id": "works_cycles", "final": {"question": "Among the companies to which Adventure Works Cycles purchases parts or other goods, what is the profit on net obtained from the vendor who has an above average credit rating? Kindly indicate each names of the vendor and the corresponding net profits.", "sql": "SELECT T2.Name, T1.LastReceiptCost - T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CreditRating = 3", "source_tables": ["vendor", "productvendor"]}, "evidence": "above average credit rating refers to CreditRating = 3; profit on net = subtract(LastReceiptCost, StandardPrice);"}
{"sample_id": 7005, "db_id": "works_cycles", "final": {"question": "Provide all the transactions whereby the quantiy is more than 10,000 pieces. State the product name and the selling price.", "sql": "SELECT DISTINCT T1.Name, T1.ListPrice FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 10000", "source_tables": ["transactionhistory", "product"]}, "evidence": "Quantity more than 10,000 pieces refers to Quantity>10000; selling price refers to ListPrice"}
{"sample_id": 7116, "db_id": "works_cycles", "final": {"question": "What is business number 1580's net profit?", "sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor WHERE BusinessEntityID = 1580", "source_tables": ["productvendor"]}, "evidence": "business number 1580 refers to BusinessEntityID = 1580; Net profit = SUBTRACT(LastReceiptCost,StandardPrice)"}
{"sample_id": 7221, "db_id": "works_cycles", "final": {"question": "What is the email address of the Facilities Manager?", "sql": "SELECT T3.EmailAddress FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmailAddress AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.JobTitle = 'Facilities Manager'", "source_tables": ["employee", "emailaddress", "person"]}, "evidence": "Facilities Manager is a job title"}
{"sample_id": 7359, "db_id": "works_cycles", "final": {"question": "Which address type does \"Fun Toys and Bikes\" fall under?", "sql": "SELECT T2.Name FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Fun Toys and Bikes'", "source_tables": ["addresstype", "store", "businessentityaddress"]}, "evidence": "Fun Toys and Bikes is name of a store"}
{"sample_id": 7422, "db_id": "works_cycles", "final": {"question": "How many employees working in the Engineering Department in 2007 would have their credit cards expired in the same year?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN PersonCreditCard AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID INNER JOIN CreditCard AS T4 ON T3.CreditCardID = T4.CreditCardID WHERE T4.ExpYear = 2007 AND T2.Name = 'Engineering'", "source_tables": ["employeedepartmenthistory", "department", "personcreditcard", "creditcard"]}, "evidence": "year(StartDate) 2007; year of credit card expiration refers to ExpYear; ExpYear = 2007;"}
{"sample_id": 7395, "db_id": "works_cycles", "final": {"question": "Which geographic area does the city with the second lowest tax rate belongs to? Indicate the name of the state or province as well.", "sql": "SELECT T3.\"Group\", T2.Name FROM SalesTaxRate AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID INNER JOIN SalesTerritory AS T3 ON T2.TerritoryID = T3.TerritoryID ORDER BY T1.TaxRate LIMIT 1, 1", "source_tables": ["stateprovince", "salesterritory", "salestaxrate"]}, "evidence": "geographic area to which the city belong refers to Group;"}
{"sample_id": 7173, "db_id": "works_cycles", "final": {"question": "Which is Business Entity ID No.13626's phone number type?", "sql": "SELECT T2.Name FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 USING (PhoneNumberTypeID) WHERE T1.BusinessEntityID = 13626", "source_tables": ["personphone", "phonenumbertype"]}, "evidence": ""}
{"sample_id": 7310, "db_id": "works_cycles", "final": {"question": "List the name of employees who had left the company? When were they hired?", "sql": "SELECT T1.FirstName, T1.LastName, T2.HireDate FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.EndDate IS NOT NULL", "source_tables": ["employeedepartmenthistory", "employee", "person"]}, "evidence": "employee that has left the company refers to EndDate is not null"}
{"sample_id": 7047, "db_id": "works_cycles", "final": {"question": "What is the longest assembly item duration for bicycles?", "sql": "SELECT JULIANDAY(EndDate) - JULIANDAY(StartDate) FROM BillOfMaterials ORDER BY JULIANDAY(EndDate) - JULIANDAY(StartDate) DESC LIMIT 1", "source_tables": ["billofmaterials"]}, "evidence": "longest assembly item duration = max(subtract(EndDate,StartDate))"}
{"sample_id": 7412, "db_id": "works_cycles", "final": {"question": "Please show the credit card number of David Bradley.", "sql": "SELECT T3.CardNumber FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["creditcard", "personcreditcard", "person"]}, "evidence": "credit card number refers to CardNumber;"}
{"sample_id": 7239, "db_id": "works_cycles", "final": {"question": "What is the reason for sales order \"51883\"?", "sql": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 51883", "source_tables": ["salesorderheadersalesreason", "salesreason"]}, "evidence": "reason means the category of sales reason which refers to ReasonType"}
{"sample_id": 7061, "db_id": "works_cycles", "final": {"question": "Among the active male employees, how many of them are paid with the highest frequency?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.Gender = 'M' AND T1.PayFrequency = 2", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "active status of employees refers to CurrentFlag = 1; Male refers to Gender = 'M'; highest frequency refers to PayFrequency = 2;"}
{"sample_id": 7074, "db_id": "works_cycles", "final": {"question": "How many active employees do not wish to receive e-mail promotions?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.CurrentFlag = 1 AND T2.EmailPromotion = 1", "source_tables": ["employee", "person"]}, "evidence": "active status of employees refers to CurrentFlag = 1; the employee does not wish to receive an e-mail promotion refers to EmailPromotion = 0;"}
{"sample_id": 7468, "db_id": "works_cycles", "final": {"question": "What is the name of the product the work order \"2540\" was making?", "sql": "SELECT T2.Name FROM WorkOrder AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.WorkOrderID = 2540", "source_tables": ["workorder", "product"]}, "evidence": ""}
{"sample_id": 7194, "db_id": "works_cycles", "final": {"question": "How many people with the name Alex are single and occupying organization level of 1?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.FirstName = 'Alex' AND T1.MaritalStatus = 'S' AND T1.OrganizationLevel = 1", "source_tables": ["employee", "person"]}, "evidence": "Alex refers to FirstName = 'Alex'; single refers to MaritalStatus = 'S'"}
{"sample_id": 7177, "db_id": "works_cycles", "final": {"question": "How much is HL Grip Tape's profit ratio?", "sql": "SELECT (T1.LastReceiptCost - T1.StandardPrice) / T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Grip Tape'", "source_tables": ["productvendor", "product"]}, "evidence": "HL Grip Tape refers to the product name; DIVIDE(SUBTRACT(LastReceiptCost, StandardPrice)), (StandardPrice) as profit_ratio"}
{"sample_id": 7254, "db_id": "works_cycles", "final": {"question": "To which group does the department with the least amount of workers belong to? Indicate the name of the department as well.", "sql": "SELECT T2.GroupName FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID GROUP BY T2.GroupName ORDER BY COUNT(T1.BusinessEntityID) LIMIT 1", "source_tables": ["employeedepartmenthistory", "department"]}, "evidence": "least amount of workers refers to MIN(count(DepartmentID));"}
{"sample_id": 7129, "db_id": "works_cycles", "final": {"question": "Please list the various phone number types in the following order, from most to least common among businesses.", "sql": "SELECT T2.Name FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC", "source_tables": ["personphone", "phonenumbertype"]}, "evidence": ""}
{"sample_id": 7445, "db_id": "works_cycles", "final": {"question": "What are locations of the work order \"35493\"?", "sql": "SELECT T2.Name FROM WorkOrderRouting AS T1 INNER JOIN Location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.WorkOrderID = 35493", "source_tables": ["location", "workorderrouting"]}, "evidence": ""}
{"sample_id": 7090, "db_id": "works_cycles", "final": {"question": "What company has a Colonial Voice card that expired in March 2005?", "sql": "SELECT T2.BusinessEntityID FROM CreditCard AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.CreditCardID = T2.CreditCardID WHERE T1.CardType = 'ColonialVoice' AND T1.ExpMonth = 3 AND T1.ExpYear = 2005", "source_tables": ["personcreditcard", "creditcard"]}, "evidence": "Colonial Voice card refers to CardType = 'ColonialVoice' ; expired in March 2005 refers to ExpMonth = 3, ExpYear = 2005"}
{"sample_id": 7174, "db_id": "works_cycles", "final": {"question": "What's Lynn N Tsoflias's job title?", "sql": "SELECT T2.JobTitle FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Lynn' AND T1.MiddleName = 'N' AND T1.LastName = 'Tsoflias'", "source_tables": ["employee", "person"]}, "evidence": ""}
{"sample_id": 7304, "db_id": "works_cycles", "final": {"question": "Among the salable products from the mountain product line, how many of them have the most reviews?", "sql": "SELECT SUM(CASE WHEN T2.ProductLine = 'M' THEN 1 ELSE 0 END) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.ProductID ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "salable product refers to FinishedGoodsFlag = 1; mountain product line refers to ProductLine = 'M'"}
{"sample_id": 7362, "db_id": "works_cycles", "final": {"question": "What is the 12th business's first line address?", "sql": "SELECT T1.AddressLine1 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T2.BusinessEntityID = 12", "source_tables": ["address", "businessentityaddress"]}, "evidence": "12th business refers to BusinessEntityID = 12;"}
{"sample_id": 7378, "db_id": "works_cycles", "final": {"question": "How many person have a projected yearly sales of no more than 50,000?", "sql": "SELECT COUNT(BusinessEntityID) FROM SalesPersonQuotaHistory WHERE SalesQuota < 500000", "source_tables": ["salespersonquotahistory"]}, "evidence": "projected yearly sales refers to SalesQuota; SalesQuota< = 50000;"}
{"sample_id": 7017, "db_id": "works_cycles", "final": {"question": "Among all products without any rejected quantity, which product has the highest line total? State the product name and unit price.", "sql": "SELECT T1.Name, T2.UnitPrice FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = 0 ORDER BY T2.LineTotal DESC LIMIT 1", "source_tables": ["purchaseorderdetail", "product"]}, "evidence": "Product without any rejected quantity refers to RejectedQty = 0"}
{"sample_id": 7415, "db_id": "works_cycles", "final": {"question": "Among the store contact employees, how many of them have a Vista credit card?", "sql": "SELECT COUNT(T1.FirstName) FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T3.CardType = 'Vista' AND T1.PersonType = 'SC'", "source_tables": ["creditcard", "personcreditcard", "person"]}, "evidence": "store contact refers to PersonType = 'SC'; type of credit card refers to CardType; CardType = 'vista';"}
{"sample_id": 7261, "db_id": "works_cycles", "final": {"question": "Among the vendors with maximum orders betweeen 500 to 750, which vendor has the 10th highest profit on net?", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.MaxOrderQty BETWEEN 500 AND 750 ORDER BY T1.LastReceiptCost - T1.StandardPrice DESC LIMIT 9, 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "maximum orders refers to MaxOrderQty; MaxOrderQty BETWEEN '500' AND '750'; profit on net = SUBTRACT(LastReceiptCost, StandardPrice);"}
{"sample_id": 7302, "db_id": "works_cycles", "final": {"question": "How many products that take more than 2 days to make are out of stock?", "sql": "SELECT COUNT(T2.ProductID) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OnOrderQty IS NULL OR T1.OnOrderQty = 0", "source_tables": ["productvendor", "product"]}, "evidence": "take more than 2 days to make refers to DaysToManufacture>2; out of stock refers to OnOrderQty = 0 or OnOrderQty is null"}
{"sample_id": 7416, "db_id": "works_cycles", "final": {"question": "How many departments have David Bradley been in?", "sql": "SELECT COUNT(T3.DepartmentID) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["employeedepartmenthistory", "department", "person"]}, "evidence": ""}
{"sample_id": 7350, "db_id": "works_cycles", "final": {"question": "How many employees who began working in 2009 or later had night shifts?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Shift AS T2 ON T1.ShiftId = T2.ShiftId WHERE T2.ShiftId = 3 AND STRFTIME('%Y', T2.StartTime) >= '2009'", "source_tables": ["shift", "employeedepartmenthistory"]}, "evidence": "began work in 2009 or later refers to StartDate> = 2009;"}
{"sample_id": 7105, "db_id": "works_cycles", "final": {"question": "How many employees earn their salaries on a monthly basis at an hourly rate of more than 50?", "sql": "SELECT COUNT(BusinessEntityID) FROM EmployeePayHistory WHERE rate * PayFrequency > 50", "source_tables": ["employeepayhistory"]}, "evidence": "employee refers to BusinessEntityID; salaries on a monthly basis refers to PayFrequency = 1; hourly rate more than 50 refers to Rate > 50"}
{"sample_id": 7045, "db_id": "works_cycles", "final": {"question": "How many accounts have an address that is too long?", "sql": "SELECT COUNT(*) FROM Address WHERE AddressLine2 <> ''", "source_tables": ["address"]}, "evidence": "address that is too long refers to AddressLine2! = null"}
{"sample_id": 7259, "db_id": "works_cycles", "final": {"question": "What is the profit of a single product that received the highest rating from John Smith? List the product/s' names.", "sql": "SELECT T1.ListPrice - T1.StandardCost, T1.Name FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ReviewerName = 'John Smith' ORDER BY T2.Rating DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "highest rating refers to Rating = 5; profit = SUBTRACT(ListPrice, StandardCost);"}
{"sample_id": 7231, "db_id": "works_cycles", "final": {"question": "What is the total cost for all the orders placed on 5/29/2013?", "sql": "SELECT SUM(TotalDue) FROM PurchaseOrderHeader WHERE OrderDate LIKE '2013-05-29%'", "source_tables": ["purchaseorderheader"]}, "evidence": "total cost = SUM(TotalDue); OrderDate = '2013-05-29';"}
{"sample_id": 7146, "db_id": "works_cycles", "final": {"question": "What is the Shift start time for Shift ID No.2?", "sql": "SELECT StartTime FROM Shift WHERE ShiftID = '2'", "source_tables": ["shift"]}, "evidence": ""}
{"sample_id": 7434, "db_id": "works_cycles", "final": {"question": "What is the average profit of all the products from the Clothing category?", "sql": "SELECT SUM(T1.ListPrice - T1.StandardCost) / COUNT(T1.ProductID) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T3.Name = 'Clothing'", "source_tables": ["productsubcategory", "product", "productcategory"]}, "evidence": "average profit = DIVIDE(SUM(SUBTRACT(ListPrice, StandardCost))), (COUNT(ProductSubcategoryID))));"}
{"sample_id": 7130, "db_id": "works_cycles", "final": {"question": "Which role has the most common contact among businesses?", "sql": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1", "source_tables": ["businessentitycontact", "contacttype"]}, "evidence": "Most common contact among businesses refers to BusinessEntityContact with the most name"}
{"sample_id": 7204, "db_id": "works_cycles", "final": {"question": "Among the employees who wish to receive e-mail promotion from AdventureWorks, how many percent of them are female?", "sql": "SELECT CAST(SUM(CASE WHEN T1.Gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1", "source_tables": ["employee", "person"]}, "evidence": "female refers to Gender = 'F'; employee who wish to receive email promotion refers to EmailPromotion = 1; percentage = DIVIDE(SUM(Gender = 'F')), (sum(Gender = 'F' or Gender = 'M'))) as percentage;"}
{"sample_id": 7176, "db_id": "works_cycles", "final": {"question": "For the document Control Assistant who was hired on 2009/1/22, what is the percentage of private documents did he/she have?", "sql": "SELECT CAST(SUM(CASE WHEN T1.DocumentSummary IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.DocumentSummary) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Assistant' AND T2.HireDate = '2009-01-22'", "source_tables": ["employee", "document"]}, "evidence": "Document Control Assistant refers\u00a0 to the\u00a0 JobTitle = 'Document Control Assistant'; hired on 2009/1/22 means the person's hiring date is HireDate = '2009-01-22'; private documents indicate that DocumentSummary is null; DIVIDE(COUNT(DocumentSummary is null), COUNT(DocumentSummary))*100"}
{"sample_id": 7012, "db_id": "works_cycles", "final": {"question": "State the product name, product line, rating and the selling price of product with the lowest rating.", "sql": "SELECT T1.Name, T1.ProductLine, T2.Rating, T1.ListPrice FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.Rating ASC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "Product with the lowest rating refers to the rating\ngiven by the\nreviewer where Rating = 1"}
{"sample_id": 7071, "db_id": "works_cycles", "final": {"question": "Please give the personal information of the married employee who has the highest pay rate.", "sql": "SELECT T2.Demographics FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeePayHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaritalStatus = 'M' ORDER BY T3.Rate DESC LIMIT 1", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "married refers to MaritalStatus = 'M'; Highest pay rate refers to Max(Rate)"}
{"sample_id": 7216, "db_id": "works_cycles", "final": {"question": "How many employees in the Information Service department work the evening shift?", "sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN Shift AS T3 ON T2.ShiftId = T3.ShiftId WHERE T1.Name = 'Information Services' AND T3.Name = 'Evening'", "source_tables": ["shift", "employeedepartmenthistory", "department"]}, "evidence": "Information Service is a name of department;"}
{"sample_id": 7459, "db_id": "works_cycles", "final": {"question": "How many of the work orders didn\u2019t meet the due date?", "sql": "SELECT COUNT(WorkOrderID) FROM WorkOrder WHERE EndDate > DueDate", "source_tables": ["workorder"]}, "evidence": "workers who did not meet the due date refers to EndDate>DueDate;"}
{"sample_id": 7327, "db_id": "works_cycles", "final": {"question": "Name the sales person for store Area Bike Accessories. Which territory is he / she in?", "sql": "SELECT T4.Name FROM Store AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN SalesTerritory AS T4 ON T2.TerritoryID = T4.TerritoryID WHERE T1.Name = 'Area Bike Accessories'", "source_tables": ["salesterritory", "store", "salesperson", "person"]}, "evidence": ""}
{"sample_id": 7241, "db_id": "works_cycles", "final": {"question": "List all the sales people in the Northwest US.", "sql": "SELECT T2.BusinessEntityID FROM SalesTerritory AS T1 INNER JOIN SalesPerson AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.Name = 'Northwest' AND T1.CountryRegionCode = 'US'", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "Northwest is name of SalesTerritory; US is the CountryRegionCode;"}
{"sample_id": 7389, "db_id": "works_cycles", "final": {"question": "What is the full name of the non-sales employee who made the most number of rejected purchase orders?", "sql": "SELECT T2.FirstName, T2.LastName FROM PurchaseOrderHeader AS T1 INNER JOIN Person AS T2 ON T1.EmployeeID = T2.BusinessEntityID WHERE T2.PersonType = 'EM' AND T1.Status = 3 GROUP BY T2.FirstName, T2.LastName ORDER BY COUNT(T1.PurchaseOrderID) DESC LIMIT 1", "source_tables": ["purchaseorderheader", "person"]}, "evidence": "non-sales employee refers to PersonType = 'EM'; rejected purchase order refers to Status = 3;"}
{"sample_id": 7451, "db_id": "works_cycles", "final": {"question": "How many products with the id \"476\" are stored in Metal Storage?", "sql": "SELECT T2.Quantity FROM Location AS T1 INNER JOIN ProductInventory AS T2 ON T1.LocationID = T2.LocationID WHERE T2.ProductID = 476 AND T1.Name = 'Metal Storage'", "source_tables": ["location", "productinventory"]}, "evidence": "Metal Storage is name of location"}
{"sample_id": 7276, "db_id": "works_cycles", "final": {"question": "Among the sales with a tax applied to retail transaction, how many of them are charged by multiple types of taxes?", "sql": "SELECT COUNT(SalesTaxRateID) FROM SalesTaxRate WHERE Name LIKE '%+%'", "source_tables": ["salestaxrate"]}, "evidence": "tax applied to retail transaction refers to Taxtype = 1; sales that are charged with multiple types of tax refers to NAME LIKE '%+%';"}
{"sample_id": 7396, "db_id": "works_cycles", "final": {"question": "What is the average profit of all the low class universal road frames? Indicate how many variety of sizes are there and the available colors.", "sql": "SELECT AVG(T1.ListPrice - T1.StandardCost), COUNT(DISTINCT T1.Size) , COUNT(DISTINCT T1.Style) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Class = 'L' AND T2.Name = 'Road Frames' GROUP BY T1.Class, T1.Color", "source_tables": ["productsubcategory", "product"]}, "evidence": "low class refers to Class = 'L'; universal refers to Style = 'U'; road frame is a name of product subcategory; average profit = AVG(SUBTRACT(ListPrice, StandardCost);"}
{"sample_id": 7243, "db_id": "works_cycles", "final": {"question": "Who is the sales person in charge of the territory with the id \"9\"? Provide their full name.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.TerritoryID = 9", "source_tables": ["salesperson", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7150, "db_id": "works_cycles", "final": {"question": "Give the Mauritius Rupee's currency code.", "sql": "SELECT CurrencyCode FROM Currency WHERE Name = 'Mauritius Rupee'", "source_tables": ["currency"]}, "evidence": "Mauritius Rupee is name of currency"}
{"sample_id": 7155, "db_id": "works_cycles", "final": {"question": "Where is Business Entity ID No.4 located at? Give the address down to street.", "sql": "SELECT AddressLine1, AddressLine2 FROM Address WHERE AddressID IN ( SELECT AddressID FROM BusinessEntityAddress WHERE BusinessEntityID = 4 )", "source_tables": ["address", "businessentityaddress"]}, "evidence": "Located refers to the total address of the entity that comprises city, addressline1, addressline2"}
{"sample_id": 7182, "db_id": "works_cycles", "final": {"question": "What are the total per assembly quantity for unit measure code EA, IN and OZ respectively? What are the name of these 3 code?", "sql": "SELECT SUM(T1.PerAssemblyQty), T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.UnitMeasureCode IN ('EA', 'IN', 'OZ') GROUP BY T2.Name", "source_tables": ["billofmaterials", "unitmeasure"]}, "evidence": "Pre assembly quantity refers to PerAssemblyQty"}
{"sample_id": 7430, "db_id": "works_cycles", "final": {"question": "Please list the products that are under the Clothing category that are manufactured in-house and salable.", "sql": "SELECT CASE WHEN T1.MakeFlag = 1 THEN T1.Name END FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID INNER JOIN ProductCategory AS T3 ON T2.ProductCategoryID = T3.ProductCategoryID WHERE T2.ProductSubcategoryID = 3", "source_tables": ["productsubcategory", "product", "productcategory"]}, "evidence": "product is manufactured in-house refers to MakeFlag = 1; salable product refers to FinishedGoodsFlag = 1;"}
{"sample_id": 7147, "db_id": "works_cycles", "final": {"question": "What is contact Type ID No.16 represent for?", "sql": "SELECT Name FROM ContactType WHERE ContactTypeID = '16'", "source_tables": ["contacttype"]}, "evidence": ""}
{"sample_id": 7083, "db_id": "works_cycles", "final": {"question": "What percentage of people named Mary who wants Receive Email promotions of AdventureWorks and selected partners are store contacts?", "sql": "SELECT CAST(SUM(CASE WHEN EmailPromotion = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN PersonType = 'SC' THEN 1 ELSE 0 END) FROM Person WHERE FirstName = 'Mary'", "source_tables": ["person"]}, "evidence": "wants Receive Email promotions of AdventureWorks and selected partners refers to EmailPromotion = 2; store contact refers to PersonType = 'SC'; percentage = DIVIDE(count(BusinessEntityID(FirstName = 'Marry'&EmailPromotion = '2')),count(BusinessEntityID)))\n"}
{"sample_id": 7244, "db_id": "works_cycles", "final": {"question": "What is the description of the discount for the product with the id \"762\"?", "sql": "SELECT T2.Description FROM SpecialOfferProduct AS T1 INNER JOIN SpecialOffer AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.ProductID = 762", "source_tables": ["specialofferproduct", "specialoffer"]}, "evidence": ""}
{"sample_id": 7185, "db_id": "works_cycles", "final": {"question": "State the full name of accountants in the company.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Accountant'", "source_tables": ["employee", "person"]}, "evidence": "Accountants refers to JobTitle = 'Accountant'; full name includes FirstName, LastName, and MiddleName"}
{"sample_id": 7233, "db_id": "works_cycles", "final": {"question": "List the full name of all the 'Production Technician - WC50'", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T1.JobTitle = 'Production Technician - WC50' GROUP BY T2.FirstName, T2.MiddleName, T2.LastName", "source_tables": ["employee", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName; Production Technician - WC50 is a job title;"}
{"sample_id": 7092, "db_id": "works_cycles", "final": {"question": "Calculate the number of products if we add the products of the accessories and components categories.", "sql": "SELECT COUNT(ProductID) FROM Product WHERE Name LIKE '%accessories %' OR Name LIKE '%components%'", "source_tables": ["product"]}, "evidence": ""}
{"sample_id": 7385, "db_id": "works_cycles", "final": {"question": "How much profit can the company gained from selling two high class black Road Bikes with a size of 58?", "sql": "SELECT 2 * (T1.ListPrice - T1.StandardCost) FROM Product AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductSubcategoryID = T2.ProductSubcategoryID WHERE T1.Class = 'H' AND T1.Color = 'Black' AND T1.Size = 58 AND T2.Name = 'Road Bikes'", "source_tables": ["productsubcategory", "product"]}, "evidence": "high class refers to Class = 'H\"; road bikes is a name of product subcategory; profit = (MULTIPLY(SUBTRACT(ListPrice, StandardCost)), (2)));"}
{"sample_id": 7048, "db_id": "works_cycles", "final": {"question": "How many assembly items for bicycles aren't finished?", "sql": "SELECT COUNT(BillOfMaterialsID) FROM BillOfMaterials WHERE EndDate IS NULL", "source_tables": ["billofmaterials"]}, "evidence": "assembly lines that are not finished refers to EndDate = null"}
{"sample_id": 7238, "db_id": "works_cycles", "final": {"question": "What is the credit card number for Michelle E Cox?", "sql": "SELECT T3.CreditCardID FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'Michelle' AND T1.MiddleName = 'E' AND T1.LastName = 'Cox'", "source_tables": ["creditcard", "personcreditcard", "person"]}, "evidence": "credit card number refers to CreditCardID"}
{"sample_id": 7015, "db_id": "works_cycles", "final": {"question": "How many people reviewed for product named HL Mountain Pedal? What is the average rating?", "sql": "SELECT COUNT(T1.ProductID), AVG(T2.Rating) FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'HL Mountain Pedal'", "source_tables": ["productreview", "product"]}, "evidence": "AVG(Rating) = DIVIDE(SUM(rating), COUNT(ReviewerName))"}
{"sample_id": 7349, "db_id": "works_cycles", "final": {"question": "How many vendors does Adventure Works still work with but are not preferable?", "sql": "SELECT COUNT(BusinessEntityID) FROM Vendor WHERE PreferredVendorStatus = 0 AND ActiveFlag = 1", "source_tables": ["vendor"]}, "evidence": "not preferable refers to PreferredVendorStatus = 0; still work refers to ActiveFlag = 1;"}
{"sample_id": 7424, "db_id": "works_cycles", "final": {"question": "Among all the employees who don't wish to receive promotion e-mails, how many of them belong to or once belonged to the Engineering Department?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T1.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' AND T2.EmailPromotion = 0", "source_tables": ["employeedepartmenthistory", "department", "person"]}, "evidence": "Employees who don't wish to receive e-mail promotions refers to EmailPromotion = 0;"}
{"sample_id": 7135, "db_id": "works_cycles", "final": {"question": "What is the location of business number 1?", "sql": "SELECT T1.AddressLine1 FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 USING (AddressID) WHERE T2.BusinessEntityID = 1", "source_tables": ["address", "businessentityaddress"]}, "evidence": "Location refers to AddressLine1; business number refers to the BusinessEntityID where BusinessEntityID = 1"}
{"sample_id": 7228, "db_id": "works_cycles", "final": {"question": "What is the business ID of the person who has made the most sales total year to date?", "sql": "SELECT BusinessEntityID FROM SalesPerson ORDER BY SalesYTD DESC LIMIT 1", "source_tables": ["salesperson"]}, "evidence": "business ID refers to BusinessEntityID; sales total year to date refers to SalesYTD; most sales total year to date refers to MAX(SalesYTD);"}
{"sample_id": 7262, "db_id": "works_cycles", "final": {"question": "As of 12/31/2011, how long has the employee assigned to all pending for approval papers been working in the company from the date he was hired?", "sql": "SELECT 2011 - STRFTIME('%Y', T2.HireDate) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1.Status = 1", "source_tables": ["employee", "document"]}, "evidence": "pending for approval papers refer to Status = 1; length of stay in the company as of 12/31/2011 = SUBTRACT(2011, year(HireDate));"}
{"sample_id": 7119, "db_id": "works_cycles", "final": {"question": "What are the company that Adventure Works deal with that have poor credit rating? Please provide their business number.", "sql": "SELECT BusinessEntityID FROM Vendor WHERE CreditRating = ( SELECT CreditRating FROM Vendor ORDER BY CreditRating DESC LIMIT 1 )", "source_tables": ["vendor"]}, "evidence": "poor credit rating means bad credit; CreditRating = 5; Business number refers to BusinessEntityID"}
{"sample_id": 7342, "db_id": "works_cycles", "final": {"question": "What is the highest possible discount rate for 'Excess Inventory'?", "sql": "SELECT DiscountPct FROM SpecialOffer WHERE Type = 'Excess Inventory' ORDER BY DiscountPct DESC LIMIT 1", "source_tables": ["specialoffer"]}, "evidence": "excess inventory refers to Type = 'Excess Inventory'; highest possible discount refers to Max(DiscountPct);"}
{"sample_id": 7258, "db_id": "works_cycles", "final": {"question": "What is the position of the employee with the 10th highest salary? Indicate his/her salary amount and his/her full name.", "sql": "SELECT T2.JobTitle, T1.Rate, T3.FirstName, T3.MiddleName, T3.LastName FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Person AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID ORDER BY T1.Rate DESC LIMIT 9, 1", "source_tables": ["employee", "employeepayhistory", "person"]}, "evidence": "salary and Rate are synonyms; full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7376, "db_id": "works_cycles", "final": {"question": "What profit will the company gain if they sell 10 items of the product that has the lightest weight?", "sql": "SELECT 10 * (ListPrice - StandardCost) FROM Product WHERE Weight IS NOT NULL ORDER BY Weight LIMIT 1", "source_tables": ["product"]}, "evidence": "Lightest product refers to Min(Weight); profit if they sell 10 items refers to Subtract (ListPrice , StandardCost) *10;"}
{"sample_id": 7215, "db_id": "works_cycles", "final": {"question": "What is the full name of the Vice President of Production?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Vice President of Production'", "source_tables": ["employee", "person"]}, "evidence": "full name = FirstName+MiddleName+LastName; Vice President of Production is a JobTitle;"}
{"sample_id": 7143, "db_id": "works_cycles", "final": {"question": "What is the location id for Debur and Polish?", "sql": "SELECT LocationID FROM Location WHERE Name = 'Debur and Polish'", "source_tables": ["location"]}, "evidence": "Debur and Polish is name of manufacturing location"}
{"sample_id": 7273, "db_id": "works_cycles", "final": {"question": "What is the highest amount of difference between the ordered quantity and actual quantity received in a single purchase order and to which vendor was the purchase order made?", "sql": "SELECT T2.OrderQty - T2.ReceivedQty, VendorID FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID ORDER BY T2.OrderQty - T2.ReceivedQty DESC LIMIT 1", "source_tables": ["purchaseorderdetail", "purchaseorderheader"]}, "evidence": "highest amount of difference between the ordered quantity and actual quantity received in a single purchase order refers to MAX(SUBTRACT(OrderQty, ReceivedQty));"}
{"sample_id": 7118, "db_id": "works_cycles", "final": {"question": "How many customers gave a product the best possible rating? Please list their names.", "sql": "SELECT ReviewerName FROM ProductReview WHERE Rating = 5", "source_tables": ["productreview"]}, "evidence": "customers' name refers to ReviewerName; best possible ratings means the highest rating = 5"}
{"sample_id": 7379, "db_id": "works_cycles", "final": {"question": "Among the employees who were born before 1969, what is the work shift of the 6th oldest employee?", "sql": "SELECT T3.StartTime, T3.EndTime FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Shift AS T3 ON T2.ShiftId = T3.ShiftId WHERE STRFTIME('%Y', T1.BirthDate) < '1969' ORDER BY T1.BirthDate LIMIT 5, 1", "source_tables": ["shift", "employeedepartmenthistory", "employee"]}, "evidence": "oldest employee born before 1969 refers to year(BirthDate)<'1969';"}
{"sample_id": 7363, "db_id": "works_cycles", "final": {"question": "Please list any three businesses with their IDs that are located in Dallas City.", "sql": "SELECT T2.BusinessEntityID FROM Address AS T1 INNER JOIN BusinessEntityAddress AS T2 ON T1.AddressID = T2.AddressID WHERE T1.City = 'Dallas' LIMIT 3", "source_tables": ["address", "businessentityaddress"]}, "evidence": "business with ther ID refers to BusinessEntityID"}
{"sample_id": 7086, "db_id": "works_cycles", "final": {"question": "What is the percentage, by number of sales order units, for orders with quantities not greater than 3 and a discount of 0.2?", "sql": "SELECT CAST(SUM(CASE WHEN OrderQty < 3 AND UnitPriceDiscount = 0.2 THEN 1 ELSE 0 END) AS REAL) / COUNT(SalesOrderID) FROM SalesOrderDetail", "source_tables": ["salesorderdetail"]}, "evidence": "quantities not greater than 3 refers to OrderQty<3; discount of 0.2 refers to UnitPriceDiscount = 0.2; percentage = DIVIDE(count(SalesOrderID(OrderQty<3 & UnitPriceDiscount = 0.2)), count(SalesOrderID))*100%"}
{"sample_id": 7171, "db_id": "works_cycles", "final": {"question": "For person id No.2054, is his/her vendor still active?", "sql": "SELECT T1.ActiveFlag FROM Vendor AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonID = 2054", "source_tables": ["businessentitycontact", "vendor"]}, "evidence": "ActiveFlag = 1 means 'Vendor no longer used'; ActiveFlag = 2 means 'Vendor is actively used"}
{"sample_id": 7265, "db_id": "works_cycles", "final": {"question": "How many work orders with quantities ranging from 100 to 250 have a reorder point of no more than 375?", "sql": "SELECT COUNT(T1.TransactionID) FROM TransactionHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Quantity BETWEEN 100 AND 250 AND T2.ReorderPoint <= 375", "source_tables": ["transactionhistory", "product"]}, "evidence": "work order refers to TransactionType = 'W'; Quantity BETWEEN 100 AND 250; ReorderPoint< = 375;"}
{"sample_id": 7164, "db_id": "works_cycles", "final": {"question": "How many types of tax did the sales happen in Quebec have?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM SalesTaxRate AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T2.Name = 'Quebec'", "source_tables": ["stateprovince", "salestaxrate"]}, "evidence": "If Name = \"+\" in the value from SalesTaxRate, it means this sales are charged by multiple types of tax; Quebec refers to the name of State Province"}
{"sample_id": 7115, "db_id": "works_cycles", "final": {"question": "What is the full address of address number 11906?", "sql": "SELECT AddressLine1, AddressLine2 FROM Address WHERE AddressID = 11906", "source_tables": ["address"]}, "evidence": "address number refers to AddressID; full address refers to AddressLine1 + AddressLine2"}
{"sample_id": 7436, "db_id": "works_cycles", "final": {"question": "List all products with the color yellow.", "sql": "SELECT ProductID FROM Product WHERE Color = 'Yellow'", "source_tables": ["product"]}, "evidence": ""}
{"sample_id": 7175, "db_id": "works_cycles", "final": {"question": "What is the number of the sub categories for bikes?", "sql": "SELECT COUNT(*) FROM ProductCategory AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T1.Name = 'Bikes'", "source_tables": ["productsubcategory", "productcategory"]}, "evidence": "Bike refers to the name of the product category, therefore ProductCategoryID = 1"}
{"sample_id": 7099, "db_id": "works_cycles", "final": {"question": "What type of transaction was made with the only yellow product, size 62 and with a minimum inventory stock of 500 units?", "sql": "SELECT DISTINCT T2.TransactionType FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Size = 62 AND T1.Color = 'Yellow' AND T1.SafetyStockLevel = 500", "source_tables": ["transactionhistory", "product"]}, "evidence": "yellow product refers to Color = 'Yellow'; minimum inventory stock of 500 units refers to SafetyStockLevel = 500"}
{"sample_id": 7023, "db_id": "works_cycles", "final": {"question": "List the name and calculate its profit for product with the highest rating in review.", "sql": "SELECT T1.Name, T1.ListPrice - T1.StandardCost FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID ORDER BY T2.Rating DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "Profit = SUBTRACT(ListPrice, StandardCost); the highest rating in review refers to Rating = 5"}
{"sample_id": 7272, "db_id": "works_cycles", "final": {"question": "What is the total profit gained by the company from the product that has the highest amount of quantity ordered from online customers? Indicate the name of the product.", "sql": "SELECT (T2.ListPrice - T2.StandardCost) * SUM(T1.Quantity), T2.Name FROM ShoppingCartItem AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID, T2.Name, T2.ListPrice, T2.StandardCost, T1.Quantity ORDER BY SUM(T1.Quantity) DESC LIMIT 1", "source_tables": ["shoppingcartitem", "product"]}, "evidence": "profit = MULTIPLY(SUBTRACT(ListPrice, Standardcost)), (Quantity)));"}
{"sample_id": 7202, "db_id": "works_cycles", "final": {"question": "What is the projected sales quota amount in 2013 and sales YTD amount for sales person with business entity ID 275?", "sql": "SELECT SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 275 AND STRFTIME('%Y', QuotaDate) = '2013'", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "projected sales quota refers to SalesQuota; projected sales quota in 2013 refers to year(QuotaDate) = 2013; projected sales quota for 2013 = SUM(SalesQuota where year(QuotaDate) = 2013);"}
{"sample_id": 7225, "db_id": "works_cycles", "final": {"question": "Among all the production technicians, how many have a below average pay rate for a production technician?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T2.Rate < ( SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' )", "source_tables": ["employee", "employeepayhistory"]}, "evidence": "production technician is a job title; below average rate refers to Rate<AVG(Rate);"}
{"sample_id": 7217, "db_id": "works_cycles", "final": {"question": "List all the purchase order ids of the vendor with a below average rating.", "sql": "SELECT T2.PurchaseOrderID FROM Vendor AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.BusinessEntityID = T2.VendorID WHERE T1.CreditRating = 5", "source_tables": ["purchaseorderheader", "vendor"]}, "evidence": "below average rating refers to CreditRating = 5;"}
{"sample_id": 7270, "db_id": "works_cycles", "final": {"question": "What is the full name of the sales person who has the the highest commission percent received per sale?", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.CommissionPct DESC LIMIT 1", "source_tables": ["salesperson", "person"]}, "evidence": "commision percent received per sale refers to CommissionPct; highest commision percent received per sale refers to MAX(CommissionPcT); full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7392, "db_id": "works_cycles", "final": {"question": "Of the employees whose vacation hours are no more than 10, what is the age of the oldest employee at the time he/she was hired? Indicate his/her full name.", "sql": "SELECT STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate), T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.VacationHours <= 10 ORDER BY STRFTIME('%Y', T1.HireDate) - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1", "source_tables": ["employee", "person"]}, "evidence": "VacationHours<10; age at the time of being hired = SUBTRACT(year(HireDate), year(BirthDate)); full name = FirstName+MiddleName+LastName;"}
{"sample_id": 7462, "db_id": "works_cycles", "final": {"question": "List the locations ids, compartments and containers for the Lock Ring", "sql": "SELECT T2.LocationID, T2.Shelf, T2.Bin FROM Product AS T1 INNER JOIN ProductInventory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE 'Lock Ring'", "source_tables": ["product", "productinventory"]}, "evidence": "compartment refers to Shelf; container refers to Bin; Lock Ring is a name of product"}
{"sample_id": 7214, "db_id": "works_cycles", "final": {"question": "What is the name of the territory assigned to the sales person with business id \"277\"?", "sql": "SELECT T2.Name FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.BusinessEntityID = 277", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "business id refers to BusinessEntityID"}
{"sample_id": 7087, "db_id": "works_cycles", "final": {"question": "Lists all companies by BusinessEntityID that increased their current year sales by more than 60% over last year's sales and have a bonus greater than 3,000.", "sql": "SELECT BusinessEntityID FROM SalesPerson WHERE SalesYTD > SalesLastYear + SalesLastyear * 0.6 AND Bonus > 3000", "source_tables": ["salesperson"]}, "evidence": "increased their current year sales by more than 60% refers to\nDIVIDE(SUBTRACT(SalesYTD, SalesLastYear),SalesLastYear)>0.6"}
{"sample_id": 7263, "db_id": "works_cycles", "final": {"question": "Jill ranked which medium-quality class product as the highest, and how long will it take the company to manufacture such a product?", "sql": "SELECT T1.DaysToManufacture FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Rating = 5 AND T1.Class = 'M' ORDER BY T2.Rating LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "second-lowest rating refers to Rating = 2; high-quality class product refers to Class = 'H'; length of time it takes the company to manufacture a product refers to DaysToManufacture;"}
{"sample_id": 7453, "db_id": "works_cycles", "final": {"question": "What is the the percentage of profit for the product \"858\"?", "sql": "SELECT (T1.ListPrice - T2.StandardCost) * 100 / T2.StandardCost FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductID = 858", "source_tables": ["productlistpricehistory", "productcosthistory"]}, "evidence": "percentage of profit = DIVIDE(SUBTRACT(ListPrice, StandardCost), (StandardCost)) as percentage;"}
{"sample_id": 7198, "db_id": "works_cycles", "final": {"question": "Among the sales people who achieved projected sales quota 2013, is there any person from territory ID 1? If yes, state the business entity ID.", "sql": "SELECT DISTINCT T1.BusinessEntityID FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.TerritoryID = 1 AND STRFTIME('%Y', QuotaDate) = '2013'", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "projected sales quota refers to SalesQuota; projected sales quota in 2013 refers to year(QuotaDate) = 2013;"}
{"sample_id": 7374, "db_id": "works_cycles", "final": {"question": "What are the names of the top 6 products that has the biggest size in centimeter and what are its reorder point?", "sql": "SELECT Name, ReorderPoint FROM Product WHERE SizeUnitMeasureCode = 'CM' ORDER BY Size DESC LIMIT 6", "source_tables": ["product"]}, "evidence": "in centimeter refers to SizeUnitMeasureCode = 'CM';"}
{"sample_id": 7318, "db_id": "works_cycles", "final": {"question": "Name the vendor who has the shortest average lead time for Product ID 319.", "sql": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 319 ORDER BY T2.AverageLeadTime LIMIT 1", "source_tables": ["vendor", "productvendor"]}, "evidence": ""}
{"sample_id": 7125, "db_id": "works_cycles", "final": {"question": "How long does it take for the business to receive the item it has purchased? Who is the vendor for business number 1496?", "sql": "SELECT T1.AverageLeadTime, T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 USING (businessentityid) WHERE T2.BusinessEntityID = 1496 GROUP BY T1.AverageLeadTime, T2.Name", "source_tables": ["vendor", "productvendor"]}, "evidence": "business number refers to BusinessEntityID where BusinessEntityID = 1496; how long does it take refers to AverageLeadTime"}
{"sample_id": 7311, "db_id": "works_cycles", "final": {"question": "Name all salaried employee who are hired in 2007 and later.", "sql": "SELECT T1.FirstName, T1.LastName FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.HireDate) >= '2007' AND T2.SalariedFlag = 1", "source_tables": ["employee", "person"]}, "evidence": "salaried employee refers to SalariedFlag = 1; hired in 2007 and later refers to year(HireDate)> = 2007"}
{"sample_id": 7354, "db_id": "works_cycles", "final": {"question": "What bike subcategories are there?", "sql": "SELECT T1.Name FROM ProductSubcategory AS T1 INNER JOIN ProductCategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T2.name = 'Bikes'", "source_tables": ["productsubcategory", "productcategory"]}, "evidence": "bikes is product category"}
{"sample_id": 7355, "db_id": "works_cycles", "final": {"question": "Which sales areas are expected to have the highest yearly sales quota?", "sql": "SELECT T2.Name FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID GROUP BY T1.TerritoryID ORDER BY SUM(T1.SalesQuota) DESC LIMIT 1", "source_tables": ["salesterritory", "salesperson"]}, "evidence": "highest yearly sales quota refers to Max(SalesQuota);"}
{"sample_id": 7153, "db_id": "works_cycles", "final": {"question": "What is the product ID No.793's model name?", "sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN ProductModel AS T2 ON T1.ProductModelID = T2.ProductModelID WHERE T1.ProductID = 793", "source_tables": ["product", "productmodel"]}, "evidence": ""}
{"sample_id": 7394, "db_id": "works_cycles", "final": {"question": "What is the company's profit on the product that was rated second-highest by David?", "sql": "SELECT T2.ListPrice - T2.StandardCost FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ReviewerName = 'David' ORDER BY T1.Rating DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "profit on net on a single product = SUBTRACT(ListPrice, StandardCost); second highest rating refers to Rating = 4; David is the ReviewerName;"}
{"sample_id": 7013, "db_id": "works_cycles", "final": {"question": "Calculate the profit of each products. List all products with more than $100 in profit.", "sql": "SELECT DISTINCT Name FROM Product WHERE ListPrice - StandardCost > 100", "source_tables": ["product"]}, "evidence": "Profit = AVG(SUBTRACT(ListPrice, StandardCost)>100"}
{"sample_id": 7293, "db_id": "works_cycles", "final": {"question": "Please list all the vendors' usual selling prices of the product Hex Nut 5.", "sql": "SELECT T1.StandardPrice FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5' GROUP BY T1.StandardPrice ORDER BY COUNT(T1.StandardPrice) DESC LIMIT 1", "source_tables": ["productvendor", "product"]}, "evidence": "vendor's selling price refers to StandardPrice"}
{"sample_id": 7039, "db_id": "works_cycles", "final": {"question": "Which store sales person was reently hired? Indicate his/her full name and gender.", "sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName, T1.Gender FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'", "source_tables": ["employee", "person"]}, "evidence": "SC is an abbreviation for Store Contact; store contact person refers to PersonType = 'SC'; recently hired refers to latest StartDate;"}
{"sample_id": 7305, "db_id": "works_cycles", "final": {"question": "What is the average selling price of different vendors of the product Hex Nut 5?", "sql": "SELECT SUM(T1.StandardPrice) / COUNT(T1.BusinessEntityID) FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Hex Nut 5'", "source_tables": ["productvendor", "product"]}, "evidence": "average selling price = divide(sum(StandardPrice), count(BusinessEntityID))"}
{"sample_id": 7377, "db_id": "works_cycles", "final": {"question": "How much is the tax amount of the purchase order with the biggest tax amount? Indicate the purchase order ID.", "sql": "SELECT TaxAmt, PurchaseOrderID FROM PurchaseOrderHeader ORDER BY TaxAmt DESC LIMIT 1", "source_tables": ["purchaseorderheader"]}, "evidence": "tax amount refers to TaxAmt; biggest tax amount refers to MAX(TaxAmt);"}
{"sample_id": 7203, "db_id": "works_cycles", "final": {"question": "Provide the business entity ID who did not achieved projected yearly sales quota in 2013.", "sql": "SELECT DISTINCT T1.BusinessEntityID FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013' AND T1.SalesQuota < T1.SalesLastYear", "source_tables": ["salespersonquotahistory", "salesperson"]}, "evidence": "projected yearly sales quota refers to SalesQuota; sales quota in 2013 refers to year(QuotaDate) = 2013; person who did not achieve projected yearly sales quota refers to SalesQuota>SalesYTD;"}
{"sample_id": 7168, "db_id": "works_cycles", "final": {"question": "Which type of transaction was it for the \"LL Road Handlebars\" order happened in 2012/11/3?", "sql": "SELECT T1.TransactionType FROM TransactionHistoryArchive AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'LL Road Handlebars' AND STRFTIME('%Y-%m-%d',T1.TransactionDate) = '2012-11-03'", "source_tables": ["transactionhistoryarchive", "product"]}, "evidence": "Transactiontype = 'w' means 'WorkOrder'; transactiontype = 's' means 'SalesOrder'; transactiontype = 'P' means 'PurchaseOrder'; happened in refers to TransactionDate"}
{"sample_id": 7190, "db_id": "works_cycles", "final": {"question": "Among the Production Technicians who are single, how many of them are vendor contact?", "sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.MaritalStatus = 'S' AND T2.PersonType = 'VC'", "source_tables": ["employee", "person"]}, "evidence": "Production Technicians refer to the\u00a0 JobTitle = 'Production Technician%'; single refers to MaritalStatus = 'S'; Vendor contact refers to PersonType = 'VC'"}
{"sample_id": 7113, "db_id": "works_cycles", "final": {"question": "How many black-colored products are there that cannot be sold?", "sql": "SELECT COUNT(ProductID) FROM Product WHERE FinishedGoodsFlag = 0 AND Color = 'Black'", "source_tables": ["product"]}, "evidence": "cannot be sold means product is not a salable item which refers to FinishedGoodsFlag = 0"}
{"sample_id": 7358, "db_id": "works_cycles", "final": {"question": "Where are the shelves where the down tube product was stored?", "sql": "SELECT T2.Shelf FROM Product AS T1 INNER JOIN ProductInventory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Down Tube'", "source_tables": ["product", "productinventory"]}, "evidence": "shelves refer to shelf; down tube is a product"}
{"sample_id": 7413, "db_id": "works_cycles", "final": {"question": "In which year will the David Bradley's credit card expire?", "sql": "SELECT T3.ExpYear FROM Person AS T1 INNER JOIN PersonCreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN CreditCard AS T3 ON T2.CreditCardID = T3.CreditCardID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "source_tables": ["creditcard", "personcreditcard", "person"]}, "evidence": "year of credit card expiration refers to ExpYear;"}
{"sample_id": 7208, "db_id": "works_cycles", "final": {"question": "What is the name of the product with the id \"475\"?", "sql": "SELECT Name FROM Product WHERE ProductID = 475", "source_tables": ["product"]}, "evidence": ""}
{"sample_id": 7390, "db_id": "works_cycles", "final": {"question": "What are the names of the vendor with the second lowest minimum order quantity?", "sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.MaxOrderQty ASC LIMIT 1, 1", "source_tables": ["vendor", "productvendor"]}, "evidence": "minimum order quantity refers to MinOrderQty;"}
{"sample_id": 7463, "db_id": "works_cycles", "final": {"question": "What category do Road Frames fall into?", "sql": "SELECT T2.Name FROM ProductSubcategory AS T1 INNER JOIN ProductCategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T1.Name = 'Road Frames'", "source_tables": ["productsubcategory", "productcategory"]}, "evidence": "Road Frames is a name of product subcategory"}
{"sample_id": 7400, "db_id": "works_cycles", "final": {"question": "Please list the top 3 discounts with the highest discount percentage and fall under the reseller category.", "sql": "SELECT Description, DiscountPct FROM SpecialOffer WHERE Category = 'Reseller' ORDER BY DiscountPct DESC LIMIT 0, 3", "source_tables": ["specialoffer"]}, "evidence": "discount percentage refers to DiscountPct; highest discount percentage refers to MAX(DiscountPct);"}
{"sample_id": 7226, "db_id": "works_cycles", "final": {"question": "What proportion of sales orders are made from the United Kingdom?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Name = 'United Kingdom' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SalesOrderID) FROM SalesOrderHeader AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID", "source_tables": ["salesterritory", "salesorderheader"]}, "evidence": "proportion = DIVIDE(SUM(Name = 'UK')), (COUNT(SalesOrderID))) as count;"}
{"sample_id": 7088, "db_id": "works_cycles", "final": {"question": "Add the number of businesses that indicate their home address as their address and those whose address corresponds to the shipping address.", "sql": "SELECT SUM(CASE WHEN T2.Name = 'Home' THEN 1 ELSE 0 END) , SUM(CASE WHEN T2.Name = 'Shipping' THEN 1 ELSE 0 END) FROM BusinessEntityAddress AS T1 INNER JOIN AddressType AS T2 ON T1.AddressTypeID = T2.AddressTypeID", "source_tables": ["addresstype", "businessentityaddress"]}, "evidence": "their home address as their address refers to AddressTypeID = 2; address corresponds to the shipping address refers to AddressTypeID = 5"}
{"sample_id": 7307, "db_id": "works_cycles", "final": {"question": "Please list the top 3 house-manufactured products with the highest average rating.", "sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY SUM(T1.Rating) DESC LIMIT 1", "source_tables": ["productreview", "product"]}, "evidence": "home manufactured refers to MakeFlag = 1; average rating = divide(sum(Rating), count(ProductReview))"}
{"sample_id": 7339, "db_id": "works_cycles", "final": {"question": "Please list three businesses with the lowest total sales from last year.", "sql": "SELECT BusinessEntityID FROM SalesPerson ORDER BY SalesLastYear LIMIT 3", "source_tables": ["salesperson"]}, "evidence": "lowest total sales in last year refers to Min(SalesLastYear);"}
{"sample_id": 7588, "db_id": "image_and_language", "final": {"question": "Provide the x-coordinate and y-coordinate of the image with an attribute class of ''horse\" and an object class of \"fur\".", "sql": "SELECT T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.ATT_CLASS = 'horse' AND T4.OBJ_CLASS = 'fur'", "source_tables": ["img_obj", "obj_classes", "att_classes", "img_obj_att"]}, "evidence": "attribute class of \"horse\" refers to ATT_CLASS = 'horse'; object class of \"fur\" refers to OBJ_CLASS = 'fur';"}
{"sample_id": 7569, "db_id": "image_and_language", "final": {"question": "List attributes for object class 'tip' In image 1314.", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T3.IMG_ID = 1314 AND T4.OBJ_CLASS = 'tip'", "source_tables": ["img_obj", "obj_classes", "att_classes", "img_obj_att"]}, "evidence": "attributes for object refer to ATT_CLASS; class 'tip' in image 1314 refers to OBJ_CLASS = 'tip' where IMG_ID = 1314;"}
{"sample_id": 7535, "db_id": "image_and_language", "final": {"question": "Describe the objects, their attributes, and the relationships that comprise the scene on image no. 1 within the bounding box, represented as (388, 369, 48, 128).", "sql": "SELECT DISTINCT T2.OBJ_CLASS, T4.ATT_CLASS, T6.PRED_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID INNER JOIN IMG_REL AS T5 ON T1.IMG_ID = T5.IMG_ID INNER JOIN PRED_CLASSES AS T6 ON T5.PRED_CLASS_ID = T6.PRED_CLASS_ID WHERE T1.IMG_ID = 1 AND T1.X = 388 AND T1.Y = 369 AND T1.W = 48 AND T1.H = 128", "source_tables": ["pred_classes", "img_rel", "img_obj", "att_classes", "obj_classes", "img_obj_att"]}, "evidence": "objects refers to OBJ_CLASS; attributes refers to ATT_CLASS; relationships refers to PRED_CLASS; image no. 1 refers to IMG_ID = 1; bounding box, represented as (388, 369, 48, 128) refers to X = 388 and Y = 369 and W = 48 and H = 128"}
{"sample_id": 7583, "db_id": "image_and_language", "final": {"question": "What is the image ID with a predicted class of \"parked on\"?", "sql": "SELECT DISTINCT T1.IMG_ID FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'parked on'", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "predicted class of \"parked on\" refers to PRED_CLASS = 'parked on';"}
{"sample_id": 7594, "db_id": "image_and_language", "final": {"question": "Calculate the average number of images with an attribute class of \"keyboard\".", "sql": "SELECT AVG(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "AVG(IMG_ID) where OBJ_CLASS = 'keyboard';"}
{"sample_id": 7570, "db_id": "image_and_language", "final": {"question": "What is the prediction class between object class 'chain' and 'label' in image 2360078?", "sql": "SELECT DISTINCT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T2.PRED_CLASS_ID = T1.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID AND T1.OBJ1_SAMPLE_ID = T3.OBJ_SAMPLE_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.IMG_ID = 2360078 AND T1.OBJ1_SAMPLE_ID = 15 OR T1.OBJ2_SAMPLE_ID = 18", "source_tables": ["img_obj", "obj_classes", "pred_classes", "img_rel"]}, "evidence": "prediction class refers to PRED_CLASS; object class 'chain' refers to OBJ_CLASS = 'chain'; object class 'label' refers to OBJ_CLASS = 'label'; image 2360078 refers to IMG_ID = 2360078;"}
{"sample_id": 7518, "db_id": "image_and_language", "final": {"question": "What are the x and y coordinates of all the images with a prediction relationship class id of 98?", "sql": "SELECT T2.X, T2.Y FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.PRED_CLASS_ID = 98", "source_tables": ["img_obj", "img_rel"]}, "evidence": "prediction relationship class id of 98 refers to PRED_CLASS_ID = 98"}
{"sample_id": 7592, "db_id": "image_and_language", "final": {"question": "How many images have \"picture\" as their attribute class and \"bear\" as their object class?", "sql": "SELECT COUNT(T2.IMG_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T1.ATT_CLASS = 'picture' AND T4.OBJ_CLASS = 'bear'", "source_tables": ["img_obj", "obj_classes", "att_classes", "img_obj_att"]}, "evidence": "\"picture\" as attribute class refers to ATT_CLASS = 'picture'; \"bear\" as object class refers to OBJ_CLASS = 'bear'; images refer to IMG_ID;"}
{"sample_id": 7607, "db_id": "image_and_language", "final": {"question": "Name the most common predicate class of image ID 4434.", "sql": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 4434 ORDER BY T2.PRED_CLASS DESC LIMIT 1", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "the most common predicate class of image ID 4434 MAX(PRED_CLASS) where IMG_ID = 4434;"}
{"sample_id": 7582, "db_id": "image_and_language", "final": {"question": "How many images have \"vegetable\" and \"fruits\" as their object classes?", "sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'vegetables' OR T2.OBJ_CLASS = 'fruits'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "images refer to IMG_ID; \"vegetables\" and \"fruits\" as object classes refer to OBJ_CLASS = 'vegetables' and OBJ_CLASS = 'fruits';"}
{"sample_id": 7597, "db_id": "image_and_language", "final": {"question": "List all bounding box widths and heights of object sample ID 2.", "sql": "SELECT W, H FROM IMG_OBJ WHERE OBJ_SAMPLE_ID = 2", "source_tables": ["img_obj"]}, "evidence": "The bounding box's W and H abbreviations stand for the object's width and height respectively; object sample ID 2 refers to OBJ_SAMPLE_ID = 2;"}
{"sample_id": 7541, "db_id": "image_and_language", "final": {"question": "On image no. 99 identify the percentage of objects that are described as white.", "sql": "SELECT CAST(SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 99", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "image no. 99 refers to IMG_ID = 99; described as white refers to ATT_CLASS = 'white'; percentage = divide(count(OBJ_SAMPLE_ID) where ATT_CLASS = 'white', count(OBJ_SAMPLE_ID)) as percentage"}
{"sample_id": 7563, "db_id": "image_and_language", "final": {"question": "Find the object in image 5 where the object with the coordinate of (634, 468).", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 5 AND X = 634 AND Y = 468", "source_tables": ["img_obj"]}, "evidence": "object in image 5 refers to OBJ_SAMPLE_ID where IMG_ID = 5; coordinates of (634, 468) refer to X and Y coordinates of the bounding box in which X = 634 and Y = 468;"}
{"sample_id": 7604, "db_id": "image_and_language", "final": {"question": "Write the object classes of image ID 22 alongside the object's width and height.", "sql": "SELECT T1.W, T1.H, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 22", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object classes of image ID 22 refers to OBJ_CLASS where IMG_ID = 22; the object's width and heigh refer to W and H coordinates of the bounding box respectively;"}
{"sample_id": 7576, "db_id": "image_and_language", "final": {"question": "Calculate the percentage of object samples that are related to street lights.", "sql": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'street lights' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OBJ_SAMPLE_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "DIVIDE(COUNT(OBJ_SAMPLE_ID where OBJ_CLASS = 'street lights'), COUNT(OBJ_SAMPLE_ID)) as percentage;"}
{"sample_id": 7605, "db_id": "image_and_language", "final": {"question": "What is the predicate class of image ID 68?", "sql": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 68", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "predicate class of image ID 68 refers to PRED_CLASS where IMG_ID = 68;"}
{"sample_id": 7487, "db_id": "image_and_language", "final": {"question": "To which predicted relation class does the self-relation of the object sample in image no.5 belong?", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 5 AND T2.OBJ1_SAMPLE_ID = T2.OBJ2_SAMPLE_ID", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "predicted relation class refers to PRED_CLASS; self-relations refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID; image no.5 refers to IMG_ID = 5"}
{"sample_id": 7481, "db_id": "image_and_language", "final": {"question": "Please list the classes of all the object samples in image no.1.", "sql": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 GROUP BY T1.OBJ_CLASS", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "classes of all the object samples refers to OBJ_CLASS; image no.1 refers to IMG_ID = 1"}
{"sample_id": 7554, "db_id": "image_and_language", "final": {"question": "How many images include the \"wood\" objects?", "sql": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'wood'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "images refer to IMG_ID; \"wood\" objects refer to OBJ_CLASS = 'wood';"}
{"sample_id": 7539, "db_id": "image_and_language", "final": {"question": "On image no. 20, identify the attribute ID that is composed of the highest number of objects.", "sql": "SELECT ATT_CLASS_ID FROM IMG_OBJ_ATT WHERE IMG_ID = 20 GROUP BY ATT_CLASS_ID ORDER BY COUNT(ATT_CLASS_ID) DESC LIMIT 1", "source_tables": ["img_obj_att"]}, "evidence": "image no. 20 refers to IMG_ID = 20; attribute ID refers to ATT_CLASS_ID; highest number of objects refers to max(count(ATT_CLASS_ID))"}
{"sample_id": 7537, "db_id": "image_and_language", "final": {"question": "How many attributes are related to the object sample no. 7 on image no. 4?", "sql": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7", "source_tables": ["img_obj_att"]}, "evidence": "How many attributes refers to ATT_CLASS_ID; object sample no. 7 on image no. 4 refers to IMG_ID = 4 and OBJ_SAMPLE_ID = 7"}
{"sample_id": 7479, "db_id": "image_and_language", "final": {"question": "How many object samples in image no.1 are in the class of \"man\"?", "sql": "SELECT SUM(CASE WHEN T1.OBJ_CLASS = 'man' THEN 1 ELSE 0 END) FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 1", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object samples refers to OBJ_CLASS_ID; image no.1 refers to IMG_ID = 1; in the class of \"man\" refers to OBJ_CLASS = 'man'"}
{"sample_id": 7567, "db_id": "image_and_language", "final": {"question": "List all the IDs of images that have objects with the attributes of 'wired'.", "sql": "SELECT DISTINCT T2.IMG_ID FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'wired'", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "IDs of images refer to IMG_ID; objects with the attributes of 'wired' refer to ATT_CLASS = 'wired';"}
{"sample_id": 7593, "db_id": "image_and_language", "final": {"question": "List all the attribute classes of the images that have a (5,5) coordinate.", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.X = 5 AND T3.Y = 5", "source_tables": ["img_obj", "att_classes", "img_obj_att"]}, "evidence": "attribute classes refer to ATT_CLASS; (5,5) coordinate refers to X and Y coordinates of the bounding box where X = 5 and Y = 5;"}
{"sample_id": 7556, "db_id": "image_and_language", "final": {"question": "Calculate the percentage of \"airplane\" object class in the table.", "sql": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'airplane' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.OBJ_CLASS) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "DIVIDE(SUM(OBJ_SAMPLE_ID where OBJ_CLASS = 'airplane'), COUNT(OBJ_CLASS)) as percentage;"}
{"sample_id": 7494, "db_id": "image_and_language", "final": {"question": "Give the bounding box of the kite in image no.2324765.", "sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2324765 AND T1.OBJ_CLASS = 'kite'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "bounding box refers to (x, y, W, H); kite refers to OBJ_CLASS = 'kite'; image no.2324765 refers to IMG_ID = 2324765"}
{"sample_id": 7574, "db_id": "image_and_language", "final": {"question": "State the width and height of the object with the class of 'van' in image 1.", "sql": "SELECT T1.H, T1.W FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1 AND T2.OBJ_CLASS = 'van'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "The bounding box's W and H abbreviations stand for the object's width and height respectively; class of 'van' in image 1 refers to OBJ_CLASS = 'van' where IMG_ID = 1;"}
{"sample_id": 7579, "db_id": "image_and_language", "final": {"question": "How many images have less than 15 object samples?", "sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE OBJ_SAMPLE_ID < 15", "source_tables": ["img_obj"]}, "evidence": "images refer to IMG_ID; less than 15 object samples refer to COUNT(OBJ_SAMPLE_ID) < 15;"}
{"sample_id": 7515, "db_id": "image_and_language", "final": {"question": "How many images have at least 5 \"black\" classes?", "sql": "SELECT COUNT(IMGID) FROM ( SELECT T1.IMG_ID AS IMGID FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.ATT_CLASS = 'black' GROUP BY T1.IMG_ID HAVING COUNT(T1.ATT_CLASS_ID) >= 5 ) T3", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "images refers to IMG_ID; have at least 5 \"black\" classes refers to count(ATT_CLASS_ID) where ATT_CLASS = 'black' > = 5"}
{"sample_id": 7500, "db_id": "image_and_language", "final": {"question": "Give the number of images containing the object sample of \"suit\".", "sql": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'suit' GROUP BY T2.IMG_ID ) T", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "number of images refers to IMG_ID; object sample of \"suit\" refers to OBJ_CLASS = 'suit'"}
{"sample_id": 7517, "db_id": "image_and_language", "final": {"question": "Which image has the highest number of \"white\" class attributes?", "sql": "SELECT T1.IMG_ID AS IMGID FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.ATT_CLASS = 'white' GROUP BY T1.IMG_ID ORDER BY COUNT(T1.ATT_CLASS_ID) DESC LIMIT 1", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "\"white\" class attributes refers to ATT_CLASS = 'white'; highest number refers to max(count(ATT_CLASS_ID))"}
{"sample_id": 7538, "db_id": "image_and_language", "final": {"question": "How many object elements can be detected on image no. 31?", "sql": "SELECT COUNT(OBJ_CLASS_ID) FROM IMG_OBJ WHERE IMG_ID = 31", "source_tables": ["img_obj"]}, "evidence": "How many object elements refers to OBJ_CLASS_ID; image no. 31 refers to IMG_ID = 31"}
{"sample_id": 7552, "db_id": "image_and_language", "final": {"question": "What is the bounding box of \"spoon\" in image id 1344?", "sql": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1344 AND T2.OBJ_CLASS = 'spoon'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "the bounding box refers to X, Y, W, H from IMG_OBJ; image id 1344 refers to IMG_ID = 1344; \"spoon\" refers to OBJ_CLASS = 'spoon';"}
{"sample_id": 7599, "db_id": "image_and_language", "final": {"question": "List all the attribute classes of image ID 22.", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 22", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "attribute classes of image ID 22 refer to ATT_CLASS where MG_ID = 22;"}
{"sample_id": 7513, "db_id": "image_and_language", "final": {"question": "List all the corresponding classes for attributes of image id 8.", "sql": "SELECT T2.ATT_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 8", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "classes for attributes refers to ATT_CLASS; image id 8 refers to IMG_ID = 8"}
{"sample_id": 7475, "db_id": "image_and_language", "final": {"question": "What is the ID of the image with the most number of object samples?", "sql": "SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1", "source_tables": ["img_obj"]}, "evidence": "ID of the image refers to IMG_ID; most number of object samples refers to max(count(OBJ_SAMPLE_ID))"}
{"sample_id": 7501, "db_id": "image_and_language", "final": {"question": "What is the relationship between \"feathers\" and \"onion\" in image no.2345528?", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_SAMPLE_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE (T4.OBJ_CLASS = 'feathers' OR T4.OBJ_CLASS = 'onion') AND T2.IMG_ID = 2345528 GROUP BY T1.PRED_CLASS", "source_tables": ["img_obj", "obj_classes", "pred_classes", "img_rel"]}, "evidence": "relationship refers to PRED_CLASS; \"feathers\" and \"onion\" in image no.2345528 refers to IMG_ID = 2345528 and OBJ_CLASS = 'feathers' and OBJ_CLASS = 'onion'"}
{"sample_id": 7608, "db_id": "image_and_language", "final": {"question": "Count the number of 'dress' object classes and include their X and Y coordinates in image ID 1764.", "sql": "SELECT T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1764 AND T2.OBJ_CLASS = 'dress'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "dress' object classes refer to OBJ_CLASS = 'dress'; image ID 1764 refers to IMG_ID = 1764; X and Y refer to coordinates of the bounding box;"}
{"sample_id": 7532, "db_id": "image_and_language", "final": {"question": "How many images contain 'bridge' as an object element?", "sql": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'bridge'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "images refers to IMG_ID; 'bridge' as an object element refers to OBJ_CLASS = 'bridge'"}
{"sample_id": 7540, "db_id": "image_and_language", "final": {"question": "Define the bounding box of the object sample no. 7 on image no. 42.", "sql": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 42 AND OBJ_SAMPLE_ID = 7", "source_tables": ["img_obj"]}, "evidence": "bounding box of the object refers to (X, Y, W, H); sample no.7 on image no.42 refers to IMG_ID = 42 and OBJ_SAMPLE_ID = 7"}
{"sample_id": 7555, "db_id": "image_and_language", "final": {"question": "State the object class of the image with tallest bounding box.", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H DESC LIMIT 1", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "bounding box refers to X, Y, W, H from IMG_OBJ; tallest relates to the height of the bounding box which refers to MAX(H); object class refers to OBJ_CLASS;"}
{"sample_id": 7477, "db_id": "image_and_language", "final": {"question": "How many self-relations are there between the object samples in image no.5?", "sql": "SELECT SUM(CASE WHEN IMG_ID = 5 THEN 1 ELSE 0 END) FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID", "source_tables": ["img_rel"]}, "evidence": "self-relations refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID; image no.5 refers to IMG_ID = 5"}
{"sample_id": 7526, "db_id": "image_and_language", "final": {"question": "Identify the border's coordinates on the X and Y axes that enclose a folk in image no. 6.", "sql": "SELECT T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 6 AND T2.OBJ_CLASS = 'folk'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "coordinates on the X and Y axes refers to X and Y; folk refers to OBJ_CLASS = 'folk'; image no. 6 refers to IMG_ID = 6"}
{"sample_id": 7610, "db_id": "image_and_language", "final": {"question": "How many 'blue' attribute classes are there on image ID 2355735?", "sql": "SELECT COUNT(T1.ATT_CLASS) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 2355735 AND T1.ATT_CLASS = 'blue'", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "blue' attribute classes on image ID 2355735 refer to ATT_CLASS = 'blue' where IMG_ID = 2355735;"}
{"sample_id": 7506, "db_id": "image_and_language", "final": {"question": "How many times is the number of images containing \"broccoli\" than \"tomato\"?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.OBJ_CLASS = 'broccoli' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.OBJ_CLASS = 'tomato' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) times FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "images refers to IMG_ID; \"broccoli\" refers to OBJ_CLASS = 'broccoli'; \"tomato\" refers to OBJ_CLASS = 'tomato' ; How many times = divide(count(OBJ_SAMPLE_ID) when OBJ_CLASS = 'broccoli', count(OBJ_SAMPLE_ID) when OBJ_CLASS = 'tomato')"}
{"sample_id": 7587, "db_id": "image_and_language", "final": {"question": "List all the ID of the images that have an attribute class of \"horse\".", "sql": "SELECT T2.IMG_ID FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'horse'", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "ID of all images refer to IMG_ID; attribute class of \"horse\" refers to ATT_CLASS = 'horse';"}
{"sample_id": 7484, "db_id": "image_and_language", "final": {"question": "Please list all the predicted relation classes of object sample no.14 in image no.1.", "sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID = 14 AND T2.OBJ2_SAMPLE_ID = 14", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "predicted relation classes refers to PRED_CLASS; object sample no.14 in image no.1 refers to OBJ1_SAMPLE_ID = 14 AND OBJ2_SAMPLE_ID = 14 and IMG_ID = 1"}
{"sample_id": 7473, "db_id": "image_and_language", "final": {"question": "How many object samples are there in image no.1?", "sql": "SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ WHERE IMG_ID = 1", "source_tables": ["img_obj"]}, "evidence": "object samples refers to OBJ_SAMPLE_ID; image no.1 refers to IMG_ID = 1"}
{"sample_id": 7488, "db_id": "image_and_language", "final": {"question": "What are the bounding boxes of the object samples with a predicted relation class of \"by\" in image no.1?", "sql": "SELECT T3.X, T3.Y, T3.W, T3.H FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T1.PRED_CLASS = 'by'", "source_tables": ["img_obj", "pred_classes", "img_rel"]}, "evidence": "bounding boxes of the object samples refers to (x, y, W, H); predicted relation class of \"by\" refers to PRED_CLASS = 'by'; image no.1 refers to IMG_ID = 1"}
{"sample_id": 7603, "db_id": "image_and_language", "final": {"question": "What is the most common object class of image ID 56?", "sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 56 GROUP BY T2.OBJ_CLASS ORDER BY COUNT(T2.OBJ_CLASS_ID) DESC LIMIT 1", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "the most common object class of image ID 56 refers to MAX(COUNT(OBJ_CLASS_ID)) where IMG_ID = 56;"}
{"sample_id": 7527, "db_id": "image_and_language", "final": {"question": "Define the onion's bounding box on image no. 285930.", "sql": "SELECT T1.X, T1.Y, T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 285930 AND T2.OBJ_CLASS = 'onion'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "bounding box refers to (X, Y, W, H); onion refers to OBJ_CLASS = 'onion'; image no.285930 refers to IMG_ID = 285930"}
{"sample_id": 7545, "db_id": "image_and_language", "final": {"question": "What is the caption for the prediction class id 12?", "sql": "SELECT PRED_CLASS FROM PRED_CLASSES WHERE PRED_CLASS_ID = 12", "source_tables": ["pred_classes"]}, "evidence": "caption for the prediction class id 12 refers to PRED_CLASS where PRED_CLASS_ID = 12;"}
{"sample_id": 7509, "db_id": "image_and_language", "final": {"question": "How many objects are there in the attribute class id with the highest number of objects?", "sql": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_att GROUP BY IMG_ID ORDER BY COUNT(ATT_CLASS_ID) DESC LIMIT 1", "source_tables": ["img_obj_att"]}, "evidence": "objects refers to OBJ_SAMPLE_ID; attribute class id with the highest number of objects refers to max(COUNT(ATT_CLASS_ID))"}
{"sample_id": 7566, "db_id": "image_and_language", "final": {"question": "Calculate the average of object samples for the image.", "sql": "SELECT CAST(COUNT(OBJ_SAMPLE_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ", "source_tables": ["img_obj"]}, "evidence": "DIVIDE(COUNT(OBJ_SAMPLE_ID), COUNT(IMG_ID));"}
{"sample_id": 7491, "db_id": "image_and_language", "final": {"question": "State the total number of the attribute classes.", "sql": "SELECT COUNT(ATT_CLASS_ID) FROM ATT_CLASSES", "source_tables": ["att_classes"]}, "evidence": "attribute classes refers to ATT_CLASS"}
{"sample_id": 7573, "db_id": "image_and_language", "final": {"question": "State the name of the object class that has in most images.", "sql": "SELECT OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID GROUP BY T2.OBJ_CLASS ORDER BY COUNT(T1.OBJ_CLASS_ID) DESC LIMIT 1", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "object class that has in most images refers to OBJ_CLASS where MAX(COUNT(OBJ_CLASS_ID));"}
{"sample_id": 7476, "db_id": "image_and_language", "final": {"question": "Please list the IDs of the object samples in class no. 297 in image no.1.", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 1 AND OBJ_CLASS_ID = 297", "source_tables": ["img_obj"]}, "evidence": "IDs of the object samples refers to OBJ_SAMPLE_ID; class no. 297 in image no.1 refers to IMG_ID = 1 and OBJ_CLASS_ID = 297"}
{"sample_id": 7561, "db_id": "image_and_language", "final": {"question": "Which images have more than 20 object samples?", "sql": "SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(IMG_ID) > 20", "source_tables": ["img_obj"]}, "evidence": "images have more than 20 object samples refer to IMG_ID where COUNT(OBJ_SAMPLE_ID) > 20;"}
{"sample_id": 7512, "db_id": "image_and_language", "final": {"question": "What is the unique id number identifying the onion object class?", "sql": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion'", "source_tables": ["obj_classes"]}, "evidence": "unique id number identifying refers to OBJ_CLASS_ID; onion object class refers to OBJ_CLASS = 'onion'"}
{"sample_id": 7485, "db_id": "image_and_language", "final": {"question": "How many images have at least one pair of object samples with the relation \"parked on\"?", "sql": "SELECT SUM(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE 0 END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "How many images have at least one pair of object samples with the relation \"parked on\" refers to count(IMG_ID) where OBJ1_SAMPLE_ID ! = OBJ2_SAMPLE_ID and PRED_CLASS = 'parked on'"}
{"sample_id": 7550, "db_id": "image_and_language", "final": {"question": "How many samples of clouds are there in the image no.2315533?", "sql": "SELECT SUM(CASE WHEN T1.IMG_ID = 2315533 THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'clouds'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "samples of clouds refer to IMG_ID where OBJ_CLASS = 'cloud'; image no.2315533 refers to IMG_ID = 2315533;"}
{"sample_id": 7549, "db_id": "image_and_language", "final": {"question": "Count the image numbers that contain the \"paint\" object.", "sql": "SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'paint'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "image numbers that contain the \"paint\" object refer to IMG_ID where OBJ_CLASS = 'paint';"}
{"sample_id": 7609, "db_id": "image_and_language", "final": {"question": "Give the X and Y coordinates of the sample object of image ID 23 that has the 'cast' attribute class.", "sql": "SELECT T3.OBJ_SAMPLE_ID, T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.IMG_ID = 23 AND T1.ATT_CLASS = 'cast'", "source_tables": ["img_obj", "att_classes", "img_obj_att"]}, "evidence": "X and Y refer to coordinates of the bounding box; image ID 23 refers to IMG_ID = 23; 'cast' attribute class refers to ATT_CLASS = 'cast';"}
{"sample_id": 7562, "db_id": "image_and_language", "final": {"question": "Which object in image 8 is the widest? State its object sample ID.", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 8 ORDER BY W DESC LIMIT 1", "source_tables": ["img_obj"]}, "evidence": "widest relates to the width of the bounding\nbox of the object which refers to MAX(W); object in image 8 refers to OBJ_SAMPLE_ID where IMG_ID = 8;"}
{"sample_id": 7530, "db_id": "image_and_language", "final": {"question": "What attributes are used to describe the wall on image no. 27.", "sql": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'wall' AND T1.IMG_ID = 27 GROUP BY T4.ATT_CLASS", "source_tables": ["img_obj", "obj_classes", "img_obj_att", "att_classes"]}, "evidence": "What attributes refers to ATT_CLASS; wall on image no. 27 refers to OBJ_CLASS = 'wall' and IMG_ID = 27"}
{"sample_id": 7483, "db_id": "image_and_language", "final": {"question": "How many pairs of object samples in image no.1 have the relation of \"parked on\"?", "sql": "SELECT SUM(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE 0 END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "pairs of object samples refers to OBJ1_SAMPLE_ID and OBJ2_SAMPLE_ID; image no.1 refers to IMG_ID = 1; relation of \"parked on\" refers to PRED_CLASS = 'parked on'"}
{"sample_id": 7521, "db_id": "image_and_language", "final": {"question": "What are the captions of all the self-relation relationship prediction classes?", "sql": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN pred_classes AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID GROUP BY T2.PRED_CLASS", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "self-relation relationship refers to OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID and PRED_CLASS; captions of prediction classes refers to PRED_CLASS"}
{"sample_id": 7581, "db_id": "image_and_language", "final": {"question": "List the ID of all images with objects that have multiple relations.", "sql": "SELECT IMG_ID FROM IMG_REL GROUP BY PRED_CLASS_ID HAVING COUNT(DISTINCT OBJ1_SAMPLE_ID) != 0 AND COUNT(DISTINCT OBJ2_SAMPLE_ID) != 0", "source_tables": ["img_rel"]}, "evidence": "ID of all images refer to IMG_ID; if two objects (OBJ1_SAMPLE_ID,\nOBJ2_SAMPLE_ID) has\nmultiple PRED_CLASS_ID, it\nmeans these two objects\nhave multiple relations;"}
{"sample_id": 7585, "db_id": "image_and_language", "final": {"question": "How many images have \"keyboard\" as their object class?", "sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "images refer to IMG_ID; \"keyboard\" as object class refers to OBJ_CLASS = 'keyboard';"}
{"sample_id": 7525, "db_id": "image_and_language", "final": {"question": "Provide the dimensions of the bounding box that contains the keyboard that was spotted in image no. 3.", "sql": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 3 AND T2.OBJ_CLASS = 'keyboard'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "dimensions of the bounding box refers to (W, H); keyboard refers to OBJ_CLASS = 'keyboard'; image no. 3 refers to IMG_ID = 3"}
{"sample_id": 7596, "db_id": "image_and_language", "final": {"question": "List the object sample IDs of image ID 17 with coordinates (0,0).", "sql": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 17 AND X = 0 AND Y = 0", "source_tables": ["img_obj"]}, "evidence": "object sample ID refers to OBJ_SAMPLE_ID; image ID 17 refers to IMG_ID = 17; coordinates (0,0) refer to X and Y coordinates of the bounding box where X = 0 and Y = 0;"}
{"sample_id": 7502, "db_id": "image_and_language", "final": {"question": "Tell the attribute of the weeds in image no.2377988.", "sql": "SELECT T2.ATT_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T4.OBJ_CLASS = 'weeds' AND T1.IMG_ID = 2377988", "source_tables": ["att_classes", "obj_classes", "img_obj_att", "img_obj"]}, "evidence": "attribute of the weeds refers to OBJ_CLASS = 'weeds'; image no.2377988 refers to IMG_ID = 2377988"}
{"sample_id": 7611, "db_id": "image_and_language", "final": {"question": "What is the average width and height of the objects in image ID 47? List their object classes as well.", "sql": "SELECT T2.OBJ_CLASS, AVG(T1.W), AVG(T1.H) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 47 GROUP BY T2.OBJ_CLASS", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "The bounding box's W and H abbreviations stand for the object's width and height in which average width and height refer to AVG(W) and AVG(H) respectively; image ID 47 refers to IMG_ID = 47; object classes refer to OBJ_CLASS;"}
{"sample_id": 7551, "db_id": "image_and_language", "final": {"question": "Which object classes belong to the onion category?", "sql": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion'", "source_tables": ["obj_classes"]}, "evidence": "onion category refers to OBJ_CLASS = 'onion';"}
{"sample_id": 7589, "db_id": "image_and_language", "final": {"question": "List all the attribute classes of the image ID \"15\".", "sql": "SELECT T1.ATT_CLASS FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 15", "source_tables": ["att_classes", "img_obj_att"]}, "evidence": "attribute classes of the image ID \"15\" refer to ATT_CLASS where IMG_ID = 15;"}
{"sample_id": 7507, "db_id": "image_and_language", "final": {"question": "How many images have at least 25 attributes?", "sql": "SELECT COUNT(*) FROM ( SELECT IMG_ID FROM IMG_OBJ_att GROUP BY IMG_ID HAVING COUNT(ATT_CLASS_ID) > 25 ) T1", "source_tables": ["img_obj_att"]}, "evidence": "images refers to IMG_ID; have at least 25 attributes refers to count(ATT_CLASS_ID) > = 25"}
{"sample_id": 7553, "db_id": "image_and_language", "final": {"question": "What is the percentage of \"surface\" object samples in image No.2654?", "sql": "SELECT CAST(SUM(CASE WHEN T2.OBJ_CLASS = 'surface' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OBJ_CLASS_ID) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 2654", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "DIVIDE(SUM(OBJ_CLASS_ID where OBJ_CLASS = 'surface'), COUNT(OBJ_CLASS_ID)) as percentage where IMG_ID = 2654;"}
{"sample_id": 7519, "db_id": "image_and_language", "final": {"question": "How many prediction classes with \"has\" captions are there for image id 3050?", "sql": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 3050 AND T2.PRED_CLASS = 'has'", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "prediction classes with \"has\" captions refers to PRED_CLASS = 'has'; image id 3050 refers to IMG_ID = 3050"}
{"sample_id": 7575, "db_id": "image_and_language", "final": {"question": "State the coordinate of X and Y for the object with the attribute of 'sparse' in image 1.", "sql": "SELECT T3.OBJ_SAMPLE_ID, T3.X, T3.Y FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T3.IMG_ID = 1 AND T1.ATT_CLASS = 'sparse'", "source_tables": ["img_obj", "att_classes", "img_obj_att"]}, "evidence": "coordinates of X and Y for the object refer to X and Y coordinates of the bounding box; attribute of 'sparse' in image 1 refers to IMG_ID = 1 where ATT_CLASS = 'sparse';"}
{"sample_id": 7474, "db_id": "image_and_language", "final": {"question": "How many images have over 20 object samples?", "sql": "SELECT COUNT(T1.IMG_ID) FROM ( SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(OBJ_SAMPLE_ID) > 20 ) T1", "source_tables": ["img_obj"]}, "evidence": "over 20 object samples refers to COUNT(OBJ_SAMPLE_ID) > 20"}
{"sample_id": 7577, "db_id": "image_and_language", "final": {"question": "Based on image 5, what is the percentage of images that belong windows object class?", "sql": "SELECT CAST(COUNT(T1.OBJ_SAMPLE_ID) AS REAL) * 100 / COUNT(CASE WHEN T1.IMG_ID = 5 THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'windows'", "source_tables": ["img_obj", "obj_classes"]}, "evidence": "DIVIDE(COUNT(OBJ_SAMPLE_ID where OBJ_CLASS = 'windows' and IMG_ID = 5), COUNT(OBJ_SAMPLE_ID where IMG_ID = 5)) as percentage;"}
{"sample_id": 7543, "db_id": "image_and_language", "final": {"question": "State the explanation about object class 10.", "sql": "SELECT OBJ_CLASS FROM OBJ_CLASSES WHERE OBJ_CLASS_ID = 10", "source_tables": ["obj_classes"]}, "evidence": "explanation about object class 10 refers to OBJ_CLASS where OBJ_CLASS_ID = 10;"}
{"sample_id": 7536, "db_id": "image_and_language", "final": {"question": "What is the relationship between object sample no. 25 and object sample no. 2 on image no. 1?", "sql": "SELECT T2.PRED_CLASS FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 1 AND T1.OBJ1_SAMPLE_ID = 25 AND T1.OBJ2_SAMPLE_ID = 2", "source_tables": ["pred_classes", "img_rel"]}, "evidence": "relationship refers to PRED_CLASS; object sample no. 25 and object sample no. 2 refers to OBJ1_SAMPLE_ID = 25 and OBJ2_SAMPLE_ID = 2; image no. 1 refers to IMG_ID = 1"}
{"sample_id": 7640, "db_id": "hockey", "final": {"question": "Which coach has the best performance for team DET in history? What was the winning percentage? Name the coach and the year he coached.", "sql": "SELECT CAST(T2.W AS REAL) / T2.G, T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID INNER JOIN ( SELECT coachID FROM Coaches ORDER BY CAST(w AS REAL) / g DESC LIMIT 1 ) AS T3 ON T2.coachID = T3.coachID", "source_tables": ["coaches", "master"]}, "evidence": "winning percentage refers to DIVIDE(w,g)*100; team DET refers to tmID = 'DET'"}
{"sample_id": 7749, "db_id": "hockey", "final": {"question": "Between 1917 to 1920, what are the names of the team who ranked first in the first half of the season each year?", "sql": "SELECT DISTINCT T2.name FROM TeamsHalf AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.half = 1 AND T1.rank = 1 AND T1.year BETWEEN 1917 AND 1920", "source_tables": ["teams", "teamshalf"]}, "evidence": "year BETWEEN 1917 AND 1920; first half of season refers to half = 1"}
{"sample_id": 7614, "db_id": "hockey", "final": {"question": "Who are the players who were not in the Hall of Fame list.", "sql": "SELECT firstName, lastName FROM Master WHERE hofID IS NULL", "source_tables": ["master"]}, "evidence": "not in the Hall of Fame refers to hofID IS NULL"}
{"sample_id": 7718, "db_id": "hockey", "final": {"question": "For the goalies whose weight are above 190, who had most goal againsts in 1978 season?", "sql": "SELECT T1.playerID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = '1978' AND T2.weight > 190 ORDER BY T1.GA DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "Weight of above 190 refers to weight >190; 1978 season refers to the year played"}
{"sample_id": 7663, "db_id": "hockey", "final": {"question": "Among the coaches who have received an award after the year 1940, how many of them have already died?", "sql": "SELECT COUNT(T1.coachID) FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.year > 1940", "source_tables": ["master", "awardscoaches"]}, "evidence": "after the year 1940 refers to year>1940; have already died refers to deathYear IS NOT NULL"}
{"sample_id": 7758, "db_id": "hockey", "final": {"question": "What is the name of the team that got more wins than loses in the Stanley Cup finals in 1917?", "sql": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1917' AND T1.W > T1.L", "source_tables": ["teamssc", "teams"]}, "evidence": "more wins than loses refers to W>L; year = 1917;"}
{"sample_id": 7635, "db_id": "hockey", "final": {"question": "List all the deceased goalies and the teams he had played whose birth country was in Canada.", "sql": "SELECT DISTINCT firstName, lastName, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T2.birthCountry = 'Canada' AND T2.deathYear IS NOT NULL AND T2.pos = 'G'", "source_tables": ["goalies", "master", "teams"]}, "evidence": "goalies refers to pos = 'G'; deceased goalies refers to deathYear IS NOT NULL\n"}
{"sample_id": 7677, "db_id": "hockey", "final": {"question": "Which country is the most award-winning player from?", "sql": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthCountry ORDER BY COUNT(T2.award) DESC LIMIT 1", "source_tables": ["awardsplayers", "master"]}, "evidence": "most award-winning refers to max(count(award)); country player is from refers to birthCountry"}
{"sample_id": 7781, "db_id": "hockey", "final": {"question": "How many penalty minutes did the Montreal Canadiens have on average in the Stanley Cup Finals?", "sql": "SELECT CAST(SUM(T2.PIM) AS REAL) / COUNT(T2.PIM) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'", "source_tables": ["teamssc", "teams"]}, "evidence": "AVG(PIM) = DIVIDE(SUM(PIM), COUNT(G)); Montreal Canadiens is name of team;"}
{"sample_id": 7788, "db_id": "hockey", "final": {"question": "What is the number of players whose last name is Green that played in the league but not coached?", "sql": "SELECT COUNT(playerID) FROM Master WHERE lastName = 'Green' AND coachID IS NULL", "source_tables": ["master"]}, "evidence": "played in the league but not coached means playerID is not NULL and coachID is NULL;"}
{"sample_id": 7775, "db_id": "hockey", "final": {"question": "Please list the names of all the teams that have played against the Buffalo Sabres.", "sql": "SELECT DISTINCT T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.oppID = T2.tmID INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.tmID = T3.tmID WHERE T2.name = 'Buffalo Sabres'", "source_tables": ["teamvsteam", "teams"]}, "evidence": "teams that have played against refer to oppID; Buffalo Sabres is the name of team;"}
{"sample_id": 7747, "db_id": "hockey", "final": {"question": "Among the players whose short handed assists are greater or equal to 7, what is the final standing of the team with the most number of assists? Indicate the year to which the most number of assists was achieved and the name of the team.", "sql": "SELECT T2.rank, T2.year, T2.name FROM Scoring AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.SHA >= 7 ORDER BY T1.A DESC LIMIT 1", "source_tables": ["teams", "scoring"]}, "evidence": "short handed assists refers to SHA; SHA> = 7; final standing refers to rank; the final standing of the team with the most number of assists refers to max(A)\n"}
{"sample_id": 7811, "db_id": "hockey", "final": {"question": "What is the total number of game played for players from USA?", "sql": "SELECT COUNT(T2.GP) FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA'", "source_tables": ["master", "scoring"]}, "evidence": "game played refers to GP; from USA refers to birthCountry = 'USA';"}
{"sample_id": 7724, "db_id": "hockey", "final": {"question": "What is the power play percentage of the team with the most number of loses?", "sql": "SELECT CAST(SUM(PPG) AS REAL) * 100 / SUM(PPC) FROM Teams GROUP BY tmID ORDER BY SUM(L) DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "Power play percentage refers to PPG, most number of loses refers to MAX(L)\n\n"}
{"sample_id": 7705, "db_id": "hockey", "final": {"question": "Which league did player id\"adamsja01\" play in 1920?", "sql": "SELECT lgID FROM ScoringSC WHERE playerID = 'adamsja01' AND year = 1920", "source_tables": ["scoringsc"]}, "evidence": "which league refers to lgID"}
{"sample_id": 7729, "db_id": "hockey", "final": {"question": "What is the position of the 9th oldest hockey player?", "sql": "SELECT pos FROM Master WHERE birthYear IS NOT NULL ORDER BY birthYear, birthMon, birthDay LIMIT 8", "source_tables": ["master"]}, "evidence": "position refers to pos; date of birth refers to birthDay + birthMon + birthYear"}
{"sample_id": 7740, "db_id": "hockey", "final": {"question": "Between 2003 to 2005, what are the given names of the players with the most number of games played whose Penalty minutes is between 200 to 250?", "sql": "SELECT T2.nameGiven FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID AND T1.PIM BETWEEN 200 AND 250 AND T1.year BETWEEN 2003 AND 2005 ORDER BY T1.GP DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "penalty minutes refers to PIM; year of scoring BETWEEN 2003 AND 2005; most number of games played refers to max(GP)"}
{"sample_id": 7813, "db_id": "hockey", "final": {"question": "In 1976, how many goals achieved by team 'BIR' in Division 'EW'?", "sql": "SELECT SUM(T2.G) FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.divID = 'EW' AND T1.tmID = 'BIR' AND T1.year = 1976", "source_tables": ["teams", "scoring"]}, "evidence": "year = 1976; BIR refers to tmID; Division 'EW' refers to divID = 'EW'; goals = G;"}
{"sample_id": 7617, "db_id": "hockey", "final": {"question": "Name the goalies who played for more than two teams from Year 2000 to 2005.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year >= 2000 AND T2.year <= 2005 GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.tmID) > 2", "source_tables": ["goalies", "master"]}, "evidence": "goalie who played for more than 2 teams refers to COUNT(DISTINCT(T2.tmID))>2"}
{"sample_id": 7772, "db_id": "hockey", "final": {"question": "Please list the nick names of the coaches who are from the USA and have taught the Buffalo Sabres.", "sql": "SELECT DISTINCT nameNick FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Buffalo Sabres' AND T3.birthCountry = 'USA'", "source_tables": ["coaches", "master", "teams"]}, "evidence": "from the USA refers to birthCountry = 'USA'; nick names of the coaches refer to nameNick where coachID is not NULL ; Buffalo Sabres is the name of team;"}
{"sample_id": 7703, "db_id": "hockey", "final": {"question": "What was the number of goals did player Id \"dyeba01\" make in the 1921 Stanley Cup finals?", "sql": "SELECT G FROM ScoringSC WHERE playerID = 'dyeba01' AND year = 1921", "source_tables": ["scoringsc"]}, "evidence": "the number of goals refers to G"}
{"sample_id": 7806, "db_id": "hockey", "final": {"question": "List down the first name of coaches who still coach after year 2000.", "sql": "SELECT DISTINCT T1.firstName FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year > 2000", "source_tables": ["coaches", "master"]}, "evidence": "after year 2000 refers to year>2000;"}
{"sample_id": 7753, "db_id": "hockey", "final": {"question": "What is the highest total points a team got in a year?", "sql": "SELECT SUM(Pts), year FROM Teams GROUP BY year, tmID ORDER BY SUM(Pts) DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "the highest total points = MAX(Pts)"}
{"sample_id": 7750, "db_id": "hockey", "final": {"question": "How many Canadian players, between the ages of 18 and 24 when they initially played their first NHL, had a cumulative goal total of no more than 5? Indicate their complete names, the year, and the team for which they scored the specified amount of goals.", "sql": "SELECT T2.nameGiven, T2.lastName, T2.birthYear, birthMon, birthDay , T3.tmID FROM Scoring AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T3.tmID = T1.tmID WHERE (T2.firstNHL - T2.birthYear) BETWEEN 18 AND 24 AND T3.G < 5", "source_tables": ["teams", "master", "scoring"]}, "evidence": "Canadian players mean player whose birthCountry = Canada; ages of 18 and 24 refers to SUBTRACT(firstNHL, birthYear) BETWEEN 18 AND 24; cumulative goal total of no more than 5 refers to G < 5; complete name = nameGiven + lastName"}
{"sample_id": 7697, "db_id": "hockey", "final": {"question": "Which teams had the most postseason empty net goals in 2010 season? List their team names.", "sql": "SELECT T2.name FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T1.year = 2010 GROUP BY T2.name ORDER BY SUM(PostENG) DESC LIMIT 1", "source_tables": ["goalies", "teams"]}, "evidence": "most postseason empty net goals refers to max(PostENG)"}
{"sample_id": 7739, "db_id": "hockey", "final": {"question": "How long has the NHL player been playing during the year when he recorded the least number of times being on the ice when a goal is scored for the team versus against the team? Indicate his full name.", "sql": "SELECT DISTINCT T3.firstNHL - T1.year, T3.nameGiven , T3.firstName, T3.lastName FROM Scoring AS T1 INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID INNER JOIN Master AS T3 ON T1.playerID = T3.playerID GROUP BY T3.firstName, T3.lastName, T3.nameGiven, T3.firstNHL - T1.year, T3.firstName, T3.lastName ORDER BY SUM(T1.\"+/-\") ASC LIMIT 1", "source_tables": ["master", "teams", "scoring"]}, "evidence": "NHL refers to lgID = 'NHL'; least number of times being on the ice when a goal is scored for the team versus against the team refers to min(+/-); duration the player's been playing = subtract(year(playerID(min(+/-))), firstNHL(playerID(min(+/-)))); full name = nameGiven + lastName"}
{"sample_id": 7726, "db_id": "hockey", "final": {"question": "Which country produced the most number of hockey players? Identify which year was most of the hockey players are born.", "sql": "SELECT DISTINCT birthCountry, birthYear FROM Master GROUP BY birthCountry, birthYear ORDER BY COUNT(birthCountry) DESC LIMIT 1", "source_tables": ["master"]}, "evidence": "Year most hockey players were born refers to MAX(birthYear); birthCountry refers to the country where a player was born\n"}
{"sample_id": 7665, "db_id": "hockey", "final": {"question": "Among the coaches who have gotten in the Hall of Fame, how many of them have a weight of over 195?", "sql": "SELECT COUNT(DISTINCT T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.weight > 195", "source_tables": ["hof", "master"]}, "evidence": "weight of over 195 refers to weight>195"}
{"sample_id": 7658, "db_id": "hockey", "final": {"question": "Please list the awards the coaches who are born in Canada have won.", "sql": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.birthCountry = 'Canada'", "source_tables": ["master", "awardscoaches"]}, "evidence": "born in Canada refers to birthCountry = 'Canada'"}
{"sample_id": 7783, "db_id": "hockey", "final": {"question": "What is the percentage of American coaches among all the coaches who taught the Montreal Canadiens?", "sql": "SELECT SUM(CAST(T2.W AS REAL) / T2.G) / SUM(T2.G + T2.W) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'", "source_tables": ["teamssc", "teams"]}, "evidence": "American refers to birthCountry = 'USA'; DIVIDE(COUNT(coachID where birthCountry = 'USA', name` = 'Montreal Canadiens'), COUNT(coachID where name` = 'Montreal Canadiens')) as percentage;"}
{"sample_id": 7807, "db_id": "hockey", "final": {"question": "What is the height and weight for coaches who have won awards in 1930?", "sql": "SELECT T1.height, T1.weight FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = '1930'", "source_tables": ["master", "awardscoaches"]}, "evidence": "year = 1930;"}
{"sample_id": 7735, "db_id": "hockey", "final": {"question": "What is the total amount of assists of the NHL player with the most assists in history? Please indicate his/her full name.", "sql": "SELECT SUM(T1.A), T2.firstName, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NHL' GROUP BY T2.firstName, T2.lastName ORDER BY SUM(T1.A) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "NHL refers to lgID = 'NHL'; most assists refers to max(A); full name = nameGiven + lastName; total amount of assists = sum(A(playerID(max(A))))"}
{"sample_id": 7619, "db_id": "hockey", "final": {"question": "Name the goalies who have played more than total of 5000 minutes in the all the season played. State given name of the player and from which country was he born.", "sql": "SELECT DISTINCT T1.nameGiven, T1.birthCountry FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T1.nameGiven, T1.birthCountry HAVING SUM(T2.Min) > 5000", "source_tables": ["goalies", "master"]}, "evidence": "played more than total of 5000 minutes refers to SUM(Min)>5000;country he was born refers to birthCountry\n"}
{"sample_id": 7692, "db_id": "hockey", "final": {"question": "Which player who showed as the third goalie in a game has the biggest weight? Give the full name of the player.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.stint = 3 ORDER BY T1.weight DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "the third goalie refers to stint = 3; the biggest weight refers to max(weight)"}
{"sample_id": 7761, "db_id": "hockey", "final": {"question": "What were the penalty minutes in 1923's Stanley Cup finals of the team that ranked second in that year?", "sql": "SELECT T1.PIM FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1923' AND T2.rank = 2", "source_tables": ["teamssc", "teams"]}, "evidence": "teams refer to tmID; year = 1922; ranked second refers to rank = 2; penalty minutes refer to PIM;"}
{"sample_id": 7671, "db_id": "hockey", "final": {"question": "Among the players who died in Massachussets, how many of them have won an award?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathState = 'MA'", "source_tables": ["awardsplayers", "master"]}, "evidence": "died in Massachussets refers to deathState = 'Massachussets'"}
{"sample_id": 7652, "db_id": "hockey", "final": {"question": "How many teams have the same total number of postseason wins and postseason loses?", "sql": "SELECT DISTINCT COUNT(tmID) FROM Goalies WHERE PostW = PostL", "source_tables": ["goalies"]}, "evidence": "same total number of postseason wins and postseason loses refers to PostW = PostL"}
{"sample_id": 7725, "db_id": "hockey", "final": {"question": "How many players were included in the Hall of Fame on average between 1950 and 1980?", "sql": "SELECT CAST(COUNT(name) AS REAL) / 30 FROM HOF WHERE year BETWEEN 1950 AND 1980 AND category = 'Player'", "source_tables": ["hof"]}, "evidence": "year BETWEEN 1950 and 1980; average = DIVIDE(COUNT(hofID)), 30)\n\n"}
{"sample_id": 7802, "db_id": "hockey", "final": {"question": "State the player ID of player with average height of 75.", "sql": "SELECT DISTINCT playerID FROM Master GROUP BY playerID HAVING AVG(height) = 75", "source_tables": ["master"]}, "evidence": "average height of 75 refers to AVG(height) = 75;"}
{"sample_id": 7643, "db_id": "hockey", "final": {"question": "For all the goalies born in year 1987, who are good in both right hand and left hand? Calculate his percentage of winning for every season he played.", "sql": "SELECT T1.firstName, T1.lastName, T2.year, CAST(T2.W AS REAL) / T2.GP FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.birthYear = 1987 AND T1.shootCatch IS NULL", "source_tables": ["goalies", "master"]}, "evidence": "good in both right hand and left hand refers shootCatch IS NULL; winning refers to W; every season he played refers to GP; percentage of winning for every season he played refers to DIVIDE(W,GP)*100"}
{"sample_id": 7759, "db_id": "hockey", "final": {"question": "Please list the teams that have played in 1922's Stanley Cup finals.", "sql": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1922'", "source_tables": ["teamssc", "teams"]}, "evidence": "teams refer to tmID; year = 1922;"}
{"sample_id": 7805, "db_id": "hockey", "final": {"question": "List down player ID of players who have passed away.", "sql": "SELECT DISTINCT playerID FROM Master WHERE deathYear IS NOT NULL AND playerID IS NOT NULL", "source_tables": ["master"]}, "evidence": "passed away means deathYear is not NULL;"}
{"sample_id": 7784, "db_id": "hockey", "final": {"question": "Who was the latest non player/builder to become the hall of famer? Give the full name.", "sql": "SELECT name FROM HOF WHERE category IN ('Player', 'Builder') ORDER BY year DESC LIMIT 1", "source_tables": ["hof"]}, "evidence": "latest refers to MAX(year); non player/builder refers to category = NOT IN ('player', 'builder');"}
{"sample_id": 7645, "db_id": "hockey", "final": {"question": "List all living goalies who have greater than 50% wins among all games played. State their last name and first name.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.deathYear IS NOT NULL GROUP BY T1.playerID HAVING CAST(SUM(T2.Min) AS REAL) / SUM(T2.GP) > 0.5", "source_tables": ["goalies", "master"]}, "evidence": "wins refers to W; all games played refers to GP;greater than 50% wins among all games played refers to DIVIDE(SUM(W),GP)*100>50"}
{"sample_id": 7736, "db_id": "hockey", "final": {"question": "What is the power play percentage of the team with the least number of penalty kill chances and to which team were they playing against? Indicate whether the team lost or victorious.", "sql": "SELECT SUM(T1.A), T2.firstName, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.lgID = 'NHL' GROUP BY T2.firstName, T2.lastName ORDER BY SUM(T1.A) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "least number of penalty kill chances refers to min(PKC); power play percentage refers to (PP%) = divide(PPG, PPC); team playing refers to tmID; victorious team refers to tmIDWinner; team victorious refers to tmID = tmIDWinner and vice versa"}
{"sample_id": 7814, "db_id": "hockey", "final": {"question": "In 2010, how many loses made by team 'BOS' and how many assists were made by the players?", "sql": "SELECT SUM(T1.L), SUM(T2.A) FROM Teams AS T1 INNER JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.tmID = 'BOS' AND T1.year = 2010", "source_tables": ["teams", "scoring"]}, "evidence": "year = 2010; BOS refers to tmID; loses refer to L; assists refer to A;"}
{"sample_id": 7618, "db_id": "hockey", "final": {"question": "What is the average weight of players who have height greater than 72 inches.", "sql": "SELECT AVG(weight) FROM Master WHERE height > 72", "source_tables": ["master"]}, "evidence": "average weight refers to AVG(weight); height greater than 72 inches refers to height>72"}
{"sample_id": 7683, "db_id": "hockey", "final": {"question": "Which team did player Id \"roypa01\" play in 1992? Give the team id.", "sql": "SELECT tmID FROM Goalies WHERE playerID = 'roypa01' AND year = 1992", "source_tables": ["goalies"]}, "evidence": "team id refers to tmID"}
{"sample_id": 7766, "db_id": "hockey", "final": {"question": "How many coaches of the Montreal Canadiens have gotten in the Hall of Fame?", "sql": "SELECT COUNT(DISTINCT hofID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens'", "source_tables": ["coaches", "master", "teams"]}, "evidence": "have gotten in the Hall of Fame means hofID is not NULL;\n\nMontreal Canadiens is the name of team."}
{"sample_id": 7681, "db_id": "hockey", "final": {"question": "What is the percentage of American players among all the players who have gotten in the Hall of Fame?", "sql": "SELECT CAST(COUNT(CASE WHEN T1.birthCountry = 'USA' THEN T1.playerID ELSE NULL END) AS REAL) * 100 / COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID", "source_tables": ["hof", "master"]}, "evidence": "percentage of American players = divide(count(hofID where birthCountry = 'USA'), count(hofID))*100%"}
{"sample_id": 7631, "db_id": "hockey", "final": {"question": "List the living players who have two positions. State their given name the position they play.", "sql": "SELECT firstName, lastName, pos FROM Master WHERE deathYear IS NULL AND pos LIKE '%/%'", "source_tables": ["master"]}, "evidence": "living players refers to deathYear IS NULL; positions refers to pos"}
{"sample_id": 7738, "db_id": "hockey", "final": {"question": "What is the name of the losing team during an exhibition game in 1912?", "sql": "SELECT T2.name FROM SeriesPost AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND tmIDLoser = tmID WHERE T1.note = 'EX' AND T2.year = '1912'", "source_tables": ["teams", "seriespost"]}, "evidence": "exhibition game refers to note = 'EX'; team of losing team refers to tmIDLoser"}
{"sample_id": 7816, "db_id": "hockey", "final": {"question": "Who is the shortest player and state the team ID of that player from 1925 to 1936.", "sql": "SELECT T2.playerID, T2.tmID FROM ( SELECT playerID FROM Master WHERE height IS NOT NULL ORDER BY height ASC LIMIT 1 ) AS T1 INNER JOIN ( SELECT DISTINCT playerID, tmID FROM Scoring WHERE year BETWEEN 1925 AND 1936 ) AS T2 ON T1.playerID = T2.playerID", "source_tables": ["master", "scoring"]}, "evidence": "Shortest refers to MIN(height); from 1925 to 1936 refers to year between 1925 and 1936;"}
{"sample_id": 7625, "db_id": "hockey", "final": {"question": "List all goalies who played in the year 2005 season and shorter than 72 inches. List all the team names he play for.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T2.year = 2005 AND T1.height < 72", "source_tables": ["goalies", "master", "teams"]}, "evidence": "shorter than 72 inches refers to height<72"}
{"sample_id": 7629, "db_id": "hockey", "final": {"question": "Name the deceased players whose death country is different from his birth country order by birth year.", "sql": "SELECT firstName, lastName FROM Master WHERE birthCountry != deathCountry ORDER BY birthYear", "source_tables": ["master"]}, "evidence": "death country is different from his birth country refers to birthCountry! = deathCountry"}
{"sample_id": 7656, "db_id": "hockey", "final": {"question": "Please list the Nicknames of the players who got in the Hall of Fame in 2007.", "sql": "SELECT DISTINCT T1.nameNick FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T2.year = 2007", "source_tables": ["hof", "master"]}, "evidence": "nicknames refers to nameNick"}
{"sample_id": 7690, "db_id": "hockey", "final": {"question": "Which position did Mike Antonovich play?", "sql": "SELECT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Mike' AND T1.lastName = 'Antonovich'", "source_tables": ["awardsplayers", "master"]}, "evidence": "pos = 'LW' refers to left winger; pos = 'RW' refers to right winger; pos = 'C' refers to center; pos = 'G' refers to goalie; pos = 'D' refers to defenceman; pos = 'W' refers to winger; pos = 'F' refers to forward"}
{"sample_id": 7630, "db_id": "hockey", "final": {"question": "Who are the players played both in NHL and WHA. List the given name and first year they were in NHL and first year in WHA.", "sql": "SELECT nameGiven, firstNHL, firstWHA FROM Master WHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL", "source_tables": ["master"]}, "evidence": "first year they were in NHL refers to firstNHL; first year in WHA refers to firstWHA; play in both refers to firstNHL IS NOT NULL AND firstWHA IS NOT NULL\n"}
{"sample_id": 7624, "db_id": "hockey", "final": {"question": "State the goalie who has the lowest percentage of goals against among all the shots against recorded. Name the players and season where he played.", "sql": "SELECT T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE CAST(T2.GA AS REAL) / T2.SA IS NOT NULL ORDER BY CAST(T2.GA AS REAL) / T2.SA LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "goals against refers to GA; shots against refers to SA; lowest percentage of goals against among all the shots against refers to MIN(DIVIDE(GA,SA)*100)"}
{"sample_id": 7815, "db_id": "hockey", "final": {"question": "What are the total weights of players for team 'ANA' as per year 1997?", "sql": "SELECT SUM(T1.weight) FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1997 AND T2.tmID = 'ANA'", "source_tables": ["master", "scoring"]}, "evidence": "ANA refers to tmID;"}
{"sample_id": 7661, "db_id": "hockey", "final": {"question": "Please list the awards won by coaches who were born in 1952.", "sql": "SELECT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.birthYear = 1952", "source_tables": ["master", "awardscoaches"]}, "evidence": "born in 1977 refers to birthYear = '1977'"}
{"sample_id": 7731, "db_id": "hockey", "final": {"question": "In 2006, what is the overall number of october defeats for the team with the most October defeats? Indicate the team ID.", "sql": "SELECT OctL, tmID FROM TeamSplits WHERE year = '2006' ORDER BY OctL DESC LIMIT 1", "source_tables": ["teamsplits"]}, "evidence": "team ID refers to tmID; 'defeats' and 'loses' are synonyms; most October defeats refers to max(OctL)"}
{"sample_id": 7695, "db_id": "hockey", "final": {"question": "Who is the youngest goalie among those who had more than 150 goal againsts in 2002 season?", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2002 AND T2.GA > 150 GROUP BY T2.playerID, T1.birthYear, T1.birthMon, T1.birthMon HAVING SUM(T2.GA) ORDER BY T1.birthYear DESC, T1.birthMon DESC, SUM(T1.birthDay) DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "youngest goalie refers to max(birthYear/birthMon/birthDay); more than 150 goal againsts refers to GA>150"}
{"sample_id": 7632, "db_id": "hockey", "final": {"question": "State the nick name of the tallest player? If the player had left NHL, mention the last season he was with NHL.", "sql": "SELECT nameNick, lastNHL FROM Master ORDER BY height DESC LIMIT 1", "source_tables": ["master"]}, "evidence": "nick name refers to nameNick; tallest player refers to MAX(height); had left NHL refers to lastNHL"}
{"sample_id": 7648, "db_id": "hockey", "final": {"question": "How many coaches worked a temporary term in the year 2007?", "sql": "SELECT COUNT(coachID) FROM Coaches WHERE year = 2007 AND notes = 'interim'", "source_tables": ["coaches"]}, "evidence": "worked a temporary term refers to notes = 'interim'"}
{"sample_id": 7627, "db_id": "hockey", "final": {"question": "Name the goalies with the most seasons played. State the average time he played for each season.", "sql": "SELECT T1.firstName, T1.lastName, T2.year, AVG(T2.Min) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = ( SELECT playerID FROM Goalies GROUP BY playerID ORDER BY COUNT(playerID) DESC LIMIT 1 ) GROUP BY T1.firstName, T1.lastName, T2.year", "source_tables": ["goalies", "master"]}, "evidence": "most seasons played refers to MAX(COUNT(playerID)); average time he played for each season refers to DIVIDE(SUM(T2.Min),COUNT(T2.playerID))"}
{"sample_id": 7742, "db_id": "hockey", "final": {"question": "Which position has won the most awards and who is the most recent player that was awarded with an award in that position? Indicate the name of the award and the full name of the player.", "sql": "SELECT T1.pos, T2.award, T1.nameGiven, T1.lastName FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T2.coachID = T1.coachID GROUP BY T1.pos, T2.award, T1.nameGiven, T1.lastName ORDER BY COUNT(T2.award) LIMIT 1", "source_tables": ["master", "awardscoaches"]}, "evidence": "position has won the most awards refers to pos(max(count(award))); most recent player refers to playerID(pos(max(count(award)))& max(year)); full name = nameGiven + lastName"}
{"sample_id": 7812, "db_id": "hockey", "final": {"question": "Calculate the total points scored by team ID ANA and list down the coashes of the team.", "sql": "SELECT SUM(T2.Pts), T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID WHERE T2.tmID = 'ANA' GROUP BY T1.coachID", "source_tables": ["coaches", "teams"]}, "evidence": "points scored refers to Pts; team ID refers to tmID;"}
{"sample_id": 7748, "db_id": "hockey", "final": {"question": "What is the name of the coach whose team placed 4th in the 1969 game? Indicate their coachID.", "sql": "SELECT T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1969 AND T2.rank = 4", "source_tables": ["coaches", "teams"]}, "evidence": "name of coach refers to coachID; placed 4th refers to rank = 4; 1969 game refers to year = 1969"}
{"sample_id": 7777, "db_id": "hockey", "final": {"question": "In the year that the Montreal Canadiens had 24 penalty minutes in the Stanley Cup finals, how many wins did the team had in total?", "sql": "SELECT T2.W FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T2.PIM = 24", "source_tables": ["teamssc", "teams"]}, "evidence": "penalty minutes refer to PIM = 24; wins refer to W;"}
{"sample_id": 7733, "db_id": "hockey", "final": {"question": "Which year recorded the most number of goals by a player and how old was the player at the time the most number of goals was achieved by him?", "sql": "SELECT T1.year, T1.year - T2.birthYear FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID GROUP BY T1.year, T1.year - T2.birthYear ORDER BY SUM(T1.G) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "most number of goals refers to max(G); how old refers to age = subtract(year(max(G)), birthYear)"}
{"sample_id": 7794, "db_id": "hockey", "final": {"question": "For the goalie whose legendsID is \"P196402\" , how many games did he play in the league?", "sql": "SELECT SUM(T1.GP) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.legendsID = 'P196402'", "source_tables": ["goalies", "master"]}, "evidence": ""}
{"sample_id": 7693, "db_id": "hockey", "final": {"question": "Among the players who had 10 empty net goals in their career, who is the tallest? Show his full name.", "sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T2.playerID, T1.height HAVING SUM(T2.ENG) > 10 ORDER BY T1.height DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "10 empty net goals refers to ENG = 10; the tallest refers to max(height)"}
{"sample_id": 7798, "db_id": "hockey", "final": {"question": "How many Haileybury Hockey Club goalies became a hall of famer?", "sql": "SELECT COUNT(DISTINCT T1.playerID) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T3.name = 'Haileybury Hockey Club' AND T2.hofID IS NOT NULL", "source_tables": ["goalies", "master", "teams"]}, "evidence": "hall of famers refers to hofID where playerID is not NULL;"}
{"sample_id": 7730, "db_id": "hockey", "final": {"question": "How many goals were scored while the goalkeeper was on the ice in the 1924 WCHL by the goalie with the most goals scored?", "sql": "SELECT SUM(PostGA) FROM Goalies WHERE lgID = 'WCHL' AND year = '1924' GROUP BY playerID ORDER BY SUM(PostGA) DESC LIMIT 1", "source_tables": ["goalies"]}, "evidence": "WCHL is the league's abbreviated name which refers to lgID = 'WCHL'; most goals scored referst to MAX(PostGA); GA is abbreviation for Post Against which means number of goals recorded while the goalie is on the ice. Include all goals against during regulation and overtime play."}
{"sample_id": 7700, "db_id": "hockey", "final": {"question": "For the team had the biggest power play percentage in 2011, who was their coach that season? Give the full name.", "sql": "SELECT T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T2.year = 2011 ORDER BY CAST(T2.PPG AS REAL) / T2.PPC DESC LIMIT 1", "source_tables": ["coaches", "teams"]}, "evidence": "the biggest power play percentage = max(divide(PPG, PPC))"}
{"sample_id": 7678, "db_id": "hockey", "final": {"question": "Which country has the most players in the Hall of Fame?", "sql": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID GROUP BY T1.birthCountry ORDER BY COUNT(T1.playerID) DESC LIMIT 1", "source_tables": ["hof", "master"]}, "evidence": "country refers to birthCountry"}
{"sample_id": 7763, "db_id": "hockey", "final": {"question": "How many wins did the Philadelphia Flyers have over the Boston Bruins in 1985?", "sql": "SELECT T1.W FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1985 AND T1.tmID = ( SELECT DISTINCT tmID FROM Teams WHERE name = 'Philadelphia Flyers' ) AND T1.oppID = ( SELECT DISTINCT tmID FROM Teams WHERE name = 'Boston Bruins' )", "source_tables": ["teamvsteam", "teams"]}, "evidence": "Philadelphia Flyers is name of team playing; Boston Bruins is name of opposing team where oppID = 'BOS'; year = 1985; wins refer to W;"}
{"sample_id": 7641, "db_id": "hockey", "final": {"question": "Who is the coach who had coached the the most seasons in MTL? State his given name, date of birth and all teams he had coaches before.", "sql": "SELECT T2.nameGiven , T2.birthYear, T2.birthMon, T2.birthDay, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T3.lgID = T1.lgID WHERE T3.tmID = 'MTL' GROUP BY T2.nameGiven, T2.birthYear, T2.birthMon, T2.birthDay, T3.name ORDER BY COUNT(T2.coachID) DESC LIMIT 1", "source_tables": ["goalies", "master", "teams"]}, "evidence": "date of birth refers to birthDay + birthMon + birthYear"}
{"sample_id": 7675, "db_id": "hockey", "final": {"question": "In which month was the player who has won the most awards born?", "sql": "SELECT T1.birthMon FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T2.playerID ORDER BY COUNT(T2.award) DESC LIMIT 1", "source_tables": ["awardsplayers", "master"]}, "evidence": "who has won the most awards refers to max(count(award)); the month player was born refers to birthMon"}
{"sample_id": 7711, "db_id": "hockey", "final": {"question": "When was the birthday for the goalie who had most goal againsts in 1965 season?", "sql": "SELECT T1.birthYear, T1.birthMon, birthDay FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1965 ORDER BY T2.GA DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "Birthday refers to CONCAT(birthYear / birthMon / birthDate);most goal against refers to MAX(GA);1965 season refers to year = '1965'\n\n"}
{"sample_id": 7713, "db_id": "hockey", "final": {"question": "What's the weight of the player who had the most Power Play Goals in the 21st century?", "sql": "SELECT T1.weight FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year > 2000 GROUP BY T1.playerID, T1.weight ORDER BY SUM(T2.PPG) DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "21st century refers to year >2000; Power play goals refers to PPG"}
{"sample_id": 7638, "db_id": "hockey", "final": {"question": "For all players who becomes coach after retirement, state the given name of coach and which teams and years did they coach?", "sql": "SELECT DISTINCT T2.nameGiven, T3.name, T3.year FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T2.playerID IS NOT NULL AND T2.coachID IS NOT NULL", "source_tables": ["coaches", "master", "teams"]}, "evidence": ""}
{"sample_id": 7626, "db_id": "hockey", "final": {"question": "State the nick name of player ID 'aubinje01'. List all the teams and season he played for.", "sql": "SELECT DISTINCT T1.nameNick, T3.year, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T1.playerID = 'aubinje01'", "source_tables": ["goalies", "master", "teams"]}, "evidence": "nick name refers to nameNick; team refers to tmID; season refers to year\n\n"}
{"sample_id": 7782, "db_id": "hockey", "final": {"question": "What is the average winning rate of the Montreal Canadiens in the Stanley Cup finals?", "sql": "SELECT SUM(T2.W / T2.G) / SUM(T2.G + T2.W) FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens'", "source_tables": ["teamssc", "teams"]}, "evidence": "DIVIDE(SUM(DIVIDE(W,G), COUNT(oppID);"}
{"sample_id": 7668, "db_id": "hockey", "final": {"question": "Please list the birth cities of the players who have won an award in the year 1970.", "sql": "SELECT DISTINCT T1.birthCity FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1970", "source_tables": ["awardsplayers", "master"]}, "evidence": ""}
{"sample_id": 7741, "db_id": "hockey", "final": {"question": "How old was the goaltender who scored the fewest goals while on the ice when he retired from the NHL?", "sql": "SELECT T2.lastNHL - T2.birthYear FROM GoaliesSC AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.lastNHL IS NOT NULL GROUP BY T2.lastNHL, T2.birthYear ORDER BY SUM(GA) LIMIT 1", "source_tables": ["goaliessc", "master"]}, "evidence": "goaltender' and 'goalie' are synonyms; fewest goals while on the ice refers to min(GA); How old = subtract(lastNHL(playerID(min(GA))), birthYear(playerID(min(GA)))))"}
{"sample_id": 7737, "db_id": "hockey", "final": {"question": "What are the awards won by the coach who coached the team with the most number of victories of all time? Indicate the choach ID.", "sql": "SELECT DISTINCT T2.coachID, T1.award FROM AwardsCoaches AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID GROUP BY T2.coachID, T1.award ORDER BY SUM(T2.w) DESC LIMIT 1", "source_tables": ["coaches", "awardscoaches"]}, "evidence": "victories' and 'wins' are synonyms; most number of victories refers to max(w)"}
{"sample_id": 7790, "db_id": "hockey", "final": {"question": "Among the players who had 10 empty net goals in their career, who is the tallest? Show his full name.", "sql": "SELECT T2.firstName, T2.lastName FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.ENG = 10 ORDER BY T2.height DESC LIMIT 1", "source_tables": ["goalies", "master"]}, "evidence": "10 empty net goals refer to ENG = 10; tallest refers to MAX(height);"}
{"sample_id": 7666, "db_id": "hockey", "final": {"question": "Please list the first name of the players who are good at both left hands and right hands for goalie and have gotten in the Hall of Fame.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.shootCatch IS NULL", "source_tables": ["hof", "master"]}, "evidence": "good at both left hands and right hands for goalie refers to shootCatch IS NULL"}
{"sample_id": 7654, "db_id": "hockey", "final": {"question": "How many people were in the Hall of Fame's Builder category?", "sql": "SELECT COUNT(hofID) FROM HOF WHERE category = 'Builder'", "source_tables": ["hof"]}, "evidence": ""}
{"sample_id": 7760, "db_id": "hockey", "final": {"question": "Among the teams that played in 1922's Stanley Cup finals, how many of them had over 20 points in that year?", "sql": "SELECT COUNT(T1.tmID) FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = '1922' AND T2.Pts > 20", "source_tables": ["teamssc", "teams"]}, "evidence": "how many teams refer to COUNT(tmID); over 20 points refer to Pts>20; year = 1922;"}
{"sample_id": 7659, "db_id": "hockey", "final": {"question": "Among the coaches whose team has over 30 wins in a year, how many of them are born in the USA?", "sql": "SELECT COUNT(T2.coachID) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.W > 30 AND T1.birthCountry = 'USA'", "source_tables": ["coaches", "master"]}, "evidence": "over 30 wins refers to w>30; born in the USA refers to birthCountry = 'USA'"}
{"sample_id": 7651, "db_id": "hockey", "final": {"question": "Please list the years in which the NHL League had shots recorded while the goalie was on the ice.", "sql": "SELECT DISTINCT year FROM Goalies WHERE lgID = 'NHL' AND SA IS NOT NULL", "source_tables": ["goalies"]}, "evidence": "shots recorded while the goalie was on the ice refers to SA IS NOT NULL; NHL League refers to lgID = 'NHL'"}
{"sample_id": 7642, "db_id": "hockey", "final": {"question": "List all goalies with more lost than won games for two seasons or more. State the name of the player and team he played.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.year = T3.year AND T2.tmID = T3.tmID WHERE T1.pos = 'G' AND T2.L > T2.W GROUP BY T1.firstName, T1.lastName, T3.name HAVING COUNT(T3.year) > 2", "source_tables": ["goalies", "master", "teams"]}, "evidence": "lost refers to L; won refers to W"}
{"sample_id": 7756, "db_id": "hockey", "final": {"question": "Please list the first 3 teams that got the most penalty minutes in 2006.", "sql": "SELECT name FROM Teams WHERE year = 2006 GROUP BY tmID, name ORDER BY SUM(PIM) DESC LIMIT 3", "source_tables": ["teams"]}, "evidence": "the first 3 teams that got the most penalty minutes refer to name where MAX(PIM) limit to 3; year = 2006;"}
{"sample_id": 7728, "db_id": "hockey", "final": {"question": "Which team recorded the most number of road victories in 2005? Indicate the team ID.", "sql": "SELECT tmID FROM TeamSplits WHERE YEAR = '2005' ORDER BY rW DESC LIMIT 1", "source_tables": ["teamsplits"]}, "evidence": "road victories refers to rW; team id refers to tmID; victories and wins are synonyms\n\n"}
{"sample_id": 7745, "db_id": "hockey", "final": {"question": "Among the teams whose shorthanded goals are between 1 to 5, which player is the most trustworthy in the critical moment?", "sql": "SELECT T2.nameGiven, T2.lastName FROM Scoring AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.SHG BETWEEN 1 AND 5 ORDER BY T1.GWG DESC LIMIT 1", "source_tables": ["master", "scoring"]}, "evidence": "shorthanded goals refers to SHG; SHG BETWEEN 1 AND 5; most trustworthy in the critical moment refers to max(GWG)"}
{"sample_id": 7613, "db_id": "hockey", "final": {"question": "List all players' given name who are good at both left and right hand and playing the forward position.", "sql": "SELECT nameGiven FROM Master WHERE shootCatch IS NULL AND pos = 'F'", "source_tables": ["master"]}, "evidence": "good at both left and right hand refers to shootCatch IS NULL;\u00a0 playing the forward position refers to pos = 'F'"}
{"sample_id": 7698, "db_id": "hockey", "final": {"question": "For the team which had the most postseason shutouts in 1995, how many points did they have that year?", "sql": "SELECT SUM(T2.SHO) FROM Scoring AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1995 GROUP BY T2.tmID ORDER BY SUM(T2.PostSHO) DESC LIMIT 1", "source_tables": ["goalies", "scoring"]}, "evidence": "points refer to Pts; the most postseason shutouts refers to max(PostSHO)"}
{"sample_id": 7771, "db_id": "hockey", "final": {"question": "How many coaches who have taught the Buffalo Sabres have died?", "sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Buffalo Sabres' AND T3.deathYear IS NOT NULL", "source_tables": ["coaches", "master", "teams"]}, "evidence": "have died means deathYear is not NULL; Buffalo Sabres is the name of team;"}
{"sample_id": 7773, "db_id": "hockey", "final": {"question": "Among the coaches who taught the teams in 1922's Stanley Cup finals, how many of them are from the USA?", "sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN TeamsSC AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.year = 1922 AND T3.birthCountry = 'USA'", "source_tables": ["teamssc", "coaches", "master"]}, "evidence": "from the USA refers to birthCountry = 'USA'; year = 1922;"}
{"sample_id": 7684, "db_id": "hockey", "final": {"question": "What was the total number of the games that player Id \"rutlewa01\" played in 1967?", "sql": "SELECT GP FROM Goalies WHERE playerID = 'rutlewa01' AND year = 1967", "source_tables": ["goalies"]}, "evidence": "total number of the games refers to GP"}
{"sample_id": 7670, "db_id": "hockey", "final": {"question": "Among the players who have won the All-Rookie award, how many of them have died?", "sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.deathYear IS NOT NULL", "source_tables": ["awardsplayers", "master"]}, "evidence": "have died refers to deathYear IS NOT NULL"}
{"sample_id": 7722, "db_id": "hockey", "final": {"question": "Among the teams with the most number of ties, how many penalty was committed by a player or coach that is not on the ice? Indicate the name of the team.", "sql": "SELECT BenchMinor, name FROM Teams ORDER BY T DESC LIMIT 1", "source_tables": ["teams"]}, "evidence": "penalty refers to BenchMinor; Ties refer to T"}
{"sample_id": 7744, "db_id": "hockey", "final": {"question": "How many teams did the team with the most victories in 1915 play against?\nIndicate the name of the team who won the most games in 1915, as well as the names of the opposing team.", "sql": "SELECT COUNT(DISTINCT oppID), T2.tmID, T2.oppID FROM Teams AS T1 INNER JOIN TeamVsTeam AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID WHERE T2.year = 1915 GROUP BY T2.tmID, T2.oppID ORDER BY SUM(T2.W) DESC LIMIT 1", "source_tables": ["teamvsteam", "teams"]}, "evidence": "team playing refers to tmID; oppositng team refers to oppID; victories' and 'wins' are synonyms; most victories refers to max(w)"}
{"sample_id": 7633, "db_id": "hockey", "final": {"question": "What is the average height of player who were born in 1990 and after? Compare the average height with players who were born before 1990.", "sql": "SELECT AVG(IIF(birthYear < 1990, height, NULL)) - AVG(IIF(birthYear >= 1990, height, NULL)) FROM Master", "source_tables": ["master"]}, "evidence": "average height refers to AVG(height); born in 1990 refers to birthYear = 1990\n"}
{"sample_id": 7634, "db_id": "hockey", "final": {"question": "Name the goalies who are good at left hand and also has become a coach after retirement. Name all teams he had played before.", "sql": "SELECT DISTINCT firstName, lastName, T3.name FROM Goalies AS T1 INNER JOIN Master AS T2 ON T2.playerID = T1.playerID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.playerID IS NOT NULL AND T2.coachID IS NOT NULL AND T2.shootCatch = 'L' AND T2.pos = 'G'", "source_tables": ["goalies", "master", "teams"]}, "evidence": "good at left hand refers to shootCatch = 'L'; goalies refers to pos = 'G'"}
{"sample_id": 7649, "db_id": "hockey", "final": {"question": "How many shoutouts are there in the regular season of 1977?", "sql": "SELECT COUNT(year) FROM CombinedShutouts WHERE year = 1977 AND \"R/P\" = 'R'", "source_tables": ["combinedshutouts"]}, "evidence": "regular season refers to `R/P` = 'R'"}
{"sample_id": 7673, "db_id": "hockey", "final": {"question": "Please list the nicknames of the players who have won the All-Rookie award and are born in March.", "sql": "SELECT DISTINCT T1.nameNick FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthMon = 3", "source_tables": ["awardsplayers", "master"]}, "evidence": "born in March refers to birthMon = '3'; nicknames refers to nameNick"}
{"sample_id": 7660, "db_id": "hockey", "final": {"question": "Among the coaches who have taught teams from the NHL League, how many of them are from Canada?", "sql": "SELECT COUNT(T2.coachID) FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.lgID = 'NHL' AND T1.birthCountry = 'Canada'", "source_tables": ["coaches", "master"]}, "evidence": "from Canada refers to birthCountry = 'Canada'; NHL league refers to lgID = 'NHL'"}
{"sample_id": 7746, "db_id": "hockey", "final": {"question": "In 1997, how many loss did the coach have who temporary coached Tampa Bay Lightning? Indicate his/her coach ID.", "sql": "SELECT SUM(T1.l), T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.notes = 'interim' AND T1.year = '1997' AND T2.name = 'Tampa Bay Lightning' GROUP BY T1.coachID", "source_tables": ["coaches", "teams"]}, "evidence": "temporary coached refers to notes = 'interim'; number of loss refers to L (to add)"}
{"sample_id": 7804, "db_id": "hockey", "final": {"question": "What is the full name of players origin from Finland?", "sql": "SELECT DISTINCT firstName, lastName FROM Master WHERE birthCountry = 'Finland'", "source_tables": ["master"]}, "evidence": "origin from Finland refers to birthCountry = 'Finland';"}
{"sample_id": 7774, "db_id": "hockey", "final": {"question": "In the year 2000, which team has played the most games against the Buffalo Sabres?", "sql": "SELECT T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.oppID = T2.tmID INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.tmID = T3.tmID WHERE T1.year = 2000 AND T2.name = 'Buffalo Sabres' GROUP BY T3.name ORDER BY SUM(T2.G) DESC LIMIT 1", "source_tables": ["teamvsteam", "teams"]}, "evidence": "which team played the most games against refers to oppID where MAX(SUM(G); Buffalo Sabres is the name of team;"}
{"sample_id": 7657, "db_id": "hockey", "final": {"question": "Did the tallest player got in the Hall of Fame? If yes, please list the year when he got in the Hall of Fame.", "sql": "SELECT CASE WHEN T1.hofID IS NULL THEN 'NO' ELSE T2.year END FROM Master AS T1 LEFT JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.height = ( SELECT MAX(height) FROM Master )", "source_tables": ["hof", "master"]}, "evidence": "tallest player refers to max(height)"}
{"sample_id": 7646, "db_id": "hockey", "final": {"question": "How many players and coaches are awarded after death?", "sql": "SELECT COUNT(note) FROM AwardsMisc WHERE note IS NOT NULL", "source_tables": ["awardsmisc"]}, "evidence": "awarded after death refers to note = 'posthumous'"}
{"sample_id": 7699, "db_id": "hockey", "final": {"question": "Which coach had the highest winning rates in the 2009 season? What's coach's nickname.", "sql": "SELECT T2.coachID, T1.nameNick FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 2009 ORDER BY CAST(T2.W AS REAL) / (T2.W + T2.L) DESC LIMIT 1", "source_tables": ["coaches", "master"]}, "evidence": "the highest winning rate refer to divide(W, sum(W, L))"}
{"sample_id": 7702, "db_id": "hockey", "final": {"question": "How many years did player Id \"cleghsp01\" make to the Stanley Cup finals?", "sql": "SELECT COUNT(year) FROM ScoringSC WHERE playerID = 'cleghsp01'", "source_tables": ["scoringsc"]}, "evidence": "the number of years refers to count(year)"}
{"sample_id": 7778, "db_id": "hockey", "final": {"question": "In which year did the Montreal Canadiens have 49 penalty minutes in the Stanley Cup finals? Was it 1924, 1923 or 1918?", "sql": "SELECT T1.year FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T2.PIM = 49", "source_tables": ["teamssc", "teams"]}, "evidence": "penalty minutes refer to PIM = 49;"}
{"sample_id": 7628, "db_id": "hockey", "final": {"question": "Name the goalie and the season he played where he had 5% shutouts among the number of goals recorded while the goalie was on the ice.", "sql": "SELECT DISTINCT T1.firstName, T1.lastName, T2.year FROM Master AS T1 INNER JOIN ( SELECT playerID, year FROM Goalies WHERE CAST(SHO AS REAL) / GA > 0.05 ) AS T2 ON T2.playerID = T1.playerID", "source_tables": ["goalies", "master"]}, "evidence": "shutouts refers to SHO; number of goals refers to GA; 5% shutouts among the number of goals refers to DIVIDE(SHO,GA)*100 = 5.00"}
{"sample_id": 7792, "db_id": "hockey", "final": {"question": "For the goalie whose last name is \"Young\", how many teams did he play in?", "sql": "SELECT COUNT(DISTINCT T1.tmID) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.lastName = 'Young'", "source_tables": ["goalies", "master"]}, "evidence": "goalie is a players; teams refer to tmID;"}
{"sample_id": 7707, "db_id": "hockey", "final": {"question": "For the team which had three different goalies in the 2011 postseason games, how many games did they win in the regular season?", "sql": "SELECT SUM(T2.W) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T2.year = 2011 GROUP BY T1.tmID HAVING COUNT(DISTINCT T1.playerID) = 3", "source_tables": ["goalies", "teams"]}, "evidence": "three different goalies refer to count(playerID) = 3; game won refers to W"}
{"sample_id": 7650, "db_id": "hockey", "final": {"question": "How many teams scored against their opponent who had pulled their goalie in the year 2005?", "sql": "SELECT COUNT(tmID) FROM Goalies WHERE year = 2005 AND ENG IS NULL", "source_tables": ["goalies"]}, "evidence": "teams scored against their opponent who had pulled their goalie refers to ENG is not null"}
{"sample_id": 7612, "db_id": "hockey", "final": {"question": "List the first Name and last name of all players not from USA and who are born in 1990 .", "sql": "SELECT firstName, lastName FROM Master WHERE birthYear = 1990 AND birthCountry != 'USA'", "source_tables": ["master"]}, "evidence": "Not from USA refers to birthCountry! = 'USA'; born in 1990 refers to birthYear = 1990\n"}
{"sample_id": 7876, "db_id": "world", "final": {"question": "List down the name of countries whereby English is their official language.", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "English is the official language refers to Language = 'English' AND IsOfficial = 'T';"}
{"sample_id": 7908, "db_id": "world", "final": {"question": "What is the local name of the country where \"The Valley\" city belongs?", "sql": "SELECT T2.LocalName FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'The Valley'", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7902, "db_id": "world", "final": {"question": "What are the official languages of the country where you can find the city with the least population?", "sql": "SELECT T2.Language FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["countrylanguage", "city"]}, "evidence": "official language refers to IsOfficial = 'T'; least population refers to MIN(Population);"}
{"sample_id": 7841, "db_id": "world", "final": {"question": "List down the cities that belong to the country with a life expectancy of 66.4.", "sql": "SELECT T2.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy = 66.4", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7868, "db_id": "world", "final": {"question": "List all the official and unofficial languages used by the country that declared its independence in 1830.", "sql": "SELECT T2.Language, T2.IsOfficial FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear = 1830 GROUP BY T2.Language, T2.IsOfficial", "source_tables": ["countrylanguage", "country"]}, "evidence": "official language refers to IsOfficial = 'T'; unofficial language refers to IsOfficial = 'F'; declared independence in 1830 refers to IndepYear = 1830;"}
{"sample_id": 7897, "db_id": "world", "final": {"question": "How many languages are there in the country where Tocantins district belongs?", "sql": "SELECT COUNT(DISTINCT T2.Language) FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.District = 'Tocantins'", "source_tables": ["countrylanguage", "city"]}, "evidence": ""}
{"sample_id": 7849, "db_id": "world", "final": {"question": "List down the districts belong to the country headed by Adolf Ogi.", "sql": "SELECT T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Adolf Ogi'", "source_tables": ["city", "country"]}, "evidence": "headed by Adolf Ogi refers to HeadOfState = 'Adolf Ogi';"}
{"sample_id": 7880, "db_id": "world", "final": {"question": "Which country has the most crowded city in the world?", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "most crowded city refers to MAX(Population);"}
{"sample_id": 7852, "db_id": "world", "final": {"question": "In English speaking countries, provide the difference between the number of countries with republic and constitutional monarchy as its government form.", "sql": "SELECT COUNT(T1.GovernmentForm = 'Republic') - COUNT(T1.GovernmentForm = 'ConstitutionalMonarchy') FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English'", "source_tables": ["countrylanguage", "country"]}, "evidence": "English speaking refers to Language = 'English' ; difference = SUBTRACT(COUNT(Language = 'English' WHERE GovernmentForm = 'Republic'), COUNT(Language = 'English' WHERE GovernmentForm = 'ConstitutionalMonarchy'));"}
{"sample_id": 7850, "db_id": "world", "final": {"question": "Who is the head of the country where Santa Catarina district belongs?", "sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.District = 'Santa Catarina'", "source_tables": ["city", "country"]}, "evidence": "head of the country refers to HeadOfState;"}
{"sample_id": 7824, "db_id": "world", "final": {"question": "How many cities are there in England?", "sql": "SELECT COUNT(ID) FROM City WHERE District = 'England'", "source_tables": ["city"]}, "evidence": "England refers to District = 'England';"}
{"sample_id": 7840, "db_id": "world", "final": {"question": "Among the countries that officially use the English language, what country has the highest capital?", "sql": "SELECT T1.Code FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' ORDER BY T1.Capital DESC LIMIT 1", "source_tables": ["countrylanguage", "country"]}, "evidence": "officially use the English language refers to `Language` = 'English' AND IsOfficial = 'T'; highest capital refers to MAX(Capital);"}
{"sample_id": 7831, "db_id": "world", "final": {"question": "Among the languages used in Baltic Countries, provide the languages which are used by over 80%.\n\n", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Baltic Countries' AND T2.Percentage > 80", "source_tables": ["countrylanguage", "country"]}, "evidence": "Baltic Countries refers to Region = 'Baltic Countries'; languages which are used by over 80% refers to Percentage > 80;"}
{"sample_id": 7834, "db_id": "world", "final": {"question": "Describe the capital city and languages used in the country with the shortest life expectancy.", "sql": "SELECT T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode ORDER BY T1.LifeExpectancy LIMIT 1", "source_tables": ["countrylanguage", "city", "country"]}, "evidence": "capital city refers to Capital; shortest life expectancy refers to MIN(LifeExpectancy);"}
{"sample_id": 7826, "db_id": "world", "final": {"question": "What is the capital city and population of San Marino?", "sql": "SELECT T1.Capital, T2.Population FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'San Marino'", "source_tables": ["city", "country"]}, "evidence": "capital city refers to Capital; San Marino is a name of country;"}
{"sample_id": 7844, "db_id": "world", "final": {"question": "List down the languages of the countries that have population below 8000.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Population < 8000", "source_tables": ["countrylanguage", "country"]}, "evidence": "population below 8000 refers to Population < 8000;"}
{"sample_id": 7887, "db_id": "world", "final": {"question": "What is the average life expentancy of countries that speak Arabic?", "sql": "SELECT AVG(T1.LifeExpectancy) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Arabic'", "source_tables": ["countrylanguage", "country"]}, "evidence": "average life expectancy = AVG(LifeExpectancy); speak Arabic refers to `Language` = 'Arabic';"}
{"sample_id": 7853, "db_id": "world", "final": {"question": "What country declared its independence in 1994?", "sql": "SELECT Name FROM Country WHERE IndepYear = 1994", "source_tables": ["country"]}, "evidence": "declared independence in 1994 refers to IndepYear = 1994;"}
{"sample_id": 7833, "db_id": "world", "final": {"question": "Provide the name, located country, and life expectancy of the most populated city", "sql": "SELECT T2.Name, T1.Code, T1.LifeExpectancy FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "most populated city refers to MAX(Population);"}
{"sample_id": 7819, "db_id": "world", "final": {"question": "Which country has the shortest life expectancy?", "sql": "SELECT Name FROM Country ORDER BY LifeExpectancy LIMIT 1", "source_tables": ["country"]}, "evidence": "shortest life expectancy refers to MIN(LifeExpectancy);"}
{"sample_id": 7851, "db_id": "world", "final": {"question": "Among the countries that have GNP greater than 1500, what is the percentage of the countries have English as its language?", "sql": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GNP > 1500", "source_tables": ["countrylanguage", "country"]}, "evidence": "GNP greater than 1500 refers to GNP > 1500 ; percentage = MULTIPLY(DIVIDE(SUM(Code WHERE GNP > 1500 AND Language = 'English'), COUNT(Code WHERE GNP > 1500)) 1.0); English as its language refers to Language = 'English';"}
{"sample_id": 7899, "db_id": "world", "final": {"question": "How many cities are there in the country ruled by Kostis Stefanopoulos?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Kostis Stefanopoulos'", "source_tables": ["city", "country"]}, "evidence": "ruled by Kostis Stefanopoulos refers to HeadOfState = 'Kostis Stefanopoulos';"}
{"sample_id": 7829, "db_id": "world", "final": {"question": "List the countries and their official languages in Antarctica.", "sql": "SELECT T1.Name, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Antarctica' AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official language refers to IsOfficial = 'T'; Antarctica refers to Continent = 'Antarctica';"}
{"sample_id": 7867, "db_id": "world", "final": {"question": "List all the cities in the country where there is high life expectancy at birth.", "sql": "SELECT T2.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.LifeExpectancy DESC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "high life expectancy at birth refers to MAX(LifeExpectancy);"}
{"sample_id": 7864, "db_id": "world", "final": {"question": "Who is the head of state of the country where the city of Pyongyang is under?", "sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Pyongyang'", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7866, "db_id": "world", "final": {"question": "What city in Russia has the least population?", "sql": "SELECT T2.Name FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Russian Federation' ORDER BY T2.Population ASC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "Russia is a name of country; least population refers to MIN(Population);"}
{"sample_id": 7889, "db_id": "world", "final": {"question": "What is the district of Zaanstad?", "sql": "SELECT District FROM City WHERE name = 'Zaanstad'", "source_tables": ["city"]}, "evidence": "Zaanstad is a name of city;"}
{"sample_id": 7882, "db_id": "world", "final": {"question": "What is the GNP of the least crowded city in the world?", "sql": "SELECT T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "least crowded city refers to MIN(Population);"}
{"sample_id": 7828, "db_id": "world", "final": {"question": "Provide the name, capital city and its official language of the country with the highest life expectancy.", "sql": "SELECT T1.Name, T1.Capital, T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN City AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' ORDER BY T1.LifeExpectancy DESC LIMIT 1", "source_tables": ["countrylanguage", "city", "country"]}, "evidence": "capital city refers to Capital; official language refers to IsOfficial = 'T'; highest life expectancy refers to MAX(LifeExpectancy);"}
{"sample_id": 7869, "db_id": "world", "final": {"question": "What is the capital city of the country with largest population?", "sql": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population DESC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "capital city refers to Capital; largest population refers to MAX(Population);"}
{"sample_id": 7859, "db_id": "world", "final": {"question": "What is the official language of China?", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official language refers to IsOfficial = 'T'; China is a name of country;"}
{"sample_id": 7832, "db_id": "world", "final": {"question": "Among the languages used in Baltic Countries, provide the languages which are used by over 80%.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Region = 'Baltic Countries' AND T2.Percentage > 80", "source_tables": ["countrylanguage", "country"]}, "evidence": "Baltic Countries refers to Region = 'Baltic Countries'; languages which are used by over 80% refers to Percentage > 80;"}
{"sample_id": 7855, "db_id": "world", "final": {"question": "What country in Asia has the largest gross national product(GNP)?", "sql": "SELECT Name FROM Country WHERE Continent = 'Asia' ORDER BY GNP DESC LIMIT 1", "source_tables": ["country"]}, "evidence": "Asia refers to Continent = 'Asia'; largest gross national product refers to MAX(GNP);"}
{"sample_id": 7861, "db_id": "world", "final": {"question": "What is the form of government that the city of Manila has?", "sql": "SELECT T1.GovernmentForm FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Manila'", "source_tables": ["city", "country"]}, "evidence": "form of government refers to GovernmentForm;"}
{"sample_id": 7879, "db_id": "world", "final": {"question": "List down languages used in Malaysia.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Malaysia'", "source_tables": ["countrylanguage", "country"]}, "evidence": "Malaysia is a name of country;"}
{"sample_id": 7847, "db_id": "world", "final": {"question": "How many languages are used in Cyprus?", "sql": "SELECT SUM(CASE WHEN T1.Name = 'Cyprus' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode", "source_tables": ["countrylanguage", "country"]}, "evidence": "Cyprus is a name of Country;"}
{"sample_id": 7842, "db_id": "world", "final": {"question": "Give the head of the state of the country with the lowest percentage use of English as their language.", "sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T2.Percentage LIMIT 1", "source_tables": ["countrylanguage", "country"]}, "evidence": "head of the state refers to HeadOfState; lowest percentage use of English as their language refers to MIN(Percentage WHERE `Language` = 'English');"}
{"sample_id": 7891, "db_id": "world", "final": {"question": "Provide the district of the city with a population of 201843.", "sql": "SELECT District FROM City WHERE population = 201843", "source_tables": ["city"]}, "evidence": ""}
{"sample_id": 7830, "db_id": "world", "final": {"question": "List any five countries which use English as an official language.", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' LIMIT 5", "source_tables": ["countrylanguage", "country"]}, "evidence": "English as an official language refers to `Language` = 'English' AND IsOfficial = 'T';"}
{"sample_id": 7848, "db_id": "world", "final": {"question": "Provide the language used by the people of Belize.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Belize'", "source_tables": ["countrylanguage", "country"]}, "evidence": "Belize is a name of country;"}
{"sample_id": 7871, "db_id": "world", "final": {"question": "Calculate the average GNP of all countries that use Arabic language.", "sql": "SELECT AVG(T1.GNP) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Arabic'", "source_tables": ["countrylanguage", "country"]}, "evidence": "average GNP = AVG(GNP); use Arabic language refers to Language = 'Arabic';"}
{"sample_id": 7894, "db_id": "world", "final": {"question": "What is the year of independence of Brunei?", "sql": "SELECT IndepYear FROM Country WHERE Name = 'Brunei'", "source_tables": ["country"]}, "evidence": "year of independence refers to IndepYear; Brunei is a name of country;"}
{"sample_id": 7856, "db_id": "world", "final": {"question": "How many cities are in the Philippines?", "sql": "SELECT COUNT(ID) FROM City WHERE Name = 'PHL'", "source_tables": ["city"]}, "evidence": "Philippines refers to CountryCode = 'PHL';"}
{"sample_id": 7822, "db_id": "world", "final": {"question": "List the languages used in the USA.", "sql": "SELECT Language FROM CountryLanguage WHERE CountryCode = 'USA'", "source_tables": ["countrylanguage"]}, "evidence": "USA refers to CountryCode = 'USA';"}
{"sample_id": 7863, "db_id": "world", "final": {"question": "List all the languages used in Europe.", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe'", "source_tables": ["countrylanguage", "country"]}, "evidence": "Europe refers to Continent = 'Europe';"}
{"sample_id": 7896, "db_id": "world", "final": {"question": "What is the average surface area of all countries?", "sql": "SELECT AVG(SurfaceArea) FROM Country", "source_tables": ["country"]}, "evidence": "average surface area = AVG(SurfaceArea);"}
{"sample_id": 7890, "db_id": "world", "final": {"question": "What city has the highest population?", "sql": "SELECT Name FROM City ORDER BY Population DESC LIMIT 1", "source_tables": ["city"]}, "evidence": "highest population refers to MAX(Population);"}
{"sample_id": 7892, "db_id": "world", "final": {"question": "What country has the largest surface area?", "sql": "SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1", "source_tables": ["country"]}, "evidence": "largest surface area refers to MAX(SurfaceArea);"}
{"sample_id": 7915, "db_id": "world", "final": {"question": "In countries with constitutional monarchy, what is the percentage of cities located in the district of England?", "sql": "SELECT CAST(SUM(CASE WHEN T1.District = 'England' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Constitutional Monarchy'", "source_tables": ["city", "country"]}, "evidence": "constitutional monarchy refers to GovernmentForm = 'Constitutional Monarchy'; percentage = MULTIPLY(DIVIDE(SUM(GovernmentForm = 'Constitutional Monarchy' WHERE District = 'England'), COUNT(GovernmentForm = 'Constitutional Monarchy')), 100)"}
{"sample_id": 7895, "db_id": "world", "final": {"question": "How many countries have no GNP?", "sql": "SELECT COUNT(*) FROM Country WHERE GNP = 0", "source_tables": ["country"]}, "evidence": "no GNP refers to GNP = 0;"}
{"sample_id": 7912, "db_id": "world", "final": {"question": "List down the languages of countries with an independence year between 1980 to 1995.", "sql": "SELECT T2.Name, T1.Language FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear BETWEEN 1980 AND 1995", "source_tables": ["countrylanguage", "country"]}, "evidence": "independence year between 1980 to 1995 refers to IndepYear BETWEEN 1980 AND 1995;"}
{"sample_id": 7857, "db_id": "world", "final": {"question": "What is the local name of Ukraine that they are also known for?", "sql": "SELECT LocalName FROM Country WHERE Name = 'Ukraine'", "source_tables": ["country"]}, "evidence": "Ukraine is a name of country;"}
{"sample_id": 7907, "db_id": "world", "final": {"question": "What is the GNP of the country where district \"Entre Rios\" belongs?", "sql": "SELECT T2.GNP FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Entre Rios' LIMIT 1", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7878, "db_id": "world", "final": {"question": "What is the percentage of English used in Australia?", "sql": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Australia' AND T2.Language = 'English'", "source_tables": ["countrylanguage", "country"]}, "evidence": "English refers to Language = 'English'; Australia is a name of country;"}
{"sample_id": 7886, "db_id": "world", "final": {"question": "What are the cities for country called \"\u00c2\u00b4Uman\" in local name.", "sql": "SELECT T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.LocalName = '\u00c2\u00b4Uman'", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 7854, "db_id": "world", "final": {"question": "List all the countries in Asia.", "sql": "SELECT Name FROM Country WHERE Continent = 'Asia'", "source_tables": ["country"]}, "evidence": "Asia refers to Continent = 'Asia';"}
{"sample_id": 7820, "db_id": "world", "final": {"question": "List any five countries which use English as an official language.", "sql": "SELECT T1.Name FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' LIMIT 5", "source_tables": ["countrylanguage", "country"]}, "evidence": "English as an official language refers to `Language` = 'English' AND IsOfficial = 'T';"}
{"sample_id": 7904, "db_id": "world", "final": {"question": "List the names of the country that officially uses English as their language.", "sql": "SELECT T2.Name FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T1.Language = 'English'", "source_tables": ["countrylanguage", "country"]}, "evidence": "officially uses English as their language refers to `Language` = 'English' AND IsOfficial = 'T';"}
{"sample_id": 7845, "db_id": "world", "final": {"question": "What are the official languages used in Belgium?", "sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Belgium' AND T2.IsOfficial = 'T'", "source_tables": ["countrylanguage", "country"]}, "evidence": "official languages refers to IsOfficial = 'T'; Belgium is a name of country;"}
{"sample_id": 7920, "db_id": "music_platform_2", "final": {"question": "Provide the itunes id and url for podcast titled 'Brown Suga Diaries'.", "sql": "SELECT itunes_id, itunes_url FROM podcasts WHERE title = 'Brown Suga Diaries'", "source_tables": ["podcasts"]}, "evidence": "url refers to itunes_url; 'Brown Suga Diaries' is the title of podcast"}
{"sample_id": 7960, "db_id": "music_platform_2", "final": {"question": "Write the names of the podcasts in the music category that have a rating greater than 3.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'music' AND T2.rating > 3", "source_tables": ["reviews", "categories"]}, "evidence": "music category refers to category = 'music'; rating greater than 3 refers to rating > 3; name of the podcast refers to title"}
{"sample_id": 7977, "db_id": "music_platform_2", "final": {"question": "What is the average rating for the \"crime-junkie\" podcast?", "sql": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Crime Junkie'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"crime-junkie\" podcast refers to title = 'crime-junkie'; average rating = Divide (Sum(rating), Count(rating))"}
{"sample_id": 7962, "db_id": "music_platform_2", "final": {"question": "What is the category and itune url of the title \"Scaling Global\"?", "sql": "SELECT T1.category, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Scaling Global'", "source_tables": ["podcasts", "categories"]}, "evidence": ""}
{"sample_id": 7941, "db_id": "music_platform_2", "final": {"question": "The 'More Stupider: A 90-Day Fiance Podcast' belongs to which category and what is the average rating of the podcast?", "sql": "SELECT AVG(T3.rating) FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title = 'More Stupider: A 90-Day Fiance Podcast'", "source_tables": ["podcasts", "reviews", "categories"]}, "evidence": "More Stupider: A 90-Day Fiance Podcast' is the title of podcast; average rating = Divide (Sum(rating), Count(rating))"}
{"sample_id": 7970, "db_id": "music_platform_2", "final": {"question": "List all of the two-star reviews and their categories.", "sql": "SELECT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.rating = 2", "source_tables": ["reviews", "categories"]}, "evidence": "two-stars review refers to rating = 2"}
{"sample_id": 7982, "db_id": "music_platform_2", "final": {"question": "How many reviews are created for the podcast \"Scaling Global\" under?", "sql": "SELECT COUNT(T2.content) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Scaling Global'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Scaling Global\" is the title of podcast"}
{"sample_id": 7983, "db_id": "music_platform_2", "final": {"question": "Among the reviews for the podcast \"Please Excuse My Dead Aunt Sally\", how many of them are made in the year 2019?", "sql": "SELECT COUNT(T2.created_at) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.created_at LIKE '2019-%'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Please Excuse My Dead Aunt Sally\" is the title of podcast; made in the year 2019 refers to created_at like '2019%'"}
{"sample_id": 7967, "db_id": "music_platform_2", "final": {"question": "Which \"music\" podcast has the longest title?", "sql": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'music' ORDER BY LENGTH(T2.title) DESC LIMIT 1", "source_tables": ["podcasts", "categories"]}, "evidence": "music podcasts refers to category = 'music'; longest title refers to title = Max(length(title))"}
{"sample_id": 7973, "db_id": "music_platform_2", "final": {"question": "Which category has the most reviews?", "sql": "SELECT T1.category FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id GROUP BY T1.category ORDER BY COUNT(T2.podcast_id) DESC LIMIT 1", "source_tables": ["reviews", "categories"]}, "evidence": "Most review refers to Max(Count(reviews.podcast_id))"}
{"sample_id": 7938, "db_id": "music_platform_2", "final": {"question": "Write all the review content belonging to StormCast: The Official Warhammer Age of Sigmar Podcast.", "sql": "SELECT content FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'StormCast: The Official Warhammer Age of Sigmar Podcast' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "review content refers to content; 'StormCast: The Official Warhammer Age of Sigmar Podcast' is the title of podcast;"}
{"sample_id": 7930, "db_id": "music_platform_2", "final": {"question": "Which podcast was reviewed the latest? State the date of creation, podcast tile and rating.", "sql": "SELECT T1.podcast_id, T2.created_at, T2.title, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id ORDER BY T2.created_at DESC LIMIT 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "latest refers to Max(created_at); date of creation refers to created_at"}
{"sample_id": 7934, "db_id": "music_platform_2", "final": {"question": "What is the average rating for the podcast that is most reviewed?", "sql": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id GROUP BY T1.podcast_id ORDER BY COUNT(T2.content) DESC LIMIT 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "most reviewed refers to Max(Count(reviews.podcast_id)); average rating refers to AVG (rating)"}
{"sample_id": 7943, "db_id": "music_platform_2", "final": {"question": "How many total reviews runned at in June 2022 were added to the podcasts?", "sql": "SELECT SUM(reviews_added) FROM runs WHERE run_at LIKE '2022-06-%'", "source_tables": ["runs"]}, "evidence": "run at in June 2022 refers to run_at BETWEEN '2022-06-01 00:00:00' and '2022-06-30 23:59:59'; reviews refers to review_added"}
{"sample_id": 7936, "db_id": "music_platform_2", "final": {"question": "What is the name of the podcast in which a commentor left a comment with the title 'Long time listener, calling it quits?' Include the URL of the podcast as well.", "sql": "SELECT podcast_id, itunes_url FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Long time listener, calling it quits' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "comment refers to review; 'Long time listener, calling it quits' is the title of review;\u00a0 name of the podcast refers to title of podcast; URL refers to itunes_url"}
{"sample_id": 7950, "db_id": "music_platform_2", "final": {"question": "Indicate the id of the reviewer whose itunes id is 1516665400.", "sql": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.itunes_id = 1516665400", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"151665400\" is itunes_id; id of reviewer refers to author_id"}
{"sample_id": 7981, "db_id": "music_platform_2", "final": {"question": "Please list the titles of all the podcasts under the category \"arts-performing-arts\".", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts-performing-arts'", "source_tables": ["podcasts", "categories"]}, "evidence": "category 'arts-performing-arts' refers to category = 'arts-performing-arts';"}
{"sample_id": 7959, "db_id": "music_platform_2", "final": {"question": "Provide the names of podcasts in the art category in 2018.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts' AND T2.created_at LIKE '2018-%'", "source_tables": ["reviews", "categories"]}, "evidence": "art category refers to category = 'arts'; in 2018 refers to created_at like '2018%'; name of podcast refers to title"}
{"sample_id": 7927, "db_id": "music_platform_2", "final": {"question": "List all content reviewed for podcast with the best rating under the 'fiction' category. State the podcast title.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.rating = 5 AND T1.category = 'fiction'", "source_tables": ["podcasts", "reviews", "categories"]}, "evidence": "'fiction' is the category name; best rating refers to rating = 5; content reviewed refers to content"}
{"sample_id": 7969, "db_id": "music_platform_2", "final": {"question": "What is the category for the \"Moist Boys\" podcast?", "sql": "SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title = 'Moist Boys' )", "source_tables": ["podcasts", "categories"]}, "evidence": "\"Moist Boys\" refers to title of podcast"}
{"sample_id": 7968, "db_id": "music_platform_2", "final": {"question": "List all the cagetories for all the podcasts with \"jessica\" in the title.", "sql": "SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title LIKE '%jessica%' )", "source_tables": ["podcasts", "categories"]}, "evidence": "podcast with 'jessica' in title refers to title like '%jessica%'"}
{"sample_id": 7918, "db_id": "music_platform_2", "final": {"question": "How many podcasts are there in the category which has the most podcasts?", "sql": "SELECT COUNT(podcast_id) FROM categories WHERE category = ( SELECT category FROM categories GROUP BY category ORDER BY COUNT(podcast_id) DESC LIMIT 1 )", "source_tables": ["categories"]}, "evidence": "category which has the most podcast refers to the category with Max(count(podcast_id))"}
{"sample_id": 7932, "db_id": "music_platform_2", "final": {"question": "For all reviews with the worst rating, state the podcast title as well as the review title and content.", "sql": "SELECT DISTINCT T1.title, T2.title, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.rating = 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "worst rating refers to rating = 1"}
{"sample_id": 7965, "db_id": "music_platform_2", "final": {"question": "What is the longest review?", "sql": "SELECT title FROM reviews ORDER BY LENGTH(content) DESC LIMIT 1", "source_tables": ["reviews"]}, "evidence": "review refers to content; longest review refers to Max(content)"}
{"sample_id": 7975, "db_id": "music_platform_2", "final": {"question": "What is the content of the earliest review for the \"Stuff You Should Know\" podcast?", "sql": "SELECT T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Stuff You Should Know' ORDER BY T2.created_at ASC LIMIT 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Stuff You Should Know\" is the title of podcast; earliest refers to Min(created_at)"}
{"sample_id": 7923, "db_id": "music_platform_2", "final": {"question": "List all the podcast title and its itunes url under the 'society-culture' category.", "sql": "SELECT T2.title, T2.itunes_url FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'society-culture'", "source_tables": ["podcasts", "categories"]}, "evidence": ""}
{"sample_id": 7954, "db_id": "music_platform_2", "final": {"question": "What dates were the Don't Lie To Your Life Coach podcast reviews created?", "sql": "SELECT created_at FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'Don''t Lie To Your Life Coach' )", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Don't Lie To Your Life Coach\" refers to title of podcast; date refers to created_at"}
{"sample_id": 7933, "db_id": "music_platform_2", "final": {"question": "List all reviews created in May 2019. State the title of podcast and review rating.", "sql": "SELECT DISTINCT T1.title, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at LIKE '2019-05-%'", "source_tables": ["podcasts", "reviews"]}, "evidence": "created in May 2019 refers to created_at like '2019-05%'"}
{"sample_id": 7940, "db_id": "music_platform_2", "final": {"question": "How many reviews does 'LifeAfter/The Message' have which were rated below 3?", "sql": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'LifeAfter/The Message' AND T2.rating <= 3", "source_tables": ["podcasts", "reviews"]}, "evidence": "LifeAfter/The Message' is the title of podcast; rated below 3 refers to rating < 3"}
{"sample_id": 7939, "db_id": "music_platform_2", "final": {"question": "Write all the review titles and the contents belonging to the podcast 'More Stupider: A 90-Day Fiance Podcast' with a review rating of 1.", "sql": "SELECT title, content FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'More Stupider: A 90-Day Fiance Podcast' ) AND rating = 1", "source_tables": ["podcasts", "reviews"]}, "evidence": "podcast 'More Stupider: A 90-Day Fiance Podcast'\u00a0 refers to title = 'More Stupider: A 90-Day Fiance Podcast'; rating of 1 refers to rating = 1"}
{"sample_id": 7958, "db_id": "music_platform_2", "final": {"question": "What is the average rating of all the podcasts in category art?", "sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts'", "source_tables": ["reviews", "categories"]}, "evidence": "category art refers to category = 'arts'; average rating = Divide (Sum (rating), Count (podcast_id))"}
{"sample_id": 7928, "db_id": "music_platform_2", "final": {"question": "State the podcast title, content review and rating for all reviews with titled 'Love it!'", "sql": "SELECT DISTINCT T1.title, T2.content, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Love it!'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"Love it!\" is the title of review; content reviewed refers to content"}
{"sample_id": 7919, "db_id": "music_platform_2", "final": {"question": "What is the percentage of the podcast that are categorized in four or more categories?", "sql": "SELECT COUNT(T1.podcast_id) FROM ( SELECT podcast_id FROM categories GROUP BY podcast_id HAVING COUNT(category) >= 4 ) AS T1", "source_tables": ["categories"]}, "evidence": "categorized in 4 or more refers to Count(category) > 4; percentage = Divide(Count(podcast_id(count(category) > 4)), Count(podcast_id)) * 100"}
{"sample_id": 7929, "db_id": "music_platform_2", "final": {"question": "Find the author, rating and review creation date of review for podcast title 'In The Thick'.", "sql": "SELECT T2.author_id, T2.rating, T2.created_at FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'In The Thick' GROUP BY T2.author_id, T2.rating, T2.created_at", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"In The Thick\" is the title of podcast; author refers to author_id; creation date refers to created_at"}
{"sample_id": 7957, "db_id": "music_platform_2", "final": {"question": "List the titles of the art category.", "sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts'", "source_tables": ["reviews", "categories"]}, "evidence": "art category refers to category = 'arts'"}
{"sample_id": 7942, "db_id": "music_platform_2", "final": {"question": "Of the arts-books and arts-design categories, which one has more podcasts and what is the numerical difference between them?", "sql": "SELECT ( SELECT category FROM categories WHERE category = 'arts-books' OR category = 'arts-design' GROUP BY category ORDER BY COUNT(podcast_id) DESC LIMIT 1 ) \"has more podcasts\" , ( SELECT SUM(CASE WHEN category = 'arts-books' THEN 1 ELSE 0 END) - SUM(CASE WHEN category = 'arts-design' THEN 1 ELSE 0 END) FROM categories ) \"differenct BETWEEN arts-books and arts-design\"", "source_tables": ["categories"]}, "evidence": "arts-books' and 'arts-design' are category; numerical difference = Subtract(Count(podcast_id(category = 'arts-books')), Count(podcast_id(category = 'arts-design'))); one has much more podcast refers to Max(Count(podcast_id))"}
{"sample_id": 7937, "db_id": "music_platform_2", "final": {"question": "List all the names of podcasts under the 'true crime' category.", "sql": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'", "source_tables": ["podcasts", "categories"]}, "evidence": "name of the podcast refers to title of the podcast"}
{"sample_id": 7921, "db_id": "music_platform_2", "final": {"question": "List all podcast with its itunes url for all title containing the word 'Dream'.", "sql": "SELECT itunes_url FROM podcasts WHERE title LIKE '%Dream%' GROUP BY itunes_url", "source_tables": ["podcasts"]}, "evidence": "containing the word 'Dream' refers to title LIKE '%Dream%'"}
{"sample_id": 7947, "db_id": "music_platform_2", "final": {"question": "What is the percentage of reviews added each year of the total reviews added?", "sql": "SELECT CAST((SUM(CASE WHEN run_at LIKE '2022-%' THEN reviews_added ELSE 0 END) - SUM(CASE WHEN run_at LIKE '2021-%' THEN reviews_added ELSE 0 END)) AS REAL) * 100 / SUM(reviews_added) OR '%' \"percentage\" FROM runs", "source_tables": ["runs"]}, "evidence": "review added each year refers to runs_at like '2021%' and runs_at like '2022%'; percentage for 2021 = Divide (Sum(reviews_added(runs_at like '2021%)), Sum(reviews_added)) * 100; percentage of 2022 = Divide (Sum(reviews_added(runs_at like '2022%')), Sum(reviews_added)) * 100"}
{"sample_id": 7980, "db_id": "music_platform_2", "final": {"question": "Which category is the podcast \"Scaling Global\" under?", "sql": "SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title = 'Scaling Global' )", "source_tables": ["podcasts", "categories"]}, "evidence": "\"Scaling Global\" is the title of podcast"}
{"sample_id": 7931, "db_id": "music_platform_2", "final": {"question": "Name the podcast title, rating and review content created by '76A4C24B6038145'.", "sql": "SELECT T2.title, T2.rating, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = '76A4C24B6038145'", "source_tables": ["podcasts", "reviews"]}, "evidence": "\"76A4C24B6038145\" is author_id; review content refers to content"}
{"sample_id": 8098, "db_id": "university", "final": {"question": "What is the percentage of the international students in University of Oslo in 2015?", "sql": "SELECT T2.pct_international_students FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'University of Oslo' AND T2.year = 2015", "source_tables": ["university", "university_year"]}, "evidence": "percentage of the international students refers to pct_international_students; in 2015 refers to year = 2015; in University of Oslo refers to university_name = 'University of Oslo';"}
{"sample_id": 8119, "db_id": "university", "final": {"question": "What is the total number of ranking criteria under the ranking system called Shanghai Ranking?", "sql": "SELECT COUNT(*) FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Shanghai Ranking'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "ranking system called Shanghai Ranking refers to system_name = 'Shanghai Ranking';"}
{"sample_id": 8033, "db_id": "university", "final": {"question": "Which university had the highest reputation in 2012?", "sql": "SELECT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2012 ORDER BY T1.score DESC LIMIT 1", "source_tables": ["university", "university_ranking_year"]}, "evidence": "had the highest reputation refers to MAX(score), in 2012 refers to year = 2012; which university refers to university_name;"}
{"sample_id": 8102, "db_id": "university", "final": {"question": "What was the score for University of Florida in \"N and S\" in 2014?", "sql": "SELECT T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'University of Florida' AND T2.year = 2014 AND T1.criteria_name = 'N and S'", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "University of Florida refers to university_name = 'University of Florida'; in 2014 refers to year = 2014; in \"N and S\" refers to criteria_name = 'N and S'"}
{"sample_id": 8036, "db_id": "university", "final": {"question": "What is the percentage of Harvard university's international students in 2011?", "sql": "SELECT T1.pct_international_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Harvard University'", "source_tables": ["university", "university_year"]}, "evidence": "Harvard university's refers to university_name = 'Harvard University'; in 2011 refers to year = 2011; percentage of Harvard university's international students refers to pct_international_students"}
{"sample_id": 8047, "db_id": "university", "final": {"question": "How many universities had over 30000 students in 2011?", "sql": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 30000", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; had over 30000 students refers to num_students > 30000;"}
{"sample_id": 8004, "db_id": "university", "final": {"question": "Between 2011 to 2016, in which countries can you find the universities where at least 50% of its students are international students?", "sql": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.pct_international_students > 50 AND T2.year BETWEEN 2011 AND 2016", "source_tables": ["country", "university", "university_year"]}, "evidence": "Between 2011 to 2016 refers to year BETWEEN 2011 AND 2016; at least 50% of its students are international students refers to pct_international_students > 50; which country refers to country_name"}
{"sample_id": 8061, "db_id": "university", "final": {"question": "In 2011, which university got the lowest score in teaching criteria?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 ORDER BY T2.score ASC LIMIT 1", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "in 2011 refers to year 2011; got the lowest score refers to MIN(score), teaching criteria refers to criteria_name = 'Teaching'"}
{"sample_id": 8050, "db_id": "university", "final": {"question": "What is the ID of the Publications Rank criteria?", "sql": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Publications Rank'", "source_tables": ["ranking_criteria"]}, "evidence": "Publications Rank criteria refers to criteria_name = 'Publications Rank';"}
{"sample_id": 8024, "db_id": "university", "final": {"question": "List the criteria names under the ranking system called Center for World University Ranking.", "sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "ranking system called Center for World University Ranking refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8005, "db_id": "university", "final": {"question": "How many universities have no less than 20,000 female students in 2016? Identify how many of the said universities are located in the United States of America.", "sql": "SELECT COUNT(*) , SUM(CASE WHEN T3.country_name = 'United States of America' THEN 1 ELSE 0 END) AS nums_in_usa FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2016 AND T2.num_students * T2.pct_female_students / 100 > 20000", "source_tables": ["country", "university", "university_year"]}, "evidence": "have no less than 20,000 female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100) > 20000; in 2016 refers to year = 2016; located in the United States of America refers to country_name = 'United States of America'"}
{"sample_id": 8014, "db_id": "university", "final": {"question": "What is the student staff ratio of Harvard University in 2012?", "sql": "SELECT T1.student_staff_ratio FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year = 2012", "source_tables": ["university", "university_year"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; in 2012 refers to year = 2012"}
{"sample_id": 8094, "db_id": "university", "final": {"question": "How many Turkish universities are there in the database?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Turkey'", "source_tables": ["country", "university"]}, "evidence": "Turkish universities refers to country_name = 'Turkey';"}
{"sample_id": 8023, "db_id": "university", "final": {"question": "What is the student population of the university that scored 98 in 2013?", "sql": "SELECT SUM(T1.num_students) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 98 AND T1.year = 2013", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "student population refers to num_students; in 2013 refers to year = 2013"}
{"sample_id": 8095, "db_id": "university", "final": {"question": "Which university had the most students in 2011? Show its name.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; the most students refers to MAX(num_students); which university refers to university_name;"}
{"sample_id": 7987, "db_id": "university", "final": {"question": "How many universities have at least 80,000 students in the year 2011?", "sql": "SELECT COUNT(*) FROM university_year WHERE num_students > 80000 AND year = 2011", "source_tables": ["university_year"]}, "evidence": "have at least 80,000 students refers to num_students > 8000; year = 2011"}
{"sample_id": 8093, "db_id": "university", "final": {"question": "Which country is McMaster University located in?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'McMaster University'", "source_tables": ["country", "university"]}, "evidence": "McMaster University refers to university_name = 'McMaster University'; which country refers to country_name"}
{"sample_id": 8078, "db_id": "university", "final": {"question": "What is the name of the university with the highest score in teaching in the year 2011?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 ORDER BY T2.score DESC LIMIT 1", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "with the highest score refers to MAX(score); in teaching refers to criteria_name = 'Teaching'; name of university refers to university_name;"}
{"sample_id": 8135, "db_id": "university", "final": {"question": "Calculate the difference between the total number of students and the number of international international students in Univeristy of Tokyo from 2011 to 2014.", "sql": "SELECT SUM(T1.num_students) - SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year BETWEEN 2011 AND 2014 AND T2.university_name = 'University of Tokyo'", "source_tables": ["university", "university_year"]}, "evidence": "international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); difference refers to SUBTRACT(SUM(num_students), SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100))); in University of Tokyo refers to university_name = 'University of Tokyo'; from 2011 to 2014 refers to year BETWEEN 2011 AND 2014"}
{"sample_id": 8128, "db_id": "university", "final": {"question": "Give the names of universities with number of students ranges from 400 to 1000.", "sql": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students BETWEEN 400 AND 1000", "source_tables": ["university", "university_year"]}, "evidence": "number of students ranges from 400 to 1000 refers to num_students BETWEEN 400 AND 1000; name of university refers to university_name"}
{"sample_id": 8136, "db_id": "university", "final": {"question": "List the names of universities with a score less than 28% of the average score of all universities in 2015.", "sql": "SELECT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 AND T1.score * 100 < ( SELECT AVG(score) * 28 FROM university_ranking_year WHERE year = 2015 )", "source_tables": ["university", "university_ranking_year"]}, "evidence": "in 2015 refers to year = 2015; score less than 28% refers to score < MULTIPLY(avg(score), 0.28) where year = 2015; names of universities refers to university_name"}
{"sample_id": 8101, "db_id": "university", "final": {"question": "How many female students were there in Pierre and Marie Curie University in 2015?", "sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 AND T2.university_name = 'Pierre and Marie Curie University'", "source_tables": ["university", "university_year"]}, "evidence": "female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); in Pierre and Marie Curie University refers to university_name = 'Pierre and Marie Curie University'; in 2015 refers to year = 2015"}
{"sample_id": 8035, "db_id": "university", "final": {"question": "Indicate the university's name with the highest ranking score in Teaching.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN ranking_criteria AS T3 ON T3.id = T2.ranking_criteria_id WHERE T3.criteria_name = 'Teaching' ORDER BY T2.score DESC LIMIT 1", "source_tables": ["university_ranking_year", "ranking_criteria", "university"]}, "evidence": "university's name refers to university_name; highest ranking score refers to MAX(score); in Teaching refers to criteria_name = 'Teaching'"}
{"sample_id": 8123, "db_id": "university", "final": {"question": "How many universities are located in Japan?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Japan'", "source_tables": ["country", "university"]}, "evidence": "located in Japan refers to country_name = 'Japan';"}
{"sample_id": 8016, "db_id": "university", "final": {"question": "Calculate the total number of students in universities located in Sweden.", "sql": "SELECT SUM(T2.num_students) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Sweden'", "source_tables": ["country", "university", "university_year"]}, "evidence": "located in Sweden refers to country_name = 'Sweden'; number of students refers to num_students"}
{"sample_id": 8000, "db_id": "university", "final": {"question": "Which country is the University of Oxford located?", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE university_name = 'University of Oxford'", "source_tables": ["country", "university"]}, "evidence": "University of Oxford refers to university_name = 'University of Oxford'; which country refers to country_name"}
{"sample_id": 8104, "db_id": "university", "final": {"question": "Show the name of the university with the lowest number of students in 2015.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 ORDER BY T1.num_students ASC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "lowest number of students refers to MIN(num_students); in 2015 refers to year = 2015; name of university refers to university_name;"}
{"sample_id": 8009, "db_id": "university", "final": {"question": "Compute the average percentage of female students.", "sql": "SELECT AVG(pct_female_students) FROM university_year", "source_tables": ["university_year"]}, "evidence": "average percentage of female students refers to avg(pct_female_students)"}
{"sample_id": 8015, "db_id": "university", "final": {"question": "Give the location of the university ID 112.", "sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.id = 112", "source_tables": ["country", "university"]}, "evidence": "location refers to country_name"}
{"sample_id": 8058, "db_id": "university", "final": {"question": "Calculate the number of female students at Arizona State University in 2014.", "sql": "SELECT CAST(T2.num_students * T2.pct_female_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Arizona State University' AND T2.year = 2014", "source_tables": ["university", "university_year"]}, "evidence": "female students refers to DIVIDE(MULTIPLY(pct_female_students, num_students), 100); at Arizona State University refers to university_name = 'Arizona State University'; in 2014 refers to year = 2014"}
{"sample_id": 8129, "db_id": "university", "final": {"question": "In what year does the Brown University score the highest?", "sql": "SELECT T1.year FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Brown University' ORDER BY T1.score DESC LIMIT 1", "source_tables": ["university", "university_ranking_year"]}, "evidence": "Brown University refers to university_name = 'Brown University'; score the highest refers to MAX(score)"}
{"sample_id": 8051, "db_id": "university", "final": {"question": "How many universities had above 30% of international students in 2013?", "sql": "SELECT COUNT(*) FROM university_year WHERE pct_international_students > 30 AND year = 2013", "source_tables": ["university_year"]}, "evidence": "had above 30% of international students refers to pct_international_students > 30; in 2013 refers to year = 2013"}
{"sample_id": 8073, "db_id": "university", "final": {"question": "How many students did Harvard University have in 2011?", "sql": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year = 2011", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; Harvard University refers to university_name = 'Harvard University';"}
{"sample_id": 8065, "db_id": "university", "final": {"question": "Calculate the average score per university under Alumni criteria in 2008.", "sql": "SELECT AVG(T2.score) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Alumni' AND T2.year = 2008", "source_tables": ["ranking_criteria", "university_ranking_year"]}, "evidence": "under Alumni criteria refers to criteria_name = 'Alumni'; in 2008 refers to year = 2008; average score refers to DIVIDE(SUM(score), COUNT(university_id))"}
{"sample_id": 8071, "db_id": "university", "final": {"question": "Please list the IDs of the universities with the top 3 female students percentage in 2011.", "sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY pct_female_students DESC LIMIT 3", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; top 3 female students percentage refers to MAX(pct_female_students) LIMIT 3; ID of the university refers to university_id"}
{"sample_id": 8011, "db_id": "university", "final": {"question": "What is the university ID of Harvard University?", "sql": "SELECT id FROM university WHERE university_name = 'Harvard University'", "source_tables": ["university"]}, "evidence": "of Harvard University refers to university_name = 'Harvard University';"}
{"sample_id": 8103, "db_id": "university", "final": {"question": "Calculate the number of international students of University of Wisconsin-Madison in 2013.", "sql": "SELECT CAST(T1.num_students * T1.pct_international_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013 AND T2.university_name = 'University of Wisconsin-Madison'", "source_tables": ["university", "university_year"]}, "evidence": "international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); University of Wisconsin-Madison refers to university_name = 'University of Wisconsin-Madison'; in 2013 refers to year = 2013"}
{"sample_id": 8111, "db_id": "university", "final": {"question": "Provide the criteria name of the ranking criteria ID 13.", "sql": "SELECT criteria_name FROM ranking_criteria WHERE id = 13", "source_tables": ["ranking_criteria"]}, "evidence": ""}
{"sample_id": 8006, "db_id": "university", "final": {"question": "What are the names of the top 5 universities with the highest number of international students?", "sql": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY (CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) DESC LIMIT 5", "source_tables": ["university", "university_year"]}, "evidence": "highest number of international students refers to MAX(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)); name of university refers to university_name;"}
{"sample_id": 8018, "db_id": "university", "final": {"question": "List the name of universities located in Spain.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Spain'", "source_tables": ["country", "university"]}, "evidence": "name of universities refers to university_name; located in Spain refers to country_name = 'Spain';"}
{"sample_id": 8110, "db_id": "university", "final": {"question": "What is the ID of university with the largest percentage of international students?", "sql": "SELECT university_id FROM university_year ORDER BY pct_international_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "largest percentage of international students refers to MAX(pct_international_students); ID of university refers to university_id"}
{"sample_id": 8070, "db_id": "university", "final": {"question": "Among the universities with over 20000 students in 2011, how many of them have an international students percentage of over 25% in the same year?", "sql": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND pct_international_students > 25 AND num_students > 20000", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; with over 20000 students refers to num_students > 20000; international students percentage of over 25% refers to pct_international_students > 25;"}
{"sample_id": 8121, "db_id": "university", "final": {"question": "How many female students are there in University of Pennsylvania in 2011?", "sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'University of Pennsylvania'", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); University of Pennsylvania refers to a university name;"}
{"sample_id": 8066, "db_id": "university", "final": {"question": "Name the university and country which had the highest number of international students in 2015.", "sql": "SELECT T1.university_name, T3.country_name FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2015 ORDER BY T2.num_students DESC LIMIT 1", "source_tables": ["country", "university", "university_year"]}, "evidence": "highest number of international students refers to MAX(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)); in 2015 refers to year = 2015; name of university refers to university_name;"}
{"sample_id": 8017, "db_id": "university", "final": {"question": "What is the ranking criteria ID of Brown University in 2014?", "sql": "SELECT T1.ranking_criteria_id FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Brown University' AND T1.year = 2014", "source_tables": ["university", "university_ranking_year"]}, "evidence": "Brown University refers to university_name = 'Brown University'; in 2014 refers to year = 2014"}
{"sample_id": 7994, "db_id": "university", "final": {"question": "What is the name of the university that had the highest number of international students for 6 consecutive years?", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.pct_international_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "had the highest number of international students refers to max(pct_international_students); for 6 consecutive years refers to count(SUBTRACT(year, rm)) > = 6; name of university refers to university_name;"}
{"sample_id": 8099, "db_id": "university", "final": {"question": "For the University of Southampton in 2015, on which criteria did it score the best?", "sql": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'University of Southampton' AND T2.year = 2015 ORDER BY T2.score DESC LIMIT 1", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "University of Southampton refers to university_name = 'University of Southampton'; in 2015 refers to year = 2015; score the best refers to MAX(score); which criteria refers to criteria_name"}
{"sample_id": 8020, "db_id": "university", "final": {"question": "Compute the average score of the university located in Brazil.", "sql": "SELECT AVG(T2.score) FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Brazil'", "source_tables": ["university_ranking_year", "country", "university"]}, "evidence": "average score refers to avg(score); located in Brazil refers to country_name = 'Brazil';"}
{"sample_id": 8028, "db_id": "university", "final": {"question": "Among all universities, how many female students were there in 2011?", "sql": "SELECT SUM(CAST(num_students * pct_female_students AS REAL) / 100) FROM university_year WHERE year = 2011", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year = 2011; female students refers to SUM(DIVIDE(MULTIPLY(num_students, pct_female_students), 100))"}
{"sample_id": 8049, "db_id": "university", "final": {"question": "Provide the ranking system ID of the Center for World University Rankings.", "sql": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system"]}, "evidence": "the Center for World University Rankings refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8117, "db_id": "university", "final": {"question": "Give the criteria name where Harvard University scored 100.", "sql": "SELECT DISTINCT T3.criteria_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id INNER JOIN ranking_criteria AS T3 ON T3.id = T2.ranking_criteria_id WHERE T1.university_name = 'Harvard University' AND T2.score = 100", "source_tables": ["university_ranking_year", "ranking_criteria", "university"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; scored 100 refers to score = 100"}
{"sample_id": 7997, "db_id": "university", "final": {"question": "How many universities are there in the United States of America?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'United States of America'", "source_tables": ["country", "university"]}, "evidence": "in the United States of America refers to country_name = 'United States of America';"}
{"sample_id": 8012, "db_id": "university", "final": {"question": "List the university ID of the university that scored 100 in 2011.", "sql": "SELECT university_id FROM university_ranking_year WHERE score = 100 AND year = 2011", "source_tables": ["university_ranking_year"]}, "evidence": "in 2011 refers to year = 2011; score = 100"}
{"sample_id": 7991, "db_id": "university", "final": {"question": "How many criteria belong to ranking system ID 3?", "sql": "SELECT COUNT(id) FROM ranking_criteria WHERE ranking_system_id = 3", "source_tables": ["ranking_criteria"]}, "evidence": ""}
{"sample_id": 8091, "db_id": "university", "final": {"question": "For the university id 268, show its number of students in 2013.", "sql": "SELECT num_students FROM university_year WHERE university_id = 268 AND year = 2013", "source_tables": ["university_year"]}, "evidence": "number of students refers to num_students; in 2013 refers to year = 2013"}
{"sample_id": 8092, "db_id": "university", "final": {"question": "Show the name of country id 66.", "sql": "SELECT country_name FROM country WHERE id = 66", "source_tables": ["country"]}, "evidence": "name of country refers to country_name"}
{"sample_id": 8132, "db_id": "university", "final": {"question": "What is the location and number of female students in university ID 23 in 2011?", "sql": "SELECT T3.country_name, CAST(T2.num_students * T2.pct_female_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2011 AND T1.id = 23", "source_tables": ["country", "university", "university_year"]}, "evidence": "in 2011 refers to year 2011; female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); location refers to country_name"}
{"sample_id": 8002, "db_id": "university", "final": {"question": "What are the names of the criteria under Center for World University Rankings?", "sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "names of the criteria refers to criteria_name; under Center for World University Rankings refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8086, "db_id": "university", "final": {"question": "Among the universities with a score in teaching of over 90 in 2011, what is the percentage of those in the United States of America?", "sql": "SELECT CAST(SUM(CASE WHEN T4.country_name = 'United States of America' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90", "source_tables": ["country", "university", "ranking_criteria", "university_ranking_year"]}, "evidence": "in 2011 refers to year 2011; in teaching refers to\u00a0 criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; in the United States of America refers to country_name = 'United States of America'; percentage refers to DIVIDE(COUNT(country_name = 'United States of America'), COUNT(id))"}
{"sample_id": 8084, "db_id": "university", "final": {"question": "Among the universities in Australia, how many of them have a student staff ratio of over 15 in 2011?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Australia' AND T2.student_staff_ratio > 15 AND T2.year = 2011", "source_tables": ["country", "university", "university_year"]}, "evidence": "in 2011 refers to year 2011; in Australia refers to country_name = 'Australia'; student staff ratio of over 15 refers to student_staff_ratio > 15"}
{"sample_id": 8118, "db_id": "university", "final": {"question": "Provide the university name and ID of the university found in Turkey.", "sql": "SELECT T1.university_name, T1.id FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Turkey'", "source_tables": ["country", "university"]}, "evidence": "found in Turkey refers to country_name = 'Turkey';"}
{"sample_id": 8019, "db_id": "university", "final": {"question": "What is the criteria name of the university ID 32 in 2015?", "sql": "SELECT T1.criteria_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T2.university_id = 32 AND T2.year = 2015", "source_tables": ["ranking_criteria", "university_ranking_year"]}, "evidence": "in 2015 refers to year = 2015"}
{"sample_id": 8130, "db_id": "university", "final": {"question": "Calculate the average score of Emory University from 2011 to 2016.", "sql": "SELECT AVG(T1.score) FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Emory University' AND T1.year BETWEEN 2011 AND 2016", "source_tables": ["university", "university_ranking_year"]}, "evidence": "average score refers to avg(score); Emory University refers to university_name = 'Emory University'; from 2011 to 2016 refers to year BETWEEN 2011 AND 2016;"}
{"sample_id": 8083, "db_id": "university", "final": {"question": "Please list the names of all the universities that scored under 60 in teaching in 2011 and are in the United States of America.", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T4.country_name = 'United States of America' AND T2.year = 2011 AND T2.score < 60 AND T1.criteria_name = 'Teaching'", "source_tables": ["country", "university", "ranking_criteria", "university_ranking_year"]}, "evidence": "scored under 60 refers to score < 60; in 2011 refers to year 2011; in teaching refers to criteria_name = 'Teaching'; in the United States of America refers to country_name = 'United States of America';"}
{"sample_id": 8126, "db_id": "university", "final": {"question": "Calculate number of male students in Emory University in 2011.", "sql": "SELECT CAST((T1.num_students - (T1.num_students * T1.pct_female_students)) AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Emory University' AND T1.year = 2011", "source_tables": ["university", "university_year"]}, "evidence": "in 2011 refers to year 2011; number of male students refers to SUBTRACT(num_students, DIVIDE(MULTIPLY(num_students, pct_male_students), 100)); in Emory University refers to university_name = 'Emory University'"}
{"sample_id": 8059, "db_id": "university", "final": {"question": "Provide the universities which got the highest scores.", "sql": "SELECT T1.university_name FROM university AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.university_id GROUP BY T1.university_name ORDER BY SUM(T2.score) DESC LIMIT 1", "source_tables": ["university_ranking_year", "university"]}, "evidence": "got the highest scores refers to MAX(SUM(score))"}
{"sample_id": 8039, "db_id": "university", "final": {"question": "What is the name of the ranking system for Teaching criteria?", "sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Teaching'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "Teaching criteria refers to criteria_name = 'Teaching'; name of the ranking system refers to system_name"}
{"sample_id": 8043, "db_id": "university", "final": {"question": "How many criteria are associated with ranking system Center for World University Rankings?", "sql": "SELECT COUNT(T2.criteria_name) FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Center for World University Rankings'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "ranking system Center for World University Rankings refers to system_name = 'Center for World University Rankings';"}
{"sample_id": 8134, "db_id": "university", "final": {"question": "Among the universities in United States of America, what is the percentage of female students in year 2016?", "sql": "SELECT SUM(CAST(T2.pct_female_students * T2.num_students AS REAL) / 100) * 100 / SUM(T2.num_students) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'United States of America' AND T2.year = 2016", "source_tables": ["country", "university", "university_year"]}, "evidence": "female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); in United States of America refers to country_name = 'United States of America'; percentage refers to DIVIDE(SUM(DIVIDE(MULTIPLY(num_students, pct_female_students), 100)), SUM(num_students))"}
{"sample_id": 8076, "db_id": "university", "final": {"question": "Among the universities in Australia, how many of them have more than 15000 students in 2011?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Australia' AND T2.year = 2011 AND T2.num_students > 15000", "source_tables": ["country", "university", "university_year"]}, "evidence": "in 2011 refers to year 2011; have more than 15000 students refers to num_students > 15000; in Australia refers to country_name = 'Australia';"}
{"sample_id": 8025, "db_id": "university", "final": {"question": "Provide the country name of universities with the number of students greater than 98% of the average student population of all universities in 2013.", "sql": "SELECT DISTINCT T3.country_name FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T2.year = 2013 AND T2.num_students * 100 > ( SELECT AVG(num_students) FROM university_year ) * 98", "source_tables": ["country", "university", "university_year"]}, "evidence": "number of students greater than 98% of the average student population of all universities refers to num_students >\u00a0 MULTPLY(num_students, 0.98); in 2013 refers to year = 2013"}
{"sample_id": 8133, "db_id": "university", "final": {"question": "How many universities scored 40 in teaching criteria?", "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T2.score = 40 AND T1.criteria_name = 'Teaching' AND T2.score = 40", "source_tables": ["ranking_criteria", "university_ranking_year"]}, "evidence": "scored 40 refers to score = 40; in teaching refers to criteria_name = 'Teaching'"}
{"sample_id": 7998, "db_id": "university", "final": {"question": "In 2016, what is the name of the university in Australia with the highest score in Citations criteria?", "sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id INNER JOIN country AS T4 ON T4.id = T3.country_id WHERE T1.criteria_name = 'Citations' AND T2.year = 2016 AND T1.id = 4 AND T4.country_name = 'Australia' ORDER BY T2.score DESC LIMIT 1", "source_tables": ["country", "university", "ranking_criteria", "university_ranking_year"]}, "evidence": "In 2016 refers to year = 2016; name of the university refers to university_name; in Australia refers to country_name = 'Australia'; in Citations criteria refers to criteria_name = 'Citations'; highest score refers to MAX(score)"}
{"sample_id": 8131, "db_id": "university", "final": {"question": "Give the name of the university with the most number of students in 2015.", "sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2015 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university", "university_year"]}, "evidence": "most number of students refers to MAX(num_students); in 2015 refers to year = 2015; name of university refers to university_name;"}
{"sample_id": 8046, "db_id": "university", "final": {"question": "What is the difference in overall student enrollment and international student enrollment at the Harvard university from 2011 to 2012?", "sql": "SELECT SUM(T1.num_students) - SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Harvard University' AND T1.year BETWEEN 2011 AND 2012", "source_tables": ["university", "university_year"]}, "evidence": "Harvard University refers to university_name = 'Harvard University'; difference in overall student enrollment and international student refers to SUBTRACT(SUM(num_students), SUM(DIVIDE(MULTIPLY(pct_international_students, num_students), 100))); from 2011 to 2012 refers to year BETWEEN 2011 AND 2012"}
{"sample_id": 8120, "db_id": "university", "final": {"question": "Give the name and score of the university ID 124.", "sql": "SELECT T2.university_name, T1.score FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.id = 124", "source_tables": ["university", "university_ranking_year"]}, "evidence": "name of university refers to university_name;"}
{"sample_id": 8041, "db_id": "university", "final": {"question": "In Argentina, how many universities are there?", "sql": "SELECT COUNT(*) FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Argentina'", "source_tables": ["country", "university"]}, "evidence": "In Argentina refers to country_name = 'Argentina';"}
{"sample_id": 8008, "db_id": "university", "final": {"question": "Give the year where a university had the lowest number of students.", "sql": "SELECT year FROM university_year ORDER BY num_students ASC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "had the lowest number of students refers to MIN(num_students)"}
{"sample_id": 8029, "db_id": "university", "final": {"question": "What is the student staff ratio at the university with the greatest student staff ratio of all time?", "sql": "SELECT MAX(student_staff_ratio) FROM university_year ORDER BY student_staff_ratio DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "greatest student staff ratio of all time refers to max(student_staff_ratio)"}
{"sample_id": 8068, "db_id": "university", "final": {"question": "What is the ID of the university with the most students in 2011?", "sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011; with the most students refers to MAX(num_students); ID of the university refers to university_id"}
{"sample_id": 8114, "db_id": "university", "final": {"question": "Calculate the average score of university ID 79 between year 2013 to 2015.", "sql": "SELECT AVG(score) FROM university_ranking_year WHERE year BETWEEN 2013 AND 2015 AND university_id = 79", "source_tables": ["university_ranking_year"]}, "evidence": "average score refers to avg(score); between year 2013 to 2015 refers to year BETWEEN 2013 AND 2015"}
{"sample_id": 8108, "db_id": "university", "final": {"question": "What is the score of university ID 68 in 2015?", "sql": "SELECT score FROM university_ranking_year WHERE year = 2015 AND university_id = 68", "source_tables": ["university_ranking_year"]}, "evidence": "in 2015 refers to year = 2015"}
{"sample_id": 8080, "db_id": "university", "final": {"question": "Among the universities with a score in teaching of over 90 in 2011, how many of them are in the United States of America?", "sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90", "source_tables": ["university", "ranking_criteria", "university_ranking_year"]}, "evidence": "in 2011 refers to year 2011; in teaching refers to\u00a0 criteria_name = 'Teaching'; score in teaching of over 90 refers to score > 90; in the United States of America refers to country_name = 'United States of America';"}
{"sample_id": 7988, "db_id": "university", "final": {"question": "What is the ranking system ID of the award criteria?", "sql": "SELECT ranking_system_id FROM ranking_criteria WHERE criteria_name = 'Award'", "source_tables": ["ranking_criteria"]}, "evidence": "award criteria refers to criteria_name = 'Award';"}
{"sample_id": 8067, "db_id": "university", "final": {"question": "How many students were there in university ID 1 in 2011?", "sql": "SELECT num_students FROM university_year WHERE year = 2011 AND university_id = 1", "source_tables": ["university_year"]}, "evidence": "in 2011 refers to year 2011;"}
{"sample_id": 8022, "db_id": "university", "final": {"question": "Give the score and number of international students in university ID 100 in 2015.", "sql": "SELECT CAST(T1.num_students * T1.pct_international_students AS REAL) / 100, T2.score FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.year = 2015 AND T1.university_id = 100", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "number of international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); in 2015 refers to year = 2015"}
{"sample_id": 8109, "db_id": "university", "final": {"question": "Provide the country ID of Cyprus.", "sql": "SELECT id FROM country WHERE country_name = 'Cyprus'", "source_tables": ["country"]}, "evidence": "Cyprus refers to country_name = 'Cyprus';"}
{"sample_id": 8107, "db_id": "university", "final": {"question": "Calculate the average number of students of all universities in 2012.", "sql": "SELECT AVG(num_students) FROM university_year WHERE year = 2012", "source_tables": ["university_year"]}, "evidence": "average number of students refers to avg(num_students); in 2012 refers to year = 2012"}
{"sample_id": 8013, "db_id": "university", "final": {"question": "Provide the ranking system of the ranking criteria named Quality of Education Rank.", "sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Quality of Education Rank'", "source_tables": ["ranking_system", "ranking_criteria"]}, "evidence": "criteria named Quality of Education Rank refers to criteria_name = 'Quality of Education Rank'; ranking system refers to system_name;"}
{"sample_id": 8116, "db_id": "university", "final": {"question": "Provide the score of the most populated university in 2011.", "sql": "SELECT T2.score FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1", "source_tables": ["university_ranking_year", "university_year"]}, "evidence": "most populated university refers to MAX(num_students); in 2011 refers to year = 2011;"}
{"sample_id": 8191, "db_id": "sales_in_weather", "final": {"question": "What are the top 3 stations that have sold the highest quantities for an item in a single day?", "sql": "SELECT T2.station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr ORDER BY T1.units DESC LIMIT 3", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "highest quantity refers to Max(units); station refers to station_nbr"}
{"sample_id": 8206, "db_id": "sales_in_weather", "final": {"question": "List out stations number and items sold by store 17.", "sql": "SELECT T1.station_nbr, T2.item_nbr FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.store_nbr = 17 GROUP BY T1.station_nbr, T2.item_nbr", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "station number refers to station_nbr; store 17 refers to store_nbr = 17"}
{"sample_id": 8144, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.5 were sold in store no.3 on the day in 2012 when the max temperature was the highest?", "sql": "SELECT T1.units FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.\"date\", 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY tmax DESC LIMIT 1", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item no.5 refers to item_nbr = 5; store no. 3 refers to store_nbr = 3; when the max temperature was highest refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012'"}
{"sample_id": 8211, "db_id": "sales_in_weather", "final": {"question": "What was the difference of number of units sold in station number 1 and number 2 on year 2012?", "sql": "SELECT SUM(CASE WHEN T1.station_nbr = 1 THEN units ELSE 0 END) - SUM(CASE WHEN T1.station_nbr = 2 THEN units ELSE 0 END) FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE T2.\"date\" LIKE '%2012%'", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "station 1 refers to station_nbr = 1; station 2 refers to station_nbr = 2; on year 2012 refers to substring (date, 1, 4) = '2012'; difference = Subtract (Sum(units where station_nbr = 1), Sum(units where station_nbr = 2))"}
{"sample_id": 8216, "db_id": "sales_in_weather", "final": {"question": "What was the average temperature differences during May 2012 for store number 6 and 7?", "sql": "SELECT ( SELECT CAST(SUM(tavg) AS REAL) / COUNT(\"date\") FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr AND T1.\"date\" LIKE '%2012-05%' AND T2.store_nbr = 6 ) - ( SELECT CAST(SUM(tavg) AS REAL) / COUNT(\"date\") FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" LIKE '%2012-05%' AND T2.store_nbr = 7 )", "source_tables": ["weather", "relation"]}, "evidence": "during May 2012 refers to SUBSTR(date, 1, 7) = '2012-05'; store number 6 refers to store_nbr = 6; store number 7 refers to store_nbr = 7; average temperature difference = Subtract (Divide (Sum(tavg), Count (date) where the store_nbr = 6), Divide (Sum(tavg), Count(date) where store_nbr = 7))"}
{"sample_id": 8179, "db_id": "sales_in_weather", "final": {"question": "How many items weren't sold in store 2 on 1/1/2012?", "sql": "SELECT COUNT(item_nbr) FROM sales_in_weather WHERE store_nbr = 2 AND units = 0 AND \"date\" = '2012-01-01'", "source_tables": ["sales_in_weather"]}, "evidence": "store no.2 refers to store_nbr = 2; item weren't sold refers to units = 0; on 1/1/2012 refers to date = '2012-01-01'"}
{"sample_id": 8153, "db_id": "sales_in_weather", "final": {"question": "What is the ID of the item that sold the best on the day with the highest max temperature in store no.3 in 2012?", "sql": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' AND tmax = ( SELECT MAX(tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' ) GROUP BY T1.item_nbr ORDER BY SUM(units) DESC LIMIT 1", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "highest max temperature refers to Max(tmax); store no.3 refers to store_nbr = 3; in 2012 refers to substring (date, 1, 4) = '2012'; sold the best refers to Max(units); ID of the item refers to item_nbr"}
{"sample_id": 8186, "db_id": "sales_in_weather", "final": {"question": "What is the most purchased products during the rainy days in June 2013 in weather station 9?", "sql": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T3.station_nbr = 9 AND T1.\"date\" LIKE '%2013-06%' AND codesum = 'RA' ORDER BY T1.units DESC LIMIT 1", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "most purchased product refers to Max(units); during the rainy day refers to codesum = RA; in June 2013 refers to SUBSTR(date, 1, 7) = '2013-06'; weather station 9 refers to station_nbr = 9; product refers to item_nbr"}
{"sample_id": 8187, "db_id": "sales_in_weather", "final": {"question": "Which station sold the highest quantity of item number 5 overall?", "sql": "SELECT T2.station_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 5 GROUP BY T2.station_nbr ORDER BY SUM(T1.units) DESC LIMIT 1", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "item number 5 refers to item_nbr = 5; sold highest quantity refers to Max(Sum(units)); station refers to station_nbr"}
{"sample_id": 8215, "db_id": "sales_in_weather", "final": {"question": "What was the total unit sold for item 10 when the average temperature was below the median temperature?", "sql": "SELECT SUM(T5.units) FROM weather AS T4 INNER JOIN sales_in_weather AS T5 ON T4.\"date\" = T5.\"date\" INNER JOIN relation AS T6 ON T5.store_nbr = T6.store_nbr WHERE T5.item_nbr = 10 AND T4.tavg < ( SELECT AVG(T1.tavg) FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.\"date\" = T2.\"date\" INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 10 )", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item 10 refers to item_nbr = 10; average temperature below median temperature refers to tavg < avg(tavg); total units refers to Sum(units)"}
{"sample_id": 8148, "db_id": "sales_in_weather", "final": {"question": "Among the days on which over 100 units of item no.5 were sold in store no.3, on which date was the temperature range the biggest?", "sql": "SELECT T2.\"date\" FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T2.item_nbr = 5 AND T2.units > 100 ORDER BY tmax - tmin DESC LIMIT 1", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "over 100 units refers to units > 100; item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; the temperature range was the biggest refers to Max(Subtract(tmax, tmin))"}
{"sample_id": 8209, "db_id": "sales_in_weather", "final": {"question": "Which items from store 1 have the highest units sold during rainy day?", "sql": "SELECT T2.item_nbr FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.\"date\" = T2.\"date\" INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr AND T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 1 AND T1.codesum LIKE '%' OR 'RA' OR '%' GROUP BY T2.item_nbr ORDER BY T2.units DESC LIMIT 1", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "store 1 refers to store_nbr = 1; highest unit sold refers to Max(units); during rainy day refers to codesum like '%'||'RA'||'%'; item refers to item_nbr"}
{"sample_id": 8185, "db_id": "sales_in_weather", "final": {"question": "Among the stores in weather station 14 in February 2014, which store had sold no less than 300 quantities for item number 44 in a single day?", "sql": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T2.station_nbr = 14 AND T1.\"date\" LIKE '%2014-02%' AND T1.item_nbr = 44 AND units >= 300", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "weather station 14 refers to station_nbr = 14; February 2014 refers to substring (date, 1, 7) = '2014-02' ; sold no less than 300 quantities refers to units > = 300; item no.44 refers to item_nbr = 44; store refers to store_nbr"}
{"sample_id": 8201, "db_id": "sales_in_weather", "final": {"question": "What is the maximum and minimum temperature for station number 1 on 15 January 2012?", "sql": "SELECT tmax, tmin FROM weather WHERE station_nbr = 1 AND \"date\" = '2012-01-15'", "source_tables": ["weather"]}, "evidence": "station number 1 refers to station_nbr = 1 ; minimum temperature = tmin; maximum temperature = tmax; on 15 January 2012 refers to date = '2012-01-15'"}
{"sample_id": 8204, "db_id": "sales_in_weather", "final": {"question": "How many units of item 7 have been sold by store 7 when the snow is less than 5 inches?", "sql": "SELECT SUM(units) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr INNER JOIN sales_in_weather AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.store_nbr = 7 AND T3.item_nbr = 7 AND T1.snowfall < 5", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item 7 refers to item_nbr = 7; store 7 refers to store_nbr = 7; snow is less than 5 inches refers to snowfall < 5"}
{"sample_id": 8173, "db_id": "sales_in_weather", "final": {"question": "How many inches of total precipitation was recorded by the weather station of store no.2 on 2012/12/25?", "sql": "SELECT T1.preciptotal FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" = '2012-12-25' AND T2.store_nbr = 2", "source_tables": ["weather", "relation"]}, "evidence": "store no.2 refers to store_nbr = 2; on 2012/12/25 refers to date = '2012-12-25'; total precipitation refers to preciptotal"}
{"sample_id": 8161, "db_id": "sales_in_weather", "final": {"question": "Give the id of the weather station with most stores.", "sql": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(station_nbr) DESC LIMIT 1", "source_tables": ["relation"]}, "evidence": "station with more stores refers to Max(Count(store_nbr)); ID of weather station refers to station_nbr"}
{"sample_id": 8158, "db_id": "sales_in_weather", "final": {"question": "How many no.9 items from store no.11 were sold on 2012/12/7?", "sql": "SELECT units FROM sales_in_weather WHERE \"date\" = '2012-12-07' AND store_nbr = 11 AND item_nbr = 9", "source_tables": ["sales_in_weather"]}, "evidence": "no. 9 item refers to item_nbr = 9; store no.11 refers to store_nbr = 11; sold on 2012/12/7 refers to date = '2012-12-07'"}
{"sample_id": 8199, "db_id": "sales_in_weather", "final": {"question": "How many days did the sun rise before 5 AM?", "sql": "SELECT COUNT(DISTINCT \"date\") AS days FROM weather WHERE sunrise < time('05:00:00')", "source_tables": ["weather"]}, "evidence": "sunrise before 5 Am refers to sunrise < time ('5:00:00')"}
{"sample_id": 8212, "db_id": "sales_in_weather", "final": {"question": "What was the average temperature difference between store number 18 and 19 on 16 September 2022?", "sql": "SELECT SUM(CASE WHEN T1.store_nbr = 18 THEN T2.tavg ELSE 0 END) - SUM(CASE WHEN T1.store_nbr = 19 THEN T2.tavg ELSE 0 END) FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.\"date\" = '2012-09-16'", "source_tables": ["weather", "relation"]}, "evidence": "store number 18 refers to store_nbr = 18; store number 19 refers to store_nbr = 19; on 16 September 2022 refers to date = '2022-09-16'; average temperature difference = Subtract(tavg where store_nbr = 18, tavg where store_nbr = 19)"}
{"sample_id": 8188, "db_id": "sales_in_weather", "final": {"question": "What is the earliest sunrise recorded in the stations with no more than 1 store in February 2012?", "sql": "SELECT T1.station_nbr FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE sunrise IS NOT NULL AND T2.\"date\" LIKE '%2012-02%' AND T1.station_nbr IN ( SELECT station_nbr FROM relation GROUP BY station_nbr HAVING COUNT(store_nbr) = 1 ) ORDER BY sunrise LIMIT 1", "source_tables": ["weather", "relation"]}, "evidence": "in February 2012 refers to SUBSTR(date, 1, 7) = '2012-02'; earliest sunrise Min(sunrise);\u00a0 station with no more than 1 store refers to station_nbr where Count(store_nbr) = 1"}
{"sample_id": 8182, "db_id": "sales_in_weather", "final": {"question": "In March 2014, which weather stations recorded the highest number of days whose temperature is below the 30-year normal?", "sql": "SELECT station_nbr FROM weather WHERE SUBSTR(\"date\", 1, 4) = '2014' AND SUBSTR(\"date\", 6, 2) = '03' AND depart < 0 GROUP BY station_nbr HAVING COUNT(DISTINCT \"date\") = ( SELECT COUNT(DISTINCT \"date\") FROM weather WHERE SUBSTR(\"date\", 1, 4) = '2014' AND SUBSTR(\"date\", 6, 2) = '03' AND depart < 0 GROUP BY station_nbr ORDER BY COUNT(\"date\") DESC LIMIT 1 )", "source_tables": ["weather"]}, "evidence": "in March 2014 refers to substring (date, 1, 4) = '2014' and substring (date, 6, 2) = '03'; temperature is below the 30-year normal refers to depart < 0; highest number of days refers to Max(Count(date))"}
{"sample_id": 8154, "db_id": "sales_in_weather", "final": {"question": "On the day with the highest max temperature in 2012, how many items in store no.3 had no sales?", "sql": "SELECT COUNT(DISTINCT T1.item_nbr) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr AND T1.store_nbr = 3 AND SUBSTR(T1.\"date\", 1, 4) = '2012' AND T1.units = 0 GROUP BY T3.tmax ORDER BY T3.tmax DESC LIMIT 1", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "highest max temperature refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012'; store no.3 refers to store_nbr = 3; had no sale refers to units = 0"}
{"sample_id": 8210, "db_id": "sales_in_weather", "final": {"question": "What is the ratio of the highest and lowest temperature in store 11?", "sql": "SELECT CAST((MAX(T1.tmax) - MIN(T1.tmin)) AS REAL) / MIN(T1.tmin) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 11", "source_tables": ["weather", "relation"]}, "evidence": "store 11 refers to store_nbr = 11; highest temperature refers to Max(tmax); lowest temperature refers to Min(tmin); ration = Divide (Max(tmax), Min(tmin))"}
{"sample_id": 8213, "db_id": "sales_in_weather", "final": {"question": "How many units are being sold for item 1 when the average temperature is 83?", "sql": "SELECT SUM(units) FROM weather AS T1 INNER JOIN sales_in_weather AS T2 ON T1.\"date\" = T2.\"date\" INNER JOIN relation AS T3 ON T2.store_nbr = T3.store_nbr WHERE T2.item_nbr = 1 AND T1.tavg = 83", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item 1 refers to item_nbr = 1; when the average temperature is 83 refers to tavg = 83"}
{"sample_id": 8176, "db_id": "sales_in_weather", "final": {"question": "For the weather station has store no.9, what was the increased percentage of the average temperature from 2012/2/2 to 2012/2/3?", "sql": "SELECT CAST((SUM(CASE WHEN T1.\"date\" = '2012-02-03' THEN T1.tavg * 1 ELSE 0 END) - SUM(CASE WHEN T1.\"date\" = '2012-02-02' THEN T1.tavg * 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.\"date\" = '2012-02-02' THEN T1.tavg * 1 ELSE 0 END) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 9", "source_tables": ["weather", "relation"]}, "evidence": "store no.9 refers to store_nbr = 9; 2012/2/2 refers to date = '2012-02-02'; 2012/2/3 refers to date = '2012-02-03'; average temperature refers to tavg; increase percentage = Divide (Subtract (tavg where date = '2012-02-03', tavg where date = '2012-02-02'), tavg where date = '2012-02-02') * 100"}
{"sample_id": 8207, "db_id": "sales_in_weather", "final": {"question": "List out dates when haze is recorded in store 35.", "sql": "SELECT T1.\"date\" FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 35 AND T1.codesum LIKE '%' OR 'HZ' OR '%'", "source_tables": ["weather", "relation"]}, "evidence": "store 35 refers to store_nbr = 35; haze is recorded refers to codesum like '%'||'HZ'||'%'"}
{"sample_id": 8150, "db_id": "sales_in_weather", "final": {"question": "Please list the dates on which the sale of item no.5 in store no.3 exceeded 100 and the average wind speed exceeded 10.", "sql": "SELECT T1.\"date\" FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5 AND T1.units > 100 AND T3.avgspeed > 10", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; exceed 100 refers to units > 100; average wind speed exceeded 10 refers to avgspeed > 10"}
{"sample_id": 8142, "db_id": "sales_in_weather", "final": {"question": "On which day was the weather more windy in station no.1, 2012/1/1 or 2012/1/2?", "sql": "SELECT CASE WHEN (SUM(CASE WHEN \"date\" = '2012-01-01' THEN avgspeed ELSE 0 END) - SUM(CASE WHEN \"date\" = '2012-01-02' THEN avgspeed ELSE 0 END)) > 0 THEN '2012-01-01' ELSE '2012-01-02' END FROM weather WHERE station_nbr = 1", "source_tables": ["weather"]}, "evidence": "station no.1 refers to station_nbr = 1; 2012/1/1 refers to date = '2012-01-01'; 2012/1/2 refers to date = '2012-01-02'; more windy refers to Max(avgspeed)"}
{"sample_id": 8192, "db_id": "sales_in_weather", "final": {"question": "How many stores belong to the station with the highest recorded heat of all time?", "sql": "SELECT COUNT(T2.store_nbr) FROM ( SELECT station_nbr FROM weather ORDER BY heat DESC LIMIT 1 ) AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr", "source_tables": ["weather", "relation"]}, "evidence": "highest recorded heat refers to Max(heat); station refers to station_nbr"}
{"sample_id": 8157, "db_id": "sales_in_weather", "final": {"question": "Give the id of the bestsellers of store no.1 on 2012/1/1.", "sql": "SELECT item_nbr FROM sales_in_weather WHERE \"date\" = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1", "source_tables": ["sales_in_weather"]}, "evidence": "store no. 1 refers to store_nbr = 1; on 2012/1/1 refers to date = '2012-01-01'; best seller refers to Max(units); ID refers to item_nbr"}
{"sample_id": 8137, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.9 were sold in store no.1 on 2012/1/1?", "sql": "SELECT units FROM sales_in_weather WHERE \"date\" = '2012-01-01' AND store_nbr = 1 AND item_nbr = 9", "source_tables": ["sales_in_weather"]}, "evidence": "store no. 1 refers to store_nbr = 1; item no. 9 refers to item_nbr = 9; on 2012/1/1 refers to date = '2012-01-01'"}
{"sample_id": 8196, "db_id": "sales_in_weather", "final": {"question": "Between the stores under weather station 12, what is the percentage of item 5 sold in store 10 in 2014?", "sql": "SELECT CAST(SUM(CASE WHEN T2.store_nbr = 10 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr WHERE station_nbr = 12 AND item_nbr = 5 AND T2.\"date\" LIKE '%2014%'", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "weather station 12 refers to station_nbr = 12; item 5 refers to item_nbr = 5; 10 store refers to store_nbr = 10; in 2014 refers to SUBSTR(date, 1, 4) = '2014'; percentage = Divide (Sum(units where store_nbr = 10), Sum(units)) * 100"}
{"sample_id": 8172, "db_id": "sales_in_weather", "final": {"question": "Show the sea level status recorded by the weather station of store no.19 on 2013/2/24.", "sql": "SELECT T1.sealevel FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" = '2013-02-24' AND T2.store_nbr = 19", "source_tables": ["weather", "relation"]}, "evidence": "store no.19 refers to store_nbr = 19; on 2013/2/24 refers to date = '2013-02-24'; sea level status refers to sealevel"}
{"sample_id": 8169, "db_id": "sales_in_weather", "final": {"question": "Provide the sunrise time recorded by the home weather station of store no.30 on 2014/2/21.", "sql": "SELECT T1.sunrise FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" = '2014-02-21' AND store_nbr = 30", "source_tables": ["weather", "relation"]}, "evidence": "store no. 30 refers to store_nbr = 30; on 2014/2/21 refers to date = '2014-02-21'"}
{"sample_id": 8147, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.5 were sold in store no.3 on the day the temperature range was the biggest?", "sql": "SELECT t2.units FROM relation AS T1 INNER JOIN sales_in_weather AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T1.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T2.item_nbr = 5 ORDER BY t3.tmax - t3.tmin DESC LIMIT 1", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; when the temperature range was the biggest refers to Max(Subtract(tmax, tmin))"}
{"sample_id": 8205, "db_id": "sales_in_weather", "final": {"question": "How many items were sold by store 9 during a snowy day?", "sql": "SELECT COUNT(DISTINCT item_nbr) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr INNER JOIN sales_in_weather AS T3 ON T2.store_nbr = T3.store_nbr WHERE T3.store_nbr = 9 AND T1.snowfall <> 0 AND T1.snowfall IS NOT NULL", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "store 9 refers to store_nbr = 9; snowy day refers to snowfall < > 0 and snowfall is not null; item refers to item_nbr"}
{"sample_id": 8139, "db_id": "sales_in_weather", "final": {"question": "What is the ID of the item that sold the best on 2012/1/1 in store no.1?", "sql": "SELECT item_nbr FROM sales_in_weather WHERE \"date\" = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1", "source_tables": ["sales_in_weather"]}, "evidence": "sold on 2012/1/1 refers to date = '2012-01-01'; in store no.1 refers to store_nbr = 1; item sold the best refers to Max(units)"}
{"sample_id": 8140, "db_id": "sales_in_weather", "final": {"question": "What was the temperature range of station no.1 on 2012/1/1?", "sql": "SELECT tmax - tmin AS temrange FROM weather WHERE station_nbr = 1 AND \"date\" = '2012-01-01'", "source_tables": ["weather"]}, "evidence": "on 2012/1/1 refers to date = '2012-01-01'; temperature range refers to Subtract (tmax, tmin); station no.1 refers to station_nbr = 1"}
{"sample_id": 8175, "db_id": "sales_in_weather", "final": {"question": "What percentage was the total unit sales of store no.10 to the total sales of its weather station on 2014/10/31?", "sql": "SELECT CAST(SUM(CASE WHEN T2.store_nbr = 10 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.\"date\" = '2014-10-31'", "source_tables": ["relation", "sales_in_weather"]}, "evidence": "store no.10 refers to store_nbr = 10; on 2014/10/31 refers to date = '2014-10-31'; percentage = Divide (Sum(units where store_nbr = 10), Sum(units)) * 100"}
{"sample_id": 8165, "db_id": "sales_in_weather", "final": {"question": "For the home weather station of store no.15, what was the dew point on 2012/2/18?", "sql": "SELECT T1.dewpoint FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 15 AND T1.\"date\" = '2012-02-18'", "source_tables": ["weather", "relation"]}, "evidence": "store no. 15 refers to store_nbr = 15; on 2012/2/18 refers to date = '2012-02-18'"}
{"sample_id": 8145, "db_id": "sales_in_weather", "final": {"question": "What was the dew point on the day the most units of item no.5 were sold in store no.3 in 2012?", "sql": "SELECT dewpoint FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.\"date\", 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY units DESC LIMIT 1", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; in 2012 refers to SUBSTR(date, 1, 4) = '2012': most units sold refers to Max(units)"}
{"sample_id": 8155, "db_id": "sales_in_weather", "final": {"question": "How many units of item no.5 were sold in store no.3 on average on the days when the max temperature exceeded 90?", "sql": "SELECT CAST(SUM(T1.units) AS REAL) / COUNT(T1.\"date\") FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.item_nbr = 5 AND T3.tmax > 90", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3;\u00a0 when the maximum temperature exceed 90 refers to tmax > 90; average = Divide (Sum(units), Count(date))"}
{"sample_id": 8167, "db_id": "sales_in_weather", "final": {"question": "Give the number of stores which opened on the weather station that recorded the fastest average wind speed.", "sql": "SELECT COUNT(T.store_nbr) FROM ( SELECT DISTINCT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY avgspeed DESC LIMIT 1 ) ) T", "source_tables": ["weather", "relation"]}, "evidence": "fastest average wind speed refers to Max(avgspeed); number of store refers to count(store_nbr)"}
{"sample_id": 8193, "db_id": "sales_in_weather", "final": {"question": "On February 8, 2014, what is the minimum temperature in the station where store 29 belongs?", "sql": "SELECT tmin FROM relation AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.store_nbr = 29 AND T2.\"date\" = '2014-02-08'", "source_tables": ["weather", "relation"]}, "evidence": "On February 8, 2014 refers to date = '2014-02-08'; store 29 refers to store_nbr = 29; minimum temperature refers to tmin; station refers to station_nbr"}
{"sample_id": 8168, "db_id": "sales_in_weather", "final": {"question": "State the max temperature of the weather station which has the no.21 store on 2012/11/9.", "sql": "SELECT tmax FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 21 AND T1.\"date\" = '2012-11-09'", "source_tables": ["weather", "relation"]}, "evidence": "no.21 store refers to store_nbr = 21; on 2012/11/9 refers to date = '2012-11-09'; max temperature refers to tmax"}
{"sample_id": 8151, "db_id": "sales_in_weather", "final": {"question": "What is the total units of products sold on the day with the highest max temperature in store no.3 in 2012?", "sql": "SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' GROUP BY T3.tmax ORDER BY T3.tmax DESC LIMIT 1", "source_tables": ["weather", "relation", "sales_in_weather"]}, "evidence": "highest max temperature refers to Max(tmax); store no.3 refers to store_nbr = 3; in 2012 refers to substring (date, 1, 4) = '2012'; total units refers to sum(units)"}
{"sample_id": 8170, "db_id": "sales_in_weather", "final": {"question": "State the number of stores that belongs to the weather station which recorded the deepest snowfall.", "sql": "SELECT T2.store_nbr FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr ORDER BY snowfall DESC LIMIT 1", "source_tables": ["weather", "relation"]}, "evidence": "deepest snowfall refers to Max(snowfall); number of stores refers to store_nbr"}
{"sample_id": 8437, "db_id": "mondial_geo", "final": {"question": "Which nation has the highest GDP? Please give the nation's full name.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8250, "db_id": "mondial_geo", "final": {"question": "How many cities have a salt lake located in it?", "sql": "SELECT COUNT(T1.City) FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T2.Type = 'salt'", "source_tables": ["located", "lake"]}, "evidence": ""}
{"sample_id": 8466, "db_id": "mondial_geo", "final": {"question": "Which 2 countries' border span across the longest length? Provide the country's full name.", "sql": "SELECT T1.Name, T3.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 ORDER BY T2.Length DESC LIMIT 1", "source_tables": ["borders", "country"]}, "evidence": ""}
{"sample_id": 8348, "db_id": "mondial_geo", "final": {"question": "Which nations have a 100% Spanish-speaking population?", "sql": "SELECT Country FROM language WHERE Name = 'Spanish' AND Percentage = 100", "source_tables": ["language"]}, "evidence": ""}
{"sample_id": 8381, "db_id": "mondial_geo", "final": {"question": "What is the capital of the country that has the Licancabur Mountain?", "sql": "SELECT T4.Capital FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Province = T3.Name WHERE T1.Name = 'Licancabur'", "source_tables": ["mountain", "province", "geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8417, "db_id": "mondial_geo", "final": {"question": "In which city is the sea whose depth is 4232 meters less than that of the Bay of Bengal?", "sql": "SELECT T2.City FROM sea AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Sea INNER JOIN city AS T3 ON T3.Name = T2.City WHERE ( SELECT Depth FROM sea WHERE Name LIKE '%Bengal%' ) - T1.Depth = 4235", "source_tables": ["city", "sea", "located"]}, "evidence": ""}
{"sample_id": 8447, "db_id": "mondial_geo", "final": {"question": "How big is Africa, and how many nations make up the continent?", "sql": "SELECT T1.Area, COUNT(T3.Name) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Asia' GROUP BY T1.Name, T1.Area", "source_tables": ["encompasses", "continent", "country"]}, "evidence": "Area can measure the size of countries; Country and nation share the same meaning"}
{"sample_id": 8356, "db_id": "mondial_geo", "final": {"question": "How many people in Montenegro speaks Serbian?", "sql": "SELECT T1.Percentage * T2.Population FROM language AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Serbian' AND T2.Name = 'Montenegro'", "source_tables": ["language", "country"]}, "evidence": "Serbian is one language; Montenegro is a country located in Southeastern Europe"}
{"sample_id": 8492, "db_id": "mondial_geo", "final": {"question": "Which country has the 5th highest infant mortality rate?", "sql": "SELECT T2.Name FROM population AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code ORDER BY T1.Infant_Mortality DESC LIMIT 4, 1", "source_tables": ["population", "country"]}, "evidence": ""}
{"sample_id": 8374, "db_id": "mondial_geo", "final": {"question": "Which federal republic country in Europe has the most provinces, and what proportion of GDP is devoted to services?\nCalculate the population density as well.", "sql": "SELECT T1.Country, T2.Service , SUM(T1.Population) / SUM(T1.Area) FROM province AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country WHERE T1.Country IN ( SELECT Country FROM encompasses WHERE Continent = 'Europe' ) GROUP BY T1.Country, T2.Service ORDER BY COUNT(T1.Name) DESC LIMIT 1", "source_tables": ["economy", "encompasses", "province"]}, "evidence": "Republic is on of government forms; Percentage of Services of the GDP was mentioned in economy.Service; Population Density = Population / Area"}
{"sample_id": 8445, "db_id": "mondial_geo", "final": {"question": "What nations are considered British Overseas Territories?", "sql": "SELECT name FROM country WHERE CODE IN ( SELECT country FROM politics WHERE government = 'British Overseas Territories' )", "source_tables": ["politics", "country"]}, "evidence": "British Overseas Territories is one government form; Nation and country share the same meaning"}
{"sample_id": 8239, "db_id": "mondial_geo", "final": {"question": "What is the infant mortality rate for Ethiopia?", "sql": "SELECT T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Ethiopia'", "source_tables": ["population", "country"]}, "evidence": "Ethiopia is one of country names"}
{"sample_id": 8441, "db_id": "mondial_geo", "final": {"question": "Please provide a list of every nation where English is spoken and utilized entirely.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English' AND T2.Percentage = 100", "source_tables": ["language", "country"]}, "evidence": "Utilizition entirely means Percentage = 100% uses"}
{"sample_id": 8507, "db_id": "mondial_geo", "final": {"question": "List all deserts that are not between latitudes 30 and 40.", "sql": "SELECT Name FROM desert WHERE Latitude < 30 OR Latitude > 40", "source_tables": ["desert"]}, "evidence": ""}
{"sample_id": 8401, "db_id": "mondial_geo", "final": {"question": "When did Equatorial Guinea become independent?", "sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Equatorial Guinea'", "source_tables": ["politics", "country"]}, "evidence": "Equatorial Guinea is a country"}
{"sample_id": 8468, "db_id": "mondial_geo", "final": {"question": "State all countries with border greater than 4,000. List the full country name.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 WHERE T2.Length > 4000", "source_tables": ["borders", "country"]}, "evidence": ""}
{"sample_id": 8486, "db_id": "mondial_geo", "final": {"question": "List the full name its capital of all the countries with parliamentary democracy government.", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government = 'parliamentary democracy'", "source_tables": ["politics", "country"]}, "evidence": "Parliamentary democracy is a government form"}
{"sample_id": 8312, "db_id": "mondial_geo", "final": {"question": "Of the deserts on the America Continent, which one covers the greatest area?", "sql": "SELECT T5.Name FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN geo_desert AS T4 ON T4.Country = T1.Code INNER JOIN desert AS T5 ON T5.Name = T4.Desert WHERE T3.Name = 'America' ORDER BY T5.Area DESC LIMIT 1", "source_tables": ["encompasses", "desert", "continent", "geo_desert", "country"]}, "evidence": ""}
{"sample_id": 8455, "db_id": "mondial_geo", "final": {"question": "Which constitutional monarchy nations saw the greatest growth in the number of organizations after 1907?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE STRFTIME('%Y', T2.Established) > '1907' AND T3.Government = 'constitutional monarchy' GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.Name) DESC LIMIT 1", "source_tables": ["organization", "politics", "country"]}, "evidence": "Nation refers to country; Information of growth appears in the column Established"}
{"sample_id": 8327, "db_id": "mondial_geo", "final": {"question": "What is the average population for all cities location at Baltic Sea?", "sql": "SELECT AVG(T1.Population) FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN sea AS T3 ON T3.Name = T2.Sea WHERE T3.Name = 'Baltic Sea'", "source_tables": ["city", "sea", "located"]}, "evidence": "Baltic Sea is a sea located in Northern Europe"}
{"sample_id": 8235, "db_id": "mondial_geo", "final": {"question": "Which country has the highest infant mortality? Also state its population growth.", "sql": "SELECT T1.Name, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country ORDER BY T2.Infant_Mortality DESC LIMIT 1", "source_tables": ["population", "country"]}, "evidence": ""}
{"sample_id": 8430, "db_id": "mondial_geo", "final": {"question": "Which nation has the smallest population, and where is its capital located?", "sql": "SELECT Name, Capital FROM country ORDER BY Population ASC LIMIT 1", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 8308, "db_id": "mondial_geo", "final": {"question": "Among the countries whose government type is republic, how many of them shares a border that's longer than 200?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN borders AS T3 ON T3.Country1 = T2.Country WHERE T2.Government = 'republic' AND T3.Length > 200", "source_tables": ["politics", "borders", "country"]}, "evidence": ""}
{"sample_id": 8388, "db_id": "mondial_geo", "final": {"question": "What is the longitude of the island on which Mount Olympos is located?", "sql": "SELECT T3.Longitude FROM mountain AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Name = 'Olympos'", "source_tables": ["mountain", "mountainonisland", "island"]}, "evidence": ""}
{"sample_id": 8355, "db_id": "mondial_geo", "final": {"question": "Which country is home to the world's tiniest desert, and what are its longitude and latitude?", "sql": "SELECT T2.Country, T1.Latitude, T1.Longitude FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert WHERE T1.Name = ( SELECT Name FROM desert ORDER BY Area ASC LIMIT 1 )", "source_tables": ["desert", "geo_desert"]}, "evidence": ""}
{"sample_id": 8277, "db_id": "mondial_geo", "final": {"question": "What is the quantity of the mountains does Japan have?", "sql": "SELECT COUNT(DISTINCT T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan'", "source_tables": ["geo_mountain", "country"]}, "evidence": "Japan is one of country names"}
{"sample_id": 8439, "db_id": "mondial_geo", "final": {"question": "Which country has three different religions-Anglicanism, Christianity, and Roman Catholicism and uses 100% English?", "sql": "SELECT T2.Country FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country INNER JOIN language AS T3 ON T3.Country = T2.Country WHERE (T2.Name = 'Anglican' OR T2.Name = 'Christian' OR T2.Name = 'Roman Catholic') AND T3.Name = 'English' AND T3.Percentage = 100 GROUP BY T1.Name HAVING COUNT(T1.Name) = 3", "source_tables": ["religion", "language", "country"]}, "evidence": ""}
{"sample_id": 8431, "db_id": "mondial_geo", "final": {"question": "How much more space does Asia have than Europe?", "sql": "SELECT MAX(Area) - MIN(Area) FROM continent WHERE Name = 'Asia' OR Name = 'Europe'", "source_tables": ["continent"]}, "evidence": "Asia and Europe are two continents."}
{"sample_id": 8254, "db_id": "mondial_geo", "final": {"question": "Which country has the most languages spoken?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1", "source_tables": ["language", "country"]}, "evidence": ""}
{"sample_id": 8337, "db_id": "mondial_geo", "final": {"question": "What is the name and length of rivers located at 'Orleans' city?", "sql": "SELECT T3.Name, T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T1.Name = 'Orleans'", "source_tables": ["city", "river", "located"]}, "evidence": "Orleans is a city in north-central France"}
{"sample_id": 8320, "db_id": "mondial_geo", "final": {"question": "List all the cities in Sumatra and state the population of each city.", "sql": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T3.Name = 'Sumatra'", "source_tables": ["city", "locatedon", "island"]}, "evidence": "Sumatra is an island"}
{"sample_id": 8280, "db_id": "mondial_geo", "final": {"question": "What is the area of Egypt as a percentage of Asia?", "sql": "SELECT T2.Percentage FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent WHERE T3.Name = 'Asia' AND T1.Name = 'Egypt'", "source_tables": ["encompasses", "continent", "country"]}, "evidence": ""}
{"sample_id": 8273, "db_id": "mondial_geo", "final": {"question": "Which two countries have the longest border in the world? Give the full name of the country.", "sql": "SELECT T2.Country1, T2.Country2 FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length DESC LIMIT 1", "source_tables": ["borders", "country"]}, "evidence": ""}
{"sample_id": 8389, "db_id": "mondial_geo", "final": {"question": "For all the countries that is smaller than 100 square kilometres, which one has the most GDP?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Area < 100 ORDER BY T2.GDP DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8256, "db_id": "mondial_geo", "final": {"question": "Among the countries with a population of under 1000000, how many of them have over 2 languages?", "sql": "SELECT T2.Country FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T1.Population < 1000000 GROUP BY T2.Country HAVING COUNT(T1.Name) > 2", "source_tables": ["language", "country"]}, "evidence": ""}
{"sample_id": 8400, "db_id": "mondial_geo", "final": {"question": "How many mountains are there in the United States?", "sql": "SELECT COUNT(T1.Name) FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Province = T3.Name WHERE T4.Name = 'United States'", "source_tables": ["mountain", "province", "geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8483, "db_id": "mondial_geo", "final": {"question": "What is the population of the country with the highest infant mortality rate?", "sql": "SELECT T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country ORDER BY T2.Infant_Mortality DESC LIMIT 1", "source_tables": ["population", "country"]}, "evidence": ""}
{"sample_id": 8413, "db_id": "mondial_geo", "final": {"question": "Average length of the rivers flowing into the Donau River.", "sql": "SELECT * FROM river WHERE Name = 'Donau'", "source_tables": ["river"]}, "evidence": ""}
{"sample_id": 8294, "db_id": "mondial_geo", "final": {"question": "How many more people speak English than speak Scottish in United Kingdom?", "sql": "SELECT T3.Population * (T2.Percentage - T1.Percentage) FROM ethnicGroup AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country INNER JOIN country AS T3 ON T1.Country = T3.Code WHERE T1.Name = 'Scottish' AND T2.Name = 'English' AND T3.Name = 'United Kingdom'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "English and Scottish are two languages; United Kingdom is a country"}
{"sample_id": 8278, "db_id": "mondial_geo", "final": {"question": "What is the latitude of the island on which Mount Andrinjitra is located?", "sql": "SELECT T1.Latitude FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island WHERE T2.Mountain = 'Andringitra'", "source_tables": ["mountainonisland", "island"]}, "evidence": ""}
{"sample_id": 8378, "db_id": "mondial_geo", "final": {"question": "What's the percentage of people in Cayman Islands speak English?", "sql": "SELECT T1.Percentage FROM language AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Cayman Islands' AND T1.Name = 'English'", "source_tables": ["language", "country"]}, "evidence": "Cayman Islands is a country"}
{"sample_id": 8315, "db_id": "mondial_geo", "final": {"question": "Among the countries that use Bosnian as their language, how many of them don't have a positive population growth rate?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN population AS T3 ON T3.Country = T2.Country WHERE T2.Name = 'Bosnian' AND T3.Population_Growth < 0", "source_tables": ["population", "language", "country"]}, "evidence": ""}
{"sample_id": 8449, "db_id": "mondial_geo", "final": {"question": "What are the most recent three independent nations?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country ORDER BY T2.Independence DESC LIMIT 3", "source_tables": ["politics", "country"]}, "evidence": "Larger date of indepedence refers to more recent indepdence; Nation refers to country"}
{"sample_id": 8311, "db_id": "mondial_geo", "final": {"question": "How many mountains are there on the African Continent?", "sql": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN province AS T4 ON T4.Country = T1.Code INNER JOIN geo_mountain AS T5 ON T5.Province = T4.Name WHERE T3.Name = 'European'", "source_tables": ["encompasses", "province", "continent", "geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8249, "db_id": "mondial_geo", "final": {"question": "Among the countries whose agriculture percentage of the GDP is under 50%, how many of them have an area of over 8000000?", "sql": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Agriculture < 50 AND T1.Area > 8000000", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8457, "db_id": "mondial_geo", "final": {"question": "Please provide a list of every volcano mountain in the province of Ecuador.", "sql": "SELECT T1.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province WHERE T3.Name = 'Ecuador' AND T1.Type = 'volcano'", "source_tables": ["mountain", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8429, "db_id": "mondial_geo", "final": {"question": "What is the name of Anguilla's capital, and where is it located?", "sql": "SELECT Capital, Province FROM country WHERE Name = 'Anguilla'", "source_tables": ["country"]}, "evidence": "Anguilla is a country"}
{"sample_id": 8435, "db_id": "mondial_geo", "final": {"question": "Which lake is the largest in terms of both surface area and depth?", "sql": "SELECT Name FROM lake ORDER BY Area * Depth DESC LIMIT 1", "source_tables": ["lake"]}, "evidence": "Area * Depth can represents the metric in terms of both surface area and depth"}
{"sample_id": 8338, "db_id": "mondial_geo", "final": {"question": "What is the height of the mountain on which river 'Lech' is located? Please also provide its longitude and latitude.", "sql": "SELECT T1.Height, T1.Latitude, T1.Longitude FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN located AS T4 ON T4.Province = T3.Name WHERE T4.River = 'Lech'", "source_tables": ["mountain", "province", "geo_mountain", "located"]}, "evidence": ""}
{"sample_id": 8342, "db_id": "mondial_geo", "final": {"question": "List all rivers and province it is located that is greater than 1000 in length.", "sql": "SELECT T1.Province, T2.Name FROM geo_river AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name WHERE T2.Length > 1000", "source_tables": ["geo_river", "river"]}, "evidence": ""}
{"sample_id": 8478, "db_id": "mondial_geo", "final": {"question": "What is the border length between 'USA' and 'MEX'", "sql": "SELECT Length FROM borders WHERE Country1 = 'MEX' AND Country2 = 'USA'", "source_tables": ["borders"]}, "evidence": ""}
{"sample_id": 8509, "db_id": "mondial_geo", "final": {"question": "What is the provincial capital of the province with a population of less than 80,000 that has the highest average population per area?", "sql": "SELECT CapProv FROM province WHERE Population < 80000 ORDER BY Population / Area DESC LIMIT 1", "source_tables": ["province"]}, "evidence": "Average population per area = population / area"}
{"sample_id": 8335, "db_id": "mondial_geo", "final": {"question": "How many percent of the mountains on Andes which are non-volcanic?", "sql": "SELECT CAST(SUM(CASE WHEN type != 'volcano' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM mountain WHERE Mountains = 'Andes'", "source_tables": ["mountain"]}, "evidence": "Percent of non-volcanic mountains = count(mountains = 'Andes' & type ! = 'volcano') / count(mountains = 'Andes') * 100%"}
{"sample_id": 8420, "db_id": "mondial_geo", "final": {"question": "Which two Asian countries share a border that is 1,782 kilometers long?", "sql": "SELECT T4.Country1, T4.Country2 FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN borders AS T4 ON T4.Country1 = T3.Code WHERE T1.Name = 'Asia' AND T4.Length = 1782", "source_tables": ["encompasses", "continent", "borders", "country"]}, "evidence": ""}
{"sample_id": 8346, "db_id": "mondial_geo", "final": {"question": "For all cities where Seine is located at, which city has the greatest population? Calculate the difference from the city with least population.", "sql": "SELECT MAX(T1.Population) - MIN(T1.population) FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Seine'", "source_tables": ["city", "river", "located"]}, "evidence": "Seince is a river; Population disparity refers to difference between cities with greatest and least population; Difference between cities with greatest and least population means max(population) - min(population)"}
{"sample_id": 8221, "db_id": "mondial_geo", "final": {"question": "Find the GPD for Bosnia and Herzegovina and the type of government it belongs to.", "sql": "SELECT T1.GDP, T2.Government FROM economy AS T1 INNER JOIN politics AS T2 ON T1.Country = T2.Country INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Bosnia and Herzegovina'", "source_tables": ["economy", "politics", "country"]}, "evidence": ""}
{"sample_id": 8329, "db_id": "mondial_geo", "final": {"question": "Which are the rivers that flows to Black Sea?", "sql": "SELECT Name FROM river WHERE Sea = 'Black Sea'", "source_tables": ["river"]}, "evidence": "Black Sea is a sea located in Eastern Europe and Western Asia"}
{"sample_id": 8279, "db_id": "mondial_geo", "final": {"question": "Which two countries share the second highest mountain? Give the country code.", "sql": "SELECT T1.Code FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = ( SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1, 1 )", "source_tables": ["mountain", "geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8324, "db_id": "mondial_geo", "final": {"question": "In which province is city Glenrothes located? What is the capital of the province?", "sql": "SELECT T2.Province, T1.Capital FROM province AS T1 INNER JOIN city AS T2 ON T1.Name = T2.Province AND T1.Country = T2.Country WHERE T2.Name = 'Glenrothes'", "source_tables": ["city", "province"]}, "evidence": ""}
{"sample_id": 8485, "db_id": "mondial_geo", "final": {"question": "Find the government type for the country with the highest percentage GDP in Agriculture.", "sql": "SELECT T3.Government FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country ORDER BY T2.Agriculture DESC LIMIT 1", "source_tables": ["economy", "politics", "country"]}, "evidence": ""}
{"sample_id": 8350, "db_id": "mondial_geo", "final": {"question": "What are the names of the rivers in Canada?", "sql": "SELECT DISTINCT T1.River FROM located AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Canada' AND T1.River IS NOT NULL", "source_tables": ["country", "located"]}, "evidence": ""}
{"sample_id": 8297, "db_id": "mondial_geo", "final": {"question": "Please list the capital cities of the countries that have more than 4 mountains.", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country GROUP BY T1.Name, T1.Capital HAVING COUNT(T1.Name) > 4", "source_tables": ["geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8228, "db_id": "mondial_geo", "final": {"question": "Provide the country with republic government which has the highest population growth?", "sql": "SELECT T2.Country FROM population AS T1 INNER JOIN politics AS T2 ON T1.Country = T2.Country WHERE T2.Government = 'republic' ORDER BY T1.Population_Growth DESC LIMIT 1", "source_tables": ["population", "politics"]}, "evidence": ""}
{"sample_id": 8340, "db_id": "mondial_geo", "final": {"question": "Which mountain does the river source Blue Nile located? State the height of the mountain.", "sql": "SELECT T1.Name, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN geo_source AS T4 ON T4.Province = T3.Name WHERE T4.River = 'Blue Nile'", "source_tables": ["geo_source", "mountain", "province", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8368, "db_id": "mondial_geo", "final": {"question": "What are the names of the sea that can be found on the island with the biggest area?", "sql": "SELECT T2.Name FROM islandIn AS T1 INNER JOIN sea AS T2 ON T2.Name = T1.Sea WHERE T1.Island = ( SELECT Name FROM island ORDER BY Area DESC LIMIT 1 )", "source_tables": ["islandin", "sea", "island"]}, "evidence": ""}
{"sample_id": 8323, "db_id": "mondial_geo", "final": {"question": "For island area less than 200, list the island name and city it belongs to.", "sql": "SELECT DISTINCT T3.Name, T1.Name FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T3.Area < 200", "source_tables": ["city", "locatedon", "island"]}, "evidence": ""}
{"sample_id": 8469, "db_id": "mondial_geo", "final": {"question": "Among the country member of 'IOC' organization, which country has the most population?", "sql": "SELECT T2.Name FROM isMember AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Organization = 'IOC' ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["ismember", "country"]}, "evidence": ""}
{"sample_id": 8347, "db_id": "mondial_geo", "final": {"question": "Which are the 2 rivers located at Belgrade city? Which river is longer and how by much?", "sql": "SELECT T1.Name, T1.Length FROM river AS T1 INNER JOIN located AS T2 ON T1.Name = T2.River INNER JOIN city AS T3 ON T3.Name = T2.City WHERE T3.Name = 'Belgrade'", "source_tables": ["city", "river", "located"]}, "evidence": ""}
{"sample_id": 8397, "db_id": "mondial_geo", "final": {"question": "Give the full names of the countries that are located in more than one continent.", "sql": "SELECT T3.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country GROUP BY T3.Name HAVING COUNT(T3.Name) > 1", "source_tables": ["encompasses", "continent", "country"]}, "evidence": ""}
{"sample_id": 8344, "db_id": "mondial_geo", "final": {"question": "Provide all rivers name and length in USA.", "sql": "SELECT DISTINCT T3.Name, T3.Length FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T2.Country = 'USA'", "source_tables": ["city", "river", "located"]}, "evidence": "USA is a country"}
{"sample_id": 8353, "db_id": "mondial_geo", "final": {"question": "How many Jewish residents are there in Moldova?", "sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Moldova' AND T2.Name = 'Jewish'", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Moldova is one country located in Eastern Europe; The number of residents can be computed by percentage * population"}
{"sample_id": 8502, "db_id": "mondial_geo", "final": {"question": "What year saw the greatest number of organizations created on the European continent?", "sql": "SELECT STRFTIME('%Y', T4.Established) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T2.Country = T3.Code INNER JOIN organization AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Europe' GROUP BY STRFTIME('%Y', T4.Established) ORDER BY COUNT(T4.Name) DESC LIMIT 1", "source_tables": ["encompasses", "continent", "organization", "country"]}, "evidence": ""}
{"sample_id": 8264, "db_id": "mondial_geo", "final": {"question": "Among the countries whose GDP is over 1000000, how many of them have a population groth rate of over 3%?", "sql": "SELECT COUNT(T1.Country) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.GDP > 1000000 AND T2.Population_Growth > 3", "source_tables": ["economy", "population"]}, "evidence": "population growth rate of over 3% means population_growth > 3"}
{"sample_id": 8383, "db_id": "mondial_geo", "final": {"question": "Which three countries does the Amazonas flow through? Give the full name of the countries.", "sql": "SELECT DISTINCT T4.Name FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River INNER JOIN country AS T4 ON T4.Code = T2.Country WHERE T3.Name = 'Amazonas'", "source_tables": ["city", "country", "river", "located"]}, "evidence": "Amazonas flow is a river"}
{"sample_id": 8423, "db_id": "mondial_geo", "final": {"question": "In which group of islands is Rinjani Mountain located?", "sql": "SELECT T1.Islands FROM island AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Island INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Name = 'Rinjani'", "source_tables": ["mountain", "mountainonisland", "island"]}, "evidence": ""}
{"sample_id": 8412, "db_id": "mondial_geo", "final": {"question": "Name of the capitals of the countries that have less than 99.95% less population than the country that has the most population.", "sql": "SELECT Capital FROM country WHERE Population <= ( SELECT MAX(Population) - MAX(Population) * 0.9995 FROM country )", "source_tables": ["country"]}, "evidence": ""}
{"sample_id": 8461, "db_id": "mondial_geo", "final": {"question": "Name all the organisations that were established from 1970 to 1980.", "sql": "SELECT Name FROM organization WHERE STRFTIME('%Y', Established) BETWEEN '1970' AND '1980'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8362, "db_id": "mondial_geo", "final": {"question": "What is the smallest border's length, and what form of government do the two nations bordering it have?", "sql": "SELECT T1.Government, T3.Government FROM politics AS T1 INNER JOIN borders AS T2 ON T1.Country = T2.Country1 INNER JOIN politics AS T3 ON T3.Country = T2.Country2 ORDER BY T2.Length ASC LIMIT 1", "source_tables": ["politics", "borders"]}, "evidence": ""}
{"sample_id": 8233, "db_id": "mondial_geo", "final": {"question": "Among countries with more than 400,000 GDP, state its capital and population.", "sql": "SELECT T1.Capital, T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.GDP > 400000", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8326, "db_id": "mondial_geo", "final": {"question": "List all the coral islands along with its city and province.", "sql": "SELECT City, Province FROM locatedOn WHERE Island IN ( SELECT Name FROM island WHERE Type = 'coral' )", "source_tables": ["locatedon", "island"]}, "evidence": "Baltic Sea is a sea located in Northern Europe"}
{"sample_id": 8428, "db_id": "mondial_geo", "final": {"question": "What is the average population ratio of the countries in which organizations were established in 1947?", "sql": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE STRFTIME('%Y', T2.Established) = '1947'", "source_tables": ["organization", "country"]}, "evidence": "Average population ratio = Population / Area"}
{"sample_id": 8352, "db_id": "mondial_geo", "final": {"question": "What province does the 4th most populous city in the United Kingdom belong to, and how many people live there?", "sql": "SELECT T1.Province, T1.Population FROM city AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'United Kingdom' ORDER BY T1.Population DESC LIMIT 3, 1", "source_tables": ["city", "country"]}, "evidence": ""}
{"sample_id": 8493, "db_id": "mondial_geo", "final": {"question": "Which country has the widest range of religious practices?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.Name) DESC LIMIT 1", "source_tables": ["religion", "country"]}, "evidence": ""}
{"sample_id": 8260, "db_id": "mondial_geo", "final": {"question": "How many organizations are established in the country with the most ethnic groups?", "sql": "SELECT COUNT(T2.Province) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country INNER JOIN ethnicGroup AS T3 ON T3.Country = T2.Country GROUP BY T1.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1", "source_tables": ["organization", "country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8490, "db_id": "mondial_geo", "final": {"question": "What is the peak height of the highest volcanic type of mountain? Give it's name.", "sql": "SELECT Height, Name FROM mountain WHERE Type = 'volcanic' ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"]}, "evidence": "peak means the highest"}
{"sample_id": 8427, "db_id": "mondial_geo", "final": {"question": "On what date did the country have a gross domestic product 400% higher than Saint Kitts and Nevis become independent?", "sql": "SELECT Independence FROM politics WHERE country = ( SELECT country FROM economy WHERE GDP = 1100 )", "source_tables": ["economy", "politics"]}, "evidence": "GDP refers to gross domestic product"}
{"sample_id": 8316, "db_id": "mondial_geo", "final": {"question": "What is the average percentage of agriculture of GDP in countries on the African Continent?", "sql": "SELECT AVG(T4.Agriculture) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Africa'", "source_tables": ["economy", "encompasses", "continent", "country"]}, "evidence": ""}
{"sample_id": 8234, "db_id": "mondial_geo", "final": {"question": "Calculate the service of GDP for Brazil.", "sql": "SELECT T2.Service * T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Brazil'", "source_tables": ["economy", "country"]}, "evidence": "The service of GDP can be computed by service * GDP"}
{"sample_id": 8358, "db_id": "mondial_geo", "final": {"question": "Which sea is the shallowest and which country surrounds it?", "sql": "SELECT DISTINCT T2.Name FROM located AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE Sea = ( SELECT Name FROM sea ORDER BY Depth ASC LIMIT 1 )", "source_tables": ["country", "sea", "located"]}, "evidence": "Shallow sea refers to the sea with less depth"}
{"sample_id": 8322, "db_id": "mondial_geo", "final": {"question": "List all islands that are greater than the island on which Warwickshire is located.", "sql": "SELECT DISTINCT Name FROM island WHERE Area > ( SELECT DISTINCT T3.Area FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Province = 'Warwickshire' )", "source_tables": ["city", "locatedon", "island"]}, "evidence": "Warwickshire is a province"}
{"sample_id": 8266, "db_id": "mondial_geo", "final": {"question": "What is the highest lake area coverage of a country?", "sql": "SELECT T2.Area * 100  / T3.Area FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country ORDER BY T2.Longitude DESC LIMIT 1", "source_tables": ["country", "located", "lake"]}, "evidence": "Lake area coverage = [sum(area of the lakes in the country) / (area of the country)] * 100%"}
{"sample_id": 8503, "db_id": "mondial_geo", "final": {"question": "What other country does the most populated nation in the world share a border with and how long is the border between the two nations?", "sql": "SELECT T2.Country2, T2.Length FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 INNER JOIN country AS T3 ON T3.Code = T2.Country2 WHERE T1.Name = ( SELECT Name FROM country ORDER BY Population DESC LIMIT 1 )", "source_tables": ["borders", "country"]}, "evidence": "Nation and country are synonyms"}
{"sample_id": 8314, "db_id": "mondial_geo", "final": {"question": "How many countries on the European Continent has an infant mortality rate per thousand of over 100?", "sql": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Infant_Mortality < 100", "source_tables": ["encompasses", "continent", "country", "population"]}, "evidence": ""}
{"sample_id": 8268, "db_id": "mondial_geo", "final": {"question": "Please list the names of the countries with an inflation rate that's 30% above the average.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country GROUP BY T1.Name, T2.Inflation HAVING T2.Inflation > AVG(T2.Inflation) * 1.3", "source_tables": ["economy", "country"]}, "evidence": "Average inflation rate = [sum(inflation) / count(countries)]; 30% above average implies inflation > 1.3 average inflation rate"}
{"sample_id": 8476, "db_id": "mondial_geo", "final": {"question": "What is the capital of Australia? Is the capital a headquarter to any organization? Name the organization(s).", "sql": "SELECT T2.Capital, T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.City = T2.Capital WHERE T2.Name = 'Australia'", "source_tables": ["organization", "country"]}, "evidence": ""}
{"sample_id": 8361, "db_id": "mondial_geo", "final": {"question": "Which nation has the greatest infant mortality rate among those that attained independence in 1960?", "sql": "SELECT T1.Country FROM politics AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE STRFTIME('%Y', T1.Independence) = '1960' ORDER BY T2.Infant_Mortality DESC LIMIT 1", "source_tables": ["population", "politics"]}, "evidence": ""}
{"sample_id": 8448, "db_id": "mondial_geo", "final": {"question": "Which United States province is home to the greatest number of corporations' corporate headquarters?", "sql": "SELECT T1.Province FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'United States' GROUP BY T1.Province ORDER BY COUNT(T1.Name) DESC LIMIT 1", "source_tables": ["organization", "country"]}, "evidence": "Organization refers to corporation"}
{"sample_id": 8501, "db_id": "mondial_geo", "final": {"question": "What form of governance does the least prosperous nation in the world have?", "sql": "SELECT T3.Government FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE T2.GDP IS NOT NULL ORDER BY T2.GDP ASC LIMIT 1", "source_tables": ["economy", "politics", "country"]}, "evidence": "Nation and country are synonyms; Form of governance was mentioned in politics.Government; Least prosperous means lowest GDP"}
{"sample_id": 8304, "db_id": "mondial_geo", "final": {"question": "Which mountain is the highest in an independent country?", "sql": "SELECT T4.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_mountain AS T3 ON T3.Country = T2.Country INNER JOIN mountain AS T4 ON T4.Name = T3.Mountain WHERE T2.Independence IS NOT NULL ORDER BY T4.Height DESC LIMIT 1", "source_tables": ["mountain", "politics", "geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8238, "db_id": "mondial_geo", "final": {"question": "Among the countries with more than 3% population growth rate, state the country name in full along with its GDP.", "sql": "SELECT T1.Name, T3.GDP FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Population_Growth > 3", "source_tables": ["economy", "population", "country"]}, "evidence": "Population_growth = 3 means 3% population growth rate"}
{"sample_id": 8267, "db_id": "mondial_geo", "final": {"question": "What is the average population growth rate of countries where more than 3 languages are used?", "sql": "SELECT SUM(T3.Population_Growth) / COUNT(T3.Country) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN population AS T3 ON T3.Country = T2.Country WHERE T2.Country IN ( SELECT Country FROM language GROUP BY Country HAVING COUNT(Country) > 3 ) GROUP BY T3.Country", "source_tables": ["population", "language", "country"]}, "evidence": ""}
{"sample_id": 8359, "db_id": "mondial_geo", "final": {"question": "Which nation's GDP is the lowest among those that are communist states?", "sql": "SELECT T2.Country FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country WHERE T1.Government = 'Communist state' ORDER BY T2.GDP ASC LIMIT 1", "source_tables": ["economy", "politics"]}, "evidence": "Communist is a government form"}
{"sample_id": 8384, "db_id": "mondial_geo", "final": {"question": "Which country became independent on 1492-01-01? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1492-01-01'", "source_tables": ["politics", "country"]}, "evidence": ""}
{"sample_id": 8299, "db_id": "mondial_geo", "final": {"question": "Among the countries whose agriculture takes up more than 40% of its GDP, how many of them have less than 2 mountains?", "sql": "SELECT COUNT(T3.Country) FROM ( SELECT T1.Country FROM economy AS T1 INNER JOIN geo_mountain AS T2 ON T1.Country = T2.Country WHERE T1.Industry < 40 GROUP BY T1.Country HAVING COUNT(T1.Country) < 2 ) AS T3", "source_tables": ["economy", "geo_mountain"]}, "evidence": ""}
{"sample_id": 8394, "db_id": "mondial_geo", "final": {"question": "Which religion has the majority of the people in Japan?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan' ORDER BY T2.Percentage DESC LIMIT 1", "source_tables": ["religion", "country"]}, "evidence": "Japan is a country"}
{"sample_id": 8440, "db_id": "mondial_geo", "final": {"question": "Please list the top 3 countries with the highest inflation rate.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.Inflation DESC LIMIT 3", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8305, "db_id": "mondial_geo", "final": {"question": "How many volcanic mountains are there in countries whose population is no more than 5000000?", "sql": "SELECT COUNT(DISTINCT T3.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcanic' AND T1.Population <= 5000000", "source_tables": ["mountain", "geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8377, "db_id": "mondial_geo", "final": {"question": "What is the main spoken language in MNE?", "sql": "SELECT Name FROM language WHERE Country = 'MNE' ORDER BY Percentage DESC LIMIT 1", "source_tables": ["language"]}, "evidence": "MNE is one country"}
{"sample_id": 8336, "db_id": "mondial_geo", "final": {"question": "List all the cities and provinces located at the rivers that flows to Atlantic Ocean.", "sql": "SELECT T1.Name, T1.Province FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Sea = 'Atlantic Ocean'", "source_tables": ["city", "river", "located"]}, "evidence": "Atlantic Ocean is the second-largest ocean on Earth, after the Pacific Ocean; Ocean and sea share the same meaning"}
{"sample_id": 8270, "db_id": "mondial_geo", "final": {"question": "Which religion has the largest population in Martinique?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Martinique' ORDER BY T1.population DESC LIMIT 1", "source_tables": ["religion", "country"]}, "evidence": ""}
{"sample_id": 8246, "db_id": "mondial_geo", "final": {"question": "Among the countries with a population of over 10000000, how many of them have a GDP of over 500000?", "sql": "SELECT COUNT(T1.Name) FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.GDP > 500000 AND T1.Population > 10000000", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8442, "db_id": "mondial_geo", "final": {"question": "How many businesses were founded after 1960 in a nation that wasn't independent?", "sql": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country WHERE T2.Independence = NULL AND STRFTIME('%Y', T3.Established) > '1960'", "source_tables": ["organization", "politics", "country"]}, "evidence": "Established means founded; Country means nation; Organization means businesses"}
{"sample_id": 8410, "db_id": "mondial_geo", "final": {"question": "What percent of the non volcanic islands in the Lesser Antilles group of islands have an area of no more than 300 square kilometers?", "sql": "SELECT SUM(CASE WHEN Area <= 300 THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM island WHERE Islands = 'Lesser Antilles' AND (Type != 'volcanic' OR Type IS NULL)", "source_tables": ["island"]}, "evidence": "Percent = [count(non volcanic islands Lesser Antilles area 300 or less) / count(non volcanic islands Lesser Antilles)] * 100%"}
{"sample_id": 8272, "db_id": "mondial_geo", "final": {"question": "Which two countries does the Detroit River flow through? Give the full name of the country.", "sql": "SELECT T3.Name FROM located AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name INNER JOIN country AS T3 ON T3.Code = T1.Country WHERE T2.Name = 'Detroit River'", "source_tables": ["country", "river", "located"]}, "evidence": ""}
{"sample_id": 8276, "db_id": "mondial_geo", "final": {"question": "How many mountains are there in Indonesia?", "sql": "SELECT COUNT(DISTINCT T2.Mountain) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Indonesia'", "source_tables": ["geo_mountain", "country"]}, "evidence": "Indonesia refers to one of countries"}
{"sample_id": 8217, "db_id": "mondial_geo", "final": {"question": "In which country does Polish found least in?", "sql": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Polish' GROUP BY T2.Name, T1.Percentage ORDER BY T1.Percentage ASC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8373, "db_id": "mondial_geo", "final": {"question": "What is the proportion of English-speaking citizens in the countries that rely on the United States compared to the total number of citizens in those countries?", "sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN politics AS T3 ON T3.Country = T2.Country WHERE T3.Dependent = 'USA' AND T2.Name = 'English'", "source_tables": ["politics", "language", "country"]}, "evidence": ""}
{"sample_id": 8404, "db_id": "mondial_geo", "final": {"question": "How many times longer is the longest river in Tajikistan than the shortest river?", "sql": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM located AS T1 INNER JOIN river AS T2 ON T1.River = T2.Name WHERE T1.Country = 'TJ'", "source_tables": ["river", "located"]}, "evidence": "TJ is an abbreviated country code of Tajikistan"}
{"sample_id": 8399, "db_id": "mondial_geo", "final": {"question": "What's the number of infant mortality in Switzerland in a year?", "sql": "SELECT T2.Infant_Mortality * T1.Population * T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'", "source_tables": ["population", "country"]}, "evidence": "Number can be calculated = Infant_Mortality * Population * Population_Growth"}
{"sample_id": 8450, "db_id": "mondial_geo", "final": {"question": "Please name any three sovereign nations that have been governed by the republic since 1991.", "sql": "SELECT country FROM politics WHERE government = 'republic' AND STRFTIME('%Y', independence) >= '1991' AND country IN ( SELECT country FROM country ) ORDER BY independence LIMIT 3", "source_tables": ["politics", "country"]}, "evidence": "Nation refers to country"}
{"sample_id": 8436, "db_id": "mondial_geo", "final": {"question": "Which two nations are separated from one another by the longest border? Please include the entire names of the nations in your answer.", "sql": "SELECT Country1, Country2 FROM borders ORDER BY Length DESC LIMIT 1", "source_tables": ["borders"]}, "evidence": ""}
{"sample_id": 8508, "db_id": "mondial_geo", "final": {"question": "Indicate the coordinates of all the deserts whose area is in more than one country.", "sql": "SELECT T1.Latitude, T1.Longitude FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert GROUP BY T1.Name, T1.Latitude, T1.Longitude HAVING COUNT(T1.Name) > 1", "source_tables": ["desert", "geo_desert"]}, "evidence": "coordinates consists of Latitude, Longitude"}
{"sample_id": 8465, "db_id": "mondial_geo", "final": {"question": "List all the organisations that where its name contains 'United Nation'. State its full name and its headquarter city.", "sql": "SELECT Name, City FROM organization WHERE Name LIKE '%United Nation%'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8220, "db_id": "mondial_geo", "final": {"question": "Calculate the percentage of country which gained independence as republic after 1970.", "sql": "SELECT CAST(SUM(CASE WHEN Government = 'republic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics WHERE STRFTIME('%Y', Independence) > '1970'", "source_tables": ["politics"]}, "evidence": ""}
{"sample_id": 8248, "db_id": "mondial_geo", "final": {"question": "Which country has the lowest inflation rate?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation IS NOT NULL ORDER BY T2.Inflation ASC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8444, "db_id": "mondial_geo", "final": {"question": "How many Italian regions are bordered by the Mediterranean Sea? How deep is the Mediterranean Sea?", "sql": "SELECT COUNT(DISTINCT T2.province), T3.Depth FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country INNER JOIN sea AS T3 ON T3.Name = T2.Sea WHERE T1.Code = 'I' AND T3.Name = 'Mediterranean Sea' GROUP BY T3.Depth", "source_tables": ["located", "sea", "country"]}, "evidence": "Reigion refers to province"}
{"sample_id": 8343, "db_id": "mondial_geo", "final": {"question": "In which province and country does Moldoveanu located? State its height.", "sql": "SELECT T2.Province, T2.Country, T1.Height FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain WHERE T1.Name = 'Moldoveanu'", "source_tables": ["mountain", "geo_mountain"]}, "evidence": "Moldoveanu is a mountain"}
{"sample_id": 8419, "db_id": "mondial_geo", "final": {"question": "On which continent is the country with the most erosion of real income?", "sql": "SELECT T1.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN economy AS T4 ON T4.Country = T3.Code ORDER BY T4.Inflation DESC LIMIT 1", "source_tables": ["economy", "encompasses", "continent", "country"]}, "evidence": "highest inflation rate results in the most erosion of real income"}
{"sample_id": 8391, "db_id": "mondial_geo", "final": {"question": "Which city has most population other than its capital in Bangladesh?", "sql": "SELECT T3.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Bangladesh' AND T3.Name <> T1.Capital ORDER BY T3.Population DESC LIMIT 1", "source_tables": ["city", "province", "country"]}, "evidence": "Bangladesh is a country"}
{"sample_id": 8363, "db_id": "mondial_geo", "final": {"question": "Which Arabic-speaking country has the smallest population?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Arabic' AND T2.Percentage = 100 ORDER BY T1.Population ASC LIMIT 1", "source_tables": ["language", "country"]}, "evidence": "Arabic-speaking country = country that speaks 100% Arabic"}
{"sample_id": 8317, "db_id": "mondial_geo", "final": {"question": "Among the independent countries, how many of them has a GDP per capita of over 5000?", "sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T2.Country WHERE T2.Independence IS NOT NULL AND T3.GDP > 5000", "source_tables": ["economy", "politics", "country"]}, "evidence": ""}
{"sample_id": 8497, "db_id": "mondial_geo", "final": {"question": "Which Zaire region is home to the country's deepest lake's Name it and list its depth.", "sql": "SELECT T3.Name, T1.Name, T1.Depth FROM lake AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T4.Code = T3.Country WHERE T4.Name = 'Zaire'", "source_tables": ["country", "province", "located", "lake"]}, "evidence": ""}
{"sample_id": 8426, "db_id": "mondial_geo", "final": {"question": "Of all the countries of the Hindu religion, which has the lowest ratio of people per square meter of surface?", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Hindu' ORDER BY T1.Population / T1.Area ASC LIMIT 1", "source_tables": ["religion", "country"]}, "evidence": "ratio of people per square meter of surface = Population / Area"}
{"sample_id": 8223, "db_id": "mondial_geo", "final": {"question": "Which is the majority of the ethnic group in country with great than 10,000,000 population", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Population > 10000000 GROUP BY T2.Name, T2.Percentage ORDER BY T2.Percentage DESC LIMIT 2", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8379, "db_id": "mondial_geo", "final": {"question": "Which country was the source of Pjandsh River? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country WHERE T2.River = 'Pjandsh'", "source_tables": ["located", "country"]}, "evidence": ""}
{"sample_id": 8255, "db_id": "mondial_geo", "final": {"question": "What is the capital city of the country that has the percentage of Armenian speakers over 90%?", "sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Armenian' AND T2.Percentage > 90", "source_tables": ["language", "country"]}, "evidence": "Percentage of country > 90% refers to percentage > 90; America is one of country names"}
{"sample_id": 8443, "db_id": "mondial_geo", "final": {"question": "What province did the river Klaeaelv travel through and how long is the river?", "sql": "SELECT T1.Province FROM city AS T1 INNER JOIN located AS T2 ON T1.Name = T2.City INNER JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Klaraelv'", "source_tables": ["city", "river", "located"]}, "evidence": ""}
{"sample_id": 8257, "db_id": "mondial_geo", "final": {"question": "How many organizations are founded in countries with a population of under 1000000?", "sql": "SELECT COUNT(T2.Name) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T1.Population < 1000000", "source_tables": ["organization", "country"]}, "evidence": ""}
{"sample_id": 8425, "db_id": "mondial_geo", "final": {"question": "Of all the countries that share territory with more than one continent, in which of them does the average population not exceed 10 inhabitants per square kilometer?", "sql": "SELECT NAME FROM country WHERE CODE IN ( SELECT country FROM encompasses GROUP BY country HAVING COUNT(continent) > 1 ) AND population / Area <= 10", "source_tables": ["encompasses", "country"]}, "evidence": ""}
{"sample_id": 8376, "db_id": "mondial_geo", "final": {"question": "What's the name of the second biggest desert?", "sql": "SELECT Name FROM desert ORDER BY Area DESC LIMIT 1, 1", "source_tables": ["desert"]}, "evidence": ""}
{"sample_id": 8453, "db_id": "mondial_geo", "final": {"question": "Which desert in Kazakhstan is the largest?", "sql": "SELECT T1.Name FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T3.Name = 'Kazakstan' ORDER BY T1.Area DESC LIMIT 1", "source_tables": ["country", "desert", "geo_desert"]}, "evidence": ""}
{"sample_id": 8357, "db_id": "mondial_geo", "final": {"question": "How many mountains are there in the country with the most land area?", "sql": "SELECT COUNT(Mountain) FROM geo_mountain WHERE Country = ( SELECT Code FROM country ORDER BY Area DESC LIMIT 1 )", "source_tables": ["geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8285, "db_id": "mondial_geo", "final": {"question": "When did Uganda declare independence?", "sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Uganda'", "source_tables": ["politics", "country"]}, "evidence": "Uganda is one of country names"}
{"sample_id": 8259, "db_id": "mondial_geo", "final": {"question": "Among the countries with over 3 organizations, how many of them have an inflation rate of over 5%?", "sql": "SELECT COUNT(T2.Country) FROM economy AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T2.Country IN ( SELECT Country FROM organization GROUP BY Country HAVING COUNT(Country) > 3 ) AND T1.Inflation > 5", "source_tables": ["economy", "organization"]}, "evidence": ""}
{"sample_id": 8284, "db_id": "mondial_geo", "final": {"question": "In which province is the highest volcano mountain located in?", "sql": "SELECT T1.Province FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcano' ORDER BY T3.Height DESC LIMIT 1", "source_tables": ["mountain", "geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8499, "db_id": "mondial_geo", "final": {"question": "Which nation, with a population ranging from 60,000,000 to 99,000,000, has the greatest gross domestic product?", "sql": "SELECT T1.Name, T2.GDP FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population BETWEEN 60000000 AND 90000000 ORDER BY T2.GDP DESC LIMIT 1", "source_tables": ["economy", "country"]}, "evidence": "GDP refers to gross domestic product; Nation and country are synonyms"}
{"sample_id": 8295, "db_id": "mondial_geo", "final": {"question": "What is the most populated city of the 12th highest density country?", "sql": "SELECT T2.Name FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT Name FROM country ORDER BY CAST(Population AS REAL) / Area LIMIT 11, 1 ) ORDER BY T2.Population DESC LIMIT 1", "source_tables": ["city", "country"]}, "evidence": "Population density = Population / area"}
{"sample_id": 8227, "db_id": "mondial_geo", "final": {"question": "For country with area greater than 600000, what is agriculture percentage of GDP the country contributes?", "sql": "SELECT T2.Agriculture FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Area > 600000 AND T2.Agriculture IS NOT NULL", "source_tables": ["economy", "country"]}, "evidence": ""}
{"sample_id": 8460, "db_id": "mondial_geo", "final": {"question": "What is the full name of ABEDA and when was it established?", "sql": "SELECT Name, Established FROM organization WHERE Abbreviation = 'ABEDA'", "source_tables": ["organization"]}, "evidence": ""}
{"sample_id": 8489, "db_id": "mondial_geo", "final": {"question": "When did the United States of America attained it's Independence?", "sql": "SELECT T1.Independence FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'United States'", "source_tables": ["politics", "country"]}, "evidence": ""}
{"sample_id": 8275, "db_id": "mondial_geo", "final": {"question": "Which country is Mountain Cerro Chirripo located in? Give the full name of the country.", "sql": "SELECT DISTINCT T1.Name FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = 'Cerro Chirripo'", "source_tables": ["geo_mountain", "country"]}, "evidence": ""}
{"sample_id": 8232, "db_id": "mondial_geo", "final": {"question": "What is the number of growth population for country with the lowest infant mortality?", "sql": "SELECT T2.Population_Growth * T1.Population FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Infant_Mortality IS NOT NULL ORDER BY T2.Infant_Mortality ASC LIMIT 1", "source_tables": ["population", "country"]}, "evidence": "Growth population = population_growth * population"}
{"sample_id": 8244, "db_id": "mondial_geo", "final": {"question": "Please list the name of the countries with over 5 ethnic groups.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name HAVING COUNT(T1.Name) > 5", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8438, "db_id": "mondial_geo", "final": {"question": "Which nation has the lowest proportion of people who speak an African language? Please state the nation's full name.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' ORDER BY T2.Percentage ASC LIMIT 1", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Nation and country share the same meaning. Proportion refers to percentage"}
{"sample_id": 8251, "db_id": "mondial_geo", "final": {"question": "Please list the depth of the lakes that are located in the Province of Albania.", "sql": "SELECT T2.Depth FROM located AS T1 INNER JOIN lake AS T2 ON T1.Lake = T2.Name WHERE T1.Province = 'Albania'", "source_tables": ["located", "lake"]}, "evidence": ""}
{"sample_id": 8406, "db_id": "mondial_geo", "final": {"question": "In countries where there is more than one ethnic group, name the ethnic group with the greatest presence in each country and the country to which it corresponds.", "sql": "SELECT Country, Name FROM ethnicGroup AS T1 WHERE Percentage < 100 AND Percentage = ( SELECT MAX(Percentage) FROM ethnicGroup AS T2 WHERE T1.Country = T2.Country )", "source_tables": ["ethnicgroup"]}, "evidence": "greatest presence can be represented by largest percentage."}
{"sample_id": 8293, "db_id": "mondial_geo", "final": {"question": "What is the population density of the Petropavl's home country?", "sql": "SELECT CAST(T1.Population AS REAL) / T1.Area FROM country AS T1 INNER JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Petropavl'", "source_tables": ["city", "country"]}, "evidence": "Population density = Population / area"}
{"sample_id": 8454, "db_id": "mondial_geo", "final": {"question": "What sea does the Baltic Sea converge with, and how deep is the Baltic Sea?", "sql": "SELECT T2.Sea2, T1.Depth FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = 'Baltic Sea'", "source_tables": ["sea", "mergeswith"]}, "evidence": "Coverage refers to mergesWith"}
{"sample_id": 8261, "db_id": "mondial_geo", "final": {"question": "Please list the organization names established in the countries where Dutch is spoken.", "sql": "SELECT T2.Name FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Dutch'", "source_tables": ["organization", "language"]}, "evidence": "Dutch is one of language"}
{"sample_id": 8291, "db_id": "mondial_geo", "final": {"question": "How many rivers finally flows to the sea of 459m in depth?", "sql": "SELECT COUNT(*) FROM river WHERE Sea IN ( SELECT Name FROM sea WHERE Depth = 459 )", "source_tables": ["sea", "river"]}, "evidence": ""}
{"sample_id": 8271, "db_id": "mondial_geo", "final": {"question": "Which country is 41% Christian? Give the full name of the country.", "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN religion AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Christian' AND T2.Percentage = 41", "source_tables": ["religion", "country"]}, "evidence": ""}
{"sample_id": 8474, "db_id": "mondial_geo", "final": {"question": "List all countries with 'Category III' membership in 'IFAD' organization. Please also provide the capital of the country.", "sql": "SELECT Name, Capital FROM country WHERE Code IN ( SELECT Country FROM isMember WHERE type = 'Category III' AND Organization = 'IFAD' )", "source_tables": ["ismember", "country"]}, "evidence": ""}
{"sample_id": 8219, "db_id": "mondial_geo", "final": {"question": "State the different ethnic group and percentage of the language in Singapore.", "sql": "SELECT T1.Name, T1.Percentage FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Singapore' GROUP BY T1.Name, T1.Percentage", "source_tables": ["country", "ethnicgroup"]}, "evidence": ""}
{"sample_id": 8418, "db_id": "mondial_geo", "final": {"question": "In which city is the lake located at coordinates longitude -85.35 and latitude 11.6?", "sql": "SELECT T2.City FROM lake AS T1 INNER JOIN located AS T2 ON T1.Name = T2.Lake INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN city AS T4 ON T4.Province = T3.Name WHERE T1.Longitude = -85.35 AND T1.Latitude = 11.6", "source_tables": ["city", "province", "located", "lake"]}, "evidence": ""}
{"sample_id": 8332, "db_id": "mondial_geo", "final": {"question": "List all the mountains that are volcanic along with its longitude and latitude.", "sql": "SELECT Name, Latitude, Longitude FROM mountain WHERE Type = 'volcano'", "source_tables": ["mountain"]}, "evidence": ""}
{"sample_id": 8411, "db_id": "mondial_geo", "final": {"question": "Of all the countries in which English is spoken, what percentage has English as their only language?", "sql": "SELECT CAST(SUM(CASE WHEN T2.Percentage = 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Name) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English'", "source_tables": ["language", "country"]}, "evidence": "Percentage = [count(countries 100% English) / count(countries English)] * 100%"}
{"sample_id": 8409, "db_id": "mondial_geo", "final": {"question": "What percentage of the border does Angola share with each of the countries with which it borders?", "sql": "SELECT SUM(CASE WHEN T2.Name = 'Angola' THEN T1.Length ELSE 0 END) * 100 / SUM(T1.Length) FROM borders AS T1 LEFT JOIN country AS T2 ON T1.Country1 = T2.Code", "source_tables": ["borders", "country"]}, "evidence": ""}
{"sample_id": 8281, "db_id": "mondial_geo", "final": {"question": "What is the area of Egypt as a percentage of Asia?", "sql": "SELECT T1.Area * 100 / T3.Area FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent WHERE T3.Name = 'Asia' AND T1.Name = 'Egypt'", "source_tables": ["encompasses", "continent", "country"]}, "evidence": ""}
{"sample_id": 8328, "db_id": "mondial_geo", "final": {"question": "Calculate the percentage of population in Edmonton city to the population of its province.", "sql": "SELECT CAST(T1.Population AS REAL) * 100 / T2.Population FROM city AS T1 INNER JOIN province AS T2 ON T1.Province = T2.Name WHERE T1.Name = 'Edmonton'", "source_tables": ["city", "province"]}, "evidence": "Percentage of population in each city = population(city) / population(province) * 100%"}
{"sample_id": 8240, "db_id": "mondial_geo", "final": {"question": "How much does the gross domestic products goes to the industry sector for Singapore?", "sql": "SELECT T2.GDP * T2.Industry FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Singapore'", "source_tables": ["economy", "country"]}, "evidence": "Singapore is one of country names; GDP refers to gross domestic products; GDP to the industry sector = GDP * Industry"}
{"sample_id": 8319, "db_id": "mondial_geo", "final": {"question": "Which island is city Balikpapan located on? How big is the island?", "sql": "SELECT T3.Name, T3.Area FROM city AS T1 INNER JOIN locatedOn AS T2 ON T1.Name = T2.City INNER JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Name = 'Balikpapan'", "source_tables": ["city", "locatedon", "island"]}, "evidence": ""}
{"sample_id": 8364, "db_id": "mondial_geo", "final": {"question": "What provinces encompass the world's biggest desert in terms of overall area?", "sql": "SELECT Province FROM geo_desert WHERE Desert = ( SELECT Name FROM desert ORDER BY Area DESC LIMIT 1 )", "source_tables": ["geo_desert", "desert"]}, "evidence": ""}
{"sample_id": 8500, "db_id": "mondial_geo", "final": {"question": "Which Asian country gave its agricultural sector the largest share of its gross domestic product?", "sql": "SELECT T2.Country FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T2.Country = T3.Code INNER JOIN economy AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Asia' ORDER BY T4.Agriculture DESC LIMIT 1", "source_tables": ["economy", "encompasses", "continent", "country"]}, "evidence": "Gross domestic product = GDP; Largest share of GDP in agricultural sector was mentioned in economy.Agriculture"}
{"sample_id": 8366, "db_id": "mondial_geo", "final": {"question": "Which religion is most prevalent in Asia?", "sql": "SELECT T4.Name FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN religion AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Asia' GROUP BY T4.Name ORDER BY SUM(T4.Percentage) DESC LIMIT 1", "source_tables": ["encompasses", "continent", "religion", "country"]}, "evidence": "Most prevalent religion refers to the religion with the most population percentage"}
{"sample_id": 8218, "db_id": "mondial_geo", "final": {"question": "Which countries have more than 90% of African? List the name of the country in full.", "sql": "SELECT T2.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'African' AND T1.Percentage > 90", "source_tables": ["country", "ethnicgroup"]}, "evidence": "Percentage = 90 means 90% of the population"}
{"sample_id": 8564, "db_id": "software_company", "final": {"question": "List down the number of inhabitants of customers with a widowed marital status and false response .", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.MARITAL_STATUS = 'Widowed' AND T2.RESPONSE = 'true'", "source_tables": ["demog", "customers", "mailings1_2"]}, "evidence": "number of inhabitants refers to INHABITANTS_K; RESPONSE = 'false';"}
{"sample_id": 8567, "db_id": "software_company", "final": {"question": "List the level of education and income of customers ages from 30 to 55 with a true response.", "sql": "SELECT T1.EDUCATIONNUM, T3.INCOME_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age >= 30 AND T1.age <= 55 AND T2.RESPONSE = 'true'", "source_tables": ["demog", "customers", "mailings1_2"]}, "evidence": "ages from 30 to 55 refer to age BETWEEN 30 AND 55; RESPONSE = 'true'; income refers to INCOME_K; education level refers to EDUCATIONNUM;"}
{"sample_id": 8510, "db_id": "software_company", "final": {"question": "How many customers have never married?", "sql": "SELECT COUNT(ID) FROM Customers WHERE MARITAL_STATUS = 'Never-married'", "source_tables": ["customers"]}, "evidence": "MARITAL_STATUS = 'Never-married';"}
{"sample_id": 8523, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are divorced males?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Male' AND T1.MARITAL_STATUS = 'Divorced' AND T2.RESPONSE = 'true'", "source_tables": ["customers", "mailings1_2"]}, "evidence": "RESPONSE = 'true'; SEX = 'Male'; MARITAL_STATUS = 'Divorced';"}
{"sample_id": 8536, "db_id": "software_company", "final": {"question": "Give the level of education and occupation of customers ages from 20 to 35 with an income K of 2000 and below.", "sql": "SELECT T1.EDUCATIONNUM, T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K < 2000 AND T1.age >= 20 AND T1.age <= 35", "source_tables": ["demog", "customers"]}, "evidence": "customers ages from 20 to 35 refer to ID where age BETWEEN 20 AND 35; income K of 2000 and below refers to INCOME_K < 2000; level of education refers to EDUCATIONNUM;"}
{"sample_id": 8557, "db_id": "software_company", "final": {"question": "Among the customers with an average income per inhabitant above 3000, what percentage are in their eighties?", "sql": "SELECT CAST(SUM(CASE WHEN T1.age BETWEEN 80 AND 89 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K > 3000", "source_tables": ["demog", "customers"]}, "evidence": "average income per inhabitant above 3000 refers to INCOME_K > 3000; eighties refer to age BETWEEN 80 AND 89; DIVIDE(COUNT(INCOME_K > 3000 and age BETWEEN 80 AND 89), COUNT(INCOME_K > 3000 )) as percentage;"}
{"sample_id": 8517, "db_id": "software_company", "final": {"question": "Please list the occupations of the customers over 40 and have sent a true response to the incentive mailing sent by the marketing department.", "sql": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age > 40 AND T2.RESPONSE = 'true'", "source_tables": ["customers", "mailings1_2"]}, "evidence": "over 40 refers to age > 40; RESPONSE = 'true';"}
{"sample_id": 8525, "db_id": "software_company", "final": {"question": "What is the number of inhabitants of the place the most customers are from?", "sql": "SELECT DISTINCT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INHABITANTS_K DESC", "source_tables": ["demog", "customers"]}, "evidence": "the most customers are from refers to GEOID where MAX(COUNT(ID)); number of inhabitants refers to INHABITANTS_K;"}
{"sample_id": 8547, "db_id": "software_company", "final": {"question": "In female customers ages from 50 to 60, how many of them has an number of inhabitants ranges from 19 to 24?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 50 AND T1.age <= 60 AND T2.INHABITANTS_K >= 19 AND T2.INHABITANTS_K <= 24", "source_tables": ["demog", "customers"]}, "evidence": "female customers ages from 50 to 60 refer to SEX = 'Female' where age BETWEEN 50 AND 60; number of inhabitants ranges from 19 to 24 refers to INHABITANTS_K BETWEEN 19 AND 24;"}
{"sample_id": 8549, "db_id": "software_company", "final": {"question": "In customers with marital status of never married, what is the percentage of customers with income of 2500 and above?", "sql": "SELECT CAST(SUM(CASE WHEN T2.INCOME_K > 2500 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Never-married'", "source_tables": ["demog", "customers"]}, "evidence": "DIVIDE(COUNT(INCOME_K \u2265 2500 where MARITAL_STATUS = 'Never-married'), COUNT(INCOME_K where MARITAL_STATUS = 'Never-married')) as percentage;"}
{"sample_id": 8528, "db_id": "software_company", "final": {"question": "What is the average education level of customers from the place with the highest average income per month?", "sql": "SELECT AVG(T1.EDUCATIONNUM) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K); average education level refers to AVG(EDUCATIONNUM);"}
{"sample_id": 8524, "db_id": "software_company", "final": {"question": "How many of the first 60,000 customers from the place with the highest average income per month have sent a true response to the incentive mailing sent by the marketing department?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T2.RESPONSE = 'true' ORDER BY T3.INCOME_K DESC LIMIT 1", "source_tables": ["demog", "customers", "mailings1_2"]}, "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K); RESPONSE = 'true';"}
{"sample_id": 8577, "db_id": "software_company", "final": {"question": "What is the ratio of male and female among the age of teenager when the education is above 10?", "sql": "SELECT CAST(SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) FROM Customers WHERE age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10", "source_tables": ["customers"]}, "evidence": "ratio = DIVIDE(COUNT(SEX = 'Male' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10),COUNT(SEX = 'Female' where age BETWEEN 13 AND 19 and EDUCATIONNUM > 10));"}
{"sample_id": 8574, "db_id": "software_company", "final": {"question": "What is the occupation and response of female customers within the number of inhabitants range of 20 to 25?", "sql": "SELECT DISTINCT T1.OCCUPATION, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Female' AND T3.INHABITANTS_K >= 20 AND T3.INHABITANTS_K <= 25", "source_tables": ["demog", "customers", "mailings1_2"]}, "evidence": "female customers within the number of inhabitants range of 20 to 25 refer to SEX = 'Female' where INHABITANTS_K BETWEEN 20 AND 25;"}
{"sample_id": 8551, "db_id": "software_company", "final": {"question": "List the geographic id of places where the income is above average.", "sql": "SELECT AVG(INCOME_K) FROM Demog", "source_tables": ["demog"]}, "evidence": "geographic ID refers to GEOID; income is above average refers to INCOME_K > DIVIDE(SUM(INCOME_K), COUNT(GEOID));"}
{"sample_id": 8563, "db_id": "software_company", "final": {"question": "What is the marital status of the customer ages 62 with an level of education of 7?", "sql": "SELECT DISTINCT MARITAL_STATUS FROM Customers WHERE EDUCATIONNUM = 7 AND age = 62", "source_tables": ["customers"]}, "evidence": "customer ages 62 with an level of education of 7 refer age = 62 where EDUCATIONNUM = 7;"}
{"sample_id": 8529, "db_id": "software_company", "final": {"question": "What is the average age of first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department?", "sql": "SELECT AVG(T1.age) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T2.RESPONSE = 'true'", "source_tables": ["customers", "mailings1_2"]}, "evidence": "RESPONSE = 'true'; AVG(age);"}
{"sample_id": 8521, "db_id": "software_company", "final": {"question": "Which customer come from a place with more inhabitants, customer no.0 or customer no.1?", "sql": "SELECT T1.ID FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 0 OR T1.ID = 1 ORDER BY INHABITANTS_K DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "place with more inhabitants refers to GEOID where ID = 0 OR ID = 1 and MAX(NHABITANTS_K);"}
{"sample_id": 8546, "db_id": "software_company", "final": {"question": "Among the customers with a marital status of married-civ-spouse, list the number of inhabitants and age of those who are machine-op-inspct.", "sql": "SELECT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Farming-fishing' AND T1.SEX = 'Male' AND T1.age >= 20 AND T1.age <= 30", "source_tables": ["demog", "customers"]}, "evidence": "OCCUPATION = 'Machine-op-inspct'; number of inhabitants refers to INHABITANTS_K;"}
{"sample_id": 8526, "db_id": "software_company", "final": {"question": "Among the customers who come from the place with 25746 inhabitants, how many of them are male?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K = 25.746 AND T1.SEX = 'Male'", "source_tables": ["demog", "customers"]}, "evidence": "place with 44114 inhabitants refers to GEOID where INHABITANTS_K = 44.114; SEX = 'Male';"}
{"sample_id": 8520, "db_id": "software_company", "final": {"question": "Among the customers from a place with more than 20,000 and less than 30,000 inhabitants, how many of them are Machine-op-inspcts?", "sql": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Machine-op-inspct' AND T2.INHABITANTS_K > 20 AND T2.INHABITANTS_K < 30", "source_tables": ["demog", "customers"]}, "evidence": "place with more than 20,000 and less than 30,000 inhabitants refers to GEOID where INHABITANTS_K BETWEEN 20 AND 30; OCCUPATION = 'Machine-op-inspct';"}
{"sample_id": 8558, "db_id": "software_company", "final": {"question": "How many of the customer's reference ID that has a TRUE response?", "sql": "SELECT COUNT(REFID) FROM Mailings1_2 WHERE RESPONSE = 'true'", "source_tables": ["mailings1_2"]}, "evidence": "reference ID refers to REFID;"}
{"sample_id": 8530, "db_id": "software_company", "final": {"question": "How many of the customers are male?", "sql": "SELECT COUNT(ID) FROM Customers WHERE SEX = 'Male'", "source_tables": ["customers"]}, "evidence": "SEX = 'Male';"}
{"sample_id": 8533, "db_id": "software_company", "final": {"question": "List down the geographic identifier with an income that ranges from 2100 to 2500.", "sql": "SELECT GEOID FROM Demog WHERE INCOME_K >= 2100 AND INCOME_K <= 2500", "source_tables": ["demog"]}, "evidence": "geographic identifier with an income that ranges from 2100 to 2500 refers to GEOID where INCOME_K BETWEEN 2100 AND 2500;"}
{"sample_id": 8545, "db_id": "software_company", "final": {"question": "What is the number of inhabitants of male customers ages from 20 to 30 years old who are farming or fishing?", "sql": "SELECT T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Farming-fishing' AND T1.SEX = 'Male' AND T1.age >= 20 AND T1.age <= 30", "source_tables": ["demog", "customers"]}, "evidence": "male customers ages from 20 to 30 years old refer to SEX = 'Male' where age BETWEEN 20 AND 30; farming or fishing refers to OCCUPATION; number of inhabitants refers to INHABITANTS_K;"}
{"sample_id": 8537, "db_id": "software_company", "final": {"question": "List down the number of inhabitants of customers with a divorced marital status and older than 50 years old.", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.MARITAL_STATUS = 'Divorced' AND T1.age < 50", "source_tables": ["demog", "customers"]}, "evidence": "number of inhabitants refers to INHABITANTS_K; older than 50 years old refers to age < 50; MARITAL_STATUS = 'Divorced;"}
{"sample_id": 8559, "db_id": "software_company", "final": {"question": "List down the customer's reference ID with true response.", "sql": "SELECT REFID FROM Mailings1_2 WHERE RESPONSE = 'true'", "source_tables": ["mailings1_2"]}, "evidence": "reference ID refers to REFID;"}
{"sample_id": 8565, "db_id": "software_company", "final": {"question": "What is the response and number of inhabitants of the oldest female customer?", "sql": "SELECT T2.RESPONSE, T3.INHABITANTS_K FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.SEX = 'Female' ORDER BY T1.age DESC LIMIT 1", "source_tables": ["demog", "customers", "mailings1_2"]}, "evidence": "number of inhabitants refers to INHABITANTS_K; oldest female customer refers to SEX = 'Female' where MAX(age);"}
{"sample_id": 8556, "db_id": "software_company", "final": {"question": "What percentage of elderly customers who are never married in the place with geographic ID 24?", "sql": "SELECT CAST(SUM(CASE WHEN T1.MARITAL_STATUS = 'never married' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.GEOID = 24", "source_tables": ["demog", "customers"]}, "evidence": "elderly customers refer to age > 65; DIVIDE(COUNT(ID where age > 65, MARITAL_STATUS = 'never married' and GEOID = 24), COUNT(ID where GEOID = 24)) as percentage;"}
{"sample_id": 8531, "db_id": "software_company", "final": {"question": "List down the customer's geographic identifier who are handlers or cleaners.", "sql": "SELECT GEOID FROM Customers WHERE OCCUPATION = 'Handlers-cleaners'", "source_tables": ["customers"]}, "evidence": "geographic identifier refers to GEOID; OCCUPATION = 'Handlers-cleaners';"}
{"sample_id": 8515, "db_id": "software_company", "final": {"question": "How many female customers have an education level of over 11?", "sql": "SELECT COUNT(ID) FROM Customers WHERE EDUCATIONNUM > 11 AND SEX = 'Female'", "source_tables": ["customers"]}, "evidence": "education level of 11 refers to EDUCATIONNUM = 11; SEX = 'Female';"}
{"sample_id": 8552, "db_id": "software_company", "final": {"question": "Calculate the number of customers who did not respond in February of 2007.", "sql": "SELECT COUNT(REFID) custmoer_number FROM Mailings1_2 WHERE RESPONSE = 'false' AND REF_DATE BETWEEN '2007-02-01' AND '2007-02-28'", "source_tables": ["mailings1_2"]}, "evidence": "did not respond refers to RESPONSE = 'false'; February of 2007 refers to REF_DATE BETWEEN '2007-02-01 12:00:00.0'AND '2007-02-28 12:00:00.0';"}
{"sample_id": 8516, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are female?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.SEX = 'Female' AND T2.RESPONSE = 'true'", "source_tables": ["customers", "mailings1_2"]}, "evidence": "RESPONSE = 'true'; SEX = 'Female';"}
{"sample_id": 8569, "db_id": "software_company", "final": {"question": "List the educationnum and response of customers within the age of 20 to 30 that has the highest number of inhabitants among the group.", "sql": "SELECT T1.EDUCATIONNUM, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE T1.age >= 20 AND T1.age <= 30 ORDER BY T3.INHABITANTS_K DESC LIMIT 1", "source_tables": ["demog", "customers", "mailings1_2"]}, "evidence": "age of 20 to 30 refers to age BETWEEN 20 AND 30; the highest number of inhabitants refers to MAX(INHABITANTS_K);"}
{"sample_id": 8543, "db_id": "software_company", "final": {"question": "Among the widowed female customers, give the income of those who has an level of education of 5 and below.", "sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 5 AND SEX = 'Female' AND MARITAL_STATUS = 'Widowed' )", "source_tables": ["demog", "customers"]}, "evidence": "widowed female customers refer to SEX = 'Female' where MARITAL_STATUS = 'Widowed'; level of education of 5 and below refers to EDUCATIONNUM \u2264 5;"}
{"sample_id": 8562, "db_id": "software_company", "final": {"question": "In geographic identifier from 10 to 30, how many of them has an income below 2000?", "sql": "SELECT COUNT(GEOID) FROM Demog WHERE INCOME_K < 2000 AND GEOID >= 10 AND GEOID <= 30", "source_tables": ["demog"]}, "evidence": "GEOID BETWEEN 10 AND 30; INCOME_K < 2000;"}
{"sample_id": 8519, "db_id": "software_company", "final": {"question": "How many customers are from the place with the highest average income per month?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1", "source_tables": ["demog", "customers"]}, "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K);"}
{"sample_id": 8583, "db_id": "software_company", "final": {"question": "Describe the average income per month and yearly income of the geographic ID in which customer of ID \"209556\" and \"290135\".", "sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 209556 OR T1.ID = 290135", "source_tables": ["demog", "customers"]}, "evidence": "the average income per month refers to INCOME_K; yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12);"}
{"sample_id": 8561, "db_id": "software_company", "final": {"question": "List down the geographic identifier with an number of inhabitants less than 30.", "sql": "SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30", "source_tables": ["demog"]}, "evidence": "geographic identifier with an number of inhabitants less than 30 refers to GEOID where INHABITANTS_K < 30;"}
{"sample_id": 8527, "db_id": "software_company", "final": {"question": "Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are teenagers?", "sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.age >= 13 AND T1.age <= 19 AND T2.RESPONSE = 'true'", "source_tables": ["customers", "mailings1_2"]}, "evidence": "RESPONSE = 'true'; teenagers are people aged between 13 and 19 years;"}
{"sample_id": 8582, "db_id": "software_company", "final": {"question": "Find the response status to customer whose geographic ID of 134.", "sql": "SELECT T2.RESPONSE FROM Customers AS T1 INNER JOIN mailings3 AS T2 ON T1.ID = T2.REFID WHERE T1.GEOID = 134", "source_tables": ["mailings3", "customers"]}, "evidence": "GEOID = 134;"}
{"sample_id": 8580, "db_id": "software_company", "final": {"question": "Find out the yearly income of geographic ID when the customer is female and occupation as sales.", "sql": "SELECT T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.OCCUPATION = 'Sales'", "source_tables": ["demog", "customers"]}, "evidence": "yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12); SEX = 'Female';"}
{"sample_id": 8581, "db_id": "software_company", "final": {"question": "Among the geographic ID which has 33.658K of inhabitants, describe the education, occupation and age of female widow.", "sql": "SELECT T1.EDUCATIONNUM, T1.OCCUPATION, T1.age FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K = 33.658 AND T1.SEX = 'Female' AND T1.MARITAL_STATUS = 'Widowed'", "source_tables": ["demog", "customers"]}, "evidence": "geographic ID which has 33.658K of inhabitants refers to GEOID where INHABITANTS_K = 33.658; education refers to EDUCATIONNUM; female widow refers to SEX = 'Female' where MARITAL_STATUS = 'Widowed';"}
{"sample_id": 8550, "db_id": "software_company", "final": {"question": "Find and list the id and geographic ID of the elderly customers with an education level below 3.", "sql": "SELECT ID, GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND age > 65", "source_tables": ["customers"]}, "evidence": "elderly customers with an education level below 3 refer to age > 65 where EDUCATIONNUM < 3; geographic ID refers to GEOID;"}
{"sample_id": 8571, "db_id": "software_company", "final": {"question": "List the marital status and response of female customers with an level of education of 8 and above.", "sql": "SELECT DISTINCT T1.MARITAL_STATUS, T2.RESPONSE FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.EDUCATIONNUM > 8 AND T1.SEX = 'Female'", "source_tables": ["customers", "mailings1_2"]}, "evidence": "female customers with an level of education of 8 and above refer to SEX = 'Female' where EDUCATIONNUM \u2265 8;"}
{"sample_id": 8645, "db_id": "chicago_crime", "final": {"question": "Describe the specific description and case locations under IUCR 142.", "sql": "SELECT T1.secondary_description, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.iucr_no = 142", "source_tables": ["iucr", "crime"]}, "evidence": "specific description refers to secondary_description; location refers to latitude, longitude; IUCR 142 refers to iucr_no = 142"}
{"sample_id": 8685, "db_id": "chicago_crime", "final": {"question": "Give the case number and coordinates of the places where child abduction is reported.", "sql": "SELECT T1.case_number, T1.latitude, T1.longitude FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T2.iucr_no = T1.iucr_no WHERE T2.secondary_description = 'CHILD ABDUCTION'", "source_tables": ["iucr", "crime"]}, "evidence": "\"CHILD ABDUCTION\" is the secondary_description; coordinates refers to latitude, longitude"}
{"sample_id": 8726, "db_id": "chicago_crime", "final": {"question": "What is the weekly average number of fraud incidents that were reported in January 2018? Provide the description of the location where the majority of fraud incidents occurred in the said month.", "sql": "SELECT CAST(COUNT(T1.fbi_code_no) AS REAL) / 4 FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018'", "source_tables": ["crime", "fbi_code"]}, "evidence": "fraud incident refers to title = 'Fraud'; reported in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; description of location refers to location_description; weekly average refers to Divide (Count(report_no), 4); majority of incidents occurred refers to Max(Count(location_description))"}
{"sample_id": 8758, "db_id": "chicago_crime", "final": {"question": "How many incidents are considered \"severe\" in the IUCR classification?", "sql": "SELECT COUNT(*) FROM IUCR WHERE index_code = 'I'", "source_tables": ["iucr"]}, "evidence": "severe refers to index_code = 'I'; incidents refers to iucr_no"}
{"sample_id": 8678, "db_id": "chicago_crime", "final": {"question": "What is the FBI code and definition of Gambling?", "sql": "SELECT fbi_code_no, description FROM FBI_Code WHERE title = 'Gambling'", "source_tables": ["fbi_code"]}, "evidence": "FBI code refers to fbi_code_no; definition refers to description; Gambling refers to title = 'Gambling'"}
{"sample_id": 8748, "db_id": "chicago_crime", "final": {"question": "Provide at least 5 ward office addresses associated with the crimes that happened in the community of Montclare.", "sql": "SELECT T3.ward_office_address FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Ward AS T3 ON T2.ward_no = T3.ward_no WHERE T1.community_area_name = 'Montclare' GROUP BY T3.ward_office_address LIMIT 5", "source_tables": ["community_area", "crime", "ward"]}, "evidence": "\"Montclare\" is the community_area_name"}
{"sample_id": 8670, "db_id": "chicago_crime", "final": {"question": "What is the district address associated with the case JB107731?", "sql": "SELECT T1.address FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T2.case_number = 'JB107731'", "source_tables": ["crime", "district"]}, "evidence": "case JB107731 refers to case_number = 'JB107731'"}
{"sample_id": 8675, "db_id": "chicago_crime", "final": {"question": "Please list the area name of the communities in the Far north side, which has a population of more than 50000 but less than 70000.", "sql": "SELECT community_area_name, side FROM Community_Area WHERE side = 'Far North ' AND population BETWEEN 50000 AND 70000", "source_tables": ["community_area"]}, "evidence": "area name refers to community_area_name; the Far north side refers to side = 'Far North'; a population of more than 50000 but less than 70000 refers to population BETWEEN '50000' AND '70000'"}
{"sample_id": 8649, "db_id": "chicago_crime", "final": {"question": "How many crimes were Misc Non-Index Offense?", "sql": "SELECT SUM(CASE WHEN T1.title = 'Misc Non-Index Offense' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no", "source_tables": ["crime", "fbi_code"]}, "evidence": "Misc Non-Index Offense refers to title = 'Misc Non-Index Offense'"}
{"sample_id": 8674, "db_id": "chicago_crime", "final": {"question": "List the case number of the crimes in wards with population below 52000 that have beat greater than the 90% of the average beat of all crimes.", "sql": "SELECT COUNT(T1.report_no) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.Population < 52000 AND T1.beat > ( SELECT AVG(T1.beat) * 0.9 FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.Population < 52000 )", "source_tables": ["crime", "ward"]}, "evidence": "population below 52000 refers to population < 52000; beat greater than the 90% of the average beat refers to beat > multiply(avg(beat), 0.9) where population < 52000"}
{"sample_id": 8620, "db_id": "chicago_crime", "final": {"question": "What is the percentage of larceny cases among all cases that happened in Edgewater community?", "sql": "SELECT CAST(SUM(CASE WHEN T3.title = 'Larceny' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.case_number) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.community_area_name = 'Edgewater'", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "larceny case refers to title = 'Larceny'; Edgewater community refers to community_area_name = 'Edgewater'; percentage = divide(count(case_number where title = 'Larceny'), count(case_number)) where community_area_name = 'Edgewater' * 100%"}
{"sample_id": 8672, "db_id": "chicago_crime", "final": {"question": "List the case number of crimes against society that happened in June 2018.", "sql": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T2.date LIKE '6/%/2018%' AND T1.crime_against = 'Society'", "source_tables": ["crime", "fbi_code"]}, "evidence": "crime against society refers to crime_against = 'Society'; in June 2018 refers to date LIKE '6/%/2018%'"}
{"sample_id": 8640, "db_id": "chicago_crime", "final": {"question": "List the IUCR numbers and index status of homicide incidents.", "sql": "SELECT index_code FROM IUCR WHERE primary_description = 'HOMICIDE'", "source_tables": ["iucr"]}, "evidence": "index status refers to index_code; homicide incident refers to primary_description = 'HOMICIDE'"}
{"sample_id": 8646, "db_id": "chicago_crime", "final": {"question": "How many crimes were handled by Brendan Reilly on 7th October 2018?", "sql": "SELECT SUM(CASE WHEN T2.alderman_last_name = 'Reilly' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.alderman_name_suffix IS NULL AND T2.alderman_first_name = 'Brendan' AND date LIKE '10/7/2018%'", "source_tables": ["crime", "ward"]}, "evidence": "7th October 2018 refers to date like '10/7/2018%'"}
{"sample_id": 8734, "db_id": "chicago_crime", "final": {"question": "What are the neighborhoods that are located in the North Center community area?", "sql": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'North Center'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "\"North Center\" is the community_area_name; neighborhoods refers to neighborhood_name"}
{"sample_id": 8679, "db_id": "chicago_crime", "final": {"question": "Among the crimes, what percentage are severe?", "sql": "SELECT CAST(COUNT(CASE WHEN index_code = 'I' THEN iucr_no ELSE NULL END) AS REAL) * 100 / COUNT(iucr_no) FROM IUCR", "source_tables": ["iucr"]}, "evidence": "severe refers to index_code = 'I'; percentage = divide(count(iucr_no where index_code = 'I'), count(iucr_no)) * 100%"}
{"sample_id": 8727, "db_id": "chicago_crime", "final": {"question": "Please list any three community areas with a population of more than 50,000.", "sql": "SELECT community_area_name FROM Community_Area WHERE population > 50000 LIMIT 3", "source_tables": ["community_area"]}, "evidence": "population of more than 50000 refers to Population > 50000; community area refers to community_area_name"}
{"sample_id": 8700, "db_id": "chicago_crime", "final": {"question": "How many domestic crime cases has Commander Ronald A. Pontecore Jr. been responsible for investigating?", "sql": "SELECT SUM(CASE WHEN T2.domestic = 'TRUE' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.commander = 'Ronald A. Pontecore Jr.'", "source_tables": ["crime", "district"]}, "evidence": "domestic crime refers to domestic = 'TRUE'; person responsible for investigating refers to commander"}
{"sample_id": 8729, "db_id": "chicago_crime", "final": {"question": "What is the difference between the number of communities that are located on the north and south sides with a population of more than 30,000?", "sql": "SELECT SUM(CASE WHEN side = 'South ' THEN 1 ELSE 0 END) - SUM(CASE WHEN side = 'North' THEN 1 ELSE 0 END) AS DIFF FROM Community_Area WHERE population > 300000", "source_tables": ["community_area"]}, "evidence": "population of more than 30000 refers to Population > 30000; 'North' and 'South' both are the side; different number of community refers to Subtract(Count(Community_area_no where side = 'South'), Count(Community_area_no where side = 'North'))"}
{"sample_id": 8638, "db_id": "chicago_crime", "final": {"question": "How many vandalisms were arrested in the ward represented by Edward Burke?", "sql": "SELECT SUM(CASE WHEN T1.alderman_last_name = 'Burke' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T3.title = 'Vandalism' AND T2.arrest = 'TRUE' AND T1.alderman_first_name = 'Edward'", "source_tables": ["crime", "fbi_code", "ward"]}, "evidence": "vandalism refers to title = 'Vandalism'; arrested refers to arrest = 'TRUE'"}
{"sample_id": 8702, "db_id": "chicago_crime", "final": {"question": "What phone number does alderman Emma Mitts have to call if she wants to speak to the commander in charge of the investigation of the crimes that have occurred in her ward?", "sql": "SELECT T3.phone FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.alderman_first_name = 'Emma' AND T1.alderman_last_name = 'Mitts'", "source_tables": ["district", "crime", "ward"]}, "evidence": ""}
{"sample_id": 8591, "db_id": "chicago_crime", "final": {"question": "To which community area does the neighborhood Albany Park belong?", "sql": "SELECT T2.community_area_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.neighborhood_name = 'Albany Park'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "community area refers to community_area_name; the neighborhood Albany Park refers to neighborhood_name = 'Albany Park'"}
{"sample_id": 8692, "db_id": "chicago_crime", "final": {"question": "Calculate the difference in the average number of vehicular hijackings and aggravated vehicular hijackings in the districts.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T1.secondary_description = 'VEHICULAR HIJACKING' THEN T1.iucr_no END) AS REAL) / CAST(COUNT(DISTINCT CASE WHEN T1.secondary_description = 'VEHICULAR HIJACKING' THEN T3.district_name END) AS REAL) - CAST(COUNT(CASE WHEN T1.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN T1.iucr_no END) AS REAL) / CAST(COUNT(DISTINCT CASE WHEN T1.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN T3.district_name END) AS REAL), 4) AS \"difference\" FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no", "source_tables": ["iucr", "crime", "district"]}, "evidence": "\"VEHICULAR HIJACKING\" and \"AGGRAVATED VEHICULAR HIJACKING\" are both secondary_description; difference in average = Subtract (Divide(Count(secondary_description = 'VEHICULAR HIJACKING'), Count(district_name)), Divide(Count(secondary_description = \"AGGRAVATED VEHICULAR HIJACKING\"), Count(district_name)))"}
{"sample_id": 8751, "db_id": "chicago_crime", "final": {"question": "Name the neighborhood of the community area in crime with report number 23843?", "sql": "SELECT T3.neighborhood_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T2.report_no = 23778", "source_tables": ["community_area", "crime", "neighborhood"]}, "evidence": "neighborhood refers to neighborhood_name; '23778' is the report_no"}
{"sample_id": 8762, "db_id": "chicago_crime", "final": {"question": "Please list the location coordinates of all the incidents that had happened in the ward represented by alderman Pat Dowell.", "sql": "SELECT T2.latitude, T2.longitude FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T1.alderman_first_name = 'Pat' AND T1.alderman_last_name = 'Dowell' AND T2.latitude IS NOT NULL AND T2.longitude IS NOT NULL", "source_tables": ["crime", "ward"]}, "evidence": "location coordinates refers to latitude, longitude"}
{"sample_id": 8768, "db_id": "chicago_crime", "final": {"question": "District commander Robert A. Rubio was responsible for how many incidents in January, 2018?", "sql": "SELECT SUM(CASE WHEN SUBSTR(T2.date, 5, 4) = '2018' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander = 'Robert A. Rubio' AND SUBSTR(T2.date, 1, 1) = '1'", "source_tables": ["crime", "district"]}, "evidence": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'"}
{"sample_id": 8715, "db_id": "chicago_crime", "final": {"question": "How many severe crime incidents were reported at coordinate 41.64820151, -87.54430496?", "sql": "SELECT SUM(CASE WHEN T1.longitude = '-87.54430496' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.report_no = T2.iucr_no WHERE T2.index_code = 'I' AND T1.latitude = '41.64820251'", "source_tables": ["iucr", "crime"]}, "evidence": "coordinates refers to latitude, longitude; severe crime refers to index_code = 'I'"}
{"sample_id": 8722, "db_id": "chicago_crime", "final": {"question": "How many violation of laws are there where no arrest has been made?", "sql": "SELECT SUM(CASE WHEN T1.description LIKE '%The violation of laws%' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.Arrest = 'FALSE'", "source_tables": ["crime", "fbi_code"]}, "evidence": "\"The violation of laws \" is the description of incidents; no arrest has been made refers to arrest = 'FALSE'"}
{"sample_id": 8612, "db_id": "chicago_crime", "final": {"question": "How severe was case JB296775? Give the index code for severity.", "sql": "SELECT T2.iucr_no FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.case_number = 'JB296775'", "source_tables": ["iucr", "crime"]}, "evidence": "index code refers to iucr_no; case JB296775 refers to case_number = 'JB296775'"}
{"sample_id": 8588, "db_id": "chicago_crime", "final": {"question": "Which community area has the least population?", "sql": "SELECT community_area_name FROM Community_Area ORDER BY population ASC LIMIT 1", "source_tables": ["community_area"]}, "evidence": "community area refers to community_area_name; the least population refers to min(population)"}
{"sample_id": 8665, "db_id": "chicago_crime", "final": {"question": "Among the crimes reported to the ward located at 1958 N. Milwaukee Ave., list down the report number of the crimes happened inside the apartment.", "sql": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T2.ward_office_address = '1958 N. Milwaukee Ave.'", "source_tables": ["crime", "ward"]}, "evidence": "1958 N. Milwaukee Ave. refers to ward_office_address = '1958 N. Milwaukee Ave.'; report number refers to case_number; inside the apartment refers to location_description = 'APARTMENT'"}
{"sample_id": 8711, "db_id": "chicago_crime", "final": {"question": "How many crime against property are there?", "sql": "SELECT COUNT(*) AS cnt FROM FBI_Code WHERE crime_against = 'Property'", "source_tables": ["fbi_code"]}, "evidence": ""}
{"sample_id": 8713, "db_id": "chicago_crime", "final": {"question": "Who is the crime against criminal sexual abuse?", "sql": "SELECT crime_against FROM FBI_Code WHERE title = 'Criminal Sexual Abuse'", "source_tables": ["fbi_code"]}, "evidence": "\"Criminal Sexual Abuse\" is the title of crime"}
{"sample_id": 8752, "db_id": "chicago_crime", "final": {"question": "What is the FBI description of the crime for report number 23778?", "sql": "SELECT T1.description FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.report_no = 23843", "source_tables": ["crime", "fbi_code"]}, "evidence": "\"23778\" is the report_no; FBI description refers to description"}
{"sample_id": 8664, "db_id": "chicago_crime", "final": {"question": "List the case numbers of domestic violence crimes reported in Lincoln Square.", "sql": "SELECT T2.case_number FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Lincoln Square' AND T2.domestic = 'TRUE'", "source_tables": ["community_area", "crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; Lincoln Square refers to community_area_name = 'Lincoln Square'"}
{"sample_id": 8628, "db_id": "chicago_crime", "final": {"question": "Which crime was committed the most by criminals?", "sql": "SELECT T2.title FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no ORDER BY T2.fbi_code_no DESC LIMIT 1", "source_tables": ["crime", "fbi_code"]}, "evidence": "crime refers to title; committed the most refers to max(fbi_code_no)"}
{"sample_id": 8605, "db_id": "chicago_crime", "final": {"question": "How many community areas are in the Far North side?", "sql": "SELECT COUNT(*) FROM Community_Area WHERE side = 'Far North '", "source_tables": ["community_area"]}, "evidence": "the Far North side refers to side = 'Far North'"}
{"sample_id": 8746, "db_id": "chicago_crime", "final": {"question": "What is the beat and location description of the case JB112212?", "sql": "SELECT beat, location_description FROM Crime WHERE case_number = 'JB112212'", "source_tables": ["crime"]}, "evidence": "case JB112212 refers to case_number = 'JB112212'"}
{"sample_id": 8637, "db_id": "chicago_crime", "final": {"question": "What is the name of the community that has the highest number of crimes related to prostitution?", "sql": "SELECT T3.community_area_name FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T1.community_area_no = T3.community_area_no WHERE T2.primary_description = 'PROSTITUTION' GROUP BY T1.iucr_no ORDER BY T1.case_number DESC LIMIT 1", "source_tables": ["iucr", "community_area", "crime"]}, "evidence": "name of the community refers to community_area_name; the highest number of crimes refers to max(case_number); prostitution refers to primary_description = 'PROSTITUTION'"}
{"sample_id": 8694, "db_id": "chicago_crime", "final": {"question": "List all the crimes of the narcotic type that exist.", "sql": "SELECT secondary_description FROM IUCR WHERE primary_description = 'NARCOTICS' GROUP BY secondary_description", "source_tables": ["iucr"]}, "evidence": "narcotic type refers to primary_description = 'NARCOTICS'; crime refers to secondary_description"}
{"sample_id": 8728, "db_id": "chicago_crime", "final": {"question": "What are the communities that are grouped together on the central side?", "sql": "SELECT community_area_name FROM Community_Area WHERE side = 'Central'", "source_tables": ["community_area"]}, "evidence": "central side refers to side = 'Central'; community refers to community_area_name"}
{"sample_id": 8650, "db_id": "chicago_crime", "final": {"question": "List down the neighborhood areas of Douglas.", "sql": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Douglas'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "neighborhood area refers to neighborhood_name; Douglas refers to community_area_name = 'Douglas'"}
{"sample_id": 8631, "db_id": "chicago_crime", "final": {"question": "How many solicit on public way prostitution crimes were arrested in West Garfield Park?", "sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN IUCR AS T3 ON T2.iucr_no = T3.iucr_no WHERE T1.community_area_name = 'West Garfield Park' AND T3.secondary_description = 'SOLICIT ON PUBLIC WAY' AND T3.primary_description = 'PROSTITUTION'", "source_tables": ["iucr", "community_area", "crime"]}, "evidence": "solicit on public way prostitution crime refers to secondary_description = 'SOLICIT ON PUBLIC WAY' AND primary_description = 'PROSTITUTION'; arrested refers to arrest = 'TRUE'; West Garfield Park refers to community_area_name = 'West Garfield Park'"}
{"sample_id": 8668, "db_id": "chicago_crime", "final": {"question": "List the report number of crimes against property happened in Riverdale.", "sql": "SELECT SUM(CASE WHEN T1.crime_against = 'Property' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T3.community_area_name = 'Riverdale'", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "crime against property refers to crime_against = 'Property'; Riverdale refers to community_area_name = 'Riverdale'"}
{"sample_id": 8721, "db_id": "chicago_crime", "final": {"question": "In the least populated community, what is the most common location of all the reported crime incidents?", "sql": "SELECT T2.location_description FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.population = ( SELECT MIN(population) FROM Community_Area ) AND T2.location_description IS NOT NULL GROUP BY T2.location_description", "source_tables": ["community_area", "crime"]}, "evidence": "least populated refers to Min(Population); community refers to community_area_no; most common location refers to Max(Count(location_description))"}
{"sample_id": 8770, "db_id": "chicago_crime", "final": {"question": "Please list the blocks where all the incidents in the district commanded by Robert A. Rubio took place.", "sql": "SELECT T2.block FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.commander = 'Robert A. Rubio'", "source_tables": ["crime", "district"]}, "evidence": "\"Robert A. Rubio\" is the commander"}
{"sample_id": 8771, "db_id": "chicago_crime", "final": {"question": "What is the average number of incidents per month in 2018 in the ward with the most population?", "sql": "SELECT COUNT(T1.ward_no) / 12 AS average FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.date LIKE '%2018%' AND T1.Population = ( SELECT MAX(T1.Population) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.date LIKE '%2018%' )", "source_tables": ["crime", "ward"]}, "evidence": "in 2018 refers to date like '%2018%'; ward with most population refers to Max(Population); average number of incident per month refers to Divide(Count(ward_no), 12)"}
{"sample_id": 8772, "db_id": "chicago_crime", "final": {"question": "Among all the incidents with no arrest made, what is the percentage of them having a generic description of \"BATTERY\" in the IUCR classification?", "sql": "SELECT CAST(SUM(CASE WHEN T1.primary_description = 'BATTERY' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.arrest = 'FALSE'", "source_tables": ["iucr", "crime"]}, "evidence": "incident with no arrest made refers to arrest = 'FALSE'; general description refers to primary_description; \"BATTERY\" is the primary_description; percentage = Divide (Count(iucr_no where primary_description = 'BATTERY'), Count(iucr_no)) * 100"}
{"sample_id": 8750, "db_id": "chicago_crime", "final": {"question": "What is the neighborhood name in the community area of Lake View?", "sql": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'Lake View'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "\"Lake View\" is the community_area_name"}
{"sample_id": 8754, "db_id": "chicago_crime", "final": {"question": "Among the crimes happened in the neighborhood called \"Avalon Park\", what is the percentage of crimes that happened inside the house?", "sql": "SELECT CAST(SUM(CASE WHEN T2.location_description = 'HOUSE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.location_description) AS persent FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.neighborhood_name = 'Avalon Park'", "source_tables": ["community_area", "crime", "neighborhood"]}, "evidence": "\"Avalon Park\" is the neghborhood_name; happened inside the house refers to location_description = 'HOUSE'; percentage = Divide (Count(location_description = 'HOUSE'), Count(location_description)) * 100"}
{"sample_id": 8703, "db_id": "chicago_crime", "final": {"question": "How many crimes described as 'The theft of a motor vehicle' by the FBI have taken place in the Lake View community?", "sql": "SELECT SUM(CASE WHEN T3.community_area_name = 'Lake View' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T1.description = 'The theft of a motor vehicle.'", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "lake view community refers to community_area_name = 'Lake View'; 'The theft of a motor vehicle' is the description"}
{"sample_id": 8615, "db_id": "chicago_crime", "final": {"question": "Give the neighborhood name of West Englewood community.", "sql": "SELECT T1.neighborhood_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.community_area_name = 'West Englewood'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "West Englewood community refers to community_area_name = 'West Englewood'"}
{"sample_id": 8622, "db_id": "chicago_crime", "final": {"question": "What is the name of the community with the highest population?", "sql": "SELECT community_area_name FROM Community_Area ORDER BY population DESC LIMIT 1", "source_tables": ["community_area"]}, "evidence": "name of the community refers to community_area_name; the highest population refers to max(population)"}
{"sample_id": 8766, "db_id": "chicago_crime", "final": {"question": "Please list the case numbers of all the crimes whose short description of the kind of crime is \"Homicide 1st & 2nd Degree\" in the FBI classification.", "sql": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Homicide 1st & 2nd Degree'", "source_tables": ["crime", "fbi_code"]}, "evidence": "\"Homicide 1st & 2nd Degree\" is the title"}
{"sample_id": 8705, "db_id": "chicago_crime", "final": {"question": "What types of domestic crimes have occurred the most in the North Lawndale community?", "sql": "SELECT T2.domestic FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'North Lawndale' AND T2.domestic = 'TRUE' GROUP BY T2.domestic ORDER BY COUNT(T2.domestic) DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "\"North Lawndale' is the community_area_name; occur the most domestic crime refers to Max(Count(domestic = 'TRUE'))"}
{"sample_id": 8716, "db_id": "chicago_crime", "final": {"question": "Who is the commanding officer in the district with the highest number of reported crimes where no arrest has been made?", "sql": "SELECT T2.commander FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.arrest = 'FALSE' GROUP BY T2.commander ORDER BY COUNT(T1.report_no) DESC LIMIT 1", "source_tables": ["crime", "district"]}, "evidence": "where no arrest refers to arrest = 'FALSE'; highest number of crime refers to Max(Count(report_no)); commanding officer refers to commander"}
{"sample_id": 8662, "db_id": "chicago_crime", "final": {"question": "How many of the crimes that happened in the street have FBI title \"Homicide 1st & 2nd Degree\"?", "sql": "SELECT SUM(CASE WHEN T2.location_description = 'STREET' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T1.title = 'Homicide 1st & 2nd Degree'", "source_tables": ["crime", "fbi_code"]}, "evidence": "in the street refers to location_description = 'STREET'"}
{"sample_id": 8687, "db_id": "chicago_crime", "final": {"question": "Find the community area where the least number of domestic crimes happened.", "sql": "SELECT T2.community_area_no FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.domestic = 'TRUE' GROUP BY T2.community_area_no ORDER BY COUNT(T2.community_area_no) ASC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "least number of domestic crime refers to Min(Count(domestic = \"TRUE\")); community area refers to community_area_no"}
{"sample_id": 8616, "db_id": "chicago_crime", "final": {"question": "How many different neighborhoods are there in Roseland community?", "sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Roseland' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no", "source_tables": ["community_area", "neighborhood"]}, "evidence": "Roseland community refers to community_area_name = 'Roseland'"}
{"sample_id": 8633, "db_id": "chicago_crime", "final": {"question": "How many neighborhoods are there in Near North Side?", "sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Near North Side' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no", "source_tables": ["community_area", "neighborhood"]}, "evidence": "Near North Side refers to community_area_name = 'Near North Side'"}
{"sample_id": 8696, "db_id": "chicago_crime", "final": {"question": "List crimes that the FBI has classified as Drug Abuse by their report number.", "sql": "SELECT T2.report_no FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no WHERE T1.title = 'Drug Abuse'", "source_tables": ["crime", "fbi_code"]}, "evidence": "\"Drug Abuse\" is the title of crime"}
{"sample_id": 8745, "db_id": "chicago_crime", "final": {"question": "Provide the ward number with the highest population.", "sql": "SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1", "source_tables": ["ward"]}, "evidence": "highest population refers to Max(Population); ward number refers to ward_no"}
{"sample_id": 8627, "db_id": "chicago_crime", "final": {"question": "Who is the commanding officer in the district with the highest number of disorderly conduct?", "sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T3.title = 'Disorderly Conduct' AND T2.fbi_code_no = 24 GROUP BY T2.fbi_code_no ORDER BY COUNT(T1.district_no) DESC LIMIT 1", "source_tables": ["crime", "fbi_code", "district"]}, "evidence": "commanding officer refers to commander; the highest number refers to max(count(district_no)); disorderly conduct refers to title = 'Disorderly Conduct'"}
{"sample_id": 8693, "db_id": "chicago_crime", "final": {"question": "How many crimes happened in longitude -8772658001?", "sql": "SELECT COUNT(*) FROM Crime WHERE longitude = '-87.72658001'", "source_tables": ["crime"]}, "evidence": ""}
{"sample_id": 8626, "db_id": "chicago_crime", "final": {"question": "Give the detailed description of all the crimes against society.", "sql": "SELECT description FROM FBI_Code WHERE crime_against = 'Society'", "source_tables": ["fbi_code"]}, "evidence": "crime against society refers to crime_against = 'Society'"}
{"sample_id": 8644, "db_id": "chicago_crime", "final": {"question": "List down the titles and descriptions of the crimes cases against persons.", "sql": "SELECT title, description FROM FBI_Code WHERE crime_against = 'Persons'", "source_tables": ["fbi_code"]}, "evidence": "crime case against persons refers to crime_against = 'Persons'"}
{"sample_id": 8599, "db_id": "chicago_crime", "final": {"question": "How many crimes had happened in the community area with the most population?", "sql": "SELECT COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no GROUP BY T1.community_area_name ORDER BY T1.population DESC LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "the most population refers to max(population)"}
{"sample_id": 8684, "db_id": "chicago_crime", "final": {"question": "Find the ward office's address and phone number of the ward where the most crimes without arrest occurred.", "sql": "SELECT T2.ward_office_address, T2.ward_office_phone FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.arrest = 'FALSE' GROUP BY T2.ward_office_address, T2.ward_office_phone ORDER BY COUNT(T1.arrest) DESC LIMIT 1", "source_tables": ["crime", "ward"]}, "evidence": "the most crime without arrest refers to Max(Count(arrest = 'FALSE')); phone number refers to ward_office_phone; address refers to ward_office_address"}
{"sample_id": 8676, "db_id": "chicago_crime", "final": {"question": "Give the coordinate of the alleys where a crime was reported and an arrest was made.", "sql": "SELECT latitude, longitude FROM Crime WHERE location_description = 'ALLEY' AND arrest = 'TRUE' GROUP BY latitude, longitude", "source_tables": ["crime"]}, "evidence": "coordinate refers to latitude, longitude; alley refers to location_description = 'ALLEY'; an arrest was made refers to arrest = 'TRUE'"}
{"sample_id": 8720, "db_id": "chicago_crime", "final": {"question": "What is the name of the district with the highest number of domestic violence cases?", "sql": "SELECT T2.district_name FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.domestic = 'TRUE' GROUP BY T2.district_name ORDER BY COUNT(T1.district_no) DESC LIMIT 1", "source_tables": ["crime", "district"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; highest number of case refers to Max(Count(district_no)); name of district refers to distric_name"}
{"sample_id": 8686, "db_id": "chicago_crime", "final": {"question": "What is the most reported crime in the Northwest side?", "sql": "SELECT T3.secondary_description FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T1.side = 'Northwest ' GROUP BY T3.secondary_description ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["iucr", "community_area", "crime"]}, "evidence": "most reported crime refers to max(Count(secondary_description))"}
{"sample_id": 8671, "db_id": "chicago_crime", "final": {"question": "Calculate the total beat of the crimes reported in a community area in the central side with population of 50,000 and above.", "sql": "SELECT 1.0 * SUM(CASE WHEN T1.population > 50000 THEN T2.beat ELSE 0 END) AS sum FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Central'", "source_tables": ["community_area", "crime"]}, "evidence": "the central side refers to side = 'Central'; population of 50,000 and above refers to population > '50000'; total beat = sum(beat) where side = 'Central' and population > '50000'"}
{"sample_id": 8707, "db_id": "chicago_crime", "final": {"question": "Which commander has had to deal with more cases of criminal sexual abuse?", "sql": "SELECT T3.commander FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.secondary_description = 'CRIMINAL SEXUAL ABUSE' GROUP BY T3.commander ORDER BY COUNT(T1.secondary_description) DESC LIMIT 1", "source_tables": ["iucr", "crime", "district"]}, "evidence": "more cases of criminal sexual abuse refers to Max(Count(secondary_description = 'CRIMINAL SEXUAL ABUSE'))"}
{"sample_id": 8608, "db_id": "chicago_crime", "final": {"question": "Where is the coordinate (41.66236555, -87.63470194) located? Give the name of the district.", "sql": "SELECT T2.district_name FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.longitude = '-87.63470194' AND T1.latitude = '41.66236555'", "source_tables": ["crime", "district"]}, "evidence": "coordinate (41.66236555, -87.63470194) refers to latitude = '41.66236555' AND longitude = '-87.63470194'; name of the district refers to district_name"}
{"sample_id": 8749, "db_id": "chicago_crime", "final": {"question": "List down the district's commander associated with the crime that happened at the yard and has a beat of 532.", "sql": "SELECT T2.address, T2.commander FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.location_description = 'YARD' AND T1.beat = 532", "source_tables": ["crime", "district"]}, "evidence": "beat of 532 refers to beat = 532; happened in the Yard refers to location_description = 'YARD'; district commander refers to commander"}
{"sample_id": 8629, "db_id": "chicago_crime", "final": {"question": "In Albany Park, how many arrests were made in an apartment due to criminal sexual abuse?", "sql": "SELECT SUM(CASE WHEN T3.title = 'Criminal Sexual Abuse' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no WHERE T1.district_name = 'Albany Park' AND T2.arrest = 'TRUE' AND T2.location_description = 'APARTMENT'", "source_tables": ["crime", "fbi_code", "district"]}, "evidence": "Albany Park refers to district_name = 'Albany Park'; in an apartment refers to location_description = 'APARTMENT'; criminal sexual abuse refers to title = 'Criminal Sexual Abuse'"}
{"sample_id": 8621, "db_id": "chicago_crime", "final": {"question": "How many crimes were committed at 018XX S KOMENSKY AVEin May 2018?", "sql": "SELECT SUM(CASE WHEN date LIKE '5/%/2018%' THEN 1 ELSE 0 END) FROM Crime WHERE block = '018XX S KOMENSKY AVE'", "source_tables": ["crime"]}, "evidence": " in May 2018 refers to date LIKE '5/%/2018%'"}
{"sample_id": 8731, "db_id": "chicago_crime", "final": {"question": "Who is responsible for crime cases in district Lincoln?", "sql": "SELECT commander FROM District WHERE district_name = 'Lincoln'", "source_tables": ["district"]}, "evidence": "\"Lincoln\" is the district_name; responsible for crime case refers to commander"}
{"sample_id": 8625, "db_id": "chicago_crime", "final": {"question": "How many arrests were made in 2018 in an animal hospital under FBI code 08B?", "sql": "SELECT SUM(CASE WHEN arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Crime WHERE date LIKE '%2018%' AND location_description = 'ANIMAL HOSPITAL' AND fbi_code_no = '08B'", "source_tables": ["crime"]}, "evidence": "arrest refers to arrest = 'TRUE'; in 2018 refers to date LIKE '%2018%'; in an animal hospital refers to location_description = 'ANIMAL HOSPITAL'; FBI code 08B refers to fbi_code_no = '08B'"}
{"sample_id": 8661, "db_id": "chicago_crime", "final": {"question": "Among the cases reported in the ward with Edward Burke as the alderman and happened in the community area with the highest population, provide the report number of the crime with the highest beat.", "sql": "SELECT T2.report_no FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no WHERE T1.alderman_first_name = 'Edward' AND T1.alderman_last_name = 'Burke' ORDER BY T2.beat DESC, T3.population DESC LIMIT 1", "source_tables": ["community_area", "crime", "ward"]}, "evidence": "the highest population refers to max(population); report number refers to report_no; the highest beat refers to max(beat)"}
{"sample_id": 8710, "db_id": "chicago_crime", "final": {"question": "What are the full names of the top 5 most crowded ward aldermen?", "sql": "SELECT alderman_first_name, alderman_last_name FROM Ward ORDER BY Population DESC LIMIT 5", "source_tables": ["ward"]}, "evidence": "most crowded ward refers to Max(Population); full name of alderman refers to alderman_first_name, alderman_last_name"}
{"sample_id": 8613, "db_id": "chicago_crime", "final": {"question": "Give the name of the community area which had the most pocket-picking thefts.", "sql": "SELECT T3.community_area_name FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.primary_description = 'THEFT' AND T1.secondary_description = 'POCKET-PICKING' GROUP BY T2.community_area_no ORDER BY T2.case_number DESC LIMIT 1", "source_tables": ["iucr", "community_area", "crime"]}, "evidence": "name of the community area refers to community_area_name; the most refers to max(case_number); pocket-picking theft refers to primary_description = 'THEFT' AND secondary_description = 'POCKET-PICKING'"}
{"sample_id": 8647, "db_id": "chicago_crime", "final": {"question": "How many cases have been arrested among the crimes that happened in the restaurant of Englewood?", "sql": "SELECT SUM(CASE WHEN T1.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Englewood' AND T1.location_description = 'RESTAURANT'", "source_tables": ["crime", "district"]}, "evidence": "arrested refers to arrest = 'TRUE'; restaurant refers to location_description = 'RESTAURANT'; Englewood refers to district_name = 'Englewood'"}
{"sample_id": 8585, "db_id": "chicago_crime", "final": {"question": "How many community areas are there in Central Chicago?", "sql": "SELECT COUNT(*) FROM Community_Area WHERE side = 'Central'", "source_tables": ["community_area"]}, "evidence": "Central Chicago refers to side = 'Central'"}
{"sample_id": 8653, "db_id": "chicago_crime", "final": {"question": "List the location descriptions and aldermen's full names of the arson by explosive.", "sql": "SELECT T2.location_description, T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T2.iucr_no WHERE T3.primary_description = 'ARSON' AND T3.secondary_description = 'BY EXPLOSIVE'", "source_tables": ["iucr", "crime", "ward"]}, "evidence": "aldermen's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; arson by explosive refers to primary_description = 'ARSON' AND secondary_description = 'BY EXPLOSIVE'"}
{"sample_id": 8652, "db_id": "chicago_crime", "final": {"question": "Among the crimes in the Central, calculate the percentage of larceny incidents.", "sql": "SELECT CAST(COUNT(CASE WHEN T3.title = 'Larceny' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T1.side = 'Central'", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "Central refers to side = 'Central'; larceny refers to title = 'Larceny'; percentage = divide(count(report_no where title = 'Larceny'), count(report_no)) where side = 'Central' * 100%"}
{"sample_id": 8595, "db_id": "chicago_crime", "final": {"question": "Please list the precise location coordinates of all the crimes in Central Chicago.", "sql": "SELECT T2.latitude, T2.longitude FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T1.district_name = 'Central'", "source_tables": ["crime", "district"]}, "evidence": "location coordinates refers to latitude, longitude; Central Chicago refers to district_name = 'Central'"}
{"sample_id": 8677, "db_id": "chicago_crime", "final": {"question": "Find the commander's name, email address, and phone number of the Ogden district.", "sql": "SELECT commander, email, phone FROM District WHERE district_name = 'Ogden'", "source_tables": ["district"]}, "evidence": "commander's name refers to commander; email address refers to email; phone number refers to phone"}
{"sample_id": 8759, "db_id": "chicago_crime", "final": {"question": "Among the crimes with no arrest made, how many of them happened in the ward represented by alderman Pat Dowell?", "sql": "SELECT SUM(CASE WHEN T1.alderman_last_name = 'Dowell' THEN 1 ELSE 0 END) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.arrest = 'FALSE' AND T1.alderman_first_name = 'Pat'", "source_tables": ["crime", "ward"]}, "evidence": "no arrest has been made refers to arrest = 'FALSE'"}
{"sample_id": 8660, "db_id": "chicago_crime", "final": {"question": "Calculate the average population of community areas in the West side.", "sql": "SELECT AVG(population) FROM Community_Area WHERE side = 'West '", "source_tables": ["community_area"]}, "evidence": "the West side refers to side = 'West'; average population = avg(population) where side = 'West'"}
{"sample_id": 8764, "db_id": "chicago_crime", "final": {"question": "Please list the case numbers of all the incidents with the generic description of \"BATTERY\" in the IUCR classification.", "sql": "SELECT T2.case_number FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.primary_description = 'BATTERY'", "source_tables": ["iucr", "crime"]}, "evidence": "general description refers to primary_description; 'BATTERY' is the primary_description"}
{"sample_id": 8666, "db_id": "chicago_crime", "final": {"question": "What is the total number of crimes that happened in Bridgeport with beat less than 1000?", "sql": "SELECT SUM(CASE WHEN T2.beat < 1000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Bridgeport'", "source_tables": ["community_area", "crime"]}, "evidence": "Bridgeport refers to community_area_name = 'Bridgeport'; with beat less than 1000 refers to beat < 1000; total number = count(beat) where community_area_name = 'Bridgeport' and beat < 1000"}
{"sample_id": 8651, "db_id": "chicago_crime", "final": {"question": "Calculate the average crime rate per month in the highest populous area.", "sql": "SELECT CAST(COUNT(T2.report_no) AS REAL) / 12 FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no GROUP BY T1.community_area_no HAVING COUNT(T1.population) ORDER BY COUNT(T1.population) LIMIT 1", "source_tables": ["community_area", "crime"]}, "evidence": "the highest populous refers to max(population); average crime rate per month = divide(count(report_no where population = max(population)), 12)"}
{"sample_id": 8760, "db_id": "chicago_crime", "final": {"question": "Which alderman represents the ward with the most number of crimes in January, 2018? Please give his or her full name.", "sql": "SELECT T1.ward_no, T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' GROUP BY T1.ward_no ORDER BY COUNT(T1.ward_no) DESC LIMIT 1", "source_tables": ["crime", "ward"]}, "evidence": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; ward with the most number of crime refers to Max (Count(ward_no)); full name refers to alderman_first_name, alderman_last_name, alderman_name_suffix"}
{"sample_id": 8648, "db_id": "chicago_crime", "final": {"question": "Provide case numbers, aldermen's full names, and district names of the crimes that happened in 0000X N FRANCISCO AVE.", "sql": "SELECT T2.case_number, T3.alderman_first_name, T3.alderman_last_name, T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no INNER JOIN Ward AS T3 ON T2.ward_no = T3.ward_no WHERE T2.block = '0000X N FRANCISCO AVE' GROUP BY T2.case_number, T3.alderman_first_name, T3.alderman_last_name, T1.district_name", "source_tables": ["ward", "crime", "district"]}, "evidence": "aldermen's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; 0000X N FRANCISCO AVE refers to block = '0000X N FRANCISCO AVE'"}
{"sample_id": 8704, "db_id": "chicago_crime", "final": {"question": "In which district have there been more intimidation-type crimes?", "sql": "SELECT T3.district_name FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T1.primary_description = 'INTIMIDATION' GROUP BY T3.district_name ORDER BY COUNT(T1.primary_description) DESC LIMIT 1", "source_tables": ["iucr", "crime", "district"]}, "evidence": "more intimidation-type crime refers to Max(Count(primary_description = 'INTIMIDATION')); district refers to district_name"}
{"sample_id": 8723, "db_id": "chicago_crime", "final": {"question": "What is the precise coordinate of the location where simple assault incidents happened the most in Chatham?", "sql": "SELECT T2.latitude, T2.longitude FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Simple Assault' AND T3.community_area_name = 'Chatham' AND T3.community_area_no = 44 ORDER BY T2.latitude DESC, T2.longitude DESC LIMIT 1", "source_tables": ["community_area", "crime", "fbi_code"]}, "evidence": "precise coordinates refers to latitude, longitude; 'Simple Assault' is the title of incident; 'Chatham' is the community_area_name; most incident happened refers to Max(Count(latitude, longitude))"}
{"sample_id": 8643, "db_id": "chicago_crime", "final": {"question": "List the community area names in the Northwest.", "sql": "SELECT community_area_name FROM Community_Area WHERE side = 'Northwest'", "source_tables": ["community_area"]}, "evidence": "the Northwest refers to side = 'Northwest'"}
{"sample_id": 8587, "db_id": "chicago_crime", "final": {"question": "Which district in Chicago has the most community areas?", "sql": "SELECT side FROM Community_Area GROUP BY side ORDER BY COUNT(side) DESC LIMIT 1", "source_tables": ["community_area"]}, "evidence": "district refers to side; the most community areas refers to max(count(side))"}
{"sample_id": 8619, "db_id": "chicago_crime", "final": {"question": "What is the percentage of under $500 thefts among all cases that happened in West Englewood?", "sql": "SELECT CAST(SUM(CASE WHEN T2.secondary_description = '$500 AND UNDER' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no INNER JOIN Community_Area AS T3 ON T1.community_area_no = T3.community_area_no WHERE T2.primary_description = 'THEFT' AND T3.community_area_name = 'West Englewood'", "source_tables": ["iucr", "community_area", "crime"]}, "evidence": "under $500 refers to secondary_description = '$500 AND UNDER'; theft refers to primary_description = 'THEFT'; West Englewood refers to community_area_name = 'West Englewood'; percentage = divide(count(case_number where secondary_description = '$500 AND UNDER'), count(case_number)) where primary_description = 'THEFT' and community_area_name = 'West Englewood' * 100%"}
{"sample_id": 8618, "db_id": "chicago_crime", "final": {"question": "Tell the number of cases with arrests in North Lawndale community.", "sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'North Lawndale' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.arrest = 'TRUE'", "source_tables": ["community_area", "crime"]}, "evidence": "number of cases refers to count(case_number); arrest refers to arrest = 'TRUE'; North Lawndale community refers to community_area_name = 'North Lawndale'"}
{"sample_id": 8642, "db_id": "chicago_crime", "final": {"question": "What is the alderman's full name of the most crowded ward?", "sql": "SELECT alderman_name_suffix, alderman_first_name, alderman_last_name FROM Ward ORDER BY population DESC LIMIT 1", "source_tables": ["ward"]}, "evidence": "alderman's full name refers to alderman_name_suffix, alderman_first_name, alderman_last_name; the most crowded refers to max(population)"}
{"sample_id": 8706, "db_id": "chicago_crime", "final": {"question": "In which ward of more than 55,000 inhabitants are there more crimes of intimidation with extortion?", "sql": "SELECT T3.ward_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN Ward AS T3 ON T3.ward_no = T2.ward_no WHERE T1.primary_description = 'INTIMIDATION' AND T1.secondary_description = 'EXTORTION' AND T3.Population > 55000 GROUP BY T3.ward_no ORDER BY COUNT(T3.ward_no) DESC LIMIT 1", "source_tables": ["iucr", "crime", "ward"]}, "evidence": "more than 55000 inhabitants refers to Population > 55000; 'INTIMIDATION' is the primary_description; 'EXTORTION' refers to secondary_description; more crime refers to Count(ward_no)"}
{"sample_id": 8767, "db_id": "chicago_crime", "final": {"question": "Among the incidents in January, 2018, how many of them were stated \"against Property\" in the FBI classification?", "sql": "SELECT SUM(CASE WHEN SUBSTR(T2.date, 5, 4) = '2018' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.crime_against = 'Property' AND SUBSTR(T2.date, 1, 1) = '1'", "source_tables": ["crime", "fbi_code"]}, "evidence": "in January 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; against property refers to crime_against = 'Property'"}
{"sample_id": 8763, "db_id": "chicago_crime", "final": {"question": "The ward represented by which alderman had more incidents in January, 2018, Pat Dowell or Sophia King?", "sql": "SELECT T1.alderman_first_name, T1.alderman_last_name, COUNT(T1.ward_no) AS num FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE (SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' AND T1.alderman_first_name = 'Pat' AND T1.alderman_last_name = 'Dowell') OR (T1.alderman_first_name = 'Sophia' AND T1.alderman_last_name = 'King') GROUP BY T1.ward_no", "source_tables": ["crime", "ward"]}, "evidence": "January, 2018 refers to Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'; had more incidents refers to Max(Count(ward_no))"}
{"sample_id": 8761, "db_id": "chicago_crime", "final": {"question": "Among the crimes in the ward with the most population, how many of them are cases of domestic violence?", "sql": "SELECT COUNT(T1.ward_no) AS num FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.domestic = 'TRUE' ORDER BY T1.Population = ( SELECT Population FROM Ward ORDER BY Population DESC LIMIT 1 )", "source_tables": ["crime", "ward"]}, "evidence": "most population refers to Max(Population); domestic violence refers to domestic = 'TRUE'"}
{"sample_id": 8586, "db_id": "chicago_crime", "final": {"question": "Which district is the community area Lincoln Square grouped into?", "sql": "SELECT side FROM Community_Area WHERE community_area_name = 'Lincoln Square'", "source_tables": ["community_area"]}, "evidence": "district refers to side; community area Lincoln Square refers to community_area_name = 'Lincoln Square'"}
{"sample_id": 8636, "db_id": "chicago_crime", "final": {"question": "What is the legislative district's office address where 010XX W LAKE ST is located?", "sql": "SELECT T1.ward_office_address FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.block = '010XX W LAKE ST' GROUP BY T1.ward_office_address", "source_tables": ["crime", "ward"]}, "evidence": "the legislative district's office address refers to ward_office_address; 010XX W LAKE ST refers to block = '010XX W LAKE ST'"}
{"sample_id": 8663, "db_id": "chicago_crime", "final": {"question": "Who is the alderman in the ward associated with the crime with report number 23769?", "sql": "SELECT T2.alderman_first_name, T2.alderman_last_name FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.report_no = 23769", "source_tables": ["crime", "ward"]}, "evidence": "alderman refers to alderman_suffix, alderman_first_name, alderman_last_name; report number 23769 refers to report_no = 23769"}
{"sample_id": 8593, "db_id": "chicago_crime", "final": {"question": "Please list the names of all the neighborhoods in the community area with the most population.", "sql": "SELECT T1.neighborhood_name FROM Neighborhood AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T2.community_area_no ORDER BY T2.population DESC LIMIT 1", "source_tables": ["community_area", "neighborhood"]}, "evidence": "name of neighborhood refers to neighborhood_name; the most population refers to max(population)"}
{"sample_id": 8639, "db_id": "chicago_crime", "final": {"question": "How many domestic violence cases were reported in May 2018?", "sql": "SELECT COUNT(*) FROM Crime WHERE date LIKE '5/%/2018%' AND domestic = 'TRUE'", "source_tables": ["crime"]}, "evidence": "domestic violence refers to domestic = 'TRUE'; in May 2018 refers to date LIKE '5/%/2018%'"}
{"sample_id": 8594, "db_id": "chicago_crime", "final": {"question": "Please list the names of all the neighborhoods in Central Chicago.", "sql": "SELECT T2.neighborhood_name FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.side = 'Central'", "source_tables": ["community_area", "neighborhood"]}, "evidence": "name of neighborhood refers to neighborhood_name; Central Chicago refers to side = 'Central'"}
{"sample_id": 8783, "db_id": "food_inspection", "final": {"question": "How many routine inspections did Tiramisu Kitchen have?", "sql": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.type = 'Routine - Unscheduled' AND T2.name = 'Tiramisu Kitchen'", "source_tables": ["businesses", "inspections"]}, "evidence": "Tiramisu Kitchen is the name of the business; routine inspections refer to type = 'Routine - Unscheduled';"}
{"sample_id": 8845, "db_id": "food_inspection", "final": {"question": "Among the businesses with score that ranges from 70 to 80, list their violation type ID and risk category.", "sql": "SELECT DISTINCT T1.violation_type_id, T1.risk_category FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE T3.score BETWEEN 70 AND 80", "source_tables": ["violations", "businesses", "inspections"]}, "evidence": "businesses with score that ranges from 70 to 80 refer to business_id where score between 80 and 90;"}
{"sample_id": 8839, "db_id": "food_inspection", "final": {"question": "List down the owner's name with a zip code 94104.", "sql": "SELECT DISTINCT owner_name FROM businesses WHERE owner_zip = '94104'", "source_tables": ["businesses"]}, "evidence": "zip code 94104 refers to owner_zip = '94104';"}
{"sample_id": 8832, "db_id": "food_inspection", "final": {"question": "Provide the names, risk categories and descriptions for the eateries with violation type ID of 103111.", "sql": "SELECT T2.name, T1.risk_category, T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.violation_type_id = '103111'", "source_tables": ["violations", "businesses"]}, "evidence": "eateries refer to business_id;"}
{"sample_id": 8851, "db_id": "food_inspection", "final": {"question": "What is the owner's name of the of the business that violates 103156 on June 12, 2014?", "sql": "SELECT DISTINCT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.violation_type_id = 103156 AND T1.\"date\" = '2014-06-12'", "source_tables": ["violations", "businesses"]}, "evidence": "business that violates 103156 on June 12, 2014 refers to business_id where violation_type_id = 103156 and date = '2014-06-12';"}
{"sample_id": 8852, "db_id": "food_inspection", "final": {"question": "In businesses with an owner address 500 California St, 2nd Floor of Silicon Valley, list the type of inspection of the business with the highest score.", "sql": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_address = '500 California St, 2nd Floor' AND T2.owner_city = 'SAN FRANCISCO' ORDER BY T1.score DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "the highest score MAX(score); Silicon Valley is located in 'SAN FRANCISCO';"}
{"sample_id": 8786, "db_id": "food_inspection", "final": {"question": "How many high risk violations do the restaurants in San Francisco have in total?", "sql": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO') AND T1.risk_category = 'High Risk'", "source_tables": ["violations", "businesses"]}, "evidence": "restaurants in San Francisco refer to business_id where city in ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO'); high risk violations refer to risk_category = 'High Risk';"}
{"sample_id": 8834, "db_id": "food_inspection", "final": {"question": "What was the inspection type when El Aji Peruvian Restaurant got highest inspection score?", "sql": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'El Aji Peruvian Restaurant' ORDER BY T1.score DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "El Aji Peruvian Restaurant is the name of the business; highest inspection score refers to MAX(score);"}
{"sample_id": 8779, "db_id": "food_inspection", "final": {"question": "How many low risk violations were found in the inspection on 2014/1/14 for Tiramisu Kitchen?", "sql": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.\"date\" = '2014-01-14' AND T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'Low Risk'", "source_tables": ["violations", "businesses"]}, "evidence": "Tiramisu Kitchen is the name of the business; inspection on 2014/1/14 refers to date = '2014-01-14'; low risk violations refer to risk_category = 'Low Risk';"}
{"sample_id": 8800, "db_id": "food_inspection", "final": {"question": "For the business which got the most number of violations, how many inspections did it have?", "sql": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id GROUP BY T1.business_id ORDER BY COUNT(T1.business_id) DESC LIMIT 1", "source_tables": ["violations", "inspections"]}, "evidence": ""}
{"sample_id": 8838, "db_id": "food_inspection", "final": {"question": "How many of the businesses are located at 1825 POST St #223, San Francisco?", "sql": "SELECT COUNT(business_id) FROM businesses WHERE address = '1825 POST St #223' AND city = 'SAN FRANCISCO'", "source_tables": ["businesses"]}, "evidence": "1825 POST St #223 refers to address = '1825 POST St #223', San Francisco is the name of the city;"}
{"sample_id": 8842, "db_id": "food_inspection", "final": {"question": "Give the business ID and risk category of the business owned by San Francisco Madeleine, Inc.", "sql": "SELECT DISTINCT T2.business_id, T1.risk_category FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_name = 'San Francisco Madeleine, Inc.'", "source_tables": ["violations", "businesses"]}, "evidence": "business owned by San Francisco Madeleine, Inc. refers to business_id where owner_name = 'San Francisco Madeleine, Inc.';"}
{"sample_id": 8840, "db_id": "food_inspection", "final": {"question": "What is the total number of businesses with a tax code H25?", "sql": "SELECT COUNT(tax_code) FROM businesses WHERE tax_code = 'H25'", "source_tables": ["businesses"]}, "evidence": ""}
{"sample_id": 8782, "db_id": "food_inspection", "final": {"question": "Please list the descriptions of all the high risk violations of Tiramisu Kitchen.", "sql": "SELECT DISTINCT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T2.name = 'Tiramisu Kitchen'", "source_tables": ["violations", "businesses"]}, "evidence": "Tiramisu Kitchen is the name of the business; high risk violations refer to risk_category = 'High Risk';"}
{"sample_id": 8854, "db_id": "food_inspection", "final": {"question": "List the business' name and risk category of businesses with a score greater than the 80% of average score of all businesses.", "sql": "SELECT DISTINCT T1.name, T3.risk_category FROM businesses AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN violations AS T3 ON T1.business_id = T3.business_id WHERE T2.score > 0.8 * ( SELECT AVG(score) FROM inspections )", "source_tables": ["violations", "businesses", "inspections"]}, "evidence": "score greater than the 80% of average score of all businesses refers to score > MULTIPLY(0.8, avg(score) from inspections);"}
{"sample_id": 8778, "db_id": "food_inspection", "final": {"question": "What was the type of inspection Tiramisu Kitchen had on 2014/1/14?", "sql": "SELECT T1.type FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.\"date\" = '2014-01-14' AND T2.name = 'Tiramisu Kitchen'", "source_tables": ["businesses", "inspections"]}, "evidence": "Tiramisu Kitchen is the name of the business; inspection on 2014/1/14 refers to date = '2014-01-14';"}
{"sample_id": 8816, "db_id": "food_inspection", "final": {"question": "What are the names of the establishments that met all the required standards for 4 consecutive years?", "sql": "SELECT DISTINCT T4.name FROM ( SELECT T3.name, T3.years, row_number() OVER (PARTITION BY T3.name ORDER BY T3.years) AS rowNumber FROM ( SELECT DISTINCT name, STRFTIME('%Y', \"date\") AS years FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100 ) AS T3 ) AS T4 GROUP BY T4.name, date(T4.years || '-01-01', '-' || (T4.rowNumber - 1) || ' years') HAVING COUNT(T4.years) = 4", "source_tables": ["businesses", "inspections"]}, "evidence": "establishment has the same meaning as business; score of 90 or more refers to score \u2265 90; year(date) = 2015; ; met all required standards for 4 consecutive years refers to COUNT(year(date)) = 4 where score = 100;"}
{"sample_id": 8789, "db_id": "food_inspection", "final": {"question": "Which business had the most number of inspections? Give the Id number for that business.", "sql": "SELECT business_id FROM inspections GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1", "source_tables": ["inspections"]}, "evidence": "the most number of inspections refers to MAX(COUNT(business_id)); Id number for that business refers to business_id;"}
{"sample_id": 8776, "db_id": "food_inspection", "final": {"question": "Please list the names of all the restaurants that have met all requirements in one inspection.", "sql": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100", "source_tables": ["businesses", "inspections"]}, "evidence": "met all requirements refers to inspections where score = 100;"}
{"sample_id": 8801, "db_id": "food_inspection", "final": {"question": "For the business whose business certificate number is 304977, how many violations did it have on 2013/10/7?", "sql": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.business_certificate = '304977' AND T1.\"date\" = '2013-10-07'", "source_tables": ["violations", "businesses"]}, "evidence": "date = '2013-10-07';"}
{"sample_id": 8848, "db_id": "food_inspection", "final": {"question": "Who is the owner of the business that has a high risk violation of 103109 and described as unclean or unsanitary food contact surfaces?", "sql": "SELECT DISTINCT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.violation_type_id = 103109 AND T1.description = 'Unclean or unsanitary food contact surfaces'", "source_tables": ["violations", "businesses"]}, "evidence": "owner refers to owner_name; high risk violation of 103109 and described as unclean or unsanitary food contact surfaces refers to risk_category = 'High Risk' where violation_type_id = 103109 and description = 'Unclean or unsanitary food contact surfaces';"}
{"sample_id": 8828, "db_id": "food_inspection", "final": {"question": "Mention the violation type ID and description of high risk category for STARBUCKS.", "sql": "SELECT DISTINCT T1.violation_type_id, T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'STARBUCKS' AND T1.risk_category = 'High Risk'", "source_tables": ["violations", "businesses"]}, "evidence": "STARBUCKS is the name of the business; high risk category refers to risk_category = 'High Risk';"}
{"sample_id": 8849, "db_id": "food_inspection", "final": {"question": "Among the owners from Cameron Park, what is the business name of the business with a score of 100?", "sql": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_city = 'Cameron Park' AND T1.score = 100", "source_tables": ["businesses", "inspections"]}, "evidence": "Cameron Park is a name of city;"}
{"sample_id": 8795, "db_id": "food_inspection", "final": {"question": "Which business had the lowest score for the unscheduled routine inspection on 2016/9/26? Give the name of the business.", "sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE score = ( SELECT MIN(score) FROM inspections WHERE \"date\" = '2016-09-26' AND type = 'Routine - Unscheduled' ) AND T1.\"date\" = '2016-09-26' AND T1.type = 'Routine - Unscheduled'", "source_tables": ["businesses", "inspections"]}, "evidence": "the lowest score for unscheduled routine inspection refers to type = 'Routine - Unscheduled' where MIN(score); date = '2016-09-26';"}
{"sample_id": 8790, "db_id": "food_inspection", "final": {"question": "Tell the Id number of the business with the most number of violations.", "sql": "SELECT business_id FROM violations GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1", "source_tables": ["violations"]}, "evidence": "Id number for that business refers to business_id; the most number of violations refers to MAX(COUNT(business_id));"}
{"sample_id": 8814, "db_id": "food_inspection", "final": {"question": "In 2013, what are the names of the establishments with contaminated or adulterated food?", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2013' AND T1.description = 'Contaminated or adulterated food'", "source_tables": ["violations", "businesses"]}, "evidence": "establishments have the same meaning as businesses; contaminated or adulterated food refers to violations where description = 'Contaminated or adulterated food'; date = '2013';"}
{"sample_id": 8781, "db_id": "food_inspection", "final": {"question": "What is the description of the low risk violation of Tiramisu Kitchen on 2014/1/14?", "sql": "SELECT T1.description FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.\"date\" = '2014-01-14' AND T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'Low Risk'", "source_tables": ["violations", "businesses"]}, "evidence": "Tiramisu Kitchen is the name of the business; 2014/1/14 refers to date = '2014-01-14'; low risk violations refer to risk_category = 'Low Risk';"}
{"sample_id": 8808, "db_id": "food_inspection", "final": {"question": "How many owners have 5 or more establishments?", "sql": "SELECT COUNT(T1.owner_name) FROM ( SELECT owner_name FROM businesses GROUP BY owner_name HAVING COUNT(owner_name) > 5 ) T1", "source_tables": ["businesses"]}, "evidence": "5 or more establishments COUNT(business_id) > = 5;"}
{"sample_id": 8787, "db_id": "food_inspection", "final": {"question": "Which restaurant has the highest total number of high risk violations?", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1", "source_tables": ["violations", "businesses"]}, "evidence": "the highest total number of high risk violations refer to MAX(COUNT(risk_category = 'High Risk'));"}
{"sample_id": 8809, "db_id": "food_inspection", "final": {"question": "What are the names of the establishments that met all of the required standards in 2013?", "sql": "SELECT DISTINCT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2013' AND T1.score = 100", "source_tables": ["businesses", "inspections"]}, "evidence": "establishments have the same meaning as businesses; met all of the required standards refers to score = 100; year(date) = 2013"}
{"sample_id": 8822, "db_id": "food_inspection", "final": {"question": "How many eateries got highest inspection in 2013?", "sql": "SELECT COUNT(DISTINCT business_id) FROM inspections WHERE STRFTIME('%Y', \"date\") = '2013' AND score = ( SELECT MAX(score) FROM inspections WHERE STRFTIME('%Y', \"date\") = '2013' )", "source_tables": ["inspections"]}, "evidence": "eateries got highest inspection score in 2013 refer to business_id from inspections where score = 100 and year(date) = 2013;"}
{"sample_id": 8826, "db_id": "food_inspection", "final": {"question": "When did eateries from San Bruno city get highest score in inspection?", "sql": "SELECT T1.\"date\" FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.city = 'SAN BRUNO' ORDER BY T1.score DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "eateries represent business; highest score in inspection refers to score = 100;"}
{"sample_id": 8841, "db_id": "food_inspection", "final": {"question": "In the violations in 2014, how many of them have a low risk category?", "sql": "SELECT COUNT(risk_category) FROM violations WHERE STRFTIME('%Y', \"date\") = '2014' AND risk_category = 'Low Risk'", "source_tables": ["violations"]}, "evidence": "in 2014 refers to year(date) = 2014; risk_category = 'Low Risk';"}
{"sample_id": 8831, "db_id": "food_inspection", "final": {"question": "Describe the violation dates, risk categories, descriptions and names of the eateries under Jade Chocolates LLC.", "sql": "SELECT T1.\"date\", T1.risk_category, T1.description, T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.owner_name = 'Jade Chocolates LLC'", "source_tables": ["violations", "businesses"]}, "evidence": "eateries under Jade Chocolates LLC refer to business_id where owner_name = 'Jade Chocolates LLC';"}
{"sample_id": 8821, "db_id": "food_inspection", "final": {"question": "Which establishment has the highest number of inspections done? Give the name of the establishment and calculate for its average score per inspection.", "sql": "SELECT T2.name, AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.name ORDER BY COUNT(T2.business_id) DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "establishment refers to business_id; the highest number of inspections refers to MAX(COUNT(business_id)); avg(score);"}
{"sample_id": 8827, "db_id": "food_inspection", "final": {"question": "Describe the inspection types and violation descriptions under moderate risk category for ART's CAF\u00c9.", "sql": "SELECT DISTINCT T2.type, T1.description FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T3.name = 'ART''S CAF\u00c9' AND T1.risk_category = 'Moderate Risk'", "source_tables": ["violations", "inspections", "businesses"]}, "evidence": "ART's CAF\u00c9 is the name of the business; moderate risk category refers to risk_category = 'Moderate Risk';"}
{"sample_id": 8788, "db_id": "food_inspection", "final": {"question": "What is the average scores of Tiramisu Kitchen in all inspections?", "sql": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen'", "source_tables": ["businesses", "inspections"]}, "evidence": "avg(score);"}
{"sample_id": 8818, "db_id": "food_inspection", "final": {"question": "What is the average score of the establishments owned by the owner with the highest number of establishments?", "sql": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id GROUP BY T2.owner_name ORDER BY COUNT(T2.business_id) DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "average score refers avg(score); owner with the highest number of establishments refers to owner_name where MAX(COUNT(business_id));"}
{"sample_id": 8815, "db_id": "food_inspection", "final": {"question": "Among the establishments with a postal code of 94102, how many establishments have a score of 90 or more in 2015?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2015' AND T2.postal_code = '94102' AND T3.score > 90", "source_tables": ["violations", "businesses", "inspections"]}, "evidence": "establishment has the same meaning as business; score of 90 or more refers to score \u2265 90; year(date) = 2015;"}
{"sample_id": 8780, "db_id": "food_inspection", "final": {"question": "Please list the names of the restaurants that had a low risk violation in inspections in 2014.", "sql": "SELECT DISTINCT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2014' AND T1.risk_category = 'Low Risk'", "source_tables": ["violations", "businesses"]}, "evidence": "inspection in 2014 refers to year(date) = 2014; low risk violations refer to risk_category = 'Low Risk';"}
{"sample_id": 8805, "db_id": "food_inspection", "final": {"question": "How many establishments have an inspection score of no more than 50?", "sql": "SELECT COUNT(DISTINCT business_id) FROM inspections WHERE score < 50", "source_tables": ["inspections"]}, "evidence": "establishments have the same meaning as businesses; inspection score of no more than 50 refers to score < 50;"}
{"sample_id": 8812, "db_id": "food_inspection", "final": {"question": "How many high risks violations did the Tiramisu Kitchen violate?", "sql": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Tiramisu Kitchen' AND T1.risk_category = 'High Risk'", "source_tables": ["violations", "businesses"]}, "evidence": "Tiramisu Kitchen is the name of the business; high risks violations refer to risk_category = 'High Risk';"}
{"sample_id": 8796, "db_id": "food_inspection", "final": {"question": "Provide the name of the business which had the most number of inspections because of complaint.", "sql": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.type = 'Complaint' GROUP BY T2.name ORDER BY COUNT(T1.business_id) DESC LIMIT 1", "source_tables": ["businesses", "inspections"]}, "evidence": "the most number of inspections because of complaint refers to type = 'Complaint' where MAX(business_id);"}
{"sample_id": 8825, "db_id": "food_inspection", "final": {"question": "Provide eateries' IDs, risk categories and descriptions with violation ID of 103101.", "sql": "SELECT business_id, risk_category, description FROM violations WHERE violation_type_id = '103101'", "source_tables": ["violations"]}, "evidence": "eateries' IDs refer to business_id; violation ID of 103101 refers to violation_type_id = '103101';"}
{"sample_id": 8803, "db_id": "food_inspection", "final": {"question": "What percentage of the violations for \"Melody Lounge\" are moderate risks?", "sql": "SELECT CAST(SUM(CASE WHEN T2.risk_category = 'Moderate Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.business_id) FROM businesses AS T1 INNER JOIN violations AS T2 ON T1.business_id = T2.business_id WHERE T1.name = 'Melody Lounge'", "source_tables": ["violations", "businesses"]}, "evidence": "DIVIDE(COUNT(risk_category = 'Moderate Risk' where name = 'Melody Lounge'), COUNT(business_id where name = 'Melody Lounge')) as percentage;"}
{"sample_id": 8844, "db_id": "food_inspection", "final": {"question": "Among the businesses within the postal code 94117, what is total number of businesses with a high risk category?", "sql": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.postal_code = 94117 AND T1.risk_category = 'High Risk'", "source_tables": ["violations", "businesses"]}, "evidence": "businesses with a high risk category refer to business_id where risk_category = 'High Risk';"}
{"sample_id": 8775, "db_id": "food_inspection", "final": {"question": "Among the inspections carried out in 2016, how many of them are routine?", "sql": "SELECT COUNT(\"date\") FROM inspections WHERE STRFTIME('%Y', \"date\") = '2016' AND type = 'Routine - Unscheduled'", "source_tables": ["inspections"]}, "evidence": "inspections carried out in 2016 refer to YEAR(date) = 2016; routine inspections refer to type = 'Routine - Unscheduled';"}
{"sample_id": 8819, "db_id": "food_inspection", "final": {"question": "What is the name of the establishment with the highest number of low risk violations in 2014?", "sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2014' AND T1.risk_category = 'Low Risk' GROUP BY T2.name ORDER BY COUNT(T2.business_id) DESC LIMIT 1", "source_tables": ["violations", "businesses"]}, "evidence": "establishment with the highest number of low risk violations refers to business_id where MAX(COUNT(risk_category = 'Low Risk')); year(date) = 2014;"}
{"sample_id": 8835, "db_id": "food_inspection", "final": {"question": "Who were the owners of eateries which had highest health hazard by improper cooking time or temperatures?", "sql": "SELECT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.description = 'Improper cooking time or temperatures'", "source_tables": ["violations", "businesses"]}, "evidence": "owners of eateries refer to owner_name; highest health hazard by improper cooking time or temperatures refers to risk_category = 'High Risk' and description = 'Improper cooking time or temperatures';"}
{"sample_id": 8921, "db_id": "cookbook", "final": {"question": "Identify recipes with different maximum and minimum quantities.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.max_qty <> T2.min_qty", "source_tables": ["quantity", "recipe"]}, "evidence": "maximum quantities refers to max_qty; minimum quantities refers to max_qty <> min_qty"}
{"sample_id": 8909, "db_id": "cookbook", "final": {"question": "Provide the title and total time of the recipe which can be made with only lima beans.", "sql": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'lima beans'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "total time refers to total time refers to TOTAL(prep_min, cook_min, stnd_min); lima beans is a name of an ingredient"}
{"sample_id": 8870, "db_id": "cookbook", "final": {"question": "How many calories does the turkey tenderloin bundles recipe have?", "sql": "SELECT T2.calories FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Turkey Tenderloin Bundles'", "source_tables": ["nutrition", "recipe"]}, "evidence": "turkey tenderloin refers to title"}
{"sample_id": 8915, "db_id": "cookbook", "final": {"question": "What is the average vitamin C amount of all cakes?", "sql": "SELECT AVG(T1.vitamin_c) FROM Nutrition AS T1 INNER JOIN Recipe AS T2 ON T2.recipe_id = T1.recipe_id WHERE T2.title LIKE '%cake%'", "source_tables": ["nutrition", "recipe"]}, "evidence": "average vitamin C refers to AVG(vitamin_c); all cakes refers to title LIKE '%cake%'"}
{"sample_id": 8906, "db_id": "cookbook", "final": {"question": "Among the recipes from The California Tree Fruit Agreement, calculate the percentage of sodium-free recipes.", "sql": "SELECT CAST(SUM(CASE WHEN T2.sodium < 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'The California Tree Fruit Agreement'", "source_tables": ["nutrition", "recipe"]}, "evidence": "The California Tree Fruit Agreement is a source; calculation = MULTIPLY(DIVIDE(COUNT(sodium BETWEEN 0 AND 5 THEN recipe_id), COUNT(recipe_id)), 100)"}
{"sample_id": 8899, "db_id": "cookbook", "final": {"question": "Which recipes contain almond extract?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'almond extract'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "almond extract is a name of an ingredient"}
{"sample_id": 8897, "db_id": "cookbook", "final": {"question": "Which ingredient appeared the most in recipes? Calculate its amount of appearance in percentage.", "sql": "SELECT T1.name, CAST(COUNT(T2.ingredient_id) AS FLOAT) * 100 / ( SELECT COUNT(T2.ingredient_id) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id ) AS \"percentage\" FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id GROUP BY T2.ingredient_id ORDER BY COUNT(T2.ingredient_id) DESC LIMIT 1", "source_tables": ["ingredient", "quantity"]}, "evidence": "ingredient appeared the most in recipes refers to MAX(COUNT(ingredient_id)); calculation = MULTIPLY(DIVIDE(COUNT(MAX(ingredient_id)), COUNT(ingredient_id)), 100)"}
{"sample_id": 8903, "db_id": "cookbook", "final": {"question": "Name the recipes which can lead to constipation.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "source_tables": ["nutrition", "recipe"]}, "evidence": "can lead to constipation refers to iron > 20"}
{"sample_id": 8892, "db_id": "cookbook", "final": {"question": "What are the optional ingredients for Warm Chinese Chicken Salad?", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Warm Chinese Chicken Salad' AND T2.optional = 'TRUE'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "optional refers to optional = 'TRUE'; Warm Chinese Chicken Salad refers to title"}
{"sample_id": 8914, "db_id": "cookbook", "final": {"question": "List the names of alcohol free recipes.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.alcohol = 0", "source_tables": ["nutrition", "recipe"]}, "evidence": "alcohol free refers to alcohol = 0"}
{"sample_id": 8891, "db_id": "cookbook", "final": {"question": "List all the ingredients for Strawberry Sorbet.", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Strawberry Sorbet'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "Strawberry Sorbet refers to title"}
{"sample_id": 8896, "db_id": "cookbook", "final": {"question": "Which recipe has the highest number of ingredients? Calculate the said recipe's total time of cooking.", "sql": "SELECT T2.recipe_id, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id GROUP BY T2.recipe_id ORDER BY COUNT(T2.ingredient_id) DESC LIMIT 1", "source_tables": ["quantity", "recipe"]}, "evidence": "the highest number of ingredients refers to MAX(ingredient_id); total time refers to recipe_id, total time of cooking refers to TOTAL(prep_min, cook_min, stnd_min)"}
{"sample_id": 8893, "db_id": "cookbook", "final": {"question": "Among the recipes with alcohol content over 10, which recipe takes the longest to prepare?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.alcohol > 10 ORDER BY T1.prep_min DESC LIMIT 1", "source_tables": ["nutrition", "recipe"]}, "evidence": "with alcohol content over 10 refers to alcohol > 10; takes the longest to prepare refers to MAX(prep_min)"}
{"sample_id": 8857, "db_id": "cookbook", "final": {"question": "What is the unsaturated fat content in the recipe \"Raspberry Chiffon Pie\"?", "sql": "SELECT T2.total_fat - T2.sat_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["nutrition", "recipe"]}, "evidence": "Raspberry Chiffon Pie refers to title; unsaturated fat refers to SUBTRACT(total_fat, sat_fat)"}
{"sample_id": 8860, "db_id": "cookbook", "final": {"question": "Which recipe is more beneficial in wound healing, \"Raspberry Chiffon Pie\" or \"Fresh Apricot Bavarian\"?", "sql": "SELECT DISTINCT CASE WHEN CASE WHEN T2.title = 'Raspberry Chiffon Pie' THEN T1.vitamin_c END > CASE WHEN T2.title = 'Fresh Apricot Bavarian' THEN T1.vitamin_c END THEN 'Raspberry Chiffon Pie' ELSE 'Fresh Apricot Bavarian' END AS \"vitamin_c is higher\" FROM Nutrition T1 INNER JOIN Recipe T2 ON T2.recipe_id = T1.recipe_id", "source_tables": ["nutrition", "recipe"]}, "evidence": "Raspberry Chiffon Pie and Fresh Apricot Bavarian are title; vitamin_c is higher refers to MAX(vitamin_c)"}
{"sample_id": 8856, "db_id": "cookbook", "final": {"question": "What is the title of the recipe that is most likely to gain weight?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1", "source_tables": ["nutrition", "recipe"]}, "evidence": "most likely to gain weight refers to MAX(total_fat)"}
{"sample_id": 8883, "db_id": "cookbook", "final": {"question": "What is the average calorie count for all recipes using coarsely ground black pepper?", "sql": "SELECT AVG(T3.calories) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T1.name = 'coarsely ground black pepper'", "source_tables": ["ingredient", "quantity", "nutrition"]}, "evidence": "coarsely ground black pepper is a name of an ingredient; calculation = AVG(calories)"}
{"sample_id": 8867, "db_id": "cookbook", "final": {"question": "At least how many cups of graham cracker crumbs does the recipe \"Raspberry Chiffon Pie\" need?", "sql": "SELECT T2.min_qty FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T3.name = 'graham cracker crumbs'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "'graham cracker crumbs' is a name of an ingredient; 'Raspberry Chiffon Pie' refers to title"}
{"sample_id": 8863, "db_id": "cookbook", "final": {"question": "Is the ingredient \"graham cracker crumbs\" optional in the recipe \"Raspberry Chiffon Pie\"?", "sql": "SELECT T2.optional FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T3.name = 'graham cracker crumbs'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "'graham cracker crumbs' is a name of an ingredient; 'Raspberry Chiffon Pie' refers to title"}
{"sample_id": 8877, "db_id": "cookbook", "final": {"question": "What kind of preparation is needed for apple juice to make a raspberry-pear couscous cake?", "sql": "SELECT T2.preparation FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry-Pear Couscous Cake' AND T3.name = 'apple juice'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "apple juice is a name of an ingredient; raspberry-pear couscous cake refers to title"}
{"sample_id": 8858, "db_id": "cookbook", "final": {"question": "Please list the titles of all the recipes that are salt/sodium-free.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.sodium < 5", "source_tables": ["nutrition", "recipe"]}, "evidence": "salt/sodium-free refers to sodium < 5"}
{"sample_id": 8911, "db_id": "cookbook", "final": {"question": "How much fat does the Raspberry Chiffon Pie have?", "sql": "SELECT T2.total_fat FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["nutrition", "recipe"]}, "evidence": "Raspberry Chiffon Pie refers to title"}
{"sample_id": 8862, "db_id": "cookbook", "final": {"question": "How many calories does the recipe \"Raspberry Chiffon Pie\" contain?", "sql": "SELECT T2.calories FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["nutrition", "recipe"]}, "evidence": "Raspberry Chiffon Pie refers to title"}
{"sample_id": 8881, "db_id": "cookbook", "final": {"question": "State the title of the recipe with most kinds of ingredients.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id GROUP BY T1.title ORDER BY COUNT(title) DESC LIMIT 1", "source_tables": ["quantity", "recipe"]}, "evidence": "the most kinds of ingredients refers to MAX(COUNT(recipe_id))"}
{"sample_id": 8900, "db_id": "cookbook", "final": {"question": "List the ingredients in Tomato-Cucumber Relish.", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Tomato-Cucumber Relish'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "Tomato-Cucumber Relish refers to title"}
{"sample_id": 8871, "db_id": "cookbook", "final": {"question": "How many cups of 1% lowfat milk should be added to no.1436 recipe?", "sql": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = '1% lowfat milk' AND T2.unit = 'cup(s)' AND T2.recipe_id = 1436", "source_tables": ["ingredient", "quantity"]}, "evidence": "1% lowfat milk is a name of an ingredient; no.1436 recipe refers to recipe_id = 1436; max_qty = min_qty"}
{"sample_id": 8866, "db_id": "cookbook", "final": {"question": "How many recipes include the ingredient \"graham cracker crumbs\"?", "sql": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.name = 'graham cracker crumbs'", "source_tables": ["ingredient", "quantity"]}, "evidence": "'graham cracker crumbs' is a name of an ingredient"}
{"sample_id": 8918, "db_id": "cookbook", "final": {"question": "Which recipe has the highest calories?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.calories DESC LIMIT 1", "source_tables": ["nutrition", "recipe"]}, "evidence": "the highest calories refers to MAX(calories)"}
{"sample_id": 8879, "db_id": "cookbook", "final": {"question": "Name the recipe with the most Vitamin C.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 1", "source_tables": ["nutrition", "recipe"]}, "evidence": "the most Vitamin C refers to MAX(vitamin_c)"}
{"sample_id": 8886, "db_id": "cookbook", "final": {"question": "What are the names of the ingredients that need to be cook in beef broth?", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T2.preparation = 'cooked in beef broth'", "source_tables": ["ingredient", "quantity"]}, "evidence": "'cook in beef broth' refers to a preparation"}
{"sample_id": 8865, "db_id": "cookbook", "final": {"question": "Please list the names of all the ingredients needed for the recipe \"Raspberry Chiffon Pie\" that do not need preprocessing.", "sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie' AND T2.preparation IS NULL", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "Raspberry Chiffon Pie refers to title; do not need preprocessing refers to preparation IS NULL"}
{"sample_id": 8859, "db_id": "cookbook", "final": {"question": "Please list the titles of all the recipes that may lead to constipation, feeling sick or stomach pain.", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "source_tables": ["nutrition", "recipe"]}, "evidence": "may lead to constipation, feeling sick or stomach pain refers to iron > 20"}
{"sample_id": 8919, "db_id": "cookbook", "final": {"question": "How many recipes are non-dairy?", "sql": "SELECT COUNT(T2.recipe_id) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T2.ingredient_id = T1.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id WHERE T1.category NOT LIKE '%dairy%'", "source_tables": ["ingredient", "quantity", "nutrition"]}, "evidence": "non-dairy refers to category NOT LIKE '%dairy\""}
{"sample_id": 8910, "db_id": "cookbook", "final": {"question": "Among the recipes with sea bass, how many percent of recipes can serve 10 people and above?", "sql": "SELECT CAST(SUM(CASE WHEN T1.servings >= 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'sea bass steak'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "sea bass is a name of an ingredient; can serve 10 people and above refers to servings > = 10; calculation = MULTIPLY(DIVIDE(COUNT(servings > = 10 THEN recipe_id)), COUNT(recipe_id), 100)"}
{"sample_id": 8889, "db_id": "cookbook", "final": {"question": "Which ingredient appeared the least in recipes?", "sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T2.ingredient_id ORDER BY COUNT(T2.ingredient_id) ASC LIMIT 1", "source_tables": ["ingredient", "quantity"]}, "evidence": "ingredient appeared the least in recipes refers to MIN(ingredient_id)"}
{"sample_id": 8890, "db_id": "cookbook", "final": {"question": "How many baking product ingredients are there in the No-Bake Chocolate Cheesecake?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.category = 'baking products' AND T1.title = 'No-Bake Chocolate Cheesecake'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "baking product is a category; No-Bake Chocolate Cheesecake refers to title;"}
{"sample_id": 8861, "db_id": "cookbook", "final": {"question": "Among the recipes that take more than 10 minutes to prepare, what is the title of the one with the most calories?", "sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.prep_min > 10 ORDER BY T2.calories DESC LIMIT 1", "source_tables": ["nutrition", "recipe"]}, "evidence": "more than 10 minutes to prepare refers to prep_min > 10; the most calories refers to MAX(calories)"}
{"sample_id": 8882, "db_id": "cookbook", "final": {"question": "How many times is the sodium content in Lasagne-Spinach Spirals to Beef and Spinach Pita Pockets?", "sql": "SELECT CAST(SUM(CASE WHEN T1.title = 'Lasagne-Spinach Spirals' THEN T2.sodium ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.title = 'Beef and Spinach Pita Pockets' THEN T2.sodium ELSE 0 END) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id", "source_tables": ["nutrition", "recipe"]}, "evidence": "sodium is a name of an ingredient; calculation = DIVIDE(SUM(title = 'Lasagne-Spinach Spirals' THEN sodium), SUM(title = 'Beef and Spinach Pita Pockets' THEN sodium))"}
{"sample_id": 8908, "db_id": "cookbook", "final": {"question": "How many recipes can be made with canned dairy?", "sql": "SELECT COUNT(*) FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id WHERE T1.category = 'canned dairy'", "source_tables": ["ingredient", "quantity"]}, "evidence": "canned dairy is a category"}
{"sample_id": 8913, "db_id": "cookbook", "final": {"question": "How many ingredients are required to make the Raspberry Chiffon Pie?", "sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Raspberry Chiffon Pie'", "source_tables": ["quantity", "ingredient", "recipe"]}, "evidence": "Raspberry Chiffon Pie refer to title"}
{"sample_id": 8887, "db_id": "cookbook", "final": {"question": "How many ingredients are there in the recipe that is best in helping your body's natural defence against illness and infection?", "sql": "SELECT COUNT(*) FROM Nutrition AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.vitamin_a > 0", "source_tables": ["nutrition", "quantity"]}, "evidence": "best in helping your body's natural defence against illness and infection refers to MAX(vitamin_a);"}
{"sample_id": 8940, "db_id": "human_resources", "final": {"question": "Please list the social security numbers of all the employees who work in California.", "sql": "SELECT T1.ssn FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'CA'", "source_tables": ["location", "employee"]}, "evidence": "social security numbers refers to ssn; California refers to state = 'CA'"}
{"sample_id": 8947, "db_id": "human_resources", "final": {"question": "What is the education required for David Whitehead to reach his current position?", "sql": "SELECT T2.educationrequired FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'David' AND T1.lastname = 'Whitehead' AND T1.gender = 'M'", "source_tables": ["employee", "position"]}, "evidence": "David Whitehead is the full name of an employee; full name = firstname, lastname"}
{"sample_id": 8937, "db_id": "human_resources", "final": {"question": "Please list the full names of the employees who are working as a Trainee.", "sql": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'", "source_tables": ["employee", "position"]}, "evidence": "full name = firstname, lastname; trainees is a position title"}
{"sample_id": 8974, "db_id": "human_resources", "final": {"question": "List the full name and social security number of the account representative with average performance.", "sql": "SELECT T1.firstname, T1.lastname, T1.ssn FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Average'", "source_tables": ["employee", "position"]}, "evidence": "full name = firstname, lastname; social security number refers to ssn; account representative is a position title; average performance refers to performance = 'Average'"}
{"sample_id": 8960, "db_id": "human_resources", "final": {"question": "How much is the minimum salary given to the position with the most complex work?", "sql": "SELECT minsalary FROM position ORDER BY educationrequired DESC LIMIT 1", "source_tables": ["position"]}, "evidence": "most complex work refers to MAX(educationrequired); minimum salary refers to minsalary"}
{"sample_id": 8926, "db_id": "human_resources", "final": {"question": "How many emplyees have a good job performance?", "sql": "SELECT COUNT(*) FROM employee WHERE performance = 'Good'", "source_tables": ["employee"]}, "evidence": "good job performance refers to performance = 'Good'"}
{"sample_id": 8975, "db_id": "human_resources", "final": {"question": "When was Emily Wood hired? Mention her position and salary.", "sql": "SELECT T1.hiredate, T2.positiontitle, T1.salary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'", "source_tables": ["employee", "position"]}, "evidence": "Emily Wood is the full name of an employee; full name = firstname, lastname; when was she hired refers to hiredate"}
{"sample_id": 8936, "db_id": "human_resources", "final": {"question": "Among the employees who are Trainees, how many of them work in New York?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Trainee' AND T2.state = 'NY'", "source_tables": ["location", "employee", "position"]}, "evidence": "Trainees is a position title; California refers to state = 'NY'"}
{"sample_id": 8945, "db_id": "human_resources", "final": {"question": "State the name of the city where Jose Rodriguez works.", "sql": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'", "source_tables": ["location", "employee"]}, "evidence": "Jose Rodriguez is the fullname of an employee; full name = firstname, lastname; name of city refers to locationcity"}
{"sample_id": 8968, "db_id": "human_resources", "final": {"question": "In which state can you find the highest amount of good performing Account Representatives?", "sql": "SELECT T2.state FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T1.performance = 'Good' GROUP BY T2.state ORDER BY COUNT(T2.state) DESC LIMIT 1", "source_tables": ["location", "employee", "position"]}, "evidence": "good performing refers to performance = 'Good'; Account Representatives is a positiontitle; highest amount of employee refers to MAX(positionID);"}
{"sample_id": 8946, "db_id": "human_resources", "final": {"question": "In which state does Emily Wood work?", "sql": "SELECT T2.state FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.firstname = 'Emily' AND T1.lastname = 'Wood'", "source_tables": ["location", "employee"]}, "evidence": "Emily Wood is the full name of an employee; full name = firstname, lastname;"}
{"sample_id": 8952, "db_id": "human_resources", "final": {"question": "What is Kenneth Charles's position title?", "sql": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Kenneth' AND T1.lastname = 'Charles'", "source_tables": ["employee", "position"]}, "evidence": "Kenneth Charles is the full name of an employee; full name = firstname, lastname"}
{"sample_id": 8928, "db_id": "human_resources", "final": {"question": "What is the required education for the position of regional manager?", "sql": "SELECT educationrequired FROM position WHERE positiontitle = 'Regional Manager'", "source_tables": ["position"]}, "evidence": "required education refers to educationrequired; position of regional manager refers to\u00a0 positiontitle = 'Regional Manager'"}
{"sample_id": 8966, "db_id": "human_resources", "final": {"question": "How many Account Representatives are there in Illinois with satisfying performance?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T1.performance = 'Good' AND T2.state = 'IL'", "source_tables": ["location", "employee", "position"]}, "evidence": "Account Representatives is a position title; satisfying performance mostly refers togood performance"}
{"sample_id": 8976, "db_id": "human_resources", "final": {"question": "What are the maximum and minimum salary range and position title of Bill Marlin?", "sql": "SELECT T2.maxsalary, T2.minsalary, T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Bill' AND T1.lastname = 'Marlin'", "source_tables": ["employee", "position"]}, "evidence": "Bill Marlin is the full name of an employee; full name = firstname, lastname; maximum salary refers to maxsalary; minimum salary refers to minsalary"}
{"sample_id": 8970, "db_id": "human_resources", "final": {"question": "List the location cities in the Western states.", "sql": "SELECT locationcity FROM location WHERE state IN ('CO', 'UT', 'CA')", "source_tables": ["location"]}, "evidence": "Western states refers to state = 'CO' OR state = 'UT' OR state = 'CA'; location cities refers to locationcity"}
{"sample_id": 8978, "db_id": "human_resources", "final": {"question": "Mention the full name, hired date and performance status of the employee whose location is in Utah state.", "sql": "SELECT T1.firstname, T1.lastname, T1.hiredate, T1.performance FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.state = 'UT'", "source_tables": ["location", "employee"]}, "evidence": "full name = firstname, lastname; Utah refers to state = 'UT'"}
{"sample_id": 8935, "db_id": "human_resources", "final": {"question": "How much higher is James Johnson's salary from the minimum salary of his title?", "sql": "SELECT CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS diff FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.lastname = 'Johnson' AND T1.firstname = 'James'", "source_tables": ["employee", "position"]}, "evidence": "James Johnson is the fullname of an employee; full name = firstname, lastname; minimum salary refers to minsalary; calculation = SUBTRACT(salary, minsalary)"}
{"sample_id": 8972, "db_id": "human_resources", "final": {"question": "Which positions are suitable with 4 years degree education?", "sql": "SELECT positiontitle FROM position WHERE educationrequired = '4 year degree'", "source_tables": ["position"]}, "evidence": "4 years degree education refers to educationrequired = '4 year degree'; positions refers to positiontitle"}
{"sample_id": 8943, "db_id": "human_resources", "final": {"question": "By what percentage is the average salary of Trainees higher than the minimum salary of this postion?", "sql": "SELECT 100 * (AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'", "source_tables": ["employee", "position"]}, "evidence": "AVG(salary); Trainee is a position title; minimum salary refers to minsalary; calculation = DIVIDE(SUBTRACT(AVG(salary), minsalary), minsalary) * 100"}
{"sample_id": 8934, "db_id": "human_resources", "final": {"question": "How many employees work as an Account Representative?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Account Representative'", "source_tables": ["employee", "position"]}, "evidence": "work as an Account Representative refers to positiontitle = 'Account Representative'"}
{"sample_id": 8954, "db_id": "human_resources", "final": {"question": "What is the max salary for 'Tracy Coulter' if he/she stays on his/her position?", "sql": "SELECT T2.maxsalary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Tracy' AND T1.lastname = 'Coulter'", "source_tables": ["employee", "position"]}, "evidence": "Tracy Coulter is the full name of an employee; full name = firstname, lastname"}
{"sample_id": 8932, "db_id": "human_resources", "final": {"question": "What is the office phone number of the location at which Sandy Adams works?", "sql": "SELECT T2.officephone FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'", "source_tables": ["location", "employee"]}, "evidence": "Sandy Adams is the fullname of an employee; full name = firstname, lastname;"}
{"sample_id": 8981, "db_id": "human_resources", "final": {"question": "Write down the full name, performance status and located city of the employee who's social security number is \"767-74-7373\".", "sql": "SELECT T1.firstname, T1.lastname, T2.state, T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.ssn = '767-74-7373'", "source_tables": ["location", "employee"]}, "evidence": "full name = firstname, lastname; ssn = '767-74-7373'"}
{"sample_id": 8933, "db_id": "human_resources", "final": {"question": "How many male employees work at the address 450 Peachtree Rd?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.address = '450 Peachtree Rd' AND T1.gender = 'M'", "source_tables": ["location", "employee"]}, "evidence": "male employees refers to gender = 'M'"}
{"sample_id": 8929, "db_id": "human_resources", "final": {"question": "Which position has a lower minimum salary, Account Representative or Trainee?", "sql": "SELECT positiontitle FROM position WHERE positiontitle = 'Account Representative' OR positiontitle = 'Trainee' ORDER BY minsalary ASC LIMIT 1", "source_tables": ["position"]}, "evidence": "position of Account Representative refers to positiontitle = 'Account Representative'; position of Trainee refers to positiontitle = 'Trainee'; lower minimum salary refers to MIN(minsalary)"}
{"sample_id": 8982, "db_id": "human_resources", "final": {"question": "Describe the employees' full name, positions, located city and office phone number within Colorado state.", "sql": "SELECT T1.firstname, T1.lastname, T3.positiontitle, T2.locationcity, T2.officephone FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.state = 'CO'", "source_tables": ["location", "employee", "position"]}, "evidence": "full name = firstname, lastname; Colorado state refers to state = 'CO'; positions refers to positiontitle; located city refers to locationcity; office phone number refers to officephone;"}
{"sample_id": 8959, "db_id": "human_resources", "final": {"question": "How much is the salary of the first ever employee that was hired?", "sql": "SELECT salary FROM employee ORDER BY hiredate ASC LIMIT 1", "source_tables": ["employee"]}, "evidence": "first-ever employee that was hired refers to MIN(hiredate)"}
{"sample_id": 8942, "db_id": "human_resources", "final": {"question": "What is the average salary of the employees who work as a Trainee?", "sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) AS avg FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'", "source_tables": ["employee", "position"]}, "evidence": "average = DIVIDE( SUM(salary), COUNT(positiontitle) where positiontitle = 'Trainee'; Trainee is a position title"}
{"sample_id": 8980, "db_id": "human_resources", "final": {"question": "What is the education required to be account representative? Mention account representative full name and salary who got poor in performance status.", "sql": "SELECT T2.educationrequired, T1.firstname, T1.lastname, T1.salary FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' AND T2.positiontitle = 'Account Representative'", "source_tables": ["employee", "position"]}, "evidence": "account representative is a position title; full name = firstname, lastname; poor performance refers to performance = 'Poor'"}
{"sample_id": 8983, "db_id": "human_resources", "final": {"question": "Calculate the monthly average salary of the employee with highest salary. Mention his name, position title and location city.", "sql": "SELECT SUM(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) / 12 AS avg, T1.firstname, T1.lastname , T2.positiontitle, T3.locationcity FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID INNER JOIN location AS T3  ON T1.locationID = T3.locationID WHERE CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID INNER JOIN location AS T3  ON T1.locationID = T3.locationID )", "source_tables": ["location", "employee", "position"]}, "evidence": "highest salary refers to MAX(salary); name = firstname, lastname; calculation = DIVIDE(MAX(salary), 12)"}
{"sample_id": 8949, "db_id": "human_resources", "final": {"question": "Who is the highest paid employee in \"Boston\"? Give the full name.", "sql": "SELECT T1.firstname, T1.lastname FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.locationcity = 'Boston' ORDER BY T1.salary DESC LIMIT 1", "source_tables": ["location", "employee"]}, "evidence": "Boston refers to locationcity = 'Boston'; the highest paid employee refers to MAX(salary); full name = firstname, lastname"}
{"sample_id": 8951, "db_id": "human_resources", "final": {"question": "How many \"account representatives\" are there in Chicago with a good performance?", "sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Account Representative' AND T2.locationcity = 'Chicago' AND T1.performance = 'Good'", "source_tables": ["location", "employee", "position"]}, "evidence": "account representatives is a position title; Chicago refers to locationcity = 'Chicago'; good performance refers to performance = 'Good'"}
{"sample_id": 8964, "db_id": "human_resources", "final": {"question": "Which position has the highest amount of poor performing employees?", "sql": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' GROUP BY T2.positiontitle ORDER BY COUNT(T2.positiontitle) DESC LIMIT 1", "source_tables": ["employee", "position"]}, "evidence": "poor performing employees refers to performance = 'Poor'; the highest amount of employees refers to MAX(positiontitle)"}
{"sample_id": 8967, "db_id": "human_resources", "final": {"question": "What is the average salary of the worst performing managers?", "sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1 INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' AND T2.positiontitle = 'Manager'", "source_tables": ["employee", "position"]}, "evidence": "the worst performing refers to performance = 'Poor'; manager is a positiontitle; average salary refers to AVG(salary)"}
{"sample_id": 9054, "db_id": "bike_share_1", "final": {"question": "What is the difference between the hottest temperature and the coldest temperature in in Fahrenheit on 8/29/2013 for the area where the zip code is 94107?", "sql": "SELECT SUM(IIF(zip_code = 94107 AND date = '8/29/2013', max_temperature_f - min_temperature_f, 0)) FROM weather", "source_tables": ["weather"]}, "evidence": "hottest temperature refers to max_temperatutre_f; coldest temperature refers to min_temperature_f; difference = SUBTRACT(max_temperature_f, min_temperature_f); date = '8/29/2013'"}
{"sample_id": 9021, "db_id": "bike_share_1", "final": {"question": "Among the subscriber, how many of them finished the 2nd at Folsom and Civic Center BART (7th at Market) as their start and end stations respectively for no more than 490 seconds under minimum visibility of 4 miles.", "sql": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.subscription_type = 'Subscriber' AND T2.min_visibility_miles = 4 AND T1.duration < 490 AND T1.start_station_name = '2nd at Folsom' AND T1.end_station_name = 'Civic Center BART (7th at Market)'", "source_tables": ["weather", "trip"]}, "evidence": "subscription_type = 'Subscriber'; no more than 490 seconds refers to duration<490; start_station_name = '2nd at Folsom'; end_station_name = 'Civic Center BART (7th at Market)'; min_visibility_miles = 4;"}
{"sample_id": 9073, "db_id": "bike_share_1", "final": {"question": "What is the ratio for subscriber to customer given that the starting and the ending stations is 2nd at South Park?", "sql": "SELECT CAST(SUM(IIF(subscription_type = 'Subscriber', 1, 0)) AS REAL) / SUM(IIF(subscription_type = 'Customer', 1, 0)) FROM trip WHERE start_station_name = '2nd at South Park' AND end_station_name = '2nd at South Park'", "source_tables": ["trip"]}, "evidence": "subscriber refers to subscription_type = 'Subscriber'; customer refers to subscription_type = 'customer';starting station refers to start_station_name; ending station refers to end_statio_name; start_station_name = '2nd at South Park' AND end_station_name = '2nd at South Park'"}
{"sample_id": 9028, "db_id": "bike_share_1", "final": {"question": "List the days in 2013 when rain and fog occurred together and find the id of bikes borrowed on these days.", "sql": "SELECT T2.date, T1.bike_id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.events = 'Fog-Rain'", "source_tables": ["weather", "trip"]}, "evidence": "in 2013 refers to year(date) = 2013; rain and fog ocurred together refers to events = 'Fog-Rain'; id of bikes refers to biked_id;"}
{"sample_id": 9055, "db_id": "bike_share_1", "final": {"question": "How many bikes can be borrowed in San Jose Diridon Caltrain Station at 12:06:01 on 2013/8/29?", "sql": "SELECT T2.bikes_available FROM station AS T1 INNER JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '2013/08/29 12:06:01'", "source_tables": ["station", "status"]}, "evidence": "number of bikes that can be borrowed refers to bikes_available; San Jose Diridon Caltrain Station refers to name = 'San Jose Diridon Caltrain Station'; time = '2013/8/29 12:06:01'"}
{"sample_id": 9036, "db_id": "bike_share_1", "final": {"question": "Which trip id had the longest duration and the start station is in Redwood City?", "sql": "SELECT T1.id FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Redwood City' AND T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Redwood City' )", "source_tables": ["station", "trip"]}, "evidence": "longest duration refers to MAX(duration); start station refers to start_station_name;"}
{"sample_id": 8999, "db_id": "bike_share_1", "final": {"question": "What is the longest trip duration that started and ended August 29, 2013?", "sql": "SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%'", "source_tables": ["trip"]}, "evidence": "started and ended August 29, 2013 refers to start_date = '8/29/2013' and end_date = '8/29/2013';"}
{"sample_id": 9010, "db_id": "bike_share_1", "final": {"question": "What is the name of the station that is less used by customers who borrow bikes from? Indicate when was the station installed.", "sql": "SELECT T1.start_station_name, T2.installation_date FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.subscription_type = 'Customer' GROUP BY T1.start_station_name ORDER BY COUNT(T1.subscription_type) LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "less used station where bikes are borrowed from refers to start_station_name which has the least number of customers; subscription_type = 'Customer'; when installed refers to installation_date;"}
{"sample_id": 9063, "db_id": "bike_share_1", "final": {"question": "What is the longest duration for a bike trip starting on a day with a fog in 2013?", "sql": "SELECT MAX(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2013%' AND T2.events = 'Fog' AND T2.zip_code = 94107", "source_tables": ["weather", "trip"]}, "evidence": "longest duration refers to MAX(duration); starting on a day with a fog refers to start_date where events = 'fog'; in 2013 refers to date LIKE '%2013';"}
{"sample_id": 9024, "db_id": "bike_share_1", "final": {"question": "In 2014, what is the shortest duration of trips by subscribers which started at 2nd at Folsom and ended in the 5th at Howard stations, and by how much shorter than the average? Give me the minimum temperature, maximum gust speed and weather event on that trip.", "sql": "SELECT MIN(T1.duration) , MIN(T1.duration) - AVG(T1.duration), T2.min_temperature_f FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_date = '1/1/2014 0:00' AND T1.end_date = '12/31/2014 11:59' AND T1.start_station_name = '2nd at Folsom' AND T1.end_station_name = '5th at Howard' AND T1.subscription_type = 'Subscriber'", "source_tables": ["weather", "trip"]}, "evidence": "the shortest duration refers to MIN(duration); subscription_type = 'Subscriber', start_station_name = '2nd at Folsom', end_station_name = '5th at Howard'; in 2014 refers to time period between start_date = '1/1/2014 0:00' and end_date = '12/31/2014 11:59; Average duration = DIVIDE(SUM(duration), COUNT(id));"}
{"sample_id": 9086, "db_id": "bike_share_1", "final": {"question": "How many subscribers are in the zip code of 94301 and what is the hottest temperature recorded on that zip code?", "sql": "SELECT COUNT(T3.zip_code), T3.max_temperature_f FROM trip AS T2 INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.zip_code = 94301 AND T2.subscription_type = 'Subscriber' ORDER BY T3.max_temperature_f DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "hottest temperature refers to MAX(max_temperature_f);"}
{"sample_id": 9092, "db_id": "bike_share_1", "final": {"question": "How many stations were installed on the date of 8/16/2013 and how many users on those stations are classified as a customer?", "sql": "SELECT COUNT(T1.name) , SUM(CASE WHEN T2.subscription_type = 'Customer' THEN 1 ELSE 0 END) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T1.installation_date = '8/16/2013' AND T2.subscription_type = 'Customer'", "source_tables": ["station", "trip"]}, "evidence": "installed on refers to installation_date; installation_date = '8/16/2013'; customers refers to subscription_type = customers;"}
{"sample_id": 9052, "db_id": "bike_share_1", "final": {"question": "How many bike stations are installed after August, 2013 in San Jose?", "sql": "SELECT COUNT(installation_date) FROM station WHERE city = 'San Jose' AND (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) IN ('8', '9', '10', '11', '12') AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013') OR SUBSTR(CAST(installation_date AS TEXT), -4) > '2013'", "source_tables": ["station"]}, "evidence": "installed after August, 2013 refers to year(installation_date)>2013; in San Jose refers to city = 'San Jose';"}
{"sample_id": 9069, "db_id": "bike_share_1", "final": {"question": "How many rainy days were recorded in Mountain View?", "sql": "SELECT SUM(IIF(zip_code = 94041 AND events = 'Rain', 1, 0)) FROM weather", "source_tables": ["weather"]}, "evidence": "rainy days refers to events = 'rain'; Mountain View refers to zip_code = 94041;"}
{"sample_id": 9078, "db_id": "bike_share_1", "final": {"question": "Does the bike with Id number 16 making any intercity trip? If yes, calculate the total travel duration during all the intercity trip. Convert the duration to hour.", "sql": "SELECT T1.end_station_name, T2.city, CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.bike_id = 16 AND T1.start_station_name != T1.end_station_name", "source_tables": ["station", "trip"]}, "evidence": "intercity trip refers to start_station_name! = end_station_name; total travel duration to hour = DIVIDE(SUM(duration), 3600) AS hour;"}
{"sample_id": 9038, "db_id": "bike_share_1", "final": {"question": "How many trips which subscription types were Subscriber and ended in San Jose city?", "sql": "SELECT COUNT(T1.subscription_type) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T1.subscription_type = 'Subscriber' AND T2.city = 'San Jose'", "source_tables": ["station", "trip"]}, "evidence": "ended in refers to end_station_name;"}
{"sample_id": 8984, "db_id": "bike_share_1", "final": {"question": "Which trip had the longest duration? State the start and end station.", "sql": "SELECT start_station_name, end_station_name FROM trip WHERE duration = ( SELECT MAX(duration) FROM trip )", "source_tables": ["trip"]}, "evidence": "start station refers to start_station_name; end station refers to end_station_name;"}
{"sample_id": 9076, "db_id": "bike_share_1", "final": {"question": "How many bicycle trip were made within San Jose city during August 2013?", "sql": "SELECT COUNT(T2.id) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T1.city = 'San Jose' AND T2.start_date LIKE '8/%/2013%' AND T2.start_station_name LIKE 'San Jose%' AND T2.end_station_name LIKE 'San Jose%'", "source_tables": ["station", "trip"]}, "evidence": "during August 2013 refers to start_date like '8/%/2013%';"}
{"sample_id": 9004, "db_id": "bike_share_1", "final": {"question": "What is the maximum dew point in Fahrenheit degree on 7/15/2014 in the area with a zip code of 94301?", "sql": "SELECT DISTINCT CASE WHEN date = '7/15/2014' AND zip_code = 94301 THEN max_dew_point_f END FROM weather", "source_tables": ["weather"]}, "evidence": "the maximum dew point in Fahrenheit degree refers to max_dew_point_f; date = '7/15/2014';"}
{"sample_id": 9089, "db_id": "bike_share_1", "final": {"question": "What is the shortest trip made starting from Franklin at Maple and what is the maximum wind speed at that date?", "sql": "SELECT MIN(T1.duration), MAX(T2.max_wind_Speed_mph) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_station_name = 'Franklin at Maple' AND T2.date = '9/4/2013'", "source_tables": ["weather", "trip"]}, "evidence": "shortest trip refers to MIN(duration); starting from refers to start_station_name; start_station_name = 'Franklin at Maple'; maximum wind speed refers to max_wind_Speed_mph;"}
{"sample_id": 9046, "db_id": "bike_share_1", "final": {"question": "Which were the trips that started at Mountain View City Hall and ended on a rainy day?", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 WHERE T2.events = 'Rain' AND T1.start_station_name = 'Mountain View City Hall'", "source_tables": ["weather", "trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'Mountain View City Hall'; ended on a rainy day refers to end_date where events = 'rain';"}
{"sample_id": 9030, "db_id": "bike_share_1", "final": {"question": "For the rides that started at Market at 10th station and ended at South Van Ness at Market station in August of 2013, which day had the coldest temperature?", "sql": "SELECT T1.start_date FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.date LIKE '8/%/2013' AND T1.start_station_name = 'Market at 10th' AND T1.end_station_name = 'South Van Ness at Market' AND T2.min_temperature_f = ( SELECT MIN(T2.min_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.date LIKE '8/%/2013' AND T1.start_station_name = 'Market at 10th' AND T1.end_station_name = 'South Van Ness at Market' )", "source_tables": ["weather", "trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'Market at 10th'; ended at refers to end_station_name; end_station_name = 'South Van Ness at Market'; in August of 2013 refers to start_date BETWEEN '8/1/2013 0:00' AND '8/31/2013 12:59'; day that had the coldest temperature refers to MIN(min_temperature_f);"}
{"sample_id": 9057, "db_id": "bike_share_1", "final": {"question": "How many bike trips started on the days in September, 2013 with the hottest temperature over 70 degrees Fahrenheit in the area where the zip code is 94107?", "sql": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '9/%/2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 70", "source_tables": ["weather", "trip"]}, "evidence": "started on the days in September, 2013 refers to date LIKE'9%'AND date LIKE'%2013' hottest temperature over 70 degrees Fahrenheit refers to max_temperature_f>70;"}
{"sample_id": 9065, "db_id": "bike_share_1", "final": {"question": "How many trips with a bike borrowed from the stations in San Francisco were made by a subscriber?", "sql": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T2.ID = T1.start_station_id WHERE T2.city = 'San Francisco' AND T1.subscription_type = 'Subscriber'", "source_tables": ["station", "trip"]}, "evidence": "bike was borrowed from refers to start_station_id; San Francisco refers to city = 'San Francisco'; subscriber refers to subscription_type = 'Subscriber';"}
{"sample_id": 9049, "db_id": "bike_share_1", "final": {"question": "Please calculate the average temperature of those trips that started at Market at 4th in 2013.", "sql": "SELECT AVG(T2.mean_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T1.start_station_name = 'Market at 4th'", "source_tables": ["weather", "trip"]}, "evidence": "started at refers to start_station_name; start station_name = 'Market at 4th'; in 2013 refers to start_date like '%2013%'; temperature refers to mean_temperature_f; average temperature = DIVIDE(SUM(mean_temperature_f), COUNT(mean_temperature_f));"}
{"sample_id": 8988, "db_id": "bike_share_1", "final": {"question": "Which is the station where no bike could not be borrowed form on the 2013/11/03 02:01:01? State the location of the station.", "sql": "SELECT T1.name, T1.long FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.time = '2013/11/03 02:01:01' AND T2.bikes_available = 0", "source_tables": ["station", "status"]}, "evidence": "Latitude and longitude coordinates can be used to indicate a location, where latitude refers to lat longtitude refer to long; bikes_available = 0 means no bike can be borrowed; 3/11/2013 02:01:01 refers to time;"}
{"sample_id": 9041, "db_id": "bike_share_1", "final": {"question": "What is the percentage of trips that started in San Jose and durations were longer than 800 seconds?", "sql": "SELECT CAST(SUM(CASE WHEN T1.duration > 800 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Jose'", "source_tables": ["station", "trip"]}, "evidence": "percentage of trips = DIVIDE(COUNT(duration>800), COUNT(duration)) as percentage; San Jose refers to city = 'San Jose'; duration>800;"}
{"sample_id": 9048, "db_id": "bike_share_1", "final": {"question": "What was duration of the longest trip started on the day that has a maximum wind speed of 30 mph?", "sql": "SELECT T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.max_wind_Speed_mph = 30 ORDER BY T1.duration DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "longest trip refers to MAX(duration); started on the day refers to start_date; maximum wind speed refers to max_wind_speed_mph; max_wind_speed_mph = 30;"}
{"sample_id": 9011, "db_id": "bike_share_1", "final": {"question": "On 11/3/2013, which stations are often empty? Indicate the names of the stations.", "sql": "SELECT DISTINCT T1.name FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.bikes_available = 0 AND T2.time LIKE '2013/11/03%'", "source_tables": ["station", "status"]}, "evidence": "time = '11/3/2013'; which stations are empty refers to bikes_available = '0';"}
{"sample_id": 9075, "db_id": "bike_share_1", "final": {"question": "List out all stations name that having a mean temperature 20 degree Celsius in year 2014.", "sql": "SELECT DISTINCT T2.start_station_name, T2.end_station_name FROM weather AS T1 INNER JOIN trip AS T2 ON T1.zip_code = T2.zip_code WHERE T1.date LIKE '%2014' AND T1.mean_temperature_f = 20 * 1.8 + 32", "source_tables": ["weather", "trip"]}, "evidence": "mean temperature refers to mean_temperature_f;\u00a0mean temperature of 20 degree Celsius refers to DIVIDE(SUBTRACT(mean_temperature_f, 32), 1.8) = 20; in 2014 refers to date LIKE'%2015%';"}
{"sample_id": 9008, "db_id": "bike_share_1", "final": {"question": "What is the maximum humidity in Powell Street BART when bike 496 was borrowed from the station on 8/29/2013?", "sql": "SELECT T2.max_humidity FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.start_date LIKE '8/29/2013%' AND T1.bike_id = 496 AND T1.start_station_name = 'Powell Street BART'", "source_tables": ["weather", "trip"]}, "evidence": "Powell Street refers to start_station_name; bike 496 refers to bike_id = '496'; start_date = '8/29/2013';"}
{"sample_id": 9002, "db_id": "bike_share_1", "final": {"question": "How many stations in San Francico can hold more than 20 bikes?", "sql": "SELECT SUM(CASE WHEN city = 'San Francisco' AND dock_count > 20 THEN 1 ELSE 0 END) FROM station", "source_tables": ["station"]}, "evidence": "San Francico is the name of the city; can hold more than 20 bikes implies dock's capacity and refers to dock_count\u226520;"}
{"sample_id": 9081, "db_id": "bike_share_1", "final": {"question": "Which bicycle is the least used bike. Check if the start and end station are from the same city and calculate the total duration travelled by the bicycle in hours for a trip made within the same city.", "sql": "SELECT T2.bike_id, T2.start_station_name, T2.end_station_name, T1.city , CAST(T2.duration AS REAL) / 3600 FROM station AS T1 INNER JOIN trip AS T2 ON T1.name = T2.start_station_name GROUP BY T2.bike_id ORDER BY COUNT(T2.id) DESC LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "least used bike refers to bike_id with MIN(COUNT(main_trip.id)); start station refers to start_station_name; end station refers to end_station_name; total duration in hour = DIVIDE(duration, 3600) AS hour;"}
{"sample_id": 9025, "db_id": "bike_share_1", "final": {"question": "Find the average ride time of the bikes that started at Steuart at Market station and ended at Embarcadero at Sansome station in July 2014.", "sql": "SELECT AVG(duration) FROM trip WHERE start_date = '7/1/2014%' AND end_date = '7/31/2014%' AND start_station_name = 'Steuart at Market' AND end_station_name = 'Embarcadero at Sansome'", "source_tables": ["trip"]}, "evidence": "started at refers to start_station_name; start_station_name = 'Steuart at Market'; ended at refers to end_station_name; end_station_name = 'Embarcadero at Sansome'; rides in July 2004 refers to start_date = '7/1/2014 0:00'AND end_date = '7/31/2014 12:59';average ride time = DIVIDE(SUM(duration), COUNT(id))"}
{"sample_id": 9026, "db_id": "bike_share_1", "final": {"question": "What are the average maximum and minimum temperatures in May 2015 when the mean humidity is between 65 and 75?", "sql": "SELECT AVG(max_temperature_f), AVG(min_temperature_f) FROM weather WHERE date LIKE '5/%/2015' AND mean_humidity BETWEEN 65 AND 75", "source_tables": ["weather"]}, "evidence": "average maximum temperature = DIVIDE(SUM(max_temperature_f), COUNT(date)); average minimum temperature = DIVIDE(SUM(min_temperature_f), COUNT(date)); May 2015 refers to date BETWEEN '5/1/2015'AND '5/31/2015';"}
{"sample_id": 9066, "db_id": "bike_share_1", "final": {"question": "On the day with the hottest temperature ever in 2014, how many bike trips started from the station 2nd at Folsom?", "sql": "SELECT COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2014%' AND T2.zip_code = 94107 AND T1.start_station_name = '2nd at Folsom' ORDER BY T2.max_temperature_f DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "hottest temperature refers to max_temperatutre_f; in 2014 refers to date LIKE '%2014'; started from station refers to start_station_name; start_station_name = '2nd at Folsom';"}
{"sample_id": 9072, "db_id": "bike_share_1", "final": {"question": "Convert all temperature recorded at San Francisco city during August 2013 into degree Celsius.", "sql": "SELECT (max_temperature_f - 32) / 1.8000 , (mean_temperature_f - 32) / 1.8000 , (min_temperature_f - 32) / 1.8000 FROM weather WHERE SUBSTR(CAST(date AS TEXT), 1, INSTR(date, '/') - 1) = '8' AND SUBSTR(CAST(date AS TEXT), -4) = '2013' AND zip_code = 94107", "source_tables": ["weather"]}, "evidence": "temperature refers to max_temperature_f; March 2013 refers to date like '3/%/2013'; conversion to Celcius = DIVIDE(SUBTRACT(max_temperature_f, 32), 1.800) as Celsius1; DIVIDE(SUBTRACT(mean_temperature_f, 32), 1.800) as Celsius2; DIVIDE(SUBTRACT(min_temperature_f, 32), 1.800) as Celcius3;"}
{"sample_id": 9068, "db_id": "bike_share_1", "final": {"question": "List out all end stations for a bicycle that were making a trip starting from 2nd at South Park station? Only retain the unique value.", "sql": "SELECT DISTINCT end_station_name FROM trip WHERE start_station_name = '2nd at South Park'", "source_tables": ["trip"]}, "evidence": "end station refers to end_station_name; starting from refers to start_station_name; start_station_name = '2nd at South Park';"}
{"sample_id": 9014, "db_id": "bike_share_1", "final": {"question": "List the name of stations that were installed from 8/5/2013 to 12/31/2013. Indicate their installation date and city name.", "sql": "SELECT name, installation_date, city FROM station WHERE (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) = '5' AND SUBSTR(CAST(installation_date AS TEXT), INSTR(installation_date, '/') + 1, -6) >= '8' AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013') OR (SUBSTR(CAST(installation_date AS TEXT), 1, INSTR(installation_date, '/') - 1) IN ( '6', '7', '8', '9', '10', '11', '12' ) AND SUBSTR(CAST(installation_date AS TEXT), -4) = '2013')", "source_tables": ["station"]}, "evidence": "from 8/5/2013 to 12/31/2013 refers to installation_date between '8/5/2013' and '12/31/2013';"}
{"sample_id": 8990, "db_id": "bike_share_1", "final": {"question": "What was the hottest temperature on the day of trip ID 4080?", "sql": "SELECT MAX(T2.max_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T1.id = 4080", "source_tables": ["weather", "trip"]}, "evidence": "the hottest temperature refers to max_temperature_f;"}
{"sample_id": 9016, "db_id": "bike_share_1", "final": {"question": "Write down the times when there is no available bike to borrow in a station. List down the stations name and location coordinate.", "sql": "SELECT T2.time, T1.name, T1.lat, T1.long FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.bikes_available = 0", "source_tables": ["station", "status"]}, "evidence": "no available bike to borrow refers to bikes_available = 0; latitude and longitude coordinates can be used to indicate a location;"}
{"sample_id": 9090, "db_id": "bike_share_1", "final": {"question": "How many bikes have been borrowed at San Jose Diridon Caltrain Station on the date and time of 10/20/2013 8:11:01 AM and indicate the station's coordinates.", "sql": "SELECT SUM(T2.bikes_available), T1.long, T1.lat FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.time = '2013/10/20 8:11:01' AND T1.name = 'San Jose Diridon Caltrain Station'", "source_tables": ["station", "status"]}, "evidence": "number of bikes that have been borrowed refers to SUM(bikes_available); San Jose Diridon Caltrain Station refers to name = 'San Jose Diridon Caltrain Station'; station's coordinates refers to (lat, long);"}
{"sample_id": 9084, "db_id": "bike_share_1", "final": {"question": "Which city is Townsend at 7th Station located and how many bikes could it hold?", "sql": "SELECT city, SUM(dock_count) FROM station WHERE name = 'Townsend at 7th'", "source_tables": ["station"]}, "evidence": "Townsend at 7th Station refers to city = 'Townsend at 7th Station'; number of bikes a station can hold refers to SUM(dock_count);"}
{"sample_id": 9056, "db_id": "bike_share_1", "final": {"question": "In which city's station is a bike borrowed on trip ID4069?", "sql": "SELECT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069", "source_tables": ["station", "trip"]}, "evidence": "bike is borrowed from refers to start_station_id;"}
{"sample_id": 9061, "db_id": "bike_share_1", "final": {"question": "How many docks were left at the end station for trip ID4069?", "sql": "SELECT SUM(T2.docks_available) FROM trip AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.end_station_id WHERE T1.ID = 4069", "source_tables": ["status", "trip"]}, "evidence": "end station refers to end_station_id; docks that were left refers to docks_available;"}
{"sample_id": 9031, "db_id": "bike_share_1", "final": {"question": "Among the rides during the rainy days, which ride was the longest? List the start station, end station, and duration of this ride.", "sql": "SELECT T1.start_station_name, T1.end_station_name, T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'Rain' OR T2.events = 'rain' ORDER BY T1.duration DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "rainy days refers to events = 'rain'; longest ride refers to MAX(duration); start station refers to start_station_name; end station refers to end_station_name; duration of the ride refers to duration;"}
{"sample_id": 8985, "db_id": "bike_share_1", "final": {"question": "What is the percentage of the trip were done by a subscriber?", "sql": "SELECT CAST(COUNT(subscription_type) AS REAL) * 100 / ( SELECT COUNT(subscription_type) FROM trip ) FROM trip WHERE subscription_type = 'Subscriber'", "source_tables": ["trip"]}, "evidence": "subscription_type = 'Subscriber'; DIVIDE(COUNT(id where subscription_type = 'Subscriber'), COUNT(id)) as percentage;"}
{"sample_id": 9029, "db_id": "bike_share_1", "final": {"question": "Find the longest ride on foggy day. What were the mean visibility, mean wind speed, and weather event during that ride? Also, list the coordinates and names of the start and end stations.", "sql": "SELECT T3.mean_visibility_miles, T3.mean_wind_speed_mph, T3.events, T1.lat, T1.long , T2.start_station_name, T2.end_station_name FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name INNER JOIN weather AS T3 ON T3.zip_code = T2.zip_code WHERE T3.events = 'Fog' ORDER BY T2.duration DESC LIMIT 1", "source_tables": ["weather", "station", "trip"]}, "evidence": "foggy day refers to events = 'fog'; longest ride on a foggy day refers to MAX(duration) where events = 'fog'; mean visibility refers to mean_visibility_miles; mean wind speed refers to mean_wind_speed_mph; weather event refers to events; coordinates refers to (lat, long); start station refers to start_station_id; end station refers to end_station_id;"}
{"sample_id": 9045, "db_id": "bike_share_1", "final": {"question": "Please list trips id started on the hottest day.", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code ORDER BY T2.max_temperature_f DESC LIMIT 1", "source_tables": ["weather", "trip"]}, "evidence": "started refers to start_date; the hottest day refers to max_temperature_f;"}
{"sample_id": 9020, "db_id": "bike_share_1", "final": {"question": "What were the max gust speed and cloud clover when the customer using bike no. 10 recorded the 386 seconds duration of the trip from MLK Library to San Salvador at 1st?", "sql": "SELECT T2.max_gust_speed_mph, T2.cloud_cover FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T1.bike_id = 10 AND T2.mean_temperature_f > 62 AND T1.subscription_type = 'Customer' AND T1.start_station_name = 'MLK Library' AND T1.end_station_name = 'San Salvador at 1st' AND T1.duration = 386", "source_tables": ["weather", "trip"]}, "evidence": "subscription_type = 'Customer'; duration = '364'; bike no. 10 refers to bike_id = 10; start_station_name = 'San Jose Civic Center'; end_station_name = 'San Jose City Hall';"}
{"sample_id": 8995, "db_id": "bike_share_1", "final": {"question": "For all trips which took less 5 minutes, state the station name where the bike were borrowed and returned. Indicate mean temperature of the day.", "sql": "SELECT T1.start_station_name, T1.end_station_name, T2.mean_temperature_f FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.duration < 300", "source_tables": ["weather", "trip"]}, "evidence": "less than 5 minutes refers to duration<300 in seconds; the station where the bike was borrowed refers to start_station_name; the station where the bike was returned refers to end_station_name; mean temperature refers to min_temperature_f;"}
{"sample_id": 8986, "db_id": "bike_share_1", "final": {"question": "State the final station of bike id 13. Which city was it at?", "sql": "SELECT T2.end_station_id, T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T1.name = T2.end_station_name WHERE T2.bike_id = 13 ORDER BY T2.end_date DESC LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "final station refers to end_station_name where MAX(end_date);"}
{"sample_id": 9079, "db_id": "bike_share_1", "final": {"question": "What is the ratio of customer to subscriber that making a trip inside Mountain View city?", "sql": "SELECT CAST(SUM(CASE WHEN T1.subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Mountain View'", "source_tables": ["station", "trip"]}, "evidence": "customer refers to subscription_type = 'customer'; subscriber refers to subscription_type = 'subscriber'; ratio = MULTIPLY(DIVIDE(COUNT(subscription_type = 'Customer'), COUNT(subscription_type = 'Subscriber'). 1.0)) AS ratio;"}
{"sample_id": 9006, "db_id": "bike_share_1", "final": {"question": "On 10/20/2014, what is the duration of the fastest trip which started from the station with latitude and longitudes of 37.789625 and -122.400811, respectively? Indicate the bike id.", "sql": "SELECT MIN(T2.duration), T2.bike_id FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '10/20/2014%' AND T1.lat = 37.789625 AND T1.long = -122.400811", "source_tables": ["station", "trip"]}, "evidence": "lat = '37.789625' and long = '-122.400811' are latitude and longitude coordinates indicating location; started from the station refers to start_station_name; start_date = '10/20/2014'; duration of the fastest trip refers to MIN(duration);"}
{"sample_id": 8989, "db_id": "bike_share_1", "final": {"question": "Name the station and city with the most borrowed bike.", "sql": "SELECT T2.start_station_name, T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name GROUP BY T2.start_station_name ORDER BY COUNT(T2.start_station_name) DESC LIMIT 1", "source_tables": ["station", "trip"]}, "evidence": "the station with the most borrowed bikes refers to MAX(start_station);"}
{"sample_id": 9018, "db_id": "bike_share_1", "final": {"question": "On 8/29/2013 at 6:14:01 PM, how many bikes were borrowed from San Jose Diridon Caltrain Station?", "sql": "SELECT SUM(T1.dock_count - T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '2013/08/29 06:14:01'", "source_tables": ["station", "status"]}, "evidence": "How many bikes borrowed can be computed as SUBTRACT(SUM(dock_count), bikes_available where name = 'San Jose Diridon Caltrain Station' and time = '2013/08/29 06:14:01');"}
{"sample_id": 9015, "db_id": "bike_share_1", "final": {"question": "What is the average duration of trips which are started at Adobe on Almaden station to Ryland Park?", "sql": "SELECT AVG(duration) FROM trip WHERE start_station_name = 'Adobe on Almaden' AND end_station_name = 'Ryland Park'", "source_tables": ["trip"]}, "evidence": "trips refer to id; DIVIDE(SUM(duration where start_station_name = 'Adobe on Almaden', end_station_name = 'Ryland Park'), COUNT(id));"}
{"sample_id": 9094, "db_id": "bike_share_1", "final": {"question": "How many subscribers have ended their trip at MLK Library and how many docks does that station have?", "sql": "SELECT COUNT(T1.id), T2.dock_count FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.end_station_name = 'MLK Library' AND T1.subscription_type = 'Subscriber' AND T2.dock_count = 19", "source_tables": ["station", "trip"]}, "evidence": "subscribers refers to subscription_type = 'subscribers'; ended their trip at refers to end_station_name; end_station_name = 'MLK Library'; number of docks a station have refers to dock_count;"}
{"sample_id": 9000, "db_id": "bike_share_1", "final": {"question": "How long did it take for bike id 426 to reach 2nd at South Park from Market at 4th on 8/29/2013? Indicate the duration in minutes.", "sql": "SELECT CAST(duration AS REAL) / 60  FROM trip WHERE bike_id = 426 AND end_station_name = '2nd at South Park' AND start_station_name = 'Market at 4th' AND start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%'", "source_tables": ["trip"]}, "evidence": "duration in minutes refers to DIVIDE(duration, 60 seconds); 2nd at South Park refers to end_station_name; Market at 4th refers to start_station_name; start_date = '8/29/2013'; end_date = '8/29/2013';"}
{"sample_id": 9033, "db_id": "bike_share_1", "final": {"question": "List the name and city of starting stations which has an above-average duration trips.", "sql": "SELECT DISTINCT T1.start_station_name, T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration > ( SELECT AVG(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )", "source_tables": ["station", "trip"]}, "evidence": "starting stations refers to start_station_name; above average duration trips = DIVIDE(SUM(duration), COUNT(main_trip.id))<duration;"}
{"sample_id": 9035, "db_id": "bike_share_1", "final": {"question": "In 2006, how many trips ended at stations in Mountain View?", "sql": "SELECT COUNT(T2.city) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T2.city = 'Mountain View' AND T1.start_date LIKE '%2006%'", "source_tables": ["station", "trip"]}, "evidence": "in 2006 refers to start_date LIKE'%2006%'; ended at station refers to end_station_name; Mountain View refers to city = 'Mountain View';"}
{"sample_id": 9085, "db_id": "bike_share_1", "final": {"question": "How many bikes could Evelyn Park and Ride hold and how many users who started on that station are subscribers?", "sql": "SELECT SUM(T2.dock_count), COUNT(T1.subscription_type) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.name = 'Evelyn Park and Ride' AND T1.start_station_name = T2.name AND T1.subscription_type = 'Subscriber'", "source_tables": ["station", "trip"]}, "evidence": "number of bikes a station can hold refers to SUM(dock_count); Evelyn Park and Ride refers to name = 'Evelyn Park and Ride'; started on the station refers to start_station_name; subscribers refers to subscription_type = 'subscriber';"}
{"sample_id": 9017, "db_id": "bike_share_1", "final": {"question": "List down the trips in which their start and end station are similar. Give me their trip IDs and location coordinates.", "sql": "SELECT T1.id, T2.lat, T2.long FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.start_station_name = T1.end_station_name", "source_tables": ["station", "trip"]}, "evidence": "start and end station are similar refers to start_station_name = end_station_name; latitude and longitude coordinates can be used to indicate a location;"}
{"sample_id": 9082, "db_id": "bike_share_1", "final": {"question": "Count the number of subscribers who started their trips in Market at 4th.", "sql": "SELECT COUNT(CASE WHEN subscription_type = 'Subscriber' AND start_station_name = 'Market at 4th' THEN id END) FROM trip", "source_tables": ["trip"]}, "evidence": "subsscriber refers to subscription_type = subscriber; started their trips in refers to start_station_name; start_station_name = 'Market at 4th';"}
{"sample_id": 9042, "db_id": "bike_share_1", "final": {"question": "How many trips in 2013 had durations longer than 1000 seconds?", "sql": "SELECT COUNT(duration) FROM trip WHERE start_date LIKE '%/%/2013%' AND duration > 1000", "source_tables": ["trip"]}, "evidence": "trips in 2013 refers to start_date like'%2013%'; duration>1000;"}
{"sample_id": 9067, "db_id": "bike_share_1", "final": {"question": "What is the average duration of a bike trip made on the day with the hottest temperature ever in 2014?", "sql": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2014%' AND T1.start_station_name = '2nd at Folsom' AND T2.max_temperature_f = ( SELECT max_temperature_f FROM weather ORDER BY max_temperature_f DESC LIMIT 1 )", "source_tables": ["weather", "trip"]}, "evidence": "average duration = DIVIDE(SUM(duration), COUNT(id)); hottest temperature refers to max_temperature_f; in 2014 refers to date LIKE '%2014';"}
{"sample_id": 9019, "db_id": "bike_share_1", "final": {"question": "List down the trip IDs when bike no. 10 was used by subscribers and the weather's mean temperature is no less than 62 degress Fahrenheit.", "sql": "SELECT T1.id FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.bike_id = 10 AND T2.mean_temperature_f > 62 AND T1.subscription_type = 'Subscriber'", "source_tables": ["weather", "trip"]}, "evidence": "bike no. 10 refers to bike_id = '10'; subscription_type = 'Subscriber'; the weather's mean temperature is no less than 62 degress Fahrenheit refers to mean_temperature_f>62;"}
{"sample_id": 9301, "db_id": "movie_3", "final": {"question": "What is the largest number of films rented per customer?", "sql": "SELECT COUNT(rental_id) FROM rental GROUP BY customer_id ORDER BY COUNT(rental_id) DESC LIMIT 1", "source_tables": ["rental"]}, "evidence": "the largest number of films refers to MAX(rental_id)"}
{"sample_id": 9099, "db_id": "movie_3", "final": {"question": "Please list the titles of the films that are released in 2006 and have a rental rate of $2.99.", "sql": "SELECT title FROM film WHERE release_year = 2006 AND rental_rate = 2.99", "source_tables": ["film"]}, "evidence": "released in 2006 refers to release_year = 2006; rental rate of $2.99 refers to rental_rate = 2.99"}
{"sample_id": 9141, "db_id": "movie_3", "final": {"question": "What is the phone number of address No.72?", "sql": "SELECT phone FROM address WHERE address_id = '72'", "source_tables": ["address"]}, "evidence": "address no. 72 refers to address_id = 72; phone number refers to phone"}
{"sample_id": 9387, "db_id": "movie_3", "final": {"question": "Provide the full name of all the actors of the film \"Ending Crowds\".", "sql": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'ENDING CROWDS'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "full name refers to first_name, last_name; film \"Ending Crowds\" refers to title = 'ENDING CROWDS'"}
{"sample_id": 9195, "db_id": "movie_3", "final": {"question": "List down the films titles with the lowest replacement cost under the general audiences rating.", "sql": "SELECT title FROM film WHERE replacement_cost = ( SELECT MIN(replacement_cost) FROM film )", "source_tables": ["film"]}, "evidence": "lowest replacement cost refers to Min(replacement_cost); under general audience rating refers to rating = G"}
{"sample_id": 9157, "db_id": "movie_3", "final": {"question": "Give the email address of the person who lives in \"1411 Lillydale Drive\".", "sql": "SELECT T2.email FROM address AS T1 INNER JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T1.address = '1411 Lillydale Drive'", "source_tables": ["staff", "address"]}, "evidence": "\"1411 Lillydate Drive\" is the address"}
{"sample_id": 9379, "db_id": "movie_3", "final": {"question": "How many film categories are there?", "sql": "SELECT COUNT(DISTINCT category_id) FROM category", "source_tables": ["category"]}, "evidence": ""}
{"sample_id": 9100, "db_id": "movie_3", "final": {"question": "Which film has the longest duration of film screening? Please give its title.", "sql": "SELECT title FROM film ORDER BY length DESC LIMIT 1", "source_tables": ["film"]}, "evidence": "longest duration of film refers to Max(length)"}
{"sample_id": 9305, "db_id": "movie_3", "final": {"question": "What are the addresses of the inactive customers?", "sql": "SELECT T2.address FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.active = 0", "source_tables": ["address", "customer"]}, "evidence": "inactive customers refers to active = 0;"}
{"sample_id": 9377, "db_id": "movie_3", "final": {"question": "Identify the full name of the customer, who has the following email address: SHEILA.WELLS@sakilacustomer.org.", "sql": "SELECT first_name, last_name FROM customer WHERE email = 'SHEILA.WELLS@sakilacustomer.org'", "source_tables": ["customer"]}, "evidence": "full name refers to first_name, last_name"}
{"sample_id": 9391, "db_id": "movie_3", "final": {"question": "What are the films that are least rented by the customers?", "sql": "SELECT T.title FROM ( SELECT T3.title, COUNT(T1.customer_id) AS num FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T3.title ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["inventory", "rental", "film"]}, "evidence": "film refers to title; least rented refers to count(min(customer_id))"}
{"sample_id": 9417, "db_id": "movie_3", "final": {"question": "Among the times Mary Smith had rented a movie, how many of them happened in June, 2005?", "sql": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND STRFTIME('%Y',T1.payment_date) = '2005' AND STRFTIME('%Y', T1.payment_date) = '6'", "source_tables": ["payment", "customer"]}, "evidence": "in June 2005 refers to year(payment_date) = 2005 and month(payment_date) = 6"}
{"sample_id": 9258, "db_id": "movie_3", "final": {"question": "To which country does the address '1386 Nakhon Sawan Boulevard' belong?", "sql": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id WHERE T3.address = '1386 Nakhon Sawan Boulevard'", "source_tables": ["city", "address", "country"]}, "evidence": ""}
{"sample_id": 9146, "db_id": "movie_3", "final": {"question": "Which continent is the mother country of Clarksville city in?", "sql": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T2.city = 'Clarksville'", "source_tables": ["city", "country"]}, "evidence": "\"Clarksville\" is the city;"}
{"sample_id": 9220, "db_id": "movie_3", "final": {"question": "Provide the full names and emails of customers whose payments were greater than 70% of the average.", "sql": "SELECT DISTINCT T2.first_name, T2.last_name, T2.email FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id WHERE T1.amount > ( SELECT AVG(amount) FROM payment ) * 0.7", "source_tables": ["payment", "address", "customer"]}, "evidence": "full name refers to first_name, last_name; average payment refers to AVG(amount); payments were greater than 70% of the average refers to amount > (AVG(amount) MULTIPLY 0.7)"}
{"sample_id": 9244, "db_id": "movie_3", "final": {"question": "Give the full name of the actor who acted in the most number of movies?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "actor"]}, "evidence": "full name refers to first_name, last_name; acted in the most number of movies refers to MAX(COUNT(film_id))"}
{"sample_id": 9260, "db_id": "movie_3", "final": {"question": "Indicate the title of all the films that are in the Classics category.", "sql": "SELECT T2.title FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id WHERE T3.name = 'Classics'", "source_tables": ["category", "film_category", "film"]}, "evidence": "'classics' is the name of category"}
{"sample_id": 9125, "db_id": "movie_3", "final": {"question": "Among the films that the customer RUTH MARTINEZ has rented, what is the title of the one with the highest replacement cost?", "sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ' ORDER BY T4.replacement_cost DESC LIMIT 1", "source_tables": ["inventory", "customer", "rental", "film"]}, "evidence": "highest replacement cost refers to Max(replacement_cost)"}
{"sample_id": 9229, "db_id": "movie_3", "final": {"question": "In the film with an inventory ID between 20 to 60, how many of the films have a G rating?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id BETWEEN 20 AND 60 AND T1.rating = 'G'", "source_tables": ["inventory", "film"]}, "evidence": "G rating refers to rating = 'G'"}
{"sample_id": 9178, "db_id": "movie_3", "final": {"question": "How many films are categorized as horror?", "sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Horror'", "source_tables": ["category", "film_category"]}, "evidence": "\"Horror\" is the name of category"}
{"sample_id": 9262, "db_id": "movie_3", "final": {"question": "How many different clients have rented materials from Jon Stephens?", "sql": "SELECT COUNT(T1.customer_id) FROM rental AS T1 INNER JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Jon' AND T2.last_name = 'Stephens'", "source_tables": ["staff", "rental"]}, "evidence": "'Jon Stephens' is a full name of a customer; full name refers to first_name, last_name;"}
{"sample_id": 9290, "db_id": "movie_3", "final": {"question": "Which district does Maria Miller live in?", "sql": "SELECT T2.district FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller'", "source_tables": ["address", "customer"]}, "evidence": "'Maria Miller' is a name of a customer; full name refers to first_name, last_name"}
{"sample_id": 9155, "db_id": "movie_3", "final": {"question": "How many films are in English?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'", "source_tables": ["language", "film"]}, "evidence": "\"English\" is the name of language"}
{"sample_id": 9263, "db_id": "movie_3", "final": {"question": "What is the total amount paid for rentals made on July 29, 2005?", "sql": "SELECT SUM(T2.amount) FROM rental AS T1 INNER JOIN payment AS T2 ON T1.rental_id = T2.rental_id WHERE date(T1.rental_date) = '2005-07-29%'", "source_tables": ["payment", "rental"]}, "evidence": "July 29, 2005 refers to rental_date like '2005-07-29'"}
{"sample_id": 9267, "db_id": "movie_3", "final": {"question": "How many actors acted in movies in the Music category?", "sql": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN film_category AS T4 ON T3.film_id = T4.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id WHERE T5.name = 'Music'", "source_tables": ["film_category", "film", "category", "film_actor", "actor"]}, "evidence": "Music' is a name of a category"}
{"sample_id": 9370, "db_id": "movie_3", "final": {"question": "Identify the number of movies that starred Nick Stallone.", "sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id AND T2.first_name = 'NICK' AND T2.last_name = 'STALLONE'", "source_tables": ["film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9331, "db_id": "movie_3", "final": {"question": "Calculate the percentage of movie titles with a screen length of more than 120 minutes that have a category of horror movies.", "sql": "SELECT CAST(SUM(IIF(T3.\"name\" = 'Horror', 1, 0)) * 100 / COUNT(T1.film_id) AS REAL) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.length > 120", "source_tables": ["category", "film_category", "film"]}, "evidence": "screen length of more than 120 minutes refers to length > 120; category of horror refers to category.name = 'Horror'; percentage = divide(count(title where length > 120 and category.name = 'Horror'), count(title)) * 100%"}
{"sample_id": 9190, "db_id": "movie_3", "final": {"question": "What is the full name of the customer who rented the highest number of movies of all time?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.rental_id) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "rental"]}, "evidence": "full name refers to first_name, last_name; customer who rented the most film refers to Max(count(rental_id))"}
{"sample_id": 9117, "db_id": "movie_3", "final": {"question": "Among the films starring PENELOPE GUINESS, how many of them are in English?", "sql": "SELECT COUNT(T3.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN language AS T4 ON T3.language_id = T4.language_id WHERE T4.name = 'English' AND T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'", "source_tables": ["film_actor", "language", "actor", "film"]}, "evidence": "\"English\" is the name of language"}
{"sample_id": 9334, "db_id": "movie_3", "final": {"question": "List down all of the film IDs with highest rental duration.", "sql": "SELECT film_id FROM film WHERE rental_duration = ( SELECT MAX(rental_duration) FROM film )", "source_tables": ["film"]}, "evidence": "highest rental duration refers to max(rental_duration)"}
{"sample_id": 9266, "db_id": "movie_3", "final": {"question": "What is the title of the films in which Cuba Allen acted?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Cuba' AND T1.last_name = 'Allen'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "'Cuba Allen' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9308, "db_id": "movie_3", "final": {"question": "Who is the customer with the largest payment for rental films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, SUM(T2.amount) AS num FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["payment", "customer"]}, "evidence": "Who refers to first_name, last_name; the largest payment for rental refers to MAX(SUM(amount))"}
{"sample_id": 9264, "db_id": "movie_3", "final": {"question": "What is the first name of the customers whose address is in the postal code that begins with 76?", "sql": "SELECT T1.first_name FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE SUBSTR(T2.postal_code, 1, 2) = '76'", "source_tables": ["address", "customer"]}, "evidence": "postal code that begins with 76 refers to postal_code like '76%'"}
{"sample_id": 9162, "db_id": "movie_3", "final": {"question": "Give the name of the film for inventory No.3479.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id = 3479", "source_tables": ["inventory", "film"]}, "evidence": "inventory no. 3479 refers to inventory_id = '3479'; name of film refers to title"}
{"sample_id": 9239, "db_id": "movie_3", "final": {"question": "What percentage of the movies are PG-13?", "sql": "SELECT CAST(SUM(IIF(rating = 'PG-13', 1, 0)) AS REAL) * 100 / COUNT(film_id) FROM film", "source_tables": ["film"]}, "evidence": "PG-13 is a rating; calculation = DIVIDE(SUM(rating = PG-13), SUM(rating)) * 100"}
{"sample_id": 9122, "db_id": "movie_3", "final": {"question": "For how many times has the customer RUTH MARTINEZ rented a film?", "sql": "SELECT COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'", "source_tables": ["customer", "rental"]}, "evidence": "times of rented refers to Count(rental_id)"}
{"sample_id": 9353, "db_id": "movie_3", "final": {"question": "What is the average rental rate of sci-fi film titles?", "sql": "SELECT AVG(T1.rental_rate) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.\"name\" = 'Sci-Fi'", "source_tables": ["category", "film_category", "film"]}, "evidence": "sci-fi film refers to category.name = 'Sci-Fi'; average rental rate = avg(rental_rate)"}
{"sample_id": 9184, "db_id": "movie_3", "final": {"question": "What is the rental price per day of the most expensive children's film?", "sql": "SELECT T1.rental_rate FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Children' ORDER BY T1.rental_rate / T1.rental_duration DESC LIMIT 1", "source_tables": ["category", "film_category", "film"]}, "evidence": "children's film refers to name = 'Children'; average price per day of most expensive film = Max(Divide(rental_rate, rental_duration))"}
{"sample_id": 9166, "db_id": "movie_3", "final": {"question": "In 2006, how many restricted films were released?", "sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'R' AND release_year = 2006", "source_tables": ["film"]}, "evidence": "restricted refers to rating = 'R'; release refers to release_year; in 2006 refers to release_year = 2006; film refers to title"}
{"sample_id": 9410, "db_id": "movie_3", "final": {"question": "What is the address of Mary Smith?", "sql": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'", "source_tables": ["customer", "address"]}, "evidence": ""}
{"sample_id": 9147, "db_id": "movie_3", "final": {"question": "How many actors played a role in the 2006 film whose rental duration is 7 days, rental rate is 4.99 and is 98 minutes duration?", "sql": "SELECT COUNT(T1.actor_id) FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.release_year = 2006 AND T2.rental_duration = 7 AND T2.rental_duration = 4.99 AND T2.length = 98", "source_tables": ["film_actor", "film"]}, "evidence": "in 2006 refers to release_year = 2006; 98 min duration refers to length = 98; number of actors refers to count(actor_id)"}
{"sample_id": 9385, "db_id": "movie_3", "final": {"question": "List at least 5 customers who paid greater than $10. Provide the full name of the customers.", "sql": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10", "source_tables": ["payment", "customer"]}, "evidence": "full name refers to first_name, last_name; greater than $10 refers to amount > 10"}
{"sample_id": 9164, "db_id": "movie_3", "final": {"question": "How many times is the number of Indian cities than Italian cities?", "sql": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) / SUM(IIF(T1.country = 'Italy', 1, 0)) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id", "source_tables": ["city", "country"]}, "evidence": "indian refers to country = 'India'; Italian refers to country = 'Italy'; times = Divide(Count(city where country = 'India), Count(city where country = 'Italy'))"}
{"sample_id": 9289, "db_id": "movie_3", "final": {"question": "What is the difference between the number of children's films and action films?", "sql": "SELECT SUM(IIF(T2.name = 'Children', 1, 0)) - SUM(IIF(T2.name = 'Action', 1, 0)) AS diff FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "source_tables": ["category", "film_category"]}, "evidence": "'children' AND 'action' are names of a category; Calculation = SUBTRACT(AVG('children'), AVG('action'))"}
{"sample_id": 9246, "db_id": "movie_3", "final": {"question": "What is the difference in the average number of films rented each day in Australia and Canada?", "sql": "SELECT AVG(IIF(T4.country = 'Australia', 1, 0)) - AVG(IIF(T4.country = 'Canada', 1, 0)) AS diff FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T2.city_id = T3.city_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id", "source_tables": ["address", "city", "customer", "country"]}, "evidence": "'Australia' AND 'Canada' are country; average number of films refers to AVG('Australia') AND AVG('Canada'); calculation = SUBTRACT(AVG('Australia'), AVG('Canada'))"}
{"sample_id": 9283, "db_id": "movie_3", "final": {"question": "What is the rental price per day for Airplane Sierra?", "sql": "SELECT rental_rate / rental_duration AS result FROM film WHERE title = 'AIRPLANE SIERRA'", "source_tables": ["film"]}, "evidence": "rental price per day refers to DIVIDE(rental_price, rental_duration); 'Airplane Sierra' is a title of a film"}
{"sample_id": 9404, "db_id": "movie_3", "final": {"question": "List the store ID of the film titled \"Amadeus Holy\".", "sql": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'Amadeus Holy'", "source_tables": ["inventory", "film"]}, "evidence": ""}
{"sample_id": 9273, "db_id": "movie_3", "final": {"question": "How many non-active clients have not returned the rented material?", "sql": "SELECT COUNT(T2.customer_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.active = 0", "source_tables": ["customer", "rental"]}, "evidence": "non-active clients refers to active = 0; not returning a rented material refers to rental_date is null"}
{"sample_id": 9340, "db_id": "movie_3", "final": {"question": "How many animation film titles are rated for adults only?", "sql": "SELECT COUNT(T1.title) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'animation' AND T1.rating = 'NC-17'", "source_tables": ["category", "film_category", "film"]}, "evidence": "animation film refers to category.name = 'animation'; for adults only means rating = 'NC-17'"}
{"sample_id": 9238, "db_id": "movie_3", "final": {"question": "Find the full name and email address of inactive customers whose record was created in 2006.", "sql": "SELECT first_name, last_name, email FROM customer WHERE STRFTIME('%Y',create_date) = '2006' AND active = 0", "source_tables": ["customer"]}, "evidence": "full name refers to first_name, last_name; record created in 2006 refers to create_date = 2006; inactive customers refers to active = 0"}
{"sample_id": 9114, "db_id": "movie_3", "final": {"question": "Among the films starring PENELOPE GUINESS, how many of them are released in 2006?", "sql": "SELECT COUNT(T2.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.release_year = 2006 AND T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "release in 2006 refers to release_year = 2006;"}
{"sample_id": 9421, "db_id": "movie_3", "final": {"question": "What is the average amount of money spent by a customer in Italy on a single film rental?", "sql": "SELECT AVG(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'", "source_tables": ["city", "address", "payment", "customer", "country"]}, "evidence": "Italy refers to country = 'Italy'; average amount = divide(sum(amount), count(customer_id)) where country = 'Italy'"}
{"sample_id": 9375, "db_id": "movie_3", "final": {"question": "Indicate the percentage of inactive customers at store no.1.", "sql": "SELECT CAST(SUM(CASE WHEN active = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(customer_id) FROM customer WHERE store_id = 1", "source_tables": ["customer"]}, "evidence": "inactive refers to active = 0; store no.1 refers to store_id = 1; percentage = divide(count(customer_id where active = 0), count(customer_id)) * 100% where store_id = 1"}
{"sample_id": 9327, "db_id": "movie_3", "final": {"question": "Which movie title has the lowest movie rental in the horror category?", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.\"name\" = 'Horror' ORDER BY T1.rental_rate LIMIT 1", "source_tables": ["category", "film_category", "film"]}, "evidence": "the lowest movie rental refers to min(rental_rate); the horror category refers to category.name = 'Horror'"}
{"sample_id": 9406, "db_id": "movie_3", "final": {"question": "Among the films starred by Reese West, what is the difference between the films that have store ID of 1 and store ID of 2?", "sql": "SELECT SUM(IIF(T4.film_id = 1, 1, 0)) - SUM(IIF(T4.film_id = 2, 1, 0)) AS diff FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T2.first_name = 'Reese' AND T2.last_name = 'West'", "source_tables": ["film_actor", "inventory", "actor", "film"]}, "evidence": "result = subtract(count(film_id where store_id = 1), count(film_id where store_id = 2))"}
{"sample_id": 9144, "db_id": "movie_3", "final": {"question": "What is the description of the film Artist Coldblooded?", "sql": "SELECT description FROM film WHERE title = 'ARTIST COLDBLOODED'", "source_tables": ["film"]}, "evidence": "\"ARTIST COLDBLOODED\" is the title of film"}
{"sample_id": 9241, "db_id": "movie_3", "final": {"question": "Calculate the average rent amount paid by the customer with customer id 15.", "sql": "SELECT AVG(amount) FROM payment WHERE customer_id = 15", "source_tables": ["payment"]}, "evidence": "average rent amount refers to AVG(amount)"}
{"sample_id": 9182, "db_id": "movie_3", "final": {"question": "Among the films with a rental duration of 7 days, how many are comedies?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.rental_duration = 7 AND T3.name = 'Comedy'", "source_tables": ["category", "film_category", "film"]}, "evidence": "rental duration of 7 refers to rental_duration = 7; comedies refers to name = 'Comedy'"}
{"sample_id": 9307, "db_id": "movie_3", "final": {"question": "Provide the cast for the film \"Jason trap\".", "sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'JASON TRAP'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "'Jason trap' is a title of a film; cast means actor; actor refers to first_name, last_name"}
{"sample_id": 9212, "db_id": "movie_3", "final": {"question": "Among the films rented by Natalie Meyer, describe the titles and categories of the films which were rented in February 2006.", "sql": "SELECT T3.title, T2.name FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id INNER JOIN customer AS T5 ON T4.store_id = T5.store_id INNER JOIN rental AS T6 ON T4.inventory_id = T6.inventory_id WHERE T5.first_name = 'Natalie' AND T5.last_name = 'Meyer' AND STRFTIME('%Y',T3.rental_rate) = '2006' AND STRFTIME('%m',T3.rental_rate) = '2'", "source_tables": ["film_category", "film", "rental", "inventory", "customer", "category"]}, "evidence": "category refers to name; rented in February 2006 refers to year(rental_date) = 2006 and month (rental_rate) = 2"}
{"sample_id": 9360, "db_id": "movie_3", "final": {"question": "Tally the full names of actors in the film \"Alabama Devil.\"", "sql": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'ALABAMA DEVIL'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "full name refers to first_name, last_name; \"Alabama Devil\" refers to title = 'ALABAMA DEVIL'"}
{"sample_id": 9265, "db_id": "movie_3", "final": {"question": "On what date was the rented material for the movie BLOOD ARGONAUTS returned?", "sql": "SELECT T1.rental_date FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'BLOOD ARGONAUTS'", "source_tables": ["inventory", "rental", "film"]}, "evidence": "'BLOOD ARGONAUTS' is a title of a film; date a movie was returned refers to return_date"}
{"sample_id": 9205, "db_id": "movie_3", "final": {"question": "How many films in the horror category were included in PG-13-rated?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror' AND T1.rating = 'PG-13'", "source_tables": ["category", "film_category", "film"]}, "evidence": "\"Horror\" is the name of category; PG-13 rated refers to rating = 'PG-13'"}
{"sample_id": 9250, "db_id": "movie_3", "final": {"question": "What is the average number of actors acted in comedy movies?", "sql": "SELECT AVG(T1.actor_id) FROM film_actor AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN actor AS T4 ON T4.actor_id = T1.actor_id WHERE T3.name = 'comedy'", "source_tables": ["film_actor", "category", "actor", "film_category"]}, "evidence": "comedy is the name of a category; average number of actors refers to AVG(actor_id)"}
{"sample_id": 9324, "db_id": "movie_3", "final": {"question": "Please provide the full name of the customer at 692 Joliet Street.", "sql": "SELECT T2.first_name, T2.last_name FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T1.address = '692 Joliet Street'", "source_tables": ["customer", "address"]}, "evidence": "full name refers to first_name, last_name; 692 Joliet Street refers to address = '692 Joliet Street'"}
{"sample_id": 9348, "db_id": "movie_3", "final": {"question": "List down the actor IDs of film titled \"BOUND CHEAPER\".", "sql": "SELECT T2.actor_id FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'BOUND CHEAPER'", "source_tables": ["film_actor", "film"]}, "evidence": ""}
{"sample_id": 9255, "db_id": "movie_3", "final": {"question": "How many actors with the surname Kilmer are there?", "sql": "SELECT COUNT(actor_id) FROM actor WHERE last_name = 'Kilmer'", "source_tables": ["actor"]}, "evidence": "surname means last_name;"}
{"sample_id": 9165, "db_id": "movie_3", "final": {"question": "How many times is the number of films Gina DeGeneres acted in than Penelope Guinness?", "sql": "SELECT CAST(SUM(IIF(T2.first_name = 'GINA' AND T2.last_name = 'DEGENERES', 1, 0)) AS REAL) * 100 / SUM(IIF(T2.first_name = 'PENELOPE' AND T2.last_name = 'GUINESS', 1, 0)) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id", "source_tables": ["film_actor", "actor"]}, "evidence": "\"Gina DeGeneres\" and \"Penelope Guinness\" are both full name of actor; times number of film = Divide (Count (film_id where first_name = 'GINA' and last_name = 'DEGENERES'), Count(film_id where first_name = 'PENELOPE' and last_name = 'GUINESS'))"}
{"sample_id": 9291, "db_id": "movie_3", "final": {"question": "Who is the customer that is active and lives at 1795 Santiago de Compostela Way, Texas?", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T2.address = '1795 Santiago de Compostela Way' AND T1.active = 1", "source_tables": ["address", "customer"]}, "evidence": "active refers to active = 1; '1795 Santiago de Compostela Way' is an address; Texas is a district; who refers to first_name, last_name"}
{"sample_id": 9411, "db_id": "movie_3", "final": {"question": "Among all the active customers, how many of them live in Arlington?", "sql": "SELECT COUNT(T2.customer_id) FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T1.city_id = T3.city_id WHERE T2.active = 1 AND T3.city = 'Arlington'", "source_tables": ["city", "customer", "address"]}, "evidence": "active refers to active = 1; Arlington refers to city = 'Arlington'"}
{"sample_id": 9115, "db_id": "movie_3", "final": {"question": "Please give the title of the film starring PENELOPE GUINESS and has the highest replacement cost.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.replacement_cost DESC LIMIT 1", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "highest replacement cost refers to Max (replacement_cost)"}
{"sample_id": 9221, "db_id": "movie_3", "final": {"question": "How many films have a rental rate of 0.99?", "sql": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 0.99", "source_tables": ["film"]}, "evidence": ""}
{"sample_id": 9112, "db_id": "movie_3", "final": {"question": "How many actors have starred in the film ACADEMY DINOSAUR?", "sql": "SELECT COUNT(T1.actor_id) FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.title = 'ACADEMY DINOSAUR'", "source_tables": ["film_actor", "film"]}, "evidence": "\"ACADEMY DINOSAUR\" is the title of film"}
{"sample_id": 9339, "db_id": "movie_3", "final": {"question": "How many Italian film titles were special featured with deleted scenes?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN \"language\" AS T2 ON T1.language_id = T2.language_id WHERE T2.\"name\" = 'Italian' AND T1.special_features = 'deleted scenes'", "source_tables": ["language", "film"]}, "evidence": "Italian is name of language; special featured with deleted scenes refers to special_features = 'deleted scenes'"}
{"sample_id": 9160, "db_id": "movie_3", "final": {"question": "Give the number of documentary films.", "sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Documentary'", "source_tables": ["category", "film_category"]}, "evidence": "\"Documentary\" is the name of category; number of film refers to Count(film_id)"}
{"sample_id": 9240, "db_id": "movie_3", "final": {"question": "Please list the top ten movies with the most price per day in descending order of price per day.", "sql": "SELECT title FROM film ORDER BY rental_rate / rental_duration DESC LIMIT 10", "source_tables": ["film"]}, "evidence": "movies with the most price per day refers to MAX(rental_rate)"}
{"sample_id": 9311, "db_id": "movie_3", "final": {"question": "What are the addresses for the stores?", "sql": "SELECT T2.address FROM store AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id", "source_tables": ["store", "address"]}, "evidence": ""}
{"sample_id": 9213, "db_id": "movie_3", "final": {"question": "How many rental IDs belong to Eleanor Hunt?", "sql": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Eleanor' AND T2.last_name = 'Hunt'", "source_tables": ["customer", "rental"]}, "evidence": "'Eleanor Hunt' is the full name of a customer; full name refers to first_name, last_name"}
{"sample_id": 9172, "db_id": "movie_3", "final": {"question": "What are the full names of all the active employees?", "sql": "SELECT first_name, last_name FROM staff WHERE active = 1", "source_tables": ["staff"]}, "evidence": "active employee refers to active = 1; full name refers to first_name, last_name"}
{"sample_id": 9282, "db_id": "movie_3", "final": {"question": "Please list the full names of any three inactive customers.", "sql": "SELECT first_name, last_name FROM customer WHERE active = 0 LIMIT 3", "source_tables": ["customer"]}, "evidence": "full name refers to first_name, last_name; inactive customers refers to active = 0"}
{"sample_id": 9394, "db_id": "movie_3", "final": {"question": "List at least 10 films that falls into the Horror category.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror'", "source_tables": ["category", "film_category", "film"]}, "evidence": "film refers to title; Horror category refers to category.name = 'Horror'"}
{"sample_id": 9242, "db_id": "movie_3", "final": {"question": "How many customers rented for an above-average period?", "sql": "SELECT COUNT(customer_id) FROM rental WHERE return_date - rental_date > ( SELECT AVG(return_date - rental_date) FROM rental )", "source_tables": ["rental"]}, "evidence": "rented period refers to SUBTRACT(return_date, rental_date); calculation = rented period > (AVG(rented period))"}
{"sample_id": 9177, "db_id": "movie_3", "final": {"question": "What is the full name of the customer who rented movies for 7 consecutive days?", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN ( SELECT customer_id, COUNT(*) AS num_days FROM ( SELECT *, date(days, '-' || rn || ' day') AS results FROM ( SELECT customer_id, days, row_number() OVER (PARTITION BY customer_id ORDER BY days) AS rn FROM ( SELECT DISTINCT customer_id, date(rental_date) AS days FROM rental ) ) ) GROUP BY customer_id, results HAVING num_days = 7 ) AS T2 ON T1.customer_id = T2.customer_id", "source_tables": ["customer", "rental"]}, "evidence": "rented for 7 consecutive days refers to Subtract(return_date, rental_date) = 7; full name refers to first_name, last_name"}
{"sample_id": 9358, "db_id": "movie_3", "final": {"question": "Compute the total payment made by Sarah Lewis for film rentals so far.", "sql": "SELECT SUM(T3.amount) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN payment AS T3 ON T1.rental_id = T3.rental_id WHERE T2.first_name = 'SARAH' AND T2.last_name = 'LEWIS'", "source_tables": ["payment", "customer", "rental"]}, "evidence": "total payment = sum(amount)"}
{"sample_id": 9133, "db_id": "movie_3", "final": {"question": "What is the average replacement cost of the films under the category of \"Horror\"?", "sql": "SELECT AVG(T3.replacement_cost) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.name = 'Horror'", "source_tables": ["category", "film_category", "film"]}, "evidence": "\"Horror\" is the name of category; average replacement cost = Divide (Sum(replacement_cost), Count(film_id where name = Horror))"}
{"sample_id": 9256, "db_id": "movie_3", "final": {"question": "How many movies have a length longer than 100?", "sql": "SELECT COUNT(film_id) FROM film WHERE length > 100", "source_tables": ["film"]}, "evidence": "length longer than 100 refers to length > 100"}
{"sample_id": 9230, "db_id": "movie_3", "final": {"question": "Among films with a rental rate of 4.99, what is the total number of films starred by Bob Fawcett?", "sql": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rental_rate = 4.99 AND T1.first_name = 'Bob' AND T1.last_name = 'Fawcett'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "Bob Fawcett' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9366, "db_id": "movie_3", "final": {"question": "Name the most recent movie rented by Dorothy Taylor.", "sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'DOROTHY' AND T1.last_name = 'TAYLOR' ORDER BY T2.rental_date DESC LIMIT 1", "source_tables": ["inventory", "customer", "rental", "film"]}, "evidence": "movie name refers to title; the most recent refers to max(rental_date)"}
{"sample_id": 9315, "db_id": "movie_3", "final": {"question": "What percentage of films are horror films?", "sql": "SELECT CAST(SUM(IIF(T2.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id", "source_tables": ["category", "film_category", "film"]}, "evidence": "horror' is a name of a category; calculation = DIVIDE(SUM(name = 'Horror'), COUNT(film_id)) * 100"}
{"sample_id": 9167, "db_id": "movie_3", "final": {"question": "How many actors starred in the film id 508?", "sql": "SELECT COUNT(actor_id) FROM film_actor WHERE film_id = 508", "source_tables": ["film_actor"]}, "evidence": ""}
{"sample_id": 9143, "db_id": "movie_3", "final": {"question": "Tell the special features of the film Uprising Uptown.", "sql": "SELECT special_features FROM film WHERE title = 'UPRISING UPTOWN'", "source_tables": ["film"]}, "evidence": "\"UPRISING UPTOWN\" is the title of film"}
{"sample_id": 9403, "db_id": "movie_3", "final": {"question": "What are the titles of the films starred by Russell Close?", "sql": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'Russell' AND T2.last_name = 'Close'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": ""}
{"sample_id": 9139, "db_id": "movie_3", "final": {"question": "Give the postal code for the address No.65.", "sql": "SELECT postal_code FROM address WHERE address_id = 65", "source_tables": ["address"]}, "evidence": "address no. 65 refers to address_id = 65"}
{"sample_id": 9226, "db_id": "movie_3", "final": {"question": "Among the films starred by Angelina Astaire, what is the title of the film with a replacement cost of 27.99?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Angelina' AND T1.last_name = 'Astaire' AND T3.replacement_cost = 27.99", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "Angelina Astaire' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9365, "db_id": "movie_3", "final": {"question": "Identify the number of movies rented by Maria Miller.", "sql": "SELECT COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller'", "source_tables": ["customer", "rental"]}, "evidence": ""}
{"sample_id": 9101, "db_id": "movie_3", "final": {"question": "Which film has a higher replacement cost, ACE GOLDFINGER or ACADEMY DINOSAUR?", "sql": "SELECT title FROM film WHERE title IN ('ACE GOLDFINGER', 'ACADEMY DINOSAUR') ORDER BY replacement_cost DESC LIMIT 1", "source_tables": ["film"]}, "evidence": "higher replacement cost refers to Max(replacement_cost); 'ACE GOLDFIINGER' and 'ACADEMY DINOSAUR' are both the title of film"}
{"sample_id": 9392, "db_id": "movie_3", "final": {"question": "List all the description of the films starring Lucille Tracy?", "sql": "SELECT T1.film_id FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'LUCILLE' AND T2.last_name = 'TRACY'", "source_tables": ["film_actor", "actor"]}, "evidence": ""}
{"sample_id": 9218, "db_id": "movie_3", "final": {"question": "Provide any 5 customers' full names who have rented from Mike Hillyer.", "sql": "SELECT T3.first_name, T3.last_name FROM staff AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.first_name = 'Mike' AND T1.last_name = 'Hillyer' LIMIT 5", "source_tables": ["customer", "staff", "address"]}, "evidence": "full name refers to first_name, last_name; 'Mike Hillyer' is a full name of a staff;"}
{"sample_id": 9275, "db_id": "movie_3", "final": {"question": "In which country is the store where Hector Poinexter rents equipment located?", "sql": "SELECT T5.country FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id INNER JOIN city AS T4 ON T3.city_id = T4.city_id INNER JOIN country AS T5 ON T4.country_id = T5.country_id WHERE T1.first_name = 'HECTOR' AND T1.last_name = 'POINDEXTER'", "source_tables": ["city", "store", "address", "customer", "country"]}, "evidence": "'Hector Poinexter' is a full name of a customer; full name refers to first_name, last_name;"}
{"sample_id": 9227, "db_id": "movie_3", "final": {"question": "List the inventory ID of the film titled \"African Egg\".", "sql": "SELECT T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.title = 'African Egg'", "source_tables": ["inventory", "film"]}, "evidence": "'African Egg' is a title of a film"}
{"sample_id": 9310, "db_id": "movie_3", "final": {"question": "Which country does Sasebo belong to?", "sql": "SELECT T1.country FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T2.city = 'Sasebo'", "source_tables": ["city", "country"]}, "evidence": "'Sasebo' is a city"}
{"sample_id": 9187, "db_id": "movie_3", "final": {"question": "How many cities are there in the United States?", "sql": "SELECT COUNT(T2.city) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'United States'", "source_tables": ["city", "country"]}, "evidence": "\"United States\" is the country"}
{"sample_id": 9110, "db_id": "movie_3", "final": {"question": "How many films are in English?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'", "source_tables": ["language", "film"]}, "evidence": "\"English\" is the name of language"}
{"sample_id": 9288, "db_id": "movie_3", "final": {"question": "Please list the titles of any three action films.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Action' LIMIT 3", "source_tables": ["category", "film_category", "film"]}, "evidence": "action is a name of category"}
{"sample_id": 9168, "db_id": "movie_3", "final": {"question": "What are the special features for the film \"Smoochy Control\"?", "sql": "SELECT special_features FROM film WHERE title = 'SMOOCHY CONTROL'", "source_tables": ["film"]}, "evidence": "\"SMOOCHY CONTROL\" is the title of film"}
{"sample_id": 9119, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films in the category of \"Horror\".", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Horror'", "source_tables": ["category", "film_category", "film"]}, "evidence": "\"Horror\" is the name of category"}
{"sample_id": 9169, "db_id": "movie_3", "final": {"question": "How many customers paid over the amount of 10 on August 2005?", "sql": "SELECT COUNT(customer_id) FROM payment WHERE SUBSTR(payment_date, 1, 7) LIKE '2005-08'", "source_tables": ["payment"]}, "evidence": "over the amount of 10 refers to amount > 10; paid on August 2005 refers to payment_date like '2005_08%'; customer refers to customer_id"}
{"sample_id": 9343, "db_id": "movie_3", "final": {"question": "State the documentary film titles with longest length.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.name = 'documentary' ORDER BY T1.length DESC LIMIT 1", "source_tables": ["category", "film_category", "film"]}, "evidence": "documentary film refers to name = 'documentary'; longest length refers to max(length)"}
{"sample_id": 9247, "db_id": "movie_3", "final": {"question": "Of the movies in which Reese Kilmer acted, what percentage are action movies?", "sql": "SELECT CAST(SUM(IIF(T4.name = 'Action', 1, 0)) AS REAL) * 100 / COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film_category AS T3 ON T2.film_id = T3.film_id INNER JOIN category AS T4 ON T3.category_id = T4.category_id WHERE T1.first_name = 'Reese' AND T1.last_name = 'Kilmer'", "source_tables": ["film_actor", "category", "film_category", "actor"]}, "evidence": "'Reese Kilmer' is a full name of an actor; 'action' is the name of the category; calculation = DIVIDE(COUNT('action'), COUNT(category_id)) * 100"}
{"sample_id": 9349, "db_id": "movie_3", "final": {"question": "What is the inventory ID of Karen Jackson?", "sql": "SELECT T2.inventory_id FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'KAREN' AND T1.last_name = 'JACKSON'", "source_tables": ["customer", "rental"]}, "evidence": ""}
{"sample_id": 9268, "db_id": "movie_3", "final": {"question": "What is the full name of the actor who has acted the most times in comedy films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T4.first_name, T4.last_name, COUNT(T2.actor_id) AS num FROM film_category AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN actor AS T4 ON T2.actor_id = T4.actor_id WHERE T3.name = 'Comedy' GROUP BY T4.first_name, T4.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "category", "actor", "film_category"]}, "evidence": "full name refers to first_name, last_name; 'comedy' is a name of a category;"}
{"sample_id": 9278, "db_id": "movie_3", "final": {"question": "What percentage of films with a length of less than 100 belong to the Drama category?", "sql": "SELECT CAST(SUM(IIF(T2.length < 100 AND T3.name = 'Drama', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id", "source_tables": ["category", "film_category", "film"]}, "evidence": "Drama' is a name of a category; calculation = DIVIDE(SUM(length < 100 AND name = 'Drama'), COUNT(film_id)) * 100"}
{"sample_id": 9369, "db_id": "movie_3", "final": {"question": "How long did Austin Cintron take to return the movie 'Destiny Saturday'?", "sql": "SELECT T2.rental_date - T2.return_date FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'AUSTIN' AND T4.title = 'DESTINY SATURDAY'", "source_tables": ["inventory", "customer", "rental", "film"]}, "evidence": "'Destiny Saturday' refers to title = 'DESTINY SATURDAY'; length = subtract(return_date, rental_date)"}
{"sample_id": 9253, "db_id": "movie_3", "final": {"question": "Find and list the full name of customers who rented more family movies than Sci-Fi movies.", "sql": "SELECT DISTINCT IIF(SUM(IIF(T5.name = 'Family', 1, 0)) - SUM(IIF(T5.name = 'Sci-Fi', 1, 0)) > 0, T1.first_name, 0) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film_category AS T4 ON T4.film_id = T3.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id GROUP BY T1.customer_id", "source_tables": ["film_category", "rental", "inventory", "customer", "category"]}, "evidence": "full name refers to first_name, last_name; 'family' AND 'Sci-Fi' are names of the category; customers who rented more family movies than Sci-Fi movies refers to count(name = 'Family') > count(name = 'Sci-Fi')"}
{"sample_id": 9191, "db_id": "movie_3", "final": {"question": "How many times was \"Blanket Beverly\" rented?", "sql": "SELECT COUNT(T3.rental_id) FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.title = 'Blanket Beverly'", "source_tables": ["inventory", "rental", "film"]}, "evidence": "\"BLANKET BEVERLY\" is the title of film; rented times refers to count(rental_id)"}
{"sample_id": 9111, "db_id": "movie_3", "final": {"question": "Please list the titles of all the films starring the actor PENELOPE GUINESS.", "sql": "SELECT T2.title FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = 'PENELOPE' AND T3.last_name = 'GUINESS'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": ""}
{"sample_id": 9372, "db_id": "movie_3", "final": {"question": "Calculate the total amount paid by Stephanie Mitchell for film rentals in June 2005.", "sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'STEPHANIE' AND T2.last_name = 'MITCHELL' AND SUBSTR(T1.payment_date, 1, 7) = '2005-06'", "source_tables": ["payment", "customer"]}, "evidence": "the total amount = sum(amount); in June 2005 refers to payment_date like '2005-06%'"}
{"sample_id": 9156, "db_id": "movie_3", "final": {"question": "Give the address location of Heather Morris.", "sql": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'HEATHER' AND T2.last_name = 'MORRIS'", "source_tables": ["customer", "address"]}, "evidence": "address location refers to address"}
{"sample_id": 9124, "db_id": "movie_3", "final": {"question": "Among the films that the customer RUTH MARTINEZ has rented, how many of them are released in 2006?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T4.release_year = 2006 AND T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'", "source_tables": ["inventory", "customer", "rental", "film"]}, "evidence": "release in 2006 refers to release_year = 2006"}
{"sample_id": 9210, "db_id": "movie_3", "final": {"question": "List the films' titles which were rented by Brian Wyman in July, 2005.", "sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'BRIAN' AND T1.last_name = 'WYMAN' AND STRFTIME('%Y', T2.rental_date) = '2005' AND STRFTIME('%m',T2.rental_date) = '7'", "source_tables": ["inventory", "customer", "rental", "film"]}, "evidence": "rented in July 2005 refers to year (rental_date) = 2005 and month (rental_date) = 7"}
{"sample_id": 9236, "db_id": "movie_3", "final": {"question": "Among the films starred by Nick Wahlberg, what is the percentage of the films with G rating?", "sql": "SELECT CAST(SUM(IIF(T3.rating = 'G', 1, 0)) AS REAL) / COUNT(T3.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Elvis' AND T1.last_name = 'Marx'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "'Nick Wahlberg' is a full name of an actor; full name refers to first_name, last_name; G rating refers to rating = 'G'; calculation = DIVIDE(SUM(rating = 'G'), SUM(rating)) * 100"}
{"sample_id": 9127, "db_id": "movie_3", "final": {"question": "How many films rented to the customer RUTH MARTINEZ were returned in August, 2005?", "sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ' AND STRFTIME('%m',T2.return_date) = '8' AND STRFTIME('%Y', T2.return_date) = '2005'", "source_tables": ["customer", "rental"]}, "evidence": "returned in August, 2005 refers to year(return_date) = 2005 and month (return_date) = 8"}
{"sample_id": 9109, "db_id": "movie_3", "final": {"question": "What is the language of the film ACADEMY DINOSAUR?", "sql": "SELECT T2.name FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'ACADEMY DINOSAUR'", "source_tables": ["language", "film"]}, "evidence": "\"ACADEMY DINOSAUR\" is the title of film; language refers to language.name"}
{"sample_id": 9367, "db_id": "movie_3", "final": {"question": "Determine the number of action movies available for rent.", "sql": "SELECT COUNT(T2.film_id) FROM category AS T1 INNER JOIN film_category AS T2 ON T1.category_id = T2.category_id WHERE T1.name = 'Action'", "source_tables": ["category", "film_category"]}, "evidence": "action movie refers to category.name = 'Action'"}
{"sample_id": 9384, "db_id": "movie_3", "final": {"question": "List all the cities that belong to United Arab Emirates.", "sql": "SELECT T1.city FROM city AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE country = 'United Arab Emirates'", "source_tables": ["city", "country"]}, "evidence": "United Arab Emirates refers to country = 'United Arab Emirates'"}
{"sample_id": 9140, "db_id": "movie_3", "final": {"question": "State the number of addresses in the Nordrhein-Westfalen district.", "sql": "SELECT COUNT(address_id) FROM address WHERE district = 'Nordrhein-Westfalen'", "source_tables": ["address"]}, "evidence": "number of address refers to address_id"}
{"sample_id": 9120, "db_id": "movie_3", "final": {"question": "How many films are there under the category of \"Horror\"?", "sql": "SELECT COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id WHERE T2.name = 'Horror'", "source_tables": ["category", "film_category"]}, "evidence": "\"Horror\" is the name of category"}
{"sample_id": 9185, "db_id": "movie_3", "final": {"question": "What is the complete address of store id 1?", "sql": "SELECT T3.address, T3.address2, T3.district FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN store AS T4 ON T3.address_id = T4.address_id WHERE T4.store_id = 1", "source_tables": ["city", "store", "address", "country"]}, "evidence": "complete address refers to address, address2, district"}
{"sample_id": 9132, "db_id": "movie_3", "final": {"question": "Among all the films starring PENELOPE GUINESS, what is the title of the one with the highest rental price per day?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.rental_rate / T3.rental_duration DESC LIMIT 1", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "highest rental price per day refers to Max(Divide(rental_rate, rental_duration))"}
{"sample_id": 9373, "db_id": "movie_3", "final": {"question": "What is the average replacement cost for the movies with a rental rate of 4.99?", "sql": "SELECT AVG(replacement_cost) FROM film WHERE rental_rate = 4.99", "source_tables": ["film"]}, "evidence": "a rental rate of 4.99 refers to rental_rate = 4.99; average replacement cost = avg(replacement_cost)"}
{"sample_id": 9276, "db_id": "movie_3", "final": {"question": "What is the average rental payment in Horror movies?", "sql": "SELECT AVG(T5.amount) FROM category AS T1 INNER JOIN film_category AS T2 ON T1.category_id = T2.category_id INNER JOIN inventory AS T3 ON T2.film_id = T3.film_id INNER JOIN rental AS T4 ON T3.inventory_id = T4.inventory_id INNER JOIN payment AS T5 ON T4.rental_id = T5.rental_id WHERE T1.name = 'Horror'", "source_tables": ["rental", "film_category", "payment", "inventory", "category"]}, "evidence": "'Horror' is a name of a category; average rental payment refers to AVG(amount)"}
{"sample_id": 9337, "db_id": "movie_3", "final": {"question": "What is the language for film titled \"CHILL LUCK\"?", "sql": "SELECT T2.\"name\" FROM film AS T1 INNER JOIN \"language\" AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'CHILL LUCK'", "source_tables": ["language", "film"]}, "evidence": ""}
{"sample_id": 9186, "db_id": "movie_3", "final": {"question": "How many customers are from the city of Lethbridge?", "sql": "SELECT COUNT(T3.customer_id) FROM city AS T1 INNER JOIN address AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE T1.city = 'Lethbridge'", "source_tables": ["city", "customer", "address"]}, "evidence": "customer refers to customer_id"}
{"sample_id": 9158, "db_id": "movie_3", "final": {"question": "How much money did the customer No.297 pay for the rental which happened at 12:27:27 on 2005/7/28?", "sql": "SELECT T1.amount FROM payment AS T1 INNER JOIN rental AS T2 ON T1.rental_id = T2.rental_id WHERE T2.rental_date = '2005-07-28 12:27:27' AND T2.customer_id = 297", "source_tables": ["payment", "rental"]}, "evidence": "customer no. 297 refers to customer_id = 297; at 12:27:27 on 2005/7/28 refers to rental_date = '2005-07-28 12:27:27'; money pay for rent refers to amount"}
{"sample_id": 9415, "db_id": "movie_3", "final": {"question": "How many times has Mary Smith rented a film?", "sql": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH'", "source_tables": ["payment", "customer"]}, "evidence": ""}
{"sample_id": 9151, "db_id": "movie_3", "final": {"question": "Give the name of the manager staff for store No.1.", "sql": "SELECT T1.first_name, T1.last_name FROM staff AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id WHERE T2.store_id = 1", "source_tables": ["store", "staff"]}, "evidence": "store no. 1 refers to store_id = 1; name refers to first_name, last_name"}
{"sample_id": 9224, "db_id": "movie_3", "final": {"question": "Give the title of the film starred by Liza Bergman with the highest replacement cost.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Liza' AND T1.last_name = 'Bergman' ORDER BY replacement_cost DESC LIMIT 1", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "Liza Bergman' is a full name; full name refers to first_name, last_name; highest replacement cost refers to MAX(replacement_cost)"}
{"sample_id": 9393, "db_id": "movie_3", "final": {"question": "Which category is the film \"Beach Heartbreakers\" falls into?", "sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'BEACH HEARTBREAKERS'", "source_tables": ["category", "film_category", "film"]}, "evidence": "category refers to name; film \"Beach Heartbreakers\" refers to title = 'BEACH HEARTBREAKERS'"}
{"sample_id": 9407, "db_id": "movie_3", "final": {"question": "What is the postal code of the address 692 Joliet Street?", "sql": "SELECT postal_code FROM address WHERE address = '692 Joliet Street'", "source_tables": ["address"]}, "evidence": ""}
{"sample_id": 9350, "db_id": "movie_3", "final": {"question": "List down all film titles starred by Jane Jackman.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T3.first_name = 'JANE' AND T3.last_name = 'JACKMAN'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": ""}
{"sample_id": 9383, "db_id": "movie_3", "final": {"question": "List at least 10 films that the customers can rent for more than 5 days.", "sql": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.customer_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.rental_duration > 5 GROUP BY T1.title ) AS T WHERE T.num > 10", "source_tables": ["inventory", "rental", "film"]}, "evidence": "film refers to title; rent for more than 5 days refers to rental_duration > 5"}
{"sample_id": 9171, "db_id": "movie_3", "final": {"question": "How much is the total rental payment for the first 10 rentals?", "sql": "SELECT SUM(amount) FROM payment WHERE rental_id BETWEEN 1 AND 10", "source_tables": ["payment"]}, "evidence": "first 10 rental refers to rental id between 1 and 10; total rental payment refers to sum(amount)"}
{"sample_id": 9314, "db_id": "movie_3", "final": {"question": "Which actor acted in the most films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, SUM(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "actor"]}, "evidence": "actor refers to first_name, last_name; the most film refers to MAX(SUM(film_id))"}
{"sample_id": 9231, "db_id": "movie_3", "final": {"question": "What is the inventory ID of the films starred by Russell Close with a duration between 110 to 150 minutes?", "sql": "SELECT T4.inventory_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length BETWEEN 110 AND 150 AND T1.first_name = 'Russell' AND T1.last_name = 'Close'", "source_tables": ["film_actor", "inventory", "actor", "film"]}, "evidence": "'Russell Close' is a full name of an actor; full name refers to first_name, last_name; duration between 110 to 150 minutes refers to length BETWEEN 110 AND 150"}
{"sample_id": 9176, "db_id": "movie_3", "final": {"question": "List the name of the films that can only be found in store id 2.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2", "source_tables": ["inventory", "film"]}, "evidence": "name of film refers to title"}
{"sample_id": 9281, "db_id": "movie_3", "final": {"question": "Please list three types of film along with their IDs and the latest update.", "sql": "SELECT DISTINCT name, category_id, last_update FROM category LIMIT 3", "source_tables": ["category"]}, "evidence": "types of film refers to the name of a category; IDs refers to category_id; latest update refers to last_update."}
{"sample_id": 9361, "db_id": "movie_3", "final": {"question": "Tell me the title of the film in which Sandra Kilmer is one of the actors.", "sql": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'SANDRA' AND T2.last_name = 'KILMER'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": ""}
{"sample_id": 9198, "db_id": "movie_3", "final": {"question": "Calculate the average payment amount per customer.", "sql": "SELECT AVG(amount) FROM payment GROUP BY customer_id", "source_tables": ["payment"]}, "evidence": "average payment refers to AVG(amount)"}
{"sample_id": 9173, "db_id": "movie_3", "final": {"question": "Who is the staff manager in store id 2?", "sql": "SELECT manager_staff_id FROM store WHERE store_id = 2", "source_tables": ["store"]}, "evidence": "staff manager refers to manager_staff_id"}
{"sample_id": 9131, "db_id": "movie_3", "final": {"question": "Which customer has rented more movies, RUTH MARTINEZ or LINDA WILLIAMS?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE (T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ') OR (T1.first_name = 'LINDA' AND T1.last_name = 'WILLIAMS') GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["customer", "rental"]}, "evidence": "rented more movie Max(Count(customer_id)); \"RUTH MARTINEZ\" and \"LINDA WILLIAMS\" are both full name of customer"}
{"sample_id": 9292, "db_id": "movie_3", "final": {"question": "How many English films have a duration of over 50 minutes and the cost of replacement are under 10.99?", "sql": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English' AND T1.length > 50 AND T1.replacement_cost < 10.99", "source_tables": ["language", "film"]}, "evidence": "English is a name of a language; duration of over 50 minutes refers to length > 50; cost of replacement are under 10.99 refers to replacement_cost < 10.99"}
{"sample_id": 9126, "db_id": "movie_3", "final": {"question": "Please list the full names of all the customers who have rented the film with the highest replacement cost.", "sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id ORDER BY T4.replacement_cost DESC LIMIT 1", "source_tables": ["inventory", "customer", "rental", "film"]}, "evidence": "full name refers to first_name, last_name; highest replacement cost refers to Max(replacement_cost)"}
{"sample_id": 9395, "db_id": "movie_3", "final": {"question": "Who among the actors starred in a NC-17 rated film? Provide only the last name of the actors.", "sql": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'NC-17'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "NC-17 rated refers to rating = 'NC-17'"}
{"sample_id": 9341, "db_id": "movie_3", "final": {"question": "List down all ratings of action film titles.", "sql": "SELECT T1.description FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'action'", "source_tables": ["category", "film_category", "film"]}, "evidence": "for General Audiences means rating = 'G'; Parental Guidance Suggested means rating = 'PG'; Parents Strongly Cautioned means rating = 'PG-13'; Restricted means rating = 'R'; Adults Only means rating = 'NC-17'; action film refers to category.name = 'action'"}
{"sample_id": 9254, "db_id": "movie_3", "final": {"question": "Indicate the title of all the films rated as 'Adults Only'.", "sql": "SELECT title FROM film WHERE rating = 'NC-17'", "source_tables": ["film"]}, "evidence": "'Adults Only' refers to rating = 'NC-17'"}
{"sample_id": 9225, "db_id": "movie_3", "final": {"question": "Among films with store ID of 2, list the title of films with the highest rental rate.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2 ORDER BY rental_rate DESC LIMIT 1", "source_tables": ["inventory", "film"]}, "evidence": "highest rental rate refers to MAX(rental_rate)"}
{"sample_id": 9335, "db_id": "movie_3", "final": {"question": "Which film titles have the most expensive rental rate?", "sql": "SELECT title FROM film WHERE rental_rate = ( SELECT MAX(rental_rate) FROM film )", "source_tables": ["film"]}, "evidence": "the most expensive rental rate refers to max(rental_rate)"}
{"sample_id": 9152, "db_id": "movie_3", "final": {"question": "State the address location of store No.1.", "sql": "SELECT T1.address, T1.address2, T1.district FROM address AS T1 INNER JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 1", "source_tables": ["store", "address"]}, "evidence": "store no. 1 refers to store_id = 1; address location refers to address, address2, district"}
{"sample_id": 9397, "db_id": "movie_3", "final": {"question": "How many films have a duration between 100 to 110 minutes?", "sql": "SELECT COUNT(film_id) FROM film WHERE length BETWEEN 100 AND 110", "source_tables": ["film"]}, "evidence": "duration between 100 to 110 minutes refers to length between 100 and 110"}
{"sample_id": 9299, "db_id": "movie_3", "final": {"question": "What is the most common first name among the customers?", "sql": "SELECT first_name FROM customer GROUP BY first_name ORDER BY COUNT(first_name) DESC LIMIT 1", "source_tables": ["customer"]}, "evidence": "the most common first name refers to MAX(COUNT(first_name))"}
{"sample_id": 9280, "db_id": "movie_3", "final": {"question": "What are the address numbers that are located in Gansu district?", "sql": "SELECT address_id FROM address WHERE district = 'Gansu'", "source_tables": ["address"]}, "evidence": "address numbers refers to address_id;"}
{"sample_id": 9107, "db_id": "movie_3", "final": {"question": "In which year was the film with the highest replacement cost released?", "sql": "SELECT DISTINCT release_year FROM film WHERE replacement_cost = ( SELECT MAX(replacement_cost) FROM film )", "source_tables": ["film"]}, "evidence": "highest replacement_cost refers to Max (replacement_cost); year refers to release_year"}
{"sample_id": 9249, "db_id": "movie_3", "final": {"question": "Find and list the full name of customers who rented more than five types of movies.", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T1.customer_id) AS num FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id INNER JOIN film_category AS T5 ON T4.film_id = T5.film_id GROUP BY T1.first_name, T1.last_name ) AS T WHERE T.num > 5", "source_tables": ["film_category", "rental", "film", "inventory", "customer"]}, "evidence": "full name refers to first_name, last_name; types of movies means category of movies; \nrented more than five types of movies refers to COUNT(film_category) > 5"}
{"sample_id": 9234, "db_id": "movie_3", "final": {"question": "In films with rental rate of 4.99, list down the inventory ID of the films starred by Lucille Dee.", "sql": "SELECT T4.inventory_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'Lucille' AND T1.last_name = 'Dee' AND T3.rental_rate = 4.99", "source_tables": ["film_actor", "inventory", "actor", "film"]}, "evidence": "'Lucille Dee' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9108, "db_id": "movie_3", "final": {"question": "Please list the titles of the top 3 films with the highest replacement cost.", "sql": "SELECT title FROM film WHERE replacement_cost = ( SELECT MAX(replacement_cost) FROM film ) LIMIT 3", "source_tables": ["film"]}, "evidence": "highest replacement_cost refers to Max (replacement_cost); film refers to title"}
{"sample_id": 9364, "db_id": "movie_3", "final": {"question": "Name the cast members of the movie 'African Egg'.", "sql": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'AFRICAN EGG'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "cast member name refers to first_name, last_name; 'African Egg' refers to title = 'AFRICAN EGG'"}
{"sample_id": 9313, "db_id": "movie_3", "final": {"question": "What is the city with the most customers?", "sql": "SELECT T.city FROM ( SELECT T1.city, COUNT(T3.customer_id) AS num FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id GROUP BY T1.city ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["city", "customer", "address"]}, "evidence": "the most customers refers to MAX(COUNT(customer_id))"}
{"sample_id": 9274, "db_id": "movie_3", "final": {"question": "What is the title of the animated films that have the shortest length?", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id ORDER BY T1.length LIMIT 1", "source_tables": ["category", "film_category", "film"]}, "evidence": "animated film means animation; animation is a name of a category"}
{"sample_id": 9294, "db_id": "movie_3", "final": {"question": "Please list any two films that Penelope Guiness acted in.", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Penelope' AND T1.last_name = 'Guiness' LIMIT 2", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "film refers to title of the film; 'Penelope Guiness' is a full name of an actor; full name refers to first_name, last_name"}
{"sample_id": 9344, "db_id": "movie_3", "final": {"question": "What is the category of film titled \"BLADE POLISH\"?", "sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1.title = 'BLADE POLISH'", "source_tables": ["category", "film_category", "film"]}, "evidence": ""}
{"sample_id": 9356, "db_id": "movie_3", "final": {"question": "What is the title of the restricted film, whose length is 71 minutes and whose replacement cost is $29.99?", "sql": "SELECT title FROM film WHERE replacement_cost = 29.99 AND rating = 'R' AND length = 71", "source_tables": ["film"]}, "evidence": "restricted means rating = 'R'; length is 71 minutes refers to length = 71; replacement cost is $29.99 refers to replacement_cost = 29.99"}
{"sample_id": 9116, "db_id": "movie_3", "final": {"question": "Please list the full names of all the actors that have starred in the film with the highest replacement cost.", "sql": "SELECT first_name, last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id ORDER BY T3.replacement_cost DESC LIMIT 1", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "highest replacement cost refers to Max (replacement_cost); full name refers to first_name, last_name"}
{"sample_id": 9161, "db_id": "movie_3", "final": {"question": "State the name of the category which has the most number of films.", "sql": "SELECT T.name FROM ( SELECT T2.name, COUNT(T1.film_id) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["category", "film_category"]}, "evidence": "category refers to name; most number of films refers to Max(Count(film_id))"}
{"sample_id": 9237, "db_id": "movie_3", "final": {"question": "List the address in Texas in the ascending order of city id.", "sql": "SELECT address FROM address WHERE district = 'Texas' AND city_id = ( SELECT MIN(city_id) FROM address WHERE district = 'Texas' )", "source_tables": ["address"]}, "evidence": "'Texas' is a district"}
{"sample_id": 9217, "db_id": "movie_3", "final": {"question": "Provide the email, address, city, and country of the customer Lillie Kim.", "sql": "SELECT T1.email, T2.address, T3.city, T4.country FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T2.city_id = T3.city_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id WHERE T1.first_name = 'Lillie' AND T1.last_name = 'Kim'", "source_tables": ["address", "city", "customer", "country"]}, "evidence": "'Lillie Kim' is the full name of a customer; full name refers to first_name, last_name"}
{"sample_id": 9381, "db_id": "movie_3", "final": {"question": "How many customers are still active?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 1", "source_tables": ["customer"]}, "evidence": "active refers to active = 1"}
{"sample_id": 9396, "db_id": "movie_3", "final": {"question": "Calculate the average rate of renting the film that Lucille Tracy got starred.", "sql": "SELECT AVG(T3.rental_rate) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'LUCILLE' AND T1.last_name = 'TRACY'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "average rate = divide(sum(rental_rate), count(film_id))"}
{"sample_id": 9106, "db_id": "movie_3", "final": {"question": "Please give the full names of all the active staff.", "sql": "SELECT first_name, last_name FROM staff WHERE active = 1", "source_tables": ["staff"]}, "evidence": "full name refers to first_name, last_name; active staff refers to active = 1"}
{"sample_id": 9181, "db_id": "movie_3", "final": {"question": "What is the full name of the actor who starred in most movies?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, COUNT(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "actor"]}, "evidence": "full name refers to first_name, last_name; actor who starred in the most movies refers to actor_id where Max(Count(film_id))"}
{"sample_id": 9245, "db_id": "movie_3", "final": {"question": "Give the full name of the actor who acted the most in drama movies?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film_category AS T3 ON T2.film_id = T3.film_id WHERE T3.category_id = 7 GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "film_category", "actor"]}, "evidence": "full name refers to first_name, last_name; drama is a category of a film; acted the most in a movies refers to MAX(COUNT(film_id))"}
{"sample_id": 9209, "db_id": "movie_3", "final": {"question": "List the films' titles which were rented on 24th May,2005.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE SUBSTR(T3.rental_date, 1, 10) = '2005-05-24'", "source_tables": ["inventory", "rental", "film"]}, "evidence": "rented on 24th May 2005 refers to rental_date = '2005-05-24%'"}
{"sample_id": 9329, "db_id": "movie_3", "final": {"question": "Calculate the total payment amount of customers in Nagasaki district.", "sql": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id WHERE T3.district = 'Nagasaki'", "source_tables": ["payment", "address", "customer"]}, "evidence": "the total payment amount refers to sum(amount)"}
{"sample_id": 9408, "db_id": "movie_3", "final": {"question": "How many customers are active?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 1", "source_tables": ["customer"]}, "evidence": "active refers to active = 1"}
{"sample_id": 9414, "db_id": "movie_3", "final": {"question": "What is the biggest amount of payment for a rental made by Mary Smith?", "sql": "SELECT T1.amount FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' ORDER BY T1.amount DESC LIMIT 1", "source_tables": ["payment", "customer"]}, "evidence": "the biggest amount refers to max(amount)"}
{"sample_id": 9148, "db_id": "movie_3", "final": {"question": "The actor Dan Harris played in a 77 minute film with replacement cost of 9.99, what was the rating for that film?", "sql": "SELECT T3.rating FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'DAN' AND T1.last_name = 'HARRIS' AND T3.length = 77 AND T3.replacement_cost = '9.99'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "77 min film refers to length = 77"}
{"sample_id": 9206, "db_id": "movie_3", "final": {"question": "Distinguish the films performed by Judy Dean according to category.", "sql": "SELECT T5.name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN film_category AS T4 ON T2.film_id = T4.film_id INNER JOIN category AS T5 ON T4.category_id = T5.category_id WHERE T1.first_name = 'Judy' AND T1.last_name = 'Dean'", "source_tables": ["film_category", "film", "category", "film_actor", "actor"]}, "evidence": "films performed refers to film"}
{"sample_id": 9412, "db_id": "movie_3", "final": {"question": "Please list the full names of all the customers who live in Italy.", "sql": "SELECT T4.first_name, T4.last_name FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id WHERE T3.country = 'Italy'", "source_tables": ["city", "customer", "address", "country"]}, "evidence": "full name refers to first_name, last_name; Italy refers to country = 'Italy'"}
{"sample_id": 9257, "db_id": "movie_3", "final": {"question": "How many payments were made throughout the month of August 2005?", "sql": "SELECT SUM(amount) FROM payment WHERE payment_date LIKE '2005-08%'", "source_tables": ["payment"]}, "evidence": "payments made refers to amount; throughout the month of August 2005 refers to payment_date like '2005-08%'"}
{"sample_id": 9325, "db_id": "movie_3", "final": {"question": "List movie titles with duration over 120 minutes that are in the action category.", "sql": "SELECT T1.title FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T3.\"name\" = 'action' AND T1.length > 120", "source_tables": ["category", "film_category", "film"]}, "evidence": "duration over 120 minutes refers to length > 120; action category refers to category.name = 'action'"}
{"sample_id": 9363, "db_id": "movie_3", "final": {"question": "Give me the title and category name of films whose price per day is more than $30. Please include their special features.", "sql": "SELECT T1.title, T3.name, T1.special_features FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.rental_duration * T1.rental_rate > 30", "source_tables": ["category", "film_category", "film"]}, "evidence": "category name refers to category.name; price per day is more than $30 refers to multiply(rental_duration, rental_rate) > 30"}
{"sample_id": 9175, "db_id": "movie_3", "final": {"question": "What are the names of the movies which Laura Brody starred in?", "sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Laura' AND T1.last_name = 'Brody'", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "name of movie refers to title"}
{"sample_id": 9192, "db_id": "movie_3", "final": {"question": "What is the full name of the actor who has the highest number of restricted films?", "sql": "SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, COUNT(T2.film_id) AS num FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'R' GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["film_actor", "actor", "film"]}, "evidence": "restricted refers to rating = 'R'; highest number of film refers to Max(Count(film_id)); full name refers to first_name, last_name"}
{"sample_id": 9130, "db_id": "movie_3", "final": {"question": "Which film is rented for the most times by the customers? Please give its title.", "sql": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.rental_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T1.title ) AS T ORDER BY T.num DESC LIMIT 1", "source_tables": ["inventory", "rental", "film"]}, "evidence": "film refers to title; film rented the most times refers to title where Max(Count(rental_id))"}
{"sample_id": 9328, "db_id": "movie_3", "final": {"question": "List the descriptions of movies under the category Travel.", "sql": "SELECT T1.description FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.\"name\" = 'Travel'", "source_tables": ["category", "film_category", "film"]}, "evidence": "the category Travel refers to category.name = 'Travel'"}
{"sample_id": 9399, "db_id": "movie_3", "final": {"question": "Among the active customers, how many of them have Nina as their first name?", "sql": "SELECT COUNT(customer_id) FROM customer WHERE first_name = 'Nina' AND active = 1", "source_tables": ["customer"]}, "evidence": "active refers to active = 1"}
{"sample_id": 9454, "db_id": "california_schools", "final": {"question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?", "sql": "SELECT CAST(T1.\"FRPM Count (K-12)\" AS REAL) / T1.\"Enrollment (K-12)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.\"FRPM Count (K-12)\" DESC LIMIT 5", "source_tables": ["schools", "frpm"]}, "evidence": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`"}
{"sample_id": 9436, "db_id": "california_schools", "final": {"question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.", "sql": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.\"Enrollment (Ages 5-17)\" DESC LIMIT 5", "source_tables": ["schools", "frpm"]}, "evidence": ""}
{"sample_id": 9441, "db_id": "california_schools", "final": {"question": "What is the phone number of the school that has the highest average score in Math?", "sql": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9469, "db_id": "california_schools", "final": {"question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?", "sql": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'", "source_tables": ["schools"]}, "evidence": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12"}
{"sample_id": 9496, "db_id": "california_schools", "final": {"question": "What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 0613360?", "sql": "SELECT MIN(T1.\"Low Grade\") FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'", "source_tables": ["schools", "frpm"]}, "evidence": "District Special Education Consortia School refers to EdOpsCode = 'SPECON'."}
{"sample_id": 9443, "db_id": "california_schools", "final": {"question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?", "sql": "SELECT COUNT(CDSCode) FROM frpm WHERE \"County Name\" = 'Los Angeles' AND \"Free Meal Count (K-12)\" > 500 AND \"FRPM Count (K-12)\"< 700", "source_tables": ["frpm"]}, "evidence": ""}
{"sample_id": 9435, "db_id": "california_schools", "final": {"question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.", "sql": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3", "source_tables": ["schools", "satscores"]}, "evidence": "Excellence rate = NumGE1500 / NumTstTakr"}
{"sample_id": 9448, "db_id": "california_schools", "final": {"question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?", "sql": "SELECT T1.\"School Name\", T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.\"Free Meal Count (Ages 5-17)\" > 800 AND T1.\"School Type\" = 'High Schools (Public)'", "source_tables": ["schools", "frpm"]}, "evidence": "Full communication address should include Street, City, State and zip code if any."}
{"sample_id": 9456, "db_id": "california_schools", "final": {"question": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?", "sql": "SELECT CAST(T2.\"Free Meal Count (Ages 5-17)\" AS REAL) / T2.\"Enrollment (Ages 5-17)\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'", "source_tables": ["schools", "frpm"]}, "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"}
{"sample_id": 9471, "db_id": "california_schools", "final": {"question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.", "sql": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL", "source_tables": ["schools"]}, "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType."}
{"sample_id": 9492, "db_id": "california_schools", "final": {"question": "How many active and closed District Community Day Schools are there in the county of Alpine?", "sql": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9423, "db_id": "california_schools", "final": {"question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.", "sql": "SELECT \"Free Meal Count (Ages 5-17)\" / \"Enrollment (Ages 5-17)\" FROM frpm WHERE \"Educational Option Type\" = 'Continuation School' AND \"Free Meal Count (Ages 5-17)\" / \"Enrollment (Ages 5-17)\" IS NOT NULL ORDER BY \"Free Meal Count (Ages 5-17)\" / \"Enrollment (Ages 5-17)\" ASC LIMIT 3", "source_tables": ["frpm"]}, "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"}
{"sample_id": 9510, "db_id": "california_schools", "final": {"question": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.", "sql": "SELECT T2.AdmEmail1, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9490, "db_id": "california_schools", "final": {"question": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?", "sql": "SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1", "source_tables": ["schools"]}, "evidence": "Youth Authority Facilities (CEA) refers to SOC = 11; 1980s = years between 1980 and 1989"}
{"sample_id": 9509, "db_id": "california_schools", "final": {"question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?", "sql": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62", "source_tables": ["schools", "frpm"]}, "evidence": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'"}
{"sample_id": 9449, "db_id": "california_schools", "final": {"question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.", "sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'", "source_tables": ["schools", "satscores"]}, "evidence": "Communication number refers to phone number."}
{"sample_id": 9426, "db_id": "california_schools", "final": {"question": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.", "sql": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"Charter Funding Type\" = 'Directly funded' AND T1.\"Charter School (Y/N)\" = 1 AND T2.OpenDate > '2000-01-01'", "source_tables": ["schools", "frpm"]}, "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the frpm"}
{"sample_id": 9462, "db_id": "california_schools", "final": {"question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?", "sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": "Fresno Unified is a name of district;"}
{"sample_id": 9434, "db_id": "california_schools", "final": {"question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?", "sql": "SELECT MAX(CAST(T1.\"Free Meal Count (Ages 5-17)\" AS REAL) / T1.\"Enrollment (Ages 5-17)\") FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3", "source_tables": ["satscores", "frpm"]}, "evidence": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`"}
{"sample_id": 9487, "db_id": "california_schools", "final": {"question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?", "sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1", "source_tables": ["schools"]}, "evidence": "Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%"}
{"sample_id": 9425, "db_id": "california_schools", "final": {"question": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?", "sql": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.\"FRPM Count (K-12)\" DESC LIMIT 1", "source_tables": ["schools", "frpm"]}, "evidence": ""}
{"sample_id": 9474, "db_id": "california_schools", "final": {"question": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?", "sql": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500", "source_tables": ["schools", "satscores"]}, "evidence": "Total SAT scores can be computed by AvgScrRead + AvgScrMath + AvgScrWrite"}
{"sample_id": 9463, "db_id": "california_schools", "final": {"question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.", "sql": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5", "source_tables": ["schools", "satscores"]}, "evidence": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County"}
{"sample_id": 9430, "db_id": "california_schools", "final": {"question": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?", "sql": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY \"FRPM Count (K-12)\" DESC LIMIT 1 )", "source_tables": ["satscores", "frpm"]}, "evidence": ""}
{"sample_id": 9488, "db_id": "california_schools", "final": {"question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?", "sql": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'", "source_tables": ["schools"]}, "evidence": "Directly funded schools refers to FundingType = 'Directly Funded'"}
{"sample_id": 9504, "db_id": "california_schools", "final": {"question": "What is the grade span offered in the school with the highest longitude?", "sql": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1", "source_tables": ["schools"]}, "evidence": "the highest longitude refers to the school with the maximum absolute longitude value."}
{"sample_id": 9447, "db_id": "california_schools", "final": {"question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?", "sql": "SELECT T1.sname, T2.\"Charter Funding Type\" FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.\"District Name\" LIKE 'Riverside%' GROUP BY T1.sname, T2.\"Charter Funding Type\" HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400", "source_tables": ["satscores", "frpm"]}, "evidence": "Average of average math = sum(average math scores) / count(schools)."}
{"sample_id": 9452, "db_id": "california_schools", "final": {"question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?", "sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.\"Enrollment (K-12)\") ASC LIMIT 5", "source_tables": ["schools", "frpm"]}, "evidence": "K-12 refers to students in grades 1 through 12."}
{"sample_id": 9502, "db_id": "california_schools", "final": {"question": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.", "sql": "SELECT T1.\"School Type\", T1.\"School Name\", T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1", "source_tables": ["schools", "frpm"]}, "evidence": ""}
{"sample_id": 9485, "db_id": "california_schools", "final": {"question": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs", "sql": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'", "source_tables": ["schools"]}, "evidence": "Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name"}
{"sample_id": 9501, "db_id": "california_schools", "final": {"question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.", "sql": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1", "source_tables": ["schools"]}, "evidence": "'Does not offer physical building' means Virtual = F in the database."}
{"sample_id": 9450, "db_id": "california_schools", "final": {"question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.", "sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.\"Enrollment (K-12)\" - T1.\"Enrollment (Ages 5-17)\") > (SELECT AVG(T3.\"Enrollment (K-12)\" - T3.\"Enrollment (Ages 5-17)\") FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')", "source_tables": ["schools", "frpm"]}, "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`"}
{"sample_id": 9506, "db_id": "california_schools", "final": {"question": "What are the two most common first names among the school administrators? Indicate the district to which they administer.", "sql": "SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9476, "db_id": "california_schools", "final": {"question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.", "sql": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9446, "db_id": "california_schools", "final": {"question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?", "sql": "SELECT T2.\"School Name\" FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.\"Free Meal Count (K-12)\" AS REAL) / T2.\"Enrollment (K-12)\" > 0.1 AND T1.NumGE1500 > 0", "source_tables": ["satscores", "frpm"]}, "evidence": "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)"}
{"sample_id": 9445, "db_id": "california_schools", "final": {"question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.", "sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.\"Enrollment (K-12)\" - T2.\"Enrollment (Ages 5-17)\" > 30", "source_tables": ["schools", "frpm"]}, "evidence": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`"}
{"sample_id": 9508, "db_id": "california_schools", "final": {"question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.", "sql": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9491, "db_id": "california_schools", "final": {"question": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.", "sql": "SELECT NCESDist FROM schools WHERE SOC = 31", "source_tables": ["schools"]}, "evidence": "State Special Schools means that SOC = 31."}
{"sample_id": 9422, "db_id": "california_schools", "final": {"question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?", "sql": "SELECT \"Free Meal Count (K-12)\" / \"Enrollment (K-12)\" FROM frpm WHERE \"County Name\" = 'Alameda' ORDER BY (CAST(\"Free Meal Count (K-12)\" AS REAL) / \"Enrollment (K-12)\") DESC LIMIT 1", "source_tables": ["frpm"]}, "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`"}
{"sample_id": 9507, "db_id": "california_schools", "final": {"question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.", "sql": "SELECT T1.\"Free Meal Count (K-12)\" * 100 / T1.\"Enrollment (K-12)\", T1.\"District Code\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'", "source_tables": ["schools", "frpm"]}, "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%"}
{"sample_id": 9489, "db_id": "california_schools", "final": {"question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?", "sql": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9478, "db_id": "california_schools", "final": {"question": "Of all the schools with a mailing state address in California, how many are active in San Joaquin city?", "sql": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9460, "db_id": "california_schools", "final": {"question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?", "sql": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9464, "db_id": "california_schools", "final": {"question": "What is the type of education offered in the school who scored the highest average in Math?", "sql": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9473, "db_id": "california_schools", "final": {"question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.", "sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9429, "db_id": "california_schools", "final": {"question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?", "sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9437, "db_id": "california_schools", "final": {"question": "Which active district has the highest average score in Reading?", "sql": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9427, "db_id": "california_schools", "final": {"question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?", "sql": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400", "source_tables": ["schools", "satscores"]}, "evidence": "Exclusively virtual refers to Virtual = 'F'"}
{"sample_id": 9486, "db_id": "california_schools", "final": {"question": "What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?", "sql": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'", "source_tables": ["schools"]}, "evidence": ""}
{"sample_id": 9479, "db_id": "california_schools", "final": {"question": "What is the phone number and extension number for the school that had the 333rd highest average writing score?", "sql": "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1", "source_tables": ["schools", "satscores"]}, "evidence": ""}
{"sample_id": 9472, "db_id": "california_schools", "final": {"question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.", "sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1", "source_tables": ["schools", "satscores"]}, "evidence": "Postal street and mailing street are synonyms."}
{"sample_id": 9497, "db_id": "california_schools", "final": {"question": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.", "sql": "SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"NSLP Provision Status\" = 'Breakfast Provision 2' AND T1.\"County Code\" = 37", "source_tables": ["schools", "frpm"]}, "evidence": ""}
{"sample_id": 9505, "db_id": "california_schools", "final": {"question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.", "sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.\"NSLP Provision Status\" = 'Multiple Provision Types' GROUP BY T2.City", "source_tables": ["schools", "frpm"]}, "evidence": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'"}
{"sample_id": 9522, "db_id": "financial", "final": {"question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?", "sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'", "source_tables": ["client", "district"]}, "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2"}
{"sample_id": 9609, "db_id": "financial", "final": {"question": "How many clients who choose statement of weekly issuance are Owner?", "sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'", "source_tables": ["account", "disp"]}, "evidence": "Frequency = 'POPLATEK TYDNE' refers to weekly issuance"}
{"sample_id": 9552, "db_id": "financial", "final": {"question": "How many of the account holders in South Bohemia still do not own credit cards?", "sql": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'", "source_tables": ["client", "disp", "district"]}, "evidence": "A3 contains the region names; South Bohemia is one of region names."}
{"sample_id": 9614, "db_id": "financial", "final": {"question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?", "sql": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'", "source_tables": ["account", "loan"]}, "evidence": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction"}
{"sample_id": 9545, "db_id": "financial", "final": {"question": "Provide the account ID, district and region for loan amount greater than USD300,000.", "sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000", "source_tables": ["account", "loan", "district"]}, "evidence": "A2 contains district names and A3 contains region names."}
{"sample_id": 9566, "db_id": "financial", "final": {"question": "How much is the average amount in credit card made by account holders in a month, in year 2021?", "sql": "SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'", "source_tables": ["trans", "account", "disp", "card"]}, "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawn"}
{"sample_id": 9517, "db_id": "financial", "final": {"question": "List out the account numbers of clients who are youngest and have highest average salary?", "sql": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id", "source_tables": ["client", "account", "disp", "district"]}, "evidence": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary"}
{"sample_id": 9533, "db_id": "financial", "final": {"question": "How many accounts were opened in Litomerice in 1996?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'", "source_tables": ["account", "district"]}, "evidence": "A2 refers to district name; Litomerice is one of district names."}
{"sample_id": 9548, "db_id": "financial", "final": {"question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.", "sql": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'", "source_tables": ["account", "district"]}, "evidence": "A2 contains the information about district."}
{"sample_id": 9519, "db_id": "financial", "final": {"question": "List out the id number of client who choose statement of issuance after transaction are Disponent?", "sql": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'", "source_tables": ["account", "disp"]}, "evidence": "'POPLATEK PO OBRATU' stands for issuance after transaction"}
{"sample_id": 9572, "db_id": "financial", "final": {"question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'", "source_tables": ["trans", "account", "district"]}, "evidence": "A3 contains the region names; North Bohemia is a region."}
{"sample_id": 9555, "db_id": "financial", "final": {"question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.", "sql": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1", "source_tables": ["district"]}, "evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996"}
{"sample_id": 9538, "db_id": "financial", "final": {"question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?", "sql": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'", "source_tables": ["trans", "account", "loan"]}, "evidence": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%"}
{"sample_id": 9550, "db_id": "financial", "final": {"question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.", "sql": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9", "source_tables": ["client", "district"]}, "evidence": "A2 refers to districts; Female refers to gender = 'F'"}
{"sample_id": 9577, "db_id": "financial", "final": {"question": "How many percent of 'Gold' cards were issued prior to 1998?", "sql": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card", "source_tables": ["card"]}, "evidence": "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%"}
{"sample_id": 9542, "db_id": "financial", "final": {"question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.", "sql": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'", "source_tables": ["account", "district"]}, "evidence": "Accounts holder refers to the person who own this account."}
{"sample_id": 9564, "db_id": "financial", "final": {"question": "Which accounts placed orders for household payment in Pisek?", "sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'", "source_tables": ["account", "trans", "district"]}, "evidence": "k_symbol = 'SIPO' refers to household payment"}
{"sample_id": 9611, "db_id": "financial", "final": {"question": "Name the account numbers of female clients who are oldest and have lowest average salary?", "sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1", "source_tables": ["client", "account", "disp", "district"]}, "evidence": "Female refers to 'F' in the gender; A11 contains information about average salary"}
{"sample_id": 9525, "db_id": "financial", "final": {"question": "Which client issued his/her card in 1994/3/3, give his/her client id.", "sql": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'", "source_tables": ["client", "disp", "card"]}, "evidence": ""}
{"sample_id": 9557, "db_id": "financial", "final": {"question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?", "sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'", "source_tables": ["account", "trans"]}, "evidence": "Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance"}
{"sample_id": 9511, "db_id": "financial", "final": {"question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'", "source_tables": ["account", "district"]}, "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'."}
{"sample_id": 9592, "db_id": "financial", "final": {"question": "How many credit card withdrawals were recorded after 1995?", "sql": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'", "source_tables": ["trans"]}, "evidence": "Operation = 'VYBER KARTOU' means credit card withdrawals"}
{"sample_id": 9573, "db_id": "financial", "final": {"question": "Please list the name of the districts with accounts that made withdrawal transactions.", "sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'", "source_tables": ["trans", "account", "district"]}, "evidence": "A2 refers to district name; type = 'VYDAJ' stands for withdrawal transactions"}
{"sample_id": 9590, "db_id": "financial", "final": {"question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?", "sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000", "source_tables": ["client", "district"]}, "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11"}
{"sample_id": 9606, "db_id": "financial", "final": {"question": "How many female customers have a junior credit card?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'", "source_tables": ["client", "disp", "card"]}, "evidence": "Female refers to gender = 'F'"}
{"sample_id": 9553, "db_id": "financial", "final": {"question": "Which district has highest active loan?", "sql": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1", "source_tables": ["account", "loan", "district"]}, "evidence": "A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt"}
{"sample_id": 9534, "db_id": "financial", "final": {"question": "For the female client who was born in 1976/1/29, which district did she opened her account?", "sql": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'", "source_tables": ["client", "district"]}, "evidence": "Female refers to gender = 'F'; A2 refers to district names"}
{"sample_id": 9602, "db_id": "financial", "final": {"question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.", "sql": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'", "source_tables": ["client", "account", "disp", "district"]}, "evidence": ""}
{"sample_id": 9569, "db_id": "financial", "final": {"question": "How many female clients' accounts are in the region of South Bohemia?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'", "source_tables": ["client", "district"]}, "evidence": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'"}
{"sample_id": 9615, "db_id": "financial", "final": {"question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.", "sql": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'", "source_tables": ["account", "disp", "district"]}, "evidence": "Only the owner accounts have the right to issue permanent orders or apply for loans"}
{"sample_id": 9544, "db_id": "financial", "final": {"question": "State the district and region for loan ID '4990'.", "sql": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990", "source_tables": ["account", "loan", "district"]}, "evidence": "A2, A3 contains the information about district and region respectively."}
{"sample_id": 9586, "db_id": "financial", "final": {"question": "Who placed the order with the id 32423?", "sql": "SELECT T3.client_id FROM \"order\" AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423", "source_tables": ["client", "order", "account", "disp"]}, "evidence": ""}
{"sample_id": 9560, "db_id": "financial", "final": {"question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)", "source_tables": ["client", "district"]}, "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995"}
{"sample_id": 9570, "db_id": "financial", "final": {"question": "Please list the accounts whose district is Tabor that are eligible for loans.", "sql": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'", "source_tables": ["account", "disp", "district"]}, "evidence": "District refers to column A2; when the account type = 'OWNER', it's eligible for loans"}
{"sample_id": 9543, "db_id": "financial", "final": {"question": "List account ID and account opening date for accounts from 'Prachatice'.", "sql": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'", "source_tables": ["account", "district"]}, "evidence": "A2 refers to the names of districts."}
{"sample_id": 9530, "db_id": "financial", "final": {"question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?", "sql": "SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1", "source_tables": ["trans", "account", "loan"]}, "evidence": ""}
{"sample_id": 9561, "db_id": "financial", "final": {"question": "How many high-level credit cards have \"OWNER\" type of disposition?", "sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'", "source_tables": ["disp", "card"]}, "evidence": "High-level credit cards refers to the cards with the gold type."}
{"sample_id": 9558, "db_id": "financial", "final": {"question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000", "source_tables": ["account", "loan"]}, "evidence": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance"}
{"sample_id": 9574, "db_id": "financial", "final": {"question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?", "sql": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000", "source_tables": ["account", "district"]}, "evidence": "A3 refers to region names; A15 stands for the average number of crimes commited in 1995."}
{"sample_id": 9523, "db_id": "financial", "final": {"question": "List out the accounts who have the earliest trading date in 1995 ?", "sql": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1", "source_tables": ["trans"]}, "evidence": ""}
{"sample_id": 9610, "db_id": "financial", "final": {"question": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.", "sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1", "source_tables": ["account", "loan"]}, "evidence": ""}
{"sample_id": 9589, "db_id": "financial", "final": {"question": "List all the clients' IDs whose junior credit cards were issued after 1996.", "sql": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'", "source_tables": ["disp", "card"]}, "evidence": "After 1996 means date > = '1997-01-01"}
{"sample_id": 9563, "db_id": "financial", "final": {"question": "Which districts have transactions greater than USS$10,000 in 1997?", "sql": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000", "source_tables": ["trans", "account", "district"]}, "evidence": ""}
{"sample_id": 9514, "db_id": "financial", "final": {"question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?", "sql": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000", "source_tables": ["client", "district"]}, "evidence": "A11 refers to average salary; Female mapps to gender = 'F'"}
{"sample_id": 9515, "db_id": "financial", "final": {"question": "How many male customers who are living in North Bohemia have average salary greater than 8000?", "sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000", "source_tables": ["client", "district"]}, "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary."}
{"sample_id": 9559, "db_id": "financial", "final": {"question": "How many accounts have running contracts in Branch location 1?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')", "source_tables": ["account", "loan", "district"]}, "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt"}
{"sample_id": 9512, "db_id": "financial", "final": {"question": "How many accounts who have region in Prague are eligible for loans?", "sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'", "source_tables": ["account", "loan", "district"]}, "evidence": "A3 contains the data of region"}
{"sample_id": 9582, "db_id": "financial", "final": {"question": "Among the weekly issuance accounts, how many have a loan of under 200000?", "sql": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000", "source_tables": ["account", "loan"]}, "evidence": "frequency = 'POPLATEK TYDNE' stands for weekly issuance"}
{"sample_id": 9532, "db_id": "financial", "final": {"question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?", "sql": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100", "source_tables": ["trans", "account", "disp"]}, "evidence": ""}
{"sample_id": 9588, "db_id": "financial", "final": {"question": "How many of the accounts are from Jesenik district?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'", "source_tables": ["account", "district"]}, "evidence": ""}
{"sample_id": 9601, "db_id": "financial", "final": {"question": "How much, in total, did client number 617 pay for all of the transactions in 1998?", "sql": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617", "source_tables": ["client", "trans", "account", "disp"]}, "evidence": ""}
{"sample_id": 9605, "db_id": "financial", "final": {"question": "How many accounts in Beroun were opened after 1996?", "sql": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'", "source_tables": ["account", "district"]}, "evidence": ""}
{"sample_id": 9546, "db_id": "financial", "final": {"question": "List the loan ID, district and average salary for loan with duration of 60 months.", "sql": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60", "source_tables": ["account", "loan", "district"]}, "evidence": "A3 refers to regions; A11 refers to average salary"}
{"sample_id": 9594, "db_id": "financial", "final": {"question": "How many owner and disponent dispositions are there from account number 1 to account number 10?", "sql": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10", "source_tables": ["disp"]}, "evidence": ""}
{"sample_id": 9556, "db_id": "financial", "final": {"question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?", "sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1", "source_tables": ["account", "district"]}, "evidence": "A16 stands for no. of committed crimes 1996"}
{"sample_id": 9565, "db_id": "financial", "final": {"question": "What are the accounts that have gold credit cards?", "sql": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'", "source_tables": ["disp", "card"]}, "evidence": ""}
{"sample_id": 9527, "db_id": "financial", "final": {"question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.", "sql": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'", "source_tables": ["account", "loan"]}, "evidence": ""}
{"sample_id": 9537, "db_id": "financial", "final": {"question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?", "sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1", "source_tables": ["client", "district"]}, "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants."}
{"sample_id": 9541, "db_id": "financial", "final": {"question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.", "sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'", "source_tables": ["account", "district"]}, "evidence": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction"}
{"sample_id": 9524, "db_id": "financial", "final": {"question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD", "sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000", "source_tables": ["account", "trans"]}, "evidence": ""}
{"sample_id": 9603, "db_id": "financial", "final": {"question": "Please provide the IDs of the 3 female clients with the largest loans.", "sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3", "source_tables": ["client", "account", "loan", "disp"]}, "evidence": "Female refers to gender = 'F'"}
{"sample_id": 9579, "db_id": "financial", "final": {"question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?", "sql": "SELECT T1.A15 FROM district AS T1 INNER JOIN \"account\" AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532", "source_tables": ["account", "district"]}, "evidence": "A15 contains information about number of committed crimes in 1995"}
{"sample_id": 9513, "db_id": "financial", "final": {"question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?", "sql": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district", "source_tables": ["district"]}, "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996"}
{"sample_id": 9644, "db_id": "toxicology", "final": {"question": "What is the difference between the number of molecules that are carcinogenic and those that are not?", "sql": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t", "source_tables": ["molecule"]}, "evidence": "label = '+' means molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; difference = SUBTRACT(SUM(label = '+'), SUM(label = '-'))"}
{"sample_id": 9645, "db_id": "toxicology", "final": {"question": "What are the atom IDs of the bond TR000_2_5?", "sql": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'", "source_tables": ["connected"]}, "evidence": "TR000_2_5 is the bond id"}
{"sample_id": 9696, "db_id": "toxicology", "final": {"question": "List the toxicology elements associated with molecule TR001.", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'", "source_tables": ["atom"]}, "evidence": "TR001 is the molecule id"}
{"sample_id": 9651, "db_id": "toxicology", "final": {"question": "What is the type of bond that molecule TR000 has when involved in any bonds?", "sql": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'", "source_tables": ["bond"]}, "evidence": "type of bond refers to bond_type; TR000 is the molecule id"}
{"sample_id": 9625, "db_id": "toxicology", "final": {"question": "In how many atoms is there no bromine?", "sql": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'", "source_tables": ["atom"]}, "evidence": "atoms with no bromine refers to element ! = 'br'"}
{"sample_id": 9624, "db_id": "toxicology", "final": {"question": "How many triple type bonds are there?", "sql": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'", "source_tables": ["bond"]}, "evidence": "triple type bonds refers to bond_type = '#'"}
{"sample_id": 9749, "db_id": "toxicology", "final": {"question": "Which non-carcinogenic molecules consisted more than 5 atoms?", "sql": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t", "source_tables": ["atom", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5"}
{"sample_id": 9643, "db_id": "toxicology", "final": {"question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?", "sql": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'", "source_tables": ["bond"]}, "evidence": "TR001 is the molecule id; TR001_2_6 is the bond id"}
{"sample_id": 9665, "db_id": "toxicology", "final": {"question": "What are the bonds that have phosphorus and nitrogen as their atom elements?", "sql": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'", "source_tables": ["connected", "atom"]}, "evidence": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'"}
{"sample_id": 9728, "db_id": "toxicology", "final": {"question": "Which molecules have triple bonds and list all the elements they contain.", "sql": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'", "source_tables": ["bond", "atom"]}, "evidence": "triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9661, "db_id": "toxicology", "final": {"question": "How many connections does the atom 19 have?", "sql": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'", "source_tables": ["connected"]}, "evidence": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';"}
{"sample_id": 9697, "db_id": "toxicology", "final": {"question": "Give me the molecule ID of the double bond type.", "sql": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='", "source_tables": ["bond"]}, "evidence": "double bond refers to bond_type = ' = ';"}
{"sample_id": 9623, "db_id": "toxicology", "final": {"question": "What is the percentage of carbon in double-bond molecules?", "sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='", "source_tables": ["bond", "atom"]}, "evidence": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))"}
{"sample_id": 9742, "db_id": "toxicology", "final": {"question": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?", "sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'", "source_tables": ["connected", "bond"]}, "evidence": "type of bond refers to bond_type; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';"}
{"sample_id": 9693, "db_id": "toxicology", "final": {"question": "Does bond id TR001_1_8 have both element of chlorine and carbon?", "sql": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')", "source_tables": ["connected", "atom"]}, "evidence": "chlorine refers to element = 'cl'; carbon refers to element = 'c'"}
{"sample_id": 9751, "db_id": "toxicology", "final": {"question": "Which carcinogenic molecule have the highest number of atoms consisted in it?", "sql": "SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; molecule that have the highest number of atoms consisted in in refers to MAX(COUNT(atom.molecule_id))"}
{"sample_id": 9730, "db_id": "toxicology", "final": {"question": "How many bonds are created by bonding atoms with chlorine element?", "sql": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'", "source_tables": ["connected", "atom"]}, "evidence": "chlorine refers to element = 'cl'"}
{"sample_id": 9755, "db_id": "toxicology", "final": {"question": "In the molecule TR008, how many carbons are present?", "sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'", "source_tables": ["atom"]}, "evidence": "carbon refers to element = 'c'"}
{"sample_id": 9756, "db_id": "toxicology", "final": {"question": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?", "sql": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9710, "db_id": "toxicology", "final": {"question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.", "sql": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9747, "db_id": "toxicology", "final": {"question": "How many carcinogenic molecules that consisted of Nitrogen?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'", "source_tables": ["atom", "molecule"]}, "evidence": "nitrogen refers to element = 'n'; label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9633, "db_id": "toxicology", "final": {"question": "Indicate which atoms are connected in non-carcinogenic type molecules.", "sql": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'", "source_tables": ["connected", "atom", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9660, "db_id": "toxicology", "final": {"question": "How many molecules have a triple bond type?", "sql": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'", "source_tables": ["bond"]}, "evidence": "triple bond refers to bond_type = '#';"}
{"sample_id": 9760, "db_id": "toxicology", "final": {"question": "What is the atom ID of double bonded carbon in TR012 molecule?", "sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "carbon refers to element = 'c'; double bond refers to bond_type = ' = ';"}
{"sample_id": 9622, "db_id": "toxicology", "final": {"question": "Find the triple-bonded molecules which are carcinogenic.", "sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'", "source_tables": ["bond", "molecule"]}, "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'"}
{"sample_id": 9694, "db_id": "toxicology", "final": {"question": "List down two molecule id of triple bond non carcinogenic molecules with element carbon.", "sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9705, "db_id": "toxicology", "final": {"question": "Identify whether the chemical compound that contains Calcium is carcinogenic.", "sql": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'", "source_tables": ["atom", "molecule"]}, "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic;"}
{"sample_id": 9682, "db_id": "toxicology", "final": {"question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.", "sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'"}
{"sample_id": 9707, "db_id": "toxicology", "final": {"question": "Name chemical elements that form a bond TR001_10_11.", "sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'", "source_tables": ["connected", "bond", "atom"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2)"}
{"sample_id": 9648, "db_id": "toxicology", "final": {"question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'", "source_tables": ["bond"]}, "evidence": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'"}
{"sample_id": 9675, "db_id": "toxicology", "final": {"question": "List the elements of all the triple bonds.", "sql": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'", "source_tables": ["connected", "bond", "atom"]}, "evidence": "triple bond refers to bond_type = '#';"}
{"sample_id": 9720, "db_id": "toxicology", "final": {"question": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.", "sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id", "source_tables": ["atom", "molecule"]}, "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0"}
{"sample_id": 9632, "db_id": "toxicology", "final": {"question": "What atoms are connected in single type bonds?", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'", "source_tables": ["connected", "bond"]}, "evidence": "single type bond refers to bond_type = '-';"}
{"sample_id": 9713, "db_id": "toxicology", "final": {"question": "How many chemical compounds in the database are identified as carcinogenic.", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9698, "db_id": "toxicology", "final": {"question": "Write down the atom IDs of the first and second atoms of triple bond type molecules.", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'", "source_tables": ["connected", "bond"]}, "evidence": "first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';"}
{"sample_id": 9711, "db_id": "toxicology", "final": {"question": "Is molecule TR151 carcinogenic?", "sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic;"}
{"sample_id": 9677, "db_id": "toxicology", "final": {"question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'", "source_tables": ["bond", "molecule"]}, "evidence": "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'"}
{"sample_id": 9678, "db_id": "toxicology", "final": {"question": "Calculate the total atoms consisting of the element carbon and hydrogen.", "sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'", "source_tables": ["atom"]}, "evidence": "consisting of element carbon and hydrogen refers to element in('c', 'h')"}
{"sample_id": 9717, "db_id": "toxicology", "final": {"question": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?", "sql": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; hydrogen refers to element = h'"}
{"sample_id": 9630, "db_id": "toxicology", "final": {"question": "Which type of label is the most numerous in atoms with hydrogen?", "sql": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t", "source_tables": ["atom", "molecule"]}, "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); "}
{"sample_id": 9719, "db_id": "toxicology", "final": {"question": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?", "sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic; carbon refers to element = 'c'"}
{"sample_id": 9714, "db_id": "toxicology", "final": {"question": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.", "sql": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'", "source_tables": ["atom"]}, "evidence": "carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>=10 AND substr(molecule_id, 3, 3) <= 50"}
{"sample_id": 9680, "db_id": "toxicology", "final": {"question": "What are the bond type for atoms with element Tin?", "sql": "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'", "source_tables": ["connected", "bond", "atom"]}, "evidence": "element Tin refers to element = 'sn'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'"}
{"sample_id": 9738, "db_id": "toxicology", "final": {"question": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?", "sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'", "source_tables": ["atom", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9685, "db_id": "toxicology", "final": {"question": "What is the composition of element chlorine in percentage among the single bond molecules?", "sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'"}
{"sample_id": 9669, "db_id": "toxicology", "final": {"question": "List all the elements of atoms that can not bond with any other atoms.", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )", "source_tables": ["connected", "atom"]}, "evidence": " atoms cannot bond with other atoms means atom_id NOT in connected table;"}
{"sample_id": 9745, "db_id": "toxicology", "final": {"question": "Is molecule TR000 is carcinogenic or not?", "sql": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'", "source_tables": ["molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9731, "db_id": "toxicology", "final": {"question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?", "sql": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type", "source_tables": ["bond", "atom"]}, "evidence": ""}
{"sample_id": 9620, "db_id": "toxicology", "final": {"question": "On average how many carcinogenic molecules are single bonded?", "sql": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))"}
{"sample_id": 9708, "db_id": "toxicology", "final": {"question": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.", "sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T", "source_tables": ["bond"]}, "evidence": "triple bond refers to bond_type = '#';"}
{"sample_id": 9670, "db_id": "toxicology", "final": {"question": "What are the atoms of the triple bond with the molecule \"TR041\"?", "sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'", "source_tables": ["connected", "bond", "atom"]}, "evidence": "TR041 is the molecule id; triple bond refers to bond_type = '#';"}
{"sample_id": 9748, "db_id": "toxicology", "final": {"question": "Which molecule consisted of Sulphur atom with double bond?", "sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='", "source_tables": ["bond", "atom"]}, "evidence": "sulphur refers to element - 's'; double bond refers to bond_type = ' = ';"}
{"sample_id": 9636, "db_id": "toxicology", "final": {"question": "What type of label is not on molecules with atoms with tin?", "sql": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'", "source_tables": ["atom", "molecule"]}, "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9637, "db_id": "toxicology", "final": {"question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?", "sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'", "source_tables": ["connected", "bond", "atom"]}, "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;"}
{"sample_id": 9684, "db_id": "toxicology", "final": {"question": "Among the single bond molecule id, which molecules are not carcinogenic?", "sql": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'", "source_tables": ["bond", "molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';"}
{"sample_id": 9635, "db_id": "toxicology", "final": {"question": "What type of bond is there between the atoms TR004_8 and TR004_20?", "sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'", "source_tables": ["connected", "bond"]}, "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around"}
{"sample_id": 9757, "db_id": "toxicology", "final": {"question": "What is the total number of molecules with double bonded oxygen?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'", "source_tables": ["bond", "atom"]}, "evidence": "oxygen refers to element = 'o'; double bond refers to bond_type = ' = ';"}
{"sample_id": 9752, "db_id": "toxicology", "final": {"question": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.", "sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#';"}
{"sample_id": 9650, "db_id": "toxicology", "final": {"question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.", "sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'", "source_tables": ["atom"]}, "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'"}
{"sample_id": 9617, "db_id": "toxicology", "final": {"question": "What is the most common bond type?", "sql": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T", "source_tables": ["bond"]}, "evidence": "most common bond type refers MAX(COUNT(bond_type))"}
{"sample_id": 9734, "db_id": "toxicology", "final": {"question": "What is the carcinogenic label for bond TR001_2_4?", "sql": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic"}
{"sample_id": 9621, "db_id": "toxicology", "final": {"question": "In the molecule containing sodium atoms, how many are non-carcinogenic?", "sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'", "source_tables": ["atom", "molecule"]}, "evidence": "non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'"}
{"sample_id": 9744, "db_id": "toxicology", "final": {"question": "What is the element of toxicology for the atom with the ID of TR000_1?", "sql": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'", "source_tables": ["atom"]}, "evidence": "atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9646, "db_id": "toxicology", "final": {"question": "What are the bond IDs that have the same atom ID 2 of TR000_2?", "sql": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'", "source_tables": ["connected"]}, "evidence": "TR000_2 is the atom id; atom ID 2 refers to atom_id2"}
{"sample_id": 9754, "db_id": "toxicology", "final": {"question": "Among the molecules between TR004 to TR010, how many of them has single bonds?", "sql": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'", "source_tables": ["bond"]}, "evidence": "single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010';"}
{"sample_id": 9642, "db_id": "toxicology", "final": {"question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3", "source_tables": ["atom"]}, "evidence": "TR000 is the molecule id;"}
{"sample_id": 9699, "db_id": "toxicology", "final": {"question": "What are the toxicology elements associated with bond ID TR000_1_2?", "sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2'", "source_tables": ["connected", "atom"]}, "evidence": "TR000_1_2 is the bond id;"}
{"sample_id": 9702, "db_id": "toxicology", "final": {"question": "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.", "sql": "SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'", "source_tables": ["bond", "molecule"]}, "evidence": "triple bond refers to bond_type = '#'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9712, "db_id": "toxicology", "final": {"question": "Which toxic element can be found in the molecule TR151?", "sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'", "source_tables": ["atom"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9725, "db_id": "toxicology", "final": {"question": "How many double bonds does TR006 have and is it carcinogenic?", "sql": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; double bond refers to bond_type = ' = ';"}
{"sample_id": 9666, "db_id": "toxicology", "final": {"question": "Is the molecule with the most double bonds carcinogenic?", "sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id", "source_tables": ["bond", "molecule"]}, "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic"}
{"sample_id": 9758, "db_id": "toxicology", "final": {"question": "in molecules with triple bonds, how many of them are not carcinogenic?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'", "source_tables": ["bond", "molecule"]}, "evidence": "triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9663, "db_id": "toxicology", "final": {"question": "How many of the molecules are not carcinogenic?", "sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'", "source_tables": ["molecule"]}, "evidence": "label = '-' means molecules are non-carcinogenic"}
{"sample_id": 9724, "db_id": "toxicology", "final": {"question": "Name the elements that comprise the atoms of bond TR001_2_4.", "sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'", "source_tables": ["connected", "atom"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9736, "db_id": "toxicology", "final": {"question": "How many single bonds are there in the list?", "sql": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'", "source_tables": ["bond"]}, "evidence": "single bond refers to bond_type = '-';"}
{"sample_id": 9759, "db_id": "toxicology", "final": {"question": "List the element and bond type included in the molecule with molecule ID of TR002.", "sql": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'", "source_tables": ["bond", "atom"]}, "evidence": "TR002 is the molecule id"}
{"sample_id": 9691, "db_id": "toxicology", "final": {"question": "How many bond id have element iodine?", "sql": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'", "source_tables": ["bond", "atom", "molecule"]}, "evidence": "iodine refers to element = 'i'"}
{"sample_id": 9679, "db_id": "toxicology", "final": {"question": "List down atom id2 for atoms with element sulfur.", "sql": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'", "source_tables": ["connected", "atom"]}, "evidence": "element sulfur refers to element = 's'"}
{"sample_id": 9709, "db_id": "toxicology", "final": {"question": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.", "sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'", "source_tables": ["bond"]}, "evidence": "TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'"}
{"sample_id": 9683, "db_id": "toxicology", "final": {"question": "Write down bond id for molecules that are carcinogenic.", "sql": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "source_tables": ["bond", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic"}
{"sample_id": 9733, "db_id": "toxicology", "final": {"question": "How many molecules without sulphur element is not having double bond?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='", "source_tables": ["bond", "atom"]}, "evidence": "double bond refers to bond_type = ' = '; bond_type ! = ' = '; sulphur refers to element = 's'"}
{"sample_id": 9739, "db_id": "toxicology", "final": {"question": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.", "sql": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id", "source_tables": ["atom", "molecule"]}, "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage"}
{"sample_id": 9750, "db_id": "toxicology", "final": {"question": "List all the elements with double bond, consisted in molecule TR024.", "sql": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '='", "source_tables": ["bond", "atom"]}, "evidence": "double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9619, "db_id": "toxicology", "final": {"question": "Calculate the average number of oxygen atoms in single-bonded molecules.", "sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts", "source_tables": ["bond", "atom"]}, "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')"}
{"sample_id": 9631, "db_id": "toxicology", "final": {"question": "Chlorine is in what type of bond?", "sql": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'", "source_tables": ["connected", "bond", "atom"]}, "evidence": "type of bond refers to bond_type; chlorine refers to element = 'cl'"}
{"sample_id": 9618, "db_id": "toxicology", "final": {"question": "In the non-carcinogenic molecules, how many contain chlorine atoms?", "sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'", "source_tables": ["atom", "molecule"]}, "evidence": "non-carcinogenic molecules refers to label = '-'; chlorine atoms refers to element = 'cl'"}
{"sample_id": 9729, "db_id": "toxicology", "final": {"question": "Name the atoms' elements that form bond TR000_2_3.", "sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'", "source_tables": ["connected", "atom"]}, "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium"}
{"sample_id": 9856, "db_id": "card_games", "final": {"question": "How many sets are available just in Japanese and not in Magic: The Gathering Online?", "sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')", "source_tables": ["set_translations", "sets"]}, "evidence": "Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''"}
{"sample_id": 9874, "db_id": "card_games", "final": {"question": "Please list the names of the cards that have a text box.", "sql": "SELECT DISTINCT name FROM cards WHERE isTextless = 0", "source_tables": ["cards"]}, "evidence": "have a text box refers to isTextless = 0"}
{"sample_id": 9773, "db_id": "card_games", "final": {"question": "Name all the cards which have alternative language in Japanese.", "sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Japanese' is the language;"}
{"sample_id": 9805, "db_id": "card_games", "final": {"question": "How many of the banned cards are white border?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'", "source_tables": ["legalities", "cards"]}, "evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';"}
{"sample_id": 9913, "db_id": "card_games", "final": {"question": "What's the magic card market name for the set which was released on 2017/6/9?", "sql": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'", "source_tables": ["sets"]}, "evidence": "magic card market name refers to mcmName"}
{"sample_id": 9816, "db_id": "card_games", "final": {"question": "How many white bordered cards are powerful?", "sql": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL", "source_tables": ["cards"]}, "evidence": "white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId is not null AND cardKingdomId is not null (replace)"}
{"sample_id": 9915, "db_id": "card_games", "final": {"question": "For the set \"Commander 2014 Oversized\" , give its parent code.", "sql": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'", "source_tables": ["sets"]}, "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';"}
{"sample_id": 9788, "db_id": "card_games", "final": {"question": "What is the rule of playing card \"Benalish Knight\"?", "sql": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'", "source_tables": ["legalities", "cards"]}, "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;"}
{"sample_id": 9877, "db_id": "card_games", "final": {"question": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.", "sql": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL", "source_tables": ["cards"]}, "evidence": "are a promotional painting refers to isPromo = 1; have multiple faces on the same card refers to side is not Null"}
{"sample_id": 9764, "db_id": "card_games", "final": {"question": "List the card names with value that cost more converted mana for the face.", "sql": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1", "source_tables": ["cards"]}, "evidence": "more converted mana for the face refers to Max(faceConvertedManaCost);"}
{"sample_id": 9780, "db_id": "card_games", "final": {"question": "What is the border color of card \"Ancestor's Chosen\"?", "sql": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'", "source_tables": ["cards"]}, "evidence": "name of card  = 'Ancestor''s Chosen' ;"}
{"sample_id": 9904, "db_id": "card_games", "final": {"question": "What's the German type of the card \"Ancestor's Chosen\"?", "sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'", "source_tables": ["foreign_data", "cards"]}, "evidence": "German refers to language = 'German'; \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'"}
{"sample_id": 9785, "db_id": "card_games", "final": {"question": "How many cards of legalities whose status is restricted are found in a starter deck?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1", "source_tables": ["legalities", "cards"]}, "evidence": "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;"}
{"sample_id": 9929, "db_id": "card_games", "final": {"question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?", "sql": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )", "source_tables": ["set_translations", "sets"]}, "evidence": "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100"}
{"sample_id": 9909, "db_id": "card_games", "final": {"question": "What is the percentage of incredibly powerful cards in the set Coldsnap?", "sql": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100"}
{"sample_id": 9811, "db_id": "card_games", "final": {"question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.", "sql": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'", "source_tables": ["rulings", "cards"]}, "evidence": "Creature - Elf is the originalType;"}
{"sample_id": 9870, "db_id": "card_games", "final": {"question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.", "sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'", "source_tables": ["foreign_data", "cards"]}, "evidence": ""}
{"sample_id": 9763, "db_id": "card_games", "final": {"question": "What are the borderless cards available without powerful foils?", "sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)", "source_tables": ["cards"]}, "evidence": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null"}
{"sample_id": 9841, "db_id": "card_games", "final": {"question": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?", "sql": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'", "source_tables": ["cards"]}, "evidence": "color cards with no borders refers to borderColor = 'borderless'; ranked higher than 12000 on EDHRec refers to edhrecRank > 12000"}
{"sample_id": 9901, "db_id": "card_games", "final": {"question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?", "sql": "SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null"}
{"sample_id": 9928, "db_id": "card_games", "final": {"question": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?", "sql": "SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )", "source_tables": ["set_translations", "sets"]}, "evidence": "Japanese translation refers to language = 'Japanese'; in non-foil refers to isNonFoilOnly = 1; percentage of Japanese non foil in Japanese cards refers to DIVIDE(SUM(isNonFoilOnly = 1), SUM(language = 'Japanese'))*100"}
{"sample_id": 9799, "db_id": "card_games", "final": {"question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?", "sql": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'", "source_tables": ["cards"]}, "evidence": "subtype other than Angel refers to subtypes is not 'Angel';"}
{"sample_id": 9880, "db_id": "card_games", "final": {"question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?", "sql": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards", "source_tables": ["cards"]}, "evidence": "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'"}
{"sample_id": 9920, "db_id": "card_games", "final": {"question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?", "sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL", "source_tables": ["set_translations", "cards"]}, "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation"}
{"sample_id": 9927, "db_id": "card_games", "final": {"question": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?", "sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'", "source_tables": ["set_translations", "sets"]}, "evidence": "Simplified Chinese translation refers to language = 'Chinese Simplified'; name of the set \"Mirrodin\" refers to name = 'Mirrodin'"}
{"sample_id": 9779, "db_id": "card_games", "final": {"question": "What type of promotion is of card 'Duress'?", "sql": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL", "source_tables": ["cards"]}, "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;"}
{"sample_id": 9801, "db_id": "card_games", "final": {"question": "What are the cards belong to duel deck a? List the ID.", "sql": "SELECT id FROM cards WHERE duelDeck = 'a'", "source_tables": ["cards"]}, "evidence": "duel deck a refers to duelDeck = a;"}
{"sample_id": 9873, "db_id": "card_games", "final": {"question": "How many cards available in paper have a positive starting maximum hand size?", "sql": "SELECT SUM(CASE WHEN availability = 'paper' AND hAND = '3' THEN 1 ELSE 0 END) FROM cards", "source_tables": ["cards"]}, "evidence": "available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '3'"}
{"sample_id": 9847, "db_id": "card_games", "final": {"question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?", "sql": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL", "source_tables": ["cards"]}, "evidence": "don't have multiple faces on a single card side is null"}
{"sample_id": 9815, "db_id": "card_games", "final": {"question": "On how many cards designed by John Avon is its foil non-powerful?", "sql": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'", "source_tables": ["cards"]}, "evidence": "John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL \n"}
{"sample_id": 9863, "db_id": "card_games", "final": {"question": "State the set code of the set with release date of 07/13/2007?", "sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'", "source_tables": ["set_translations", "sets"]}, "evidence": ""}
{"sample_id": 9808, "db_id": "card_games", "final": {"question": "How many cards are having future frame version and what are the legality status of these cards?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'", "source_tables": ["legalities", "cards"]}, "evidence": "future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';"}
{"sample_id": 9897, "db_id": "card_games", "final": {"question": "How many cards in the set Coldsnap have a black border color?", "sql": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black'"}
{"sample_id": 9925, "db_id": "card_games", "final": {"question": "What was the expansion type for the set which card \"Samite Pilgrim\" in it?", "sql": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )", "source_tables": ["cards", "sets"]}, "evidence": "expansion type refers to type; card \"Samite Pilgrim\" refers to name = 'Samite Pilgrim'"}
{"sample_id": 9942, "db_id": "card_games", "final": {"question": "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.", "sql": "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1", "source_tables": ["legalities", "cards"]}, "evidence": "format of the cards refers to format; illustrator refers to artist; the least amount of cards refers to MIN(artist)"}
{"sample_id": 9951, "db_id": "card_games", "final": {"question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.", "sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )", "source_tables": ["set_translations", "sets"]}, "evidence": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'"}
{"sample_id": 9820, "db_id": "card_games", "final": {"question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?", "sql": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'", "source_tables": ["cards"]}, "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist"}
{"sample_id": 9772, "db_id": "card_games", "final": {"question": "State the alternative languages available for card named Annul numbered 29.", "sql": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29", "source_tables": ["foreign_data", "cards"]}, "evidence": "annul refers to name = 'annul'; numbered 29 refers to number = '29';"}
{"sample_id": 9851, "db_id": "card_games", "final": {"question": "What is the language and expansion type of set number 206?", "sql": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206", "source_tables": ["set_translations", "sets"]}, "evidence": "set number 206 refers to id = 206"}
{"sample_id": 9839, "db_id": "card_games", "final": {"question": "What percentage of Japanese translated sets are expansion sets?", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion'", "source_tables": ["set_translations", "sets"]}, "evidence": "Japanese translated refers to language = 'Japanese'; expansion sets refers to type = 'expansion'; percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100"}
{"sample_id": 9944, "db_id": "card_games", "final": {"question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.", "sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format", "source_tables": ["legalities", "cards"]}, "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name"}
{"sample_id": 9778, "db_id": "card_games", "final": {"question": "How many cards have infinite power?", "sql": "SELECT COUNT(*) FROM cards WHERE power = '*'", "source_tables": ["cards"]}, "evidence": "infinite power refers to power = '*';"}
{"sample_id": 9940, "db_id": "card_games", "final": {"question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.", "sql": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'", "source_tables": ["maxbanned", "legalities", "cards"]}, "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))"}
{"sample_id": 9864, "db_id": "card_games", "final": {"question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".", "sql": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')", "source_tables": ["set_translations", "sets"]}, "evidence": ""}
{"sample_id": 9855, "db_id": "card_games", "final": {"question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode", "source_tables": ["set_translations", "sets"]}, "evidence": "are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100"}
{"sample_id": 9902, "db_id": "card_games", "final": {"question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?", "sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'", "source_tables": ["foreign_data", "cards"]}, "evidence": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'"}
{"sample_id": 9879, "db_id": "card_games", "final": {"question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".", "sql": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'", "source_tables": ["cards"]}, "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls"}
{"sample_id": 9914, "db_id": "card_games", "final": {"question": "For the set \"From the Vault: Lore\", what is its expansion type?", "sql": "SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%'", "source_tables": ["sets"]}, "evidence": "set \"From the Vault refers to name which contains 'From the Vault: Lore'; expansion type refers to type"}
{"sample_id": 9766, "db_id": "card_games", "final": {"question": "List all the mythic rarity print cards banned in gladiator format.", "sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'", "source_tables": ["legalities", "cards"]}, "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';"}
{"sample_id": 9938, "db_id": "card_games", "final": {"question": "How many cards did Volkan Ba\u00c7\u00b5a illustrated whose foreign language is in French?", "sql": "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Ba\u01f5a' AND T2.language = 'French' GROUP BY T1.id ) AS T3", "source_tables": ["foreign_data", "cards"]}, "evidence": "Volkan Ba\u00c7\u00b5a refers to artist = 'Volkan Ba\u01f5a'; foreign language is in French refers to language = 'French'"}
{"sample_id": 9774, "db_id": "card_games", "final": {"question": "Calculate the percentage of the cards availabe in Chinese Simplified.", "sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid", "source_tables": ["foreign_data", "cards"]}, "evidence": "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100"}
{"sample_id": 9930, "db_id": "card_games", "final": {"question": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?", "sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1", "source_tables": ["cards"]}, "evidence": "created by Aleksi Briclot refers to artist = 'Aleksi Briclot'; doesn't have a text box refers to isTextless = 1; available printing types refers to availability"}
{"sample_id": 9857, "db_id": "card_games", "final": {"question": "How many card border with black color ? List out the card id.", "sql": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id", "source_tables": ["cards"]}, "evidence": "border with black color refers to borderColor = 'black'"}
{"sample_id": 9912, "db_id": "card_games", "final": {"question": "For the set which had 'SS2' as the code, what is its magic card market id?", "sql": "SELECT mcmId FROM sets WHERE code = 'SS2'", "source_tables": ["sets"]}, "evidence": "magic card market id refers to mcmId"}
{"sample_id": 9949, "db_id": "card_games", "final": {"question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC", "source_tables": ["rulings", "cards"]}, "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);"}
{"sample_id": 9905, "db_id": "card_games", "final": {"question": "Please list the Italian text ruling of all the cards in the set Coldsnap.", "sql": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'", "source_tables": ["sets", "foreign_data", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'"}
{"sample_id": 9894, "db_id": "card_games", "final": {"question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL", "source_tables": ["set_translations", "sets"]}, "evidence": "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' and translation is not null"}
{"sample_id": 9844, "db_id": "card_games", "final": {"question": "What is the language of the card with the multiverse number 149934?", "sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934", "source_tables": ["foreign_data"]}, "evidence": "multiverse number 149934 refers to multiverseid = 149934;"}
{"sample_id": 9807, "db_id": "card_games", "final": {"question": "Write down the ruling of Beacon of Immortality.", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'", "source_tables": ["rulings", "cards"]}, "evidence": "Beacon of Immortality' is the name of card;"}
{"sample_id": 9828, "db_id": "card_games", "final": {"question": "Lists by ID all Creature-type cards with legal status.", "sql": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'", "source_tables": ["rulings", "legalities", "cards"]}, "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';"}
{"sample_id": 9865, "db_id": "card_games", "final": {"question": "Give the code of sets have expansion type of 'expansion'?", "sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode", "source_tables": ["set_translations", "sets"]}, "evidence": "code of sets refers to setCode"}
{"sample_id": 9854, "db_id": "card_games", "final": {"question": "Which Russian set of cards contains the most cards overall?", "sql": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1", "source_tables": ["set_translations", "sets"]}, "evidence": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)"}
{"sample_id": 9933, "db_id": "card_games", "final": {"question": "What is the most common visual frame effects among the incredibly powerful foils?", "sql": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1", "source_tables": ["cards"]}, "evidence": "when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful; most common visual frame effects refers to MAX(frameEffects)"}
{"sample_id": 9836, "db_id": "card_games", "final": {"question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?", "sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180", "source_tables": ["set_translations", "sets"]}, "evidence": "set of 180 cards refers to baseSetSize = 180"}
{"sample_id": 9903, "db_id": "card_games", "final": {"question": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.", "sql": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL", "source_tables": ["foreign_data", "cards"]}, "evidence": "\"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null"}
{"sample_id": 9822, "db_id": "card_games", "final": {"question": "Lists the set code of all cards translated into Spanish.", "sql": "SELECT setCode FROM set_translations WHERE language = 'Spanish'", "source_tables": ["set_translations"]}, "evidence": "Spanish refer to language; set code refers to setCode"}
{"sample_id": 9939, "db_id": "card_games", "final": {"question": "How many rare enchantment Abundance cards are there whose play format status are all legal?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'", "source_tables": ["legalities", "cards"]}, "evidence": "rare refers to rarity = 'rare'; enchantment card refers to types = 'Enchantment'; Abundance cards refers to name = 'Abundance'; format status are all legal refers to status = 'Legal'"}
{"sample_id": 9765, "db_id": "card_games", "final": {"question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.", "sql": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015", "source_tables": ["cards"]}, "evidence": "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;"}
{"sample_id": 9882, "db_id": "card_games", "final": {"question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?", "sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'", "source_tables": ["cards"]}, "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'"}
{"sample_id": 9888, "db_id": "card_games", "final": {"question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'", "source_tables": ["set_translations", "cards"]}, "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'"}
{"sample_id": 9782, "db_id": "card_games", "final": {"question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?", "sql": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )", "source_tables": ["set_translations", "cards"]}, "evidence": "Angel of Mercy' is the name of card;"}
{"sample_id": 9835, "db_id": "card_games", "final": {"question": "How many cards with print rarity have ruling text printed on 01/02/2007?", "sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'", "source_tables": ["rulings", "cards"]}, "evidence": "with print rarity refers to rarity = 'rare'; on 01/02/2007 refers to date = '2007-02-01'"}
{"sample_id": 9762, "db_id": "card_games", "final": {"question": "Which are the cards that have incredibly powerful foils.", "sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL", "source_tables": ["cards"]}, "evidence": "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null"}
{"sample_id": 9800, "db_id": "card_games", "final": {"question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.", "sql": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL", "source_tables": ["cards"]}, "evidence": "Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null;"}
{"sample_id": 9889, "db_id": "card_games", "final": {"question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?", "sql": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'", "source_tables": ["set_translations", "sets"]}, "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize"}
{"sample_id": 9790, "db_id": "card_games", "final": {"question": "What is the percentage of borderless cards?", "sql": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards", "source_tables": ["cards"]}, "evidence": "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100"}
{"sample_id": 9916, "db_id": "card_games", "final": {"question": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.", "sql": "SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'", "source_tables": ["rulings", "cards"]}, "evidence": "all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'; the text of the ruling refers to text; cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have;"}
{"sample_id": 9859, "db_id": "card_games", "final": {"question": "Among black card borders, which card has full artwork?", "sql": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1", "source_tables": ["cards"]}, "evidence": "white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1"}
{"sample_id": 9837, "db_id": "card_games", "final": {"question": "What percentage of cards with format commander and legal status do not have a content warning?", "sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'", "source_tables": ["legalities", "cards"]}, "evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';"}
{"sample_id": 9853, "db_id": "card_games", "final": {"question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.", "sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0", "source_tables": ["set_translations", "sets"]}, "evidence": "available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'"}
{"sample_id": 9829, "db_id": "card_games", "final": {"question": "Lists all types of cards in German.", "sql": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL", "source_tables": ["foreign_data", "cards"]}, "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null"}
{"sample_id": 9892, "db_id": "card_games", "final": {"question": "When was the set of cards with \"Ancestor's Chosen\" released?", "sql": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'", "source_tables": ["sets", "cards"]}, "evidence": "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate"}
{"sample_id": 9917, "db_id": "card_games", "final": {"question": "What was the release date for the set which card \"Evacuation\" in it?", "sql": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'", "source_tables": ["sets", "cards"]}, "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate"}
{"sample_id": 9918, "db_id": "card_games", "final": {"question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?", "sql": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'", "source_tables": ["set_translations", "sets"]}, "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'"}
{"sample_id": 9948, "db_id": "card_games", "final": {"question": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?", "sql": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'", "source_tables": ["cards"]}, "evidence": "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'"}
{"sample_id": 9769, "db_id": "card_games", "final": {"question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.", "sql": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'", "source_tables": ["rulings", "cards"]}, "evidence": "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist; Find all cards refers to return card id"}
{"sample_id": 9840, "db_id": "card_games", "final": {"question": "What kind of printing is on the card that Daren Bader created?", "sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'", "source_tables": ["cards"]}, "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'"}
{"sample_id": 9896, "db_id": "card_games", "final": {"question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?", "sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'", "source_tables": ["set_translations", "sets"]}, "evidence": "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 100 refers to baseSetSize < 10"}
{"sample_id": 9797, "db_id": "card_games", "final": {"question": "List down all the card IDs with converted mana cost of 0.", "sql": "SELECT id FROM cards WHERE convertedManaCost = 0", "source_tables": ["cards"]}, "evidence": "converted mana cost of 0 refers to covertedManaCost = 0;"}
{"sample_id": 9775, "db_id": "card_games", "final": {"question": "List all the sets available in Italian translation. State the total number of cards per set.", "sql": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'", "source_tables": ["set_translations", "sets"]}, "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;"}
{"sample_id": 9924, "db_id": "card_games", "final": {"question": "What is the release date for the set \"Ola de fr\u00edo\"?", "sql": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'", "source_tables": ["set_translations", "sets"]}, "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'"}
{"sample_id": 9908, "db_id": "card_games", "final": {"question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?", "sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'", "source_tables": ["sets", "cards"]}, "evidence": "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100"}
{"sample_id": 9875, "db_id": "card_games", "final": {"question": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?", "sql": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'", "source_tables": ["cards"]}, "evidence": "card \"Ancestor's Chosen\" refers to name = 'Ancestor`s Chosen'"}
{"sample_id": 9792, "db_id": "card_games", "final": {"question": "How many borderless cards are illustrated in Russian?", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'", "source_tables": ["foreign_data", "cards"]}, "evidence": "borderless card refers to borderColor = 'borderless'; 'Russian' is the language;"}
{"sample_id": 9899, "db_id": "card_games", "final": {"question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?", "sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist", "source_tables": ["sets", "cards"]}, "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');"}
{"sample_id": 9831, "db_id": "card_games", "final": {"question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.", "sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL", "source_tables": ["legalities", "rulings", "cards"]}, "evidence": "pre-modern format refers to format = 'premodern' ;do not have multiple faces refers to side IS NULL"}
{"sample_id": 9862, "db_id": "card_games", "final": {"question": "Which foreign language used by \"A Pedra Fellwar\"?", "sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'", "source_tables": ["foreign_data"]}, "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'"}
{"sample_id": 9812, "db_id": "card_games", "final": {"question": "What are the colors of cards from ID 1-20? What are the format of these cards?", "sql": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20", "source_tables": ["legalities", "cards"]}, "evidence": "ID 1-20 refers to id BETWEEN 1 and 20;"}
{"sample_id": 9858, "db_id": "card_games", "final": {"question": "How many cards have frame effect as extendedart? List out the id of those cards.", "sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id", "source_tables": ["cards"]}, "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n"}
{"sample_id": 9932, "db_id": "card_games", "final": {"question": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?", "sql": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1", "source_tables": ["cards"]}, "evidence": "doesn't have multiple faces refers to side IS NULL; illustrator refers to artist"}
{"sample_id": 9884, "db_id": "card_games", "final": {"question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?", "sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'", "source_tables": ["set_translations", "cards"]}, "evidence": "Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'"}
{"sample_id": 9926, "db_id": "card_games", "final": {"question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.", "sql": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3", "source_tables": ["sets", "cards"]}, "evidence": "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'"}
{"sample_id": 9824, "db_id": "card_games", "final": {"question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.", "sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1", "source_tables": ["cards"]}, "evidence": "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0; Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100"}
{"sample_id": 9934, "db_id": "card_games", "final": {"question": "How many cards with unknown power that can't be found in foil is in duel deck A?", "sql": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'", "source_tables": ["cards"]}, "evidence": "unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a'"}
{"sample_id": 9767, "db_id": "card_games", "final": {"question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.", "sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL", "source_tables": ["legalities", "cards"]}, "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';"}
{"sample_id": 9878, "db_id": "card_games", "final": {"question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?", "sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'", "source_tables": ["cards"]}, "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes"}
{"sample_id": 9937, "db_id": "card_games", "final": {"question": "When was the oldest mythic card released and what are its legal play formats?", "sql": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1", "source_tables": ["legalities", "cards"]}, "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format"}
{"sample_id": 9786, "db_id": "card_games", "final": {"question": "What is the status of card \"Cloudchaser Eagle\"?", "sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'", "source_tables": ["legalities", "cards"]}, "evidence": "Cloudchaser Eagle is the name of card;"}
{"sample_id": 9869, "db_id": "card_games", "final": {"question": "Give the code of sets have expansion commander type?", "sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'", "source_tables": ["set_translations", "sets"]}, "evidence": "code of sets refers to setCode"}
{"sample_id": 9784, "db_id": "card_games", "final": {"question": "What is the description about the ruling of card \"Condemn\"?", "sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'", "source_tables": ["rulings", "cards"]}, "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;"}
{"sample_id": 9945, "db_id": "card_games", "final": {"question": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.", "sql": "SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1", "source_tables": ["set_translations", "sets"]}, "evidence": "AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(COUNT(language))"}
{"sample_id": 9832, "db_id": "card_games", "final": {"question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.", "sql": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'", "source_tables": ["legalities", "cards"]}, "evidence": "available in paper refers to availability = 'paper'"}
{"sample_id": 9848, "db_id": "card_games", "final": {"question": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.", "sql": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3", "source_tables": ["sets"]}, "evidence": "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''"}
{"sample_id": 9802, "db_id": "card_games", "final": {"question": "List the edhrecRank for cards with frame version 2015.", "sql": "SELECT edhrecRank FROM cards WHERE frameVersion = 2015", "source_tables": ["cards"]}, "evidence": ""}
{"sample_id": 10118, "db_id": "codebase_community", "final": {"question": "Count the number of posts with a tag specified as 'careers'.", "sql": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'", "source_tables": ["tags"]}, "evidence": "tag specified as 'careers' refers to TagName = 'careers';"}
{"sample_id": 10071, "db_id": "codebase_community", "final": {"question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"", "sql": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'", "source_tables": ["posts", "posthistory"]}, "evidence": ""}
{"sample_id": 10083, "db_id": "codebase_community", "final": {"question": "How old is the most influential user?", "sql": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "source_tables": ["users"]}, "evidence": "How old describes age; the most influential refers to user where MAX(Reputation);"}
{"sample_id": 10114, "db_id": "codebase_community", "final": {"question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.", "sql": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'", "source_tables": ["users", "badges"]}, "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';"}
{"sample_id": 10102, "db_id": "codebase_community", "final": {"question": "What is the average score of Stephen Turner's posts?", "sql": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'", "source_tables": ["users", "posts"]}, "evidence": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);"}
{"sample_id": 9957, "db_id": "codebase_community", "final": {"question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?", "sql": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1", "source_tables": ["users"]}, "evidence": "more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1"}
{"sample_id": 10125, "db_id": "codebase_community", "final": {"question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?", "sql": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15", "source_tables": ["tags"]}, "evidence": "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;"}
{"sample_id": 10036, "db_id": "codebase_community", "final": {"question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users", "sql": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'", "source_tables": ["users", "badges"]}, "evidence": "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100"}
{"sample_id": 10031, "db_id": "codebase_community", "final": {"question": "How many posts have a score of 10 on the list?", "sql": "SELECT COUNT(id) FROM posts WHERE Score = 10", "source_tables": ["posts"]}, "evidence": "score of 10 refers to Score = 10; post refers to Id"}
{"sample_id": 10016, "db_id": "codebase_community", "final": {"question": "Which user created post ID 1 and what is the reputation of this user?", "sql": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1", "source_tables": ["users", "comments"]}, "evidence": ""}
{"sample_id": 10131, "db_id": "codebase_community", "final": {"question": "In comments with 0 score, how many of the posts have view count lower than 5?", "sql": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0", "source_tables": ["comments", "posts"]}, "evidence": "view count lower than 5 refers to ViewCount < 5;"}
{"sample_id": 10112, "db_id": "codebase_community", "final": {"question": "Identify the latest badge awarded to the user with the display name Emmett.", "sql": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "the latest badge refers to Name FROM badges where MAX(Date);"}
{"sample_id": 10087, "db_id": "codebase_community", "final": {"question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?", "sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'", "source_tables": ["postlinks", "posts"]}, "evidence": "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)"}
{"sample_id": 10130, "db_id": "codebase_community", "final": {"question": "List the creation date and age of the user that commented with webiste.", "sql": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'", "source_tables": ["users", "comments"]}, "evidence": "commented with webiste refers to the value contains 'http://'"}
{"sample_id": 9985, "db_id": "codebase_community", "final": {"question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?", "sql": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025", "source_tables": ["comments", "posts"]}, "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'"}
{"sample_id": 10035, "db_id": "codebase_community", "final": {"question": "List out the dates that users who are located in Rochester, NY obtained their badges?", "sql": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'", "source_tables": ["users", "badges"]}, "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId"}
{"sample_id": 10044, "db_id": "codebase_community", "final": {"question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'", "source_tables": ["users", "badges"]}, "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId"}
{"sample_id": 10057, "db_id": "codebase_community", "final": {"question": "How many posts by Matt Parker have more than 4 votes?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4", "source_tables": ["votes", "users", "posts", "posthistory"]}, "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';"}
{"sample_id": 9954, "db_id": "codebase_community", "final": {"question": "Please list the display names of all the users whose accounts were created in the year 2011.", "sql": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'", "source_tables": ["users"]}, "evidence": "account created in the year 2011 refers to year(CreationDate) = 2011"}
{"sample_id": 10038, "db_id": "codebase_community", "final": {"question": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM", "sql": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'", "source_tables": ["comments", "posts"]}, "evidence": "created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'"}
{"sample_id": 10039, "db_id": "codebase_community", "final": {"question": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?", "sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'", "source_tables": ["comments", "posts"]}, "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33.0'"}
{"sample_id": 10040, "db_id": "codebase_community", "final": {"question": "List out the age of users who located in Vienna, Austria obtained the badge?", "sql": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'", "source_tables": ["users", "badges"]}, "evidence": "\"Vienna, Austria\" is the Location"}
{"sample_id": 10065, "db_id": "codebase_community", "final": {"question": "What are the display names and ages of user who got the highest in views?", "sql": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "source_tables": ["users"]}, "evidence": "the highest in views refers to MAX(Views);"}
{"sample_id": 9976, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who has obtained the most number of badges?", "sql": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "who obtained the most number of badges refers to UserID with Max(Count(Id))"}
{"sample_id": 10094, "db_id": "codebase_community", "final": {"question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4", "source_tables": ["users", "posts"]}, "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';"}
{"sample_id": 9959, "db_id": "codebase_community", "final": {"question": "How many posts does the user csgillespie own?", "sql": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user"}
{"sample_id": 10109, "db_id": "codebase_community", "final": {"question": "How many comments were added to the post with the highest score?", "sql": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1", "source_tables": ["comments", "posts"]}, "evidence": "the highest score refers to MAX(Score);"}
{"sample_id": 10119, "db_id": "codebase_community", "final": {"question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?", "sql": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'", "source_tables": ["users"]}, "evidence": ""}
{"sample_id": 9958, "db_id": "codebase_community", "final": {"question": "How many users with more than 10 views created their account after the year 2013?", "sql": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10", "source_tables": ["users"]}, "evidence": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013"}
{"sample_id": 10084, "db_id": "codebase_community", "final": {"question": "How many posts with votes that were created in 2011 have a bounty of 50?", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'", "source_tables": ["votes", "posts"]}, "evidence": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;"}
{"sample_id": 10077, "db_id": "codebase_community", "final": {"question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".", "sql": "SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'", "source_tables": ["postlinks", "posts"]}, "evidence": "Title = 'What are principal component scores?';"}
{"sample_id": 10061, "db_id": "codebase_community", "final": {"question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.", "sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'", "source_tables": ["tags", "users", "posthistory"]}, "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'"}
{"sample_id": 9988, "db_id": "codebase_community", "final": {"question": "For the owner user of post No. 65041, what is his/her reputation points?", "sql": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041", "source_tables": ["users", "posts"]}, "evidence": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation"}
{"sample_id": 10097, "db_id": "codebase_community", "final": {"question": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?", "sql": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000", "source_tables": ["users"]}, "evidence": "reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;"}
{"sample_id": 9991, "db_id": "codebase_community", "final": {"question": "Give the number of votes for the post about data visualization.", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'", "source_tables": ["votes", "posts"]}, "evidence": "About data visualization is the Title that contains 'data visualization';"}
{"sample_id": 10023, "db_id": "codebase_community", "final": {"question": "What is the score and the link type ID for post ID 395?", "sql": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395", "source_tables": ["postlinks", "posts"]}, "evidence": ""}
{"sample_id": 10081, "db_id": "codebase_community", "final": {"question": "How many tags have post count between 5,000 to 7,000?", "sql": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000", "source_tables": ["tags"]}, "evidence": "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;"}
{"sample_id": 10127, "db_id": "codebase_community", "final": {"question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".", "sql": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'", "source_tables": ["users", "comments"]}, "evidence": "Text = 'fine, you win :)';"}
{"sample_id": 10000, "db_id": "codebase_community", "final": {"question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?", "sql": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'", "source_tables": ["users", "posts"]}, "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;"}
{"sample_id": 10053, "db_id": "codebase_community", "final": {"question": "How many posts were created by Daniel Vassallo?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'", "source_tables": ["users", "posthistory"]}, "evidence": "DisplayName = 'Daniel Vassallo';"}
{"sample_id": 10012, "db_id": "codebase_community", "final": {"question": "Which user ID has the lowest view?", "sql": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )", "source_tables": ["users"]}, "evidence": "lowest views refers to Min(Views)"}
{"sample_id": 10004, "db_id": "codebase_community", "final": {"question": "List the title of posts which were edited by Vebjorn Ljosa.", "sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'", "source_tables": ["users", "posts"]}, "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId"}
{"sample_id": 10013, "db_id": "codebase_community", "final": {"question": "How many users are awarded with supporter badge during year 2011?", "sql": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'", "source_tables": ["badges"]}, "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011"}
{"sample_id": 10134, "db_id": "codebase_community", "final": {"question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?", "sql": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'", "source_tables": ["comments", "posts"]}, "evidence": "Title = 'Group differences on a five point Likert item';"}
{"sample_id": 10132, "db_id": "codebase_community", "final": {"question": "In posts with 1 comment, how many of the comments have 0 score?", "sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0", "source_tables": ["comments", "posts"]}, "evidence": "in posts with 1 comment refers to CommentCount = 1;"}
{"sample_id": 9996, "db_id": "codebase_community", "final": {"question": "Which user has the website URL listed at 'http://stackoverflow.com'", "sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'", "source_tables": ["users"]}, "evidence": "\"http://stackoverflow.com\" is the WebsiteUrl; user refers to DisplayName"}
{"sample_id": 9979, "db_id": "codebase_community", "final": {"question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?", "sql": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5", "source_tables": ["users", "posts"]}, "evidence": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100"}
{"sample_id": 10052, "db_id": "codebase_community", "final": {"question": "What is the name of tags used by John Salvatier's?", "sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'", "source_tables": ["users", "posts", "posthistory"]}, "evidence": "DisplayName = 'John Salvatier';"}
{"sample_id": 10120, "db_id": "codebase_community", "final": {"question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?", "sql": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'", "source_tables": ["posts"]}, "evidence": ""}
{"sample_id": 10088, "db_id": "codebase_community", "final": {"question": "Among the posts that were voted by user 1465, what is the id of the most valuable post?", "sql": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1", "source_tables": ["votes", "posts"]}, "evidence": "user 1465 refers to UserId = 1465; the most valuable post refers to MAX(FavoriteCount);"}
{"sample_id": 10121, "db_id": "codebase_community", "final": {"question": "When did the user known as 'IrishStat' create his or her account?", "sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'", "source_tables": ["users"]}, "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;"}
{"sample_id": 10049, "db_id": "codebase_community", "final": {"question": "How many users were adult?", "sql": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65", "source_tables": ["users"]}, "evidence": "adult refers to user where Age BETWEEN 19 and 65;"}
{"sample_id": 10124, "db_id": "codebase_community", "final": {"question": "How many posts have a score less than 20?", "sql": "SELECT COUNT(id) FROM posts WHERE Score < 20", "source_tables": ["posts"]}, "evidence": "score less than 20 refers to Score < 20;"}
{"sample_id": 10089, "db_id": "codebase_community", "final": {"question": "What is the title of the post with the oldest post link?", "sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1", "source_tables": ["postlinks", "posts"]}, "evidence": "the oldest post link refers to MIN(CreaionDate);"}
{"sample_id": 10110, "db_id": "codebase_community", "final": {"question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.", "sql": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0", "source_tables": ["posts"]}, "evidence": "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;"}
{"sample_id": 9963, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who is the owner of the most valuable post?", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "most valuable post refers to Max(FavoriteCount)"}
{"sample_id": 10068, "db_id": "codebase_community", "final": {"question": "Describe the post title which got positive comments and display names of the users who posted those comments.", "sql": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60", "source_tables": ["comments", "posts"]}, "evidence": "positive comments refer to Score > 60;"}
{"sample_id": 10116, "db_id": "codebase_community", "final": {"question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.", "sql": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10", "source_tables": ["users", "comments", "posts"]}, "evidence": "the latest comment refers to MAX(CreationDate);"}
{"sample_id": 10045, "db_id": "codebase_community", "final": {"question": "How many elders obtained the \"Supporter\" badge?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'", "source_tables": ["users", "badges"]}, "evidence": "\"Supporter\" is the Name of badge;\u00a0 elders refers to Age > 65"}
{"sample_id": 10111, "db_id": "codebase_community", "final": {"question": "Identify the display name and location of the user, who was the last to edit the post with ID 183.", "sql": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "last to edit refers to MAX(LastEditDate);"}
{"sample_id": 10076, "db_id": "codebase_community", "final": {"question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.", "sql": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'", "source_tables": ["tags", "users", "posts"]}, "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';"}
{"sample_id": 10014, "db_id": "codebase_community", "final": {"question": "How many users are awarded with more than 5 badges?", "sql": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5", "source_tables": ["badges"]}, "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId"}
{"sample_id": 9961, "db_id": "codebase_community", "final": {"question": "Who is the owner of the post \"Eliciting priors from experts\"?", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'", "source_tables": ["users", "posts"]}, "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName"}
{"sample_id": 10003, "db_id": "codebase_community", "final": {"question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'", "source_tables": ["users", "posts"]}, "evidence": "'Open source tools for visualizing multi-dimensional data' is the Title of Post; editor refers to DisplayName;"}
{"sample_id": 10033, "db_id": "codebase_community", "final": {"question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.", "sql": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'", "source_tables": ["users", "badges"]}, "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"}
{"sample_id": 10043, "db_id": "codebase_community", "final": {"question": "What are the name of badges that users who have the lowest reputation obtained?", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)", "source_tables": ["users", "badges"]}, "evidence": "lowest reputation refers to Min(Reputation); user refers to UserId"}
{"sample_id": 10115, "db_id": "codebase_community", "final": {"question": "Identify the number of posts and comments left by the user, who has the latest created user account.", "sql": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1", "source_tables": ["users", "comments", "posts"]}, "evidence": "the latest created user account refers to MAX(CreationDate);"}
{"sample_id": 9955, "db_id": "codebase_community", "final": {"question": "How many users last accessed the website after 2014/9/1?", "sql": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'", "source_tables": ["users"]}, "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'"}
{"sample_id": 10123, "db_id": "codebase_community", "final": {"question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.", "sql": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation", "source_tables": ["users", "posts"]}, "evidence": "The higher reputation the user has the more influence; percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation));"}
{"sample_id": 10085, "db_id": "codebase_community", "final": {"question": "What is the id of the youngest user?", "sql": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )", "source_tables": ["users"]}, "evidence": "the youngest user refers to MIN(Age);"}
{"sample_id": 10126, "db_id": "codebase_community", "final": {"question": "What is the excerpt post ID and wiki post ID of the tag named sample?", "sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'", "source_tables": ["tags"]}, "evidence": "tag named sample refers to TagName = 'sample';"}
{"sample_id": 9977, "db_id": "codebase_community", "final": {"question": "What is the average score of the posts owned by the user csgillespie?", "sql": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)"}
{"sample_id": 9982, "db_id": "codebase_community", "final": {"question": "Give the number of \"Revival\" badges.", "sql": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'", "source_tables": ["badges"]}, "evidence": "number refers to Id; 'Revival' is the Name of badge"}
{"sample_id": 10028, "db_id": "codebase_community", "final": {"question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.", "sql": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'", "source_tables": ["badges"]}, "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'"}
{"sample_id": 10103, "db_id": "codebase_community", "final": {"question": "Please list the users' display names whose posts had over 20000 views in 2011.", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000", "source_tables": ["users", "posts"]}, "evidence": "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;"}
{"sample_id": 10010, "db_id": "codebase_community", "final": {"question": "Give the total number of comments posted by user ID 13.", "sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13", "source_tables": ["comments"]}, "evidence": ""}
{"sample_id": 10070, "db_id": "codebase_community", "final": {"question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.", "sql": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150", "source_tables": ["users", "posts"]}, "evidence": "favorite count of more than 150 refers to FavoriteCount > 150;"}
{"sample_id": 10059, "db_id": "codebase_community", "final": {"question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.", "sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0", "source_tables": ["users", "posts", "posthistory"]}, "evidence": "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;"}
{"sample_id": 10001, "db_id": "codebase_community", "final": {"question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'", "sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'", "source_tables": ["comments", "posts"]}, "evidence": "\"How does gentle boosting differ from AdaBoost?\" is the Title of post; comments refers to Text"}
{"sample_id": 9986, "db_id": "codebase_community", "final": {"question": "Give the only one comment text of the post with parent id 107829.", "sql": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1", "source_tables": ["comments", "posts"]}, "evidence": "one comment refers to CommentCount = '1'"}
{"sample_id": 10047, "db_id": "codebase_community", "final": {"question": "How many users were from New York?", "sql": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'", "source_tables": ["users"]}, "evidence": "New York refers to Location;"}
{"sample_id": 10113, "db_id": "codebase_community", "final": {"question": "Identify the number of adult users who have cast over 5000 upvotes.", "sql": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000", "source_tables": ["users"]}, "evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;"}
{"sample_id": 9970, "db_id": "codebase_community", "final": {"question": "What is the location of the owner of the post \"Eliciting priors from experts\"?", "sql": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'", "source_tables": ["users", "posts"]}, "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post"}
{"sample_id": 9981, "db_id": "codebase_community", "final": {"question": "Indicate the creation date of the maximum number of votes.", "sql": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1", "source_tables": ["votes"]}, "evidence": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))"}
{"sample_id": 10019, "db_id": "codebase_community", "final": {"question": "How many users from India have the teacher badges?", "sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'", "source_tables": ["users", "badges"]}, "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge"}
{"sample_id": 10098, "db_id": "codebase_community", "final": {"question": "Please list all display names of users who are adults.", "sql": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65", "source_tables": ["users"]}, "evidence": "adults refer to users where Age BETWEEN 19 and 65;"}
{"sample_id": 10060, "db_id": "codebase_community", "final": {"question": "List all the name of users that obtained the Organizer Badges.", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.\"Name\" = 'Organizer'", "source_tables": ["users", "badges"]}, "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';"}
{"sample_id": 10105, "db_id": "codebase_community", "final": {"question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?", "sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId", "source_tables": ["users", "posts"]}, "evidence": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;"}
{"sample_id": 10073, "db_id": "codebase_community", "final": {"question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".", "sql": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'", "source_tables": ["postlinks", "posts"]}, "evidence": ""}
{"sample_id": 10032, "db_id": "codebase_community", "final": {"question": "What are the name of badge that users who have the highest reputation obtained?", "sql": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "highest reputation refers to Max(Reputation); user refers to UserId"}
{"sample_id": 9969, "db_id": "codebase_community", "final": {"question": "Among the posts owned by an elder user, how many of them have a score of over 19?", "sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65", "source_tables": ["users", "posts"]}, "evidence": "elder users refers to Age > 65; Score of over 19 refers to Score > = 20"}
{"sample_id": 9997, "db_id": "codebase_community", "final": {"question": "What is the badge name that user 'SilentGhost' obtained?", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'", "source_tables": ["users", "badges"]}, "evidence": "\"SilentGhost\" is the DisplayName of user;"}
{"sample_id": 9964, "db_id": "codebase_community", "final": {"question": "What is the total number of comments of all the posts owned by csgillespie?", "sql": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)"}
{"sample_id": 9990, "db_id": "codebase_community", "final": {"question": "Provide the display name of the user who made the vote No.6347.", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347", "source_tables": ["votes", "users"]}, "evidence": "vote no. 6347 refers to Id = '6347'"}
{"sample_id": 9966, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?", "sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'", "source_tables": ["users", "posts"]}, "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId"}
{"sample_id": 10090, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who acquired the highest amount of badges?", "sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1", "source_tables": ["users", "badges"]}, "evidence": "highest amount of badges refers to MAX(COUNT(Name));"}
{"sample_id": 10135, "db_id": "codebase_community", "final": {"question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?", "sql": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'", "source_tables": ["users", "comments"]}, "evidence": "commented \"R is also lazy evaluated.\" refers to Text of the comment;"}
{"sample_id": 9962, "db_id": "codebase_community", "final": {"question": "What is the title of the post that is owned by csgillespie and has the highest popularity?", "sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)"}
{"sample_id": 10051, "db_id": "codebase_community", "final": {"question": "Calculate the ratio of votes in 2010 and 2011.", "sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes", "source_tables": ["votes"]}, "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;"}
{"sample_id": 9956, "db_id": "codebase_community", "final": {"question": "What is the display name of the user who has the most number of views?", "sql": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "source_tables": ["users"]}, "evidence": "user who has the most number of view refers to Max(Views)"}
{"sample_id": 10007, "db_id": "codebase_community", "final": {"question": "How much is the total bounty amount of the post titled about 'data'", "sql": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'", "source_tables": ["votes", "posts"]}, "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)"}
{"sample_id": 10108, "db_id": "codebase_community", "final": {"question": "Identify the total number of posts with views above average.", "sql": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )", "source_tables": ["posts"]}, "evidence": "views above average refer to ViewCount > AVG(ViewCount);"}
{"sample_id": 10017, "db_id": "codebase_community", "final": {"question": "Which user have only one post history per post and having at least 1000 views?", "sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1", "source_tables": ["users", "posts", "posthistory"]}, "evidence": "having at least 1000 view refers to Views > = 1000; user refers to UserId"}
{"sample_id": 9989, "db_id": "codebase_community", "final": {"question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'", "source_tables": ["users", "posts"]}, "evidence": "\"Tiago Pasqualini\" is the DisplayName;"}
{"sample_id": 10117, "db_id": "codebase_community", "final": {"question": "How many users were awarded with 'Citizen Patrol' badge?", "sql": "SELECT COUNT(id) FROM badges WHERE \"Name\" = 'Citizen Patrol'", "source_tables": ["badges"]}, "evidence": "Citizen Patrol' is the name of the badge;"}
{"sample_id": 9992, "db_id": "codebase_community", "final": {"question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?", "sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'", "source_tables": ["users", "badges"]}, "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;"}
{"sample_id": 10104, "db_id": "codebase_community", "final": {"question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.", "sql": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1", "source_tables": ["users", "posts"]}, "evidence": "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;"}
{"sample_id": 10048, "db_id": "codebase_community", "final": {"question": "How many votes were made in 2010?", "sql": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'", "source_tables": ["votes"]}, "evidence": "YEAR(CreationDate) = 2010;"}
{"sample_id": 10054, "db_id": "codebase_community", "final": {"question": "How many votes were made by Harlan?", "sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'", "source_tables": ["votes", "users", "posthistory"]}, "evidence": "DisplayName = 'Harlan';"}
{"sample_id": 10078, "db_id": "codebase_community", "final": {"question": "Describe the display name of the parent ID for child post with the highest score.", "sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )", "source_tables": ["users", "posts"]}, "evidence": "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);"}
{"sample_id": 10072, "db_id": "codebase_community", "final": {"question": "Describe the last accessed date and location of the users who received the outliers badge.", "sql": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'", "source_tables": ["users", "badges"]}, "evidence": "Outliers is the name of the badge;"}
{"sample_id": 10180, "db_id": "superhero", "final": {"question": "Provide the hair colour of the human superhero who is 185 cm tall.", "sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'", "source_tables": ["race", "colour", "superhero"]}, "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;"}
{"sample_id": 10261, "db_id": "superhero", "final": {"question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.", "sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'", "source_tables": ["colour", "superhero"]}, "evidence": "weight less than 100 refers to weight_kg < 100"}
{"sample_id": 10215, "db_id": "superhero", "final": {"question": "Among the superheroes with the race of god/eternal, how many of them are male", "sql": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1", "source_tables": ["race", "gender", "superhero"]}, "evidence": "race \"god/eternal\" refers to race_id = 21; male refers to gender.id = 1"}
{"sample_id": 10241, "db_id": "superhero", "final": {"question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.", "sql": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL", "source_tables": ["colour", "superhero"]}, "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;"}
{"sample_id": 10258, "db_id": "superhero", "final": {"question": "What is the total number of superheroes that have John as their first name?", "sql": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'", "source_tables": ["superhero"]}, "evidence": "have John as their first name refers to full_name LIKE 'John%';"}
{"sample_id": 10226, "db_id": "superhero", "final": {"question": "Provide the name of superhero with superhero ID 294.", "sql": "SELECT superhero_name FROM superhero WHERE id = 294", "source_tables": ["superhero"]}, "evidence": "name of superhero refers to superhero_name; superhero ID 294 refers to superhero.id = 294;"}
{"sample_id": 10198, "db_id": "superhero", "final": {"question": "Provide the hero name and race of Charles Chandler.", "sql": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'", "source_tables": ["race", "superhero"]}, "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;"}
{"sample_id": 10206, "db_id": "superhero", "final": {"question": "Provide the full names of vampire heroes.", "sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'", "source_tables": ["race", "superhero"]}, "evidence": "vampire heroes refers to race = 'Vampire';"}
{"sample_id": 10166, "db_id": "superhero", "final": {"question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.", "sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id", "source_tables": ["publisher", "superhero"]}, "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))"}
{"sample_id": 10162, "db_id": "superhero", "final": {"question": "How many female superheroes have a strength value of 100?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'", "source_tables": ["hero_attribute", "attribute", "gender", "superhero"]}, "evidence": "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100"}
{"sample_id": 10267, "db_id": "superhero", "final": {"question": "List the power of superheroes with height greater than 80% of the average height of all superheroes.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);"}
{"sample_id": 10225, "db_id": "superhero", "final": {"question": "What is the power ID of cryokinesis?", "sql": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'", "source_tables": ["superpower"]}, "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';"}
{"sample_id": 10250, "db_id": "superhero", "final": {"question": "Count the fastest superheroes.", "sql": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100", "source_tables": ["hero_attribute", "attribute", "superhero"]}, "evidence": "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';"}
{"sample_id": 10169, "db_id": "superhero", "final": {"question": "What is the total number of superheroes without full name?", "sql": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL", "source_tables": ["superhero"]}, "evidence": "superheroes without full name refers to full_name IS NULL"}
{"sample_id": 10238, "db_id": "superhero", "final": {"question": "Provide the names of superheroes with attribute value between 75 to 80.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80", "source_tables": ["hero_attribute", "superhero"]}, "evidence": "names of superheroes refers to superhero_name; attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80;"}
{"sample_id": 10239, "db_id": "superhero", "final": {"question": "Give the race of the blue-haired male superhero.", "sql": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'", "source_tables": ["race", "colour", "gender", "superhero"]}, "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';"}
{"sample_id": 10172, "db_id": "superhero", "final": {"question": "What is the average weight of all female superheroes?", "sql": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'", "source_tables": ["gender", "superhero"]}, "evidence": "female refers to gender = 'Female'; average weight refers to AVG(weight_kg)"}
{"sample_id": 10265, "db_id": "superhero", "final": {"question": "List the hero ID of superheroes have intellegence as their power.", "sql": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'", "source_tables": ["superpower", "hero_power"]}, "evidence": "hero ID refers to superhero.id; have intelligence as their power refers to power_name = 'Intelligence';"}
{"sample_id": 10243, "db_id": "superhero", "final": {"question": "List down Ajax's superpowers.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;"}
{"sample_id": 10188, "db_id": "superhero", "final": {"question": "What is the hero's full name with the highest attribute in strength?", "sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1", "source_tables": ["hero_attribute", "attribute", "superhero"]}, "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';"}
{"sample_id": 10142, "db_id": "superhero", "final": {"question": "Please list the full names of all the superheroes with over 15 super powers.", "sql": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15", "source_tables": ["hero_power", "superhero"]}, "evidence": "15 super powers refers to COUNT(full_name) > 15"}
{"sample_id": 10144, "db_id": "superhero", "final": {"question": "What is the colour of Apocalypse's skin?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'", "source_tables": ["colour", "superhero"]}, "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id"}
{"sample_id": 10155, "db_id": "superhero", "final": {"question": "How many gold-eyed superheroes did Marvel Comics publish?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'", "source_tables": ["publisher", "colour", "superhero"]}, "evidence": "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'"}
{"sample_id": 10178, "db_id": "superhero", "final": {"question": "How many bad superheroes are there?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'", "source_tables": ["alignment", "superhero"]}, "evidence": "bad superheroes refers to alignment_id = Bad"}
{"sample_id": 10229, "db_id": "superhero", "final": {"question": "What is the superpowers of the superhero has Helen Parr as their full name?", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;"}
{"sample_id": 10151, "db_id": "superhero", "final": {"question": "What is the average height of the superheroes from Marvel Comics?", "sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; average height of the superheroes refers to AVG(height_cm)"}
{"sample_id": 10228, "db_id": "superhero", "final": {"question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'", "source_tables": ["colour", "superhero"]}, "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;"}
{"sample_id": 10208, "db_id": "superhero", "final": {"question": "How many heroes have the highest attribute value in strength?", "sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )", "source_tables": ["hero_attribute", "attribute"]}, "evidence": "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';"}
{"sample_id": 10159, "db_id": "superhero", "final": {"question": "What is Copycat's race?", "sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'", "source_tables": ["race", "superhero"]}, "evidence": "Copycat is the superhero_name;"}
{"sample_id": 10207, "db_id": "superhero", "final": {"question": "Describe the names of neutral alignment superheroes.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "source_tables": ["alignment", "superhero"]}, "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';"}
{"sample_id": 10170, "db_id": "superhero", "final": {"question": "What is the eye colour of superhero with superhero ID 75?", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75", "source_tables": ["colour", "superhero"]}, "evidence": "eye colour refers to colour where eye_colour_id = colour.id;"}
{"sample_id": 10242, "db_id": "superhero", "final": {"question": "How strong is the Hulk?", "sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'", "source_tables": ["hero_attribute", "attribute", "superhero"]}, "evidence": "how strong refers to attribute_value WHERE attribute_name = 'Strength'; the Hulk refers to superhero_name = 'Hulk';"}
{"sample_id": 10140, "db_id": "superhero", "final": {"question": "How many superheroes have the super power of \"Super Strength\"?", "sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'", "source_tables": ["superpower", "hero_power"]}, "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'"}
{"sample_id": 10164, "db_id": "superhero", "final": {"question": "How many vampire superheroes are there?", "sql": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'", "source_tables": ["race", "superhero"]}, "evidence": "vampire superheroes refers to race = 'Vampire'"}
{"sample_id": 10147, "db_id": "superhero", "final": {"question": "How many superheroes are published by Marvel Comics?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'"}
{"sample_id": 10246, "db_id": "superhero", "final": {"question": "Identify superheroes who can control wind and list their names in alphabetical order.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';"}
{"sample_id": 10219, "db_id": "superhero", "final": {"question": "Which superheroes have blue eyes with brown hair?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'", "source_tables": ["colour", "superhero"]}, "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;"}
{"sample_id": 10248, "db_id": "superhero", "final": {"question": "Identify the heaviest superhero in DC Comics.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1", "source_tables": ["publisher", "superhero"]}, "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;"}
{"sample_id": 10262, "db_id": "superhero", "final": {"question": "List the attribute value of the superhero named Aquababy.", "sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'", "source_tables": ["hero_attribute", "superhero"]}, "evidence": ""}
{"sample_id": 10175, "db_id": "superhero", "final": {"question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.", "sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'", "source_tables": ["colour", "superhero"]}, "evidence": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'"}
{"sample_id": 10173, "db_id": "superhero", "final": {"question": "List down at least five superpowers of male superheroes.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5", "source_tables": ["superpower", "hero_power", "gender", "superhero"]}, "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;"}
{"sample_id": 10205, "db_id": "superhero", "final": {"question": "Provide the eye colours of the heroes whose skin colours are gold.", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'", "source_tables": ["colour", "superhero"]}, "evidence": "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;"}
{"sample_id": 10227, "db_id": "superhero", "final": {"question": "List the full names of superheroes with missing weight.", "sql": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)", "source_tables": ["superhero"]}, "evidence": "missing weight refers to weight_kg = 0 OR weight_kg = NULL;"}
{"sample_id": 10157, "db_id": "superhero", "final": {"question": "How many superheroes with blonde hair are there?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'", "source_tables": ["colour", "superhero"]}, "evidence": "superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id"}
{"sample_id": 10145, "db_id": "superhero", "final": {"question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'", "source_tables": ["superpower", "hero_power", "colour", "superhero"]}, "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'"}
{"sample_id": 10212, "db_id": "superhero", "final": {"question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.", "sql": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE", "source_tables": ["superhero"]}, "evidence": "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;"}
{"sample_id": 10149, "db_id": "superhero", "final": {"question": "Who is the publisher of Sauron?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'", "source_tables": ["publisher", "superhero"]}, "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'"}
{"sample_id": 10191, "db_id": "superhero", "final": {"question": "Which superhero has the most durability published by Dark Horse Comics?", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1", "source_tables": ["hero_attribute", "publisher", "attribute", "superhero"]}, "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';"}
{"sample_id": 10165, "db_id": "superhero", "final": {"question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.", "sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'", "source_tables": ["alignment", "publisher", "superhero"]}, "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)"}
{"sample_id": 10139, "db_id": "superhero", "final": {"question": "Please list all the superpowers of 3-D Man.", "sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name"}
{"sample_id": 10196, "db_id": "superhero", "final": {"question": "Which group does superhero A-Bomb belong to?", "sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'", "source_tables": ["race", "superhero"]}, "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';"}
{"sample_id": 10177, "db_id": "superhero", "final": {"question": "List down at least five full name of Demi-God superheroes.", "sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'", "source_tables": ["race", "superhero"]}, "evidence": "Demi-God superheroes refers to race = 'Demi-God'"}
{"sample_id": 10251, "db_id": "superhero", "final": {"question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.", "sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id", "source_tables": ["publisher", "superhero"]}, "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));"}
{"sample_id": 10148, "db_id": "superhero", "final": {"question": "Rank heroes published by Marvel Comics by their height in descending order.", "sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'", "source_tables": ["publisher", "superhero"]}, "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'"}
{"sample_id": 10240, "db_id": "superhero", "final": {"question": "Among the bad superheroes, what is the percentage of female superheroes?", "sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'", "source_tables": ["alignment", "gender", "superhero"]}, "evidence": "bad superheroes refers to alignment.id = 2; percentage = MULTIPLY(DIVIDE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0); female refers to gender.id = 2;"}
{"sample_id": 10247, "db_id": "superhero", "final": {"question": "Identify the gender of the superhero who has the ability of Phoenix Force.", "sql": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'", "source_tables": ["superpower", "hero_power", "gender", "superhero"]}, "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';"}
{"sample_id": 10179, "db_id": "superhero", "final": {"question": "Identify the race of the superhero who weighed 169 kg.", "sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169", "source_tables": ["race", "superhero"]}, "evidence": "weighed 169 kg refers to weight_kg = 169"}
{"sample_id": 10185, "db_id": "superhero", "final": {"question": "Indicate the attribute value of superhero Abomination.", "sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'", "source_tables": ["hero_attribute", "superhero"]}, "evidence": "Abomination refers to superhero_name = 'Abomination';"}
{"sample_id": 10156, "db_id": "superhero", "final": {"question": "What is the publisher's name of Blue Beetle II?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'", "source_tables": ["publisher", "superhero"]}, "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'"}
{"sample_id": 10174, "db_id": "superhero", "final": {"question": "Give the name of the alien superheroes.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'", "source_tables": ["race", "superhero"]}, "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;"}
{"sample_id": 10152, "db_id": "superhero", "final": {"question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.", "sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)", "source_tables": ["superpower", "publisher", "hero_power", "superhero"]}, "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';"}
{"sample_id": 10224, "db_id": "superhero", "final": {"question": "Who is the tallest superhero?", "sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1", "source_tables": ["superhero"]}, "evidence": "who refers to superhero_name; tallest superhero refers to MAX(height_cm);"}
{"sample_id": 10176, "db_id": "superhero", "final": {"question": "What is the superpower of hero ID 56?", "sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56", "source_tables": ["superpower", "hero_power"]}, "evidence": "superpower refers to hero_power"}
{"sample_id": 10264, "db_id": "superhero", "final": {"question": "Calculate the average height of all neutral superheroes.", "sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "source_tables": ["alignment", "superhero"]}, "evidence": ""}
{"sample_id": 10244, "db_id": "superhero", "final": {"question": "How many green-skinned villains are there in the superhero universe?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'", "source_tables": ["alignment", "colour", "superhero"]}, "evidence": "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';"}
{"sample_id": 10203, "db_id": "superhero", "final": {"question": "Provide the heights of the heroes whose eye colours are amber.", "sql": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'", "source_tables": ["colour", "superhero"]}, "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;"}
{"sample_id": 10234, "db_id": "superhero", "final": {"question": "List down at least five full names of superheroes with blue eyes.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5", "source_tables": ["colour", "superhero"]}, "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;"}
{"sample_id": 10236, "db_id": "superhero", "final": {"question": "List the skin colour of the superheroes with 100 attribute value.", "sql": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100", "source_tables": ["hero_attribute", "colour", "superhero"]}, "evidence": "skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;"}
{"sample_id": 10186, "db_id": "superhero", "final": {"question": "What are the superpowers of heroes with ID 1?", "sql": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1", "source_tables": ["superpower", "hero_power"]}, "evidence": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;"}
{"sample_id": 10260, "db_id": "superhero", "final": {"question": "Provide the full name of the superhero named Alien.", "sql": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'", "source_tables": ["superhero"]}, "evidence": ""}
{"sample_id": 10266, "db_id": "superhero", "final": {"question": "Give the eye colour of Blackwulf.", "sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'", "source_tables": ["colour", "superhero"]}, "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';"}
{"sample_id": 10199, "db_id": "superhero", "final": {"question": "What is the gender of Agent 13 hero?", "sql": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'", "source_tables": ["gender", "superhero"]}, "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';"}
{"sample_id": 10193, "db_id": "superhero", "final": {"question": "List the name of superheroes with flight power.", "sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'", "source_tables": ["superpower", "hero_power", "superhero"]}, "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';"}
{"sample_id": 10143, "db_id": "superhero", "final": {"question": "How many superheroes have blue eyes?", "sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'", "source_tables": ["colour", "superhero"]}, "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;"}
{"sample_id": 10223, "db_id": "superhero", "final": {"question": "Find the ratio between male superheroes and female superheroes.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id", "source_tables": ["gender", "superhero"]}, "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';"}
{"sample_id": 10211, "db_id": "superhero", "final": {"question": "Find the average weight of the heroes who are aliens.", "sql": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'", "source_tables": ["race", "superhero"]}, "evidence": "average = AVG(weight_kg); aliens refers to race = 'Alien';"}
{"sample_id": 10231, "db_id": "superhero", "final": {"question": "What is the publisher name of the superhero ID 38?", "sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38", "source_tables": ["publisher", "superhero"]}, "evidence": "superhero ID 38 refers to superhero.id = 38;"}
{"sample_id": 10374, "db_id": "formula_1", "final": {"question": "Which constructors have been ranked 1?", "sql": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1", "source_tables": ["results", "constructors"]}, "evidence": ""}
{"sample_id": 10396, "db_id": "formula_1", "final": {"question": "State the racing year which has the fastest lap time?", "sql": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL", "source_tables": ["results", "races"]}, "evidence": "'has the fastest lap time?' refers to fastestLapTime has values"}
{"sample_id": 10440, "db_id": "formula_1", "final": {"question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?", "sql": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'", "source_tables": ["pitstops", "drivers"]}, "evidence": "average time in milliseconds spent at pit stop refers to AVG(milliseconds)"}
{"sample_id": 10368, "db_id": "formula_1", "final": {"question": "Please list the location coordinates of the US circuits.", "sql": "SELECT lat, lng FROM circuits WHERE country = 'USA'", "source_tables": ["circuits"]}, "evidence": "location coordinates refers to (lat, lng); the US refers to country = 'USA';"}
{"sample_id": 10411, "db_id": "formula_1", "final": {"question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.", "sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'", "source_tables": ["results", "races"]}, "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";"}
{"sample_id": 10412, "db_id": "formula_1", "final": {"question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.", "sql": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'", "source_tables": ["results", "constructors", "races"]}, "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url"}
{"sample_id": 10316, "db_id": "formula_1", "final": {"question": "What is the best lap time recorded? List the driver and race with such recorded lap time.", "sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1", "source_tables": ["laptimes", "drivers", "races"]}, "evidence": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name"}
{"sample_id": 10389, "db_id": "formula_1", "final": {"question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?", "sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'", "source_tables": ["drivers"]}, "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country"}
{"sample_id": 10342, "db_id": "formula_1", "final": {"question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.", "sql": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'", "source_tables": ["circuits", "races"]}, "evidence": ""}
{"sample_id": 10324, "db_id": "formula_1", "final": {"question": "Which race was Alex Yoong in when he was in track number less than 20?", "sql": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20", "source_tables": ["drivers", "driverstandings", "races"]}, "evidence": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20"}
{"sample_id": 10272, "db_id": "formula_1", "final": {"question": "Please give the name of the race held on the circuits in Germany.", "sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'", "source_tables": ["circuits", "races"]}, "evidence": "Germany is a name of country;"}
{"sample_id": 10313, "db_id": "formula_1", "final": {"question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.", "sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC", "source_tables": ["drivers", "driverstandings", "races"]}, "evidence": ""}
{"sample_id": 10301, "db_id": "formula_1", "final": {"question": "For the driver who set the fastest lap speed, what is his nationality?", "sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "the fastest lap speed refers to (MAX) fastestLapSpeed;"}
{"sample_id": 10377, "db_id": "formula_1", "final": {"question": "What is the average time in seconds of champion for each year, before year 1975?", "sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL", "source_tables": ["results", "champion_time", "time_in_seconds", "races"]}, "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;"}
{"sample_id": 10296, "db_id": "formula_1", "final": {"question": "Who finished second in the San Marino Grand Prix in 2006?", "sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2", "source_tables": ["results", "drivers", "races"]}, "evidence": "finished second refers to position = 2;"}
{"sample_id": 10318, "db_id": "formula_1", "final": {"question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.", "sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010", "source_tables": ["drivers", "driverstandings", "races"]}, "evidence": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010"}
{"sample_id": 10269, "db_id": "formula_1", "final": {"question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?", "sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1", "source_tables": ["drivers", "qualifying"]}, "evidence": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);"}
{"sample_id": 10439, "db_id": "formula_1", "final": {"question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.", "sql": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'", "source_tables": ["laptimes", "circuits", "races"]}, "evidence": "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)"}
{"sample_id": 10347, "db_id": "formula_1", "final": {"question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.", "sql": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'", "source_tables": ["circuits", "races"]}, "evidence": "link of the website refers to url"}
{"sample_id": 10352, "db_id": "formula_1", "final": {"question": "In which Formula_1 race did Lewis Hamilton rank the highest?", "sql": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )", "source_tables": ["results", "drivers", "races"]}, "evidence": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10302, "db_id": "formula_1", "final": {"question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?", "sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'", "source_tables": ["results", "drivers"]}, "evidence": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))"}
{"sample_id": 10328, "db_id": "formula_1", "final": {"question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?", "sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1", "source_tables": ["drivers", "driverstandings", "races"]}, "evidence": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10392, "db_id": "formula_1", "final": {"question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.", "sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3", "source_tables": ["pitstops", "drivers"]}, "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);"}
{"sample_id": 10338, "db_id": "formula_1", "final": {"question": "Please list the surnames of all the Italian drivers.", "sql": "SELECT surname FROM drivers WHERE nationality = 'Italian'", "source_tables": ["drivers"]}, "evidence": "Italian refers to nationality = 'italian'"}
{"sample_id": 10432, "db_id": "formula_1", "final": {"question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?", "sql": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'", "source_tables": ["laptimes", "drivers"]}, "evidence": "lap recod means the fastest time recorded which refers to time"}
{"sample_id": 10420, "db_id": "formula_1", "final": {"question": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?", "sql": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings", "source_tables": ["driverstandings"]}, "evidence": "victories refer to wins; 91st refers to points\n\n"}
{"sample_id": 10367, "db_id": "formula_1", "final": {"question": "How many circuits are there in Adelaide, Australia?", "sql": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'", "source_tables": ["circuits"]}, "evidence": "Australia is the country; Melbourne is the location of circuit;"}
{"sample_id": 10418, "db_id": "formula_1", "final": {"question": "What is the annual average number of races held during the first 10 years of the 21st century?", "sql": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'", "source_tables": ["races"]}, "evidence": "races in date between '2000-01-01' and '2010-12-31'"}
{"sample_id": 10435, "db_id": "formula_1", "final": {"question": "What is the lap record for the Austrian Grand Prix Circuit?", "sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'", "source_tables": ["results", "circuits", "races", "fastest_lap_times"]}, "evidence": "lap record means the fastest time recorded which refers to time"}
{"sample_id": 10315, "db_id": "formula_1", "final": {"question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.", "sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3", "source_tables": ["drivers", "driverstandings", "races"]}, "evidence": ""}
{"sample_id": 10303, "db_id": "formula_1", "final": {"question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?", "sql": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'", "source_tables": ["results", "races"]}, "evidence": "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'"}
{"sample_id": 10362, "db_id": "formula_1", "final": {"question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?", "sql": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )", "source_tables": ["results", "races"]}, "evidence": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value."}
{"sample_id": 10273, "db_id": "formula_1", "final": {"question": "Please list the positions of the circuits built by the constructor Renault.", "sql": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "Renault is a name of constructor;"}
{"sample_id": 10275, "db_id": "formula_1", "final": {"question": "Please give the names of the races held on the circuits in Spain.", "sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'", "source_tables": ["circuits", "races"]}, "evidence": "Spain is a name of country;"}
{"sample_id": 10329, "db_id": "formula_1", "final": {"question": "List all races in 2017 and the hosting country order by date of the event.", "sql": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC", "source_tables": ["circuits", "races"]}, "evidence": ""}
{"sample_id": 10428, "db_id": "formula_1", "final": {"question": "Among all the lap records set on various circuits, what is the time for the fastest one?", "sql": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1", "source_tables": ["laptimes"]}, "evidence": ""}
{"sample_id": 10285, "db_id": "formula_1", "final": {"question": "Show me the season page of year when the race No. 901 took place.", "sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901", "source_tables": ["seasons", "races"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10386, "db_id": "formula_1", "final": {"question": "List out the code for drivers who have nationality in America.", "sql": "SELECT code FROM drivers WHERE Nationality = 'American'", "source_tables": ["drivers"]}, "evidence": "nationality = 'America'"}
{"sample_id": 10283, "db_id": "formula_1", "final": {"question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?", "sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'", "source_tables": ["drivers", "qualifying"]}, "evidence": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'"}
{"sample_id": 10410, "db_id": "formula_1", "final": {"question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.", "sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3", "source_tables": ["pitstops", "drivers"]}, "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));"}
{"sample_id": 10371, "db_id": "formula_1", "final": {"question": "Which constructor has the highest point?", "sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1", "source_tables": ["constructors", "constructorstandings"]}, "evidence": ""}
{"sample_id": 10293, "db_id": "formula_1", "final": {"question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?", "sql": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'", "source_tables": ["drivers", "qualifying"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10369, "db_id": "formula_1", "final": {"question": "How many British drivers were born after 1980?", "sql": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'", "source_tables": ["drivers"]}, "evidence": "born after 1980 refers to year (dob) >1980;"}
{"sample_id": 10289, "db_id": "formula_1", "final": {"question": "For the driver who set the fastest lap speed in race No.933, where does he come from?", "sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "fastest lap speed refers to MAX(fastestLapSpeed);"}
{"sample_id": 10344, "db_id": "formula_1", "final": {"question": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?", "sql": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'", "source_tables": ["circuits", "races"]}, "evidence": ""}
{"sample_id": 10307, "db_id": "formula_1", "final": {"question": "State the name and date of the last round of race in year 1999.", "sql": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1", "source_tables": ["races"]}, "evidence": "the last round refers to max(round);"}
{"sample_id": 10312, "db_id": "formula_1", "final": {"question": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?", "sql": "SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'", "source_tables": ["circuits", "races"]}, "evidence": "British Grand Prix is the name of race; British refers to the United Kindom"}
{"sample_id": 10391, "db_id": "formula_1", "final": {"question": "How many British drivers who were born in 1980?", "sql": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'", "source_tables": ["drivers"]}, "evidence": "born in 1980 refers to year(dob) = 1980;"}
{"sample_id": 10334, "db_id": "formula_1", "final": {"question": "What's the reference name of Marina Bay Street Circuit?", "sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'", "source_tables": ["circuits"]}, "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'"}
{"sample_id": 10309, "db_id": "formula_1", "final": {"question": "Name the races in year 2017 that are not hosted in year 2000.", "sql": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )", "source_tables": ["races"]}, "evidence": "not hosted means not in;"}
{"sample_id": 10424, "db_id": "formula_1", "final": {"question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.", "sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1", "source_tables": ["drivers", "driverstandings", "races"]}, "evidence": "full name refers to forename+surname; Youngest racer = MAX(dob)"}
{"sample_id": 10438, "db_id": "formula_1", "final": {"question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?", "sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId", "source_tables": ["pitstops", "circuits", "results", "races", "fastest_lap_times", "lap_record_race"]}, "evidence": "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration"}
{"sample_id": 10401, "db_id": "formula_1", "final": {"question": "What race number has the most finishers?", "sql": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1", "source_tables": ["results"]}, "evidence": "finisher refers to time is not null;"}
{"sample_id": 10271, "db_id": "formula_1", "final": {"question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?", "sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'", "source_tables": ["circuits", "races"]}, "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;"}
{"sample_id": 10433, "db_id": "formula_1", "final": {"question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.", "sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20", "source_tables": ["lap_times_in_seconds", "drivers", "laptimes"]}, "evidence": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname"}
{"sample_id": 10323, "db_id": "formula_1", "final": {"question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.", "sql": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'", "source_tables": ["circuits", "races"]}, "evidence": "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005"}
{"sample_id": 10405, "db_id": "formula_1", "final": {"question": "Which of the Italian constructor got the highest point to date? Give its introduction website?", "sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1", "source_tables": ["constructors", "constructorstandings"]}, "evidence": "introduction website refers to url; Italian is a nationality"}
{"sample_id": 10358, "db_id": "formula_1", "final": {"question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?", "sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'", "source_tables": ["results", "drivers", "races"]}, "evidence": ""}
{"sample_id": 10288, "db_id": "formula_1", "final": {"question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.", "sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'", "source_tables": ["laptimes", "drivers"]}, "evidence": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;"}
{"sample_id": 10394, "db_id": "formula_1", "final": {"question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.", "sql": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL", "source_tables": ["results", "drivers"]}, "evidence": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values"}
{"sample_id": 10310, "db_id": "formula_1", "final": {"question": "In which country was the first European Grand Prix hosted? Name the circuit and location.", "sql": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1", "source_tables": ["circuits", "races"]}, "evidence": "the first refers to min(year);"}
{"sample_id": 10427, "db_id": "formula_1", "final": {"question": "What was the longest time a driver had ever spent at a pit stop?", "sql": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1", "source_tables": ["pitstops"]}, "evidence": "longest time spent at pitstop refers to MAX(duration)"}
{"sample_id": 10270, "db_id": "formula_1", "final": {"question": "Please list the year during which the race is held on circuits in Shanghai.", "sql": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'", "source_tables": ["circuits", "races"]}, "evidence": "Shanghai is a name of location;"}
{"sample_id": 10322, "db_id": "formula_1", "final": {"question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.", "sql": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006", "source_tables": ["circuits", "races"]}, "evidence": ""}
{"sample_id": 10304, "db_id": "formula_1", "final": {"question": "Which year was the first Singapore Grand Prix?", "sql": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1", "source_tables": ["races"]}, "evidence": "the first race refers to race happened in min(year);"}
{"sample_id": 10297, "db_id": "formula_1", "final": {"question": "Show me the season page of year when the race No. 901 took place.", "sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901", "source_tables": ["seasons", "races"]}, "evidence": "the season page refers to url; race number refers to raceId;"}
{"sample_id": 10379, "db_id": "formula_1", "final": {"question": "How many Italian drivers haven't finished the race?", "sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL", "source_tables": ["results", "drivers"]}, "evidence": "haven't finished the race refers to time is null;"}
{"sample_id": 10306, "db_id": "formula_1", "final": {"question": "List the names of all races that occurred in the earliest recorded year and month.", "sql": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )", "source_tables": ["races"]}, "evidence": "earliest recorded year and month refers to year = year(min(date)) and month = month(min(date));"}
{"sample_id": 10402, "db_id": "formula_1", "final": {"question": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.", "sql": "SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL", "source_tables": ["drivers", "qualifying"]}, "evidence": "passed the second qualifying lap refers to q2 is not null; birthday refers to dob; reference name of drivers refers to driverRef; race no. refers to raceId;"}
{"sample_id": 10365, "db_id": "formula_1", "final": {"question": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?", "sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008", "source_tables": ["results", "races"]}, "evidence": "completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))"}
{"sample_id": 10325, "db_id": "formula_1", "final": {"question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?", "sql": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'", "source_tables": ["drivers", "driverstandings", "circuits", "races"]}, "evidence": "win from races refers to max(points)"}
{"sample_id": 10274, "db_id": "formula_1", "final": {"question": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?", "sql": "SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010", "source_tables": ["circuits", "races"]}, "evidence": ""}
{"sample_id": 10298, "db_id": "formula_1", "final": {"question": "For the race happened in 2015/11/29, how many drivers did not finish the game?", "sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL", "source_tables": ["results", "races"]}, "evidence": "game and race are synonyms; drivers who didn't finish the race should have record in time;"}
{"sample_id": 10287, "db_id": "formula_1", "final": {"question": "For all the drivers who finished the game in race No. 592, who is the oldest?", "sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10321, "db_id": "formula_1", "final": {"question": "List circuits which host 4 f1 races from year 1990 to 2000.", "sql": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4", "source_tables": ["circuits", "races"]}, "evidence": "from year 1990 to 2000 refers to year(date) between 1990 and 2000;"}
{"sample_id": 10399, "db_id": "formula_1", "final": {"question": "From race no. 50 to 100, how many finishers have been disqualified?", "sql": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50", "source_tables": ["results"]}, "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;"}
{"sample_id": 10441, "db_id": "formula_1", "final": {"question": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?", "sql": "SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'", "source_tables": ["laptimes", "circuits", "races"]}, "evidence": "average = AVG(milliseconds)"}
{"sample_id": 10345, "db_id": "formula_1", "final": {"question": "How many Formula_1 races took place on the circuits in Italy?", "sql": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'", "source_tables": ["circuits", "races"]}, "evidence": ""}
{"sample_id": 10320, "db_id": "formula_1", "final": {"question": "How old is the youngest Japanese driver? What is his name?", "sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1", "source_tables": ["drivers"]}, "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);"}
{"sample_id": 10343, "db_id": "formula_1", "final": {"question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.", "sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'", "source_tables": ["circuits", "races"]}, "evidence": "more information refers to url"}
{"sample_id": 10337, "db_id": "formula_1", "final": {"question": "Which country is the oldest driver from?", "sql": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1", "source_tables": ["drivers"]}, "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10305, "db_id": "formula_1", "final": {"question": "How many races were there in 2005? Name all the races in descending order.", "sql": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC", "source_tables": ["races"]}, "evidence": ""}
{"sample_id": 10314, "db_id": "formula_1", "final": {"question": "State the driver with the most points scored. Find his full name with that points.", "sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1", "source_tables": ["drivers", "driverstandings", "races"]}, "evidence": "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10349, "db_id": "formula_1", "final": {"question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.", "sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1", "source_tables": ["results", "drivers"]}, "evidence": ""}
{"sample_id": 10382, "db_id": "formula_1", "final": {"question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?", "sql": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'", "source_tables": ["results", "races"]}, "evidence": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);"}
{"sample_id": 10381, "db_id": "formula_1", "final": {"question": "What is the fastest lap number of the champion in 2009?", "sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'", "source_tables": ["results", "races"]}, "evidence": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\""}
{"sample_id": 10311, "db_id": "formula_1", "final": {"question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?", "sql": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1", "source_tables": ["circuits", "races"]}, "evidence": "the last refers to max(year);"}
{"sample_id": 10284, "db_id": "formula_1", "final": {"question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?", "sql": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL", "source_tables": ["results", "drivers", "races"]}, "evidence": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);"}
{"sample_id": 10387, "db_id": "formula_1", "final": {"question": "List out the Id number of races which were hold in 2009.", "sql": "SELECT raceId FROM races WHERE year = 2009", "source_tables": ["races"]}, "evidence": ""}
{"sample_id": 10295, "db_id": "formula_1", "final": {"question": "What is the actual finish time for Bruce McLaren in the race No.743?", "sql": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'", "source_tables": ["results", "drivers"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10319, "db_id": "formula_1", "final": {"question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.", "sql": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1", "source_tables": ["drivers", "driverstandings"]}, "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);"}
{"sample_id": 10340, "db_id": "formula_1", "final": {"question": "What's Lewis Hamilton's reference name?", "sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'", "source_tables": ["drivers"]}, "evidence": "reference name refers to driverRef"}
{"sample_id": 10327, "db_id": "formula_1", "final": {"question": "What is Eddie Irvine's average points scored in year 2000?", "sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000", "source_tables": ["drivers", "driverstandings", "races"]}, "evidence": "average points = AVG(points where year = 2000)"}
{"sample_id": 10398, "db_id": "formula_1", "final": {"question": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.", "sql": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5", "source_tables": ["laptimes"]}, "evidence": "fastest time refers to Min(time);"}
{"sample_id": 10308, "db_id": "formula_1", "final": {"question": "Which year has the most number of races?", "sql": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1", "source_tables": ["races"]}, "evidence": "the most number of races refers to max(round);"}
{"sample_id": 10277, "db_id": "formula_1", "final": {"question": "Where can I find the information about the races held on Sepang International Circuit?", "sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'", "source_tables": ["circuits", "races"]}, "evidence": "information about races refers to url;"}
{"sample_id": 10282, "db_id": "formula_1", "final": {"question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?", "sql": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'", "source_tables": ["drivers", "qualifying"]}, "evidence": "race number refers to raceId;"}
{"sample_id": 10353, "db_id": "formula_1", "final": {"question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?", "sql": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1", "source_tables": ["results", "races"]}, "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';"}
{"sample_id": 10326, "db_id": "formula_1", "final": {"question": "State the race and year of race in which Michael Schumacher had his fastest lap.", "sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1", "source_tables": ["laptimes", "drivers", "races"]}, "evidence": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;"}
{"sample_id": 10430, "db_id": "formula_1", "final": {"question": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?", "sql": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'", "source_tables": ["pitstops", "drivers", "races"]}, "evidence": ""}
{"sample_id": 10355, "db_id": "formula_1", "final": {"question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?", "sql": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008", "source_tables": ["results", "drivers", "races"]}, "evidence": "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';"}
{"sample_id": 10291, "db_id": "formula_1", "final": {"question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?", "sql": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1", "source_tables": ["constructors", "constructorresults"]}, "evidence": "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;"}
{"sample_id": 10286, "db_id": "formula_1", "final": {"question": "For the race happened on 2015/11/29, how many drivers finished the game?", "sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL", "source_tables": ["results", "races"]}, "evidence": "game and race are synonyms; drivers who finished the race should have record in time;"}
{"sample_id": 10333, "db_id": "formula_1", "final": {"question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?", "sql": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1", "source_tables": ["circuits"]}, "evidence": "higher latitude refers to max(lat)"}
{"sample_id": 10488, "db_id": "european_football_2", "final": {"question": "What is the passing class of CLB team?", "sql": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'", "source_tables": ["team_attributes", "team"]}, "evidence": "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';"}
{"sample_id": 10484, "db_id": "european_football_2", "final": {"question": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.\"date\", 1, 4) BETWEEN '2008' AND '2010'", "source_tables": ["player_attributes", "player"]}, "evidence": "overall_rating > 80; from 2008 to 2010 refers to strftime('%Y', date) BETWEEN '2008' AND '2010';"}
{"sample_id": 10458, "db_id": "european_football_2", "final": {"question": "List the long name of teams with above-average build-up play passing in 2012.", "sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.\"date\", 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.\"date\") = '2012')", "source_tables": ["team_attributes", "team"]}, "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; "}
{"sample_id": 10494, "db_id": "european_football_2", "final": {"question": "What is the average overall rating of the football player Aaron Doran?", "sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'", "source_tables": ["player_attributes", "player"]}, "evidence": "average overall rating = AVG(overall_rating);"}
{"sample_id": 10504, "db_id": "european_football_2", "final": {"question": "Please list the leagues from Germany.", "sql": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'", "source_tables": ["league", "country"]}, "evidence": "Germany refers to Country.name = 'Germany';"}
{"sample_id": 10454, "db_id": "european_football_2", "final": {"question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.", "sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id", "source_tables": ["match", "league"]}, "evidence": " league with highest matches of all time refers to MAX(COUNT(league_id));"}
{"sample_id": 10528, "db_id": "european_football_2", "final": {"question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.", "sql": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'", "source_tables": ["player_attributes", "player"]}, "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'"}
{"sample_id": 10548, "db_id": "european_football_2", "final": {"question": "State the name of players who came from Belgium.", "sql": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'", "source_tables": ["player", "match", "country"]}, "evidence": "name of players refers to player_name; Belgium is name of country"}
{"sample_id": 10537, "db_id": "european_football_2", "final": {"question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?", "sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2013-07-12'", "source_tables": ["player_attributes", "player"]}, "evidence": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100"}
{"sample_id": 10539, "db_id": "european_football_2", "final": {"question": "What are the player api id of 10 heaviest players?", "sql": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10", "source_tables": ["player"]}, "evidence": "heaviest refers to MAX(weight)"}
{"sample_id": 10474, "db_id": "european_football_2", "final": {"question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?", "sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'", "source_tables": ["player_attributes", "player"]}, "evidence": "weight < 130; preferred foot in attacking refers to preferred_foot; preferred_foot = 'left';"}
{"sample_id": 10547, "db_id": "european_football_2", "final": {"question": "Among the players with finishing rate of 1, pick the eldest player and state the player's name.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.finishing = 1 ORDER BY t1.birthday ASC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "eldest player refers to MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday))); finishing rate of 1 refers to finishing = 1"}
{"sample_id": 10542, "db_id": "european_football_2", "final": {"question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.", "sql": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')", "source_tables": ["match", "player"]}, "evidence": "Daan Smith refers to player_name = 'Daan Smith'; Filipe Ferreira refers to player_name = 'Filipe Ferreira'"}
{"sample_id": 10562, "db_id": "european_football_2", "final": {"question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?", "sql": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )", "source_tables": ["player_attributes", "player"]}, "evidence": "Alexis Blin's refers to player_name = 'Alexis Blin'"}
{"sample_id": 10522, "db_id": "european_football_2", "final": {"question": "What is the highest overall rating received by Dorlan Pabon?", "sql": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'", "source_tables": ["player_attributes", "player"]}, "evidence": "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)"}
{"sample_id": 10506, "db_id": "european_football_2", "final": {"question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?", "sql": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'", "source_tables": ["player_attributes", "player"]}, "evidence": "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high'; Should consider DISTINCT in the final result;"}
{"sample_id": 10546, "db_id": "european_football_2", "final": {"question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'", "source_tables": ["player_attributes", "player"]}, "evidence": "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';"}
{"sample_id": 10475, "db_id": "european_football_2", "final": {"question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.", "sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'", "source_tables": ["team_attributes", "team"]}, "evidence": "chance creation passing class refers to chanceCreationPassingClass; chanceCreationPassingClass = 'Risky'; short name refers to team_short_name;"}
{"sample_id": 10445, "db_id": "european_football_2", "final": {"question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?", "sql": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'", "source_tables": ["player_attributes"]}, "evidence": "overall_rating > = 60 AND overall_rating < 65; players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low';"}
{"sample_id": 10502, "db_id": "european_football_2", "final": {"question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?", "sql": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'", "source_tables": ["player_attributes"]}, "evidence": "preferred foot when attacking was the left refers to preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';"}
{"sample_id": 10450, "db_id": "european_football_2", "final": {"question": "In Scotland Premier League, which away team won the most during the 2010 season?", "sql": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["match", "league", "team"]}, "evidence": "Final result should return the Team.team_long_name; Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010'; won the most refers to MAX(COUNT(*));"}
{"sample_id": 10464, "db_id": "european_football_2", "final": {"question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.", "sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0", "source_tables": ["match", "league"]}, "evidence": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'"}
{"sample_id": 10553, "db_id": "european_football_2", "final": {"question": "What is the average heights of Italy players?", "sql": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'", "source_tables": ["country", "match", "player"]}, "evidence": "average heights refers to Avg(height); Italy is name of country"}
{"sample_id": 10477, "db_id": "european_football_2", "final": {"question": "When is the birthday of the football player who has the highest overall rating?", "sql": "SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "football player who has the highest overall rating refers to MAX(overall_rating);"}
{"sample_id": 10544, "db_id": "european_football_2", "final": {"question": "State the name of the most strongest player.", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)", "source_tables": ["player_attributes", "player"]}, "evidence": "strongest players refers to player has MAX(overall_rating)"}
{"sample_id": 10554, "db_id": "european_football_2", "final": {"question": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.", "sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3", "source_tables": ["player"]}, "evidence": "over 180 cm tall refers to height > 180; name of football player refers to player_name"}
{"sample_id": 10531, "db_id": "european_football_2", "final": {"question": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?", "sql": "SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.\"date\", 1, 10) = '2015-09-10'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"LEI\" refers to team_short_name = 'LEI'; on 2015/9/10 refers to\u00a0 date = '2015-09-10 00:00:00'"}
{"sample_id": 10532, "db_id": "european_football_2", "final": {"question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.", "sql": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.\"date\" LIKE '2010-02-22%'", "source_tables": ["team_attributes", "team"]}, "evidence": "\"FC Lorient\" refers to team_long_name = 'FC Lorient'; on 2010/2/22 refers to date LIKE '2010-02-22%';"}
{"sample_id": 10507, "db_id": "european_football_2", "final": {"question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?", "sql": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "player who perform best in crossing actions refers to MAX(crossing);"}
{"sample_id": 10523, "db_id": "european_football_2", "final": {"question": "What is the average number of goals made by Parma as the away team while playing in Italy?", "sql": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'", "source_tables": ["country", "match", "team"]}, "evidence": "Parma refers to team_long_name = 'Parma'; average number of goals refers to AVG(away_team_goal)"}
{"sample_id": 10550, "db_id": "european_football_2", "final": {"question": "Which country's players have the heaviest average weights?", "sql": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1", "source_tables": ["player", "match", "country"]}, "evidence": "heaviest average weights refers to MAX(AVG(weight))"}
{"sample_id": 10462, "db_id": "european_football_2", "final": {"question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.", "sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.\"player_fifa_api_id\") DESC LIMIT 10", "source_tables": ["player_attributes", "player"]}, "evidence": "heights are above 180 refers to Player.height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));"}
{"sample_id": 10545, "db_id": "european_football_2", "final": {"question": "What is the name of players with the highest potential?", "sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "highest potential refers to MAX(potential)"}
{"sample_id": 10552, "db_id": "european_football_2", "final": {"question": "What are the short name of team who played safe while creating chance of passing?", "sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'", "source_tables": ["team_attributes", "team"]}, "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name"}
{"sample_id": 10452, "db_id": "european_football_2", "final": {"question": "Give the name of the league had the most matches end as draw in the 2016 season?", "sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1", "source_tables": ["match", "league"]}, "evidence": "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';"}
{"sample_id": 10517, "db_id": "european_football_2", "final": {"question": "How much is the average build up play speed of the Heart of Midlothian team?", "sql": "SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'", "source_tables": ["team_attributes", "team"]}, "evidence": "Heart of Midlothian refers to team_long_name = 'Heart of Midlothian'; average build up play speed refers to\u00a0 AVG(buildUpPlaySpeed)"}
{"sample_id": 10478, "db_id": "european_football_2", "final": {"question": "What is the name of the football league in the country of Netherlands?", "sql": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'", "source_tables": ["league", "country"]}, "evidence": "name of the football league refers to League.name;"}
{"sample_id": 10497, "db_id": "european_football_2", "final": {"question": "List all the football player with the highest balance score and potential score of 61.", "sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "balance score refers to balance; highest balance score refers to MAX(balance); potential score refers to potential; potential = 61;"}
{"sample_id": 10565, "db_id": "european_football_2", "final": {"question": "What was the highest score of the home team in the Netherlands Eredivisie league?", "sql": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'", "source_tables": ["match", "league"]}, "evidence": "highest score of the home team refers to MAX(home_team_goal)"}
{"sample_id": 10482, "db_id": "european_football_2", "final": {"question": "How many players were born after 1990?", "sql": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'", "source_tables": ["player"]}, "evidence": "born after 1990 refers to strftime('%Y', birthday) = '1990';"}
{"sample_id": 10465, "db_id": "european_football_2", "final": {"question": "What is the short name of the football team Queens Park Rangers?", "sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'", "source_tables": ["team"]}, "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';"}
{"sample_id": 10476, "db_id": "european_football_2", "final": {"question": "What is the defensive work rate of the football player David Wilson\n?", "sql": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'", "source_tables": ["player_attributes", "player"]}, "evidence": ""}
{"sample_id": 10536, "db_id": "european_football_2", "final": {"question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?", "sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.\"date\", 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'", "source_tables": ["player_attributes", "player"]}, "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'"}
{"sample_id": 10499, "db_id": "european_football_2", "final": {"question": "What's the long name for the team GEN?", "sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'", "source_tables": ["team"]}, "evidence": "long name for the team refers to team_long_name; team_short_name = 'GEN';"}
{"sample_id": 10490, "db_id": "european_football_2", "final": {"question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?", "sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.\"date\") >= '2010' AND STRFTIME('%Y',t2.\"date\") <= '2015'", "source_tables": ["player_attributes", "player"]}, "evidence": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;"}
{"sample_id": 10508, "db_id": "european_football_2", "final": {"question": "What's the heading accuracy of Ariel Borysiuk?", "sql": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'", "source_tables": ["player_attributes", "player"]}, "evidence": ""}
{"sample_id": 10448, "db_id": "european_football_2", "final": {"question": "Which home team had lost the fewest matches in the 2016 season?", "sql": "SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["match", "team"]}, "evidence": "home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0; 2016 season refers to season = '2015/2016';"}
{"sample_id": 10473, "db_id": "european_football_2", "final": {"question": "List all the football player with the highest potential score.", "sql": "SELECT DISTINCT(t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM Player_Attributes)", "source_tables": ["player_attributes", "player"]}, "evidence": "potential score refers to potential; highest potential score refers to MAX(potential);"}
{"sample_id": 10446, "db_id": "european_football_2", "final": {"question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.", "sql": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5", "source_tables": ["player_attributes"]}, "evidence": "perform better in crossing actions refers to MAX(crossing)"}
{"sample_id": 10472, "db_id": "european_football_2", "final": {"question": "What is the preferred foot when attacking of the youngest football player?", "sql": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "preferred foot when attacking refers to preferred_foot; youngest football player refers to latest birthday;"}
{"sample_id": 10513, "db_id": "european_football_2", "final": {"question": "How many matches were held in the Belgium Jupiler League in April, 2009?", "sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.\"date\", 1, 7) = '2009-04'", "source_tables": ["match", "league"]}, "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);"}
{"sample_id": 10511, "db_id": "european_football_2", "final": {"question": "How many matches in the 2008/2009 season were held in Belgium?", "sql": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'", "source_tables": ["match", "country"]}, "evidence": "Belgium refers to Country.name = 'Belgium';"}
{"sample_id": 10570, "db_id": "european_football_2", "final": {"question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?", "sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180", "source_tables": ["player_attributes", "player"]}, "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100"}
{"sample_id": 10456, "db_id": "european_football_2", "final": {"question": "List the players' api id who had the highest above average overall ratings in 2010.", "sql": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(\"date\", 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1", "source_tables": ["player_attributes"]}, "evidence": "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';"}
{"sample_id": 10505, "db_id": "european_football_2", "final": {"question": "Which player has the strongest overall strength?", "sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "overall strength refers to overall_rating; strongest overall strength refers to MAX(overall_rating);"}
{"sample_id": 10451, "db_id": "european_football_2", "final": {"question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?", "sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4", "source_tables": ["team_attributes", "team"]}, "evidence": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)"}
{"sample_id": 10481, "db_id": "european_football_2", "final": {"question": "Please list player names which are higher than 180.", "sql": "SELECT player_name FROM Player WHERE height > 180", "source_tables": ["player"]}, "evidence": "height>180;"}
{"sample_id": 10519, "db_id": "european_football_2", "final": {"question": "What is Aaron Lennox's total crossing score?", "sql": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'", "source_tables": ["player_attributes", "player"]}, "evidence": "Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'; total crossing score refers to SUM(crossing)"}
{"sample_id": 10489, "db_id": "european_football_2", "final": {"question": "Which teams have build up play passing more than 70? Please list their short names.", "sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70", "source_tables": ["team_attributes", "team"]}, "evidence": "build up play passing refers to buildUpPlayPassing; buildUpPlayPassing > 70; short names refers to team_short_name;"}
{"sample_id": 10551, "db_id": "european_football_2", "final": {"question": "List down the long name for slow speed class team.", "sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'", "source_tables": ["team_attributes", "team"]}, "evidence": "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name"}
{"sample_id": 10560, "db_id": "european_football_2", "final": {"question": "In what country did the Poland Ekstraklasa take place?", "sql": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )", "source_tables": ["league", "country"]}, "evidence": ""}
{"sample_id": 10492, "db_id": "european_football_2", "final": {"question": "Which country is the league Italy Serie A from?", "sql": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'", "source_tables": ["league", "country"]}, "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';"}
{"sample_id": 10559, "db_id": "european_football_2", "final": {"question": "What percentage of players have a strength and stamina score of more than 80?", "sql": "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t", "source_tables": ["player_attributes"]}, "evidence": "strength and stamina score of more than 80 refers to stamina > 80 and strength > 80"}
{"sample_id": 10449, "db_id": "european_football_2", "final": {"question": "Indicate the full names of the top 10 players with the highest number of penalties.", "sql": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10", "source_tables": ["player_attributes", "player"]}, "evidence": "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);"}
{"sample_id": 10566, "db_id": "european_football_2", "final": {"question": "Please state the finishing rate and curve score of the player who has the heaviest weight.", "sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1", "source_tables": ["player_attributes", "player"]}, "evidence": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)"}
{"sample_id": 10541, "db_id": "european_football_2", "final": {"question": "How many home team goal have been scored by Aaron Lennon?", "sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'", "source_tables": ["match", "player"]}, "evidence": "Aaron Lennon refers to player_name = 'Aaron Lennon'"}
{"sample_id": 10479, "db_id": "european_football_2", "final": {"question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.", "sql": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'", "source_tables": ["match", "country"]}, "evidence": "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011';"}
{"sample_id": 10483, "db_id": "european_football_2", "final": {"question": "How many players whose first names are Adam and weigh more than 170?", "sql": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'", "source_tables": ["player"]}, "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';"}
{"sample_id": 10561, "db_id": "european_football_2", "final": {"question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?", "sql": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.\"date\" LIKE '2008-09-24%'", "source_tables": ["match", "league"]}, "evidence": "September 24, 2008 refers to date like '2008-09-24%'; in the Belgian Jupiler League refers to League.name = 'Belgium Jupiler League'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal"}
{"sample_id": 10444, "db_id": "european_football_2", "final": {"question": "What is the preferred foot when attacking of the player with the lowest potential?", "sql": "SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1", "source_tables": ["player_attributes"]}, "evidence": "preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);"}
{"sample_id": 10527, "db_id": "european_football_2", "final": {"question": "How was Francesco Migliore's attacking work rate on 2015/5/1?", "sql": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.\"date\" LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'", "source_tables": ["player_attributes", "player"]}, "evidence": "Francesco Migliore refers to player_name = 'Francesco Migliore'; on 2015/5/1 refers to date LIKE '2015-05-01%';"}
{"sample_id": 10442, "db_id": "european_football_2", "final": {"question": "Which player has the highest overall rating? Indicate the player's api id.", "sql": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1", "source_tables": ["player_attributes"]}, "evidence": "highest overall rating refers to MAX(overall_rating);"}
{"sample_id": 10496, "db_id": "european_football_2", "final": {"question": "List all the short name of the football team that had a home team goal of 10?", "sql": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10", "source_tables": ["match", "team"]}, "evidence": "short name of the football team refers to team_short_name; home team goal refers to home_team_goal; home_team_goal = 10;"}
{"sample_id": 10460, "db_id": "european_football_2", "final": {"question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.", "sql": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5", "source_tables": ["match", "league"]}, "evidence": "number of goals made in all seasons combine = SUM(home_team_goal, away_team_goal);"}
{"sample_id": 10469, "db_id": "european_football_2", "final": {"question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?", "sql": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.\"date\", 1, 10) = '2014-09-18'", "source_tables": ["player_attributes", "player"]}, "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';"}
{"sample_id": 10514, "db_id": "european_football_2", "final": {"question": "Give the name of the league had the most matches in the 2008/2009 season?", "sql": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))", "source_tables": ["match", "league"]}, "evidence": "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');"}
{"sample_id": 10621, "db_id": "thrombosis_prediction", "final": {"question": "How many patients who underwent testing in 1997 had protein levels outside the normal range?", "sql": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'", "source_tables": ["laboratory"]}, "evidence": "underwent testing in 1997 refers to YEAR(DATE) = '1997'; protein levels within the normal range refers to tp > 6 and tp < 8.5"}
{"sample_id": 10578, "db_id": "thrombosis_prediction", "final": {"question": "State the ID and age of patient with positive degree of coagulation.", "sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'", "source_tables": ["examination", "patient"]}, "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';"}
{"sample_id": 10676, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.\"First Date\") > '1990'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;"}
{"sample_id": 10694, "db_id": "thrombosis_prediction", "final": {"question": "Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.\"First Date\" IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.\"First Date\" ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "first patient refers to ID with MIN(`First Date`); abnormal anti-SSA refers to SSA NOT IN('negative', '0');"}
{"sample_id": 10575, "db_id": "thrombosis_prediction", "final": {"question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.", "sql": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609", "source_tables": ["laboratory", "patient"]}, "evidence": "'30609' is the Patient ID; disease means Diagnosis"}
{"sample_id": 10615, "db_id": "thrombosis_prediction", "final": {"question": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.\"ANA Pattern\" != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'", "source_tables": ["examination", "patient"]}, "evidence": "Excluding all P only ANA Pattern refers to `ANA Pattern`! = 'P'; women refers to SEX = 'F'; born between 1980 and 1989 refers to BIRTHDAY"}
{"sample_id": 10624, "db_id": "thrombosis_prediction", "final": {"question": "How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with Behcet disease did not stay in the hospital for treatment?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.\"Examination Date\") BETWEEN '1995' AND '1997' AND T1.Admission = '-'", "source_tables": ["examination", "patient"]}, "evidence": "male refers to SEX = 'M'; underwent testing between 1995 and 1997 refers to `Examination Date` between '1995' and '1997'; Behcet refers to diagnosis; did not stay in the hospital refers to Admission = '-'"}
{"sample_id": 10675, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?", "sql": "SELECT patientData.Diagnosis FROM Patient AS patientData INNER JOIN Laboratory AS labData ON patientData.ID = labData.ID WHERE labData.IGA BETWEEN 80 AND 500 ORDER BY labData.IGA DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "highest Ig A within the normal range refers to MAX(IGA BETWEEN 80 AND 500);"}
{"sample_id": 10659, "db_id": "thrombosis_prediction", "final": {"question": "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.", "sql": "SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'", "source_tables": ["laboratory", "patient"]}, "evidence": "outpatients refers to Admission = '-'; low hemoglobin level refers to HBG < 10;"}
{"sample_id": 10701, "db_id": "thrombosis_prediction", "final": {"question": "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?", "sql": "SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"GOT\" >= 60", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; percentage = MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0);"}
{"sample_id": 10666, "db_id": "thrombosis_prediction", "final": {"question": "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.\"First Date\") > '1992' AND T2.PT < 14", "source_tables": ["laboratory", "patient"]}, "evidence": "first came to the hospital after year 1992 refers to year(`First Date`) > 1992; prothrombin time (PT) level that are normal refers to PT < 14;"}
{"sample_id": 10707, "db_id": "thrombosis_prediction", "final": {"question": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.", "sql": "SELECT T1.\"First Date\" FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.\"First Date\" DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;"}
{"sample_id": 10605, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = ( SELECT ID FROM Examination WHERE \"Examination Date\" = '1997-01-27' AND Diagnosis = 'SLE' ) AND T2.\"Examination Date\" = T1.\"First Date\"", "source_tables": ["examination", "patient"]}, "evidence": "'SLE' AND original diagnose refers to diagnosis; 1997/1/27 refer to `Examination Date` = '1997-01-27'; first came to the hospital refers to patient.`First Date`"}
{"sample_id": 10588, "db_id": "thrombosis_prediction", "final": {"question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.", "sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1", "source_tables": ["examination", "patient"]}, "evidence": "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL"}
{"sample_id": 10609, "db_id": "thrombosis_prediction", "final": {"question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.", "sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4", "source_tables": ["laboratory"]}, "evidence": "examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'; GPT level greater than 30 refers to GPT > 30; ALB level less than 4 ALB < 4"}
{"sample_id": 10622, "db_id": "thrombosis_prediction", "final": {"question": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?", "sql": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'", "source_tables": ["examination"]}, "evidence": "thrombocytopenia' refers to symptoms; 'SLE' refers to diagnosis; calculation =  DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100"}
{"sample_id": 10693, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal anti-SSA came to the hospital before 2000?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 2000 refers to YEAR(`First Date`) < 2000; Should compute the number of distinct ones"}
{"sample_id": 10577, "db_id": "thrombosis_prediction", "final": {"question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500", "source_tables": ["laboratory", "patient"]}, "evidence": "LDH beyond normal range refers to LDH > '500';"}
{"sample_id": 10667, "db_id": "thrombosis_prediction", "final": {"question": "For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45", "source_tables": ["laboratory", "patient"]}, "evidence": "examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'; normal activated partial prothrom bin time refesr to APTT < 45;"}
{"sample_id": 10654, "db_id": "thrombosis_prediction", "final": {"question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.", "sql": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.\"T-CHO\" < 250", "source_tables": ["laboratory", "patient"]}, "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250; "}
{"sample_id": 10593, "db_id": "thrombosis_prediction", "final": {"question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.\"Examination Date\") BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.\"Examination Date\") - STRFTIME('%Y', T1.Birthday) < 18", "source_tables": ["examination", "patient"]}, "evidence": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'"}
{"sample_id": 10705, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal glutamic pylvic transaminase level refers to GOT < 60; male refers to Sex = 'M';"}
{"sample_id": 10686, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'", "source_tables": ["laboratory", "patient"]}, "evidence": "APS will result in Blood Clots in veins; normal level of complement 4 refers to C4 > 10; Should compute the number of different ones"}
{"sample_id": 10657, "db_id": "thrombosis_prediction", "final": {"question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.", "sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5", "source_tables": ["laboratory", "patient"]}, "evidence": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); "}
{"sample_id": 10689, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?", "sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0", "source_tables": ["laboratory", "examination"]}, "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;"}
{"sample_id": 10645, "db_id": "thrombosis_prediction", "final": {"question": "Are there more male patients with creatinine not within the normal range than female? True or False?", "sql": "SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5", "source_tables": ["laboratory", "patient"]}, "evidence": "creatinine (CRE) not within the normal range refers to CRE > = 1.5; male refers to Sex = 'M'; female refers to Sex = 'F'; calculation = (SUM(SEX = 'M') > SUM(SEX = 'F')) where CRE > = 1.5"}
{"sample_id": 10584, "db_id": "thrombosis_prediction", "final": {"question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?", "sql": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'", "source_tables": ["patient"]}, "evidence": "female refers to sex = 'F'; came at the hospital in 1997 refers to year(Description) = '1997'; immediately followed at the outpatient clinic refers to Admission = '-'"}
{"sample_id": 10610, "db_id": "thrombosis_prediction", "final": {"question": "How many female patients born in 1964 were admitted to the hospital? List them by ID.", "sql": "SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'", "source_tables": ["patient"]}, "evidence": "female refers to SEX = 'F'; born in 1964 refers to YEAR(Birthday) = 1964; admitted to the hospital refers to Admission = '+'"}
{"sample_id": 10633, "db_id": "thrombosis_prediction", "final": {"question": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.", "sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800", "source_tables": ["laboratory", "patient"]}, "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800;"}
{"sample_id": 10677, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));"}
{"sample_id": 10649, "db_id": "thrombosis_prediction", "final": {"question": "What is the average age of the male patient with high cholesterol?", "sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-CHO\" >= 250 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;"}
{"sample_id": 10580, "db_id": "thrombosis_prediction", "final": {"question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.\"T-CHO\" >= 250", "source_tables": ["laboratory", "patient"]}, "evidence": "who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'"}
{"sample_id": 10672, "db_id": "thrombosis_prediction", "final": {"question": "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"U-PRO\" > 0 AND T2.\"U-PRO\" < 30 AND T1.Diagnosis = 'SLE'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal proteinuria level refers to 0 < `U-PRO` < 30; diagnosed with SLE refers to Diagnosis = 'SLE';"}
{"sample_id": 10597, "db_id": "thrombosis_prediction", "final": {"question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?", "sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)"}
{"sample_id": 10664, "db_id": "thrombosis_prediction", "final": {"question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'", "source_tables": ["laboratory", "patient"]}, "evidence": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; "}
{"sample_id": 10625, "db_id": "thrombosis_prediction", "final": {"question": "How many patients who were female got white blood cells that were below 3.5?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'", "source_tables": ["laboratory", "patient"]}, "evidence": "female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5"}
{"sample_id": 10598, "db_id": "thrombosis_prediction", "final": {"question": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?", "sql": "SELECT ANA FROM Examination WHERE ID = 3605340 AND \"Examination Date\" = '1996-12-02'", "source_tables": ["examination"]}, "evidence": "anti-nucleus antibody refers to ANA; 1996/12/2 refers to `Examination Date` = '1996-12-02'"}
{"sample_id": 10656, "db_id": "thrombosis_prediction", "final": {"question": "List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal white blood cell count refers to WBC < = 3.5 or WBC > = 9.0;"}
{"sample_id": 10638, "db_id": "thrombosis_prediction", "final": {"question": "Sort in descending order all patients by birthday for male patient with albumin not within range.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC", "source_tables": ["laboratory", "patient"]}, "evidence": "male = SEX = 'M'; albumin not within range refers to ALB < = 3.5 or ALB > = 5.5"}
{"sample_id": 10703, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?", "sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; The larger the birthday value, the younger the person is, and vice versa;"}
{"sample_id": 10592, "db_id": "thrombosis_prediction", "final": {"question": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.\"Examination Date\") - STRFTIME('%Y', T1.\"First Date\") >= 1", "source_tables": ["examination", "patient"]}, "evidence": "hadn't undergone a medical examination until at least a year refers to SUBTRACT(year(`Examination Date`), year(`First Date`)) > = 1"}
{"sample_id": 10712, "db_id": "thrombosis_prediction", "final": {"question": "What is the examination date of the patient whose albumin is the highest in the normal range?", "sql": "SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1", "source_tables": ["laboratory"]}, "evidence": "examination date refers to Date; albumin is the highest in the normal range refers to MAX(ALB > 3.5 and ALB < 5.5);"}
{"sample_id": 10614, "db_id": "thrombosis_prediction", "final": {"question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.\"T-BIL\" < 2.0 AND T2.Date LIKE '1991-10-%'", "source_tables": ["laboratory", "patient"]}, "evidence": "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; "}
{"sample_id": 10660, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.", "sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;"}
{"sample_id": 10655, "db_id": "thrombosis_prediction", "final": {"question": "List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.", "sql": "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.\"First Date\") = '1991' AND T2.GLU < 180", "source_tables": ["laboratory", "patient"]}, "evidence": "blood glucose (GLU) index that were within normal range refers to GLU < 180; data that was first recorded in 1991 refers to year(Description) = 1991;"}
{"sample_id": 10604, "db_id": "thrombosis_prediction", "final": {"question": "For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?", "sql": "SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE \"First Date\" = '1991-06-13' AND Diagnosis = 'SJS' ) AND STRFTIME('%Y', Date) = '1995'", "source_tables": ["laboratory", "patient"]}, "evidence": "1991/6/13 refers to `First Date` = '1991-06-13'; 'SJS' refers to Diagnosis; total number of his/her Laboratory tests refers to COUNT(ID); 1995 refers to Date"}
{"sample_id": 10731, "db_id": "thrombosis_prediction", "final": {"question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.", "sql": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400", "source_tables": ["laboratory", "patient"]}, "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';"}
{"sample_id": 10623, "db_id": "thrombosis_prediction", "final": {"question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?", "sql": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'", "source_tables": ["patient"]}, "evidence": "born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to Diagnosis='RA' ; women refers to SEX = 'F'; calculation = DIVIDE(SUM(SEX = 'F'), COUNT(SEX)) * 100"}
{"sample_id": 10729, "db_id": "thrombosis_prediction", "final": {"question": "Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'", "source_tables": ["laboratory", "patient"]}, "evidence": "RBC < = 3.5 or RBC > = 6.0 means the patient has an abnormal level of red blood cell; 3.5 < RBC < 6.0 means the patient has a normal level of red blood cell; followed at the outpatient clinic refers to Admission = '-';"}
{"sample_id": 10679, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70", "source_tables": ["laboratory", "patient"]}, "evidence": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; "}
{"sample_id": 10637, "db_id": "thrombosis_prediction", "final": {"question": "For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.", "sql": "SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5", "source_tables": ["laboratory", "patient"]}, "evidence": "female refers to SEX = 'F'; total protein (TP) beyond the normal index refers to TP > 8.5; deviation of TP index from normal refers to SUBTRACT(TP, 8.5)"}
{"sample_id": 10581, "db_id": "thrombosis_prediction", "final": {"question": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5", "source_tables": ["laboratory", "patient"]}, "evidence": "albumin level lower than 3.5 refers to ALB < 3.5;"}
{"sample_id": 10586, "db_id": "thrombosis_prediction", "final": {"question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?", "sql": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.\"Examination Date\") = '1997' AND T2.Thrombosis = 1", "source_tables": ["examination", "patient"]}, "evidence": "the most serious thrombosis refers to Thrombosis = '1' (the most severe one); women refers to sex = 'F'"}
{"sample_id": 10673, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with an Ig G higher than normal?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;"}
{"sample_id": 10585, "db_id": "thrombosis_prediction", "final": {"question": "What was the age of the youngest patient when they initially arrived at the hospital?", "sql": "SELECT MIN(STRFTIME('%Y', \"First Date\") - STRFTIME('%Y', Birthday)) FROM Patient", "source_tables": ["patient"]}, "evidence": "age refers to SUBTRACT(YEAR(`First Date`),YEAR(Birthday))"}
{"sample_id": 10700, "db_id": "thrombosis_prediction", "final": {"question": "Of the patients with an normal level of IGG, how many of them admitted to the hospital?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG <2000 AND  T1.Admission = '+'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal level of IGG refers to 900 < IGG < 2000; admitted to the hospital refers to Admission = '+';"}
{"sample_id": 10616, "db_id": "thrombosis_prediction", "final": {"question": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?", "sql": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1.0 AND T3.LDH = 123", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "PSS' refers to diagnosis; blood level of C-reactive protein de 2+refers to CRP > 2; createnine 1 refers to CRE = 1; LDH 123 refers to LDH = 123"}
{"sample_id": 10704, "db_id": "thrombosis_prediction", "final": {"question": "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.", "sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3", "source_tables": ["laboratory", "patient"]}, "evidence": "highest glutamic pylvic transaminase in the normal range refers to MAX(GPT < 60);"}
{"sample_id": 10717, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.\"T-BIL\" >= 2 AND T3.\"ANA Pattern\" LIKE '%P%'", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "total bilirubin is over the normal range refers to `T-BIL` > = 2.0; peripheral pattern is observed in the sheet of ANA examination refers to that ANA Pattern contains 'P';"}
{"sample_id": 10710, "db_id": "thrombosis_prediction", "final": {"question": "Please list the diagnosis of the patients whose total protein is lower than normal.", "sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0", "source_tables": ["laboratory", "patient"]}, "evidence": "total protein is lower than normal refers to TP < 6.0;"}
{"sample_id": 10723, "db_id": "thrombosis_prediction", "final": {"question": "Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase.", "sql": "SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 0 AND T1.CPK < 250", "source_tables": ["laboratory", "examination"]}, "evidence": "no thrombosis refers to Thrombosis = 0 ; abnormal level of creatinine phosphokinase refers to CPK < 250;"}
{"sample_id": 10636, "db_id": "thrombosis_prediction", "final": {"question": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0", "source_tables": ["laboratory", "patient"]}, "evidence": "total protein (TP) below the lower range of the normal index refers to TP < 6.0"}
{"sample_id": 10669, "db_id": "thrombosis_prediction", "final": {"question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones."}
{"sample_id": 10613, "db_id": "thrombosis_prediction", "final": {"question": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?", "sql": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', \"First Date\") = '1981' AND SEX = 'M'", "source_tables": ["patient"]}, "evidence": "male refers to SEX = 'M'; first presented to the hospital in 1981 refers to YEAR(`FIRST DATE`) = '1981'; BEHCET refers to diagnosis; calculation = DIVIDE(SUM(DIAGNOSIS = 'BEHCET') where YEAR(`FIRST DATE`) = '1981', MULTIPLY(COUNT(YEAR(`FIRST DATE`) = '1981')), 100)"}
{"sample_id": 10653, "db_id": "thrombosis_prediction", "final": {"question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250", "source_tables": ["laboratory", "patient"]}, "evidence": "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250; Should consider DISTINCT in the final result;"}
{"sample_id": 10648, "db_id": "thrombosis_prediction", "final": {"question": "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.", "sql": "SELECT T1.ID, T2.\"T-CHO\" FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.\"T-CHO\" DESC, T1.Birthday ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "oldest patient refers to MIN(birthday); highest total cholesterol refers to MAX(T-CHO);"}
{"sample_id": 10590, "db_id": "thrombosis_prediction", "final": {"question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?", "sql": "SELECT T1.Date, STRFTIME('%Y', T2.\"First Date\") - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)"}
{"sample_id": 10646, "db_id": "thrombosis_prediction", "final": {"question": "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.", "sql": "SELECT T2.\"T-BIL\", T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.\"T-BIL\" DESC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "the highest total bilirubin refers to MAX(T-BIL)"}
{"sample_id": 10652, "db_id": "thrombosis_prediction", "final": {"question": "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'", "source_tables": ["laboratory", "patient"]}, "evidence": "outpatient refers to Admission = '-'; normal range of creatinine phosphokinase refers to CPK < 250;"}
{"sample_id": 10724, "db_id": "thrombosis_prediction", "final": {"question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;"}
{"sample_id": 10631, "db_id": "thrombosis_prediction", "final": {"question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.", "sql": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC", "source_tables": ["laboratory", "patient"]}, "evidence": "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; The larger the birthday value, the younger the person is, and vice versa; "}
{"sample_id": 10697, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;"}
{"sample_id": 10650, "db_id": "thrombosis_prediction", "final": {"question": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?", "sql": "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300", "source_tables": ["laboratory", "patient"]}, "evidence": "triglyceride (TG) index greater than 100 of the normal range refers to TG > 300;"}
{"sample_id": 10587, "db_id": "thrombosis_prediction", "final": {"question": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?", "sql": "SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200", "source_tables": ["laboratory", "patient"]}, "evidence": "age gap refers to SUBTRACT(MAX(year(Birthday)) - MIN(year(Birthday))); normal triglyceride refers to tg > = 200"}
{"sample_id": 10663, "db_id": "thrombosis_prediction", "final": {"question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?", "sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;"}
{"sample_id": 10643, "db_id": "thrombosis_prediction", "final": {"question": "Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'", "source_tables": ["laboratory", "patient"]}, "evidence": "within the UN normal index refers to UN < 30; Diagnosis = 'RA'"}
{"sample_id": 10572, "db_id": "thrombosis_prediction", "final": {"question": "What is the percentage of female patient were born after 1930?", "sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'", "source_tables": ["patient"]}, "evidence": "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')"}
{"sample_id": 10721, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed?", "sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL", "source_tables": ["laboratory", "examination"]}, "evidence": "normal level of triglyceride refers to TG < 200; have other symptoms refers to Symptoms is not null;"}
{"sample_id": 10599, "db_id": "thrombosis_prediction", "final": {"question": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?", "sql": "SELECT CASE WHEN \"T-CHO\" < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'", "source_tables": ["laboratory"]}, "evidence": "total cholesterol normal level refers to N < 250"}
{"sample_id": 10685, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID.", "sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 on T1.ID = T3.ID WHERE (T3.HCT >= 52 OR T3.HCT <= 29) ORDER BY T2.\"aCL IgA\" DESC LIMIT 1", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "Hematoclit is normal refers to 29 < N < 52; highest anti-Cardiolipin antibody concentration refers to MAX(`aCL IgA`);"}
{"sample_id": 10589, "db_id": "thrombosis_prediction", "final": {"question": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?", "sql": "SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'", "source_tables": ["laboratory", "patient"]}, "evidence": "the year that concluded on December 31, 1998 refers to Date BETWEEN '1998-01-01' AND '1998-12-31'; male refers to SEX = 'M'; calculation = DIVIDE(COUNT(ID), 12)"}
{"sample_id": 10665, "db_id": "thrombosis_prediction", "final": {"question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?", "sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55", "source_tables": ["laboratory", "patient"]}, "evidence": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; "}
{"sample_id": 10573, "db_id": "thrombosis_prediction", "final": {"question": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?", "sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'", "source_tables": ["patient"]}, "evidence": "patient born between Year 1930 to 1940 refers to year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31'; inpatient refers to Admission = '+'"}
{"sample_id": 10696, "db_id": "thrombosis_prediction", "final": {"question": "For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL", "source_tables": ["laboratory", "examination"]}, "evidence": "anti-SSB are normal refers to SSB IN ('negative', '0'); have other symptoms refers to Symptoms IS NOT NULL; Should compute the number of distinct ones"}
{"sample_id": 10683, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a normal RF don't have thrombosis?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0", "source_tables": ["laboratory", "examination"]}, "evidence": "normal RF refers to RF < 20; don't have thrombosis refers to Thrombosis = '0';"}
{"sample_id": 10678, "db_id": "thrombosis_prediction", "final": {"question": "How many patients with a abnormal C-reactive protein don't have their data recorded?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;"}
{"sample_id": 10674, "db_id": "thrombosis_prediction", "final": {"question": "Among the patients with a normal Ig G level, how many of them have symptoms?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL", "source_tables": ["laboratory", "examination", "patient"]}, "evidence": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;"}
{"sample_id": 10576, "db_id": "thrombosis_prediction", "final": {"question": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.", "sql": "SELECT T1.SEX, T1.Birthday, T2.\"Examination Date\", T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109", "source_tables": ["examination", "patient"]}, "evidence": "When was the examination taken refers to `Examination Date`"}
{"sample_id": 10658, "db_id": "thrombosis_prediction", "final": {"question": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.", "sql": "SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50", "source_tables": ["laboratory", "patient"]}, "evidence": "female patient refers to Sex = 'F'; age 50 and above = SUBTRACT(year(current_timestamp), year(Birthday)) > = 50; abnormal red blood cell count refers to RBC < = 3.5 or RBC > = 6.0; Admission = '+' means the patient was admitted to the hospital; Admission = '-' means the patient was not admitted to the hospital;"}
{"sample_id": 10708, "db_id": "thrombosis_prediction", "final": {"question": "For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?", "sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+'", "source_tables": ["laboratory", "patient"]}, "evidence": "abnormal alkaliphophatase level refers to ALP > = 300; admitted to the hospital refers to Admission = '+';"}
{"sample_id": 10582, "db_id": "thrombosis_prediction", "final": {"question": "What is the percentage of female patient had total protein not within the normal range?", "sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'", "source_tables": ["laboratory", "patient"]}, "evidence": "female refers to sex = 'F'; total protein not within the normal range refers to TP < '6.0' or TP > '8.5'; calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100"}
{"sample_id": 10682, "db_id": "thrombosis_prediction", "final": {"question": "Please list the ID of the patient whose RF is normal and who is older than 60.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60", "source_tables": ["laboratory", "patient"]}, "evidence": "RF is normal refers to RF < 20; older than 60 = SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60;"}
{"sample_id": 10706, "db_id": "thrombosis_prediction", "final": {"question": "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?", "sql": "SELECT T1.\"First Date\" FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH ASC LIMIT 1", "source_tables": ["laboratory", "patient"]}, "evidence": "highest lactate dehydrogenase in the normal range refers to MAX(LDH < 500); when the data first recorded refers to MIN(First Date);"}
{"sample_id": 10617, "db_id": "thrombosis_prediction", "final": {"question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?", "sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'", "source_tables": ["laboratory", "patient"]}, "evidence": "average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; diagnosed with SLE refers to Diagnosis= 'SLE'"}
{"sample_id": 10695, "db_id": "thrombosis_prediction", "final": {"question": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?", "sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'", "source_tables": ["laboratory", "patient"]}, "evidence": "normal anti-SSB refers to SSB IN('-', '+-'); '-' is expressed as 'negative' and '+-' is expressed as '0' in the database ; diagnosed with SLE refers to Diagnosis = 'SLE'; Should compute the number of distinct ones"}
{"sample_id": 10642, "db_id": "thrombosis_prediction", "final": {"question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?", "sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29", "source_tables": ["laboratory", "patient"]}, "evidence": "urea nitrogen (UN) just within the borderline of passing refers to UN = 29; "}
{"sample_id": 10691, "db_id": "thrombosis_prediction", "final": {"question": "Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.", "sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01", "source_tables": ["laboratory", "patient"]}, "evidence": "examination done after 1997/1/1 refers to `Examination Date` >  1997-01-01; normal anti-scl70 refers to SC170 IN('negative','0');"}
{"sample_id": 10869, "db_id": "student_club", "final": {"question": "List the name and location of events that underspend its budget.", "sql": "SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0", "source_tables": ["event", "budget"]}, "evidence": "name of event refers to event_name; underspend its budget refers to remaining > 0"}
{"sample_id": 10843, "db_id": "student_club", "final": {"question": "Calculate the percentage of members who are major Business in the list?", "sql": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'", "source_tables": ["major", "member"]}, "evidence": "DIVIDE(SUM(position = 'Member' and major_name = 'Business'), COUNT(member_id)) * 100"}
{"sample_id": 10870, "db_id": "student_club", "final": {"question": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.", "sql": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100", "source_tables": ["event", "expense", "budget"]}, "evidence": "name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100"}
{"sample_id": 10834, "db_id": "student_club", "final": {"question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?", "sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'", "source_tables": ["expense", "member"]}, "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'"}
{"sample_id": 10757, "db_id": "student_club", "final": {"question": "How much did the Student_Club members spend on advertisement in September Meeting?", "sql": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'", "source_tables": ["event", "budget"]}, "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'"}
{"sample_id": 10755, "db_id": "student_club", "final": {"question": "What city and state did the President of the Student_Club grow up?", "sql": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'", "source_tables": ["member", "zip_code"]}, "evidence": "'President' is a position of Student Club;"}
{"sample_id": 10863, "db_id": "student_club", "final": {"question": "How many members have education major in the College of Education & Human Services?", "sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'", "source_tables": ["major", "member"]}, "evidence": "'education' is the major name; 'Member' is a position of club;"}
{"sample_id": 10741, "db_id": "student_club", "final": {"question": "Which college is the vice president of the Student_Club from?", "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'", "source_tables": ["major", "member"]}, "evidence": "Vice President is a position of the Student Club"}
{"sample_id": 10824, "db_id": "student_club", "final": {"question": "What is the most popular size of t-shirt ordered by the club members?", "sql": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1", "source_tables": ["member"]}, "evidence": "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))"}
{"sample_id": 10753, "db_id": "student_club", "final": {"question": "What is the amount of the funds that the Vice President received?", "sql": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'", "source_tables": ["income", "member"]}, "evidence": "'Vice President' is a position of Student Club; funds received refers to amount."}
{"sample_id": 10876, "db_id": "student_club", "final": {"question": "What is the percentage of the cost for the meeting events?", "sql": "SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget", "source_tables": ["event", "expense", "budget"]}, "evidence": "meeting events refers to type = 'Meeting'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100"}
{"sample_id": 10830, "db_id": "student_club", "final": {"question": "Calculate the total cost spent for Parking in the list.", "sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'", "source_tables": ["expense"]}, "evidence": "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'"}
{"sample_id": 10804, "db_id": "student_club", "final": {"question": "Among the students majored in interior design, who have attended the Community Theater event?", "sql": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'", "source_tables": ["major", "member", "attendance", "event"]}, "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;"}
{"sample_id": 10835, "db_id": "student_club", "final": {"question": "Mention the zip code of member who incurred less than 50USD.", "sql": "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50", "source_tables": ["expense", "member"]}, "evidence": "incurred less than 50USD refers to cost < 50"}
{"sample_id": 10795, "db_id": "student_club", "final": {"question": "How many of the members' hometowns are from Maryland state?", "sql": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'", "source_tables": ["member", "zip_code"]}, "evidence": ""}
{"sample_id": 10860, "db_id": "student_club", "final": {"question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".", "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'", "source_tables": ["major", "member"]}, "evidence": ""}
{"sample_id": 10789, "db_id": "student_club", "final": {"question": "Which college do most of the members go to?", "sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1", "source_tables": ["major", "member"]}, "evidence": "college most members go refers to MAX(COUNT(major.college))"}
{"sample_id": 10885, "db_id": "student_club", "final": {"question": "List the event names which were budgeted for the food.", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'", "source_tables": ["event", "budget"]}, "evidence": "budgeted for food refers to category = 'Food'"}
{"sample_id": 10874, "db_id": "student_club", "final": {"question": "What is the average amount paid by students in a position other than a member?", "sql": "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'", "source_tables": ["expense", "member"]}, "evidence": "position other than a member refers to position ! = 'Member'; average amount paid = DIVIDE( SUM(cost), COUNT(event_id))"}
{"sample_id": 10827, "db_id": "student_club", "final": {"question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.", "sql": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC", "source_tables": ["event", "budget"]}, "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category"}
{"sample_id": 10749, "db_id": "student_club", "final": {"question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'", "source_tables": ["event", "member", "attendance"]}, "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;"}
{"sample_id": 10793, "db_id": "student_club", "final": {"question": "How many members attended the \"Women's Soccer\" event?", "sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'", "source_tables": ["event", "attendance"]}, "evidence": "'Women's Soccer' is the event name;"}
{"sample_id": 10831, "db_id": "student_club", "final": {"question": "Mention the total expense used on 8/20/2019.", "sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'", "source_tables": ["expense"]}, "evidence": "total expense refers SUM(cost) where expense_date = '2019-08-20'"}
{"sample_id": 10747, "db_id": "student_club", "final": {"question": "What is the most expensive item that was spent in support of club events?", "sql": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1", "source_tables": ["expense"]}, "evidence": "item in support of club events refers to expense_description; most expensive refers to MAX(cost)"}
{"sample_id": 10832, "db_id": "student_club", "final": {"question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?", "sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'", "source_tables": ["expense", "member"]}, "evidence": "full name refers to first_name, last name"}
{"sample_id": 10807, "db_id": "student_club", "final": {"question": "Which student was able to generate income more than $40?", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40", "source_tables": ["income", "member"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40"}
{"sample_id": 10851, "db_id": "student_club", "final": {"question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?", "sql": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'", "source_tables": ["event", "member", "attendance"]}, "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location"}
{"sample_id": 10759, "db_id": "student_club", "final": {"question": "What is the total budgeted amount for all category in \"October Speaker\" event?", "sql": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'", "source_tables": ["event", "budget"]}, "evidence": "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'"}
{"sample_id": 10857, "db_id": "student_club", "final": {"question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.", "sql": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'", "source_tables": ["event"]}, "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; "}
{"sample_id": 10767, "db_id": "student_club", "final": {"question": "How many majors are there in \"College of Humanities and Social Sciences\"?", "sql": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'", "source_tables": ["major"]}, "evidence": ""}
{"sample_id": 10844, "db_id": "student_club", "final": {"question": "State the category of events were held at MU 215.", "sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'", "source_tables": ["event", "budget"]}, "evidence": "'MU 215' is the location of event; "}
{"sample_id": 10771, "db_id": "student_club", "final": {"question": "Provide the total number of the budget amount for \"September Speaker\" event.", "sql": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'", "source_tables": ["event", "budget"]}, "evidence": "'September Speaker' is an event name; total number of budget amount refers to SUM(amount)"}
{"sample_id": 10758, "db_id": "student_club", "final": {"question": "What department offers the major that Pierce and Guidi took?", "sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'", "source_tables": ["major", "member"]}, "evidence": ""}
{"sample_id": 10762, "db_id": "student_club", "final": {"question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.", "sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event", "source_tables": ["event", "budget"]}, "evidence": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)"}
{"sample_id": 10826, "db_id": "student_club", "final": {"question": "Identify the type of expenses and their total value approved for 'October Meeting' event.", "sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'", "source_tables": ["event", "expense", "budget"]}, "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;"}
{"sample_id": 10884, "db_id": "student_club", "final": {"question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?", "sql": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'", "source_tables": ["event", "budget"]}, "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;"}
{"sample_id": 10890, "db_id": "student_club", "final": {"question": "Where is the hometown of Garrett Gerke?", "sql": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'", "source_tables": ["member", "zip_code"]}, "evidence": "hometown refers to city"}
{"sample_id": 10774, "db_id": "student_club", "final": {"question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?", "sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'", "source_tables": ["major", "member"]}, "evidence": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'"}
{"sample_id": 10871, "db_id": "student_club", "final": {"question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?", "sql": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100", "source_tables": ["major", "expense", "member"]}, "evidence": "full name refers to first_name, last_name; major of members refers to major_name; spend more than a hundred dollars on an expense refers to cost > 100"}
{"sample_id": 10881, "db_id": "student_club", "final": {"question": "What is the major of Garrett Gerke and which department does it belong to?", "sql": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'", "source_tables": ["major", "member"]}, "evidence": "major refers to major name;"}
{"sample_id": 10803, "db_id": "student_club", "final": {"question": "List the name of students that have attended more than 7 events.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7", "source_tables": ["member", "attendance"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7"}
{"sample_id": 10751, "db_id": "student_club", "final": {"question": "What county did Sherri Ramsey grew up?", "sql": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'", "source_tables": ["member", "zip_code"]}, "evidence": ""}
{"sample_id": 10817, "db_id": "student_club", "final": {"question": "How many members did attend the event 'Community Theater' in 2019?", "sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'", "source_tables": ["event", "attendance"]}, "evidence": "event 'Community Theater' in 2019 refers to event_name = 'Community Theater' where YEAR(event_date) = 2019"}
{"sample_id": 10775, "db_id": "student_club", "final": {"question": "What's Christof Nielson's zip code type?", "sql": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'", "source_tables": ["member", "zip_code"]}, "evidence": ""}
{"sample_id": 10847, "db_id": "student_club", "final": {"question": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?", "sql": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'", "source_tables": ["major"]}, "evidence": ""}
{"sample_id": 10797, "db_id": "student_club", "final": {"question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'", "source_tables": ["major", "member"]}, "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;"}
{"sample_id": 10872, "db_id": "student_club", "final": {"question": "In the events with more than forty incomes, list the city and country in which the event is happening.", "sql": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40", "source_tables": ["member", "income", "zip_code"]}, "evidence": "more than fifty incomes refers to income > 40"}
{"sample_id": 10880, "db_id": "student_club", "final": {"question": "Calculate the difference in the percentage of members in New Jersey and Vermont.", "sql": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip", "source_tables": ["member", "zip_code"]}, "evidence": "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )"}
{"sample_id": 10809, "db_id": "student_club", "final": {"question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?", "sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'", "source_tables": ["event", "expense", "member", "budget"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;"}
{"sample_id": 10864, "db_id": "student_club", "final": {"question": "What is the percentage of the events that went over budget?", "sql": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget", "source_tables": ["budget"]}, "evidence": "went over budget refers to remaining < 0; percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100"}
{"sample_id": 10784, "db_id": "student_club", "final": {"question": "How many cities are there in Orange County, Virginia?", "sql": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'", "source_tables": ["zip_code"]}, "evidence": "Orange County is the county name, Virginia is the state name"}
{"sample_id": 10798, "db_id": "student_club", "final": {"question": "Among all the closed events, which event has the highest spend-to-budget ratio?", "sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1", "source_tables": ["event", "budget"]}, "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))"}
{"sample_id": 10828, "db_id": "student_club", "final": {"question": "Among the budgets for Food, which one has the highest budgeted amount?", "sql": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )", "source_tables": ["budget"]}, "evidence": "MAX(amount) where category = 'Food'"}
{"sample_id": 10761, "db_id": "student_club", "final": {"question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.", "sql": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')", "source_tables": ["expense", "member"]}, "evidence": "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10"}
{"sample_id": 10737, "db_id": "student_club", "final": {"question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?", "sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'", "source_tables": ["event", "attendance"]}, "evidence": "Women's Soccer is an event name"}
{"sample_id": 10738, "db_id": "student_club", "final": {"question": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".", "sql": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'", "source_tables": ["event", "member", "attendance"]}, "evidence": "Women's Soccer is an event name; phone numbers refers to phone"}
{"sample_id": 10748, "db_id": "student_club", "final": {"question": "How many members of the Student_Club have majored Environmental Engineering?\n", "sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'", "source_tables": ["major", "member"]}, "evidence": "'Environmental Engineering' is the major name"}
{"sample_id": 10773, "db_id": "student_club", "final": {"question": "What was Brent Thomason's major?", "sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'", "source_tables": ["major", "member"]}, "evidence": "Brent Thomason is the full name; full name refers to first_name, last_name; major refers to major_name"}
{"sample_id": 10743, "db_id": "student_club", "final": {"question": "How many events of the Student_Club did Sacha Harrison attend in 2019?", "sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'", "source_tables": ["event", "member", "attendance"]}, "evidence": "events attended in 2019 refers to YEAR(event_date) = 2019"}
{"sample_id": 10765, "db_id": "student_club", "final": {"question": "With the biggest budget for the \"Food\", what was the remaining of it?", "sql": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )", "source_tables": ["budget"]}, "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'"}
{"sample_id": 10777, "db_id": "student_club", "final": {"question": "Where is the hometown state for \"Sacha Harrison\"?", "sql": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'", "source_tables": ["member", "zip_code"]}, "evidence": "hometown state refers to state;"}
{"sample_id": 10822, "db_id": "student_club", "final": {"question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'", "sql": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'", "source_tables": ["event"]}, "evidence": "DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'"}
{"sample_id": 10887, "db_id": "student_club", "final": {"question": "Which budget category does the expense 'Posters' fall to?", "sql": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'", "source_tables": ["expense", "budget"]}, "evidence": "'Posters' refers to expense description"}
{"sample_id": 10812, "db_id": "student_club", "final": {"question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?", "sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget", "source_tables": ["event", "expense", "budget"]}, "evidence": "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100"}
{"sample_id": 10858, "db_id": "student_club", "final": {"question": "Please provide links to events for members who have paid more than 50 dollar.", "sql": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50", "source_tables": ["expense", "member", "attendance"]}, "evidence": "have paid more than 50 dollar refers to cost > 50"}
{"sample_id": 10888, "db_id": "student_club", "final": {"question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.", "sql": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'", "source_tables": ["major", "member"]}, "evidence": "full name refers to first_name, last name"}
{"sample_id": 10785, "db_id": "student_club", "final": {"question": "List all of the College of Humanities and Social Sciences' departments.", "sql": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'", "source_tables": ["major"]}, "evidence": ""}
{"sample_id": 10882, "db_id": "student_club", "final": {"question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.", "sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'", "source_tables": ["expense", "member"]}, "evidence": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'"}
{"sample_id": 10754, "db_id": "student_club", "final": {"question": "How much did the Student_Club members spend on food in September Meeting?", "sql": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'", "source_tables": ["event", "budget"]}, "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'"}
{"sample_id": 10734, "db_id": "student_club", "final": {"question": "What's Angela Sanders's major?", "sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'", "source_tables": ["major", "member"]}, "evidence": "Angela Sanders is the full name; full name refers to first_name, last_name; major refers to major_name."}
{"sample_id": 10778, "db_id": "student_club", "final": {"question": "Which department was the President of the club in?", "sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'", "source_tables": ["major", "member"]}, "evidence": "'President' is a position of Student Club"}
{"sample_id": 10810, "db_id": "student_club", "final": {"question": "Which students manage to generate the highest income. State his/her full name along with the income source.", "sql": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1", "source_tables": ["income", "member"]}, "evidence": "name of students means the full name; full name refers to first_name, last_name; generate the highest income refers to MAX(income.amount);"}
{"sample_id": 10801, "db_id": "student_club", "final": {"question": "How many meeting events were held in 2020?", "sql": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'", "source_tables": ["event"]}, "evidence": "meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020"}
{"sample_id": 10772, "db_id": "student_club", "final": {"question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?", "sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'", "source_tables": ["expense", "budget"]}, "evidence": "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status"}
{"sample_id": 10750, "db_id": "student_club", "final": {"question": "List the last name of all the students who majored Law and Constitutional Studies. \n", "sql": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'", "source_tables": ["major", "member"]}, "evidence": "'Law and Constitutional Studies' is the major name"}
{"sample_id": 10862, "db_id": "student_club", "final": {"question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.", "sql": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20", "source_tables": ["expense", "member"]}, "evidence": "expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20"}
{"sample_id": 10788, "db_id": "student_club", "final": {"question": "List all the members who attended the event \"October Meeting\".", "sql": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'", "source_tables": ["event", "member", "attendance"]}, "evidence": "'October Meeting' is an event name;"}
{"sample_id": 10873, "db_id": "student_club", "final": {"question": "Among the members who incurred expenses in more than one event, who paid the most amount?", "sql": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1", "source_tables": ["event", "expense", "member", "budget"]}, "evidence": "paid the most amount refers to for expense incurred in more than one event refers to MAX(cost where COUNT(event_id) > 1)"}
{"sample_id": 10736, "db_id": "student_club", "final": {"question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'", "source_tables": ["major", "member"]}, "evidence": "full name refers to first_name, last_name;"}
{"sample_id": 10769, "db_id": "student_club", "final": {"question": "Tell the hometown county for \"Adela O'Gallagher\".", "sql": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'", "source_tables": ["member", "zip_code"]}, "evidence": "hometown county refers to county"}
{"sample_id": 10792, "db_id": "student_club", "final": {"question": "List all the expenses incurred by the vice president.", "sql": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'", "source_tables": ["expense", "member"]}, "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club"}
{"sample_id": 10802, "db_id": "student_club", "final": {"question": "What is the total amount of money spent for food?", "sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'", "source_tables": ["budget"]}, "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'"}
{"sample_id": 10868, "db_id": "student_club", "final": {"question": "Calculate the percentage of zip codes that are PO boxes.", "sql": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code", "source_tables": ["zip_code"]}, "evidence": "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100"}
{"sample_id": 10756, "db_id": "student_club", "final": {"question": "List the full name of the Student_Club members that grew up in Illinois state.", "sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'", "source_tables": ["member", "zip_code"]}, "evidence": "full name of member refers to first_name, last_name"}
{"sample_id": 10745, "db_id": "student_club", "final": {"question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.", "sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'", "source_tables": ["event", "attendance"]}, "evidence": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20."}
{"sample_id": 10829, "db_id": "student_club", "final": {"question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?", "sql": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3", "source_tables": ["budget"]}, "evidence": "MAX(amount) where category = 'Advertisement'"}
{"sample_id": 10889, "db_id": "student_club", "final": {"question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.", "sql": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name", "source_tables": ["event", "budget"]}, "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'"}
{"sample_id": 10806, "db_id": "student_club", "final": {"question": "How many income generated by Grant Gilmour?", "sql": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'", "source_tables": ["income", "member"]}, "evidence": "income generated refers to income.amount"}
{"sample_id": 10782, "db_id": "student_club", "final": {"question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?", "sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'", "source_tables": ["event", "budget"]}, "evidence": "DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100"}
{"sample_id": 10739, "db_id": "student_club", "final": {"question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?", "sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'", "source_tables": ["event", "member", "attendance"]}, "evidence": "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'"}
{"sample_id": 10823, "db_id": "student_club", "final": {"question": "Indicate the cost of posters for 'September Speaker' event.", "sql": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'", "source_tables": ["event", "expense", "budget"]}, "evidence": "'Posters' is the expense description; 'September Speaker' is an event name"}
{"sample_id": 10861, "db_id": "student_club", "final": {"question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.", "sql": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'", "source_tables": ["major", "member"]}, "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone"}
{"sample_id": 10877, "db_id": "student_club", "final": {"question": "Which budget allowed the most money for water, chips, and cookies?", "sql": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1", "source_tables": ["expense", "budget"]}, "evidence": "budget allowed refers to expense_description; expense_description = 'Water, chips, cookies'; most money refers to MAX(cost)"}
{"sample_id": 10886, "db_id": "student_club", "final": {"question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.", "sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'", "source_tables": ["event", "income", "member", "attendance"]}, "evidence": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received"}
{"sample_id": 10902, "db_id": "debit_card_specializing", "final": {"question": "What was the gas consumption peak month for SME customers in 2013?", "sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10927, "db_id": "debit_card_specializing", "final": {"question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?", "sql": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00", "source_tables": ["yearmonth", "customers"]}, "evidence": "Pays in euro = Currency = 'EUR'."}
{"sample_id": 10914, "db_id": "debit_card_specializing", "final": {"question": "What percentage of KAM customers pay in euros?", "sql": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'", "source_tables": ["customers"]}, "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%."}
{"sample_id": 10917, "db_id": "debit_card_specializing", "final": {"question": "Which client ID consumed the most in September 2013?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "September 2013 refers to yearmonth.date = '201309'"}
{"sample_id": 10895, "db_id": "debit_card_specializing", "final": {"question": "What was the average monthly consumption of customers in SME for the year 2013?", "sql": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'", "source_tables": ["yearmonth", "customers"]}, "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year."}
{"sample_id": 10921, "db_id": "debit_card_specializing", "final": {"question": "What is the biggest monthly consumption of the customers who use euro as their currency?", "sql": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "Monthly consumption = SUM(consumption) / 12"}
{"sample_id": 10928, "db_id": "debit_card_specializing", "final": {"question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.", "sql": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'", "source_tables": ["transactions_1k", "products", "gasstations"]}, "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; "}
{"sample_id": 10906, "db_id": "debit_card_specializing", "final": {"question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?", "sql": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'", "source_tables": ["gasstations"]}, "evidence": "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia"}
{"sample_id": 10931, "db_id": "debit_card_specializing", "final": {"question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?", "sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'"}
{"sample_id": 10944, "db_id": "debit_card_specializing", "final": {"question": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?", "sql": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17", "source_tables": ["yearmonth", "customers"]}, "evidence": "June of 2013 means Date contains '201306' in the yearmonth.date of the database"}
{"sample_id": 10898, "db_id": "debit_card_specializing", "final": {"question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?", "sql": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'", "source_tables": ["yearmonth", "customers"]}, "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012"}
{"sample_id": 10938, "db_id": "debit_card_specializing", "final": {"question": "How many transactions were paid in CZK in the morning of 2012/8/26?", "sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'", "source_tables": ["customers", "transactions_1k"]}, "evidence": "'2012/8/26' can be represented by '2012-08-26'; The morning refers to the time before '13:00:00'"}
{"sample_id": 10919, "db_id": "debit_card_specializing", "final": {"question": "Which SME customer consumed the least in June 2012?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "June 2012 refers to yearmonth.date = '201206'"}
{"sample_id": 10949, "db_id": "debit_card_specializing", "final": {"question": "Which gas station has the highest amount of revenue?", "sql": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1", "source_tables": ["transactions_1k"]}, "evidence": ""}
{"sample_id": 10932, "db_id": "debit_card_specializing", "final": {"question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?", "sql": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'"}
{"sample_id": 10899, "db_id": "debit_card_specializing", "final": {"question": "Which year recorded the most gas use paid in EUR?", "sql": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": ""}
{"sample_id": 10947, "db_id": "debit_card_specializing", "final": {"question": "What is the percentage of the customers who used EUR in 2012/8/25?", "sql": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'", "source_tables": ["customers", "transactions_1k"]}, "evidence": "'2012/8/25' can be represented by '2012-08-25'"}
{"sample_id": 10923, "db_id": "debit_card_specializing", "final": {"question": "Please list the countries of the gas stations with transactions taken place in June, 2013.", "sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'", "source_tables": ["yearmonth", "transactions_1k", "gasstations"]}, "evidence": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;"}
{"sample_id": 10954, "db_id": "debit_card_specializing", "final": {"question": "Which country had the gas station that sold the most expensive product id No.2 for one unit?", "sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1", "source_tables": ["transactions_1k", "gasstations"]}, "evidence": ""}
{"sample_id": 10912, "db_id": "debit_card_specializing", "final": {"question": "How many percent of LAM customer consumed more than 46.73?", "sql": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'", "source_tables": ["yearmonth", "customers"]}, "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100."}
{"sample_id": 10933, "db_id": "debit_card_specializing", "final": {"question": "For the customers who paid in the euro, what is their average total price of the transactions?", "sql": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'", "source_tables": ["customers", "transactions_1k", "gasstations"]}, "evidence": ""}
{"sample_id": 10950, "db_id": "debit_card_specializing", "final": {"question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?", "sql": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations", "source_tables": ["gasstations"]}, "evidence": ""}
{"sample_id": 10908, "db_id": "debit_card_specializing", "final": {"question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?", "sql": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'", "source_tables": ["customers"]}, "evidence": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR"}
{"sample_id": 10893, "db_id": "debit_card_specializing", "final": {"question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?", "sql": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers", "source_tables": ["customers"]}, "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK')."}
{"sample_id": 10911, "db_id": "debit_card_specializing", "final": {"question": "How much did the KAM customers consume in total in May 2013?", "sql": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'", "source_tables": ["yearmonth", "customers"]}, "evidence": "May 2013 refers to yearmonth.date = 201305"}
{"sample_id": 10909, "db_id": "debit_card_specializing", "final": {"question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?", "sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "October 2013 refers to 201310 in the yearmonth.date"}
{"sample_id": 10918, "db_id": "debit_card_specializing", "final": {"question": "Which client segment consumed the least in September 2013?", "sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "September 2013 refers to yearmonth.date = '201309'"}
{"sample_id": 10955, "db_id": "debit_card_specializing", "final": {"question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.", "sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'", "source_tables": ["yearmonth", "transactions_1k"]}, "evidence": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;"}
{"sample_id": 10925, "db_id": "debit_card_specializing", "final": {"question": "Please list the product description of the products bought in transactions in euro.", "sql": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'", "source_tables": ["customers", "transactions_1k", "products"]}, "evidence": ""}
{"sample_id": 10900, "db_id": "debit_card_specializing", "final": {"question": "Which segment had the least consumption?", "sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": ""}
{"sample_id": 10926, "db_id": "debit_card_specializing", "final": {"question": "What is the average total price of the transactions taken place in January, 2012?", "sql": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'", "source_tables": ["transactions_1k"]}, "evidence": "In January, 2012 means Date contains '2012-01'"}
{"sample_id": 10915, "db_id": "debit_card_specializing", "final": {"question": "In February 2012, what percentage of customers consumed more than 528.3?", "sql": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'", "source_tables": ["yearmonth"]}, "evidence": "February 2012 refers to '201202' in yearmonth.date; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."}
{"sample_id": 10901, "db_id": "debit_card_specializing", "final": {"question": "Which year recorded the most consumption of gas paid in CZK?", "sql": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "source_tables": ["yearmonth", "customers"]}, "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year."}
{"sample_id": 10951, "db_id": "debit_card_specializing", "final": {"question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?", "sql": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'", "source_tables": ["yearmonth", "transactions_1k", "gasstations"]}, "evidence": "January 2012 refers to the Date value = '201201'"}
{"sample_id": 10934, "db_id": "debit_card_specializing", "final": {"question": "Which customer paid the most in 2012/8/25?", "sql": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1", "source_tables": ["transactions_1k"]}, "evidence": "'2012/8/25' can be represented by '2012-08-25'"}
{"sample_id": 10916, "db_id": "debit_card_specializing", "final": {"question": "What percentage of Slovakian gas stations are premium?", "sql": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'", "source_tables": ["gasstations"]}, "evidence": "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%."}
{"sample_id": 10936, "db_id": "debit_card_specializing", "final": {"question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?", "sql": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'", "source_tables": ["customers", "transactions_1k", "gasstations"]}, "evidence": "'2012/8/24' can be represented by '2012-08-24'; "}
{"sample_id": 10942, "db_id": "debit_card_specializing", "final": {"question": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?", "sql": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'", "source_tables": ["yearmonth", "transactions_1k"]}, "evidence": "'2012/8/24' can be represented by '2012-08-24'; expense and the consumption has the similar meaning."}
